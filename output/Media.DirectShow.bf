using System;

// namespace Media.DirectShow
namespace Win32
{
	extension Win32
	{
		// --- Constants ---
		
		public const uint32 EC_SND_DEVICE_ERROR_BASE = 512;
		public const uint32 EC_SNDDEV_IN_ERROR = 512;
		public const uint32 EC_SNDDEV_OUT_ERROR = 513;
		public const uint32 EC_SYSTEMBASE = 0;
		public const uint32 EC_USER = 32768;
		public const uint32 EC_COMPLETE = 1;
		public const uint32 EC_USERABORT = 2;
		public const uint32 EC_ERRORABORT = 3;
		public const uint32 EC_TIME = 4;
		public const uint32 EC_REPAINT = 5;
		public const uint32 EC_STREAM_ERROR_STOPPED = 6;
		public const uint32 EC_STREAM_ERROR_STILLPLAYING = 7;
		public const uint32 EC_ERROR_STILLPLAYING = 8;
		public const uint32 EC_PALETTE_CHANGED = 9;
		public const uint32 EC_VIDEO_SIZE_CHANGED = 10;
		public const uint32 EC_QUALITY_CHANGE = 11;
		public const uint32 EC_SHUTTING_DOWN = 12;
		public const uint32 EC_CLOCK_CHANGED = 13;
		public const uint32 EC_PAUSED = 14;
		public const uint32 EC_OPENING_FILE = 16;
		public const uint32 EC_BUFFERING_DATA = 17;
		public const uint32 EC_FULLSCREEN_LOST = 18;
		public const uint32 EC_ACTIVATE = 19;
		public const uint32 EC_NEED_RESTART = 20;
		public const uint32 EC_WINDOW_DESTROYED = 21;
		public const uint32 EC_DISPLAY_CHANGED = 22;
		public const uint32 EC_STARVATION = 23;
		public const uint32 EC_OLE_EVENT = 24;
		public const uint32 EC_NOTIFY_WINDOW = 25;
		public const uint32 EC_STREAM_CONTROL_STOPPED = 26;
		public const uint32 EC_STREAM_CONTROL_STARTED = 27;
		public const uint32 EC_END_OF_SEGMENT = 28;
		public const uint32 EC_SEGMENT_STARTED = 29;
		public const uint32 EC_LENGTH_CHANGED = 30;
		public const uint32 EC_DEVICE_LOST = 31;
		public const uint32 EC_SAMPLE_NEEDED = 32;
		public const uint32 EC_PROCESSING_LATENCY = 33;
		public const uint32 EC_SAMPLE_LATENCY = 34;
		public const uint32 EC_SCRUB_TIME = 35;
		public const uint32 EC_STEP_COMPLETE = 36;
		public const uint32 EC_TIMECODE_AVAILABLE = 48;
		public const uint32 EC_EXTDEVICE_MODE_CHANGE = 49;
		public const uint32 EC_STATE_CHANGE = 50;
		public const uint32 EC_GRAPH_CHANGED = 80;
		public const uint32 EC_CLOCK_UNSET = 81;
		public const uint32 EC_VMR_RENDERDEVICE_SET = 83;
		public const uint32 VMR_RENDER_DEVICE_OVERLAY = 1;
		public const uint32 VMR_RENDER_DEVICE_VIDMEM = 2;
		public const uint32 VMR_RENDER_DEVICE_SYSMEM = 4;
		public const uint32 EC_VMR_SURFACE_FLIPPED = 84;
		public const uint32 EC_VMR_RECONNECTION_FAILED = 85;
		public const uint32 EC_PREPROCESS_COMPLETE = 86;
		public const uint32 EC_CODECAPI_EVENT = 87;
		public const uint32 EC_WMT_EVENT_BASE = 593;
		public const uint32 EC_WMT_INDEX_EVENT = 593;
		public const uint32 EC_WMT_EVENT = 594;
		public const uint32 EC_BUILT = 768;
		public const uint32 EC_UNBUILT = 769;
		public const uint32 EC_SKIP_FRAMES = 37;
		public const uint32 EC_PLEASE_REOPEN = 64;
		public const uint32 EC_STATUS = 65;
		public const uint32 EC_MARKER_HIT = 66;
		public const uint32 EC_LOADSTATUS = 67;
		public const uint32 EC_FILE_CLOSED = 68;
		public const uint32 EC_ERRORABORTEX = 69;
		public const uint32 AM_LOADSTATUS_CLOSED = 0;
		public const uint32 AM_LOADSTATUS_LOADINGDESCR = 1;
		public const uint32 AM_LOADSTATUS_LOADINGMCAST = 2;
		public const uint32 AM_LOADSTATUS_LOCATING = 3;
		public const uint32 AM_LOADSTATUS_CONNECTING = 4;
		public const uint32 AM_LOADSTATUS_OPENING = 5;
		public const uint32 AM_LOADSTATUS_OPEN = 6;
		public const uint32 EC_NEW_PIN = 32;
		public const uint32 EC_RENDER_FINISHED = 33;
		public const uint32 EC_EOS_SOON = 70;
		public const uint32 EC_CONTENTPROPERTY_CHANGED = 71;
		public const uint32 AM_CONTENTPROPERTY_TITLE = 1;
		public const uint32 AM_CONTENTPROPERTY_AUTHOR = 2;
		public const uint32 AM_CONTENTPROPERTY_COPYRIGHT = 4;
		public const uint32 AM_CONTENTPROPERTY_DESCRIPTION = 8;
		public const uint32 EC_BANDWIDTHCHANGE = 72;
		public const uint32 EC_VIDEOFRAMEREADY = 73;
		public const uint32 EC_DVDBASE = 256;
		public const uint32 EC_DVD_DOMAIN_CHANGE = 257;
		public const uint32 EC_DVD_TITLE_CHANGE = 258;
		public const uint32 EC_DVD_CHAPTER_START = 259;
		public const uint32 EC_DVD_AUDIO_STREAM_CHANGE = 260;
		public const uint32 EC_DVD_SUBPICTURE_STREAM_CHANGE = 261;
		public const uint32 EC_DVD_ANGLE_CHANGE = 262;
		public const uint32 EC_DVD_BUTTON_CHANGE = 263;
		public const uint32 EC_DVD_VALID_UOPS_CHANGE = 264;
		public const uint32 EC_DVD_STILL_ON = 265;
		public const uint32 EC_DVD_STILL_OFF = 266;
		public const uint32 EC_DVD_CURRENT_TIME = 267;
		public const uint32 EC_DVD_ERROR = 268;
		public const uint32 EC_DVD_WARNING = 269;
		public const uint32 EC_DVD_CHAPTER_AUTOSTOP = 270;
		public const uint32 EC_DVD_NO_FP_PGC = 271;
		public const uint32 EC_DVD_PLAYBACK_RATE_CHANGE = 272;
		public const uint32 EC_DVD_PARENTAL_LEVEL_CHANGE = 273;
		public const uint32 EC_DVD_PLAYBACK_STOPPED = 274;
		public const uint32 EC_DVD_ANGLES_AVAILABLE = 275;
		public const uint32 EC_DVD_PLAYPERIOD_AUTOSTOP = 276;
		public const uint32 EC_DVD_BUTTON_AUTO_ACTIVATED = 277;
		public const uint32 EC_DVD_CMD_START = 278;
		public const uint32 EC_DVD_CMD_END = 279;
		public const uint32 EC_DVD_DISC_EJECTED = 280;
		public const uint32 EC_DVD_DISC_INSERTED = 281;
		public const uint32 EC_DVD_CURRENT_HMSF_TIME = 282;
		public const uint32 EC_DVD_KARAOKE_MODE = 283;
		public const uint32 EC_DVD_PROGRAM_CELL_CHANGE = 284;
		public const uint32 EC_DVD_TITLE_SET_CHANGE = 285;
		public const uint32 EC_DVD_PROGRAM_CHAIN_CHANGE = 286;
		public const uint32 EC_DVD_VOBU_Offset = 287;
		public const uint32 EC_DVD_VOBU_Timestamp = 288;
		public const uint32 EC_DVD_GPRM_Change = 289;
		public const uint32 EC_DVD_SPRM_Change = 290;
		public const uint32 EC_DVD_BeginNavigationCommands = 291;
		public const uint32 EC_DVD_NavigationCommand = 292;
		public const uint32 AM_AC3_ALTERNATE_AUDIO_1 = 1;
		public const uint32 AM_AC3_ALTERNATE_AUDIO_2 = 2;
		public const uint32 AM_AC3_ALTERNATE_AUDIO_BOTH = 3;
		public const uint32 AM_AC3_SERVICE_MAIN_AUDIO = 0;
		public const uint32 AM_AC3_SERVICE_NO_DIALOG = 1;
		public const uint32 AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2;
		public const uint32 AM_AC3_SERVICE_HEARING_IMPAIRED = 3;
		public const uint32 AM_AC3_SERVICE_DIALOG_ONLY = 4;
		public const uint32 AM_AC3_SERVICE_COMMENTARY = 5;
		public const uint32 AM_AC3_SERVICE_EMERGENCY_FLASH = 6;
		public const uint32 AM_AC3_SERVICE_VOICE_OVER = 7;
		public const uint32 AM_UseNewCSSKey = 1;
		public const uint32 AM_ReverseBlockStart = 2;
		public const uint32 AM_ReverseBlockEnd = 4;
		public const uint32 AM_DVD_CGMS_RESERVED_MASK = 120;
		public const uint32 AM_DVD_CGMS_COPY_PROTECT_MASK = 24;
		public const uint32 AM_DVD_CGMS_COPY_PERMITTED = 0;
		public const uint32 AM_DVD_CGMS_COPY_ONCE = 16;
		public const uint32 AM_DVD_CGMS_NO_COPY = 24;
		public const uint32 AM_DVD_COPYRIGHT_MASK = 64;
		public const uint32 AM_DVD_NOT_COPYRIGHTED = 0;
		public const uint32 AM_DVD_COPYRIGHTED = 64;
		public const uint32 AM_DVD_SECTOR_PROTECT_MASK = 32;
		public const uint32 AM_DVD_SECTOR_NOT_PROTECTED = 0;
		public const uint32 AM_DVD_SECTOR_PROTECTED = 32;
		public const uint32 AMINTERLACE_IsInterlaced = 1;
		public const uint32 AMINTERLACE_1FieldPerSample = 2;
		public const uint32 AMINTERLACE_Field1First = 4;
		public const uint32 AMINTERLACE_UNUSED = 8;
		public const uint32 AMINTERLACE_FieldPatternMask = 48;
		public const uint32 AMINTERLACE_FieldPatField1Only = 0;
		public const uint32 AMINTERLACE_FieldPatField2Only = 16;
		public const uint32 AMINTERLACE_FieldPatBothRegular = 32;
		public const uint32 AMINTERLACE_FieldPatBothIrregular = 48;
		public const uint32 AMINTERLACE_DisplayModeMask = 192;
		public const uint32 AMINTERLACE_DisplayModeBobOnly = 0;
		public const uint32 AMINTERLACE_DisplayModeWeaveOnly = 64;
		public const uint32 AMINTERLACE_DisplayModeBobOrWeave = 128;
		public const uint32 AMCOPYPROTECT_RestrictDuplication = 1;
		public const uint32 AMCONTROL_USED = 1;
		public const uint32 AMCONTROL_PAD_TO_4x3 = 2;
		public const uint32 AMCONTROL_PAD_TO_16x9 = 4;
		public const uint32 AMCONTROL_COLORINFO_PRESENT = 128;
		public const int32 AM_VIDEO_FLAG_FIELD_MASK = 3;
		public const int32 AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0;
		public const int32 AM_VIDEO_FLAG_FIELD1 = 1;
		public const int32 AM_VIDEO_FLAG_FIELD2 = 2;
		public const int32 AM_VIDEO_FLAG_FIELD1FIRST = 4;
		public const int32 AM_VIDEO_FLAG_WEAVE = 8;
		public const int32 AM_VIDEO_FLAG_IPB_MASK = 48;
		public const int32 AM_VIDEO_FLAG_I_SAMPLE = 0;
		public const int32 AM_VIDEO_FLAG_P_SAMPLE = 16;
		public const int32 AM_VIDEO_FLAG_B_SAMPLE = 32;
		public const int32 AM_VIDEO_FLAG_REPEAT_FIELD = 64;
		public const uint32 AVIF_HASINDEX = 16;
		public const uint32 AVIF_MUSTUSEINDEX = 32;
		public const uint32 AVIF_ISINTERLEAVED = 256;
		public const uint32 AVIF_TRUSTCKTYPE = 2048;
		public const uint32 AVIF_WASCAPTUREFILE = 65536;
		public const uint32 AVIF_COPYRIGHTED = 131072;
		public const uint32 AVI_HEADERSIZE = 2048;
		public const uint32 AVISF_DISABLED = 1;
		public const uint32 AVISF_VIDEO_PALCHANGES = 65536;
		public const int32 AVIIF_LIST = 1;
		public const int32 AVIIF_KEYFRAME = 16;
		public const int32 AVIIF_FIRSTPART = 32;
		public const int32 AVIIF_LASTPART = 64;
		public const int32 AVIIF_NOTIME = 256;
		public const int32 AVIIF_COMPUSE = 268369920;
		public const uint32 AVIIF_NO_TIME = 256;
		public const uint32 AVIIF_COMPRESSOR = 268369920;
		public const uint32 TIMECODE_RATE_30DROP = 0;
		public const uint32 TIMECODE_SMPTE_BINARY_GROUP = 7;
		public const uint32 TIMECODE_SMPTE_COLOR_FRAME = 8;
		public const uint32 AVI_INDEX_OF_INDEXES = 0;
		public const uint32 AVI_INDEX_OF_CHUNKS = 1;
		public const uint32 AVI_INDEX_OF_TIMED_CHUNKS = 2;
		public const uint32 AVI_INDEX_OF_SUB_2FIELD = 3;
		public const uint32 AVI_INDEX_IS_DATA = 128;
		public const uint32 AVI_INDEX_SUB_DEFAULT = 0;
		public const uint32 AVI_INDEX_SUB_2FIELD = 1;
		public const uint32 STDINDEXSIZE = 16384;
		public const uint32 AVISTDINDEX_DELTAFRAME = 2147483648;
		public const uint32 AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295;
		public const uint32 AMVA_QUERYRENDERSTATUSF_READ = 1;
		public const uint32 MIN_DIMENSION = 1;
		public const int32 BDA_PLP_ID_NOT_SET = -1;
		public const uint32 CDEF_CLASS_DEFAULT = 1;
		public const uint32 CDEF_BYPASS_CLASS_MANAGER = 2;
		public const uint32 CDEF_MERIT_ABOVE_DO_NOT_USE = 8;
		public const uint32 CDEF_DEVMON_CMGR_DEVICE = 16;
		public const uint32 CDEF_DEVMON_DMO = 32;
		public const uint32 CDEF_DEVMON_PNP_DEVICE = 64;
		public const uint32 CDEF_DEVMON_FILTER = 128;
		public const uint32 CDEF_DEVMON_SELECTIVE_MASK = 240;
		public const uint32 CHARS_IN_GUID = 39;
		public const uint32 MAX_PIN_NAME = 128;
		public const uint32 MAX_FILTER_NAME = 128;
		public const uint32 AM_GBF_PREVFRAMESKIPPED = 1;
		public const uint32 AM_GBF_NOTASYNCPOINT = 2;
		public const uint32 AM_GBF_NOWAIT = 4;
		public const uint32 AM_GBF_NODDSURFACELOCK = 8;
		public const double AMF_AUTOMATICGAIN = -1;
		public const uint32 AnalogVideo_NTSC_Mask = 7;
		public const uint32 AnalogVideo_PAL_Mask = 1052656;
		public const uint32 AnalogVideo_SECAM_Mask = 1044480;
		public const uint32 MPEG2_PROGRAM_STREAM_MAP = 0;
		public const uint32 MPEG2_PROGRAM_ELEMENTARY_STREAM = 1;
		public const uint32 MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2;
		public const uint32 MPEG2_PROGRAM_PACK_HEADER = 3;
		public const uint32 MPEG2_PROGRAM_PES_STREAM = 4;
		public const uint32 MPEG2_PROGRAM_SYSTEM_HEADER = 5;
		public const uint32 SUBSTREAM_FILTER_VAL_NONE = 268435456;
		public const uint32 AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1;
		public const uint32 VMR_NOTSUPPORTED = 0;
		public const uint32 VMR_SUPPORTED = 1;
		public const uint32 AM_QUERY_DECODER_VMR_SUPPORT = 1;
		public const uint32 AM_QUERY_DECODER_DXVA_1_SUPPORT = 2;
		public const uint32 AM_QUERY_DECODER_DVD_SUPPORT = 3;
		public const uint32 AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4;
		public const uint32 AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5;
		public const uint32 AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6;
		public const uint32 AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7;
		public const uint32 DECODER_CAP_NOTSUPPORTED = 0;
		public const uint32 DECODER_CAP_SUPPORTED = 1;
		public const uint32 VMRBITMAP_DISABLE = 1;
		public const uint32 VMRBITMAP_HDC = 2;
		public const uint32 VMRBITMAP_ENTIREDDS = 4;
		public const uint32 VMRBITMAP_SRCCOLORKEY = 8;
		public const uint32 VMRBITMAP_SRCRECT = 16;
		public const uint32 DVD_TITLE_MENU = 0;
		public const uint32 DVD_STREAM_DATA_CURRENT = 2048;
		public const uint32 DVD_STREAM_DATA_VMGM = 1024;
		public const uint32 DVD_STREAM_DATA_VTSM = 1025;
		public const uint32 DVD_DEFAULT_AUDIO_STREAM = 15;
		public const uint32 DVD_AUDIO_CAPS_AC3 = 1;
		public const uint32 DVD_AUDIO_CAPS_MPEG2 = 2;
		public const uint32 DVD_AUDIO_CAPS_LPCM = 4;
		public const uint32 DVD_AUDIO_CAPS_DTS = 8;
		public const uint32 DVD_AUDIO_CAPS_SDDS = 16;
		public const Guid MEDIATYPE_MPEG2_PACK = .(0x36523b13, 0x8ee5, 0x11d1, 0x8c, 0xa3, 0x00, 0x60, 0xb0, 0x57, 0x66, 0x4a);
		public const Guid PBDA_AUX_CONNECTOR_TYPE_SVideo = .(0xa0e905f4, 0x24c9, 0x4a54, 0xb7, 0x61, 0x21, 0x33, 0x55, 0xef, 0xc1, 0x3a);
		public const Guid PBDA_AUX_CONNECTOR_TYPE_Composite = .(0xf6298b4c, 0xc725, 0x4d42, 0x84, 0x9b, 0x41, 0x0b, 0xbb, 0x14, 0xea, 0x62);
		public const Guid CLSID_PBDA_AUX_DATA_TYPE = .(0xfd456373, 0x3323, 0x4090, 0xad, 0xca, 0x8e, 0xd4, 0x5f, 0x55, 0xcf, 0x10);
		public const Guid CLSID_PBDA_Encoder_DATA_TYPE = .(0x728fd6bc, 0x5546, 0x4716, 0xb1, 0x03, 0xf8, 0x99, 0xf5, 0xa1, 0xfa, 0x68);
		public const uint32 PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0;
		public const uint32 PBDA_Encoder_Audio_AlgorithmType_AC3 = 1;
		public const uint32 PBDA_Encoder_Video_MPEG2PartII = 0;
		public const uint32 PBDA_Encoder_Video_MPEG4Part10 = 1;
		public const uint32 PBDA_Encoder_Video_AVC = 1;
		public const uint32 PBDA_Encoder_Video_H264 = 1;
		public const uint32 PBDA_Encoder_BitrateMode_Constant = 1;
		public const uint32 PBDA_Encoder_BitrateMode_Variable = 2;
		public const uint32 PBDA_Encoder_BitrateMode_Average = 3;
		public const Guid CLSID_PBDA_FDC_DATA_TYPE = .(0xe7dbf9a0, 0x22ab, 0x4047, 0x8e, 0x67, 0xef, 0x9a, 0xd5, 0x04, 0xe7, 0x29);
		public const Guid CLSID_PBDA_GDDS_DATA_TYPE = .(0xc80c0df3, 0x6052, 0x4c16, 0x9f, 0x56, 0xc4, 0x4c, 0x21, 0xf7, 0x3c, 0x45);
		public const Guid LIBID_QuartzNetTypeLib = .(0x56a868b1, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
		public const Guid LIBID_QuartzTypeLib = .(0x56a868b0, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
		public const Guid CLSID_AMMultiMediaStream = .(0x49c47ce5, 0x9ba4, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
		public const Guid CLSID_AMDirectDrawStream = .(0x49c47ce4, 0x9ba4, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
		public const Guid CLSID_AMAudioStream = .(0x8496e040, 0xaf4c, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
		public const Guid CLSID_AMAudioData = .(0xf2468580, 0xaf8a, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
		public const Guid CLSID_AMMediaTypeStream = .(0xcf0f2f7c, 0xf7bf, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
		public const uint32 AMDDS_NONE = 0;
		public const uint32 AMDDS_DCIPS = 1;
		public const uint32 AMDDS_PS = 2;
		public const uint32 AMDDS_RGBOVR = 4;
		public const uint32 AMDDS_YUVOVR = 8;
		public const uint32 AMDDS_RGBOFF = 16;
		public const uint32 AMDDS_YUVOFF = 32;
		public const uint32 AMDDS_RGBFLP = 64;
		public const uint32 AMDDS_YUVFLP = 128;
		public const uint32 AMDDS_ALL = 255;
		public const uint32 AMDDS_DEFAULT = 255;
		public const uint32 MAX_SIZE_MPEG1_SEQUENCE_INFO = 140;
		public const Guid CLSID_DMOWrapperFilter = .(0x94297043, 0xbd82, 0x4dfd, 0xb0, 0xde, 0x81, 0x77, 0x73, 0x9c, 0x6d, 0x20);
		public const Guid CLSID_DMOFilterCategory = .(0xbcd5796c, 0xbd52, 0x4d30, 0xab, 0x76, 0x70, 0xf9, 0x75, 0xb8, 0x91, 0x99);
		public const uint32 AM_MPEG_AUDIO_DUAL_MERGE = 0;
		public const uint32 AM_MPEG_AUDIO_DUAL_LEFT = 1;
		public const uint32 AM_MPEG_AUDIO_DUAL_RIGHT = 2;
		public const uint32 VFW_FIRST_CODE = 512;
		public const uint32 MAX_ERROR_TEXT_LEN = 160;
		public const uint32 MPBOOL_TRUE = 1;
		public const uint32 MPBOOL_FALSE = 0;
		public const int32 DWORD_ALLPARAMS = -1;
		public const Guid GUID_TIME_REFERENCE = .(0x93ad712b, 0xdaa0, 0x4ffe, 0xbc, 0x81, 0xb0, 0xce, 0x50, 0x0f, 0xcd, 0xd9);
		public const Guid GUID_TIME_MUSIC = .(0x0574c49d, 0x5b04, 0x4b15, 0xa5, 0x42, 0xae, 0x28, 0x20, 0x30, 0x11, 0x7b);
		public const Guid GUID_TIME_SAMPLES = .(0xa8593d05, 0x0c43, 0x4984, 0x9a, 0x63, 0x97, 0xaf, 0x9e, 0x02, 0xc4, 0xc0);
		public const uint32 MPF_ENVLP_STANDARD = 0;
		public const uint32 MPF_ENVLP_BEGIN_CURRENTVAL = 1;
		public const uint32 MPF_ENVLP_BEGIN_NEUTRALVAL = 2;
		public const uint32 MPF_PUNCHIN_REFTIME = 0;
		public const uint32 MPF_PUNCHIN_NOW = 1;
		public const uint32 MPF_PUNCHIN_STOPPED = 2;
		public const Guid MSPID_PrimaryVideo = .(0xa35ff56a, 0x9fda, 0x11d0, 0x8f, 0xdf, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
		public const Guid MSPID_PrimaryAudio = .(0xa35ff56b, 0x9fda, 0x11d0, 0x8f, 0xdf, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
		public const HRESULT VFW_E_INVALIDMEDIATYPE = -2147220992;
		public const HRESULT VFW_E_INVALIDSUBTYPE = -2147220991;
		public const HRESULT VFW_E_NEED_OWNER = -2147220990;
		public const HRESULT VFW_E_ENUM_OUT_OF_SYNC = -2147220989;
		public const HRESULT VFW_E_ALREADY_CONNECTED = -2147220988;
		public const HRESULT VFW_E_FILTER_ACTIVE = -2147220987;
		public const HRESULT VFW_E_NO_TYPES = -2147220986;
		public const HRESULT VFW_E_NO_ACCEPTABLE_TYPES = -2147220985;
		public const HRESULT VFW_E_INVALID_DIRECTION = -2147220984;
		public const HRESULT VFW_E_NOT_CONNECTED = -2147220983;
		public const HRESULT VFW_E_NO_ALLOCATOR = -2147220982;
		public const HRESULT VFW_E_RUNTIME_ERROR = -2147220981;
		public const HRESULT VFW_E_BUFFER_NOTSET = -2147220980;
		public const HRESULT VFW_E_BUFFER_OVERFLOW = -2147220979;
		public const HRESULT VFW_E_BADALIGN = -2147220978;
		public const HRESULT VFW_E_ALREADY_COMMITTED = -2147220977;
		public const HRESULT VFW_E_BUFFERS_OUTSTANDING = -2147220976;
		public const HRESULT VFW_E_NOT_COMMITTED = -2147220975;
		public const HRESULT VFW_E_SIZENOTSET = -2147220974;
		public const HRESULT VFW_E_NO_CLOCK = -2147220973;
		public const HRESULT VFW_E_NO_SINK = -2147220972;
		public const HRESULT VFW_E_NO_INTERFACE = -2147220971;
		public const HRESULT VFW_E_NOT_FOUND = -2147220970;
		public const HRESULT VFW_E_CANNOT_CONNECT = -2147220969;
		public const HRESULT VFW_E_CANNOT_RENDER = -2147220968;
		public const HRESULT VFW_E_CHANGING_FORMAT = -2147220967;
		public const HRESULT VFW_E_NO_COLOR_KEY_SET = -2147220966;
		public const HRESULT VFW_E_NOT_OVERLAY_CONNECTION = -2147220965;
		public const HRESULT VFW_E_NOT_SAMPLE_CONNECTION = -2147220964;
		public const HRESULT VFW_E_PALETTE_SET = -2147220963;
		public const HRESULT VFW_E_COLOR_KEY_SET = -2147220962;
		public const HRESULT VFW_E_NO_COLOR_KEY_FOUND = -2147220961;
		public const HRESULT VFW_E_NO_PALETTE_AVAILABLE = -2147220960;
		public const HRESULT VFW_E_NO_DISPLAY_PALETTE = -2147220959;
		public const HRESULT VFW_E_TOO_MANY_COLORS = -2147220958;
		public const HRESULT VFW_E_STATE_CHANGED = -2147220957;
		public const HRESULT VFW_E_NOT_STOPPED = -2147220956;
		public const HRESULT VFW_E_NOT_PAUSED = -2147220955;
		public const HRESULT VFW_E_NOT_RUNNING = -2147220954;
		public const HRESULT VFW_E_WRONG_STATE = -2147220953;
		public const HRESULT VFW_E_START_TIME_AFTER_END = -2147220952;
		public const HRESULT VFW_E_INVALID_RECT = -2147220951;
		public const HRESULT VFW_E_TYPE_NOT_ACCEPTED = -2147220950;
		public const HRESULT VFW_E_SAMPLE_REJECTED = -2147220949;
		public const HRESULT VFW_E_SAMPLE_REJECTED_EOS = -2147220948;
		public const HRESULT VFW_E_DUPLICATE_NAME = -2147220947;
		public const HRESULT VFW_S_DUPLICATE_NAME = 262701;
		public const HRESULT VFW_E_TIMEOUT = -2147220946;
		public const HRESULT VFW_E_INVALID_FILE_FORMAT = -2147220945;
		public const HRESULT VFW_E_ENUM_OUT_OF_RANGE = -2147220944;
		public const HRESULT VFW_E_CIRCULAR_GRAPH = -2147220943;
		public const HRESULT VFW_E_NOT_ALLOWED_TO_SAVE = -2147220942;
		public const HRESULT VFW_E_TIME_ALREADY_PASSED = -2147220941;
		public const HRESULT VFW_E_ALREADY_CANCELLED = -2147220940;
		public const HRESULT VFW_E_CORRUPT_GRAPH_FILE = -2147220939;
		public const HRESULT VFW_E_ADVISE_ALREADY_SET = -2147220938;
		public const HRESULT VFW_S_STATE_INTERMEDIATE = 262711;
		public const HRESULT VFW_E_NO_MODEX_AVAILABLE = -2147220936;
		public const HRESULT VFW_E_NO_ADVISE_SET = -2147220935;
		public const HRESULT VFW_E_NO_FULLSCREEN = -2147220934;
		public const HRESULT VFW_E_IN_FULLSCREEN_MODE = -2147220933;
		public const HRESULT VFW_E_UNKNOWN_FILE_TYPE = -2147220928;
		public const HRESULT VFW_E_CANNOT_LOAD_SOURCE_FILTER = -2147220927;
		public const HRESULT VFW_S_PARTIAL_RENDER = 262722;
		public const HRESULT VFW_E_FILE_TOO_SHORT = -2147220925;
		public const HRESULT VFW_E_INVALID_FILE_VERSION = -2147220924;
		public const HRESULT VFW_S_SOME_DATA_IGNORED = 262725;
		public const HRESULT VFW_S_CONNECTIONS_DEFERRED = 262726;
		public const HRESULT VFW_E_INVALID_CLSID = -2147220921;
		public const HRESULT VFW_E_INVALID_MEDIA_TYPE = -2147220920;
		public const HRESULT VFW_E_BAD_KEY = -2147220494;
		public const HRESULT VFW_S_NO_MORE_ITEMS = 262403;
		public const HRESULT VFW_E_SAMPLE_TIME_NOT_SET = -2147220919;
		public const HRESULT VFW_S_RESOURCE_NOT_NEEDED = 262736;
		public const HRESULT VFW_E_MEDIA_TIME_NOT_SET = -2147220911;
		public const HRESULT VFW_E_NO_TIME_FORMAT_SET = -2147220910;
		public const HRESULT VFW_E_MONO_AUDIO_HW = -2147220909;
		public const HRESULT VFW_S_MEDIA_TYPE_IGNORED = 262740;
		public const HRESULT VFW_E_NO_DECOMPRESSOR = -2147220907;
		public const HRESULT VFW_E_NO_AUDIO_HARDWARE = -2147220906;
		public const HRESULT VFW_S_VIDEO_NOT_RENDERED = 262743;
		public const HRESULT VFW_S_AUDIO_NOT_RENDERED = 262744;
		public const HRESULT VFW_E_RPZA = -2147220903;
		public const HRESULT VFW_S_RPZA = 262746;
		public const HRESULT VFW_E_PROCESSOR_NOT_SUITABLE = -2147220901;
		public const HRESULT VFW_E_UNSUPPORTED_AUDIO = -2147220900;
		public const HRESULT VFW_E_UNSUPPORTED_VIDEO = -2147220899;
		public const HRESULT VFW_E_MPEG_NOT_CONSTRAINED = -2147220898;
		public const HRESULT VFW_E_NOT_IN_GRAPH = -2147220897;
		public const HRESULT VFW_S_ESTIMATED = 262752;
		public const HRESULT VFW_E_NO_TIME_FORMAT = -2147220895;
		public const HRESULT VFW_E_READ_ONLY = -2147220894;
		public const HRESULT VFW_S_RESERVED = 262755;
		public const HRESULT VFW_E_BUFFER_UNDERFLOW = -2147220892;
		public const HRESULT VFW_E_UNSUPPORTED_STREAM = -2147220891;
		public const HRESULT VFW_E_NO_TRANSPORT = -2147220890;
		public const HRESULT VFW_S_STREAM_OFF = 262759;
		public const HRESULT VFW_S_CANT_CUE = 262760;
		public const HRESULT VFW_E_BAD_VIDEOCD = -2147220887;
		public const HRESULT VFW_S_NO_STOP_TIME = 262768;
		public const HRESULT VFW_E_OUT_OF_VIDEO_MEMORY = -2147220879;
		public const HRESULT VFW_E_VP_NEGOTIATION_FAILED = -2147220878;
		public const HRESULT VFW_E_DDRAW_CAPS_NOT_SUITABLE = -2147220877;
		public const HRESULT VFW_E_NO_VP_HARDWARE = -2147220876;
		public const HRESULT VFW_E_NO_CAPTURE_HARDWARE = -2147220875;
		public const HRESULT VFW_E_DVD_OPERATION_INHIBITED = -2147220874;
		public const HRESULT VFW_E_DVD_INVALIDDOMAIN = -2147220873;
		public const HRESULT VFW_E_DVD_NO_BUTTON = -2147220872;
		public const HRESULT VFW_E_DVD_GRAPHNOTREADY = -2147220871;
		public const HRESULT VFW_E_DVD_RENDERFAIL = -2147220870;
		public const HRESULT VFW_E_DVD_DECNOTENOUGH = -2147220869;
		public const HRESULT VFW_E_DDRAW_VERSION_NOT_SUITABLE = -2147220868;
		public const HRESULT VFW_E_COPYPROT_FAILED = -2147220867;
		public const HRESULT VFW_S_NOPREVIEWPIN = 262782;
		public const HRESULT VFW_E_TIME_EXPIRED = -2147220865;
		public const HRESULT VFW_S_DVD_NON_ONE_SEQUENTIAL = 262784;
		public const HRESULT VFW_E_DVD_WRONG_SPEED = -2147220863;
		public const HRESULT VFW_E_DVD_MENU_DOES_NOT_EXIST = -2147220862;
		public const HRESULT VFW_E_DVD_CMD_CANCELLED = -2147220861;
		public const HRESULT VFW_E_DVD_STATE_WRONG_VERSION = -2147220860;
		public const HRESULT VFW_E_DVD_STATE_CORRUPT = -2147220859;
		public const HRESULT VFW_E_DVD_STATE_WRONG_DISC = -2147220858;
		public const HRESULT VFW_E_DVD_INCOMPATIBLE_REGION = -2147220857;
		public const HRESULT VFW_E_DVD_NO_ATTRIBUTES = -2147220856;
		public const HRESULT VFW_E_DVD_NO_GOUP_PGC = -2147220855;
		public const HRESULT VFW_E_DVD_LOW_PARENTAL_LEVEL = -2147220854;
		public const HRESULT VFW_E_DVD_NOT_IN_KARAOKE_MODE = -2147220853;
		public const HRESULT VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 262796;
		public const HRESULT VFW_S_DVD_NOT_ACCURATE = 262797;
		public const HRESULT VFW_E_FRAME_STEP_UNSUPPORTED = -2147220850;
		public const HRESULT VFW_E_DVD_STREAM_DISABLED = -2147220849;
		public const HRESULT VFW_E_DVD_TITLE_UNKNOWN = -2147220848;
		public const HRESULT VFW_E_DVD_INVALID_DISC = -2147220847;
		public const HRESULT VFW_E_DVD_NO_RESUME_INFORMATION = -2147220846;
		public const HRESULT VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = -2147220845;
		public const HRESULT VFW_E_PIN_ALREADY_BLOCKED = -2147220844;
		public const HRESULT VFW_E_CERTIFICATION_FAILURE = -2147220843;
		public const HRESULT VFW_E_VMR_NOT_IN_MIXER_MODE = -2147220842;
		public const HRESULT VFW_E_VMR_NO_AP_SUPPLIED = -2147220841;
		public const HRESULT VFW_E_VMR_NO_DEINTERLACE_HW = -2147220840;
		public const HRESULT VFW_E_VMR_NO_PROCAMP_HW = -2147220839;
		public const HRESULT VFW_E_DVD_VMR9_INCOMPATIBLEDEC = -2147220838;
		public const HRESULT VFW_E_NO_COPP_HW = -2147220837;
		public const HRESULT VFW_E_DVD_NONBLOCKING = -2147220836;
		public const HRESULT VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = -2147220835;
		public const HRESULT VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = -2147220834;
		public const HRESULT VFW_E_DVD_RESOLUTION_ERROR = -2147220833;
		public const HRESULT E_PROP_SET_UNSUPPORTED = -2147023726;
		public const HRESULT E_PROP_ID_UNSUPPORTED = -2147023728;
		public const HRESULT VFW_E_CODECAPI_LINEAR_RANGE = -2147220720;
		public const HRESULT VFW_E_CODECAPI_ENUMERATED = -2147220719;
		public const HRESULT VFW_E_CODECAPI_NO_DEFAULT = -2147220717;
		public const HRESULT VFW_E_CODECAPI_NO_CURRENT_VALUE = -2147220716;
		public const HRESULT VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = -2147220715;
		public const HRESULT VFW_S_DVD_RENDER_STATUS = 262944;
		public const Guid DXVA_ModeNone = .(0x1b81be00, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH261_A = .(0x1b81be01, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH261_B = .(0x1b81be02, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH263_A = .(0x1b81be03, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH263_B = .(0x1b81be04, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH263_C = .(0x1b81be05, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH263_D = .(0x1b81be06, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH263_E = .(0x1b81be07, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH263_F = .(0x1b81be08, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG1_A = .(0x1b81be09, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG1_VLD = .(0x6f3ec719, 0x3735, 0x42cc, 0x80, 0x63, 0x65, 0xcc, 0x3c, 0xb3, 0x66, 0x16);
		public const Guid DXVA_ModeMPEG2_A = .(0x1b81be0a, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG2_B = .(0x1b81be0b, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG2_C = .(0x1b81be0c, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG2_D = .(0x1b81be0d, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG2and1_VLD = .(0x86695f12, 0x340e, 0x4f04, 0x9f, 0xd3, 0x92, 0x53, 0xdd, 0x32, 0x74, 0x60);
		public const Guid DXVA_ModeH264_A = .(0x1b81be64, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH264_B = .(0x1b81be65, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH264_C = .(0x1b81be66, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH264_D = .(0x1b81be67, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH264_E = .(0x1b81be68, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH264_F = .(0x1b81be69, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeH264_VLD_WithFMOASO_NoFGT = .(0xd5f04ff9, 0x3418, 0x45d8, 0x95, 0x61, 0x32, 0xa7, 0x6a, 0xae, 0x2d, 0xdd);
		public const Guid DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT = .(0xd79be8da, 0x0cf1, 0x4c81, 0xb8, 0x2a, 0x69, 0xa4, 0xe2, 0x36, 0xf4, 0x3d);
		public const Guid DXVA_ModeH264_VLD_Stereo_NoFGT = .(0xf9aaccbb, 0xc2b6, 0x4cfc, 0x87, 0x79, 0x57, 0x07, 0xb1, 0x76, 0x05, 0x52);
		public const Guid DXVA_ModeH264_VLD_Multiview_NoFGT = .(0x705b9d82, 0x76cf, 0x49d6, 0xb7, 0xe6, 0xac, 0x88, 0x72, 0xdb, 0x01, 0x3c);
		public const Guid DXVA_ModeWMV8_A = .(0x1b81be80, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeWMV8_B = .(0x1b81be81, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeWMV9_A = .(0x1b81be90, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeWMV9_B = .(0x1b81be91, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeWMV9_C = .(0x1b81be94, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeVC1_A = .(0x1b81bea0, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeVC1_B = .(0x1b81bea1, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeVC1_C = .(0x1b81bea2, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeVC1_D = .(0x1b81bea3, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeVC1_D2010 = .(0x1b81bea4, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const Guid DXVA_ModeMPEG4pt2_VLD_Simple = .(0xefd64d74, 0xc9e8, 0x41d7, 0xa5, 0xe9, 0xe9, 0xb0, 0xe3, 0x9f, 0xa3, 0x19);
		public const Guid DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = .(0xed418a9f, 0x010d, 0x4eda, 0x9a, 0xe3, 0x9a, 0x65, 0x35, 0x8d, 0x8d, 0x2e);
		public const Guid DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC = .(0xab998b5b, 0x4258, 0x44a9, 0x9f, 0xeb, 0x94, 0xe5, 0x97, 0xa6, 0xba, 0xae);
		public const Guid DXVA_ModeHEVC_VLD_Main = .(0x5b11d51b, 0x2f4c, 0x4452, 0xbc, 0xc3, 0x09, 0xf2, 0xa1, 0x16, 0x0c, 0xc0);
		public const Guid DXVA_ModeHEVC_VLD_Main10 = .(0x107af0e0, 0xef1a, 0x4d19, 0xab, 0xa8, 0x67, 0xa1, 0x63, 0x07, 0x3d, 0x13);
		public const Guid DXVA_ModeVP9_VLD_Profile0 = .(0x463707f8, 0xa1d0, 0x4585, 0x87, 0x6d, 0x83, 0xaa, 0x6d, 0x60, 0xb8, 0x9e);
		public const Guid DXVA_ModeVP9_VLD_10bit_Profile2 = .(0xa4c749ef, 0x6ecf, 0x48aa, 0x84, 0x48, 0x50, 0xa7, 0xa1, 0x16, 0x5f, 0xf7);
		public const Guid DXVA_ModeVP8_VLD = .(0x90b899ea, 0x3a62, 0x4705, 0x88, 0xb3, 0x8d, 0xf0, 0x4b, 0x27, 0x44, 0xe7);
		public const Guid DXVA_ModeAV1_VLD_Profile0 = .(0xb8be4ccb, 0xcf53, 0x46ba, 0x8d, 0x59, 0xd6, 0xb8, 0xa6, 0xda, 0x5d, 0x2a);
		public const Guid DXVA_ModeAV1_VLD_Profile1 = .(0x6936ff0f, 0x45b1, 0x4163, 0x9c, 0xc1, 0x64, 0x6e, 0xf6, 0x94, 0x61, 0x08);
		public const Guid DXVA_ModeAV1_VLD_Profile2 = .(0x0c5f2aa1, 0xe541, 0x4089, 0xbb, 0x7b, 0x98, 0x11, 0x0a, 0x19, 0xd7, 0xc8);
		public const Guid DXVA_ModeAV1_VLD_12bit_Profile2 = .(0x17127009, 0xa00f, 0x4ce1, 0x99, 0x4e, 0xbf, 0x40, 0x81, 0xf6, 0xf3, 0xf0);
		public const Guid DXVA_ModeAV1_VLD_12bit_Profile2_420 = .(0x2d80bed6, 0x9cac, 0x4835, 0x9e, 0x91, 0x32, 0x7b, 0xbc, 0x4f, 0x9e, 0xe8);
		public const Guid DXVA_NoEncrypt = .(0x1b81bed0, 0xa0c7, 0x11d3, 0xb9, 0x84, 0x00, 0xc0, 0x4f, 0x2e, 0x73, 0xc5);
		public const uint32 DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535;
		public const uint32 DXVA_RESTRICTED_MODE_H261_A = 1;
		public const uint32 DXVA_RESTRICTED_MODE_H261_B = 2;
		public const uint32 DXVA_RESTRICTED_MODE_H263_A = 3;
		public const uint32 DXVA_RESTRICTED_MODE_H263_B = 4;
		public const uint32 DXVA_RESTRICTED_MODE_H263_C = 5;
		public const uint32 DXVA_RESTRICTED_MODE_H263_D = 6;
		public const uint32 DXVA_RESTRICTED_MODE_H263_E = 7;
		public const uint32 DXVA_RESTRICTED_MODE_H263_F = 8;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG1_A = 9;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG2_A = 10;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG2_B = 11;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG2_C = 12;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG2_D = 13;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG1_VLD = 16;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17;
		public const uint32 DXVA_RESTRICTED_MODE_H264_A = 100;
		public const uint32 DXVA_RESTRICTED_MODE_H264_B = 101;
		public const uint32 DXVA_RESTRICTED_MODE_H264_C = 102;
		public const uint32 DXVA_RESTRICTED_MODE_H264_D = 103;
		public const uint32 DXVA_RESTRICTED_MODE_H264_E = 104;
		public const uint32 DXVA_RESTRICTED_MODE_H264_F = 105;
		public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112;
		public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113;
		public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114;
		public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115;
		public const uint32 DXVA_RESTRICTED_MODE_WMV8_A = 128;
		public const uint32 DXVA_RESTRICTED_MODE_WMV8_B = 129;
		public const uint32 DXVA_RESTRICTED_MODE_WMV9_A = 144;
		public const uint32 DXVA_RESTRICTED_MODE_WMV9_B = 145;
		public const uint32 DXVA_RESTRICTED_MODE_WMV9_C = 148;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_A = 160;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_B = 161;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_C = 162;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_D = 163;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_D2010 = 164;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177;
		public const uint32 DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178;
		public const uint32 DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128;
		public const uint32 DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129;
		public const uint32 DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144;
		public const uint32 DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145;
		public const uint32 DXVA_RESTRICTED_MODE_WMV9_IDCT = 148;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_IDCT = 162;
		public const uint32 DXVA_RESTRICTED_MODE_VC1_VLD = 163;
		public const uint32 DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100;
		public const uint32 DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101;
		public const uint32 DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102;
		public const uint32 DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103;
		public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104;
		public const uint32 DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105;
		public const uint32 DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0;
		public const uint32 DXVA_PICTURE_DECODE_BUFFER = 1;
		public const uint32 DXVA_MACROBLOCK_CONTROL_BUFFER = 2;
		public const uint32 DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3;
		public const uint32 DXVA_DEBLOCKING_CONTROL_BUFFER = 4;
		public const uint32 DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5;
		public const uint32 DXVA_SLICE_CONTROL_BUFFER = 6;
		public const uint32 DXVA_BITSTREAM_DATA_BUFFER = 7;
		public const uint32 DXVA_AYUV_BUFFER = 8;
		public const uint32 DXVA_IA44_SURFACE_BUFFER = 9;
		public const uint32 DXVA_DPXD_SURFACE_BUFFER = 10;
		public const uint32 DXVA_HIGHLIGHT_BUFFER = 11;
		public const uint32 DXVA_DCCMD_SURFACE_BUFFER = 12;
		public const uint32 DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13;
		public const uint32 DXVA_PICTURE_RESAMPLE_BUFFER = 14;
		public const uint32 DXVA_READ_BACK_BUFFER = 15;
		public const uint32 DXVA_MOTION_VECTOR_BUFFER = 16;
		public const uint32 DXVA_FILM_GRAIN_BUFFER = 17;
		public const uint32 DXVA_NUM_TYPES_COMP_BUFFERS = 18;
		public const uint32 DXVA_PICTURE_DECODING_FUNCTION = 1;
		public const uint32 DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2;
		public const uint32 DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3;
		public const uint32 DXVA_PICTURE_RESAMPLE_FUNCTION = 4;
		public const uint32 DXVA_DEBLOCKING_FILTER_FUNCTION = 5;
		public const uint32 DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6;
		public const uint32 DXVA_STATUS_REPORTING_FUNCTION = 7;
		public const uint32 DXVA_EXECUTE_RETURN_OK = 0;
		public const uint32 DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1;
		public const uint32 DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2;
		public const uint32 DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3;
		public const uint32 DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211;
		public const uint32 DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215;
		public const uint32 DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960;
		public const uint32 DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968;
		public const uint32 DXVA_CHROMA_FORMAT_420 = 1;
		public const uint32 DXVA_CHROMA_FORMAT_422 = 2;
		public const uint32 DXVA_CHROMA_FORMAT_444 = 3;
		public const uint32 DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1;
		public const uint32 DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;
		public const uint32 DXVA_PICTURE_STRUCTURE_FRAME = 3;
		public const uint32 DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0;
		public const uint32 DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1;
		public const uint32 DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0;
		public const uint32 DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1;
		public const uint32 DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2;
		public const uint32 DXVA_SCAN_METHOD_ZIG_ZAG = 0;
		public const uint32 DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1;
		public const uint32 DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2;
		public const uint32 DXVA_SCAN_METHOD_ARBITRARY = 3;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2;
		public const uint32 DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3;
		public const uint32 DXVA_USUAL_BLOCK_WIDTH = 8;
		public const uint32 DXVA_USUAL_BLOCK_HEIGHT = 8;
		public const uint32 DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4;
		public const uint32 DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5;
		public const uint32 DXVA_NumMV_OBMC_on__BinPB_off = 10;
		public const uint32 DXVA_NumMV_OBMC_on__BinPB_on = 11;
		public const uint32 DXVA_CONFIG_DATA_TYPE_IA44 = 0;
		public const uint32 DXVA_CONFIG_DATA_TYPE_AI44 = 1;
		public const uint32 DXVA_CONFIG_DATA_TYPE_DPXD = 2;
		public const uint32 DXVA_CONFIG_DATA_TYPE_AYUV = 3;
		public const uint32 DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0;
		public const uint32 DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1;
		public const uint32 DXVA_ExtColorData_ShiftBase = 8;
		public const Guid DXVA_DeinterlaceBobDevice = .(0x335aa36e, 0x7884, 0x43a4, 0x9c, 0x91, 0x7f, 0x87, 0xfa, 0xf3, 0xe3, 0x7e);
		public const Guid DXVA_DeinterlaceContainerDevice = .(0x0e85cb93, 0x3046, 0x4ff0, 0xae, 0xcc, 0xd5, 0x8c, 0xb5, 0xf0, 0x35, 0xfd);
		public const uint32 MAX_DEINTERLACE_SURFACES = 32;
		public const uint32 DXVA_DeinterlaceBltFnCode = 1;
		public const uint32 DXVA_DeinterlaceBltExFnCode = 2;
		public const uint32 MAX_DEINTERLACE_DEVICE_GUIDS = 32;
		public const uint32 DXVA_DeinterlaceQueryAvailableModesFnCode = 1;
		public const uint32 DXVA_DeinterlaceQueryModeCapsFnCode = 2;
		public const Guid DXVA_ProcAmpControlDevice = .(0x9f200913, 0x2ffd, 0x4056, 0x9f, 0x1e, 0xe1, 0xb5, 0x08, 0xf2, 0x2d, 0xcf);
		public const uint32 DXVA_ProcAmpControlQueryCapsFnCode = 3;
		public const uint32 DXVA_ProcAmpControlQueryRangeFnCode = 4;
		public const uint32 DXVA_ProcAmpControlBltFnCode = 1;
		public const Guid DXVA_COPPDevice = .(0xd2457add, 0x8999, 0x45ed, 0x8a, 0x8a, 0xd1, 0xaa, 0x04, 0x7b, 0xa4, 0xd5);
		public const uint32 DXVA_COPPGetCertificateLengthFnCode = 1;
		public const uint32 DXVA_COPPKeyExchangeFnCode = 2;
		public const uint32 DXVA_COPPSequenceStartFnCode = 3;
		public const uint32 DXVA_COPPCommandFnCode = 4;
		public const Guid DXVA_COPPSetProtectionLevel = .(0x9bb9327c, 0x4eb5, 0x4727, 0x9f, 0x00, 0xb4, 0x2b, 0x09, 0x19, 0xc0, 0xda);
		public const int32 COPP_NoProtectionLevelAvailable = -1;
		public const uint32 COPP_DefaultProtectionLevel = 0;
		public const Guid DXVA_COPPSetSignaling = .(0x09a631a5, 0xd684, 0x4c60, 0x8e, 0x4d, 0xd3, 0xbb, 0x0f, 0x0b, 0xe3, 0xee);
		public const uint32 COPP_ImageAspectRatio_EN300294_Mask = 7;
		public const uint32 DXVA_COPPQueryStatusFnCode = 5;
		public const Guid DXVA_COPPQueryConnectorType = .(0x81d0bfd5, 0x6afe, 0x48c2, 0x99, 0xc0, 0x95, 0xa0, 0x8f, 0x97, 0xc5, 0xda);
		public const Guid DXVA_COPPQueryProtectionType = .(0x38f2a801, 0x9a6c, 0x48bb, 0x91, 0x07, 0xb6, 0x69, 0x6e, 0x6f, 0x17, 0x97);
		public const Guid DXVA_COPPQueryLocalProtectionLevel = .(0xb2075857, 0x3eda, 0x4d5d, 0x88, 0xdb, 0x74, 0x8f, 0x8c, 0x1a, 0x05, 0x49);
		public const Guid DXVA_COPPQueryGlobalProtectionLevel = .(0x1957210a, 0x7766, 0x452a, 0xb9, 0x9a, 0xd2, 0x7a, 0xed, 0x54, 0xf0, 0x3a);
		public const Guid DXVA_COPPQueryDisplayData = .(0xd7bf1ba3, 0xad13, 0x4f8e, 0xaf, 0x98, 0x0d, 0xcb, 0x3c, 0xa2, 0x04, 0xcc);
		public const Guid DXVA_COPPQueryHDCPKeyData = .(0x0db59d74, 0xa992, 0x492e, 0xa0, 0xbd, 0xc2, 0x3f, 0xda, 0x56, 0x4e, 0x00);
		public const Guid DXVA_COPPQueryBusData = .(0xc6f4d673, 0x6174, 0x4184, 0x8e, 0x35, 0xf6, 0xdb, 0x52, 0x00, 0xbc, 0xba);
		public const Guid DXVA_COPPQuerySignaling = .(0x6629a591, 0x3b79, 0x4cf3, 0x92, 0x4a, 0x11, 0xe8, 0xe7, 0x81, 0x16, 0x71);
		public const Guid DXVA2Trace_Control = .(0xa0386e75, 0xf70c, 0x464c, 0xa9, 0xce, 0x33, 0xc4, 0x4e, 0x09, 0x16, 0x23);
		public const Guid DXVA2Trace_DecodeDevCreated = .(0xb4de17a1, 0xc5b2, 0x44fe, 0x86, 0xd5, 0xd9, 0x7a, 0x64, 0x81, 0x14, 0xff);
		public const Guid DXVA2Trace_DecodeDevDestroyed = .(0x853ebdf2, 0x4160, 0x421d, 0x88, 0x93, 0x63, 0xdc, 0xea, 0x4f, 0x18, 0xbb);
		public const Guid DXVA2Trace_DecodeDevBeginFrame = .(0x9fd1acf6, 0x44cb, 0x4637, 0xbc, 0x62, 0x2c, 0x11, 0xa9, 0x60, 0x8f, 0x90);
		public const Guid DXVA2Trace_DecodeDevExecute = .(0x850aeb4c, 0xd19a, 0x4609, 0xb3, 0xb4, 0xbc, 0xbf, 0x0e, 0x22, 0x12, 0x1e);
		public const Guid DXVA2Trace_DecodeDevGetBuffer = .(0x57b128fb, 0x72cb, 0x4137, 0xa5, 0x75, 0xd9, 0x1f, 0xa3, 0x16, 0x08, 0x97);
		public const Guid DXVA2Trace_DecodeDevEndFrame = .(0x9fb3cb33, 0x47dc, 0x4899, 0x98, 0xc8, 0xc0, 0xc6, 0xcd, 0x7c, 0xd3, 0xcb);
		public const Guid DXVA2Trace_VideoProcessDevCreated = .(0x895508c6, 0x540d, 0x4c87, 0x98, 0xf8, 0x8d, 0xcb, 0xf2, 0xda, 0xbb, 0x2a);
		public const Guid DXVA2Trace_VideoProcessDevDestroyed = .(0xf97f30b1, 0xfb49, 0x42c7, 0x8e, 0xe8, 0x88, 0xbd, 0xfa, 0x92, 0xd4, 0xe2);
		public const Guid DXVA2Trace_VideoProcessBlt = .(0x69089cc0, 0x71ab, 0x42d0, 0x95, 0x3a, 0x28, 0x87, 0xbf, 0x05, 0xa8, 0xaf);
		public const uint32 DTV_CardStatus_Inserted = 0;
		public const uint32 DTV_CardStatus_Removed = 1;
		public const uint32 DTV_CardStatus_Error = 2;
		public const uint32 DTV_CardStatus_FirmwareDownload = 3;
		public const uint32 OCUR_PAIRING_PROTOCOL_VERSION = 2;
		public const uint32 PBDA_PAIRING_PROTOCOL_VERSION = 3;
		public const uint32 DTV_MMIMessage_Open = 0;
		public const uint32 DTV_MMIMessage_Close = 1;
		public const uint32 DTV_Entitlement_CanDecrypt = 0;
		public const uint32 DTV_Entitlement_NotEntitled = 1;
		public const uint32 DTV_Entitlement_TechnicalFailure = 2;
		public const uint32 AudioType_Standard = 0;
		public const uint32 AudioType_Music_And_Effects = 1;
		public const uint32 AudioType_Visually_Impaired = 2;
		public const uint32 AudioType_Hearing_Impaired = 3;
		public const uint32 AudioType_Dialogue = 4;
		public const uint32 AudioType_Commentary = 5;
		public const uint32 AudioType_Emergency = 6;
		public const uint32 AudioType_Voiceover = 7;
		public const int32 AudioType_Reserved = -1;
		public const uint32 MAX_COUNTRY_CODE_STRING = 3;
		public const uint32 PARENTAL_CONTROL_TIME_RANGE = 1;
		public const uint32 REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2;
		public const uint32 PARENTAL_CONTROL_CONTENT_RATING = 256;
		public const uint32 PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512;
		public const uint32 PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513;
		public const uint32 PARENTAL_CONTROL_ATTRIB_SEXUAL = 514;
		public const uint32 PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515;
		public const uint32 PARENTAL_CONTROL_ATTRIB_FANTASY = 516;
		public const uint32 PARENTAL_CONTROL_VALUE_UNDEFINED = 0;
		public const uint32 MPEG2_FILTER_VERSION_1_SIZE = 124;
		public const uint32 MPEG2_FILTER_VERSION_2_SIZE = 133;
		public const Guid SID_MSVidCtl_CurrentAudioEndpoint = .(0xcf9a88f4, 0xabcf, 0x4ed8, 0x9b, 0x74, 0x7d, 0xb3, 0x34, 0x45, 0x45, 0x9e);
		public const uint32 STREAMBUFFER_EC_BASE = 806;
		public const Guid EVENTID_SBE2RecControlStarted = .(0x8966a89e, 0xf83e, 0x4c0e, 0xbc, 0x3b, 0xbf, 0xa7, 0x64, 0x9e, 0x04, 0xcb);
		public const Guid EVENTID_SBE2RecControlStopped = .(0x454b1ec8, 0x0c9b, 0x4caa, 0xb1, 0xa1, 0x1e, 0x7a, 0x26, 0x66, 0xf6, 0xc3);
		public const Guid SBE2_STREAM_DESC_EVENT = .(0x2313a4ed, 0xbf2d, 0x454f, 0xad, 0x8a, 0xd9, 0x5b, 0xa7, 0xf9, 0x1f, 0xee);
		public const Guid SBE2_V1_STREAMS_CREATION_EVENT = .(0x000fcf09, 0x97f5, 0x46ac, 0x97, 0x69, 0x7a, 0x83, 0xb3, 0x53, 0x84, 0xfb);
		public const Guid SBE2_V2_STREAMS_CREATION_EVENT = .(0xa72530a3, 0x0344, 0x4cab, 0xa2, 0xd0, 0xfe, 0x93, 0x7d, 0xbd, 0xca, 0xb3);
		public const uint32 SBE2_STREAM_DESC_VERSION = 1;
		public const Guid SID_DRMSecureServiceChannel = .(0xc4c4c4c4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_ETFilterEncProperties = .(0xc4c4c481, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_ETFilterTagProperties = .(0xc4c4c491, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_PTFilter = .(0x9cd31617, 0xb303, 0x4f96, 0x83, 0x30, 0x2e, 0xb1, 0x73, 0xea, 0x4d, 0xc6);
		public const Guid CLSID_DTFilterEncProperties = .(0xc4c4c482, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_DTFilterTagProperties = .(0xc4c4c492, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_XDSCodecProperties = .(0xc4c4c483, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_XDSCodecTagProperties = .(0xc4c4c493, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_CPCAFiltersCategory = .(0xc4c4c4fc, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_XDSCodecNewXDSRating = .(0xc4c4c4e0, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_XDSCodecDuplicateXDSRating = .(0xc4c4c4df, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_XDSCodecNewXDSPacket = .(0xc4c4c4e1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterRatingChange = .(0xc4c4c4e2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterRatingsBlock = .(0xc4c4c4e3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterRatingsUnblock = .(0xc4c4c4e4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterXDSPacket = .(0xc4c4c4e5, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_ETFilterEncryptionOn = .(0xc4c4c4e6, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_ETFilterEncryptionOff = .(0xc4c4c4e7, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterCOPPUnblock = .(0xc4c4c4e8, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_EncDecFilterError = .(0xc4c4c4e9, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterCOPPBlock = .(0xc4c4c4ea, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_ETFilterCopyOnce = .(0xc4c4c4eb, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_ETFilterCopyNever = .(0xc4c4c4f0, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterDataFormatOK = .(0xc4c4c4ec, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_DTFilterDataFormatFailure = .(0xc4c4c4ed, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_ETDTFilterLicenseOK = .(0xc4c4c4ee, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid EVENTID_ETDTFilterLicenseFailure = .(0xc4c4c4ef, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid MEDIASUBTYPE_ETDTFilter_Tagged = .(0xc4c4c4d0, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid FORMATTYPE_ETDTFilter_Tagged = .(0xc4c4c4d1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid MEDIASUBTYPE_CPFilters_Processed = .(0x46adbd28, 0x6fd0, 0x4796, 0x93, 0xb2, 0x15, 0x5c, 0x51, 0xdc, 0x04, 0x8d);
		public const Guid FORMATTYPE_CPFilters_Processed = .(0x6739b36f, 0x1d5f, 0x4ac2, 0x81, 0x92, 0x28, 0xbb, 0x0e, 0x73, 0xd1, 0x6a);
		public const Guid EVENTID_EncDecFilterEvent = .(0x4a1b465b, 0x0fb9, 0x4159, 0xaf, 0xbd, 0xe3, 0x30, 0x06, 0xa0, 0xf9, 0xf4);
		public const Guid EVENTID_FormatNotSupportedEvent = .(0x24b2280a, 0xb2aa, 0x4777, 0xbf, 0x65, 0x63, 0xf3, 0x5e, 0x7b, 0x02, 0x4a);
		public const Guid EVENTID_DemultiplexerFilterDiscontinuity = .(0x16155770, 0xaed5, 0x475c, 0xbb, 0x98, 0x95, 0xa3, 0x30, 0x70, 0xdf, 0x0c);
		public const Guid DSATTRIB_WMDRMProtectionInfo = .(0x40749583, 0x6b9d, 0x4eec, 0xb4, 0x3c, 0x67, 0xa1, 0x80, 0x1e, 0x1a, 0x9b);
		public const Guid DSATTRIB_BadSampleInfo = .(0xe4846dda, 0x5838, 0x42b4, 0xb8, 0x97, 0x6f, 0x7e, 0x5f, 0xaa, 0x2f, 0x2f);
		public const uint32 MPEG_PAT_PID = 0;
		public const uint32 MPEG_PAT_TID = 0;
		public const uint32 MPEG_CAT_PID = 1;
		public const uint32 MPEG_CAT_TID = 1;
		public const uint32 MPEG_PMT_TID = 2;
		public const uint32 MPEG_TSDT_PID = 2;
		public const uint32 MPEG_TSDT_TID = 3;
		public const uint32 ATSC_MGT_PID = 8187;
		public const uint32 ATSC_MGT_TID = 199;
		public const uint32 ATSC_VCT_PID = 8187;
		public const uint32 ATSC_VCT_TERR_TID = 200;
		public const uint32 ATSC_VCT_CABL_TID = 201;
		public const uint32 ATSC_EIT_TID = 203;
		public const uint32 ATSC_ETT_TID = 204;
		public const uint32 ATSC_RRT_TID = 202;
		public const uint32 ATSC_RRT_PID = 8187;
		public const uint32 ATSC_STT_PID = 8187;
		public const uint32 ATSC_STT_TID = 205;
		public const uint32 ATSC_PIT_TID = 208;
		public const uint32 DVB_NIT_PID = 16;
		public const uint32 DVB_NIT_ACTUAL_TID = 64;
		public const uint32 DVB_NIT_OTHER_TID = 65;
		public const uint32 DVB_SDT_PID = 17;
		public const uint32 DVB_SDT_ACTUAL_TID = 66;
		public const uint32 DVB_SDT_OTHER_TID = 70;
		public const uint32 DVB_BAT_PID = 17;
		public const uint32 DVB_BAT_TID = 74;
		public const uint32 DVB_EIT_PID = 18;
		public const uint32 DVB_EIT_ACTUAL_TID = 78;
		public const uint32 DVB_EIT_OTHER_TID = 79;
		public const uint32 DVB_RST_PID = 19;
		public const uint32 DVB_RST_TID = 113;
		public const uint32 DVB_TDT_PID = 20;
		public const uint32 DVB_TDT_TID = 112;
		public const uint32 DVB_ST_PID_16 = 16;
		public const uint32 DVB_ST_PID_17 = 17;
		public const uint32 DVB_ST_PID_18 = 18;
		public const uint32 DVB_ST_PID_19 = 19;
		public const uint32 DVB_ST_PID_20 = 20;
		public const uint32 DVB_ST_TID = 114;
		public const uint32 ISDB_ST_TID = 114;
		public const uint32 DVB_TOT_PID = 20;
		public const uint32 DVB_TOT_TID = 115;
		public const uint32 DVB_DIT_PID = 30;
		public const uint32 DVB_DIT_TID = 126;
		public const uint32 DVB_SIT_PID = 31;
		public const uint32 DVB_SIT_TID = 127;
		public const uint32 ISDB_EMM_TID = 133;
		public const uint32 ISDB_BIT_PID = 36;
		public const uint32 ISDB_BIT_TID = 196;
		public const uint32 ISDB_NBIT_PID = 37;
		public const uint32 ISDB_NBIT_MSG_TID = 197;
		public const uint32 ISDB_NBIT_REF_TID = 198;
		public const uint32 ISDB_LDT_PID = 37;
		public const uint32 ISDB_LDT_TID = 199;
		public const uint32 ISDB_SDTT_PID = 35;
		public const uint32 ISDB_SDTT_ALT_PID = 40;
		public const uint32 ISDB_SDTT_TID = 195;
		public const uint32 ISDB_CDT_PID = 41;
		public const uint32 ISDB_CDT_TID = 200;
		public const uint32 SCTE_EAS_TID = 216;
		public const uint32 SCTE_EAS_IB_PID = 8187;
		public const uint32 SCTE_EAS_OOB_PID = 8188;
		public const Guid CLSID_Mpeg2TableFilter = .(0x752845f1, 0x758f, 0x4c83, 0xa0, 0x43, 0x42, 0x70, 0xc5, 0x93, 0x30, 0x8e);
		public const uint32 ATSC_ETM_LOCATION_NOT_PRESENT = 0;
		public const uint32 ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1;
		public const uint32 ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2;
		public const uint32 ATSC_ETM_LOCATION_RESERVED = 3;
		public const uint32 SAMPLE_SEQ_SEQUENCE_HEADER = 1;
		public const uint32 SAMPLE_SEQ_GOP_HEADER = 2;
		public const uint32 SAMPLE_SEQ_PICTURE_HEADER = 3;
		public const uint32 SAMPLE_SEQ_SEQUENCE_START = 1;
		public const uint32 SAMPLE_SEQ_SEEK_POINT = 2;
		public const uint32 SAMPLE_SEQ_FRAME_START = 3;
		public const uint32 SAMPLE_SEQ_CONTENT_UNKNOWN = 0;
		public const uint32 SAMPLE_SEQ_CONTENT_I_FRAME = 1;
		public const uint32 SAMPLE_SEQ_CONTENT_P_FRAME = 2;
		public const uint32 SAMPLE_SEQ_CONTENT_B_FRAME = 3;
		public const uint32 SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1;
		public const uint32 SAMPLE_SEQ_CONTENT_REF_FRAME = 2;
		public const uint32 SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3;
		public const uint32 COMPONENT_TAG_CAPTION_MIN = 48;
		public const uint32 COMPONENT_TAG_CAPTION_MAX = 55;
		public const uint32 COMPONENT_TAG_SUPERIMPOSE_MIN = 56;
		public const uint32 COMPONENT_TAG_SUPERIMPOSE_MAX = 63;
		public const uint32 DVBS_SCAN_TABLE_MAX_SIZE = 400;
		public const String g_wszExcludeScriptStreamDeliverySynchronization = "ExcludeScriptStreamDeliverySynchronization";
		public const uint32 MPEG2_BASE = 512;
		public const HRESULT MPEG2_S_MORE_DATA_AVAILABLE = 262656;
		public const HRESULT MPEG2_S_NO_MORE_DATA_AVAILABLE = 262657;
		public const HRESULT MPEG2_S_SG_INFO_FOUND = 262658;
		public const HRESULT MPEG2_S_SG_INFO_NOT_FOUND = 262659;
		public const HRESULT MPEG2_S_MPE_INFO_FOUND = 262660;
		public const HRESULT MPEG2_S_MPE_INFO_NOT_FOUND = 262661;
		public const HRESULT MPEG2_S_NEW_MODULE_VERSION = 262662;
		public const HRESULT MPEG2_E_UNINITIALIZED = -2147220992;
		public const HRESULT MPEG2_E_ALREADY_INITIALIZED = -2147220991;
		public const HRESULT MPEG2_E_OUT_OF_BOUNDS = -2147220990;
		public const HRESULT MPEG2_E_MALFORMED_TABLE = -2147220989;
		public const HRESULT MPEG2_E_UNDEFINED = -2147220988;
		public const HRESULT MPEG2_E_NOT_PRESENT = -2147220987;
		public const HRESULT MPEG2_E_SECTION_NOT_FOUND = -2147220986;
		public const HRESULT MPEG2_E_TX_STREAM_UNAVAILABLE = -2147220985;
		public const HRESULT MPEG2_E_SERVICE_ID_NOT_FOUND = -2147220984;
		public const HRESULT MPEG2_E_SERVICE_PMT_NOT_FOUND = -2147220983;
		public const HRESULT MPEG2_E_DSI_NOT_FOUND = -2147220982;
		public const HRESULT MPEG2_E_SERVER_UNAVAILABLE = -2147220981;
		public const HRESULT MPEG2_E_INVALID_CAROUSEL_ID = -2147220980;
		public const HRESULT MPEG2_E_MALFORMED_DSMCC_MESSAGE = -2147220979;
		public const HRESULT MPEG2_E_INVALID_SG_OBJECT_KIND = -2147220978;
		public const HRESULT MPEG2_E_OBJECT_NOT_FOUND = -2147220977;
		public const HRESULT MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = -2147220976;
		public const HRESULT MPEG2_E_OBJECT_KIND_NOT_A_FILE = -2147220975;
		public const HRESULT MPEG2_E_FILE_OFFSET_TOO_BIG = -2147220974;
		public const HRESULT MPEG2_E_STREAM_STOPPED = -2147220973;
		public const HRESULT MPEG2_E_REGISTRY_ACCESS_FAILED = -2147220972;
		public const HRESULT MPEG2_E_INVALID_UDP_PORT = -2147220971;
		public const HRESULT MPEG2_E_DATA_SOURCE_FAILED = -2147220970;
		public const HRESULT MPEG2_E_DII_NOT_FOUND = -2147220969;
		public const HRESULT MPEG2_E_DSHOW_PIN_NOT_FOUND = -2147220968;
		public const HRESULT MPEG2_E_BUFFER_TOO_SMALL = -2147220967;
		public const HRESULT MPEG2_E_MISSING_SECTIONS = -2147220966;
		public const HRESULT MPEG2_E_TOO_MANY_SECTIONS = -2147220965;
		public const HRESULT MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = -2147220964;
		public const HRESULT MPEG2_E_INCORRECT_DESCRIPTOR_TAG = -2147220963;
		public const HRESULT MSDRI_S_MMI_PENDING = 2;
		public const HRESULT MSDRI_S_PENDING = 1;
		public const HRESULT BDA_E_FAILURE = -1073479679;
		public const HRESULT BDA_E_NOT_IMPLEMENTED = -1073479678;
		public const HRESULT BDA_E_NO_SUCH_COMMAND = -1073479677;
		public const HRESULT BDA_E_OUT_OF_BOUNDS = -1073479676;
		public const HRESULT BDA_E_INVALID_SCHEMA = -1073479675;
		public const HRESULT BDA_E_INVALID_HANDLE = -1073479674;
		public const HRESULT BDA_E_INVALID_TYPE = -1073479673;
		public const HRESULT BDA_E_READ_ONLY = -1073479672;
		public const HRESULT BDA_E_ACCESS_DENIED = -1073479671;
		public const HRESULT BDA_E_NOT_FOUND = -1073479670;
		public const HRESULT BDA_E_BUFFER_TOO_SMALL = -1073479669;
		public const HRESULT BDA_E_OUT_OF_RESOURCES = -1073479668;
		public const HRESULT BDA_E_OUT_OF_MEMORY = -1073479667;
		public const HRESULT BDA_E_DISABLED = -1073479666;
		public const HRESULT BDA_E_NO_HANDLER = -1073479665;
		public const HRESULT BDA_E_INVALID_LANGUAGE = -1073479664;
		public const HRESULT BDA_E_TIMEOUT_ELAPSED = -1073479663;
		public const HRESULT BDA_E_NO_MORE_EVENTS = -1073475583;
		public const HRESULT BDA_E_NO_MORE_DATA = -1073475582;
		public const HRESULT BDA_E_TUNER_INITIALIZING = -1073467391;
		public const HRESULT BDA_E_TUNER_REQUIRED = -1073467390;
		public const HRESULT BDA_E_TUNER_CONFLICT = -1073467389;
		public const HRESULT BDA_E_INVALID_TUNE_REQUEST = -1073467388;
		public const HRESULT BDA_E_INVALID_ENTITLEMENT_TOKEN = -1073463295;
		public const HRESULT BDA_E_INVALID_CAPTURE_TOKEN = -1073463294;
		public const HRESULT BDA_E_WOULD_DISRUPT_STREAMING = -1073463293;
		public const HRESULT BDA_E_INVALID_PURCHASE_TOKEN = -1073463292;
		public const HRESULT BDA_E_IPNETWORK_ERROR = -1073459199;
		public const HRESULT BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = -1073459198;
		public const HRESULT BDA_E_IPNETWORK_TIMEOUT = -1073459197;
		public const HRESULT BDA_E_IPNETWORK_UNAVAILABLE = -1073459196;
		public const HRESULT BDA_E_TUNE_FAILED_SDV01 = -1073455103;
		public const HRESULT BDA_E_TUNE_FAILED_SDV02 = -1073455102;
		public const HRESULT BDA_E_TUNE_FAILED_SDV03 = -1073455101;
		public const HRESULT BDA_E_TUNE_FAILED_SDV04 = -1073455100;
		public const HRESULT BDA_E_TUNE_FAILED_SDV05 = -1073455099;
		public const HRESULT BDA_E_TUNE_FAILED_SDV06 = -1073455098;
		public const HRESULT BDA_E_TUNE_FAILED_SDV07 = -1073455097;
		public const HRESULT BDA_E_TUNE_FAILED_SDV08 = -1073455096;
		public const HRESULT BDA_E_TUNE_FAILED_SDVFF = -1073454849;
		public const HRESULT BDA_E_WMDRM_INVALID_SIGNATURE = -1073418239;
		public const HRESULT BDA_E_WMDRM_INVALID_CERTIFICATE = -1073418238;
		public const HRESULT BDA_E_WMDRM_INVALID_VERSION = -1073418236;
		public const HRESULT BDA_E_WMDRM_INVALID_DATE = -1073418235;
		public const HRESULT BDA_E_WMDRM_INVALID_PROXIMITY = -1073418234;
		public const HRESULT BDA_E_WMDRM_KEY_ID_NOT_FOUND = -1073418232;
		public const Guid SPECIFYPAGES_STATISTICS = .(0x4c437b92, 0x6e9e, 0x11d1, 0xa7, 0x04, 0x00, 0x60, 0x97, 0xc4, 0xe4, 0x76);
		public const String g_wszStreamBufferRecordingDuration = "Duration";
		public const String g_wszStreamBufferRecordingBitrate = "Bitrate";
		public const String g_wszStreamBufferRecordingSeekable = "Seekable";
		public const String g_wszStreamBufferRecordingStridable = "Stridable";
		public const String g_wszStreamBufferRecordingBroadcast = "Broadcast";
		public const String g_wszStreamBufferRecordingProtected = "Is_Protected";
		public const String g_wszStreamBufferRecordingTrusted = "Is_Trusted";
		public const String g_wszStreamBufferRecordingSignature_Name = "Signature_Name";
		public const String g_wszStreamBufferRecordingHasAudio = "HasAudio";
		public const String g_wszStreamBufferRecordingHasImage = "HasImage";
		public const String g_wszStreamBufferRecordingHasScript = "HasScript";
		public const String g_wszStreamBufferRecordingHasVideo = "HasVideo";
		public const String g_wszStreamBufferRecordingCurrentBitrate = "CurrentBitrate";
		public const String g_wszStreamBufferRecordingOptimalBitrate = "OptimalBitrate";
		public const String g_wszStreamBufferRecordingHasAttachedImages = "HasAttachedImages";
		public const String g_wszStreamBufferRecordingSkipBackward = "Can_Skip_Backward";
		public const String g_wszStreamBufferRecordingSkipForward = "Can_Skip_Forward";
		public const String g_wszStreamBufferRecordingNumberOfFrames = "NumberOfFrames";
		public const String g_wszStreamBufferRecordingFileSize = "FileSize";
		public const String g_wszStreamBufferRecordingHasArbitraryDataStream = "HasArbitraryDataStream";
		public const String g_wszStreamBufferRecordingHasFileTransferStream = "HasFileTransferStream";
		public const String g_wszStreamBufferRecordingTitle = "Title";
		public const String g_wszStreamBufferRecordingAuthor = "Author";
		public const String g_wszStreamBufferRecordingDescription = "Description";
		public const String g_wszStreamBufferRecordingRating = "Rating";
		public const String g_wszStreamBufferRecordingCopyright = "Copyright";
		public const String g_wszStreamBufferRecordingUse_DRM = "Use_DRM";
		public const String g_wszStreamBufferRecordingDRM_Flags = "DRM_Flags";
		public const String g_wszStreamBufferRecordingDRM_Level = "DRM_Level";
		public const String g_wszStreamBufferRecordingAlbumTitle = "WM/AlbumTitle";
		public const String g_wszStreamBufferRecordingTrack = "WM/Track";
		public const String g_wszStreamBufferRecordingPromotionURL = "WM/PromotionURL";
		public const String g_wszStreamBufferRecordingAlbumCoverURL = "WM/AlbumCoverURL";
		public const String g_wszStreamBufferRecordingGenre = "WM/Genre";
		public const String g_wszStreamBufferRecordingYear = "WM/Year";
		public const String g_wszStreamBufferRecordingGenreID = "WM/GenreID";
		public const String g_wszStreamBufferRecordingMCDI = "WM/MCDI";
		public const String g_wszStreamBufferRecordingComposer = "WM/Composer";
		public const String g_wszStreamBufferRecordingLyrics = "WM/Lyrics";
		public const String g_wszStreamBufferRecordingTrackNumber = "WM/TrackNumber";
		public const String g_wszStreamBufferRecordingToolName = "WM/ToolName";
		public const String g_wszStreamBufferRecordingToolVersion = "WM/ToolVersion";
		public const String g_wszStreamBufferRecordingIsVBR = "IsVBR";
		public const String g_wszStreamBufferRecordingAlbumArtist = "WM/AlbumArtist";
		public const String g_wszStreamBufferRecordingBannerImageType = "BannerImageType";
		public const String g_wszStreamBufferRecordingBannerImageData = "BannerImageData";
		public const String g_wszStreamBufferRecordingBannerImageURL = "BannerImageURL";
		public const String g_wszStreamBufferRecordingCopyrightURL = "CopyrightURL";
		public const String g_wszStreamBufferRecordingAspectRatioX = "AspectRatioX";
		public const String g_wszStreamBufferRecordingAspectRatioY = "AspectRatioY";
		public const String g_wszStreamBufferRecordingNSCName = "NSC_Name";
		public const String g_wszStreamBufferRecordingNSCAddress = "NSC_Address";
		public const String g_wszStreamBufferRecordingNSCPhone = "NSC_Phone";
		public const String g_wszStreamBufferRecordingNSCEmail = "NSC_Email";
		public const String g_wszStreamBufferRecordingNSCDescription = "NSC_Description";
		public const int32 STREAMBUFFER_EC_TIMEHOLE = 806;
		public const int32 STREAMBUFFER_EC_STALE_DATA_READ = 807;
		public const int32 STREAMBUFFER_EC_STALE_FILE_DELETED = 808;
		public const int32 STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809;
		public const int32 STREAMBUFFER_EC_WRITE_FAILURE = 810;
		public const int32 STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811;
		public const int32 STREAMBUFFER_EC_READ_FAILURE = 812;
		public const int32 STREAMBUFFER_EC_RATE_CHANGED = 813;
		public const int32 STREAMBUFFER_EC_PRIMARY_AUDIO = 814;
		public const int32 STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815;
		public const int32 STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816;
		
		// --- Enums ---
		
		public enum OA_BOOL : int32
		{
			OATRUE = -1,
			OAFALSE = 0,
		}
		public enum MPEG2VIDEOINFO_FLAGS : uint32
		{
			DoPanScan = 1,
			DVDLine21Field1 = 2,
			DVDLine21Field2 = 4,
			SourceIsLetterboxed = 8,
			FilmCameraMode = 16,
			LetterboxAnalogOut = 32,
			DSS_UserData = 64,
			DVB_UserData = 128,
			_27MhzTimebase = 256,
			WidescreenAnalogOut = 512,
		}
		public enum MPEGLAYER3WAVEFORMAT_FLAGS : uint32
		{
			ISO = 0,
			ON = 1,
			OFF = 2,
		}
		public enum AMVP_SELECT_FORMAT_BY : int32
		{
			DO_NOT_CARE = 0,
			BEST_BANDWIDTH = 1,
			INPUT_SAME_AS_OUTPUT = 2,
		}
		public enum AMVP_MODE : int32
		{
			WEAVE = 0,
			BOBINTERLEAVED = 1,
			BOBNONINTERLEAVED = 2,
			SKIPEVEN = 3,
			SKIPODD = 4,
		}
		public enum PIN_DIRECTION : int32
		{
			INPUT = 0,
			OUTPUT = 1,
		}
		public enum FILTER_STATE : int32
		{
			Stopped = 0,
			Paused = 1,
			Running = 2,
		}
		[AllowDuplicates]
		public enum AM_SAMPLE_PROPERTY_FLAGS : int32
		{
			SAMPLE_SPLICEPOINT = 1,
			SAMPLE_PREROLL = 2,
			SAMPLE_DATADISCONTINUITY = 4,
			SAMPLE_TYPECHANGED = 8,
			SAMPLE_TIMEVALID = 16,
			SAMPLE_TIMEDISCONTINUITY = 64,
			SAMPLE_FLUSH_ON_PAUSE = 128,
			SAMPLE_STOPVALID = 256,
			SAMPLE_ENDOFSTREAM = 512,
			STREAM_MEDIA = 0,
			STREAM_CONTROL = 1,
		}
		[AllowDuplicates]
		public enum AM_SEEKING_SeekingFlags : int32
		{
			NoPositioning = 0,
			AbsolutePositioning = 1,
			RelativePositioning = 2,
			IncrementalPositioning = 3,
			PositioningBitsMask = 3,
			SeekToKeyFrame = 4,
			ReturnTime = 8,
			Segment = 16,
			NoFlush = 32,
		}
		public enum AM_SEEKING_SEEKING_CAPABILITIES : int32
		{
			CanSeekAbsolute = 1,
			CanSeekForwards = 2,
			CanSeekBackwards = 4,
			CanGetCurrentPos = 8,
			CanGetStopPos = 16,
			CanGetDuration = 32,
			CanPlayBackwards = 64,
			CanDoSegments = 128,
			Source = 256,
		}
		public enum AM_MEDIAEVENT_FLAGS : int32
		{
			NONOTIFY = 1,
		}
		public enum IFILTERMAPPER_MERIT : int32
		{
			PREFERRED = 8388608,
			NORMAL = 6291456,
			UNLIKELY = 4194304,
			DO_NOT_USE = 2097152,
			SW_COMPRESSOR = 1048576,
			HW_COMPRESSOR = 1048656,
		}
		public enum REG_PINFLAG : uint32
		{
			ZERO = 1,
			RENDERER = 2,
			MANY = 4,
			OUTPUT = 8,
		}
		public enum QualityMessageType : int32
		{
			Famine = 0,
			Flood = 1,
		}
		public enum COLORKEY_TYPE : int32
		{
			NOCOLORKEY = 0,
			INDEX = 1,
			RGB = 2,
		}
		public enum ADVISE_TYPE : uint32
		{
			NONE = 0,
			CLIPPING = 1,
			PALETTE = 2,
			COLORKEY = 4,
			POSITION = 8,
			DISPLAY_CHANGE = 16,
		}
		public enum AM_FILESINK_FLAGS : int32
		{
			FILE_OVERWRITE = 1,
		}
		public enum _AM_RENSDEREXFLAGS : int32
		{
			AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1,
		}
		public enum AM_STREAM_INFO_FLAGS : int32
		{
			START_DEFINED = 1,
			STOP_DEFINED = 2,
			DISCARDING = 4,
			STOP_SEND_EXTRA = 16,
		}
		public enum InterleavingMode : int32
		{
			NONE = 0,
			CAPTURE = 1,
			FULL = 2,
			NONE_BUFFERED = 3,
		}
		public enum CompressionCaps : int32
		{
			Quality = 1,
			Crunch = 2,
			KeyFrame = 4,
			BFrame = 8,
			Window = 16,
		}
		public enum VfwCaptureDialogs : int32
		{
			Source = 1,
			Format = 2,
			Display = 4,
		}
		public enum VfwCompressDialogs : int32
		{
			Config = 1,
			About = 2,
			QueryConfig = 4,
			QueryAbout = 8,
		}
		public enum AnalogVideoStandard : int32
		{
			Video_None = 0,
			Video_NTSC_M = 1,
			Video_NTSC_M_J = 2,
			Video_NTSC_433 = 4,
			Video_PAL_B = 16,
			Video_PAL_D = 32,
			Video_PAL_G = 64,
			Video_PAL_H = 128,
			Video_PAL_I = 256,
			Video_PAL_M = 512,
			Video_PAL_N = 1024,
			Video_PAL_60 = 2048,
			Video_SECAM_B = 4096,
			Video_SECAM_D = 8192,
			Video_SECAM_G = 16384,
			Video_SECAM_H = 32768,
			Video_SECAM_K = 65536,
			Video_SECAM_K1 = 131072,
			Video_SECAM_L = 262144,
			Video_SECAM_L1 = 524288,
			Video_PAL_N_COMBO = 1048576,
			VideoMask_MCE_NTSC = 1052167,
			VideoMask_MCE_PAL = 496,
			VideoMask_MCE_SECAM = 1044480,
		}
		public enum TunerInputType : int32
		{
			Cable = 0,
			Antenna = 1,
		}
		public enum VideoCopyProtectionType : int32
		{
			Basic = 0,
			CBI = 1,
		}
		public enum PhysicalConnectorType : int32
		{
			Video_Tuner = 1,
			Video_Composite = 2,
			Video_SVideo = 3,
			Video_RGB = 4,
			Video_YRYBY = 5,
			Video_SerialDigital = 6,
			Video_ParallelDigital = 7,
			Video_SCSI = 8,
			Video_AUX = 9,
			Video_1394 = 10,
			Video_USB = 11,
			Video_VideoDecoder = 12,
			Video_VideoEncoder = 13,
			Video_SCART = 14,
			Video_Black = 15,
			Audio_Tuner = 4096,
			Audio_Line = 4097,
			Audio_Mic = 4098,
			Audio_AESDigital = 4099,
			Audio_SPDIFDigital = 4100,
			Audio_SCSI = 4101,
			Audio_AUX = 4102,
			Audio_1394 = 4103,
			Audio_USB = 4104,
			Audio_AudioDecoder = 4105,
		}
		public enum VideoProcAmpProperty : int32
		{
			Brightness = 0,
			Contrast = 1,
			Hue = 2,
			Saturation = 3,
			Sharpness = 4,
			Gamma = 5,
			ColorEnable = 6,
			WhiteBalance = 7,
			BacklightCompensation = 8,
			Gain = 9,
		}
		public enum VideoProcAmpFlags : int32
		{
			Auto = 1,
			Manual = 2,
		}
		public enum CameraControlProperty : int32
		{
			Pan = 0,
			Tilt = 1,
			Roll = 2,
			Zoom = 3,
			Exposure = 4,
			Iris = 5,
			Focus = 6,
		}
		public enum CameraControlFlags : int32
		{
			Auto = 1,
			Manual = 2,
		}
		public enum VideoControlFlags : int32
		{
			FlipHorizontal = 1,
			FlipVertical = 2,
			ExternalTriggerEnable = 4,
			Trigger = 8,
		}
		public enum AMTunerSubChannel : int32
		{
			NO_TUNE = -2,
			DEFAULT = -1,
		}
		public enum AMTunerSignalStrength : int32
		{
			HASNOSIGNALSTRENGTH = -1,
			NOSIGNAL = 0,
			SIGNALPRESENT = 1,
		}
		public enum AMTunerModeType : int32
		{
			DEFAULT = 0,
			TV = 1,
			FM_RADIO = 2,
			AM_RADIO = 4,
			DSS = 8,
		}
		public enum AMTunerEventType : int32
		{
			AMTUNER_EVENT_CHANGED = 1,
		}
		public enum TVAudioMode : int32
		{
			MODE_MONO = 1,
			MODE_STEREO = 2,
			MODE_LANG_A = 16,
			MODE_LANG_B = 32,
			MODE_LANG_C = 64,
			PRESET_STEREO = 512,
			PRESET_LANG_A = 4096,
			PRESET_LANG_B = 8192,
			PRESET_LANG_C = 16384,
		}
		public enum AMTVAudioEventType : int32
		{
			AMTVAUDIO_EVENT_CHANGED = 1,
		}
		public enum AMPROPERTY_PIN : int32
		{
			CATEGORY = 0,
			MEDIUM = 1,
		}
		public enum _AMSTREAMSELECTINFOFLAGS : int32
		{
			ENABLED = 1,
			EXCLUSIVE = 2,
		}
		public enum _AMSTREAMSELECTENABLEFLAGS : int32
		{
			ENABLE = 1,
			ENABLEALL = 2,
		}
		public enum _AMRESCTL_RESERVEFLAGS : int32
		{
			RESERVE = 0,
			UNRESERVE = 1,
		}
		public enum _AM_FILTER_MISC_FLAGS : int32
		{
			RENDERER = 1,
			SOURCE = 2,
		}
		public enum DECIMATION_USAGE : int32
		{
			LEGACY = 0,
			USE_DECODER_ONLY = 1,
			USE_VIDEOPORT_ONLY = 2,
			USE_OVERLAY_ONLY = 3,
			DEFAULT = 4,
		}
		public enum _AM_PUSHSOURCE_FLAGS : int32
		{
			PUSHSOURCECAPS_INTERNAL_RM = 1,
			PUSHSOURCECAPS_NOT_LIVE = 2,
			PUSHSOURCECAPS_PRIVATE_CLOCK = 4,
			PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536,
			PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072,
		}
		public enum _DVENCODERRESOLUTION : int32
		{
			_720x480 = 2012,
			_360x240 = 2013,
			_180x120 = 2014,
			_88x60 = 2015,
		}
		public enum _DVENCODERVIDEOFORMAT : int32
		{
			NTSC = 2000,
			PAL = 2001,
		}
		public enum _DVENCODERFORMAT : int32
		{
			DVSD = 2007,
			DVHD = 2008,
			DVSL = 2009,
		}
		public enum _DVDECODERRESOLUTION : int32
		{
			_720x480 = 1000,
			_360x240 = 1001,
			_180x120 = 1002,
			_88x60 = 1003,
		}
		public enum _DVRESOLUTION : int32
		{
			FULL = 1000,
			HALF = 1001,
			QUARTER = 1002,
			DC = 1003,
		}
		public enum _AM_AUDIO_RENDERER_STAT_PARAM : int32
		{
			BREAK_COUNT = 1,
			SLAVE_MODE = 2,
			SILENCE_DUR = 3,
			LAST_BUFFER_DUR = 4,
			DISCONTINUITIES = 5,
			SLAVE_RATE = 6,
			SLAVE_DROPWRITE_DUR = 7,
			SLAVE_HIGHLOWERROR = 8,
			SLAVE_LASTHIGHLOWERROR = 9,
			SLAVE_ACCUMERROR = 10,
			BUFFERFULLNESS = 11,
			JITTER = 12,
		}
		public enum _AM_INTF_SEARCH_FLAGS : int32
		{
			INPUT_PIN = 1,
			OUTPUT_PIN = 2,
			FILTER = 4,
		}
		public enum AMOVERLAYFX : int32
		{
			NOFX = 0,
			MIRRORLEFTRIGHT = 2,
			MIRRORUPDOWN = 4,
			DEINTERLACE = 8,
		}
		public enum _AM_PIN_FLOW_CONTROL_BLOCK_FLAGS : int32
		{
			AM_PIN_FLOW_CONTROL_BLOCK = 1,
		}
		public enum AM_GRAPH_CONFIG_RECONNECT_FLAGS : int32
		{
			DIRECTCONNECT = 1,
			CACHE_REMOVED_FILTERS = 2,
			USE_ONLY_CACHED_FILTERS = 4,
		}
		public enum _REM_FILTER_FLAGS : int32
		{
			REMFILTERF_LEAVECONNECTED = 1,
		}
		public enum AM_FILTER_FLAGS : int32
		{
			FLAGS_REMOVABLE = 1,
		}
		public enum VMRPresentationFlags : int32
		{
			SyncPoint = 1,
			Preroll = 2,
			Discontinuity = 4,
			TimeValid = 8,
			SrcDstRectsValid = 16,
		}
		public enum VMRSurfaceAllocationFlags : int32
		{
			PIXELFORMAT_VALID = 1,
			_3D_TARGET = 2,
			ALLOW_SYSMEM = 4,
			FORCE_SYSMEM = 8,
			DIRECTED_FLIP = 16,
			DXVA_TARGET = 32,
		}
		public enum VMR_ASPECT_RATIO_MODE : int32
		{
			NONE = 0,
			LETTER_BOX = 1,
		}
		public enum VMRMixerPrefs : int32
		{
			NoDecimation = 1,
			DecimateOutput = 2,
			ARAdjustXorY = 4,
			DecimationReserved = 8,
			DecimateMask = 15,
			BiLinearFiltering = 16,
			PointFiltering = 32,
			FilteringMask = 240,
			RenderTargetRGB = 256,
			RenderTargetYUV = 4096,
			RenderTargetYUV420 = 512,
			RenderTargetYUV422 = 1024,
			RenderTargetYUV444 = 2048,
			RenderTargetReserved = 57344,
			RenderTargetMask = 65280,
			DynamicSwitchToBOB = 65536,
			DynamicDecimateBy2 = 131072,
			DynamicReserved = 786432,
			DynamicMask = 983040,
		}
		[AllowDuplicates]
		public enum VMRRenderPrefs : int32
		{
			RestrictToInitialMonitor = 0,
			ForceOffscreen = 1,
			ForceOverlays = 2,
			AllowOverlays = 0,
			AllowOffscreen = 0,
			DoNotRenderColorKeyAndBorder = 8,
			Reserved = 16,
			PreferAGPMemWhenMixing = 32,
			Mask = 63,
		}
		public enum VMRMode : int32
		{
			Windowed = 1,
			Windowless = 2,
			Renderless = 4,
			Mask = 7,
		}
		public enum STREAMIF_CONSTANTS : int32
		{
			MAX_NUMBER_OF_STREAMS = 16,
		}
		public enum VMRDeinterlacePrefs : int32
		{
			NextBest = 1,
			BOB = 2,
			Weave = 4,
			Mask = 7,
		}
		public enum VMRDeinterlaceTech : int32
		{
			Unknown = 0,
			BOBLineReplicate = 1,
			BOBVerticalStretch = 2,
			MedianFiltering = 4,
			EdgeFiltering = 16,
			FieldAdaptive = 32,
			PixelAdaptive = 64,
			MotionVectorSteered = 128,
		}
		public enum DVD_DOMAIN : int32
		{
			FirstPlay = 1,
			VideoManagerMenu = 2,
			VideoTitleSetMenu = 3,
			Title = 4,
			Stop = 5,
		}
		public enum DVD_MENU_ID : int32
		{
			Title = 2,
			Root = 3,
			Subpicture = 4,
			Audio = 5,
			Angle = 6,
			Chapter = 7,
		}
		public enum DVD_DISC_SIDE : int32
		{
			A = 1,
			B = 2,
		}
		public enum DVD_PREFERRED_DISPLAY_MODE : int32
		{
			CONTENT_DEFAULT = 0,
			_16x9 = 1,
			_4x3_PANSCAN_PREFERRED = 2,
			_4x3_LETTERBOX_PREFERRED = 3,
		}
		public enum DVD_FRAMERATE : int32
		{
			_25 = 1,
			_30NonDrop = 3,
		}
		public enum DVD_NavCmdType : int32
		{
			Pre = 1,
			Post = 2,
			Cell = 3,
			Button = 4,
		}
		public enum DVD_TIMECODE_FLAGS : int32
		{
			_25fps = 1,
			_30fps = 2,
			DropFrame = 4,
			Interpolated = 8,
		}
		public enum VALID_UOP_FLAG : int32
		{
			Play_Title_Or_AtTime = 1,
			Play_Chapter = 2,
			Play_Title = 4,
			Stop = 8,
			ReturnFromSubMenu = 16,
			Play_Chapter_Or_AtTime = 32,
			PlayPrev_Or_Replay_Chapter = 64,
			PlayNext_Chapter = 128,
			Play_Forwards = 256,
			Play_Backwards = 512,
			ShowMenu_Title = 1024,
			ShowMenu_Root = 2048,
			ShowMenu_SubPic = 4096,
			ShowMenu_Audio = 8192,
			ShowMenu_Angle = 16384,
			ShowMenu_Chapter = 32768,
			Resume = 65536,
			Select_Or_Activate_Button = 131072,
			Still_Off = 262144,
			Pause_On = 524288,
			Select_Audio_Stream = 1048576,
			Select_SubPic_Stream = 2097152,
			Select_Angle = 4194304,
			Select_Karaoke_Audio_Presentation_Mode = 8388608,
			Select_Video_Mode_Preference = 16777216,
		}
		public enum DVD_CMD_FLAGS : int32
		{
			None = 0,
			Flush = 1,
			SendEvents = 2,
			Block = 4,
			StartWhenRendered = 8,
			EndAfterRendered = 16,
		}
		public enum DVD_OPTION_FLAG : int32
		{
			ResetOnStop = 1,
			NotifyParentalLevelChange = 2,
			HMSF_TimeCodeEvents = 3,
			AudioDuringFFwdRew = 4,
			EnableNonblockingAPIs = 5,
			CacheSizeInMB = 6,
			EnablePortableBookmarks = 7,
			EnableExtendedCopyProtectErrors = 8,
			NotifyPositionChange = 9,
			IncreaseOutputControl = 10,
			EnableStreaming = 11,
			EnableESOutput = 12,
			EnableTitleLength = 13,
			DisableStillThrottle = 14,
			EnableLoggingEvents = 15,
			MaxReadBurstInKB = 16,
			ReadBurstPeriodInMS = 17,
			RestartDisc = 18,
			EnableCC = 19,
		}
		public enum DVD_RELATIVE_BUTTON : int32
		{
			Upper = 1,
			Lower = 2,
			Left = 3,
			Right = 4,
		}
		public enum DVD_PARENTAL_LEVEL : int32
		{
			_8 = 32768,
			_7 = 16384,
			_6 = 8192,
			_5 = 4096,
			_4 = 2048,
			_3 = 1024,
			_2 = 512,
			_1 = 256,
		}
		public enum DVD_AUDIO_LANG_EXT : int32
		{
			NotSpecified = 0,
			Captions = 1,
			VisuallyImpaired = 2,
			DirectorComments1 = 3,
			DirectorComments2 = 4,
		}
		public enum DVD_SUBPICTURE_LANG_EXT : int32
		{
			NotSpecified = 0,
			Caption_Normal = 1,
			Caption_Big = 2,
			Caption_Children = 3,
			CC_Normal = 5,
			CC_Big = 6,
			CC_Children = 7,
			Forced = 9,
			DirectorComments_Normal = 13,
			DirectorComments_Big = 14,
			DirectorComments_Children = 15,
		}
		public enum DVD_AUDIO_APPMODE : int32
		{
			None = 0,
			Karaoke = 1,
			Surround = 2,
			Other = 3,
		}
		public enum DVD_AUDIO_FORMAT : int32
		{
			AC3 = 0,
			MPEG1 = 1,
			MPEG1_DRC = 2,
			MPEG2 = 3,
			MPEG2_DRC = 4,
			LPCM = 5,
			DTS = 6,
			SDDS = 7,
			Other = 8,
		}
		public enum DVD_KARAOKE_DOWNMIX : int32
		{
			_0to0 = 1,
			_1to0 = 2,
			_2to0 = 4,
			_3to0 = 8,
			_4to0 = 16,
			Lto0 = 32,
			Rto0 = 64,
			_0to1 = 256,
			_1to1 = 512,
			_2to1 = 1024,
			_3to1 = 2048,
			_4to1 = 4096,
			Lto1 = 8192,
			Rto1 = 16384,
		}
		public enum DVD_KARAOKE_CONTENTS : int32
		{
			GuideVocal1 = 1,
			GuideVocal2 = 2,
			GuideMelody1 = 4,
			GuideMelody2 = 8,
			GuideMelodyA = 16,
			GuideMelodyB = 32,
			SoundEffectA = 64,
			SoundEffectB = 128,
		}
		public enum DVD_KARAOKE_ASSIGNMENT : int32
		{
			reserved0 = 0,
			reserved1 = 1,
			LR = 2,
			LRM = 3,
			LR1 = 4,
			LRM1 = 5,
			LR12 = 6,
			LRM12 = 7,
		}
		public enum DVD_VIDEO_COMPRESSION : int32
		{
			Other = 0,
			MPEG1 = 1,
			MPEG2 = 2,
		}
		public enum DVD_SUBPICTURE_TYPE : int32
		{
			NotSpecified = 0,
			Language = 1,
			Other = 2,
		}
		public enum DVD_SUBPICTURE_CODING : int32
		{
			RunLength = 0,
			Extended = 1,
			Other = 2,
		}
		public enum DVD_TITLE_APPMODE : int32
		{
			Not_Specified = 0,
			Karaoke = 1,
			Other = 3,
		}
		public enum DVD_TextStringType : int32
		{
			Struct_Volume = 1,
			Struct_Title = 2,
			Struct_ParentalID = 3,
			Struct_PartOfTitle = 4,
			Struct_Cell = 5,
			Stream_Audio = 16,
			Stream_Subpicture = 17,
			Stream_Angle = 18,
			Channel_Audio = 32,
			General_Name = 48,
			General_Comments = 49,
			Title_Series = 56,
			Title_Movie = 57,
			Title_Video = 58,
			Title_Album = 59,
			Title_Song = 60,
			Title_Other = 63,
			Title_Sub_Series = 64,
			Title_Sub_Movie = 65,
			Title_Sub_Video = 66,
			Title_Sub_Album = 67,
			Title_Sub_Song = 68,
			Title_Sub_Other = 71,
			Title_Orig_Series = 72,
			Title_Orig_Movie = 73,
			Title_Orig_Video = 74,
			Title_Orig_Album = 75,
			Title_Orig_Song = 76,
			Title_Orig_Other = 79,
			Other_Scene = 80,
			Other_Cut = 81,
			Other_Take = 82,
		}
		public enum DVD_TextCharSet : int32
		{
			Unicode = 0,
			ISO646 = 1,
			JIS_Roman_Kanji = 2,
			ISO8859_1 = 3,
			ShiftJIS_Kanji_Roman_Katakana = 4,
		}
		public enum AM_DVD_GRAPH_FLAGS : int32
		{
			HWDEC_PREFER = 1,
			HWDEC_ONLY = 2,
			SWDEC_PREFER = 4,
			SWDEC_ONLY = 8,
			NOVPE = 256,
			DO_NOT_CLEAR = 512,
			VMR9_ONLY = 2048,
			EVR_ONLY = 4096,
			EVR_QOS = 8192,
			ADAPT_GRAPH = 16384,
			MASK = 65535,
		}
		public enum AM_DVD_STREAM_FLAGS : int32
		{
			VIDEO = 1,
			AUDIO = 2,
			SUBPIC = 4,
		}
		public enum _AM_OVERLAY_NOTIFY_FLAGS : int32
		{
			VISIBLE_CHANGE = 1,
			SOURCE_CHANGE = 2,
			DEST_CHANGE = 4,
		}
		public enum BDA_EVENT_ID : int32
		{
			SIGNAL_LOSS = 0,
			SIGNAL_LOCK = 1,
			DATA_START = 2,
			DATA_STOP = 3,
			CHANNEL_ACQUIRED = 4,
			CHANNEL_LOST = 5,
			CHANNEL_SOURCE_CHANGED = 6,
			CHANNEL_ACTIVATED = 7,
			CHANNEL_DEACTIVATED = 8,
			SUBCHANNEL_ACQUIRED = 9,
			SUBCHANNEL_LOST = 10,
			SUBCHANNEL_SOURCE_CHANGED = 11,
			SUBCHANNEL_ACTIVATED = 12,
			SUBCHANNEL_DEACTIVATED = 13,
			ACCESS_GRANTED = 14,
			ACCESS_DENIED = 15,
			OFFER_EXTENDED = 16,
			PURCHASE_COMPLETED = 17,
			SMART_CARD_INSERTED = 18,
			SMART_CARD_REMOVED = 19,
		}
		public enum BDA_MULTICAST_MODE : int32
		{
			PROMISCUOUS_MULTICAST = 0,
			FILTERED_MULTICAST = 1,
			NO_MULTICAST = 2,
		}
		public enum BDA_SIGNAL_STATE : int32
		{
			UNAVAILABLE = 0,
			INACTIVE = 1,
			ACTIVE = 2,
		}
		public enum BDA_CHANGE_STATE : int32
		{
			COMPLETE = 0,
			PENDING = 1,
		}
		public enum MEDIA_SAMPLE_CONTENT : int32
		{
			TRANSPORT_PACKET = 0,
			ELEMENTARY_STREAM = 1,
			MPEG2_PSI = 2,
			TRANSPORT_PAYLOAD = 3,
		}
		public enum ISDBCAS_REQUEST_ID : int32
		{
			EMG = 56,
			EMD = 58,
		}
		public enum MUX_PID_TYPE : int32
		{
			OTHER = -1,
			ELEMENTARY_STREAM = 0,
			MPEG2_SECTION_PSI_SI = 1,
		}
		public enum DVBSystemType : int32
		{
			DVB_Cable = 0,
			DVB_Terrestrial = 1,
			DVB_Satellite = 2,
			ISDB_Terrestrial = 3,
			ISDB_Satellite = 4,
		}
		public enum BDA_Channel : int32
		{
			UNDEFINED_CHANNEL = -1,
		}
		public enum ComponentCategory : int32
		{
			CategoryNotSet = -1,
			CategoryOther = 0,
			CategoryVideo = 1,
			CategoryAudio = 2,
			CategoryText = 3,
			CategorySubtitles = 4,
			CategoryCaptions = 5,
			CategorySuperimpose = 6,
			CategoryData = 7,
			CATEGORY_COUNT = 8,
		}
		public enum ComponentStatus : int32
		{
			Active = 0,
			Inactive = 1,
			Unavailable = 2,
		}
		[AllowDuplicates]
		public enum MPEG2StreamType : int32
		{
			BDA_UNITIALIZED_MPEG2STREAMTYPE = -1,
			Reserved1 = 0,
			ISO_IEC_11172_2_VIDEO = 1,
			ISO_IEC_13818_2_VIDEO = 2,
			ISO_IEC_11172_3_AUDIO = 3,
			ISO_IEC_13818_3_AUDIO = 4,
			ISO_IEC_13818_1_PRIVATE_SECTION = 5,
			ISO_IEC_13818_1_PES = 6,
			ISO_IEC_13522_MHEG = 7,
			ANNEX_A_DSM_CC = 8,
			ITU_T_REC_H_222_1 = 9,
			ISO_IEC_13818_6_TYPE_A = 10,
			ISO_IEC_13818_6_TYPE_B = 11,
			ISO_IEC_13818_6_TYPE_C = 12,
			ISO_IEC_13818_6_TYPE_D = 13,
			ISO_IEC_13818_1_AUXILIARY = 14,
			ISO_IEC_13818_7_AUDIO = 15,
			ISO_IEC_14496_2_VISUAL = 16,
			ISO_IEC_14496_3_AUDIO = 17,
			ISO_IEC_14496_1_IN_PES = 18,
			ISO_IEC_14496_1_IN_SECTION = 19,
			ISO_IEC_13818_6_DOWNLOAD = 20,
			METADATA_IN_PES = 21,
			METADATA_IN_SECTION = 22,
			METADATA_IN_DATA_CAROUSEL = 23,
			METADATA_IN_OBJECT_CAROUSEL = 24,
			METADATA_IN_DOWNLOAD_PROTOCOL = 25,
			IRPM_STREAMM = 26,
			ITU_T_H264 = 27,
			ISO_IEC_13818_1_RESERVED = 28,
			USER_PRIVATE = 16,
			HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36,
			HEVC_TEMPORAL_VIDEO_SUBSET = 37,
			ISO_IEC_USER_PRIVATE = 128,
			DOLBY_AC3_AUDIO = 129,
			DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135,
		}
		public enum ATSCComponentTypeFlags : int32
		{
			ATSCCT_AC3 = 1,
		}
		public enum BinaryConvolutionCodeRate : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			_1_2 = 1,
			_2_3 = 2,
			_3_4 = 3,
			_3_5 = 4,
			_4_5 = 5,
			_5_6 = 6,
			_5_11 = 7,
			_7_8 = 8,
			_1_4 = 9,
			_1_3 = 10,
			_2_5 = 11,
			_6_7 = 12,
			_8_9 = 13,
			_9_10 = 14,
			MAX = 15,
		}
		public enum FECMethod : int32
		{
			METHOD_NOT_SET = -1,
			METHOD_NOT_DEFINED = 0,
			VITERBI = 1,
			RS_204_188 = 2,
			LDPC = 3,
			BCH = 4,
			RS_147_130 = 5,
			MAX = 6,
		}
		public enum ModulationType : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			_16QAM = 1,
			_32QAM = 2,
			_64QAM = 3,
			_80QAM = 4,
			_96QAM = 5,
			_112QAM = 6,
			_128QAM = 7,
			_160QAM = 8,
			_192QAM = 9,
			_224QAM = 10,
			_256QAM = 11,
			_320QAM = 12,
			_384QAM = 13,
			_448QAM = 14,
			_512QAM = 15,
			_640QAM = 16,
			_768QAM = 17,
			_896QAM = 18,
			_1024QAM = 19,
			QPSK = 20,
			BPSK = 21,
			OQPSK = 22,
			_8VSB = 23,
			_16VSB = 24,
			ANALOG_AMPLITUDE = 25,
			ANALOG_FREQUENCY = 26,
			_8PSK = 27,
			RF = 28,
			_16APSK = 29,
			_32APSK = 30,
			NBC_QPSK = 31,
			NBC_8PSK = 32,
			DIRECTV = 33,
			ISDB_T_TMCC = 34,
			ISDB_S_TMCC = 35,
			MAX = 36,
		}
		public enum ScanModulationTypes : int32
		{
			BDA_SCAN_MOD_16QAM = 1,
			BDA_SCAN_MOD_32QAM = 2,
			BDA_SCAN_MOD_64QAM = 4,
			BDA_SCAN_MOD_80QAM = 8,
			BDA_SCAN_MOD_96QAM = 16,
			BDA_SCAN_MOD_112QAM = 32,
			BDA_SCAN_MOD_128QAM = 64,
			BDA_SCAN_MOD_160QAM = 128,
			BDA_SCAN_MOD_192QAM = 256,
			BDA_SCAN_MOD_224QAM = 512,
			BDA_SCAN_MOD_256QAM = 1024,
			BDA_SCAN_MOD_320QAM = 2048,
			BDA_SCAN_MOD_384QAM = 4096,
			BDA_SCAN_MOD_448QAM = 8192,
			BDA_SCAN_MOD_512QAM = 16384,
			BDA_SCAN_MOD_640QAM = 32768,
			BDA_SCAN_MOD_768QAM = 65536,
			BDA_SCAN_MOD_896QAM = 131072,
			BDA_SCAN_MOD_1024QAM = 262144,
			BDA_SCAN_MOD_QPSK = 524288,
			BDA_SCAN_MOD_BPSK = 1048576,
			BDA_SCAN_MOD_OQPSK = 2097152,
			BDA_SCAN_MOD_8VSB = 4194304,
			BDA_SCAN_MOD_16VSB = 8388608,
			BDA_SCAN_MOD_AM_RADIO = 16777216,
			BDA_SCAN_MOD_FM_RADIO = 33554432,
			BDA_SCAN_MOD_8PSK = 67108864,
			BDA_SCAN_MOD_RF = 134217728,
			ScanModulationTypesMask_MCE_DigitalCable = 11,
			ScanModulationTypesMask_MCE_TerrestrialATSC = 23,
			ScanModulationTypesMask_MCE_AnalogTv = 28,
			ScanModulationTypesMask_MCE_All_TV = -1,
			ScanModulationTypesMask_DVBC = 75,
			BDA_SCAN_MOD_16APSK = 268435456,
			BDA_SCAN_MOD_32APSK = 536870912,
		}
		public enum SpectralInversion : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			AUTOMATIC = 1,
			NORMAL = 2,
			INVERTED = 3,
			MAX = 4,
		}
		public enum Polarisation : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			LINEAR_H = 1,
			LINEAR_V = 2,
			CIRCULAR_L = 3,
			CIRCULAR_R = 4,
			MAX = 5,
		}
		public enum LNB_Source : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			A = 1,
			B = 2,
			C = 3,
			D = 4,
			MAX = 5,
		}
		public enum GuardInterval : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			_1_32 = 1,
			_1_16 = 2,
			_1_8 = 3,
			_1_4 = 4,
			_1_128 = 5,
			_19_128 = 6,
			_19_256 = 7,
			MAX = 8,
		}
		public enum HierarchyAlpha : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			_1 = 1,
			_2 = 2,
			_4 = 3,
			MAX = 4,
		}
		public enum TransmissionMode : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			_2K = 1,
			_8K = 2,
			_4K = 3,
			_2K_INTERLEAVED = 4,
			_4K_INTERLEAVED = 5,
			_1K = 6,
			_16K = 7,
			_32K = 8,
			MAX = 9,
		}
		public enum RollOff : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			_20 = 1,
			_25 = 2,
			_35 = 3,
			MAX = 4,
		}
		public enum Pilot : int32
		{
			NOT_SET = -1,
			NOT_DEFINED = 0,
			OFF = 1,
			ON = 2,
			MAX = 3,
		}
		public enum BDA_Frequency : int32
		{
			SET = -1,
			DEFINED = 0,
		}
		public enum BDA_Range : int32
		{
			SET = -1,
			DEFINED = 0,
		}
		public enum BDA_Channel_Bandwidth : int32
		{
			SET = -1,
			DEFINED = 0,
		}
		public enum BDA_Frequency_Multiplier : int32
		{
			SET = -1,
			DEFINED = 0,
		}
		public enum BDA_Comp_Flags : int32
		{
			NOT_DEFINED = 0,
			EXCLUDE_TS_FROM_TR = 1,
			INCLUDE_LOCATOR_IN_TR = 2,
			INCLUDE_COMPONENTS_IN_TR = 4,
		}
		public enum ApplicationTypeType : int32
		{
			ConditionalAccess = 0,
			POD_Host_Binding_Information = 1,
			IPService = 2,
			NetworkInterface_SCTE55_2 = 3,
			NetworkInterface_SCTE55_1 = 4,
			CopyProtection = 5,
			Diagnostic = 6,
			Undesignated = 7,
			Reserved = 8,
		}
		public enum BDA_CONDITIONALACCESS_REQUESTTYPE : int32
		{
			UNSPECIFIED = 0,
			NOT_POSSIBLE = 1,
			POSSIBLE = 2,
			POSSIBLE_NO_STREAMING_DISRUPTION = 3,
		}
		public enum BDA_CONDITIONALACCESS_MMICLOSEREASON : int32
		{
			UNSPECIFIED = 0,
			CLOSED_ITSELF = 1,
			TUNER_REQUESTED_CLOSE = 2,
			DIALOG_TIMEOUT = 3,
			DIALOG_FOCUS_CHANGE = 4,
			DIALOG_USER_DISMISSED = 5,
			DIALOG_USER_NOT_AVAILABLE = 6,
		}
		public enum BDA_CONDITIONALACCESS_SESSION_RESULT : int32
		{
			SUCCESSFULL = 0,
			ENDED_NOCHANGE = 1,
			ABORTED = 2,
		}
		public enum BDA_DISCOVERY_STATE : int32
		{
			UNSPECIFIED = 0,
			REQUIRED = 1,
			COMPLETE = 2,
		}
		public enum SmartCardStatusType : int32
		{
			Inserted = 0,
			Removed = 1,
			Error = 2,
			DataChanged = 3,
			FirmwareUpgrade = 4,
		}
		public enum SmartCardAssociationType : int32
		{
			NotAssociated = 0,
			Associated = 1,
			AssociationUnknown = 2,
		}
		public enum LocationCodeSchemeType : int32
		{
			SCTE_18 = 0,
		}
		public enum EntitlementType : int32
		{
			Entitled = 0,
			NotEntitled = 1,
			TechnicalFailure = 2,
		}
		public enum UICloseReasonType : int32
		{
			NotReady = 0,
			UserClosed = 1,
			SystemClosed = 2,
			DeviceClosed = 3,
			ErrorClosed = 4,
		}
		public enum BDA_DrmPairingError : int32
		{
			Succeeded = 0,
			HardwareFailure = 1,
			NeedRevocationData = 2,
			NeedIndiv = 3,
			Other = 4,
			DrmInitFailed = 5,
			DrmNotPaired = 6,
			DrmRePairSoon = 7,
			Aborted = 8,
			NeedSDKUpdate = 9,
		}
		public enum KSPROPERTY_IPSINK : uint32
		{
			MULTICASTLIST = 0,
			ADAPTER_DESCRIPTION = 1,
			ADAPTER_ADDRESS = 2,
		}
		public enum AMExtendedSeekingCapabilities : int32
		{
			CANSEEK = 1,
			CANSCAN = 2,
			MARKERSEEK = 4,
			SCANWITHOUTCLOCK = 8,
			NOSTANDARDREPAINT = 16,
			BUFFERING = 32,
			SENDS_VIDEOFRAMEREADY = 64,
		}
		public enum AM_LINE21_CCLEVEL : int32
		{
			L21_CCLEVEL_TC2 = 0,
		}
		public enum AM_LINE21_CCSERVICE : int32
		{
			None = 0,
			Caption1 = 1,
			Caption2 = 2,
			Text1 = 3,
			Text2 = 4,
			XDS = 5,
			DefChannel = 10,
			Invalid = 11,
		}
		public enum AM_LINE21_CCSTATE : int32
		{
			Off = 0,
			On = 1,
		}
		public enum AM_LINE21_CCSTYLE : int32
		{
			None = 0,
			PopOn = 1,
			PaintOn = 2,
			RollUp = 3,
		}
		public enum AM_LINE21_DRAWBGMODE : int32
		{
			Opaque = 0,
			Transparent = 1,
		}
		public enum AM_WST_LEVEL : int32
		{
			LEVEL_1_5 = 0,
		}
		public enum AM_WST_SERVICE : int32
		{
			None = 0,
			Text = 1,
			IDS = 2,
			Invalid = 3,
		}
		public enum AM_WST_STATE : int32
		{
			Off = 0,
			On = 1,
		}
		public enum AM_WST_STYLE : int32
		{
			None = 0,
			Invers = 1,
		}
		public enum AM_WST_DRAWBGMODE : int32
		{
			Opaque = 0,
			Transparent = 1,
		}
		public enum STREAM_TYPE : int32
		{
			READ = 0,
			WRITE = 1,
			TRANSFORM = 2,
		}
		public enum STREAM_STATE : int32
		{
			STOP = 0,
			RUN = 1,
		}
		public enum COMPLETION_STATUS_FLAGS : int32
		{
			NOUPDATEOK = 1,
			WAIT = 2,
			ABORT = 4,
		}
		public enum MMSSF_GET_INFORMATION_FLAGS : uint32
		{
			HASCLOCK = 1,
			SUPPORTSEEK = 2,
			ASYNCHRONOUS = 4,
		}
		public enum SSUPDATE_TYPE : int32
		{
			ASYNC = 1,
			CONTINUOUS = 2,
		}
		public enum DDSFF_FLAGS : uint32
		{
			PROGRESSIVERENDER = 1,
		}
		public enum AMMSF_MMS_INIT_FLAGS : uint32
		{
			NOGRAPHTHREAD = 1,
		}
		public enum AMMSF_MS_FLAGS : uint32
		{
			ADDDEFAULTRENDERER = 1,
			CREATEPEER = 2,
			STOPIFNOSAMPLES = 4,
			NOSTALL = 8,
		}
		public enum AMMSF_RENDER_FLAGS : uint32
		{
			RENDERTYPEMASK = 3,
			RENDERTOEXISTING = 0,
			RENDERALLSTREAMS = 1,
			NORENDER = 2,
			NOCLOCK = 4,
			RUN = 8,
		}
		public enum OUTPUT_STATE : uint32
		{
			Disabled = 0,
			ReadData = 1,
			RenderData = 2,
		}
		public enum AM_PROPERTY_FRAMESTEP : int32
		{
			STEP = 1,
			CANCEL = 2,
			CANSTEP = 3,
			CANSTEPMULTIPLE = 4,
		}
		public enum AM_ASPECT_RATIO_MODE : int32
		{
			STRETCHED = 0,
			LETTER_BOX = 1,
			CROP = 2,
			STRETCHED_AS_PRIMARY = 3,
		}
		public enum VMR9PresentationFlags : int32
		{
			SyncPoint = 1,
			Preroll = 2,
			Discontinuity = 4,
			TimeValid = 8,
			SrcDstRectsValid = 16,
		}
		public enum VMR9SurfaceAllocationFlags : int32
		{
			_3DRenderTarget = 1,
			DXVATarget = 2,
			TextureSurface = 4,
			OffscreenSurface = 8,
			RGBDynamicSwitch = 16,
			UsageReserved = 224,
			UsageMask = 255,
		}
		public enum VMR9AspectRatioMode : int32
		{
			None = 0,
			LetterBox = 1,
		}
		public enum VMR9MixerPrefs : int32
		{
			NoDecimation = 1,
			DecimateOutput = 2,
			ARAdjustXorY = 4,
			NonSquareMixing = 8,
			DecimateMask = 15,
			BiLinearFiltering = 16,
			PointFiltering = 32,
			AnisotropicFiltering = 64,
			PyramidalQuadFiltering = 128,
			GaussianQuadFiltering = 256,
			FilteringReserved = 3584,
			FilteringMask = 4080,
			RenderTargetRGB = 4096,
			RenderTargetYUV = 8192,
			RenderTargetReserved = 1032192,
			RenderTargetMask = 1044480,
			DynamicSwitchToBOB = 1048576,
			DynamicDecimateBy2 = 2097152,
			DynamicReserved = 12582912,
			DynamicMask = 15728640,
		}
		public enum VMR9ProcAmpControlFlags : int32
		{
			Brightness = 1,
			Contrast = 2,
			Hue = 4,
			Saturation = 8,
			Mask = 15,
		}
		public enum VMR9AlphaBitmapFlags : int32
		{
			Disable = 1,
			hDC = 2,
			EntireDDS = 4,
			SrcColorKey = 8,
			SrcRect = 16,
			FilterMode = 32,
		}
		[AllowDuplicates]
		public enum VMR9RenderPrefs : int32
		{
			DoNotRenderBorder = 1,
			Mask = 1,
		}
		public enum VMR9Mode : int32
		{
			Windowed = 1,
			Windowless = 2,
			Renderless = 4,
			Mask = 7,
		}
		public enum VMR9DeinterlacePrefs : int32
		{
			NextBest = 1,
			BOB = 2,
			Weave = 4,
			Mask = 7,
		}
		public enum VMR9DeinterlaceTech : int32
		{
			Unknown = 0,
			BOBLineReplicate = 1,
			BOBVerticalStretch = 2,
			MedianFiltering = 4,
			EdgeFiltering = 16,
			FieldAdaptive = 32,
			PixelAdaptive = 64,
			MotionVectorSteered = 128,
		}
		public enum VMR9_SampleFormat : int32
		{
			Reserved = 1,
			ProgressiveFrame = 2,
			FieldInterleavedEvenFirst = 3,
			FieldInterleavedOddFirst = 4,
			FieldSingleEven = 5,
			FieldSingleOdd = 6,
		}
		public enum AM_PROPERTY_AC3 : int32
		{
			ERROR_CONCEALMENT = 1,
			ALTERNATE_AUDIO = 2,
			DOWNMIX = 3,
			BIT_STREAM_MODE = 4,
			DIALOGUE_LEVEL = 5,
			LANGUAGE_CODE = 6,
			ROOM_TYPE = 7,
		}
		public enum AM_PROPERTY_DVDSUBPIC : int32
		{
			PALETTE = 0,
			HLI = 1,
			COMPOSIT_ON = 2,
		}
		public enum AM_PROPERTY_DVDCOPYPROT : int32
		{
			DVDCOPY_CHLG_KEY = 1,
			DVDCOPY_DVD_KEY1 = 2,
			DVDCOPY_DEC_KEY2 = 3,
			DVDCOPY_TITLE_KEY = 4,
			COPY_MACROVISION = 5,
			DVDCOPY_REGION = 6,
			DVDCOPY_SET_COPY_STATE = 7,
			COPY_ANALOG_COMPONENT = 8,
			COPY_DIGITAL_CP = 9,
			COPY_DVD_SRM = 10,
			DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11,
			DVDCOPY_DISC_KEY = 128,
		}
		public enum AM_DIGITAL_CP : int32
		{
			OFF = 0,
			ON = 1,
			DVD_COMPLIANT = 2,
		}
		public enum AM_DVDCOPYSTATE : int32
		{
			INITIALIZE = 0,
			INITIALIZE_TITLE = 1,
			AUTHENTICATION_NOT_REQUIRED = 2,
			AUTHENTICATION_REQUIRED = 3,
			DONE = 4,
		}
		public enum AM_COPY_MACROVISION_LEVEL : int32
		{
			DISABLED = 0,
			LEVEL1 = 1,
			LEVEL2 = 2,
			LEVEL3 = 3,
		}
		public enum AM_MPEG2Level : int32
		{
			Low = 1,
			Main = 2,
			High1440 = 3,
			High = 4,
		}
		public enum AM_MPEG2Profile : int32
		{
			Simple = 1,
			Main = 2,
			SNRScalable = 3,
			SpatiallyScalable = 4,
			High = 5,
		}
		public enum AM_PROPERTY_DVDKARAOKE : int32
		{
			ENABLE = 0,
			DATA = 1,
		}
		public enum AM_PROPERTY_TS_RATE_CHANGE : int32
		{
			SimpleRateChange = 1,
			ExactRateChange = 2,
			MaxFullDataRate = 3,
			Step = 4,
			UseRateVersion = 5,
			QueryFullFrameRate = 6,
			QueryLastRateSegPTS = 7,
			CorrectTS = 8,
			ReverseMaxFullDataRate = 9,
			ResetOnTimeDisc = 10,
			QueryMapping = 11,
		}
		public enum AM_PROPERTY_DVD_RATE_CHANGE : int32
		{
			ChangeRate = 1,
			FullDataRateMax = 2,
			ReverseDecode = 3,
			DecoderPosition = 4,
			DecoderVersion = 5,
		}
		public enum DVD_PLAY_DIRECTION : int32
		{
			FORWARD = 0,
			BACKWARD = 1,
		}
		public enum DVD_ERROR : int32
		{
			Unexpected = 1,
			CopyProtectFail = 2,
			InvalidDVD1_0Disc = 3,
			InvalidDiscRegion = 4,
			LowParentalLevel = 5,
			MacrovisionFail = 6,
			IncompatibleSystemAndDecoderRegions = 7,
			IncompatibleDiscAndDecoderRegions = 8,
			CopyProtectOutputFail = 9,
			CopyProtectOutputNotSupported = 10,
		}
		public enum DVD_WARNING : int32
		{
			InvalidDVD1_0Disc = 1,
			FormatNotSupported = 2,
			IllegalNavCommand = 3,
			Open = 4,
			Seek = 5,
			Read = 6,
		}
		public enum DVD_PB_STOPPED : int32
		{
			Other = 0,
			NoBranch = 1,
			NoFirstPlayDomain = 2,
			StopCommand = 3,
			Reset = 4,
			DiscEjected = 5,
			IllegalNavCommand = 6,
			PlayPeriodAutoStop = 7,
			PlayChapterAutoStop = 8,
			ParentalFailure = 9,
			RegionFailure = 10,
			MacrovisionFailure = 11,
			DiscReadError = 12,
			CopyProtectFailure = 13,
			CopyProtectOutputFailure = 14,
			CopyProtectOutputNotSupported = 15,
		}
		public enum SNDDEV_ERR : int32
		{
			Open = 1,
			Close = 2,
			GetCaps = 3,
			PrepareHeader = 4,
			UnprepareHeader = 5,
			Reset = 6,
			Restart = 7,
			GetPosition = 8,
			Write = 9,
			Pause = 10,
			Stop = 11,
			Start = 12,
			AddBuffer = 13,
			Query = 14,
		}
		public enum MP_TYPE : int32
		{
			INT = 0,
			FLOAT = 1,
			BOOL = 2,
			ENUM = 3,
			MAX = 4,
		}
		public enum MP_CURVE_TYPE : int32
		{
			JUMP = 1,
			LINEAR = 2,
			SQUARE = 4,
			INVSQUARE = 8,
			SINE = 16,
		}
		public enum DXVA2_SampleFlags : int32
		{
			Flag_Palette_Changed = 1,
			Flag_SrcRect_Changed = 2,
			Flag_DstRect_Changed = 4,
			Flag_ColorData_Changed = 8,
			Flag_PlanarAlpha_Changed = 16,
			Flag_RFF = 65536,
			Flag_TFF = 131072,
			Flag_RFF_TFF_Present = 262144,
			FlagsMask = -65505,
		}
		public enum DXVA2_DestinationFlags : int32
		{
			Flag_Background_Changed = 1,
			Flag_TargetRect_Changed = 2,
			Flag_ColorData_Changed = 4,
			Flag_Alpha_Changed = 8,
			Flag_RFF = 65536,
			Flag_TFF = 131072,
			Flag_RFF_TFF_Present = 262144,
			FlagMask = -65521,
		}
		public enum AMPlayListItemFlags : int32
		{
			CANSKIP = 1,
			CANBIND = 2,
		}
		public enum AMPlayListFlags : int32
		{
			STARTINSCANMODE = 1,
			FORCEBANNER = 2,
		}
		public enum AMPlayListEventFlags : int32
		{
			RESUME = 0,
			BREAK = 1,
			NEXT = 2,
			MASK = 15,
			REFRESH = 16,
		}
		[AllowDuplicates]
		public enum DISPID_TUNER : int32
		{
			TUNER_TS_UNIQUENAME = 1,
			TUNER_TS_FRIENDLYNAME = 2,
			TUNER_TS_CLSID = 3,
			TUNER_TS_NETWORKTYPE = 4,
			TUNER_TS__NETWORKTYPE = 5,
			TUNER_TS_CREATETUNEREQUEST = 6,
			TUNER_TS_ENUMCATEGORYGUIDS = 7,
			TUNER_TS_ENUMDEVICEMONIKERS = 8,
			TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9,
			TUNER_TS_FREQMAP = 10,
			TUNER_TS_DEFLOCATOR = 11,
			TUNER_TS_CLONE = 12,
			TUNER_TR_TUNINGSPACE = 1,
			TUNER_TR_COMPONENTS = 2,
			TUNER_TR_CLONE = 3,
			TUNER_TR_LOCATOR = 4,
			TUNER_CT_CATEGORY = 1,
			TUNER_CT_MEDIAMAJORTYPE = 2,
			TUNER_CT__MEDIAMAJORTYPE = 3,
			TUNER_CT_MEDIASUBTYPE = 4,
			TUNER_CT__MEDIASUBTYPE = 5,
			TUNER_CT_MEDIAFORMATTYPE = 6,
			TUNER_CT__MEDIAFORMATTYPE = 7,
			TUNER_CT_MEDIATYPE = 8,
			TUNER_CT_CLONE = 9,
			TUNER_LCT_LANGID = 100,
			TUNER_MP2CT_TYPE = 200,
			TUNER_ATSCCT_FLAGS = 300,
			TUNER_L_CARRFREQ = 1,
			TUNER_L_INNERFECMETHOD = 2,
			TUNER_L_INNERFECRATE = 3,
			TUNER_L_OUTERFECMETHOD = 4,
			TUNER_L_OUTERFECRATE = 5,
			TUNER_L_MOD = 6,
			TUNER_L_SYMRATE = 7,
			TUNER_L_CLONE = 8,
			TUNER_L_ATSC_PHYS_CHANNEL = 201,
			TUNER_L_ATSC_TSID = 202,
			TUNER_L_ATSC_MP2_PROGNO = 203,
			TUNER_L_DVBT_BANDWIDTH = 301,
			TUNER_L_DVBT_LPINNERFECMETHOD = 302,
			TUNER_L_DVBT_LPINNERFECRATE = 303,
			TUNER_L_DVBT_GUARDINTERVAL = 304,
			TUNER_L_DVBT_HALPHA = 305,
			TUNER_L_DVBT_TRANSMISSIONMODE = 306,
			TUNER_L_DVBT_INUSE = 307,
			TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351,
			TUNER_L_DVBS_POLARISATION = 401,
			TUNER_L_DVBS_WEST = 402,
			TUNER_L_DVBS_ORBITAL = 403,
			TUNER_L_DVBS_AZIMUTH = 404,
			TUNER_L_DVBS_ELEVATION = 405,
			TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406,
			TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407,
			TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408,
			TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409,
			TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410,
			TUNER_L_DVBS2_ROLLOFF = 411,
			TUNER_L_DVBS2_PILOT = 412,
			TUNER_L_ANALOG_STANDARD = 601,
			TUNER_L_DTV_O_MAJOR_CHANNEL = 701,
			TUNER_C_TYPE = 1,
			TUNER_C_STATUS = 2,
			TUNER_C_LANGID = 3,
			TUNER_C_DESCRIPTION = 4,
			TUNER_C_CLONE = 5,
			TUNER_C_MP2_PID = 101,
			TUNER_C_MP2_PCRPID = 102,
			TUNER_C_MP2_PROGNO = 103,
			TUNER_C_ANALOG_AUDIO = 201,
			TUNER_TS_DVB_SYSTEMTYPE = 101,
			TUNER_TS_DVB2_NETWORK_ID = 102,
			TUNER_TS_DVBS_LOW_OSC_FREQ = 1001,
			TUNER_TS_DVBS_HI_OSC_FREQ = 1002,
			TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003,
			TUNER_TS_DVBS_INPUT_RANGE = 1004,
			TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005,
			TUNER_TS_AR_MINFREQUENCY = 101,
			TUNER_TS_AR_MAXFREQUENCY = 102,
			TUNER_TS_AR_STEP = 103,
			TUNER_TS_AR_COUNTRYCODE = 104,
			TUNER_TS_AUX_COUNTRYCODE = 101,
			TUNER_TS_ATV_MINCHANNEL = 101,
			TUNER_TS_ATV_MAXCHANNEL = 102,
			TUNER_TS_ATV_INPUTTYPE = 103,
			TUNER_TS_ATV_COUNTRYCODE = 104,
			TUNER_TS_ATSC_MINMINORCHANNEL = 201,
			TUNER_TS_ATSC_MAXMINORCHANNEL = 202,
			TUNER_TS_ATSC_MINPHYSCHANNEL = 203,
			TUNER_TS_ATSC_MAXPHYSCHANNEL = 204,
			TUNER_TS_DC_MINMAJORCHANNEL = 301,
			TUNER_TS_DC_MAXMAJORCHANNEL = 302,
			TUNER_TS_DC_MINSOURCEID = 303,
			TUNER_TS_DC_MAXSOURCEID = 304,
			CHTUNER_ATVAC_CHANNEL = 101,
			CHTUNER_ATVDC_SYSTEM = 101,
			CHTUNER_ATVDC_CONTENT = 102,
			CHTUNER_CIDTR_CHANNELID = 101,
			CHTUNER_CTR_CHANNEL = 101,
			CHTUNER_ACTR_MINOR_CHANNEL = 201,
			CHTUNER_DCTR_MAJOR_CHANNEL = 301,
			CHTUNER_DCTR_SRCID = 302,
			DVBTUNER_DVBC_ATTRIBUTESVALID = 101,
			DVBTUNER_DVBC_PID = 102,
			DVBTUNER_DVBC_TAG = 103,
			DVBTUNER_DVBC_COMPONENTTYPE = 104,
			DVBTUNER_ONID = 101,
			DVBTUNER_TSID = 102,
			DVBTUNER_SID = 103,
			MP2TUNER_TSID = 101,
			MP2TUNER_PROGNO = 102,
			MP2TUNERFACTORY_CREATETUNEREQUEST = 1,
		}
		public enum EnTvRat_System : int32
		{
			MPAA = 0,
			US_TV = 1,
			Canadian_English = 2,
			Canadian_French = 3,
			Reserved4 = 4,
			System5 = 5,
			System6 = 6,
			Reserved7 = 7,
			PBDA = 8,
			AgeBased = 9,
			TvRat_kSystems = 10,
			TvRat_SystemDontKnow = 255,
		}
		public enum EnTvRat_GenericLevel : int32
		{
			_0 = 0,
			_1 = 1,
			_2 = 2,
			_3 = 3,
			_4 = 4,
			_5 = 5,
			_6 = 6,
			_7 = 7,
			_8 = 8,
			_9 = 9,
			_10 = 10,
			_11 = 11,
			_12 = 12,
			_13 = 13,
			_14 = 14,
			_15 = 15,
			_16 = 16,
			_17 = 17,
			_18 = 18,
			_19 = 19,
			_20 = 20,
			_21 = 21,
			kLevels = 22,
			Unblock = -1,
			LevelDontKnow = 255,
		}
		public enum EnTvRat_MPAA : int32
		{
			NotApplicable = 0,
			G = 1,
			PG = 2,
			PG13 = 3,
			R = 4,
			NC17 = 5,
			X = 6,
			NotRated = 7,
		}
		public enum EnTvRat_US_TV : int32
		{
			None = 0,
			Y = 1,
			Y7 = 2,
			G = 3,
			PG = 4,
			_14 = 5,
			MA = 6,
			None7 = 7,
		}
		public enum EnTvRat_CAE_TV : int32
		{
			Exempt = 0,
			C = 1,
			C8 = 2,
			G = 3,
			PG = 4,
			_14 = 5,
			_18 = 6,
			Reserved = 7,
		}
		public enum EnTvRat_CAF_TV : int32
		{
			Exempt = 0,
			G = 1,
			_8 = 2,
			_13 = 3,
			_16 = 4,
			_18 = 5,
			Reserved6 = 6,
			Reserved = 7,
		}
		public enum BfEnTvRat_GenericAttributes : int32
		{
			AttrNone = 0,
			IsBlocked = 1,
			IsAttr_1 = 2,
			IsAttr_2 = 4,
			IsAttr_3 = 8,
			IsAttr_4 = 16,
			IsAttr_5 = 32,
			IsAttr_6 = 64,
			IsAttr_7 = 128,
			ValidAttrSubmask = 255,
		}
		public enum BfEnTvRat_Attributes_US_TV : int32
		{
			IsBlocked = 1,
			IsViolent = 2,
			IsSexualSituation = 4,
			IsAdultLanguage = 8,
			IsSexuallySuggestiveDialog = 16,
			ValidAttrSubmask = 31,
		}
		[AllowDuplicates]
		public enum BfEnTvRat_Attributes_MPAA : int32
		{
			IsBlocked = 1,
			ValidAttrSubmask = 1,
		}
		[AllowDuplicates]
		public enum BfEnTvRat_Attributes_CAE_TV : int32
		{
			IsBlocked = 1,
			ValidAttrSubmask = 1,
		}
		[AllowDuplicates]
		public enum BfEnTvRat_Attributes_CAF_TV : int32
		{
			IsBlocked = 1,
			ValidAttrSubmask = 1,
		}
		public enum FormatNotSupportedEvents : int32
		{
			CLEAR = 0,
			NOTSUPPORTED = 1,
		}
		public enum ProtType : int32
		{
			FREE = 1,
			ONCE = 2,
			NEVER = 3,
			NEVER_REALLY = 4,
			NO_MORE = 5,
			FREE_CIT = 6,
			BF = 7,
			CN_RECORDING_STOP = 8,
			FREE_SECURE = 9,
			INVALID = 50,
		}
		public enum EncDecEvents : int32
		{
			CPEVENT = 0,
			RECORDING_STATUS = 1,
		}
		public enum CPRecordingStatus : int32
		{
			STOPPED = 0,
			STARTED = 1,
		}
		public enum CPEventBitShift : int32
		{
			RATINGS = 0,
			COPP = 1,
			LICENSE = 2,
			ROLLBACK = 3,
			SAC = 4,
			DOWNRES = 5,
			STUBLIB = 6,
			UNTRUSTEDGRAPH = 7,
			PENDING_CERTIFICATE = 8,
			NO_PLAYREADY = 9,
		}
		public enum CPEvents : int32
		{
			NONE = 0,
			RATINGS = 1,
			COPP = 2,
			LICENSE = 3,
			ROLLBACK = 4,
			SAC = 5,
			DOWNRES = 6,
			STUBLIB = 7,
			UNTRUSTEDGRAPH = 8,
			PROTECTWINDOWED = 9,
		}
		public enum RevokedComponent : int32
		{
			COPP = 0,
			SAC = 1,
			APP_STUB = 2,
			SECURE_PIPELINE = 3,
			MAX_TYPES = 4,
		}
		public enum EnTag_Mode : int32
		{
			Remove = 0,
			Once = 1,
			Repeat = 2,
		}
		public enum COPPEventBlockReason : int32
		{
			Unknown = -1,
			BadDriver = 0,
			NoCardHDCPSupport = 1,
			NoMonitorHDCPSupport = 2,
			BadCertificate = 3,
			InvalidBusProtection = 4,
			AeroGlassOff = 5,
			RogueApp = 6,
			ForbiddenVideo = 7,
			Activate = 8,
			DigitalAudioUnprotected = 9,
		}
		public enum LicenseEventBlockReason : int32
		{
			BadLicense = 0,
			NeedIndiv = 1,
			Expired = 2,
			NeedActivation = 3,
			ExtenderBlocked = 4,
		}
		public enum DownResEventParam : int32
		{
			Always = 0,
			InWindowOnly = 1,
			Undefined = 2,
		}
		public enum SegDispidList : int32
		{
			dispidName = 0,
			dispidStatus = 1,
			dispidDevImageSourceWidth = 2,
			dispidDevImageSourceHeight = 3,
			dispidDevCountryCode = 4,
			dispidDevOverScan = 5,
			dispidSegment = 6,
			dispidDevVolume = 7,
			dispidDevBalance = 8,
			dispidDevPower = 9,
			dispidTuneChan = 10,
			dispidDevVideoSubchannel = 11,
			dispidDevAudioSubchannel = 12,
			dispidChannelAvailable = 13,
			dispidDevVideoFrequency = 14,
			dispidDevAudioFrequency = 15,
			dispidCount = 16,
			dispidDevFileName = 17,
			dispidVisible = 18,
			dispidOwner = 19,
			dispidMessageDrain = 20,
			dispidViewable = 21,
			dispidDevView = 22,
			dispidKSCat = 23,
			dispidCLSID = 24,
			dispid_KSCat = 25,
			dispid_CLSID = 26,
			dispidTune = 27,
			dispidTS = 28,
			dispidDevSAP = 29,
			dispidClip = 30,
			dispidRequestedClipRect = 31,
			dispidClippedSourceRect = 32,
			dispidAvailableSourceRect = 33,
			dispidMediaPosition = 34,
			dispidDevRun = 35,
			dispidDevPause = 36,
			dispidDevStop = 37,
			dispidCCEnable = 38,
			dispidDevStep = 39,
			dispidDevCanStep = 40,
			dispidSourceSize = 41,
			dispid_playtitle = 42,
			dispid_playchapterintitle = 43,
			dispid_playchapter = 44,
			dispid_playchaptersautostop = 45,
			dispid_playattime = 46,
			dispid_playattimeintitle = 47,
			dispid_playperiodintitleautostop = 48,
			dispid_replaychapter = 49,
			dispid_playprevchapter = 50,
			dispid_playnextchapter = 51,
			dispid_playforwards = 52,
			dispid_playbackwards = 53,
			dispid_stilloff = 54,
			dispid_audiolanguage = 55,
			dispid_showmenu = 56,
			dispid_resume = 57,
			dispid_returnfromsubmenu = 58,
			dispid_buttonsavailable = 59,
			dispid_currentbutton = 60,
			dispid_SelectAndActivateButton = 61,
			dispid_ActivateButton = 62,
			dispid_SelectRightButton = 63,
			dispid_SelectLeftButton = 64,
			dispid_SelectLowerButton = 65,
			dispid_SelectUpperButton = 66,
			dispid_ActivateAtPosition = 67,
			dispid_SelectAtPosition = 68,
			dispid_ButtonAtPosition = 69,
			dispid_NumberOfChapters = 70,
			dispid_TotalTitleTime = 71,
			dispid_TitlesAvailable = 72,
			dispid_VolumesAvailable = 73,
			dispid_CurrentVolume = 74,
			dispid_CurrentDiscSide = 75,
			dispid_CurrentDomain = 76,
			dispid_CurrentChapter = 77,
			dispid_CurrentTitle = 78,
			dispid_CurrentTime = 79,
			dispid_FramesPerSecond = 80,
			dispid_DVDTimeCode2bstr = 81,
			dispid_DVDDirectory = 82,
			dispid_IsSubpictureStreamEnabled = 83,
			dispid_IsAudioStreamEnabled = 84,
			dispid_CurrentSubpictureStream = 85,
			dispid_SubpictureLanguage = 86,
			dispid_CurrentAudioStream = 87,
			dispid_AudioStreamsAvailable = 88,
			dispid_AnglesAvailable = 89,
			dispid_CurrentAngle = 90,
			dispid_CCActive = 91,
			dispid_CurrentCCService = 92,
			dispid_SubpictureStreamsAvailable = 93,
			dispid_SubpictureOn = 94,
			dispid_DVDUniqueID = 95,
			dispid_EnableResetOnStop = 96,
			dispid_AcceptParentalLevelChange = 97,
			dispid_NotifyParentalLevelChange = 98,
			dispid_SelectParentalCountry = 99,
			dispid_SelectParentalLevel = 100,
			dispid_TitleParentalLevels = 101,
			dispid_PlayerParentalCountry = 102,
			dispid_PlayerParentalLevel = 103,
			dispid_Eject = 104,
			dispid_UOPValid = 105,
			dispid_SPRM = 106,
			dispid_GPRM = 107,
			dispid_DVDTextStringType = 108,
			dispid_DVDTextString = 109,
			dispid_DVDTextNumberOfStrings = 110,
			dispid_DVDTextNumberOfLanguages = 111,
			dispid_DVDTextLanguageLCID = 112,
			dispid_RegionChange = 113,
			dispid_DVDAdm = 114,
			dispid_DeleteBookmark = 115,
			dispid_RestoreBookmark = 116,
			dispid_SaveBookmark = 117,
			dispid_SelectDefaultAudioLanguage = 118,
			dispid_SelectDefaultSubpictureLanguage = 119,
			dispid_PreferredSubpictureStream = 120,
			dispid_DefaultMenuLanguage = 121,
			dispid_DefaultSubpictureLanguage = 122,
			dispid_DefaultAudioLanguage = 123,
			dispid_DefaultSubpictureLanguageExt = 124,
			dispid_DefaultAudioLanguageExt = 125,
			dispid_LanguageFromLCID = 126,
			dispid_KaraokeAudioPresentationMode = 127,
			dispid_KaraokeChannelContent = 128,
			dispid_KaraokeChannelAssignment = 129,
			dispid_RestorePreferredSettings = 130,
			dispid_ButtonRect = 131,
			dispid_DVDScreenInMouseCoordinates = 132,
			dispid_CustomCompositorClass = 133,
			dispidCustomCompositorClass = 134,
			dispid_CustomCompositor = 135,
			dispidMixerBitmap = 136,
			dispid_MixerBitmap = 137,
			dispidMixerBitmapOpacity = 138,
			dispidMixerBitmapRect = 139,
			dispidSetupMixerBitmap = 140,
			dispidUsingOverlay = 141,
			dispidDisplayChange = 142,
			dispidRePaint = 143,
			dispid_IsEqualDevice = 144,
			dispidrate = 145,
			dispidposition = 146,
			dispidpositionmode = 147,
			dispidlength = 148,
			dispidChangePassword = 149,
			dispidSaveParentalLevel = 150,
			dispidSaveParentalCountry = 151,
			dispidConfirmPassword = 152,
			dispidGetParentalLevel = 153,
			dispidGetParentalCountry = 154,
			dispidDefaultAudioLCID = 155,
			dispidDefaultSubpictureLCID = 156,
			dispidDefaultMenuLCID = 157,
			dispidBookmarkOnStop = 158,
			dispidMaxVidRect = 159,
			dispidMinVidRect = 160,
			dispidCapture = 161,
			dispid_DecimateInput = 162,
			dispidAlloctor = 163,
			dispid_Allocator = 164,
			dispidAllocPresentID = 165,
			dispidSetAllocator = 166,
			dispid_SetAllocator = 167,
			dispidStreamBufferSinkName = 168,
			dispidStreamBufferSourceName = 169,
			dispidStreamBufferContentRecording = 170,
			dispidStreamBufferReferenceRecording = 171,
			dispidstarttime = 172,
			dispidstoptime = 173,
			dispidrecordingstopped = 174,
			dispidrecordingstarted = 175,
			dispidNameSetLock = 176,
			dispidrecordingtype = 177,
			dispidstart = 178,
			dispidRecordingAttribute = 179,
			dispid_RecordingAttribute = 180,
			dispidSBEConfigure = 181,
			dispid_CurrentRatings = 182,
			dispid_MaxRatingsLevel = 183,
			dispid_audioencoderint = 184,
			dispid_videoencoderint = 185,
			dispidService = 186,
			dispid_BlockUnrated = 187,
			dispid_UnratedDelay = 188,
			dispid_SuppressEffects = 189,
			dispidsbesource = 190,
			dispidSetSinkFilter = 191,
			dispid_SinkStreams = 192,
			dispidTVFormats = 193,
			dispidModes = 194,
			dispidAuxInputs = 195,
			dispidTeleTextFilter = 196,
			dispid_channelchangeint = 197,
			dispidUnlockProfile = 198,
			dispid_AddFilter = 199,
			dispidSetMinSeek = 200,
			dispidRateEx = 201,
			dispidaudiocounter = 202,
			dispidvideocounter = 203,
			dispidcccounter = 204,
			dispidwstcounter = 205,
			dispid_audiocounter = 206,
			dispid_videocounter = 207,
			dispid_cccounter = 208,
			dispid_wstcounter = 209,
			dispidaudioanalysis = 210,
			dispidvideoanalysis = 211,
			dispiddataanalysis = 212,
			dispidaudio_analysis = 213,
			dispidvideo_analysis = 214,
			dispiddata_analysis = 215,
			dispid_resetFilterList = 216,
			dispidDevicePath = 217,
			dispid_SourceFilter = 218,
			dispid__SourceFilter = 219,
			dispidUserEvent = 220,
			dispid_Bookmark = 221,
			LastReservedDeviceDispid = 16383,
		}
		public enum SegEventidList : int32
		{
			eventidStateChange = 0,
			eventidOnTuneChanged = 1,
			eventidEndOfMedia = 2,
			eventidDVDNotify = 3,
			eventidPlayForwards = 4,
			eventidPlayBackwards = 5,
			eventidShowMenu = 6,
			eventidResume = 7,
			eventidSelectOrActivateButton = 8,
			eventidStillOff = 9,
			eventidPauseOn = 10,
			eventidChangeCurrentAudioStream = 11,
			eventidChangeCurrentSubpictureStream = 12,
			eventidChangeCurrentAngle = 13,
			eventidPlayAtTimeInTitle = 14,
			eventidPlayAtTime = 15,
			eventidPlayChapterInTitle = 16,
			eventidPlayChapter = 17,
			eventidReplayChapter = 18,
			eventidPlayNextChapter = 19,
			eventidStop = 20,
			eventidReturnFromSubmenu = 21,
			eventidPlayTitle = 22,
			eventidPlayPrevChapter = 23,
			eventidChangeKaraokePresMode = 24,
			eventidChangeVideoPresMode = 25,
			eventidOverlayUnavailable = 26,
			eventidSinkCertificateFailure = 27,
			eventidSinkCertificateSuccess = 28,
			eventidSourceCertificateFailure = 29,
			eventidSourceCertificateSuccess = 30,
			eventidRatingsBlocked = 31,
			eventidRatingsUnlocked = 32,
			eventidRatingsChanged = 33,
			eventidWriteFailure = 34,
			eventidTimeHole = 35,
			eventidStaleDataRead = 36,
			eventidContentBecomingStale = 37,
			eventidStaleFileDeleted = 38,
			eventidEncryptionOn = 39,
			eventidEncryptionOff = 40,
			eventidRateChange = 41,
			eventidLicenseChange = 42,
			eventidCOPPBlocked = 43,
			eventidCOPPUnblocked = 44,
			dispidlicenseerrorcode = 45,
			eventidBroadcastEvent = 46,
			eventidBroadcastEventEx = 47,
			eventidContentPrimarilyAudio = 48,
			dispidAVDecAudioDualMonoEvent = 49,
			dispidAVAudioSampleRateEvent = 50,
			dispidAVAudioChannelConfigEvent = 51,
			dispidAVAudioChannelCountEvent = 52,
			dispidAVDecCommonMeanBitRateEvent = 53,
			dispidAVDDSurroundModeEvent = 54,
			dispidAVDecCommonInputFormatEvent = 55,
			dispidAVDecCommonOutputFormatEvent = 56,
			eventidWriteFailureClear = 57,
			LastReservedDeviceEvent = 16383,
		}
		public enum PositionModeList : int32
		{
			FrameMode = 0,
			TenthsSecondsMode = 1,
		}
		public enum RecordingType : int32
		{
			CONTENT = 0,
			REFERENCE = 1,
		}
		public enum MSVidCCService : int32
		{
			None = 0,
			Caption1 = 1,
			Caption2 = 2,
			Text1 = 3,
			Text2 = 4,
			XDS = 5,
		}
		public enum MSVidSinkStreams : int32
		{
			Video = 1,
			Audio = 2,
			Other = 4,
		}
		public enum MSVidSegmentType : int32
		{
			SOURCE = 0,
			XFORM = 1,
			DEST = 2,
		}
		[AllowDuplicates]
		public enum MSVidCtlButtonstate : int32
		{
			LEFT_BUTTON = 1,
			RIGHT_BUTTON = 2,
			MIDDLE_BUTTON = 4,
			X_BUTTON1 = 8,
			X_BUTTON2 = 16,
			SHIFT = 1,
			CTRL = 2,
			ALT = 4,
		}
		public enum DVDMenuIDConstants : int32
		{
			Title = 2,
			Root = 3,
			Subpicture = 4,
			Audio = 5,
			Angle = 6,
			Chapter = 7,
		}
		public enum DVDFilterState : int32
		{
			Undefined = -2,
			Unitialized = -1,
			Stopped = 0,
			Paused = 1,
			Running = 2,
		}
		public enum DVDTextStringType : int32
		{
			Struct_Volume = 1,
			Struct_Title = 2,
			Struct_ParentalID = 3,
			Struct_PartOfTitle = 4,
			Struct_Cell = 5,
			Stream_Audio = 16,
			Stream_Subpicture = 17,
			Stream_Angle = 18,
			Channel_Audio = 32,
			General_Name = 48,
			General_Comments = 49,
			Title_Series = 56,
			Title_Movie = 57,
			Title_Video = 58,
			Title_Album = 59,
			Title_Song = 60,
			Title_Other = 63,
			Title_Sub_Series = 64,
			Title_Sub_Movie = 65,
			Title_Sub_Video = 66,
			Title_Sub_Album = 67,
			Title_Sub_Song = 68,
			Title_Sub_Other = 71,
			Title_Orig_Series = 72,
			Title_Orig_Movie = 73,
			Title_Orig_Video = 74,
			Title_Orig_Album = 75,
			Title_Orig_Song = 76,
			Title_Orig_Other = 79,
			Other_Scene = 80,
			Other_Cut = 81,
			Other_Take = 82,
		}
		public enum DVDSPExt : int32
		{
			NotSpecified = 0,
			Caption_Normal = 1,
			Caption_Big = 2,
			Caption_Children = 3,
			CC_Normal = 5,
			CC_Big = 6,
			CC_Children = 7,
			Forced = 9,
			DirectorComments_Normal = 13,
			DirectorComments_Big = 14,
			DirectorComments_Children = 15,
		}
		public enum SourceSizeList : int32
		{
			FullSize = 0,
			ClipByOverScan = 1,
			ClipByClipRect = 2,
		}
		public enum MSViddispidList : int32
		{
			dispidInputs = 0,
			dispidOutputs = 1,
			dispid_Inputs = 2,
			dispid_Outputs = 3,
			dispidVideoRenderers = 4,
			dispidAudioRenderers = 5,
			dispidFeatures = 6,
			dispidInput = 7,
			dispidOutput = 8,
			dispidVideoRenderer = 9,
			dispidAudioRenderer = 10,
			dispidSelectedFeatures = 11,
			dispidView = 12,
			dispidBuild = 13,
			dispidPause = 14,
			dispidRun = 15,
			dispidStop = 16,
			dispidDecompose = 17,
			dispidDisplaySize = 18,
			dispidMaintainAspectRatio = 19,
			dispidColorKey = 20,
			dispidStateChange = 21,
			dispidgetState = 22,
			dispidunbind = 23,
			dispidbind = 24,
			dispidDisableVideo = 25,
			dispidDisableAudio = 26,
			dispidViewNext = 27,
			dispidServiceP = 28,
		}
		[AllowDuplicates]
		public enum DisplaySizeList : int32
		{
			DefaultSize = 0,
			SourceSize = 0,
			HalfSourceSize = 1,
			DoubleSourceSize = 2,
			FullScreen = 3,
			HalfScreen = 4,
			QuarterScreen = 5,
			SixteenthScreen = 6,
		}
		public enum MSVidCtlStateList : int32
		{
			UNBUILT = -1,
			STOP = 0,
			PAUSE = 1,
			PLAY = 2,
		}
		public enum RECORDING_TYPE : int32
		{
			CONTENT = 0,
			REFERENCE = 1,
		}
		public enum STREAMBUFFER_ATTR_DATATYPE : int32
		{
			DWORD = 0,
			STRING = 1,
			BINARY = 2,
			BOOL = 3,
			QWORD = 4,
			WORD = 5,
			GUID = 6,
		}
		public enum CROSSBAR_DEFAULT_FLAGS : int32
		{
			PROFILE = 1,
			STREAMS = 2,
		}
		public enum MPEG_CURRENT_NEXT_BIT : int32
		{
			NEXT = 0,
			CURRENT = 1,
		}
		public enum MPEG_CONTEXT_TYPE : int32
		{
			BCS_DEMUX = 0,
			WINSOCK = 1,
		}
		public enum MPEG_REQUEST_TYPE : int32
		{
			UNKNOWN = 0,
			GET_SECTION = 1,
			GET_SECTION_ASYNC = 2,
			GET_TABLE = 3,
			GET_TABLE_ASYNC = 4,
			GET_SECTIONS_STREAM = 5,
			GET_PES_STREAM = 6,
			GET_TS_STREAM = 7,
			START_MPE_STREAM = 8,
		}
		public enum VA_VIDEO_FORMAT : int32
		{
			COMPONENT = 0,
			PAL = 1,
			NTSC = 2,
			SECAM = 3,
			MAC = 4,
			UNSPECIFIED = 5,
		}
		public enum VA_COLOR_PRIMARIES : int32
		{
			ITU_R_BT_709 = 1,
			UNSPECIFIED = 2,
			ITU_R_BT_470_SYSTEM_M = 4,
			ITU_R_BT_470_SYSTEM_B_G = 5,
			SMPTE_170M = 6,
			SMPTE_240M = 7,
			H264_GENERIC_FILM = 8,
		}
		public enum VA_TRANSFER_CHARACTERISTICS : int32
		{
			ITU_R_BT_709 = 1,
			UNSPECIFIED = 2,
			ITU_R_BT_470_SYSTEM_M = 4,
			ITU_R_BT_470_SYSTEM_B_G = 5,
			SMPTE_170M = 6,
			SMPTE_240M = 7,
			LINEAR = 8,
			H264_LOG_100_TO_1 = 9,
			H264_LOG_316_TO_1 = 10,
		}
		public enum VA_MATRIX_COEFFICIENTS : int32
		{
			H264_RGB = 0,
			ITU_R_BT_709 = 1,
			UNSPECIFIED = 2,
			FCC = 4,
			ITU_R_BT_470_SYSTEM_B_G = 5,
			SMPTE_170M = 6,
			SMPTE_240M = 7,
			H264_YCgCo = 8,
		}
		public enum DVB_STRCONV_MODE : int32
		{
			DVB = 0,
			DVB_EMPHASIS = 1,
			DVB_WITHOUT_EMPHASIS = 2,
			ISDB = 3,
		}
		public enum CRID_LOCATION : int32
		{
			IN_DESCRIPTOR = 0,
			IN_CIT = 1,
			DVB_RESERVED1 = 2,
			DVB_RESERVED2 = 3,
		}
		public enum DESC_LINKAGE_TYPE : int32
		{
			RESERVED0 = 0,
			INFORMATION = 1,
			EPG = 2,
			CA_REPLACEMENT = 3,
			COMPLETE_NET_BOUQUET_SI = 4,
			REPLACEMENT = 5,
			DATA = 6,
			RESERVED1 = 7,
			USER = 8,
			RESERVED2 = 255,
		}
		public enum ChannelChangeSpanningEvent_State : int32
		{
			Start = 0,
			End = 2,
		}
		public enum ChannelType : int32
		{
			None = 0,
			Other = 1,
			Video = 2,
			Audio = 4,
			Text = 8,
			Subtitles = 16,
			Captions = 32,
			Superimpose = 64,
			Data = 128,
		}
		public enum SignalAndServiceStatusSpanningEvent_State : int32
		{
			None = -1,
			Clear = 0,
			NoTVSignal = 1,
			ServiceOffAir = 2,
			WeakTVSignal = 3,
			NoSubscription = 4,
			AllAVScrambled = 5,
		}
		public enum KSPROPERTY_BDA_ETHERNET_FILTER : int32
		{
			LIST_SIZE = 0,
			LIST = 1,
			MODE = 2,
		}
		public enum KSPROPERTY_BDA_IPv4_FILTER : int32
		{
			LIST_SIZE = 0,
			LIST = 1,
			MODE = 2,
		}
		public enum KSPROPERTY_BDA_IPv6_FILTER : int32
		{
			LIST_SIZE = 0,
			LIST = 1,
			MODE = 2,
		}
		public enum KSPROPERTY_BDA_SIGNAL_STATS : int32
		{
			SIGNAL_STRENGTH = 0,
			SIGNAL_QUALITY = 1,
			SIGNAL_PRESENT = 2,
			SIGNAL_LOCKED = 3,
			SAMPLE_TIME = 4,
			SIGNAL_LOCK_CAPS = 5,
			SIGNAL_LOCK_TYPE = 6,
		}
		public enum BDA_LockType : int32
		{
			None = 0,
			PLL = 1,
			DecoderDemod = 2,
			Complete = 128,
		}
		public enum KSMETHOD_BDA_CHANGE_SYNC : int32
		{
			START_CHANGES = 0,
			CHECK_CHANGES = 1,
			COMMIT_CHANGES = 2,
			GET_CHANGE_STATE = 3,
		}
		public enum KSMETHOD_BDA_DEVICE_CONFIGURATION : int32
		{
			CREATE_PIN_FACTORY = 0,
			DELETE_PIN_FACTORY = 1,
			CREATE_TOPOLOGY = 2,
		}
		public enum KSPROPERTY_BDA_TOPOLOGY : int32
		{
			NODE_TYPES = 0,
			PIN_TYPES = 1,
			TEMPLATE_CONNECTIONS = 2,
			NODE_METHODS = 3,
			NODE_PROPERTIES = 4,
			NODE_EVENTS = 5,
			CONTROLLING_PIN_ID = 6,
			NODE_DESCRIPTORS = 7,
		}
		public enum KSPROPERTY_BDA_PIN_CONTROL : int32
		{
			ID = 0,
			TYPE = 1,
		}
		public enum KSPROPERTY_BDA_PIN_EVENT : int32
		{
			CONNECTED = 0,
			DISCONNECTED = 1,
		}
		public enum KSPROPERTY_BDA_VOID_TRANSFORM : int32
		{
			START = 0,
			STOP = 1,
		}
		public enum KSPROPERTY_BDA_NULL_TRANSFORM : int32
		{
			START = 0,
			STOP = 1,
		}
		public enum KSPROPERTY_BDA_FREQUENCY_FILTER : int32
		{
			FREQUENCY = 0,
			POLARITY = 1,
			RANGE = 2,
			TRANSPONDER = 3,
			BANDWIDTH = 4,
			FREQUENCY_MULTIPLIER = 5,
			CAPS = 6,
			SCAN_STATUS = 7,
			STANDARD = 8,
			STANDARD_MODE = 9,
		}
		public enum BDA_SignalType : int32
		{
			Unknown = 0,
			Analog = 1,
			Digital = 2,
		}
		public enum BDA_DigitalSignalStandard : int32
		{
			None = 0,
			DVB_T = 1,
			DVB_S = 2,
			DVB_C = 4,
			ATSC = 8,
			ISDB_T = 16,
			ISDB_S = 32,
			ISDB_C = 64,
		}
		public enum KSEVENT_BDA_TUNER : int32
		{
			TUNER_SCAN = 0,
		}
		public enum KSPROPERTY_BDA_LNB_INFO : int32
		{
			LOF_LOW_BAND = 0,
			LOF_HIGH_BAND = 1,
			SWITCH_FREQUENCY = 2,
		}
		public enum KSPROPERTY_BDA_DISEQC_COMMAND : int32
		{
			ENABLE = 0,
			LNB_SOURCE = 1,
			USETONEBURST = 2,
			REPEATS = 3,
			SEND = 4,
			RESPONSE = 5,
		}
		public enum KSPROPERTY_BDA_DISEQC_EVENT : int32
		{
			KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0,
		}
		public enum KSPROPERTY_BDA_DIGITAL_DEMODULATOR : int32
		{
			MODULATION_TYPE = 0,
			INNER_FEC_TYPE = 1,
			INNER_FEC_RATE = 2,
			OUTER_FEC_TYPE = 3,
			OUTER_FEC_RATE = 4,
			SYMBOL_RATE = 5,
			SPECTRAL_INVERSION = 6,
			GUARD_INTERVAL = 7,
			TRANSMISSION_MODE = 8,
			ROLL_OFF = 9,
			PILOT = 10,
			SIGNALTIMEOUTS = 11,
			PLP_NUMBER = 12,
		}
		public enum KSPROPERTY_BDA_AUTODEMODULATE : int32
		{
			START = 0,
			STOP = 1,
		}
		public enum KSPROPERTY_IDS_BDA_TABLE : int32
		{
			BDA_TABLE_SECTION = 0,
		}
		public enum KSPROPERTY_BDA_PIDFILTER : int32
		{
			MAP_PIDS = 0,
			UNMAP_PIDS = 1,
			LIST_PIDS = 2,
		}
		public enum KSPROPERTY_BDA_CA : int32
		{
			ECM_MAP_STATUS = 0,
			CA_MODULE_STATUS = 1,
			CA_SMART_CARD_STATUS = 2,
			CA_MODULE_UI = 3,
			CA_SET_PROGRAM_PIDS = 4,
			CA_REMOVE_PROGRAM = 5,
		}
		public enum KSPROPERTY_BDA_CA_EVENT : int32
		{
			PROGRAM_FLOW_STATUS_CHANGED = 0,
			CA_MODULE_STATUS_CHANGED = 1,
			CA_SMART_CARD_STATUS_CHANGED = 2,
			CA_MODULE_UI_REQUESTED = 3,
		}
		public enum KSMETHOD_BDA_DRM : int32
		{
			CURRENT = 0,
			DRMSTATUS = 1,
		}
		public enum KSMETHOD_BDA_WMDRM : int32
		{
			STATUS = 0,
			REVINFO = 1,
			CRL = 2,
			MESSAGE = 3,
			REISSUELICENSE = 4,
			RENEWLICENSE = 5,
			LICENSE = 6,
			KEYINFO = 7,
		}
		public enum KSMETHOD_BDA_WMDRM_TUNER : int32
		{
			CANCELCAPTURETOKEN = 0,
			SETPIDPROTECTION = 1,
			GETPIDPROTECTION = 2,
			SETSYNCVALUE = 3,
			STARTCODEPROFILE = 4,
			PURCHASE_ENTITLEMENT = 5,
		}
		public enum KSMETHOD_BDA_EVENTING_SERVICE : int32
		{
			DATA = 0,
			COMPLETE = 1,
		}
		public enum KSEVENT_BDA_EVENT_TYPE : int32
		{
			PENDINGEVENT = 0,
		}
		public enum KSMETHOD_BDA_DEBUG_SERVICE : int32
		{
			LEVEL = 0,
			DATA = 1,
		}
		public enum KSMETHOD_BDA_TUNER_SERVICE : int32
		{
			SETTUNER = 0,
			GETTUNERSTATE = 1,
			SIGNALNOISERATIO = 2,
		}
		public enum KSMETHOD_BDA_GPNV_SERVICE : int32
		{
			GETVALUE = 0,
			SETVALUE = 1,
			NAMEFROMINDEX = 2,
			GETVALUEUPDATENAME = 3,
		}
		public enum KSMETHOD_BDA_MUX_SERVICE : int32
		{
			GETPIDLIST = 0,
			SETPIDLIST = 1,
		}
		public enum KSMETHOD_BDA_SCAN_SERVICE : int32
		{
			SCAN_CAPABILTIES = 0,
			SCANNING_STATE = 1,
			SCAN_FILTER = 2,
			SCAN_START = 3,
			SCAN_RESUME = 4,
			SCAN_STOP = 5,
		}
		public enum KSMETHOD_BDA_GDDS_SERVICE : int32
		{
			DATATYPE = 0,
			DATA = 1,
			TUNEXMLFROMIDX = 2,
			GETSERVICES = 3,
			SERVICEFROMTUNEXML = 4,
			DATAUPDATE = 5,
		}
		public enum KSMETHOD_BDA_CAS_SERVICE : int32
		{
			CHECKENTITLEMENTTOKEN = 0,
			SETCAPTURETOKEN = 1,
			OPENBROADCASTMMI = 2,
			CLOSEMMIDIALOG = 3,
		}
		public enum KSMETHOD_BDA_ISDB_CAS : int32
		{
			SETREQUEST = 0,
			RESPONSEDATA = 1,
		}
		public enum KSMETHOD_BDA_TS_SELECTOR : int32
		{
			SETTSID = 0,
			GETTSINFORMATION = 1,
		}
		public enum KSMETHOD_BDA_USERACTIVITY_SERVICE : int32
		{
			USEREASON = 0,
			INTERVAL = 1,
			DETECTED = 2,
		}
		public enum VIDEOENCODER_BITRATE_MODE : int32
		{
			ConstantBitRate = 0,
			VariableBitRateAverage = 1,
			VariableBitRatePeak = 2,
		}
		[AllowDuplicates]
		public enum COPP_HDCP_Protection_Level : int32
		{
			Level0 = 0,
			LevelMin = 0,
			Level1 = 1,
			LevelMax = 1,
			ForceDWORD = 2147483647,
		}
		[AllowDuplicates]
		public enum COPP_CGMSA_Protection_Level : int32
		{
			Disabled = 0,
			LevelMin = 0,
			CopyFreely = 1,
			CopyNoMore = 2,
			CopyOneGeneration = 3,
			CopyNever = 4,
			RedistributionControlRequired = 8,
			LevelMax = 12,
			ForceDWORD = 2147483647,
		}
		[AllowDuplicates]
		public enum COPP_ACP_Protection_Level : int32
		{
			Level0 = 0,
			LevelMin = 0,
			Level1 = 1,
			Level2 = 2,
			Level3 = 3,
			LevelMax = 3,
			ForceDWORD = 2147483647,
		}
		public enum COPP_TVProtectionStandard : int32
		{
			Unknown = -2147483648,
			None = 0,
			IEC61880_525i = 1,
			IEC61880_2_525i = 2,
			IEC62375_625p = 4,
			EIA608B_525 = 8,
			EN300294_625i = 16,
			CEA805A_TypeA_525p = 32,
			CEA805A_TypeA_750p = 64,
			CEA805A_TypeA_1125i = 128,
			CEA805A_TypeB_525p = 256,
			CEA805A_TypeB_750p = 512,
			CEA805A_TypeB_1125i = 1024,
			ARIBTRB15_525i = 2048,
			ARIBTRB15_525p = 4096,
			ARIBTRB15_750p = 8192,
			ARIBTRB15_1125i = 16384,
			Mask = -2147450881,
			Reserved = 2147450880,
		}
		public enum COPP_ImageAspectRatio_EN300294 : int32
		{
			EN300294_FullFormat4by3 = 0,
			EN300294_Box14by9Center = 1,
			EN300294_Box14by9Top = 2,
			EN300294_Box16by9Center = 3,
			EN300294_Box16by9Top = 4,
			EN300294_BoxGT16by9Center = 5,
			EN300294_FullFormat4by3ProtectedCenter = 6,
			EN300294_FullFormat16by9Anamorphic = 7,
			ForceDWORD = 2147483647,
		}
		public enum COPP_StatusFlags : int32
		{
			StatusNormal = 0,
			LinkLost = 1,
			RenegotiationRequired = 2,
			StatusFlagsReserved = -4,
		}
		public enum COPP_StatusHDCPFlags : int32
		{
			HDCPRepeater = 1,
			HDCPFlagsReserved = -2,
		}
		public enum COPP_ConnectorType : int32
		{
			Unknown = -1,
			VGA = 0,
			SVideo = 1,
			CompositeVideo = 2,
			ComponentVideo = 3,
			DVI = 4,
			HDMI = 5,
			LVDS = 6,
			TMDS = 7,
			D_JPN = 8,
			Internal = -2147483648,
			ForceDWORD = 2147483647,
		}
		public enum COPP_BusType : int32
		{
			Unknown = 0,
			PCI = 1,
			PCIX = 2,
			PCIExpress = 3,
			AGP = 4,
			Integrated = -2147483648,
			ForceDWORD = 2147483647,
		}
		
		// --- Function Pointers ---
		
		public function BOOL AMGETERRORTEXTPROCA(HRESULT param0, PSTR param1, uint32 param2);
		public function BOOL AMGETERRORTEXTPROCW(HRESULT param0, PWSTR param1, uint32 param2);
		public function HRESULT PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT(in DXVA2_VideoDesc pVideoDesc, out uint32 pCount);
		public function HRESULT PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS(in DXVA2_VideoDesc pVideoDesc, uint32 Count, D3DFORMAT* pFormats);
		public function HRESULT PDXVA2SW_GETVIDEOPROCESSORCAPS(in DXVA2_VideoDesc pVideoDesc, D3DFORMAT RenderTargetFormat, out DXVA2_VideoProcessorCaps pCaps);
		public function HRESULT PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT(in DXVA2_VideoDesc pVideoDesc, D3DFORMAT RenderTargetFormat, out uint32 pCount);
		public function HRESULT PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS(in DXVA2_VideoDesc pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 Count, D3DFORMAT* pFormats);
		public function HRESULT PDXVA2SW_GETPROCAMPRANGE(in DXVA2_VideoDesc pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 ProcAmpCap, out DXVA2_ValueRange pRange);
		public function HRESULT PDXVA2SW_GETFILTERPROPERTYRANGE(in DXVA2_VideoDesc pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 FilterSetting, out DXVA2_ValueRange pRange);
		public function HRESULT PDXVA2SW_CREATEVIDEOPROCESSDEVICE(ref IDirect3DDevice9 pD3DD9, in DXVA2_VideoDesc pVideoDesc, D3DFORMAT RenderTargetFormat, uint32 MaxSubStreams, out HANDLE phDevice);
		public function HRESULT PDXVA2SW_DESTROYVIDEOPROCESSDEVICE(HANDLE hDevice);
		public function HRESULT PDXVA2SW_VIDEOPROCESSBEGINFRAME(HANDLE hDevice);
		public function HRESULT PDXVA2SW_VIDEOPROCESSENDFRAME(HANDLE hDevice, HANDLE* pHandleComplete);
		public function HRESULT PDXVA2SW_VIDEOPROCESSSETRENDERTARGET(HANDLE hDevice, ref IDirect3DSurface9 pRenderTarget);
		public function HRESULT PDXVA2SW_VIDEOPROCESSBLT(HANDLE hDevice, in DXVA2_VIDEOPROCESSBLT pBlt);
		
		// --- Structs ---
		
		[CRepr]
		public struct AMVPSIZE
		{
			public uint32 dwWidth;
			public uint32 dwHeight;
		}
		[CRepr]
		public struct AMVPDIMINFO
		{
			public uint32 dwFieldWidth;
			public uint32 dwFieldHeight;
			public uint32 dwVBIWidth;
			public uint32 dwVBIHeight;
			public RECT rcValidRegion;
		}
		[CRepr]
		public struct AMVPDATAINFO
		{
			public uint32 dwSize;
			public uint32 dwMicrosecondsPerField;
			public AMVPDIMINFO amvpDimInfo;
			public uint32 dwPictAspectRatioX;
			public uint32 dwPictAspectRatioY;
			public BOOL bEnableDoubleClock;
			public BOOL bEnableVACT;
			public BOOL bDataIsInterlaced;
			public int32 lHalfLinesOdd;
			public BOOL bFieldPolarityInverted;
			public uint32 dwNumLinesInVREF;
			public int32 lHalfLinesEven;
			public uint32 dwReserved1;
		}
		[CRepr]
		public struct AM_MEDIA_TYPE
		{
			public Guid majortype;
			public Guid subtype;
			public BOOL bFixedSizeSamples;
			public BOOL bTemporalCompression;
			public uint32 lSampleSize;
			public Guid formattype;
			public IUnknown* pUnk;
			public uint32 cbFormat;
			public uint8* pbFormat;
		}
		[CRepr]
		public struct ALLOCATOR_PROPERTIES
		{
			public int32 cBuffers;
			public int32 cbBuffer;
			public int32 cbAlign;
			public int32 cbPrefix;
		}
		[CRepr]
		public struct PIN_INFO
		{
			public IBaseFilter* pFilter;
			public PIN_DIRECTION dir;
			public char16[128] achName;
		}
		[CRepr]
		public struct FILTER_INFO
		{
			public char16[128] achName;
			public IFilterGraph* pGraph;
		}
		[CRepr]
		public struct AM_SAMPLE2_PROPERTIES
		{
			public uint32 cbData;
			public uint32 dwTypeSpecificFlags;
			public uint32 dwSampleFlags;
			public int32 lActual;
			public int64 tStart;
			public int64 tStop;
			public uint32 dwStreamId;
			public AM_MEDIA_TYPE* pMediaType;
			public uint8* pbBuffer;
			public int32 cbBuffer;
		}
		[CRepr]
		public struct REGFILTER
		{
			public Guid Clsid;
			public PWSTR Name;
		}
		[CRepr]
		public struct REGPINTYPES
		{
			public Guid* clsMajorType;
			public Guid* clsMinorType;
		}
		[CRepr]
		public struct REGFILTERPINS
		{
			public PWSTR strName;
			public BOOL bRendered;
			public BOOL bOutput;
			public BOOL bZero;
			public BOOL bMany;
			public Guid* clsConnectsToFilter;
			public PWSTR strConnectsToPin;
			public uint32 nMediaTypes;
			public REGPINTYPES* lpMediaType;
		}
		[CRepr]
		public struct REGPINMEDIUM
		{
			public Guid clsMedium;
			public uint32 dw1;
			public uint32 dw2;
		}
		[CRepr]
		public struct REGFILTERPINS2
		{
			public uint32 dwFlags;
			public uint32 cInstances;
			public uint32 nMediaTypes;
			public REGPINTYPES* lpMediaType;
			public uint32 nMediums;
			public REGPINMEDIUM* lpMedium;
			public Guid* clsPinCategory;
		}
		[CRepr]
		public struct REGFILTER2
		{
			public uint32 dwVersion;
			public uint32 dwMerit;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public _Anonymous1_e__Struct Anonymous1;
				public _Anonymous2_e__Struct Anonymous2;
				
				[CRepr]
				public struct _Anonymous1_e__Struct
				{
					public uint32 cPins;
					public REGFILTERPINS* rgPins;
				}
				[CRepr]
				public struct _Anonymous2_e__Struct
				{
					public uint32 cPins2;
					public REGFILTERPINS2* rgPins2;
				}
			}
		}
		[CRepr]
		public struct Quality
		{
			public QualityMessageType Type;
			public int32 Proportion;
			public int64 Late;
			public int64 TimeStamp;
		}
		[CRepr]
		public struct COLORKEY
		{
			public uint32 KeyType;
			public uint32 PaletteIndex;
			public uint32 LowColorValue;
			public uint32 HighColorValue;
		}
		[CRepr]
		public struct AM_STREAM_INFO
		{
			public int64 tStart;
			public int64 tStop;
			public uint32 dwStartCookie;
			public uint32 dwStopCookie;
			public uint32 dwFlags;
		}
		[CRepr]
		public struct VIDEO_STREAM_CONFIG_CAPS
		{
			public Guid guid;
			public uint32 VideoStandard;
			public SIZE InputSize;
			public SIZE MinCroppingSize;
			public SIZE MaxCroppingSize;
			public int32 CropGranularityX;
			public int32 CropGranularityY;
			public int32 CropAlignX;
			public int32 CropAlignY;
			public SIZE MinOutputSize;
			public SIZE MaxOutputSize;
			public int32 OutputGranularityX;
			public int32 OutputGranularityY;
			public int32 StretchTapsX;
			public int32 StretchTapsY;
			public int32 ShrinkTapsX;
			public int32 ShrinkTapsY;
			public int64 MinFrameInterval;
			public int64 MaxFrameInterval;
			public int32 MinBitsPerSecond;
			public int32 MaxBitsPerSecond;
		}
		[CRepr]
		public struct AUDIO_STREAM_CONFIG_CAPS
		{
			public Guid guid;
			public uint32 MinimumChannels;
			public uint32 MaximumChannels;
			public uint32 ChannelsGranularity;
			public uint32 MinimumBitsPerSample;
			public uint32 MaximumBitsPerSample;
			public uint32 BitsPerSampleGranularity;
			public uint32 MinimumSampleFrequency;
			public uint32 MaximumSampleFrequency;
			public uint32 SampleFrequencyGranularity;
		}
		[CRepr]
		public struct DVINFO
		{
			public uint32 dwDVAAuxSrc;
			public uint32 dwDVAAuxCtl;
			public uint32 dwDVAAuxSrc1;
			public uint32 dwDVAAuxCtl1;
			public uint32 dwDVVAuxSrc;
			public uint32 dwDVVAuxCtl;
			public uint32[2] dwDVReserved;
		}
		[CRepr]
		public struct STREAM_ID_MAP
		{
			public uint32 stream_id;
			public uint32 dwMediaSampleContent;
			public uint32 ulSubstreamFilterValue;
			public int32 iDataOffset;
		}
		[CRepr]
		public struct AMCOPPSignature
		{
			public uint8[256] Signature;
		}
		[CRepr]
		public struct AMCOPPCommand
		{
			public Guid macKDI;
			public Guid guidCommandID;
			public uint32 dwSequence;
			public uint32 cbSizeData;
			public uint8[4056] CommandData;
		}
		[CRepr]
		public struct AMCOPPStatusInput
		{
			public Guid rApp;
			public Guid guidStatusRequestID;
			public uint32 dwSequence;
			public uint32 cbSizeData;
			public uint8[4056] StatusData;
		}
		[CRepr]
		public struct AMCOPPStatusOutput
		{
			public Guid macKDI;
			public uint32 cbSizeData;
			public uint8[4076] COPPStatus;
		}
		[CRepr]
		public struct VMRPRESENTATIONINFO
		{
			public uint32 dwFlags;
			public IDirectDrawSurface7* lpSurf;
			public int64 rtStart;
			public int64 rtEnd;
			public SIZE szAspectRatio;
			public RECT rcSrc;
			public RECT rcDst;
			public uint32 dwTypeSpecificFlags;
			public uint32 dwInterlaceFlags;
		}
		[CRepr]
		public struct VMRALLOCATIONINFO
		{
			public uint32 dwFlags;
			public BITMAPINFOHEADER* lpHdr;
			public DDPIXELFORMAT* lpPixFmt;
			public SIZE szAspectRatio;
			public uint32 dwMinBuffers;
			public uint32 dwMaxBuffers;
			public uint32 dwInterlaceFlags;
			public SIZE szNativeSize;
		}
		[CRepr]
		public struct NORMALIZEDRECT
		{
			public float left;
			public float top;
			public float right;
			public float bottom;
		}
		[CRepr]
		public struct VMRGUID
		{
			public Guid* pGUID;
			public Guid GUID;
		}
		[CRepr]
		public struct VMRMONITORINFO
		{
			public VMRGUID guid;
			public RECT rcMonitor;
			public HMONITOR hMon;
			public uint32 dwFlags;
			public char16[32] szDevice;
			public char16[256] szDescription;
			public LARGE_INTEGER liDriverVersion;
			public uint32 dwVendorId;
			public uint32 dwDeviceId;
			public uint32 dwSubSysId;
			public uint32 dwRevision;
		}
		[CRepr]
		public struct VMRFrequency
		{
			public uint32 dwNumerator;
			public uint32 dwDenominator;
		}
		[CRepr]
		public struct VMRVideoDesc
		{
			public uint32 dwSize;
			public uint32 dwSampleWidth;
			public uint32 dwSampleHeight;
			public BOOL SingleFieldPerSample;
			public uint32 dwFourCC;
			public VMRFrequency InputSampleFreq;
			public VMRFrequency OutputFrameFreq;
		}
		[CRepr]
		public struct VMRDeinterlaceCaps
		{
			public uint32 dwSize;
			public uint32 dwNumPreviousOutputFrames;
			public uint32 dwNumForwardRefSamples;
			public uint32 dwNumBackwardRefSamples;
			public VMRDeinterlaceTech DeinterlaceTechnology;
		}
		[CRepr]
		public struct VMRALPHABITMAP
		{
			public uint32 dwFlags;
			public HDC hdc;
			public IDirectDrawSurface7* pDDS;
			public RECT rSrc;
			public NORMALIZEDRECT rDest;
			public float fAlpha;
			public uint32 clrSrcKey;
		}
		[CRepr]
		public struct VMRVIDEOSTREAMINFO
		{
			public IDirectDrawSurface7* pddsVideoSurface;
			public uint32 dwWidth;
			public uint32 dwHeight;
			public uint32 dwStrmID;
			public float fAlpha;
			public DDCOLORKEY ddClrKey;
			public NORMALIZEDRECT rNormal;
		}
		[CRepr]
		public struct DVD_ATR
		{
			public uint32 ulCAT;
			public uint8[768] pbATRI;
		}
		[CRepr]
		public struct DVD_TIMECODE
		{
			public uint32 _bitfield;
		}
		[CRepr]
		public struct DVD_HMSF_TIMECODE
		{
			public uint8 bHours;
			public uint8 bMinutes;
			public uint8 bSeconds;
			public uint8 bFrames;
		}
		[CRepr]
		public struct DVD_PLAYBACK_LOCATION2
		{
			public uint32 TitleNum;
			public uint32 ChapterNum;
			public DVD_HMSF_TIMECODE TimeCode;
			public uint32 TimeCodeFlags;
		}
		[CRepr]
		public struct DVD_PLAYBACK_LOCATION
		{
			public uint32 TitleNum;
			public uint32 ChapterNum;
			public uint32 TimeCode;
		}
		[CRepr]
		public struct DVD_AudioAttributes
		{
			public DVD_AUDIO_APPMODE AppMode;
			public uint8 AppModeData;
			public DVD_AUDIO_FORMAT AudioFormat;
			public uint32 Language;
			public DVD_AUDIO_LANG_EXT LanguageExtension;
			public BOOL fHasMultichannelInfo;
			public uint32 dwFrequency;
			public uint8 bQuantization;
			public uint8 bNumberOfChannels;
			public uint32[2] dwReserved;
		}
		[CRepr]
		public struct DVD_MUA_MixingInfo
		{
			public BOOL fMixTo0;
			public BOOL fMixTo1;
			public BOOL fMix0InPhase;
			public BOOL fMix1InPhase;
			public uint32 dwSpeakerPosition;
		}
		[CRepr]
		public struct DVD_MUA_Coeff
		{
			public double log2_alpha;
			public double log2_beta;
		}
		[CRepr]
		public struct DVD_MultichannelAudioAttributes
		{
			public DVD_MUA_MixingInfo[8] Info;
			public DVD_MUA_Coeff[8] Coeff;
		}
		[CRepr]
		public struct DVD_KaraokeAttributes
		{
			public uint8 bVersion;
			public BOOL fMasterOfCeremoniesInGuideVocal1;
			public BOOL fDuet;
			public DVD_KARAOKE_ASSIGNMENT ChannelAssignment;
			public uint16[8] wChannelContents;
		}
		[CRepr]
		public struct DVD_VideoAttributes
		{
			public BOOL fPanscanPermitted;
			public BOOL fLetterboxPermitted;
			public uint32 ulAspectX;
			public uint32 ulAspectY;
			public uint32 ulFrameRate;
			public uint32 ulFrameHeight;
			public DVD_VIDEO_COMPRESSION Compression;
			public BOOL fLine21Field1InGOP;
			public BOOL fLine21Field2InGOP;
			public uint32 ulSourceResolutionX;
			public uint32 ulSourceResolutionY;
			public BOOL fIsSourceLetterboxed;
			public BOOL fIsFilmMode;
		}
		[CRepr]
		public struct DVD_SubpictureAttributes
		{
			public DVD_SUBPICTURE_TYPE Type;
			public DVD_SUBPICTURE_CODING CodingMode;
			public uint32 Language;
			public DVD_SUBPICTURE_LANG_EXT LanguageExtension;
		}
		[CRepr]
		public struct DVD_TitleAttributes
		{
			public _Anonymous_e__Union Anonymous;
			public DVD_VideoAttributes VideoAttributes;
			public uint32 ulNumberOfAudioStreams;
			public DVD_AudioAttributes[8] AudioAttributes;
			public DVD_MultichannelAudioAttributes[8] MultichannelAudioAttributes;
			public uint32 ulNumberOfSubpictureStreams;
			public DVD_SubpictureAttributes[32] SubpictureAttributes;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public DVD_TITLE_APPMODE AppMode;
				public DVD_HMSF_TIMECODE TitleLength;
			}
		}
		[CRepr]
		public struct DVD_MenuAttributes
		{
			public BOOL[8] fCompatibleRegion;
			public DVD_VideoAttributes VideoAttributes;
			public BOOL fAudioPresent;
			public DVD_AudioAttributes AudioAttributes;
			public BOOL fSubpicturePresent;
			public DVD_SubpictureAttributes SubpictureAttributes;
		}
		[CRepr]
		public struct DVD_DECODER_CAPS
		{
			public uint32 dwSize;
			public uint32 dwAudioCaps;
			public double dFwdMaxRateVideo;
			public double dFwdMaxRateAudio;
			public double dFwdMaxRateSP;
			public double dBwdMaxRateVideo;
			public double dBwdMaxRateAudio;
			public double dBwdMaxRateSP;
			public uint32 dwRes1;
			public uint32 dwRes2;
			public uint32 dwRes3;
			public uint32 dwRes4;
		}
		[CRepr]
		public struct AM_DVD_RENDERSTATUS
		{
			public HRESULT hrVPEStatus;
			public BOOL bDvdVolInvalid;
			public BOOL bDvdVolUnknown;
			public BOOL bNoLine21In;
			public BOOL bNoLine21Out;
			public int32 iNumStreams;
			public int32 iNumStreamsFailed;
			public uint32 dwFailedStreamsFlag;
		}
		[CRepr]
		public struct BDA_TEMPLATE_CONNECTION
		{
			public uint32 FromNodeType;
			public uint32 FromNodePinType;
			public uint32 ToNodeType;
			public uint32 ToNodePinType;
		}
		[CRepr]
		public struct BDA_TEMPLATE_PIN_JOINT
		{
			public uint32 uliTemplateConnection;
			public uint32 ulcInstancesMax;
		}
		[CRepr]
		public struct KS_BDA_FRAME_INFO
		{
			public uint32 ExtendedHeaderSize;
			public uint32 dwFrameFlags;
			public uint32 ulEvent;
			public uint32 ulChannelNumber;
			public uint32 ulSubchannelNumber;
			public uint32 ulReason;
		}
		[CRepr]
		public struct BDA_ETHERNET_ADDRESS
		{
			public uint8[6] rgbAddress;
		}
		[CRepr]
		public struct BDA_ETHERNET_ADDRESS_LIST
		{
			public uint32 ulcAddresses;
			public BDA_ETHERNET_ADDRESS[0] rgAddressl;
		}
		[CRepr]
		public struct BDA_IPv4_ADDRESS
		{
			public uint8[4] rgbAddress;
		}
		[CRepr]
		public struct BDA_IPv4_ADDRESS_LIST
		{
			public uint32 ulcAddresses;
			public BDA_IPv4_ADDRESS[0] rgAddressl;
		}
		[CRepr]
		public struct BDA_IPv6_ADDRESS
		{
			public uint8[6] rgbAddress;
		}
		[CRepr]
		public struct BDA_IPv6_ADDRESS_LIST
		{
			public uint32 ulcAddresses;
			public BDA_IPv6_ADDRESS[0] rgAddressl;
		}
		[CRepr]
		public struct BDANODE_DESCRIPTOR
		{
			public uint32 ulBdaNodeType;
			public Guid guidFunction;
			public Guid guidName;
		}
		[CRepr]
		public struct BDA_TABLE_SECTION
		{
			public uint32 ulPrimarySectionId;
			public uint32 ulSecondarySectionId;
			public uint32 ulcbSectionLength;
			public uint32[0] argbSectionData;
		}
		[CRepr]
		public struct BDA_DISEQC_SEND
		{
			public uint32 ulRequestId;
			public uint32 ulPacketLength;
			public uint8[8] argbPacketData;
		}
		[CRepr]
		public struct BDA_DISEQC_RESPONSE
		{
			public uint32 ulRequestId;
			public uint32 ulPacketLength;
			public uint8[8] argbPacketData;
		}
		[CRepr]
		public struct PID_MAP
		{
			public uint32 ulPID;
			public MEDIA_SAMPLE_CONTENT MediaSampleContent;
		}
		[CRepr]
		public struct BDA_PID_MAP
		{
			public MEDIA_SAMPLE_CONTENT MediaSampleContent;
			public uint32 ulcPIDs;
			public uint32[0] aulPIDs;
		}
		[CRepr]
		public struct BDA_PID_UNMAP
		{
			public uint32 ulcPIDs;
			public uint32[0] aulPIDs;
		}
		[CRepr]
		public struct BDA_CA_MODULE_UI
		{
			public uint32 ulFormat;
			public uint32 ulbcDesc;
			public uint32[0] ulDesc;
		}
		[CRepr]
		public struct BDA_PROGRAM_PID_LIST
		{
			public uint32 ulProgramNumber;
			public uint32 ulcPIDs;
			public uint32[0] ulPID;
		}
		[CRepr]
		public struct BDA_DRM_DRMSTATUS
		{
			public int32 lResult;
			public Guid DRMuuid;
			public uint32 ulDrmUuidListStringSize;
			public Guid[0] argbDrmUuidListString;
		}
		[CRepr]
		public struct BDA_WMDRM_STATUS
		{
			public int32 lResult;
			public uint32 ulMaxCaptureTokenSize;
			public uint32 uMaxStreamingPid;
			public uint32 ulMaxLicense;
			public uint32 ulMinSecurityLevel;
			public uint32 ulRevInfoSequenceNumber;
			public uint64 ulRevInfoIssuedTime;
			public uint32 ulRevListVersion;
			public uint32 ulRevInfoTTL;
			public uint32 ulState;
		}
		[CRepr]
		public struct BDA_WMDRM_KEYINFOLIST
		{
			public int32 lResult;
			public uint32 ulKeyuuidBufferLen;
			public Guid[0] argKeyuuidBuffer;
		}
		[CRepr]
		public struct BDA_BUFFER
		{
			public int32 lResult;
			public uint32 ulBufferSize;
			public uint8[0] argbBuffer;
		}
		[CRepr]
		public struct BDA_WMDRM_RENEWLICENSE
		{
			public int32 lResult;
			public uint32 ulDescrambleStatus;
			public uint32 ulXmrLicenseOutputLength;
			public uint8[0] argbXmrLicenceOutputBuffer;
		}
		[CRepr]
		public struct BDA_WMDRMTUNER_PIDPROTECTION
		{
			public int32 lResult;
			public Guid uuidKeyID;
		}
		[CRepr]
		public struct BDA_WMDRMTUNER_PURCHASEENTITLEMENT
		{
			public int32 lResult;
			public uint32 ulDescrambleStatus;
			public uint32 ulCaptureTokenLength;
			public uint8[0] argbCaptureTokenBuffer;
		}
		[CRepr]
		public struct BDA_TUNER_TUNERSTATE
		{
			public int32 lResult;
			public uint32 ulTuneLength;
			public uint8[0] argbTuneData;
		}
		[CRepr]
		public struct BDA_TUNER_DIAGNOSTICS
		{
			public int32 lResult;
			public uint32 ulSignalLevel;
			public uint32 ulSignalLevelQuality;
			public uint32 ulSignalNoiseRatio;
		}
		[CRepr]
		public struct BDA_STRING
		{
			public int32 lResult;
			public uint32 ulStringSize;
			public uint8[0] argbString;
		}
		[CRepr]
		public struct BDA_SCAN_CAPABILTIES
		{
			public int32 lResult;
			public uint64 ul64AnalogStandardsSupported;
		}
		[CRepr]
		public struct BDA_SCAN_STATE
		{
			public int32 lResult;
			public uint32 ulSignalLock;
			public uint32 ulSecondsLeft;
			public uint32 ulCurrentFrequency;
		}
		[CRepr]
		public struct BDA_SCAN_START
		{
			public int32 lResult;
			public uint32 LowerFrequency;
			public uint32 HigerFrequency;
		}
		[CRepr]
		public struct BDA_GDDS_DATATYPE
		{
			public int32 lResult;
			public Guid uuidDataType;
		}
		[CRepr]
		public struct BDA_GDDS_DATA
		{
			public int32 lResult;
			public uint32 ulDataLength;
			public uint32 ulPercentageProgress;
			public uint8[0] argbData;
		}
		[CRepr]
		public struct BDA_USERACTIVITY_INTERVAL
		{
			public int32 lResult;
			public uint32 ulActivityInterval;
		}
		[CRepr]
		public struct BDA_CAS_CHECK_ENTITLEMENTTOKEN
		{
			public int32 lResult;
			public uint32 ulDescrambleStatus;
		}
		[CRepr]
		public struct BDA_CAS_CLOSE_MMIDIALOG
		{
			public int32 lResult;
			public uint32 SessionResult;
		}
		[CRepr]
		public struct BDA_CAS_REQUESTTUNERDATA
		{
			public uint8 ucRequestPriority;
			public uint8 ucRequestReason;
			public uint8 ucRequestConsequences;
			public uint32 ulEstimatedTime;
		}
		[CRepr]
		public struct BDA_CAS_OPENMMIDATA
		{
			public uint32 ulDialogNumber;
			public uint32 ulDialogRequest;
			public Guid uuidDialogType;
			public uint16 usDialogDataLength;
			public uint8[0] argbDialogData;
		}
		[CRepr]
		public struct BDA_CAS_CLOSEMMIDATA
		{
			public uint32 ulDialogNumber;
		}
		[CRepr, Packed(1)]
		public struct BDA_ISDBCAS_REQUESTHEADER
		{
			public uint8 bInstruction;
			public uint8[3] bReserved;
			public uint32 ulDataLength;
			public uint8[0] argbIsdbCommand;
		}
		[CRepr, Packed(1)]
		public struct BDA_ISDBCAS_RESPONSEDATA
		{
			public int32 lResult;
			public uint32 ulRequestID;
			public uint32 ulIsdbStatus;
			public uint32 ulIsdbDataSize;
			public uint8[0] argbIsdbCommandData;
		}
		[CRepr]
		public struct BDA_ISDBCAS_EMG_REQ
		{
			public uint8 bCLA;
			public uint8 bINS;
			public uint8 bP1;
			public uint8 bP2;
			public uint8 bLC;
			public uint8[6] bCardId;
			public uint8 bProtocol;
			public uint8 bCABroadcasterGroupId;
			public uint8 bMessageControl;
			public uint8[0] bMessageCode;
		}
		[CRepr, Packed(2)]
		public struct BDA_MUX_PIDLISTITEM
		{
			public uint16 usPIDNumber;
			public uint16 usProgramNumber;
			public MUX_PID_TYPE ePIDType;
		}
		[CRepr, Packed(1)]
		public struct BDA_TS_SELECTORINFO
		{
			public uint8 bTSInfolength;
			public uint8[2] bReserved;
			public Guid guidNetworkType;
			public uint8 bTSIDCount;
			public uint16[0] usTSID;
		}
		[CRepr]
		public struct BDA_TS_SELECTORINFO_ISDBS_EXT
		{
			public uint8[48] bTMCC;
		}
		[CRepr]
		public struct BDA_DVBT2_L1_SIGNALLING_DATA
		{
			public uint8 L1Pre_TYPE;
			public uint8 L1Pre_BWT_S1_S2;
			public uint8 L1Pre_REPETITION_GUARD_PAPR;
			public uint8 L1Pre_MOD_COD_FEC;
			public uint8[5] L1Pre_POSTSIZE_INFO_PILOT;
			public uint8 L1Pre_TX_ID_AVAIL;
			public uint8[2] L1Pre_CELL_ID;
			public uint8[2] L1Pre_NETWORK_ID;
			public uint8[2] L1Pre_T2SYSTEM_ID;
			public uint8 L1Pre_NUM_T2_FRAMES;
			public uint8[2] L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT;
			public uint8[2] L1Pre_NUMRF_CURRENTRF_RESERVED;
			public uint8[4] L1Pre_CRC32;
			public uint8[0] L1PostData;
		}
		[CRepr]
		public struct BDA_RATING_PINRESET
		{
			public uint8 bPinLength;
			public uint8[0] argbNewPin;
		}
		[CRepr]
		public struct MPEG2_TRANSPORT_STRIDE
		{
			public uint32 dwOffset;
			public uint32 dwPacketLength;
			public uint32 dwStride;
		}
		[CRepr]
		public struct BDA_SIGNAL_TIMEOUTS
		{
			public uint32 ulCarrierTimeoutMs;
			public uint32 ulScanningTimeoutMs;
			public uint32 ulTuningTimeoutMs;
		}
		[CRepr]
		public struct EALocationCodeType
		{
			public LocationCodeSchemeType LocationCodeScheme;
			public uint8 state_code;
			public uint8 county_subdivision;
			public uint16 county_code;
		}
		[CRepr]
		public struct SmartCardApplication
		{
			public ApplicationTypeType ApplicationType;
			public uint16 ApplicationVersion;
			public BSTR pbstrApplicationName;
			public BSTR pbstrApplicationURL;
		}
		[CRepr]
		public struct AMVAUncompBufferInfo
		{
			public uint32 dwMinNumSurfaces;
			public uint32 dwMaxNumSurfaces;
			public DDPIXELFORMAT ddUncompPixelFormat;
		}
		[CRepr]
		public struct AMVAUncompDataInfo
		{
			public uint32 dwUncompWidth;
			public uint32 dwUncompHeight;
			public DDPIXELFORMAT ddUncompPixelFormat;
		}
		[CRepr]
		public struct AMVAInternalMemInfo
		{
			public uint32 dwScratchMemAlloc;
		}
		[CRepr]
		public struct AMVACompBufferInfo
		{
			public uint32 dwNumCompBuffers;
			public uint32 dwWidthToCreate;
			public uint32 dwHeightToCreate;
			public uint32 dwBytesToAllocate;
			public DDSCAPS2 ddCompCaps;
			public DDPIXELFORMAT ddPixelFormat;
		}
		[CRepr]
		public struct AMVABeginFrameInfo
		{
			public uint32 dwDestSurfaceIndex;
			public void* pInputData;
			public uint32 dwSizeInputData;
			public void* pOutputData;
			public uint32 dwSizeOutputData;
		}
		[CRepr]
		public struct AMVAEndFrameInfo
		{
			public uint32 dwSizeMiscData;
			public void* pMiscData;
		}
		[CRepr]
		public struct AMVABUFFERINFO
		{
			public uint32 dwTypeIndex;
			public uint32 dwBufferIndex;
			public uint32 dwDataOffset;
			public uint32 dwDataSize;
		}
		[CRepr]
		public struct AM_WST_PAGE
		{
			public uint32 dwPageNr;
			public uint32 dwSubPageNr;
			public uint8* pucPageData;
		}
		[CRepr]
		public struct TRUECOLORINFO
		{
			public uint32[3] dwBitMasks;
			public RGBQUAD[256] bmiColors;
		}
		[CRepr]
		public struct VIDEOINFOHEADER
		{
			public RECT rcSource;
			public RECT rcTarget;
			public uint32 dwBitRate;
			public uint32 dwBitErrorRate;
			public int64 AvgTimePerFrame;
			public BITMAPINFOHEADER bmiHeader;
		}
		[CRepr]
		public struct VIDEOINFO
		{
			public RECT rcSource;
			public RECT rcTarget;
			public uint32 dwBitRate;
			public uint32 dwBitErrorRate;
			public int64 AvgTimePerFrame;
			public BITMAPINFOHEADER bmiHeader;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public RGBQUAD[256] bmiColors;
				public uint32[3] dwBitMasks;
				public TRUECOLORINFO TrueColorInfo;
			}
		}
		[CRepr]
		public struct MPEG1VIDEOINFO
		{
			public VIDEOINFOHEADER hdr;
			public uint32 dwStartTimeCode;
			public uint32 cbSequenceHeader;
			public uint8[0] bSequenceHeader;
		}
		[CRepr]
		public struct ANALOGVIDEOINFO
		{
			public RECT rcSource;
			public RECT rcTarget;
			public uint32 dwActiveWidth;
			public uint32 dwActiveHeight;
			public int64 AvgTimePerFrame;
		}
		[CRepr]
		public struct AM_FRAMESTEP_STEP
		{
			public uint32 dwFramesToStep;
		}
		[CRepr]
		public struct AM_MPEGSTREAMTYPE
		{
			public uint32 dwStreamId;
			public uint32 dwReserved;
			public AM_MEDIA_TYPE mt;
			public uint8[0] bFormat;
		}
		[CRepr]
		public struct AM_MPEGSYSTEMTYPE
		{
			public uint32 dwBitRate;
			public uint32 cStreams;
			public AM_MPEGSTREAMTYPE[0] Streams;
		}
		[CRepr]
		public struct VMR9PresentationInfo
		{
			public uint32 dwFlags;
			public IDirect3DSurface9* lpSurf;
			public int64 rtStart;
			public int64 rtEnd;
			public SIZE szAspectRatio;
			public RECT rcSrc;
			public RECT rcDst;
			public uint32 dwReserved1;
			public uint32 dwReserved2;
		}
		[CRepr]
		public struct VMR9AllocationInfo
		{
			public uint32 dwFlags;
			public uint32 dwWidth;
			public uint32 dwHeight;
			public D3DFORMAT Format;
			public D3DPOOL Pool;
			public uint32 MinBuffers;
			public SIZE szAspectRatio;
			public SIZE szNativeSize;
		}
		[CRepr]
		public struct VMR9NormalizedRect
		{
			public float left;
			public float top;
			public float right;
			public float bottom;
		}
		[CRepr]
		public struct VMR9ProcAmpControl
		{
			public uint32 dwSize;
			public uint32 dwFlags;
			public float Brightness;
			public float Contrast;
			public float Hue;
			public float Saturation;
		}
		[CRepr]
		public struct VMR9ProcAmpControlRange
		{
			public uint32 dwSize;
			public VMR9ProcAmpControlFlags dwProperty;
			public float MinValue;
			public float MaxValue;
			public float DefaultValue;
			public float StepSize;
		}
		[CRepr]
		public struct VMR9AlphaBitmap
		{
			public uint32 dwFlags;
			public HDC hdc;
			public IDirect3DSurface9* pDDS;
			public RECT rSrc;
			public VMR9NormalizedRect rDest;
			public float fAlpha;
			public uint32 clrSrcKey;
			public uint32 dwFilterMode;
		}
		[CRepr]
		public struct VMR9MonitorInfo
		{
			public uint32 uDevID;
			public RECT rcMonitor;
			public HMONITOR hMon;
			public uint32 dwFlags;
			public char16[32] szDevice;
			public char16[512] szDescription;
			public LARGE_INTEGER liDriverVersion;
			public uint32 dwVendorId;
			public uint32 dwDeviceId;
			public uint32 dwSubSysId;
			public uint32 dwRevision;
		}
		[CRepr]
		public struct VMR9Frequency
		{
			public uint32 dwNumerator;
			public uint32 dwDenominator;
		}
		[CRepr]
		public struct VMR9VideoDesc
		{
			public uint32 dwSize;
			public uint32 dwSampleWidth;
			public uint32 dwSampleHeight;
			public VMR9_SampleFormat SampleFormat;
			public uint32 dwFourCC;
			public VMR9Frequency InputSampleFreq;
			public VMR9Frequency OutputFrameFreq;
		}
		[CRepr]
		public struct VMR9DeinterlaceCaps
		{
			public uint32 dwSize;
			public uint32 dwNumPreviousOutputFrames;
			public uint32 dwNumForwardRefSamples;
			public uint32 dwNumBackwardRefSamples;
			public VMR9DeinterlaceTech DeinterlaceTechnology;
		}
		[CRepr]
		public struct VMR9VideoStreamInfo
		{
			public IDirect3DSurface9* pddsVideoSurface;
			public uint32 dwWidth;
			public uint32 dwHeight;
			public uint32 dwStrmID;
			public float fAlpha;
			public VMR9NormalizedRect rNormal;
			public int64 rtStart;
			public int64 rtEnd;
			public VMR9_SampleFormat SampleFormat;
		}
		[CRepr, Packed(2)]
		public struct RIFFCHUNK
		{
			public uint32 fcc;
			public uint32 cb;
		}
		[CRepr, Packed(2)]
		public struct RIFFLIST
		{
			public uint32 fcc;
			public uint32 cb;
			public uint32 fccListType;
		}
		[CRepr, Packed(2)]
		public struct AVIMAINHEADER
		{
			public uint32 fcc;
			public uint32 cb;
			public uint32 dwMicroSecPerFrame;
			public uint32 dwMaxBytesPerSec;
			public uint32 dwPaddingGranularity;
			public uint32 dwFlags;
			public uint32 dwTotalFrames;
			public uint32 dwInitialFrames;
			public uint32 dwStreams;
			public uint32 dwSuggestedBufferSize;
			public uint32 dwWidth;
			public uint32 dwHeight;
			public uint32[4] dwReserved;
		}
		[CRepr, Packed(2)]
		public struct AVIEXTHEADER
		{
			public uint32 fcc;
			public uint32 cb;
			public uint32 dwGrandFrames;
			public uint32[61] dwFuture;
		}
		[CRepr, Packed(2)]
		public struct AVISTREAMHEADER
		{
			public uint32 fcc;
			public uint32 cb;
			public uint32 fccType;
			public uint32 fccHandler;
			public uint32 dwFlags;
			public uint16 wPriority;
			public uint16 wLanguage;
			public uint32 dwInitialFrames;
			public uint32 dwScale;
			public uint32 dwRate;
			public uint32 dwStart;
			public uint32 dwLength;
			public uint32 dwSuggestedBufferSize;
			public uint32 dwQuality;
			public uint32 dwSampleSize;
			public _rcFrame_e__Struct rcFrame;
			
			[CRepr]
			public struct _rcFrame_e__Struct
			{
				public int16 left;
				public int16 top;
				public int16 right;
				public int16 bottom;
			}
		}
		[CRepr, Packed(2)]
		public struct AVIOLDINDEX
		{
			public uint32 fcc;
			public uint32 cb;
			public _avioldindex_entry[0] aIndex;
			
			[CRepr, Packed(2)]
			public struct _avioldindex_entry
			{
				public uint32 dwChunkId;
				public uint32 dwFlags;
				public uint32 dwOffset;
				public uint32 dwSize;
			}
		}
		[CRepr, Packed(2)]
		public struct TIMECODEDATA
		{
			public TIMECODE time;
			public uint32 dwSMPTEflags;
			public uint32 dwUser;
		}
		[CRepr, Packed(2)]
		public struct AVIMETAINDEX
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint32[3] dwReserved;
			public uint32[0] adwIndex;
		}
		[CRepr, Packed(2)]
		public struct AVISUPERINDEX
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint32[3] dwReserved;
			public _avisuperindex_entry[1022] aIndex;
			
			[CRepr, Packed(2)]
			public struct _avisuperindex_entry
			{
				public uint64 qwOffset;
				public uint32 dwSize;
				public uint32 dwDuration;
			}
		}
		[CRepr, Packed(2)]
		public struct AVISTDINDEX_ENTRY
		{
			public uint32 dwOffset;
			public uint32 dwSize;
		}
		[CRepr, Packed(2)]
		public struct AVISTDINDEX
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint64 qwBaseOffset;
			public uint32 dwReserved_3;
			public AVISTDINDEX_ENTRY[2044] aIndex;
		}
		[CRepr, Packed(2)]
		public struct AVITIMEDINDEX_ENTRY
		{
			public uint32 dwOffset;
			public uint32 dwSize;
			public uint32 dwDuration;
		}
		[CRepr, Packed(2)]
		public struct _avitimedindex
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint64 qwBaseOffset;
			public uint32 dwReserved_3;
			public AVITIMEDINDEX_ENTRY[1362] aIndex;
			public uint32[2734] adwTrailingFill;
		}
		[CRepr, Packed(2)]
		public struct AVITIMECODEINDEX
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint32[3] dwReserved;
			public TIMECODEDATA[1022] aIndex;
		}
		[CRepr, Packed(2)]
		public struct AVITCDLINDEX_ENTRY
		{
			public uint32 dwTick;
			public TIMECODE time;
			public uint32 dwSMPTEflags;
			public uint32 dwUser;
			public int8[12] szReelId;
		}
		[CRepr, Packed(2)]
		public struct _avitcdlindex
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint32[3] dwReserved;
			public AVITCDLINDEX_ENTRY[584] aIndex;
			public uint32[3512] adwTrailingFill;
		}
		[CRepr, Packed(2)]
		public struct AVIFIELDINDEX
		{
			public uint32 fcc;
			public uint32 cb;
			public uint16 wLongsPerEntry;
			public uint8 bIndexSubType;
			public uint8 bIndexType;
			public uint32 nEntriesInUse;
			public uint32 dwChunkId;
			public uint64 qwBaseOffset;
			public uint32 dwReserved3;
			public _avifieldindex_entry[0] aIndex;
			
			[CRepr, Packed(2)]
			public struct _avifieldindex_entry
			{
				public uint32 dwOffset;
				public uint32 dwSize;
				public uint32 dwOffsetField2;
			}
		}
		[CRepr]
		public struct MainAVIHeader
		{
			public uint32 dwMicroSecPerFrame;
			public uint32 dwMaxBytesPerSec;
			public uint32 dwPaddingGranularity;
			public uint32 dwFlags;
			public uint32 dwTotalFrames;
			public uint32 dwInitialFrames;
			public uint32 dwStreams;
			public uint32 dwSuggestedBufferSize;
			public uint32 dwWidth;
			public uint32 dwHeight;
			public uint32[4] dwReserved;
		}
		[CRepr]
		public struct AVIStreamHeader
		{
			public uint32 fccType;
			public uint32 fccHandler;
			public uint32 dwFlags;
			public uint16 wPriority;
			public uint16 wLanguage;
			public uint32 dwInitialFrames;
			public uint32 dwScale;
			public uint32 dwRate;
			public uint32 dwStart;
			public uint32 dwLength;
			public uint32 dwSuggestedBufferSize;
			public uint32 dwQuality;
			public uint32 dwSampleSize;
			public RECT rcFrame;
		}
		[CRepr]
		public struct AVIINDEXENTRY
		{
			public uint32 ckid;
			public uint32 dwFlags;
			public uint32 dwChunkOffset;
			public uint32 dwChunkLength;
		}
		[CRepr]
		public struct AVIPALCHANGE
		{
			public uint8 bFirstEntry;
			public uint8 bNumEntries;
			public uint16 wFlags;
			public PALETTEENTRY[0] peNew;
		}
		[CRepr]
		public struct AM_AC3_ERROR_CONCEALMENT
		{
			public BOOL fRepeatPreviousBlock;
			public BOOL fErrorInCurrentBlock;
		}
		[CRepr]
		public struct AM_AC3_ALTERNATE_AUDIO
		{
			public BOOL fStereo;
			public uint32 DualMode;
		}
		[CRepr]
		public struct AM_AC3_DOWNMIX
		{
			public BOOL fDownMix;
			public BOOL fDolbySurround;
		}
		[CRepr]
		public struct AM_AC3_BIT_STREAM_MODE
		{
			public int32 BitStreamMode;
		}
		[CRepr]
		public struct AM_AC3_DIALOGUE_LEVEL
		{
			public uint32 DialogueLevel;
		}
		[CRepr]
		public struct AM_AC3_ROOM_TYPE
		{
			public BOOL fLargeRoom;
		}
		[CRepr]
		public struct AM_DVD_YUV
		{
			public uint8 Reserved;
			public uint8 Y;
			public uint8 U;
			public uint8 V;
		}
		[CRepr]
		public struct AM_PROPERTY_SPPAL
		{
			public AM_DVD_YUV[16] sppal;
		}
		[CRepr]
		public struct AM_COLCON
		{
			public uint8 _bitfield1;
			public uint8 _bitfield2;
			public uint8 _bitfield3;
			public uint8 _bitfield4;
		}
		[CRepr]
		public struct AM_PROPERTY_SPHLI
		{
			public uint16 HLISS;
			public uint16 Reserved;
			public uint32 StartPTM;
			public uint32 EndPTM;
			public uint16 StartX;
			public uint16 StartY;
			public uint16 StopX;
			public uint16 StopY;
			public AM_COLCON ColCon;
		}
		[CRepr]
		public struct AM_DVDCOPY_CHLGKEY
		{
			public uint8[10] ChlgKey;
			public uint8[2] Reserved;
		}
		[CRepr]
		public struct AM_DVDCOPY_BUSKEY
		{
			public uint8[5] BusKey;
			public uint8[0] Reserved;
		}
		[CRepr]
		public struct AM_DVDCOPY_DISCKEY
		{
			public uint8[2048] DiscKey;
		}
		[CRepr]
		public struct AM_DVDCOPY_TITLEKEY
		{
			public uint32 KeyFlags;
			public uint32[2] Reserved1;
			public uint8[6] TitleKey;
			public uint8[2] Reserved2;
		}
		[CRepr]
		public struct AM_COPY_MACROVISION
		{
			public uint32 MACROVISIONLevel;
		}
		[CRepr]
		public struct AM_DVDCOPY_SET_COPY_STATE
		{
			public uint32 DVDCopyState;
		}
		[CRepr]
		public struct DVD_REGION
		{
			public uint8 CopySystem;
			public uint8 RegionData;
			public uint8 SystemRegion;
			public uint8 ResetCount;
		}
		[CRepr]
		public struct VIDEOINFOHEADER2
		{
			public RECT rcSource;
			public RECT rcTarget;
			public uint32 dwBitRate;
			public uint32 dwBitErrorRate;
			public int64 AvgTimePerFrame;
			public uint32 dwInterlaceFlags;
			public uint32 dwCopyProtectFlags;
			public uint32 dwPictAspectRatioX;
			public uint32 dwPictAspectRatioY;
			public _Anonymous_e__Union Anonymous;
			public uint32 dwReserved2;
			public BITMAPINFOHEADER bmiHeader;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public uint32 dwControlFlags;
				public uint32 dwReserved1;
			}
		}
		[CRepr]
		public struct MPEG2VIDEOINFO
		{
			public VIDEOINFOHEADER2 hdr;
			public uint32 dwStartTimeCode;
			public uint32 cbSequenceHeader;
			public uint32 dwProfile;
			public uint32 dwLevel;
			public MPEG2VIDEOINFO_FLAGS dwFlags;
			public uint32[0] dwSequenceHeader;
		}
		[CRepr]
		public struct AM_DvdKaraokeData
		{
			public uint32 dwDownmix;
			public uint32 dwSpeakerAssignment;
		}
		[CRepr]
		public struct AM_SimpleRateChange
		{
			public int64 StartTime;
			public int32 Rate;
		}
		[CRepr]
		public struct AM_QueryRate
		{
			public int32 lMaxForwardFullFrame;
			public int32 lMaxReverseFullFrame;
		}
		[CRepr]
		public struct AM_ExactRateChange
		{
			public int64 OutputZeroTime;
			public int32 Rate;
		}
		[CRepr]
		public struct AM_DVD_ChangeRate
		{
			public int64 StartInTime;
			public int64 StartOutTime;
			public int32 Rate;
		}
		[CRepr]
		public struct MP_PARAMINFO
		{
			public MP_TYPE mpType;
			public uint32 mopCaps;
			public float mpdMinValue;
			public float mpdMaxValue;
			public float mpdNeutralValue;
			public char16[32] szUnitText;
			public char16[32] szLabel;
		}
		[CRepr]
		public struct MP_ENVELOPE_SEGMENT
		{
			public int64 rtStart;
			public int64 rtEnd;
			public float valStart;
			public float valEnd;
			public MP_CURVE_TYPE iCurve;
			public uint32 flags;
		}
		[CRepr]
		public struct VFW_FILTERLIST
		{
			public uint32 cFilters;
			public Guid[0] aClsId;
		}
		[CRepr]
		public struct DXVA2_VIDEOSAMPLE
		{
			public int64 Start;
			public int64 End;
			public DXVA2_ExtendedFormat SampleFormat;
			public uint32 SampleFlags;
			public void* SrcResource;
			public RECT SrcRect;
			public RECT DstRect;
			public DXVA2_AYUVSample8[16] Pal;
			public DXVA2_Fixed32 PlanarAlpha;
		}
		[CRepr]
		public struct DXVA2_VIDEOPROCESSBLT
		{
			public int64 TargetFrame;
			public RECT TargetRect;
			public SIZE ConstrictionSize;
			public uint32 StreamingFlags;
			public DXVA2_AYUVSample16 BackgroundColor;
			public DXVA2_ExtendedFormat DestFormat;
			public uint32 DestFlags;
			public DXVA2_ProcAmpValues ProcAmpValues;
			public DXVA2_Fixed32 Alpha;
			public DXVA2_FilterValues NoiseFilterLuma;
			public DXVA2_FilterValues NoiseFilterChroma;
			public DXVA2_FilterValues DetailFilterLuma;
			public DXVA2_FilterValues DetailFilterChroma;
			public DXVA2_VIDEOSAMPLE* pSrcSurfaces;
			public uint32 NumSrcSurfaces;
		}
		[CRepr]
		public struct DXVA2SW_CALLBACKS
		{
			public uint32 Size;
			public PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT GetVideoProcessorRenderTargetCount;
			public PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS GetVideoProcessorRenderTargets;
			public PDXVA2SW_GETVIDEOPROCESSORCAPS GetVideoProcessorCaps;
			public PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT GetVideoProcessorSubStreamFormatCount;
			public PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS GetVideoProcessorSubStreamFormats;
			public PDXVA2SW_GETPROCAMPRANGE GetProcAmpRange;
			public PDXVA2SW_GETFILTERPROPERTYRANGE GetFilterPropertyRange;
			public PDXVA2SW_CREATEVIDEOPROCESSDEVICE CreateVideoProcessDevice;
			public PDXVA2SW_DESTROYVIDEOPROCESSDEVICE DestroyVideoProcessDevice;
			public PDXVA2SW_VIDEOPROCESSBEGINFRAME VideoProcessBeginFrame;
			public PDXVA2SW_VIDEOPROCESSENDFRAME VideoProcessEndFrame;
			public PDXVA2SW_VIDEOPROCESSSETRENDERTARGET VideoProcessSetRenderTarget;
			public PDXVA2SW_VIDEOPROCESSBLT VideoProcessBlt;
		}
		[CRepr]
		public struct DXVA2Trace_DecodeDevCreatedData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public uint64 pD3DDevice;
			public Guid DeviceGuid;
			public uint32 Width;
			public uint32 Height;
			public BOOL Enter;
		}
		[CRepr]
		public struct DXVA2Trace_DecodeDeviceData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public BOOL Enter;
		}
		[CRepr]
		public struct DXVA2Trace_DecodeDevBeginFrameData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public uint64 pRenderTarget;
			public BOOL Enter;
		}
		[CRepr]
		public struct DXVA2Trace_DecodeDevGetBufferData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public uint32 BufferType;
			public BOOL Enter;
		}
		[CRepr]
		public struct DXVA2Trace_VideoProcessDevCreatedData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public uint64 pD3DDevice;
			public Guid DeviceGuid;
			public uint32 RTFourCC;
			public uint32 Width;
			public uint32 Height;
			public BOOL Enter;
		}
		[CRepr]
		public struct DXVA2Trace_VideoProcessDeviceData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public BOOL Enter;
		}
		[CRepr]
		public struct DXVA2TraceVideoProcessBltData
		{
			public EVENT_TRACE_HEADER wmiHeader;
			public uint64 pObject;
			public uint64 pRenderTarget;
			public uint64 TargetFrameTime;
			public RECT TargetRect;
			public BOOL Enter;
		}
		[CRepr, Packed(1)]
		public struct WMDRMProtectionInfo
		{
			public uint16[25] wszKID;
			public uint64 qwCounter;
			public uint64 qwIndex;
			public uint8 bOffset;
		}
		[CRepr, Packed(1)]
		public struct BadSampleInfo
		{
			public HRESULT hrReason;
		}
		[CRepr]
		public struct STREAMBUFFER_ATTRIBUTE
		{
			public PWSTR pszName;
			public STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType;
			public uint8* pbAttribute;
			public uint16 cbLength;
		}
		[CRepr]
		public struct SBE_PIN_DATA
		{
			public uint64 cDataBytes;
			public uint64 cSamplesProcessed;
			public uint64 cDiscontinuities;
			public uint64 cSyncPoints;
			public uint64 cTimestamps;
		}
		[CRepr]
		public struct SBE2_STREAM_DESC
		{
			public uint32 Version;
			public uint32 StreamId;
			public uint32 Default;
			public uint32 Reserved;
		}
		[CRepr]
		public struct DVR_STREAM_DESC
		{
			public uint32 Version;
			public uint32 StreamId;
			public BOOL Default;
			public BOOL Creation;
			public uint32 Reserved;
			public Guid guidSubMediaType;
			public Guid guidFormatType;
			public AM_MEDIA_TYPE MediaType;
		}
		[CRepr, Packed(1)]
		public struct PID_BITS_MIDL
		{
			public uint16 Bits;
		}
		[CRepr, Packed(1)]
		public struct MPEG_HEADER_BITS_MIDL
		{
			public uint16 Bits;
		}
		[CRepr]
		public struct MPEG_HEADER_VERSION_BITS_MIDL
		{
			public uint8 Bits;
		}
		[CRepr, Packed(1)]
		public struct TID_EXTENSION
		{
			public uint16 wTidExt;
			public uint16 wCount;
		}
		[CRepr]
		public struct SECTION
		{
			public uint8 TableId;
			public _Header_e__Union Header;
			public uint8[0] SectionData;
			
			[CRepr, Union, Packed(1)]
			public struct _Header_e__Union
			{
				public MPEG_HEADER_BITS_MIDL S;
				public uint16 W;
			}
		}
		[CRepr, Packed(1)]
		public struct LONG_SECTION
		{
			public uint8 TableId;
			public _Header_e__Union Header;
			public uint16 TableIdExtension;
			public _Version_e__Union Version;
			public uint8 SectionNumber;
			public uint8 LastSectionNumber;
			public uint8[0] RemainingData;
			
			[CRepr, Union, Packed(1)]
			public struct _Header_e__Union
			{
				public MPEG_HEADER_BITS_MIDL S;
				public uint16 W;
			}
			[CRepr, Union]
			public struct _Version_e__Union
			{
				public MPEG_HEADER_VERSION_BITS_MIDL S;
				public uint8 B;
			}
		}
		[CRepr, Packed(1)]
		public struct DSMCC_SECTION
		{
			public uint8 TableId;
			public _Header_e__Union Header;
			public uint16 TableIdExtension;
			public _Version_e__Union Version;
			public uint8 SectionNumber;
			public uint8 LastSectionNumber;
			public uint8 ProtocolDiscriminator;
			public uint8 DsmccType;
			public uint16 MessageId;
			public uint32 TransactionId;
			public uint8 Reserved;
			public uint8 AdaptationLength;
			public uint16 MessageLength;
			public uint8[0] RemainingData;
			
			[CRepr, Union, Packed(1)]
			public struct _Header_e__Union
			{
				public MPEG_HEADER_BITS_MIDL S;
				public uint16 W;
			}
			[CRepr, Union]
			public struct _Version_e__Union
			{
				public MPEG_HEADER_VERSION_BITS_MIDL S;
				public uint8 B;
			}
		}
		[CRepr, Packed(1)]
		public struct MPEG_RQST_PACKET
		{
			public uint32 dwLength;
			public SECTION* pSection;
		}
		[CRepr, Packed(1)]
		public struct MPEG_PACKET_LIST
		{
			public uint16 wPacketCount;
			public MPEG_RQST_PACKET*[0] PacketList;
		}
		[CRepr, Packed(1)]
		public struct DSMCC_FILTER_OPTIONS
		{
			public BOOL fSpecifyProtocol;
			public uint8 Protocol;
			public BOOL fSpecifyType;
			public uint8 Type;
			public BOOL fSpecifyMessageId;
			public uint16 MessageId;
			public BOOL fSpecifyTransactionId;
			public BOOL fUseTrxIdMessageIdMask;
			public uint32 TransactionId;
			public BOOL fSpecifyModuleVersion;
			public uint8 ModuleVersion;
			public BOOL fSpecifyBlockNumber;
			public uint16 BlockNumber;
			public BOOL fGetModuleCall;
			public uint16 NumberOfBlocksInModule;
		}
		[CRepr, Packed(1)]
		public struct ATSC_FILTER_OPTIONS
		{
			public BOOL fSpecifyEtmId;
			public uint32 EtmId;
		}
		[CRepr, Packed(1)]
		public struct DVB_EIT_FILTER_OPTIONS
		{
			public BOOL fSpecifySegment;
			public uint8 bSegment;
		}
		[CRepr, Packed(1)]
		public struct MPEG2_FILTER
		{
			public uint8 bVersionNumber;
			public uint16 wFilterSize;
			public BOOL fUseRawFilteringBits;
			public uint8[16] Filter;
			public uint8[16] Mask;
			public BOOL fSpecifyTableIdExtension;
			public uint16 TableIdExtension;
			public BOOL fSpecifyVersion;
			public uint8 Version;
			public BOOL fSpecifySectionNumber;
			public uint8 SectionNumber;
			public BOOL fSpecifyCurrentNext;
			public BOOL fNext;
			public BOOL fSpecifyDsmccOptions;
			public DSMCC_FILTER_OPTIONS Dsmcc;
			public BOOL fSpecifyAtscOptions;
			public ATSC_FILTER_OPTIONS Atsc;
		}
		[CRepr, Packed(1)]
		public struct MPEG2_FILTER2
		{
			public _Anonymous_e__Union Anonymous;
			public BOOL fSpecifyDvbEitOptions;
			public DVB_EIT_FILTER_OPTIONS DvbEit;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public _Anonymous_e__Struct Anonymous;
				public uint8[124] bVersion1Bytes;
				
				[CRepr, Packed(1)]
				public struct _Anonymous_e__Struct
				{
					public uint8 bVersionNumber;
					public uint16 wFilterSize;
					public BOOL fUseRawFilteringBits;
					public uint8[16] Filter;
					public uint8[16] Mask;
					public BOOL fSpecifyTableIdExtension;
					public uint16 TableIdExtension;
					public BOOL fSpecifyVersion;
					public uint8 Version;
					public BOOL fSpecifySectionNumber;
					public uint8 SectionNumber;
					public BOOL fSpecifyCurrentNext;
					public BOOL fNext;
					public BOOL fSpecifyDsmccOptions;
					public DSMCC_FILTER_OPTIONS Dsmcc;
					public BOOL fSpecifyAtscOptions;
					public ATSC_FILTER_OPTIONS Atsc;
				}
			}
		}
		[CRepr, Packed(1)]
		public struct MPEG_STREAM_BUFFER
		{
			public HRESULT hr;
			public uint32 dwDataBufferSize;
			public uint32 dwSizeOfDataRead;
			public uint8* pDataBuffer;
		}
		[CRepr]
		public struct MPEG_TIME
		{
			public uint8 Hours;
			public uint8 Minutes;
			public uint8 Seconds;
		}
		[CRepr, Packed(1)]
		public struct MPEG_DATE
		{
			public uint8 Date;
			public uint8 Month;
			public uint16 Year;
		}
		[CRepr]
		public struct MPEG_DATE_AND_TIME
		{
			public MPEG_DATE D;
			public MPEG_TIME T;
		}
		[CRepr, Packed(1)]
		public struct MPEG_BCS_DEMUX
		{
			public uint32 AVMGraphId;
		}
		[CRepr, Packed(1)]
		public struct MPEG_WINSOCK
		{
			public uint32 AVMGraphId;
		}
		[CRepr, Packed(1)]
		public struct MPEG_CONTEXT
		{
			public MPEG_CONTEXT_TYPE Type;
			public _U_e__Union U;
			
			[CRepr, Union]
			public struct _U_e__Union
			{
				public MPEG_BCS_DEMUX Demux;
				public MPEG_WINSOCK Winsock;
			}
		}
		[CRepr, Packed(1)]
		public struct MPEG_SERVICE_REQUEST
		{
			public MPEG_REQUEST_TYPE Type;
			public MPEG_CONTEXT Context;
			public uint16 Pid;
			public uint8 TableId;
			public MPEG2_FILTER Filter;
			public uint32 Flags;
		}
		[CRepr, Packed(1)]
		public struct MPEG_SERVICE_RESPONSE
		{
			public uint32 IPAddress;
			public uint16 Port;
		}
		[CRepr, Packed(1)]
		public struct DSMCC_ELEMENT
		{
			public uint16 pid;
			public uint8 bComponentTag;
			public uint32 dwCarouselId;
			public uint32 dwTransactionId;
			public DSMCC_ELEMENT* pNext;
		}
		[CRepr, Packed(1)]
		public struct MPE_ELEMENT
		{
			public uint16 pid;
			public uint8 bComponentTag;
			public MPE_ELEMENT* pNext;
		}
		[CRepr, Packed(1)]
		public struct MPEG_STREAM_FILTER
		{
			public uint16 wPidValue;
			public uint32 dwFilterSize;
			public BOOL fCrcEnabled;
			public uint8[16] rgchFilter;
			public uint8[16] rgchMask;
		}
		[CRepr, Packed(1)]
		public struct Mpeg2TableSampleHdr
		{
			public uint8 SectionCount;
			public uint8[3] Reserved;
			public int32[0] SectionOffsets;
		}
		[CRepr]
		public struct ProgramElement
		{
			public uint16 wProgramNumber;
			public uint16 wProgramMapPID;
		}
		[CRepr]
		public struct UDCR_TAG
		{
			public uint8 bVersion;
			public uint8[25] KID;
			public uint64 ullBaseCounter;
			public uint64 ullBaseCounterRange;
			public BOOL fScrambled;
			public uint8 bStreamMark;
			public uint32 dwReserved1;
			public uint32 dwReserved2;
		}
		[CRepr]
		public struct PIC_SEQ_SAMPLE
		{
			public uint32 _bitfield;
		}
		[CRepr]
		public struct SAMPLE_SEQ_OFFSET
		{
			public uint32 _bitfield;
		}
		[CRepr]
		public struct VA_OPTIONAL_VIDEO_PROPERTIES
		{
			public uint16 dwPictureHeight;
			public uint16 dwPictureWidth;
			public uint16 dwAspectRatioX;
			public uint16 dwAspectRatioY;
			public VA_VIDEO_FORMAT VAVideoFormat;
			public VA_COLOR_PRIMARIES VAColorPrimaries;
			public VA_TRANSFER_CHARACTERISTICS VATransferCharacteristics;
			public VA_MATRIX_COEFFICIENTS VAMatrixCoefficients;
		}
		[CRepr]
		public struct TRANSPORT_PROPERTIES
		{
			public uint32 PID;
			public int64 PCR;
			public _Fields_e__Union Fields;
			
			[CRepr, Union]
			public struct _Fields_e__Union
			{
				public _Others Others;
				public int64 Value;
				
				[CRepr]
				public struct _Others
				{
					public int64 _bitfield;
				}
			}
		}
		[CRepr]
		public struct PBDA_TAG_ATTRIBUTE
		{
			public Guid TableUUId;
			public uint8 TableId;
			public uint16 VersionNo;
			public uint32 TableDataSize;
			public uint8[0] TableData;
		}
		[CRepr]
		public struct CAPTURE_STREAMTIME
		{
			public int64 StreamTime;
		}
		[CRepr]
		public struct DSHOW_STREAM_DESC
		{
			public uint32 VersionNo;
			public uint32 StreamId;
			public BOOL Default;
			public BOOL Creation;
			public uint32 Reserved;
		}
		[CRepr]
		public struct SAMPLE_LIVE_STREAM_TIME
		{
			public uint64 qwStreamTime;
			public uint64 qwLiveTime;
		}
		[CRepr]
		public struct KSP_BDA_NODE_PIN
		{
			public KSIDENTIFIER Property;
			public uint32 ulNodeType;
			public uint32 ulInputPinId;
			public uint32 ulOutputPinId;
		}
		[CRepr]
		public struct KSM_BDA_PIN
		{
			public KSIDENTIFIER Method;
			public _Anonymous_e__Union Anonymous;
			public uint32 Reserved;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public uint32 PinId;
				public uint32 PinType;
			}
		}
		[CRepr]
		public struct KSM_BDA_PIN_PAIR
		{
			public KSIDENTIFIER Method;
			public _Anonymous1_e__Union Anonymous1;
			public _Anonymous2_e__Union Anonymous2;
			
			[CRepr, Union]
			public struct _Anonymous1_e__Union
			{
				public uint32 InputPinId;
				public uint32 InputPinType;
			}
			[CRepr, Union]
			public struct _Anonymous2_e__Union
			{
				public uint32 OutputPinId;
				public uint32 OutputPinType;
			}
		}
		[CRepr]
		public struct KSP_NODE_ESPID
		{
			public KSP_NODE Property;
			public uint32 EsPid;
		}
		[CRepr]
		public struct KSM_BDA_DEBUG_LEVEL
		{
			public KSIDENTIFIER Method;
			public uint8 ucDebugLevel;
			public uint32 ulDebugStringSize;
			public uint8[0] argbDebugString;
		}
		[CRepr]
		public struct BDA_DEBUG_DATA
		{
			public int32 lResult;
			public Guid uuidDebugDataType;
			public uint32 ulDataSize;
			public uint8[0] argbDebugData;
		}
		[CRepr]
		public struct BDA_EVENT_DATA
		{
			public int32 lResult;
			public uint32 ulEventID;
			public Guid uuidEventType;
			public uint32 ulEventDataLength;
			public uint8[0] argbEventData;
		}
		[CRepr]
		public struct KSM_BDA_EVENT_COMPLETE
		{
			public KSIDENTIFIER Method;
			public uint32 ulEventID;
			public uint32 ulEventResult;
		}
		[CRepr]
		public struct KSM_BDA_DRM_SETDRM
		{
			public KSM_NODE NodeMethod;
			public Guid NewDRMuuid;
		}
		[CRepr]
		public struct KSM_BDA_BUFFER
		{
			public KSM_NODE NodeMethod;
			public uint32 ulBufferSize;
			public uint8[0] argbBuffer;
		}
		[CRepr]
		public struct KSM_BDA_WMDRM_LICENSE
		{
			public KSM_NODE NodeMethod;
			public Guid uuidKeyID;
		}
		[CRepr]
		public struct KSM_BDA_WMDRM_RENEWLICENSE
		{
			public KSM_NODE NodeMethod;
			public uint32 ulXMRLicenseLength;
			public uint32 ulEntitlementTokenLength;
			public uint8[0] argbDataBuffer;
		}
		[CRepr]
		public struct KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT
		{
			public KSM_NODE NodeMethod;
			public uint32 ulDialogRequest;
			public CHAR[12] cLanguage;
			public uint32 ulPurchaseTokenLength;
			public uint8[0] argbDataBuffer;
		}
		[CRepr]
		public struct KSM_BDA_WMDRMTUNER_SETPIDPROTECTION
		{
			public KSM_NODE NodeMethod;
			public uint32 ulPID;
			public Guid uuidKeyID;
		}
		[CRepr]
		public struct KSM_BDA_WMDRMTUNER_GETPIDPROTECTION
		{
			public KSM_NODE NodeMethod;
			public uint32 ulPID;
		}
		[CRepr]
		public struct KSM_BDA_WMDRMTUNER_SYNCVALUE
		{
			public KSM_NODE NodeMethod;
			public uint32 ulSyncValue;
		}
		[CRepr]
		public struct KSM_BDA_TUNER_TUNEREQUEST
		{
			public KSIDENTIFIER Method;
			public uint32 ulTuneLength;
			public uint8[0] argbTuneData;
		}
		[CRepr]
		public struct KSM_BDA_GPNV_GETVALUE
		{
			public KSIDENTIFIER Method;
			public uint32 ulNameLength;
			public CHAR[12] cLanguage;
			public uint8[0] argbData;
		}
		[CRepr]
		public struct KSM_BDA_GPNV_SETVALUE
		{
			public KSIDENTIFIER Method;
			public uint32 ulDialogRequest;
			public CHAR[12] cLanguage;
			public uint32 ulNameLength;
			public uint32 ulValueLength;
			public uint8[0] argbName;
		}
		[CRepr]
		public struct KSM_BDA_GPNV_NAMEINDEX
		{
			public KSIDENTIFIER Method;
			public uint32 ulValueNameIndex;
		}
		[CRepr]
		public struct KSM_BDA_SCAN_CAPABILTIES
		{
			public KSIDENTIFIER Method;
			public Guid uuidBroadcastStandard;
		}
		[CRepr]
		public struct KSM_BDA_SCAN_FILTER
		{
			public KSIDENTIFIER Method;
			public uint32 ulScanModulationTypeSize;
			public uint64 AnalogVideoStandards;
			public uint8[0] argbScanModulationTypes;
		}
		[CRepr]
		public struct KSM_BDA_SCAN_START
		{
			public KSIDENTIFIER Method;
			public uint32 LowerFrequency;
			public uint32 HigherFrequency;
		}
		[CRepr]
		public struct KSM_BDA_GDDS_TUNEXMLFROMIDX
		{
			public KSIDENTIFIER Method;
			public uint64 ulIdx;
		}
		[CRepr]
		public struct KSM_BDA_GDDS_SERVICEFROMTUNEXML
		{
			public KSIDENTIFIER Method;
			public uint32 ulTuneXmlLength;
			public uint8[0] argbTuneXml;
		}
		[CRepr]
		public struct KSM_BDA_USERACTIVITY_USEREASON
		{
			public KSIDENTIFIER Method;
			public uint32 ulUseReason;
		}
		[CRepr]
		public struct KSM_BDA_CAS_ENTITLEMENTTOKEN
		{
			public KSM_NODE NodeMethod;
			public uint32 ulDialogRequest;
			public CHAR[12] cLanguage;
			public uint32 ulRequestType;
			public uint32 ulEntitlementTokenLen;
			public uint8[0] argbEntitlementToken;
		}
		[CRepr]
		public struct KSM_BDA_CAS_CAPTURETOKEN
		{
			public KSM_NODE NodeMethod;
			public uint32 ulTokenLength;
			public uint8[0] argbToken;
		}
		[CRepr]
		public struct KSM_BDA_CAS_OPENBROADCASTMMI
		{
			public KSM_NODE NodeMethod;
			public uint32 ulDialogRequest;
			public CHAR[12] cLanguage;
			public uint32 ulEventId;
		}
		[CRepr]
		public struct KSM_BDA_CAS_CLOSEMMIDIALOG
		{
			public KSM_NODE NodeMethod;
			public uint32 ulDialogRequest;
			public CHAR[12] cLanguage;
			public uint32 ulDialogNumber;
			public uint32 ulReason;
		}
		[CRepr]
		public struct KSM_BDA_ISDBCAS_REQUEST
		{
			public KSM_NODE NodeMethod;
			public uint32 ulRequestID;
			public uint32 ulIsdbCommandSize;
			public uint8[0] argbIsdbCommandData;
		}
		[CRepr]
		public struct KSM_BDA_TS_SELECTOR_SETTSID
		{
			public KSM_NODE NodeMethod;
			public uint16 usTSID;
		}
		[CRepr]
		public struct KS_DATARANGE_BDA_ANTENNA
		{
			public KSDATAFORMAT DataRange;
		}
		[CRepr]
		public struct BDA_TRANSPORT_INFO
		{
			public uint32 ulcbPhyiscalPacket;
			public uint32 ulcbPhyiscalFrame;
			public uint32 ulcbPhyiscalFrameAlignment;
			public int64 AvgTimePerFrame;
		}
		[CRepr]
		public struct KS_DATARANGE_BDA_TRANSPORT
		{
			public KSDATAFORMAT DataRange;
			public BDA_TRANSPORT_INFO BdaTransportInfo;
		}
		[CRepr]
		public struct ChannelChangeInfo
		{
			public ChannelChangeSpanningEvent_State state;
			public uint64 TimeStamp;
		}
		[CRepr]
		public struct ChannelTypeInfo
		{
			public ChannelType channelType;
			public uint64 timeStamp;
		}
		[CRepr]
		public struct ChannelInfo
		{
			public int32 lFrequency;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public _DVB_e__Struct DVB;
				public _DC_e__Struct DC;
				public _ATSC_e__Struct ATSC;
				
				[CRepr]
				public struct _DC_e__Struct
				{
					public int32 lProgNumber;
				}
				[CRepr]
				public struct _DVB_e__Struct
				{
					public int32 lONID;
					public int32 lTSID;
					public int32 lSID;
				}
				[CRepr]
				public struct _ATSC_e__Struct
				{
					public int32 lProgNumber;
				}
			}
		}
		[CRepr]
		public struct SpanningEventDescriptor
		{
			public uint16 wDataLen;
			public uint16 wProgNumber;
			public uint16 wSID;
			public uint8[0] bDescriptor;
		}
		[CRepr]
		public struct DVBScramblingControlSpanningEvent
		{
			public uint32 ulPID;
			public BOOL fScrambled;
		}
		[CRepr]
		public struct SpanningEventEmmMessage
		{
			public uint8 bCAbroadcasterGroupId;
			public uint8 bMessageControl;
			public uint16 wServiceId;
			public uint16 wTableIdExtension;
			public uint8 bDeletionStatus;
			public uint8 bDisplayingDuration1;
			public uint8 bDisplayingDuration2;
			public uint8 bDisplayingDuration3;
			public uint8 bDisplayingCycle;
			public uint8 bFormatVersion;
			public uint8 bDisplayPosition;
			public uint16 wMessageLength;
			public char16[0] szMessageArea;
		}
		[CRepr]
		public struct LanguageInfo
		{
			public uint16 LangID;
			public int32 lISOLangCode;
		}
		[CRepr]
		public struct DualMonoInfo
		{
			public uint16 LangID1;
			public uint16 LangID2;
			public int32 lISOLangCode1;
			public int32 lISOLangCode2;
		}
		[CRepr]
		public struct PIDListSpanningEvent
		{
			public uint16 wPIDCount;
			public uint32[0] pulPIDs;
		}
		[CRepr, Packed(1)]
		public struct RATING_ATTRIBUTE
		{
			public uint32 rating_attribute_id;
			public uint32 rating_attribute_value;
		}
		[CRepr, Packed(1)]
		public struct RATING_SYSTEM
		{
			public Guid rating_system_id;
			public uint8 _bitfield;
			public uint8[3] country_code;
			public uint32 rating_attribute_count;
			public RATING_ATTRIBUTE* lpratingattrib;
		}
		[CRepr, Packed(1)]
		public struct RATING_INFO
		{
			public uint32 rating_system_count;
			public RATING_SYSTEM* lpratingsystem;
		}
		[CRepr, Packed(1)]
		public struct PBDAParentalControl
		{
			public uint32 rating_system_count;
			public RATING_SYSTEM* rating_systems;
		}
		[CRepr]
		public struct DvbParentalRatingParam
		{
			public CHAR[4] szCountryCode;
			public uint8 bRating;
		}
		[CRepr]
		public struct DvbParentalRatingDescriptor
		{
			public uint32 ulNumParams;
			public DvbParentalRatingParam[0] pParams;
		}
		[CRepr]
		public struct KSPROPERTY_BDA_RF_TUNER_CAPS_S
		{
			public KSP_NODE Property;
			public uint32 Mode;
			public uint32 AnalogStandardsSupported;
			public uint32 DigitalStandardsSupported;
			public uint32 MinFrequency;
			public uint32 MaxFrequency;
			public uint32 SettlingTime;
			public uint32 AnalogSensingRange;
			public uint32 DigitalSensingRange;
			public uint32 MilliSecondsPerMHz;
		}
		[CRepr]
		public struct KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S
		{
			public KSP_NODE Property;
			public uint32 CurrentFrequency;
			public uint32 FrequencyRangeMin;
			public uint32 FrequencyRangeMax;
			public uint32 MilliSecondsLeft;
		}
		[CRepr]
		public struct KSPROPERTY_BDA_RF_TUNER_STANDARD_S
		{
			public KSP_NODE Property;
			public BDA_SignalType SignalType;
			public uint32 SignalStandard;
		}
		[CRepr]
		public struct KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S
		{
			public KSP_NODE Property;
			public BOOL AutoDetect;
		}
		[CRepr]
		public struct KSEVENTDATA_BDA_RF_TUNER_SCAN_S
		{
			public KSEVENTDATA EventData;
			public uint32 StartFrequency;
			public uint32 EndFrequency;
			public BDA_LockType LockRequested;
		}
		[CRepr, Packed(1)]
		public struct PID_BITS
		{
			public uint16 _bitfield;
		}
		[CRepr, Packed(1)]
		public struct MPEG_HEADER_BITS
		{
			public uint16 _bitfield;
		}
		[CRepr]
		public struct MPEG_HEADER_VERSION_BITS
		{
			public uint8 _bitfield;
		}
		[CRepr, Packed(1)]
		public struct MPEG1WAVEFORMAT
		{
			public WAVEFORMATEX wfx;
			public uint16 fwHeadLayer;
			public uint32 dwHeadBitrate;
			public uint16 fwHeadMode;
			public uint16 fwHeadModeExt;
			public uint16 wHeadEmphasis;
			public uint16 fwHeadFlags;
			public uint32 dwPTSLow;
			public uint32 dwPTSHigh;
		}
		[CRepr, Packed(1)]
		public struct MPEGLAYER3WAVEFORMAT
		{
			public WAVEFORMATEX wfx;
			public uint16 wID;
			public MPEGLAYER3WAVEFORMAT_FLAGS fdwFlags;
			public uint16 nBlockSize;
			public uint16 nFramesPerBlock;
			public uint16 nCodecDelay;
		}
		[CRepr, Packed(1)]
		public struct HEAACWAVEINFO
		{
			public WAVEFORMATEX wfx;
			public uint16 wPayloadType;
			public uint16 wAudioProfileLevelIndication;
			public uint16 wStructType;
			public uint16 wReserved1;
			public uint32 dwReserved2;
		}
		[CRepr]
		public struct HEAACWAVEFORMAT
		{
			public HEAACWAVEINFO wfInfo;
			public uint8[0] pbAudioSpecificConfig;
		}
		[CRepr]
		public struct DXVA_COPPSetProtectionLevelCmdData
		{
			public uint32 ProtType;
			public uint32 ProtLevel;
			public uint32 ExtendedInfoChangeMask;
			public uint32 ExtendedInfoData;
		}
		[CRepr]
		public struct DXVA_COPPSetSignalingCmdData
		{
			public uint32 ActiveTVProtectionStandard;
			public uint32 AspectRatioChangeMask1;
			public uint32 AspectRatioData1;
			public uint32 AspectRatioChangeMask2;
			public uint32 AspectRatioData2;
			public uint32 AspectRatioChangeMask3;
			public uint32 AspectRatioData3;
			public uint32[4] ExtendedInfoChangeMask;
			public uint32[4] ExtendedInfoData;
			public uint32 Reserved;
		}
		[CRepr]
		public struct DXVA_COPPStatusData
		{
			public Guid rApp;
			public uint32 dwFlags;
			public uint32 dwData;
			public uint32 ExtendedInfoValidMask;
			public uint32 ExtendedInfoData;
		}
		[CRepr]
		public struct DXVA_COPPStatusDisplayData
		{
			public Guid rApp;
			public uint32 dwFlags;
			public uint32 DisplayWidth;
			public uint32 DisplayHeight;
			public uint32 Format;
			public uint32 d3dFormat;
			public uint32 FreqNumerator;
			public uint32 FreqDenominator;
		}
		[CRepr]
		public struct DXVA_COPPStatusHDCPKeyData
		{
			public Guid rApp;
			public uint32 dwFlags;
			public uint32 dwHDCPFlags;
			public Guid BKey;
			public Guid Reserved1;
			public Guid Reserved2;
		}
		[CRepr]
		public struct DXVA_COPPStatusSignalingCmdData
		{
			public Guid rApp;
			public uint32 dwFlags;
			public uint32 AvailableTVProtectionStandards;
			public uint32 ActiveTVProtectionStandard;
			public uint32 TVType;
			public uint32 AspectRatioValidMask1;
			public uint32 AspectRatioData1;
			public uint32 AspectRatioValidMask2;
			public uint32 AspectRatioData2;
			public uint32 AspectRatioValidMask3;
			public uint32 AspectRatioData3;
			public uint32[4] ExtendedInfoValidMask;
			public uint32[4] ExtendedInfoData;
		}
		
		// --- COM Class IDs ---
		
		public const Guid CLSID_FilgraphManager = .(0xe436ebb3, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
		public const Guid CLSID_SystemTuningSpaces = .(0xd02aac50, 0x027e, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
		public const Guid CLSID_TuningSpace = .(0x5ffdc5e6, 0xb83a, 0x4b55, 0xb6, 0xe8, 0xc6, 0x9e, 0x76, 0x5f, 0xe9, 0xdb);
		public const Guid CLSID_ChannelIDTuningSpace = .(0xcc829a2f, 0x3365, 0x463f, 0xaf, 0x13, 0x81, 0xdb, 0xb6, 0xf3, 0xa5, 0x55);
		public const Guid CLSID_ATSCTuningSpace = .(0xa2e30750, 0x6c3d, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_DigitalCableTuningSpace = .(0xd9bb4cee, 0xb87a, 0x47f1, 0xac, 0x92, 0xb0, 0x8d, 0x9c, 0x78, 0x13, 0xfc);
		public const Guid CLSID_AnalogRadioTuningSpace = .(0x8a674b4c, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_AuxInTuningSpace = .(0xf9769a06, 0x7aca, 0x4e39, 0x9c, 0xfb, 0x97, 0xbb, 0x35, 0xf0, 0xe7, 0x7e);
		public const Guid CLSID_AnalogTVTuningSpace = .(0x8a674b4d, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_DVBTuningSpace = .(0xc6b14b32, 0x76aa, 0x4a86, 0xa7, 0xac, 0x5c, 0x79, 0xaa, 0xf5, 0x8d, 0xa7);
		public const Guid CLSID_DVBSTuningSpace = .(0xb64016f3, 0xc9a2, 0x4066, 0x96, 0xf0, 0xbd, 0x95, 0x63, 0x31, 0x47, 0x26);
		public const Guid CLSID_ComponentTypes = .(0xa1a2b1c4, 0x0e3a, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
		public const Guid CLSID_ComponentType = .(0x823535a0, 0x0318, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
		public const Guid CLSID_LanguageComponentType = .(0x1be49f30, 0x0e1b, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
		public const Guid CLSID_MPEG2ComponentType = .(0x418008f3, 0xcf67, 0x4668, 0x96, 0x28, 0x10, 0xdc, 0x52, 0xbe, 0x1d, 0x08);
		public const Guid CLSID_ATSCComponentType = .(0xa8dcf3d5, 0x0780, 0x4ef4, 0x8a, 0x83, 0x2c, 0xff, 0xaa, 0xcb, 0x8a, 0xce);
		public const Guid CLSID_Components = .(0x809b6661, 0x94c4, 0x49e6, 0xb6, 0xec, 0x3f, 0x0f, 0x86, 0x22, 0x15, 0xaa);
		public const Guid CLSID_Component = .(0x59dc47a8, 0x116c, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
		public const Guid CLSID_MPEG2Component = .(0x055cb2d7, 0x2969, 0x45cd, 0x91, 0x4b, 0x76, 0x89, 0x07, 0x22, 0xf1, 0x12);
		public const Guid CLSID_AnalogAudioComponentType = .(0x28ab0005, 0xe845, 0x4ffa, 0xaa, 0x9b, 0xf4, 0x66, 0x52, 0x36, 0x14, 0x1c);
		public const Guid CLSID_TuneRequest = .(0xb46e0d38, 0xab35, 0x4a06, 0xa1, 0x37, 0x70, 0x57, 0x6b, 0x01, 0xb3, 0x9f);
		public const Guid CLSID_ChannelIDTuneRequest = .(0x3a9428a7, 0x31a4, 0x45e9, 0x9e, 0xfb, 0xe0, 0x55, 0xbf, 0x7b, 0xb3, 0xdb);
		public const Guid CLSID_ChannelTuneRequest = .(0x0369b4e5, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_ATSCChannelTuneRequest = .(0x0369b4e6, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_DigitalCableTuneRequest = .(0x26ec0b63, 0xaa90, 0x458a, 0x8d, 0xf4, 0x56, 0x59, 0xf2, 0xc8, 0xa1, 0x8a);
		public const Guid CLSID_MPEG2TuneRequest = .(0x0955ac62, 0xbf2e, 0x4cba, 0xa2, 0xb9, 0xa6, 0x3f, 0x77, 0x2d, 0x46, 0xcf);
		public const Guid CLSID_MPEG2TuneRequestFactory = .(0x2c63e4eb, 0x4cea, 0x41b8, 0x91, 0x9c, 0xe9, 0x47, 0xea, 0x19, 0xa7, 0x7c);
		public const Guid CLSID_Locator = .(0x0888c883, 0xac4f, 0x4943, 0xb5, 0x16, 0x2c, 0x38, 0xd9, 0xb3, 0x45, 0x62);
		public const Guid CLSID_DigitalLocator = .(0x6e50cc0d, 0xc19b, 0x4bf6, 0x81, 0x0b, 0x5b, 0xd6, 0x07, 0x61, 0xf5, 0xcc);
		public const Guid CLSID_AnalogLocator = .(0x49638b91, 0x48ab, 0x48b7, 0xa4, 0x7a, 0x7d, 0x0e, 0x75, 0xa0, 0x8e, 0xde);
		public const Guid CLSID_ATSCLocator = .(0x8872ff1b, 0x98fa, 0x4d7a, 0x8d, 0x93, 0xc9, 0xf1, 0x05, 0x5f, 0x85, 0xbb);
		public const Guid CLSID_DigitalCableLocator = .(0x03c06416, 0xd127, 0x407a, 0xab, 0x4c, 0xfd, 0xd2, 0x79, 0xab, 0xbe, 0x5d);
		public const Guid CLSID_DVBTLocator = .(0x9cd64701, 0xbdf3, 0x4d14, 0x8e, 0x03, 0xf1, 0x29, 0x83, 0xd8, 0x66, 0x64);
		public const Guid CLSID_DVBTLocator2 = .(0xefe3fa02, 0x45d7, 0x4920, 0xbe, 0x96, 0x53, 0xfa, 0x7f, 0x35, 0xb0, 0xe6);
		public const Guid CLSID_DVBSLocator = .(0x1df7d126, 0x4050, 0x47f0, 0xa7, 0xcf, 0x4c, 0x4c, 0xa9, 0x24, 0x13, 0x33);
		public const Guid CLSID_DVBCLocator = .(0xc531d9fd, 0x9685, 0x4028, 0x8b, 0x68, 0x6e, 0x12, 0x32, 0x07, 0x9f, 0x1e);
		public const Guid CLSID_ISDBSLocator = .(0x6504afed, 0xa629, 0x455c, 0xa7, 0xf1, 0x04, 0x96, 0x4d, 0xea, 0x5c, 0xc4);
		public const Guid CLSID_DVBTuneRequest = .(0x15d6504a, 0x5494, 0x499c, 0x88, 0x6c, 0x97, 0x3c, 0x9e, 0x53, 0xb9, 0xf1);
		public const Guid CLSID_CreatePropBagOnRegKey = .(0x8a674b49, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_BroadcastEventService = .(0x0b3ffb92, 0x0919, 0x4934, 0x9d, 0x5b, 0x61, 0x9c, 0x71, 0x9d, 0x02, 0x02);
		public const Guid CLSID_TunerMarshaler = .(0x6438570b, 0x0c08, 0x4a25, 0x95, 0x04, 0x80, 0x12, 0xbb, 0x4d, 0x50, 0xcf);
		public const Guid CLSID_PersistTuneXmlUtility = .(0xe77026b0, 0xb97f, 0x4cbb, 0xb7, 0xfb, 0xf4, 0xf0, 0x3a, 0xd6, 0x9f, 0x11);
		public const Guid CLSID_ESEventService = .(0xc20447fc, 0xec60, 0x475e, 0x81, 0x3f, 0xd2, 0xb0, 0xa6, 0xde, 0xce, 0xfe);
		public const Guid CLSID_ESEventFactory = .(0x8e8a07da, 0x71f8, 0x40c1, 0xa9, 0x29, 0x5e, 0x3a, 0x86, 0x8a, 0xc2, 0xc6);
		public const Guid CLSID_XDSToRat = .(0xc5c5c5f0, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);
		public const Guid CLSID_EvalRat = .(0xc5c5c5f1, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);
		public const Guid CLSID_ETFilter = .(0xc4c4c4f1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_DTFilter = .(0xc4c4c4f2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_XDSCodec = .(0xc4c4c4f3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_CXDSData = .(0xc4c4c4f4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
		public const Guid CLSID_MSVidAnalogTunerDevice = .(0x1c15d484, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidBDATunerDevice = .(0xa2e3074e, 0x6c3d, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidFilePlaybackDevice = .(0x37b0353c, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidWebDVD = .(0x011b3619, 0xfe63, 0x4814, 0x8a, 0x84, 0x15, 0xa1, 0x94, 0xce, 0x9c, 0xe3);
		public const Guid CLSID_MSVidWebDVDAdm = .(0xfa7c375b, 0x66a7, 0x4280, 0x87, 0x9d, 0xfd, 0x45, 0x9c, 0x84, 0xbb, 0x02);
		public const Guid CLSID_MSVidVideoRenderer = .(0x37b03543, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidVMR9 = .(0x24dc3975, 0x09bf, 0x4231, 0x86, 0x55, 0x3e, 0xe7, 0x1f, 0x43, 0x83, 0x7d);
		public const Guid CLSID_MSVidEVR = .(0xc45268a2, 0xfa81, 0x4e19, 0xb1, 0xe3, 0x72, 0xed, 0xbd, 0x60, 0xae, 0xda);
		public const Guid CLSID_MSVidAudioRenderer = .(0x37b03544, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidGenericSink = .(0x4a5869cf, 0x929d, 0x4040, 0xae, 0x03, 0xfc, 0xaf, 0xc5, 0xb9, 0xcd, 0x42);
		public const Guid CLSID_MSVidStreamBufferSink = .(0x9e77aac4, 0x35e5, 0x42a1, 0xbd, 0xc2, 0x8f, 0x3f, 0xf3, 0x99, 0x84, 0x7c);
		public const Guid CLSID_MSVidStreamBufferSource = .(0xad8e510d, 0x217f, 0x409b, 0x80, 0x76, 0x29, 0xc5, 0xe7, 0x3b, 0x98, 0xe8);
		public const Guid CLSID_MSVidStreamBufferV2Source = .(0xfd351ea1, 0x4173, 0x4af4, 0x82, 0x1d, 0x80, 0xd4, 0xae, 0x97, 0x90, 0x48);
		public const Guid CLSID_MSVidEncoder = .(0xbb530c63, 0xd9df, 0x4b49, 0x94, 0x39, 0x63, 0x45, 0x39, 0x62, 0xe5, 0x98);
		public const Guid CLSID_MSVidITVCapture = .(0x5740a302, 0xef0b, 0x45ce, 0xbf, 0x3b, 0x44, 0x70, 0xa1, 0x4a, 0x89, 0x80);
		public const Guid CLSID_MSVidITVPlayback = .(0x9e797ed0, 0x5253, 0x4243, 0xa9, 0xb7, 0xbd, 0x06, 0xc5, 0x8f, 0x8e, 0xf3);
		public const Guid CLSID_MSVidCCA = .(0x86151827, 0xe47b, 0x45ee, 0x84, 0x21, 0xd1, 0x0e, 0x6e, 0x69, 0x09, 0x79);
		public const Guid CLSID_MSVidClosedCaptioning = .(0x7f9cb14d, 0x48e4, 0x43b6, 0x93, 0x46, 0x1a, 0xeb, 0xc3, 0x9c, 0x64, 0xd3);
		public const Guid CLSID_MSVidClosedCaptioningSI = .(0x92ed88bf, 0x879e, 0x448f, 0xb6, 0xb6, 0xa3, 0x85, 0xbc, 0xeb, 0x84, 0x6d);
		public const Guid CLSID_MSVidDataServices = .(0x334125c0, 0x77e5, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidXDS = .(0x0149eedf, 0xd08f, 0x4142, 0x8d, 0x73, 0xd2, 0x39, 0x03, 0xd2, 0x1e, 0x90);
		public const Guid CLSID_MSVidAnalogCaptureToDataServices = .(0xc5702cd6, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidDataServicesToStreamBufferSink = .(0x38f03426, 0xe83b, 0x4e68, 0xb6, 0x5b, 0xdc, 0xae, 0x73, 0x30, 0x48, 0x38);
		public const Guid CLSID_MSVidDataServicesToXDS = .(0x0429ec6e, 0x1144, 0x4bed, 0xb8, 0x8b, 0x2f, 0xb9, 0x89, 0x9a, 0x4a, 0x3d);
		public const Guid CLSID_MSVidAnalogCaptureToXDS = .(0x3540d440, 0x5b1d, 0x49cb, 0x82, 0x1a, 0xe8, 0x4b, 0x8c, 0xf0, 0x65, 0xa7);
		public const Guid CLSID_MSVidCtl = .(0xb0edf163, 0x910a, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidInputDevices = .(0xc5702ccc, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidOutputDevices = .(0xc5702ccd, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidVideoRendererDevices = .(0xc5702cce, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidAudioRendererDevices = .(0xc5702ccf, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidFeatures = .(0xc5702cd0, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidGenericComposite = .(0x2764bce5, 0xcc39, 0x11d2, 0xb6, 0x39, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidAnalogCaptureToOverlayMixer = .(0xe18af75a, 0x08af, 0x11d3, 0xb6, 0x4a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_MSVidWebDVDToVideoRenderer = .(0x267db0b3, 0x55e3, 0x4902, 0x94, 0x9b, 0xdf, 0x8f, 0x5c, 0xec, 0x01, 0x91);
		public const Guid CLSID_MSVidWebDVDToAudioRenderer = .(0x8d04238e, 0x9fd1, 0x41c6, 0x8d, 0xe3, 0x9e, 0x1e, 0xe3, 0x09, 0xe9, 0x35);
		public const Guid CLSID_MSVidMPEG2DecoderToClosedCaptioning = .(0x6ad28ee1, 0x5002, 0x4e71, 0xaa, 0xf7, 0xbd, 0x07, 0x79, 0x07, 0xb1, 0xa4);
		public const Guid CLSID_MSVidAnalogCaptureToStreamBufferSink = .(0x9f50e8b1, 0x9530, 0x4ddc, 0x82, 0x5e, 0x1a, 0xf8, 0x1d, 0x47, 0xae, 0xd6);
		public const Guid CLSID_MSVidDigitalCaptureToStreamBufferSink = .(0xabe40035, 0x27c3, 0x4a2f, 0x81, 0x53, 0x66, 0x24, 0x47, 0x16, 0x08, 0xaf);
		public const Guid CLSID_MSVidITVToStreamBufferSink = .(0x92b94828, 0x1af7, 0x4e6e, 0x9e, 0xbf, 0x77, 0x06, 0x57, 0xf7, 0x7a, 0xf5);
		public const Guid CLSID_MSVidCCAToStreamBufferSink = .(0x3ef76d68, 0x8661, 0x4843, 0x8b, 0x8f, 0xc3, 0x71, 0x63, 0xd8, 0xc9, 0xce);
		public const Guid CLSID_MSVidEncoderToStreamBufferSink = .(0xa0b9b497, 0xafbc, 0x45ad, 0xa8, 0xa6, 0x9b, 0x07, 0x7c, 0x40, 0xd4, 0xf2);
		public const Guid CLSID_MSVidFilePlaybackToVideoRenderer = .(0xb401c5eb, 0x8457, 0x427f, 0x84, 0xea, 0xa4, 0xd2, 0x36, 0x33, 0x64, 0xb0);
		public const Guid CLSID_MSVidFilePlaybackToAudioRenderer = .(0xcc23f537, 0x18d4, 0x4ece, 0x93, 0xbd, 0x20, 0x7a, 0x84, 0x72, 0x69, 0x79);
		public const Guid CLSID_MSVidAnalogTVToEncoder = .(0x28953661, 0x0231, 0x41db, 0x89, 0x86, 0x21, 0xff, 0x43, 0x88, 0xee, 0x9b);
		public const Guid CLSID_MSVidStreamBufferSourceToVideoRenderer = .(0x3c4708dc, 0xb181, 0x46a8, 0x8d, 0xa8, 0x4a, 0xb0, 0x37, 0x17, 0x58, 0xcd);
		public const Guid CLSID_MSVidAnalogCaptureToCCA = .(0x942b7909, 0xa28e, 0x49a1, 0xa2, 0x07, 0x34, 0xeb, 0xcb, 0xcb, 0x4b, 0x3b);
		public const Guid CLSID_MSVidDigitalCaptureToCCA = .(0x73d14237, 0xb9db, 0x4efa, 0xa6, 0xdd, 0x84, 0x35, 0x04, 0x21, 0xfb, 0x2f);
		public const Guid CLSID_MSVidDigitalCaptureToITV = .(0x5d8e73f7, 0x4989, 0x4ac8, 0x8a, 0x98, 0x39, 0xba, 0x0d, 0x32, 0x53, 0x02);
		public const Guid CLSID_MSVidSBESourceToITV = .(0x2291478c, 0x5ee3, 0x4bef, 0xab, 0x5d, 0xb5, 0xff, 0x2c, 0xf5, 0x83, 0x52);
		public const Guid CLSID_MSVidSBESourceToCC = .(0x9193a8f9, 0x0cba, 0x400e, 0xaa, 0x97, 0xeb, 0x47, 0x09, 0x16, 0x45, 0x76);
		public const Guid CLSID_MSVidSBESourceToGenericSink = .(0x991da7e5, 0x953f, 0x435b, 0xbe, 0x5e, 0xb9, 0x2a, 0x05, 0xed, 0xfc, 0x42);
		public const Guid CLSID_MSVidCCToVMR = .(0xc4bf2784, 0xae00, 0x41ba, 0x98, 0x28, 0x9c, 0x95, 0x3b, 0xd3, 0xc5, 0x4a);
		public const Guid CLSID_MSVidCCToAR = .(0xd76334ca, 0xd89e, 0x4baf, 0x86, 0xab, 0xdd, 0xb5, 0x93, 0x72, 0xaf, 0xc2);
		public const Guid CLSID_MSEventBinder = .(0x577faa18, 0x4518, 0x445e, 0x8f, 0x70, 0x14, 0x73, 0xf8, 0xcf, 0x4b, 0xa4);
		public const Guid CLSID_MSVidStreamBufferRecordingControl = .(0xcaafdd83, 0xcefc, 0x4e3d, 0xba, 0x03, 0x17, 0x5f, 0x17, 0xa2, 0x4f, 0x91);
		public const Guid CLSID_MSVidRect = .(0xcb4276e6, 0x7d5f, 0x4cf1, 0x97, 0x27, 0x62, 0x9c, 0x5e, 0x6d, 0xb6, 0xae);
		public const Guid CLSID_MSVidDevice = .(0x6e40476f, 0x9c49, 0x4c3e, 0x8b, 0xb9, 0x85, 0x87, 0x95, 0x8e, 0xff, 0x74);
		public const Guid CLSID_MSVidDevice2 = .(0x30997f7d, 0xb3b5, 0x4a1c, 0x98, 0x3a, 0x1f, 0xe8, 0x09, 0x8c, 0xb7, 0x7d);
		public const Guid CLSID_MSVidInputDevice = .(0xac1972f2, 0x138a, 0x4ca3, 0x90, 0xda, 0xae, 0x51, 0x11, 0x2e, 0xda, 0x28);
		public const Guid CLSID_MSVidVideoInputDevice = .(0x95f4820b, 0xbb3a, 0x4e2d, 0xbc, 0x64, 0x5b, 0x81, 0x7b, 0xc2, 0xc3, 0x0e);
		public const Guid CLSID_MSVidVideoPlaybackDevice = .(0x1990d634, 0x1a5e, 0x4071, 0xa3, 0x4a, 0x53, 0xaa, 0xff, 0xce, 0x9f, 0x36);
		public const Guid CLSID_MSVidFeature = .(0x7748530b, 0xc08a, 0x47ea, 0xb2, 0x4c, 0xbe, 0x86, 0x95, 0xff, 0x40, 0x5f);
		public const Guid CLSID_MSVidOutput = .(0x87eb890d, 0x03ad, 0x4e9d, 0x98, 0x66, 0x37, 0x6e, 0x5e, 0xc5, 0x72, 0xed);
		public const Guid CLSID_SectionList = .(0x73da5d04, 0x4347, 0x45d3, 0xa9, 0xdc, 0xfa, 0xe9, 0xdd, 0xbe, 0x55, 0x8d);
		public const Guid CLSID_Mpeg2Stream = .(0xf91d96c7, 0x8509, 0x4d0b, 0xab, 0x26, 0xa0, 0xdd, 0x10, 0x90, 0x4b, 0xb7);
		public const Guid CLSID_Mpeg2Data = .(0xc666e115, 0xbb62, 0x4027, 0xa1, 0x13, 0x82, 0xd6, 0x43, 0xfe, 0x2d, 0x99);
		public const Guid CLSID_Mpeg2DataLib = .(0xdbaf6c1b, 0xb6a4, 0x4898, 0xae, 0x65, 0x20, 0x4f, 0x0d, 0x95, 0x09, 0xa1);
		public const Guid CLSID_TIFLoad = .(0x14eb8748, 0x1753, 0x4393, 0x95, 0xae, 0x4f, 0x7e, 0x7a, 0x87, 0xaa, 0xd6);
		public const Guid CLSID_EVENTID_TuningChanging = .(0x83183c03, 0xc09e, 0x45c4, 0xa7, 0x19, 0x80, 0x7a, 0x94, 0x95, 0x2b, 0xf9);
		public const Guid CLSID_EVENTID_TuningChanged = .(0x9d7e6235, 0x4b7d, 0x425d, 0xa6, 0xd1, 0xd7, 0x17, 0xc3, 0x3b, 0x9c, 0x4c);
		public const Guid CLSID_EVENTID_CandidatePostTuneData = .(0x9f02d3d0, 0x9f06, 0x4369, 0x9f, 0x1e, 0x3a, 0xd6, 0xca, 0x19, 0x80, 0x7e);
		public const Guid CLSID_EVENTID_CADenialCountChanged = .(0x2a65c528, 0x2249, 0x4070, 0xac, 0x16, 0x00, 0x39, 0x0c, 0xdf, 0xb2, 0xdd);
		public const Guid CLSID_EVENTID_SignalStatusChanged = .(0x6d9cfaf2, 0x702d, 0x4b01, 0x8d, 0xff, 0x68, 0x92, 0xad, 0x20, 0xd1, 0x91);
		public const Guid CLSID_EVENTID_NewSignalAcquired = .(0xc87ec52d, 0xcd18, 0x404a, 0xa0, 0x76, 0xc0, 0x2a, 0x27, 0x3d, 0x3d, 0xe7);
		public const Guid CLSID_EVENTID_EASMessageReceived = .(0xd10df9d5, 0xc261, 0x4b85, 0x9e, 0x8a, 0x51, 0x7b, 0x32, 0x99, 0xca, 0xb2);
		public const Guid CLSID_EVENTID_PSITable = .(0x1b9c3703, 0xd447, 0x4e16, 0x97, 0xbb, 0x01, 0x79, 0x9f, 0xc0, 0x31, 0xed);
		public const Guid CLSID_EVENTID_ServiceTerminated = .(0x0a1d591c, 0xe0d2, 0x4f8e, 0x89, 0x60, 0x23, 0x35, 0xbe, 0xf4, 0x5c, 0xcb);
		public const Guid CLSID_EVENTID_CardStatusChanged = .(0xa265faea, 0xf874, 0x4b38, 0x9f, 0xf7, 0xc5, 0x3d, 0x02, 0x96, 0x99, 0x96);
		public const Guid CLSID_EVENTID_DRMParingStatusChanged = .(0x000906f5, 0xf0d1, 0x41d6, 0xa7, 0xdf, 0x40, 0x28, 0x69, 0x76, 0x69, 0xf6);
		public const Guid CLSID_EVENTID_DRMParingStepComplete = .(0x5b2ebf78, 0xb752, 0x4420, 0xb4, 0x1e, 0xa4, 0x72, 0xdc, 0x95, 0x82, 0x8e);
		public const Guid CLSID_EVENTID_MMIMessage = .(0x052c29af, 0x09a4, 0x4b93, 0x89, 0x0f, 0xbd, 0x6a, 0x34, 0x89, 0x68, 0xa4);
		public const Guid CLSID_EVENTID_EntitlementChanged = .(0x9071ad5d, 0x2359, 0x4c95, 0x86, 0x94, 0xaf, 0xa8, 0x1d, 0x70, 0xbf, 0xd5);
		public const Guid CLSID_EVENTID_STBChannelNumber = .(0x17c4d730, 0xd0f0, 0x413a, 0x8c, 0x99, 0x50, 0x04, 0x69, 0xde, 0x35, 0xad);
		public const Guid CLSID_EVENTID_BDAEventingServicePendingEvent = .(0x5ca51711, 0x5ddc, 0x41a6, 0x94, 0x30, 0xe4, 0x1b, 0x8b, 0x3b, 0xbc, 0x5b);
		public const Guid CLSID_EVENTID_BDAConditionalAccessTAG = .(0xefc3a459, 0xae8b, 0x4b4a, 0x8f, 0xe9, 0x79, 0xa0, 0xd0, 0x97, 0xf3, 0xea);
		public const Guid CLSID_EVENTTYPE_CASDescrambleFailureEvent = .(0xb2127d42, 0x7be5, 0x4f4b, 0x91, 0x30, 0x66, 0x79, 0x89, 0x9f, 0x4f, 0x4b);
		public const Guid CLSID_EVENTID_CASFailureSpanningEvent = .(0xead831ae, 0x5529, 0x4d1f, 0xaf, 0xce, 0x0d, 0x8c, 0xd1, 0x25, 0x7d, 0x30);
		public const Guid CLSID_EVENTID_ChannelChangeSpanningEvent = .(0x9067c5e5, 0x4c5c, 0x4205, 0x86, 0xc8, 0x7a, 0xfe, 0x20, 0xfe, 0x1e, 0xfa);
		public const Guid CLSID_EVENTID_ChannelTypeSpanningEvent = .(0x72ab1d51, 0x87d2, 0x489b, 0xba, 0x11, 0x0e, 0x08, 0xdc, 0x21, 0x02, 0x43);
		public const Guid CLSID_EVENTID_ChannelInfoSpanningEvent = .(0x41f36d80, 0x4132, 0x4cc2, 0xb1, 0x21, 0x01, 0xa4, 0x32, 0x19, 0xd8, 0x1b);
		public const Guid CLSID_EVENTID_RRTSpanningEvent = .(0xf6cfc8f4, 0xda93, 0x4f2f, 0xbf, 0xf8, 0xba, 0x1e, 0xe6, 0xfc, 0xa3, 0xa2);
		public const Guid CLSID_EVENTID_CSDescriptorSpanningEvent = .(0xefe779d9, 0x97f0, 0x4786, 0x80, 0x0d, 0x95, 0xcf, 0x50, 0x5d, 0xdc, 0x66);
		public const Guid CLSID_EVENTID_CtxADescriptorSpanningEvent = .(0x3ab4a2e6, 0x4247, 0x4b34, 0x89, 0x6c, 0x30, 0xaf, 0xa5, 0xd2, 0x1c, 0x24);
		public const Guid CLSID_EVENTID_DVBScramblingControlSpanningEvent = .(0x4bd4e1c4, 0x90a1, 0x4109, 0x82, 0x36, 0x27, 0xf0, 0x0e, 0x7d, 0xcc, 0x5b);
		public const Guid CLSID_EVENTID_SignalAndServiceStatusSpanningEvent = .(0x8068c5cb, 0x3c04, 0x492b, 0xb4, 0x7d, 0x03, 0x08, 0x82, 0x0d, 0xce, 0x51);
		public const Guid CLSID_EVENTID_EmmMessageSpanningEvent = .(0x6bf00268, 0x4f7e, 0x4294, 0xaa, 0x87, 0xe9, 0xe9, 0x53, 0xe4, 0x3f, 0x14);
		public const Guid CLSID_EVENTID_AudioTypeSpanningEvent = .(0x501cbfbe, 0xb849, 0x42ce, 0x9b, 0xe9, 0x3d, 0xb8, 0x69, 0xfb, 0x82, 0xb3);
		public const Guid CLSID_EVENTID_StreamTypeSpanningEvent = .(0x82af2ebc, 0x30a6, 0x4264, 0xa8, 0x0b, 0xad, 0x2e, 0x13, 0x72, 0xac, 0x60);
		public const Guid CLSID_EVENTID_ARIBcontentSpanningEvent = .(0x3a954083, 0x93d0, 0x463e, 0x90, 0xb2, 0x07, 0x42, 0xc4, 0x96, 0xed, 0xf0);
		public const Guid CLSID_EVENTID_LanguageSpanningEvent = .(0xe292666d, 0x9c02, 0x448d, 0xaa, 0x8d, 0x78, 0x1a, 0x93, 0xfd, 0xc3, 0x95);
		public const Guid CLSID_EVENTID_DualMonoSpanningEvent = .(0xa9a29b56, 0xa84b, 0x488c, 0x89, 0xd5, 0x0d, 0x4e, 0x76, 0x57, 0xc8, 0xce);
		public const Guid CLSID_EVENTID_PIDListSpanningEvent = .(0x47fc8f65, 0xe2bb, 0x4634, 0x9c, 0xef, 0xfd, 0xbf, 0xe6, 0x26, 0x1d, 0x5c);
		public const Guid CLSID_EVENTID_AudioDescriptorSpanningEvent = .(0x107bd41c, 0xa6da, 0x4691, 0x83, 0x69, 0x11, 0xb2, 0xcd, 0xaa, 0x28, 0x8e);
		public const Guid CLSID_EVENTID_SubtitleSpanningEvent = .(0x5dcec048, 0xd0b9, 0x4163, 0x87, 0x2c, 0x4f, 0x32, 0x22, 0x3b, 0xe8, 0x8a);
		public const Guid CLSID_EVENTID_TeletextSpanningEvent = .(0x9599d950, 0x5f33, 0x4617, 0xaf, 0x7c, 0x1e, 0x54, 0xb5, 0x10, 0xda, 0xa3);
		public const Guid CLSID_EVENTID_StreamIDSpanningEvent = .(0xcaf1ab68, 0xe153, 0x4d41, 0xa6, 0xb3, 0xa7, 0xc9, 0x98, 0xdb, 0x75, 0xee);
		public const Guid CLSID_EVENTID_PBDAParentalControlEvent = .(0xf947aa85, 0xfb52, 0x48e8, 0xb9, 0xc5, 0xe1, 0xe1, 0xf4, 0x11, 0xa5, 0x1a);
		public const Guid CLSID_EVENTID_TuneFailureEvent = .(0xd97287b2, 0x2dfd, 0x436a, 0x94, 0x85, 0x99, 0xd7, 0xd4, 0xab, 0x5a, 0x69);
		public const Guid CLSID_EVENTID_TuneFailureSpanningEvent = .(0x6f8aa455, 0x5ee1, 0x48ab, 0xa2, 0x7c, 0x4c, 0x8d, 0x70, 0xb9, 0xae, 0xba);
		public const Guid CLSID_EVENTID_DvbParentalRatingDescriptor = .(0x2a67a58d, 0xeca5, 0x4eac, 0xab, 0xcb, 0xe7, 0x34, 0xd3, 0x77, 0x6d, 0x0a);
		public const Guid CLSID_EVENTID_DFNWithNoActualAVData = .(0xf5689ffe, 0x55f9, 0x4bb3, 0x96, 0xbe, 0xae, 0x97, 0x1c, 0x63, 0xba, 0xe0);
		public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_ANTENNA = .(0x71985f41, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT = .(0xf4aeb342, 0x0329, 0x4fdd, 0xa8, 0xfd, 0x4a, 0xff, 0x49, 0x26, 0xc9, 0x78);
		public const Guid CLSID_KSDATAFORMAT_SPECIFIER_BDA_TRANSPORT = .(0x8deda6fd, 0xac5f, 0x4334, 0x8e, 0xcf, 0xa4, 0xba, 0x8f, 0xa7, 0xd0, 0xf0);
		public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_IF_SIGNAL = .(0x61be0b47, 0xa5eb, 0x499b, 0x9a, 0x85, 0x5b, 0x16, 0xc0, 0x7f, 0x12, 0x58);
		public const Guid CLSID_KSDATAFORMAT_TYPE_MPEG2_SECTIONS = .(0x455f176c, 0x4b06, 0x47ce, 0x9a, 0xef, 0x8c, 0xae, 0xf7, 0x3d, 0xf7, 0xb5);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_ATSC_SI = .(0xb3c7397c, 0xd303, 0x414d, 0xb3, 0x3c, 0x4e, 0xd2, 0xc9, 0xd2, 0x97, 0x33);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_DVB_SI = .(0xe9dd31a3, 0x221d, 0x4adb, 0x85, 0x32, 0x9a, 0xf3, 0x09, 0xc1, 0xa4, 0x08);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_PSIP = .(0x762e3f66, 0x336f, 0x48d1, 0xbf, 0x83, 0x2b, 0x00, 0x35, 0x2c, 0x11, 0xf0);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_OOB_PSIP = .(0x951727db, 0xd2ce, 0x4528, 0x96, 0xf6, 0x33, 0x01, 0xfa, 0xbb, 0x2d, 0xe0);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_ISDB_SI = .(0x4a2eeb99, 0x6458, 0x4538, 0xb1, 0x87, 0x04, 0x01, 0x7c, 0x41, 0x41, 0x3f);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_PBDA_TRANSPORT_RAW = .(0x0d7aed42, 0xcb9a, 0x11db, 0x97, 0x05, 0x00, 0x50, 0x56, 0xc0, 0x00, 0x08);
		public const Guid CLSID_PINNAME_BDA_TRANSPORT = .(0x78216a81, 0xcfa8, 0x493e, 0x97, 0x11, 0x36, 0xa6, 0x1c, 0x08, 0xbd, 0x9d);
		public const Guid CLSID_PINNAME_BDA_ANALOG_VIDEO = .(0x5c0c8281, 0x5667, 0x486c, 0x84, 0x82, 0x63, 0xe3, 0x1f, 0x01, 0xa6, 0xe9);
		public const Guid CLSID_PINNAME_BDA_ANALOG_AUDIO = .(0xd28a580a, 0x9b1f, 0x4b0c, 0x9c, 0x33, 0x9b, 0xf0, 0xa8, 0xea, 0x63, 0x6b);
		public const Guid CLSID_PINNAME_BDA_FM_RADIO = .(0xd2855fed, 0xb2d3, 0x4eeb, 0x9b, 0xd0, 0x19, 0x34, 0x36, 0xa2, 0xf8, 0x90);
		public const Guid CLSID_PINNAME_BDA_IF_PIN = .(0x1a9d4a42, 0xf3cd, 0x48a1, 0x9a, 0xea, 0x71, 0xde, 0x13, 0x3c, 0xbe, 0x14);
		public const Guid CLSID_PINNAME_BDA_OPENCABLE_PSIP_PIN = .(0x297bb104, 0xe5c9, 0x4ace, 0xb1, 0x23, 0x95, 0xc3, 0xcb, 0xb2, 0x4d, 0x4f);
		public const Guid CLSID_KSPROPSETID_BdaEthernetFilter = .(0x71985f43, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaIPv4Filter = .(0x71985f44, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaIPv6Filter = .(0xe1785a74, 0x2a23, 0x4fb3, 0x92, 0x45, 0xa8, 0xf8, 0x80, 0x17, 0xef, 0x33);
		public const Guid CLSID_KSPROPSETID_BdaSignalStats = .(0x1347d106, 0xcf3a, 0x428a, 0xa5, 0xcb, 0xac, 0x0d, 0x9a, 0x2a, 0x43, 0x38);
		public const Guid CLSID_KSMETHODSETID_BdaChangeSync = .(0xfd0a5af3, 0xb41d, 0x11d2, 0x9c, 0x95, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSMETHODSETID_BdaDeviceConfiguration = .(0x71985f45, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaTopology = .(0xa14ee835, 0x0a23, 0x11d3, 0x9c, 0xc7, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaPinControl = .(0x0ded49d5, 0xa8b7, 0x4d5d, 0x97, 0xa1, 0x12, 0xb0, 0xc1, 0x95, 0x87, 0x4d);
		public const Guid CLSID_KSEVENTSETID_BdaPinEvent = .(0x104781cd, 0x50bd, 0x40d5, 0x95, 0xfb, 0x08, 0x7e, 0x0e, 0x86, 0xa5, 0x91);
		public const Guid CLSID_KSPROPSETID_BdaVoidTransform = .(0x71985f46, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaNullTransform = .(0xddf15b0d, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaFrequencyFilter = .(0x71985f47, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSEVENTSETID_BdaTunerEvent = .(0xaab59e17, 0x01c9, 0x4ebf, 0x93, 0xf2, 0xfc, 0x3b, 0x79, 0xb4, 0x6f, 0x91);
		public const Guid CLSID_KSPROPSETID_BdaLNBInfo = .(0x992cf102, 0x49f9, 0x4719, 0xa6, 0x64, 0xc4, 0xf2, 0x3e, 0x24, 0x08, 0xf4);
		public const Guid CLSID_KSPROPSETID_BdaDiseqCommand = .(0xf84e2ab0, 0x3c6b, 0x45e3, 0xa0, 0xfc, 0x86, 0x69, 0xd4, 0xb8, 0x1f, 0x11);
		public const Guid CLSID_KSEVENTSETID_BdaDiseqCEvent = .(0x8b19bbf0, 0x4184, 0x43ac, 0xad, 0x3c, 0x0c, 0x88, 0x9b, 0xe4, 0xc2, 0x12);
		public const Guid CLSID_KSPROPSETID_BdaDigitalDemodulator = .(0xef30f379, 0x985b, 0x4d10, 0xb6, 0x40, 0xa7, 0x9d, 0x5e, 0x04, 0xe1, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaAutodemodulate = .(0xddf15b12, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSPROPSETID_BdaTableSection = .(0x516b99c5, 0x971c, 0x4aaf, 0xb3, 0xf3, 0xd9, 0xfd, 0xa8, 0xa1, 0x5e, 0x16);
		public const Guid CLSID_KSPROPSETID_BdaPIDFilter = .(0xd0a67d65, 0x08df, 0x4fec, 0x85, 0x33, 0xe5, 0xb5, 0x50, 0x41, 0x0b, 0x85);
		public const Guid CLSID_KSPROPSETID_BdaCA = .(0xb0693766, 0x5278, 0x4ec6, 0xb9, 0xe1, 0x3c, 0xe4, 0x05, 0x60, 0xef, 0x5a);
		public const Guid CLSID_KSEVENTSETID_BdaCAEvent = .(0x488c4ccc, 0xb768, 0x4129, 0x8e, 0xb1, 0xb0, 0x0a, 0x07, 0x1f, 0x90, 0x68);
		public const Guid CLSID_KSMETHODSETID_BdaDrmService = .(0xbff6b5bb, 0xb0ae, 0x484c, 0x9d, 0xca, 0x73, 0x52, 0x8f, 0xb0, 0xb4, 0x6e);
		public const Guid CLSID_KSMETHODSETID_BdaWmdrmSession = .(0x4be6fa3d, 0x07cd, 0x4139, 0x8b, 0x80, 0x8c, 0x18, 0xba, 0x3a, 0xec, 0x88);
		public const Guid CLSID_KSMETHODSETID_BdaWmdrmTuner = .(0x86d979cf, 0xa8a7, 0x4f94, 0xb5, 0xfb, 0x14, 0xc0, 0xac, 0xa6, 0x8f, 0xe6);
		public const Guid CLSID_KSMETHODSETID_BdaEventing = .(0xf99492da, 0x6193, 0x4eb0, 0x86, 0x90, 0x66, 0x86, 0xcb, 0xff, 0x71, 0x3e);
		public const Guid CLSID_KSEVENTSETID_BdaEvent = .(0xae7e55b2, 0x96d7, 0x4e29, 0x90, 0x8f, 0x62, 0xf9, 0x5b, 0x2a, 0x16, 0x79);
		public const Guid CLSID_KSMETHODSETID_BdaDebug = .(0x0d4a90ec, 0xc69d, 0x4ee2, 0x8c, 0x5a, 0xfb, 0x1f, 0x63, 0xa5, 0x0d, 0xa1);
		public const Guid CLSID_KSMETHODSETID_BdaTuner = .(0xb774102f, 0xac07, 0x478a, 0x82, 0x28, 0x27, 0x42, 0xd9, 0x61, 0xfa, 0x7e);
		public const Guid CLSID_KSMETHODSETID_BdaNameValueA = .(0x0c24096d, 0x5ff5, 0x47de, 0xa8, 0x56, 0x06, 0x2e, 0x58, 0x7e, 0x37, 0x27);
		public const Guid CLSID_KSMETHODSETID_BdaNameValue = .(0x36e07304, 0x9f0d, 0x4e88, 0x91, 0x18, 0xac, 0x0b, 0xa3, 0x17, 0xb7, 0xf2);
		public const Guid CLSID_KSMETHODSETID_BdaMux = .(0x942aafec, 0x4c05, 0x4c74, 0xb8, 0xeb, 0x87, 0x06, 0xc2, 0xa4, 0x94, 0x3f);
		public const Guid CLSID_KSMETHODSETID_BdaScanning = .(0x12eb49df, 0x6249, 0x47f3, 0xb1, 0x90, 0xe2, 0x1e, 0x6e, 0x2f, 0x8a, 0x9c);
		public const Guid CLSID_KSMETHODSETID_BdaGuideDataDeliveryService = .(0x8d9d5562, 0x1589, 0x417d, 0x99, 0xce, 0xac, 0x53, 0x1d, 0xda, 0x19, 0xf9);
		public const Guid CLSID_KSMETHODSETID_BdaConditionalAccessService = .(0x10ced3b4, 0x320b, 0x41bf, 0x98, 0x24, 0x1b, 0x2e, 0x68, 0xe7, 0x1e, 0xb9);
		public const Guid CLSID_KSMETHODSETID_BdaIsdbConditionalAccess = .(0x5e68c627, 0x16c2, 0x4e6c, 0xb1, 0xe2, 0xd0, 0x01, 0x70, 0xcd, 0xaa, 0x0f);
		public const Guid CLSID_KSMETHODSETID_BdaTSSelector = .(0x1dcfafe9, 0xb45e, 0x41b3, 0xbb, 0x2a, 0x56, 0x1e, 0xb1, 0x29, 0xae, 0x98);
		public const Guid CLSID_KSMETHODSETID_BdaUserActivity = .(0xeda5c834, 0x4531, 0x483c, 0xbe, 0x0a, 0x94, 0xe6, 0xc9, 0x6f, 0xf3, 0x96);
		public const Guid CLSID_KSCATEGORY_BDA_RECEIVER_COMPONENT = .(0xfd0a5af4, 0xb41d, 0x11d2, 0x9c, 0x95, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSCATEGORY_BDA_NETWORK_TUNER = .(0x71985f48, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSCATEGORY_BDA_NETWORK_EPG = .(0x71985f49, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSCATEGORY_BDA_IP_SINK = .(0x71985f4a, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSCATEGORY_BDA_NETWORK_PROVIDER = .(0x71985f4b, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSCATEGORY_BDA_TRANSPORT_INFORMATION = .(0xa2e3074f, 0x6c3d, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
		public const Guid CLSID_KSNODE_BDA_RF_TUNER = .(0x71985f4c, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSNODE_BDA_ANALOG_DEMODULATOR = .(0x634db199, 0x27dd, 0x46b8, 0xac, 0xfb, 0xec, 0xc9, 0x8e, 0x61, 0xa2, 0xad);
		public const Guid CLSID_KSNODE_BDA_QAM_DEMODULATOR = .(0x71985f4d, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSNODE_BDA_QPSK_DEMODULATOR = .(0x6390c905, 0x27c1, 0x4d67, 0xbd, 0xb7, 0x77, 0xc5, 0x0d, 0x07, 0x93, 0x00);
		public const Guid CLSID_KSNODE_BDA_8VSB_DEMODULATOR = .(0x71985f4f, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSNODE_BDA_COFDM_DEMODULATOR = .(0x2dac6e05, 0xedbe, 0x4b9c, 0xb3, 0x87, 0x1b, 0x6f, 0xad, 0x7d, 0x64, 0x95);
		public const Guid CLSID_KSNODE_BDA_8PSK_DEMODULATOR = .(0xe957a0e7, 0xdd98, 0x4a3c, 0x81, 0x0b, 0x35, 0x25, 0x15, 0x7a, 0xb6, 0x2e);
		public const Guid CLSID_KSNODE_BDA_ISDB_T_DEMODULATOR = .(0xfcea3ae3, 0x2cb2, 0x464d, 0x8f, 0x5d, 0x30, 0x5c, 0x0b, 0xb7, 0x78, 0xa2);
		public const Guid CLSID_KSNODE_BDA_ISDB_S_DEMODULATOR = .(0xedde230a, 0x9086, 0x432d, 0xb8, 0xa5, 0x66, 0x70, 0x26, 0x38, 0x07, 0xe9);
		public const Guid CLSID_KSNODE_BDA_OPENCABLE_POD = .(0x345812a0, 0xfb7c, 0x4790, 0xaa, 0x7e, 0xb1, 0xdb, 0x88, 0xac, 0x19, 0xc9);
		public const Guid CLSID_KSNODE_BDA_COMMON_CA_POD = .(0xd83ef8fc, 0xf3b8, 0x45ab, 0x8b, 0x71, 0xec, 0xf7, 0xc3, 0x39, 0xde, 0xb4);
		public const Guid CLSID_KSNODE_BDA_PID_FILTER = .(0xf5412789, 0xb0a0, 0x44e1, 0xae, 0x4f, 0xee, 0x99, 0x9b, 0x1b, 0x7f, 0xbe);
		public const Guid CLSID_KSNODE_BDA_IP_SINK = .(0x71985f4e, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		public const Guid CLSID_KSNODE_BDA_VIDEO_ENCODER = .(0xd98429e3, 0x65c9, 0x4ac4, 0x93, 0xaa, 0x76, 0x67, 0x82, 0x83, 0x3b, 0x7a);
		public const Guid CLSID_KSNODE_BDA_PBDA_CAS = .(0xc026869f, 0x7129, 0x4e71, 0x86, 0x96, 0xec, 0x8f, 0x75, 0x29, 0x9b, 0x77);
		public const Guid CLSID_KSNODE_BDA_PBDA_ISDBCAS = .(0xf2cf2ab3, 0x5b9d, 0x40ae, 0xab, 0x7c, 0x4e, 0x7a, 0xd0, 0xbd, 0x1c, 0x52);
		public const Guid CLSID_KSNODE_BDA_PBDA_TUNER = .(0xaa5e8286, 0x593c, 0x4979, 0x94, 0x94, 0x46, 0xa2, 0xa9, 0xdf, 0xe0, 0x76);
		public const Guid CLSID_KSNODE_BDA_PBDA_MUX = .(0xf88c7787, 0x6678, 0x4f4b, 0xa1, 0x3e, 0xda, 0x09, 0x86, 0x1d, 0x68, 0x2b);
		public const Guid CLSID_KSNODE_BDA_PBDA_DRM = .(0x9eeebd03, 0xeea1, 0x450f, 0x96, 0xae, 0x63, 0x3e, 0x6d, 0xe6, 0x3c, 0xce);
		public const Guid CLSID_KSNODE_BDA_DRI_DRM = .(0x4f95ad74, 0xcefb, 0x42d2, 0x94, 0xa9, 0x68, 0xc5, 0xb2, 0xc1, 0xaa, 0xbe);
		public const Guid CLSID_KSNODE_BDA_TS_SELECTOR = .(0x5eddf185, 0xfed1, 0x4f45, 0x96, 0x85, 0xbb, 0xb7, 0x3c, 0x32, 0x3c, 0xfc);
		public const Guid CLSID_PINNAME_IPSINK_INPUT = .(0x3fdffa70, 0xac9a, 0x11d2, 0x8f, 0x17, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
		public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_IP = .(0xe25f7b8e, 0xcccc, 0x11d2, 0x8f, 0x25, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP = .(0x5a9a213c, 0xdb08, 0x11d2, 0x8f, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
		public const Guid CLSID_KSDATAFORMAT_SPECIFIER_BDA_IP = .(0x6b891420, 0xdb09, 0x11d2, 0x8f, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
		public const Guid CLSID_KSDATAFORMAT_TYPE_BDA_IP_CONTROL = .(0xdadd5799, 0x7d5b, 0x4b63, 0x80, 0xfb, 0xd1, 0x44, 0x2f, 0x26, 0xb6, 0x21);
		public const Guid CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP_CONTROL = .(0x499856e8, 0xe85b, 0x48ed, 0x9b, 0xea, 0x41, 0x0d, 0x0d, 0xd4, 0xef, 0x81);
		public const Guid CLSID_PINNAME_MPE = .(0xc1b06d73, 0x1dbb, 0x11d3, 0x8f, 0x46, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
		public const Guid CLSID_KSDATAFORMAT_TYPE_MPE = .(0x455f176c, 0x4b06, 0x47ce, 0x9a, 0xef, 0x8c, 0xae, 0xf7, 0x3d, 0xf7, 0xb5);
		public const Guid CLSID_DIGITAL_CABLE_NETWORK_TYPE = .(0x143827ab, 0xf77b, 0x498d, 0x81, 0xca, 0x5a, 0x00, 0x7a, 0xec, 0x28, 0xbf);
		public const Guid CLSID_ANALOG_TV_NETWORK_TYPE = .(0xb820d87e, 0xe0e3, 0x478f, 0x8a, 0x38, 0x4e, 0x13, 0xf7, 0xb3, 0xdf, 0x42);
		public const Guid CLSID_ANALOG_AUXIN_NETWORK_TYPE = .(0x742ef867, 0x09e1, 0x40a3, 0x82, 0xd3, 0x96, 0x69, 0xba, 0x35, 0x32, 0x5f);
		public const Guid CLSID_ANALOG_FM_NETWORK_TYPE = .(0x7728087b, 0x2bb9, 0x4e30, 0x80, 0x78, 0x44, 0x94, 0x76, 0xe5, 0x9d, 0xbb);
		public const Guid CLSID_ISDB_TERRESTRIAL_TV_NETWORK_TYPE = .(0x95037f6f, 0x3ac7, 0x4452, 0xb6, 0xc4, 0x45, 0xa9, 0xce, 0x92, 0x92, 0xa2);
		public const Guid CLSID_ISDB_T_NETWORK_TYPE = .(0xfc3855a6, 0xc901, 0x4f2e, 0xab, 0xa8, 0x90, 0x81, 0x5a, 0xfc, 0x6c, 0x83);
		public const Guid CLSID_ISDB_SATELLITE_TV_NETWORK_TYPE = .(0xb0a4e6a0, 0x6a1a, 0x4b83, 0xbb, 0x5b, 0x90, 0x3e, 0x1d, 0x90, 0xe6, 0xb6);
		public const Guid CLSID_ISDB_S_NETWORK_TYPE = .(0xa1e78202, 0x1459, 0x41b1, 0x9c, 0xa9, 0x2a, 0x92, 0x58, 0x7a, 0x42, 0xcc);
		public const Guid CLSID_ISDB_CABLE_TV_NETWORK_TYPE = .(0xc974ddb5, 0x41fe, 0x4b25, 0x97, 0x41, 0x92, 0xf0, 0x49, 0xf1, 0xd5, 0xd1);
		public const Guid CLSID_DIRECT_TV_SATELLITE_TV_NETWORK_TYPE = .(0x93b66fb5, 0x93d4, 0x4323, 0x92, 0x1c, 0xc1, 0xf5, 0x2d, 0xf6, 0x1d, 0x3f);
		public const Guid CLSID_ECHOSTAR_SATELLITE_TV_NETWORK_TYPE = .(0xc4f6b31b, 0xc6bf, 0x4759, 0x88, 0x6f, 0xa7, 0x38, 0x6d, 0xca, 0x27, 0xa0);
		public const Guid CLSID_ATSC_TERRESTRIAL_TV_NETWORK_TYPE = .(0x0dad2fdd, 0x5fd7, 0x11d3, 0x8f, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
		public const Guid CLSID_DVB_TERRESTRIAL_TV_NETWORK_TYPE = .(0x216c62df, 0x6d7f, 0x4e9a, 0x85, 0x71, 0x05, 0xf1, 0x4e, 0xdb, 0x76, 0x6a);
		public const Guid CLSID_BSKYB_TERRESTRIAL_TV_NETWORK_TYPE = .(0x9e9e46c6, 0x3aba, 0x4f08, 0xad, 0x0e, 0xcc, 0x5a, 0xc8, 0x14, 0x8c, 0x2b);
		public const Guid CLSID_DVB_SATELLITE_TV_NETWORK_TYPE = .(0xfa4b375a, 0x45b4, 0x4d45, 0x84, 0x40, 0x26, 0x39, 0x57, 0xb1, 0x16, 0x23);
		public const Guid CLSID_DVB_CABLE_TV_NETWORK_TYPE = .(0xdc0c0fe7, 0x0485, 0x4266, 0xb9, 0x3f, 0x68, 0xfb, 0xf8, 0x0e, 0xd8, 0x34);
		public const Guid CLSID_BDA_DEBUG_DATA_AVAILABLE = .(0x69c24f54, 0x9983, 0x497e, 0xb4, 0x15, 0x28, 0x2b, 0xe4, 0xc5, 0x55, 0xfb);
		public const Guid CLSID_BDA_DEBUG_DATA_TYPE_STRING = .(0xa806e767, 0xde5c, 0x430c, 0x80, 0xbf, 0xa2, 0x1e, 0xbe, 0x06, 0xc7, 0x48);
		public const Guid CLSID_EVENTID_BDA_IsdbCASResponse = .(0xd4cb1966, 0x41bc, 0x4ced, 0x9a, 0x20, 0xfd, 0xce, 0xac, 0x78, 0xf7, 0x0d);
		public const Guid CLSID_EVENTID_BDA_CASRequestTuner = .(0xcf39a9d8, 0xf5d3, 0x4685, 0xbe, 0x57, 0xed, 0x81, 0xdb, 0xa4, 0x6b, 0x27);
		public const Guid CLSID_EVENTID_BDA_CASReleaseTuner = .(0x20c1a16b, 0x441f, 0x49a5, 0xbb, 0x5c, 0xe9, 0xa0, 0x44, 0x95, 0xc6, 0xc1);
		public const Guid CLSID_EVENTID_BDA_CASOpenMMI = .(0x85dac915, 0xe593, 0x410d, 0x84, 0x71, 0xd6, 0x81, 0x21, 0x05, 0xf2, 0x8e);
		public const Guid CLSID_EVENTID_BDA_CASCloseMMI = .(0x5d0f550f, 0xde2e, 0x479d, 0x83, 0x45, 0xec, 0x0e, 0x95, 0x57, 0xe8, 0xa2);
		public const Guid CLSID_EVENTID_BDA_CASBroadcastMMI = .(0x676876f0, 0x1132, 0x404c, 0xa7, 0xca, 0xe7, 0x20, 0x69, 0xa9, 0xd5, 0x4f);
		public const Guid CLSID_EVENTID_BDA_TunerSignalLock = .(0x1872e740, 0xf573, 0x429b, 0xa0, 0x0e, 0xd9, 0xc1, 0xe4, 0x08, 0xaf, 0x09);
		public const Guid CLSID_EVENTID_BDA_TunerNoSignal = .(0xe29b382b, 0x1edd, 0x4930, 0xbc, 0x46, 0x68, 0x2f, 0xd7, 0x2d, 0x2d, 0xfb);
		public const Guid CLSID_EVENTID_BDA_GPNVValueUpdate = .(0xff75c68c, 0xf416, 0x4e7e, 0xbf, 0x17, 0x6d, 0x55, 0xc5, 0xdf, 0x15, 0x75);
		public const Guid CLSID_EVENTID_BDA_UpdateDrmStatus = .(0x65a6f681, 0x1462, 0x473b, 0x88, 0xce, 0xcb, 0x73, 0x14, 0x27, 0xbd, 0xb5);
		public const Guid CLSID_EVENTID_BDA_UpdateScanState = .(0x55702b50, 0x7b49, 0x42b8, 0xa8, 0x2f, 0x4a, 0xfb, 0x69, 0x1b, 0x06, 0x28);
		public const Guid CLSID_EVENTID_BDA_GuideDataAvailable = .(0x98db717a, 0x478a, 0x4cd4, 0x92, 0xd0, 0x95, 0xf6, 0x6b, 0x89, 0xe5, 0xb1);
		public const Guid CLSID_EVENTID_BDA_GuideServiceInformationUpdated = .(0xa1c3ea2b, 0x175f, 0x4458, 0xb7, 0x35, 0x50, 0x7d, 0x22, 0xdb, 0x23, 0xa6);
		public const Guid CLSID_EVENTID_BDA_GuideDataError = .(0xac33c448, 0x6f73, 0x4fd7, 0xb3, 0x41, 0x59, 0x4c, 0x36, 0x0d, 0x8d, 0x74);
		public const Guid CLSID_EVENTID_BDA_DiseqCResponseAvailable = .(0xefa628f8, 0x1f2c, 0x4b67, 0x9e, 0xa5, 0xac, 0xf6, 0xfa, 0x9a, 0x1f, 0x36);
		public const Guid CLSID_EVENTID_BDA_LbigsOpenConnection = .(0x356207b2, 0x6f31, 0x4eb0, 0xa2, 0x71, 0xb3, 0xfa, 0x6b, 0xb7, 0x68, 0x0f);
		public const Guid CLSID_EVENTID_BDA_LbigsSendData = .(0x1123277b, 0xf1c6, 0x4154, 0x8b, 0x0d, 0x48, 0xe6, 0x15, 0x70, 0x59, 0xaa);
		public const Guid CLSID_EVENTID_BDA_LbigsCloseConnectionHandle = .(0xc2f08b99, 0x65ef, 0x4314, 0x96, 0x71, 0xe9, 0x9d, 0x4c, 0xce, 0x0b, 0xae);
		public const Guid CLSID_EVENTID_BDA_EncoderSignalLock = .(0x5ec90eb9, 0x39fa, 0x4cfc, 0xb9, 0x3f, 0x00, 0xbb, 0x11, 0x07, 0x7f, 0x5e);
		public const Guid CLSID_EVENTID_BDA_FdcStatus = .(0x05f25366, 0xd0eb, 0x43d2, 0xbc, 0x3c, 0x68, 0x2b, 0x86, 0x3d, 0xf1, 0x42);
		public const Guid CLSID_EVENTID_BDA_FdcTableSection = .(0x6a0cd757, 0x4ce3, 0x4e5b, 0x94, 0x44, 0x71, 0x87, 0xb8, 0x71, 0x52, 0xc5);
		public const Guid CLSID_EVENTID_BDA_TransprtStreamSelectorInfo = .(0xc40f9f85, 0x09d0, 0x489c, 0x9e, 0x9c, 0x0a, 0xbb, 0xb5, 0x69, 0x51, 0xb0);
		public const Guid CLSID_EVENTID_BDA_RatingPinReset = .(0xc6e048c0, 0xc574, 0x4c26, 0xbc, 0xda, 0x2f, 0x4d, 0x35, 0xeb, 0x5e, 0x85);
		public const Guid CLSID_PBDA_ALWAYS_TUNE_IN_MUX = .(0x1e1d7141, 0x583f, 0x4ac2, 0xb0, 0x19, 0x1f, 0x43, 0x0e, 0xda, 0x0f, 0x4c);
		public const Guid CLSID_BDANETWORKTYPE_ATSC = .(0x71985f51, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
		
		// --- COM Interfaces ---
		
		[CRepr]
		public struct ICreateDevEnum : IUnknown
		{
			public const new Guid IID = .(0x29840822, 0x5b84, 0x11d0, 0xbd, 0x3b, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateClassEnumerator(in Guid clsidDeviceClass, out IEnumMoniker* ppEnumMoniker, uint32 dwFlags) mut => VT.CreateClassEnumerator(ref this, clsidDeviceClass, out ppEnumMoniker, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICreateDevEnum self, in Guid clsidDeviceClass, out IEnumMoniker* ppEnumMoniker, uint32 dwFlags) CreateClassEnumerator;
			}
		}
		[CRepr]
		public struct IPin : IUnknown
		{
			public const new Guid IID = .(0x56a86891, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Connect(ref IPin pReceivePin, AM_MEDIA_TYPE* pmt) mut => VT.Connect(ref this, ref pReceivePin, pmt);
			public HRESULT ReceiveConnection(ref IPin pConnector, in AM_MEDIA_TYPE pmt) mut => VT.ReceiveConnection(ref this, ref pConnector, pmt);
			public HRESULT Disconnect() mut => VT.Disconnect(ref this);
			public HRESULT ConnectedTo(out IPin* pPin) mut => VT.ConnectedTo(ref this, out pPin);
			public HRESULT ConnectionMediaType(out AM_MEDIA_TYPE pmt) mut => VT.ConnectionMediaType(ref this, out pmt);
			public HRESULT QueryPinInfo(out PIN_INFO pInfo) mut => VT.QueryPinInfo(ref this, out pInfo);
			public HRESULT QueryDirection(out PIN_DIRECTION pPinDir) mut => VT.QueryDirection(ref this, out pPinDir);
			public HRESULT QueryId(out PWSTR Id) mut => VT.QueryId(ref this, out Id);
			public HRESULT QueryAccept(in AM_MEDIA_TYPE pmt) mut => VT.QueryAccept(ref this, pmt);
			public HRESULT EnumMediaTypes(out IEnumMediaTypes* ppEnum) mut => VT.EnumMediaTypes(ref this, out ppEnum);
			public HRESULT QueryInternalConnections(IPin** apPin, out uint32 nPin) mut => VT.QueryInternalConnections(ref this, apPin, out nPin);
			public HRESULT EndOfStream() mut => VT.EndOfStream(ref this);
			public HRESULT BeginFlush() mut => VT.BeginFlush(ref this);
			public HRESULT EndFlush() mut => VT.EndFlush(ref this);
			public HRESULT NewSegment(int64 tStart, int64 tStop, double dRate) mut => VT.NewSegment(ref this, tStart, tStop, dRate);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, ref IPin pReceivePin, AM_MEDIA_TYPE* pmt) Connect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, ref IPin pConnector, in AM_MEDIA_TYPE pmt) ReceiveConnection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self) Disconnect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, out IPin* pPin) ConnectedTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, out AM_MEDIA_TYPE pmt) ConnectionMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, out PIN_INFO pInfo) QueryPinInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, out PIN_DIRECTION pPinDir) QueryDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, out PWSTR Id) QueryId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, in AM_MEDIA_TYPE pmt) QueryAccept;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, out IEnumMediaTypes* ppEnum) EnumMediaTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, IPin** apPin, out uint32 nPin) QueryInternalConnections;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self) EndOfStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self) BeginFlush;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self) EndFlush;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPin self, int64 tStart, int64 tStop, double dRate) NewSegment;
			}
		}
		[CRepr]
		public struct IEnumPins : IUnknown
		{
			public const new Guid IID = .(0x56a86892, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cPins, IPin** ppPins, uint32* pcFetched) mut => VT.Next(ref this, cPins, ppPins, pcFetched);
			public HRESULT Skip(uint32 cPins) mut => VT.Skip(ref this, cPins);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumPins* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPins self, uint32 cPins, IPin** ppPins, uint32* pcFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPins self, uint32 cPins) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPins self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPins self, out IEnumPins* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IEnumMediaTypes : IUnknown
		{
			public const new Guid IID = .(0x89c31040, 0x846b, 0x11ce, 0x97, 0xd3, 0x00, 0xaa, 0x00, 0x55, 0x59, 0x5a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cMediaTypes, AM_MEDIA_TYPE** ppMediaTypes, uint32* pcFetched) mut => VT.Next(ref this, cMediaTypes, ppMediaTypes, pcFetched);
			public HRESULT Skip(uint32 cMediaTypes) mut => VT.Skip(ref this, cMediaTypes);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumMediaTypes* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMediaTypes self, uint32 cMediaTypes, AM_MEDIA_TYPE** ppMediaTypes, uint32* pcFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMediaTypes self, uint32 cMediaTypes) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMediaTypes self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMediaTypes self, out IEnumMediaTypes* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IFilterGraph : IUnknown
		{
			public const new Guid IID = .(0x56a8689f, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddFilter(ref IBaseFilter pFilter, PWSTR pName) mut => VT.AddFilter(ref this, ref pFilter, pName);
			public HRESULT RemoveFilter(ref IBaseFilter pFilter) mut => VT.RemoveFilter(ref this, ref pFilter);
			public HRESULT EnumFilters(out IEnumFilters* ppEnum) mut => VT.EnumFilters(ref this, out ppEnum);
			public HRESULT FindFilterByName(PWSTR pName, out IBaseFilter* ppFilter) mut => VT.FindFilterByName(ref this, pName, out ppFilter);
			public HRESULT ConnectDirect(ref IPin ppinOut, ref IPin ppinIn, AM_MEDIA_TYPE* pmt) mut => VT.ConnectDirect(ref this, ref ppinOut, ref ppinIn, pmt);
			public HRESULT Reconnect(ref IPin ppin) mut => VT.Reconnect(ref this, ref ppin);
			public HRESULT Disconnect(ref IPin ppin) mut => VT.Disconnect(ref this, ref ppin);
			public HRESULT SetDefaultSyncSource() mut => VT.SetDefaultSyncSource(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, ref IBaseFilter pFilter, PWSTR pName) AddFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, ref IBaseFilter pFilter) RemoveFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, out IEnumFilters* ppEnum) EnumFilters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, PWSTR pName, out IBaseFilter* ppFilter) FindFilterByName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, ref IPin ppinOut, ref IPin ppinIn, AM_MEDIA_TYPE* pmt) ConnectDirect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, ref IPin ppin) Reconnect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self, ref IPin ppin) Disconnect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph self) SetDefaultSyncSource;
			}
		}
		[CRepr]
		public struct IEnumFilters : IUnknown
		{
			public const new Guid IID = .(0x56a86893, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cFilters, IBaseFilter** ppFilter, uint32* pcFetched) mut => VT.Next(ref this, cFilters, ppFilter, pcFetched);
			public HRESULT Skip(uint32 cFilters) mut => VT.Skip(ref this, cFilters);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumFilters* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumFilters self, uint32 cFilters, IBaseFilter** ppFilter, uint32* pcFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumFilters self, uint32 cFilters) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumFilters self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumFilters self, out IEnumFilters* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IMediaFilter : IPersist
		{
			public const new Guid IID = .(0x56a86899, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Stop() mut => VT.Stop(ref this);
			public HRESULT Pause() mut => VT.Pause(ref this);
			public HRESULT Run(int64 tStart) mut => VT.Run(ref this, tStart);
			public HRESULT GetState(uint32 dwMilliSecsTimeout, out FILTER_STATE State) mut => VT.GetState(ref this, dwMilliSecsTimeout, out State);
			public HRESULT SetSyncSource(IReferenceClock* pClock) mut => VT.SetSyncSource(ref this, pClock);
			public HRESULT GetSyncSource(IReferenceClock** pClock) mut => VT.GetSyncSource(ref this, pClock);

			[CRepr]
			public struct VTable : IPersist.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaFilter self) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaFilter self) Pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaFilter self, int64 tStart) Run;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaFilter self, uint32 dwMilliSecsTimeout, out FILTER_STATE State) GetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaFilter self, IReferenceClock* pClock) SetSyncSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaFilter self, IReferenceClock** pClock) GetSyncSource;
			}
		}
		[CRepr]
		public struct IBaseFilter : IMediaFilter
		{
			public const new Guid IID = .(0x56a86895, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EnumPins(out IEnumPins* ppEnum) mut => VT.EnumPins(ref this, out ppEnum);
			public HRESULT FindPin(PWSTR Id, out IPin* ppPin) mut => VT.FindPin(ref this, Id, out ppPin);
			public HRESULT QueryFilterInfo(out FILTER_INFO pInfo) mut => VT.QueryFilterInfo(ref this, out pInfo);
			public HRESULT JoinFilterGraph(IFilterGraph* pGraph, PWSTR pName) mut => VT.JoinFilterGraph(ref this, pGraph, pName);
			public HRESULT QueryVendorInfo(out PWSTR pVendorInfo) mut => VT.QueryVendorInfo(ref this, out pVendorInfo);

			[CRepr]
			public struct VTable : IMediaFilter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseFilter self, out IEnumPins* ppEnum) EnumPins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseFilter self, PWSTR Id, out IPin* ppPin) FindPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseFilter self, out FILTER_INFO pInfo) QueryFilterInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseFilter self, IFilterGraph* pGraph, PWSTR pName) JoinFilterGraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseFilter self, out PWSTR pVendorInfo) QueryVendorInfo;
			}
		}
		[CRepr]
		public struct IMediaSample : IUnknown
		{
			public const new Guid IID = .(0x56a8689a, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPointer(out uint8* ppBuffer) mut => VT.GetPointer(ref this, out ppBuffer);
			public int32 GetSize() mut => VT.GetSize(ref this);
			public HRESULT GetTime(out int64 pTimeStart, out int64 pTimeEnd) mut => VT.GetTime(ref this, out pTimeStart, out pTimeEnd);
			public HRESULT SetTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.SetTime(ref this, pTimeStart, pTimeEnd);
			public HRESULT IsSyncPoint() mut => VT.IsSyncPoint(ref this);
			public HRESULT SetSyncPoint(BOOL bIsSyncPoint) mut => VT.SetSyncPoint(ref this, bIsSyncPoint);
			public HRESULT IsPreroll() mut => VT.IsPreroll(ref this);
			public HRESULT SetPreroll(BOOL bIsPreroll) mut => VT.SetPreroll(ref this, bIsPreroll);
			public int32 GetActualDataLength() mut => VT.GetActualDataLength(ref this);
			public HRESULT SetActualDataLength(int32 __MIDL__IMediaSample0000) mut => VT.SetActualDataLength(ref this, __MIDL__IMediaSample0000);
			public HRESULT GetMediaType(out AM_MEDIA_TYPE* ppMediaType) mut => VT.GetMediaType(ref this, out ppMediaType);
			public HRESULT SetMediaType(ref AM_MEDIA_TYPE pMediaType) mut => VT.SetMediaType(ref this, ref pMediaType);
			public HRESULT IsDiscontinuity() mut => VT.IsDiscontinuity(ref this);
			public HRESULT SetDiscontinuity(BOOL bDiscontinuity) mut => VT.SetDiscontinuity(ref this, bDiscontinuity);
			public HRESULT GetMediaTime(out int64 pTimeStart, out int64 pTimeEnd) mut => VT.GetMediaTime(ref this, out pTimeStart, out pTimeEnd);
			public HRESULT SetMediaTime(int64* pTimeStart, int64* pTimeEnd) mut => VT.SetMediaTime(ref this, pTimeStart, pTimeEnd);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, out uint8* ppBuffer) GetPointer;
				public new function [CallingConvention(.Stdcall)] int32(ref IMediaSample self) GetSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, out int64 pTimeStart, out int64 pTimeEnd) GetTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, int64* pTimeStart, int64* pTimeEnd) SetTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self) IsSyncPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, BOOL bIsSyncPoint) SetSyncPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self) IsPreroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, BOOL bIsPreroll) SetPreroll;
				public new function [CallingConvention(.Stdcall)] int32(ref IMediaSample self) GetActualDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, int32 __MIDL__IMediaSample0000) SetActualDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, out AM_MEDIA_TYPE* ppMediaType) GetMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, ref AM_MEDIA_TYPE pMediaType) SetMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self) IsDiscontinuity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, BOOL bDiscontinuity) SetDiscontinuity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, out int64 pTimeStart, out int64 pTimeEnd) GetMediaTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample self, int64* pTimeStart, int64* pTimeEnd) SetMediaTime;
			}
		}
		[CRepr]
		public struct IMediaSample2 : IMediaSample
		{
			public const new Guid IID = .(0x36b73884, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetProperties(uint32 cbProperties, out uint8 pbProperties) mut => VT.GetProperties(ref this, cbProperties, out pbProperties);
			public HRESULT SetProperties(uint32 cbProperties, in uint8 pbProperties) mut => VT.SetProperties(ref this, cbProperties, pbProperties);

			[CRepr]
			public struct VTable : IMediaSample.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample2 self, uint32 cbProperties, out uint8 pbProperties) GetProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample2 self, uint32 cbProperties, in uint8 pbProperties) SetProperties;
			}
		}
		[CRepr]
		public struct IMediaSample2Config : IUnknown
		{
			public const new Guid IID = .(0x68961e68, 0x832b, 0x41ea, 0xbc, 0x91, 0x63, 0x59, 0x3f, 0x3e, 0x70, 0xe3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSurface(IUnknown** ppDirect3DSurface9) mut => VT.GetSurface(ref this, ppDirect3DSurface9);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSample2Config self, IUnknown** ppDirect3DSurface9) GetSurface;
			}
		}
		[CRepr]
		public struct IMemAllocator : IUnknown
		{
			public const new Guid IID = .(0x56a8689c, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetProperties(ref ALLOCATOR_PROPERTIES pRequest, out ALLOCATOR_PROPERTIES pActual) mut => VT.SetProperties(ref this, ref pRequest, out pActual);
			public HRESULT GetProperties(out ALLOCATOR_PROPERTIES pProps) mut => VT.GetProperties(ref this, out pProps);
			public HRESULT Commit() mut => VT.Commit(ref this);
			public HRESULT Decommit() mut => VT.Decommit(ref this);
			public HRESULT GetBuffer(out IMediaSample* ppBuffer, int64* pStartTime, int64* pEndTime, uint32 dwFlags) mut => VT.GetBuffer(ref this, out ppBuffer, pStartTime, pEndTime, dwFlags);
			public HRESULT ReleaseBuffer(ref IMediaSample pBuffer) mut => VT.ReleaseBuffer(ref this, ref pBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocator self, ref ALLOCATOR_PROPERTIES pRequest, out ALLOCATOR_PROPERTIES pActual) SetProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocator self, out ALLOCATOR_PROPERTIES pProps) GetProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocator self) Commit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocator self) Decommit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocator self, out IMediaSample* ppBuffer, int64* pStartTime, int64* pEndTime, uint32 dwFlags) GetBuffer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocator self, ref IMediaSample pBuffer) ReleaseBuffer;
			}
		}
		[CRepr]
		public struct IMemAllocatorCallbackTemp : IMemAllocator
		{
			public const new Guid IID = .(0x379a0cf0, 0xc1de, 0x11d2, 0xab, 0xf5, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetNotify(ref IMemAllocatorNotifyCallbackTemp pNotify) mut => VT.SetNotify(ref this, ref pNotify);
			public HRESULT GetFreeCount(out int32 plBuffersFree) mut => VT.GetFreeCount(ref this, out plBuffersFree);

			[CRepr]
			public struct VTable : IMemAllocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocatorCallbackTemp self, ref IMemAllocatorNotifyCallbackTemp pNotify) SetNotify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocatorCallbackTemp self, out int32 plBuffersFree) GetFreeCount;
			}
		}
		[CRepr]
		public struct IMemAllocatorNotifyCallbackTemp : IUnknown
		{
			public const new Guid IID = .(0x92980b30, 0xc1de, 0x11d2, 0xab, 0xf5, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT NotifyRelease() mut => VT.NotifyRelease(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemAllocatorNotifyCallbackTemp self) NotifyRelease;
			}
		}
		[CRepr]
		public struct IMemInputPin : IUnknown
		{
			public const new Guid IID = .(0x56a8689d, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetAllocator(out IMemAllocator* ppAllocator) mut => VT.GetAllocator(ref this, out ppAllocator);
			public HRESULT NotifyAllocator(ref IMemAllocator pAllocator, BOOL bReadOnly) mut => VT.NotifyAllocator(ref this, ref pAllocator, bReadOnly);
			public HRESULT GetAllocatorRequirements(out ALLOCATOR_PROPERTIES pProps) mut => VT.GetAllocatorRequirements(ref this, out pProps);
			public HRESULT Receive(ref IMediaSample pSample) mut => VT.Receive(ref this, ref pSample);
			public HRESULT ReceiveMultiple(IMediaSample** pSamples, int32 nSamples, out int32 nSamplesProcessed) mut => VT.ReceiveMultiple(ref this, pSamples, nSamples, out nSamplesProcessed);
			public HRESULT ReceiveCanBlock() mut => VT.ReceiveCanBlock(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemInputPin self, out IMemAllocator* ppAllocator) GetAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemInputPin self, ref IMemAllocator pAllocator, BOOL bReadOnly) NotifyAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemInputPin self, out ALLOCATOR_PROPERTIES pProps) GetAllocatorRequirements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemInputPin self, ref IMediaSample pSample) Receive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemInputPin self, IMediaSample** pSamples, int32 nSamples, out int32 nSamplesProcessed) ReceiveMultiple;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemInputPin self) ReceiveCanBlock;
			}
		}
		[CRepr]
		public struct IAMovieSetup : IUnknown
		{
			public const new Guid IID = .(0xa3d8cec0, 0x7e5a, 0x11cf, 0xbb, 0xc5, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x20);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Register() mut => VT.Register(ref this);
			public HRESULT Unregister() mut => VT.Unregister(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMovieSetup self) Register;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMovieSetup self) Unregister;
			}
		}
		[CRepr]
		public struct IMediaSeeking : IUnknown
		{
			public const new Guid IID = .(0x36b73880, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCapabilities(out uint32 pCapabilities) mut => VT.GetCapabilities(ref this, out pCapabilities);
			public HRESULT CheckCapabilities(out uint32 pCapabilities) mut => VT.CheckCapabilities(ref this, out pCapabilities);
			public HRESULT IsFormatSupported(in Guid pFormat) mut => VT.IsFormatSupported(ref this, pFormat);
			public HRESULT QueryPreferredFormat(out Guid pFormat) mut => VT.QueryPreferredFormat(ref this, out pFormat);
			public HRESULT GetTimeFormat(out Guid pFormat) mut => VT.GetTimeFormat(ref this, out pFormat);
			public HRESULT IsUsingTimeFormat(in Guid pFormat) mut => VT.IsUsingTimeFormat(ref this, pFormat);
			public HRESULT SetTimeFormat(in Guid pFormat) mut => VT.SetTimeFormat(ref this, pFormat);
			public HRESULT GetDuration(out int64 pDuration) mut => VT.GetDuration(ref this, out pDuration);
			public HRESULT GetStopPosition(out int64 pStop) mut => VT.GetStopPosition(ref this, out pStop);
			public HRESULT GetCurrentPosition(out int64 pCurrent) mut => VT.GetCurrentPosition(ref this, out pCurrent);
			public HRESULT ConvertTimeFormat(out int64 pTarget, Guid* pTargetFormat, int64 Source, Guid* pSourceFormat) mut => VT.ConvertTimeFormat(ref this, out pTarget, pTargetFormat, Source, pSourceFormat);
			public HRESULT SetPositions(int64* pCurrent, uint32 dwCurrentFlags, int64* pStop, uint32 dwStopFlags) mut => VT.SetPositions(ref this, pCurrent, dwCurrentFlags, pStop, dwStopFlags);
			public HRESULT GetPositions(int64* pCurrent, int64* pStop) mut => VT.GetPositions(ref this, pCurrent, pStop);
			public HRESULT GetAvailable(int64* pEarliest, int64* pLatest) mut => VT.GetAvailable(ref this, pEarliest, pLatest);
			public HRESULT SetRate(double dRate) mut => VT.SetRate(ref this, dRate);
			public HRESULT GetRate(out double pdRate) mut => VT.GetRate(ref this, out pdRate);
			public HRESULT GetPreroll(out int64 pllPreroll) mut => VT.GetPreroll(ref this, out pllPreroll);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out uint32 pCapabilities) GetCapabilities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out uint32 pCapabilities) CheckCapabilities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, in Guid pFormat) IsFormatSupported;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out Guid pFormat) QueryPreferredFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out Guid pFormat) GetTimeFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, in Guid pFormat) IsUsingTimeFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, in Guid pFormat) SetTimeFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out int64 pDuration) GetDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out int64 pStop) GetStopPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out int64 pCurrent) GetCurrentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out int64 pTarget, Guid* pTargetFormat, int64 Source, Guid* pSourceFormat) ConvertTimeFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, int64* pCurrent, uint32 dwCurrentFlags, int64* pStop, uint32 dwStopFlags) SetPositions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, int64* pCurrent, int64* pStop) GetPositions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, int64* pEarliest, int64* pLatest) GetAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, double dRate) SetRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out double pdRate) GetRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaSeeking self, out int64 pllPreroll) GetPreroll;
			}
		}
		[CRepr]
		public struct IEnumRegFilters : IUnknown
		{
			public const new Guid IID = .(0x56a868a4, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cFilters, REGFILTER** apRegFilter, uint32* pcFetched) mut => VT.Next(ref this, cFilters, apRegFilter, pcFetched);
			public HRESULT Skip(uint32 cFilters) mut => VT.Skip(ref this, cFilters);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumRegFilters* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumRegFilters self, uint32 cFilters, REGFILTER** apRegFilter, uint32* pcFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumRegFilters self, uint32 cFilters) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumRegFilters self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumRegFilters self, out IEnumRegFilters* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IFilterMapper : IUnknown
		{
			public const new Guid IID = .(0x56a868a3, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RegisterFilter(Guid clsid, PWSTR Name, uint32 dwMerit) mut => VT.RegisterFilter(ref this, clsid, Name, dwMerit);
			public HRESULT RegisterFilterInstance(Guid clsid, PWSTR Name, out Guid MRId) mut => VT.RegisterFilterInstance(ref this, clsid, Name, out MRId);
			public HRESULT RegisterPin(Guid Filter, PWSTR Name, BOOL bRendered, BOOL bOutput, BOOL bZero, BOOL bMany, Guid ConnectsToFilter, PWSTR ConnectsToPin) mut => VT.RegisterPin(ref this, Filter, Name, bRendered, bOutput, bZero, bMany, ConnectsToFilter, ConnectsToPin);
			public HRESULT RegisterPinType(Guid clsFilter, PWSTR strName, Guid clsMajorType, Guid clsSubType) mut => VT.RegisterPinType(ref this, clsFilter, strName, clsMajorType, clsSubType);
			public HRESULT UnregisterFilter(Guid Filter) mut => VT.UnregisterFilter(ref this, Filter);
			public HRESULT UnregisterFilterInstance(Guid MRId) mut => VT.UnregisterFilterInstance(ref this, MRId);
			public HRESULT UnregisterPin(Guid Filter, PWSTR Name) mut => VT.UnregisterPin(ref this, Filter, Name);
			public HRESULT EnumMatchingFilters(out IEnumRegFilters* ppEnum, uint32 dwMerit, BOOL bInputNeeded, Guid clsInMaj, Guid clsInSub, BOOL bRender, BOOL bOututNeeded, Guid clsOutMaj, Guid clsOutSub) mut => VT.EnumMatchingFilters(ref this, out ppEnum, dwMerit, bInputNeeded, clsInMaj, clsInSub, bRender, bOututNeeded, clsOutMaj, clsOutSub);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid clsid, PWSTR Name, uint32 dwMerit) RegisterFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid clsid, PWSTR Name, out Guid MRId) RegisterFilterInstance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid Filter, PWSTR Name, BOOL bRendered, BOOL bOutput, BOOL bZero, BOOL bMany, Guid ConnectsToFilter, PWSTR ConnectsToPin) RegisterPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid clsFilter, PWSTR strName, Guid clsMajorType, Guid clsSubType) RegisterPinType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid Filter) UnregisterFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid MRId) UnregisterFilterInstance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, Guid Filter, PWSTR Name) UnregisterPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper self, out IEnumRegFilters* ppEnum, uint32 dwMerit, BOOL bInputNeeded, Guid clsInMaj, Guid clsInSub, BOOL bRender, BOOL bOututNeeded, Guid clsOutMaj, Guid clsOutSub) EnumMatchingFilters;
			}
		}
		[CRepr]
		public struct IFilterMapper2 : IUnknown
		{
			public const new Guid IID = .(0xb79bb0b0, 0x33c1, 0x11d1, 0xab, 0xe1, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateCategory(in Guid clsidCategory, uint32 dwCategoryMerit, PWSTR Description) mut => VT.CreateCategory(ref this, clsidCategory, dwCategoryMerit, Description);
			public HRESULT UnregisterFilter(in Guid pclsidCategory, PWSTR szInstance, in Guid Filter) mut => VT.UnregisterFilter(ref this, pclsidCategory, szInstance, Filter);
			public HRESULT RegisterFilter(in Guid clsidFilter, PWSTR Name, IMoniker** ppMoniker, in Guid pclsidCategory, PWSTR szInstance, in REGFILTER2 prf2) mut => VT.RegisterFilter(ref this, clsidFilter, Name, ppMoniker, pclsidCategory, szInstance, prf2);
			public HRESULT EnumMatchingFilters(out IEnumMoniker* ppEnum, uint32 dwFlags, BOOL bExactMatch, uint32 dwMerit, BOOL bInputNeeded, uint32 cInputTypes, Guid* pInputTypes, REGPINMEDIUM* pMedIn, Guid* pPinCategoryIn, BOOL bRender, BOOL bOutputNeeded, uint32 cOutputTypes, Guid* pOutputTypes, REGPINMEDIUM* pMedOut, Guid* pPinCategoryOut) mut => VT.EnumMatchingFilters(ref this, out ppEnum, dwFlags, bExactMatch, dwMerit, bInputNeeded, cInputTypes, pInputTypes, pMedIn, pPinCategoryIn, bRender, bOutputNeeded, cOutputTypes, pOutputTypes, pMedOut, pPinCategoryOut);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper2 self, in Guid clsidCategory, uint32 dwCategoryMerit, PWSTR Description) CreateCategory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper2 self, in Guid pclsidCategory, PWSTR szInstance, in Guid Filter) UnregisterFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper2 self, in Guid clsidFilter, PWSTR Name, IMoniker** ppMoniker, in Guid pclsidCategory, PWSTR szInstance, in REGFILTER2 prf2) RegisterFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper2 self, out IEnumMoniker* ppEnum, uint32 dwFlags, BOOL bExactMatch, uint32 dwMerit, BOOL bInputNeeded, uint32 cInputTypes, Guid* pInputTypes, REGPINMEDIUM* pMedIn, Guid* pPinCategoryIn, BOOL bRender, BOOL bOutputNeeded, uint32 cOutputTypes, Guid* pOutputTypes, REGPINMEDIUM* pMedOut, Guid* pPinCategoryOut) EnumMatchingFilters;
			}
		}
		[CRepr]
		public struct IFilterMapper3 : IFilterMapper2
		{
			public const new Guid IID = .(0xb79bb0b1, 0x33c1, 0x11d1, 0xab, 0xe1, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetICreateDevEnum(out ICreateDevEnum* ppEnum) mut => VT.GetICreateDevEnum(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IFilterMapper2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterMapper3 self, out ICreateDevEnum* ppEnum) GetICreateDevEnum;
			}
		}
		[CRepr]
		public struct IQualityControl : IUnknown
		{
			public const new Guid IID = .(0x56a868a5, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Notify(ref IBaseFilter pSelf, Quality q) mut => VT.Notify(ref this, ref pSelf, q);
			public HRESULT SetSink(ref IQualityControl piqc) mut => VT.SetSink(ref this, ref piqc);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualityControl self, ref IBaseFilter pSelf, Quality q) Notify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualityControl self, ref IQualityControl piqc) SetSink;
			}
		}
		[CRepr]
		public struct IOverlayNotify : IUnknown
		{
			public const new Guid IID = .(0x56a868a0, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnPaletteChange(uint32 dwColors, in PALETTEENTRY pPalette) mut => VT.OnPaletteChange(ref this, dwColors, pPalette);
			public HRESULT OnClipChange(in RECT pSourceRect, in RECT pDestinationRect, in RGNDATA pRgnData) mut => VT.OnClipChange(ref this, pSourceRect, pDestinationRect, pRgnData);
			public HRESULT OnColorKeyChange(in COLORKEY pColorKey) mut => VT.OnColorKeyChange(ref this, pColorKey);
			public HRESULT OnPositionChange(in RECT pSourceRect, in RECT pDestinationRect) mut => VT.OnPositionChange(ref this, pSourceRect, pDestinationRect);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlayNotify self, uint32 dwColors, in PALETTEENTRY pPalette) OnPaletteChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlayNotify self, in RECT pSourceRect, in RECT pDestinationRect, in RGNDATA pRgnData) OnClipChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlayNotify self, in COLORKEY pColorKey) OnColorKeyChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlayNotify self, in RECT pSourceRect, in RECT pDestinationRect) OnPositionChange;
			}
		}
		[CRepr]
		public struct IOverlayNotify2 : IOverlayNotify
		{
			public const new Guid IID = .(0x680efa10, 0xd535, 0x11d1, 0x87, 0xc8, 0x00, 0xa0, 0xc9, 0x22, 0x31, 0x96);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnDisplayChange(HMONITOR hMonitor) mut => VT.OnDisplayChange(ref this, hMonitor);

			[CRepr]
			public struct VTable : IOverlayNotify.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlayNotify2 self, HMONITOR hMonitor) OnDisplayChange;
			}
		}
		[CRepr]
		public struct IOverlay : IUnknown
		{
			public const new Guid IID = .(0x56a868a1, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPalette(out uint32 pdwColors, PALETTEENTRY** ppPalette) mut => VT.GetPalette(ref this, out pdwColors, ppPalette);
			public HRESULT SetPalette(uint32 dwColors, PALETTEENTRY* pPalette) mut => VT.SetPalette(ref this, dwColors, pPalette);
			public HRESULT GetDefaultColorKey(out COLORKEY pColorKey) mut => VT.GetDefaultColorKey(ref this, out pColorKey);
			public HRESULT GetColorKey(out COLORKEY pColorKey) mut => VT.GetColorKey(ref this, out pColorKey);
			public HRESULT SetColorKey(out COLORKEY pColorKey) mut => VT.SetColorKey(ref this, out pColorKey);
			public HRESULT GetWindowHandle(out HWND pHwnd) mut => VT.GetWindowHandle(ref this, out pHwnd);
			public HRESULT GetClipList(out RECT pSourceRect, out RECT pDestinationRect, out RGNDATA* ppRgnData) mut => VT.GetClipList(ref this, out pSourceRect, out pDestinationRect, out ppRgnData);
			public HRESULT GetVideoPosition(out RECT pSourceRect, out RECT pDestinationRect) mut => VT.GetVideoPosition(ref this, out pSourceRect, out pDestinationRect);
			public HRESULT Advise(ref IOverlayNotify pOverlayNotify, uint32 dwInterests) mut => VT.Advise(ref this, ref pOverlayNotify, dwInterests);
			public HRESULT Unadvise() mut => VT.Unadvise(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out uint32 pdwColors, PALETTEENTRY** ppPalette) GetPalette;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, uint32 dwColors, PALETTEENTRY* pPalette) SetPalette;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out COLORKEY pColorKey) GetDefaultColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out COLORKEY pColorKey) GetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out COLORKEY pColorKey) SetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out HWND pHwnd) GetWindowHandle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out RECT pSourceRect, out RECT pDestinationRect, out RGNDATA* ppRgnData) GetClipList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, out RECT pSourceRect, out RECT pDestinationRect) GetVideoPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self, ref IOverlayNotify pOverlayNotify, uint32 dwInterests) Advise;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOverlay self) Unadvise;
			}
		}
		[CRepr]
		public struct IMediaEventSink : IUnknown
		{
			public const new Guid IID = .(0x56a868a2, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Notify(int32 EventCode, int EventParam1, int EventParam2) mut => VT.Notify(ref this, EventCode, EventParam1, EventParam2);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEventSink self, int32 EventCode, int EventParam1, int EventParam2) Notify;
			}
		}
		[CRepr]
		public struct IFileSourceFilter : IUnknown
		{
			public const new Guid IID = .(0x56a868a6, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Load(PWSTR pszFileName, AM_MEDIA_TYPE* pmt) mut => VT.Load(ref this, pszFileName, pmt);
			public HRESULT GetCurFile(out PWSTR ppszFileName, AM_MEDIA_TYPE* pmt) mut => VT.GetCurFile(ref this, out ppszFileName, pmt);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFileSourceFilter self, PWSTR pszFileName, AM_MEDIA_TYPE* pmt) Load;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFileSourceFilter self, out PWSTR ppszFileName, AM_MEDIA_TYPE* pmt) GetCurFile;
			}
		}
		[CRepr]
		public struct IFileSinkFilter : IUnknown
		{
			public const new Guid IID = .(0xa2104830, 0x7c70, 0x11cf, 0x8b, 0xce, 0x00, 0xaa, 0x00, 0xa3, 0xf1, 0xa6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetFileName(PWSTR pszFileName, AM_MEDIA_TYPE* pmt) mut => VT.SetFileName(ref this, pszFileName, pmt);
			public HRESULT GetCurFile(out PWSTR ppszFileName, out AM_MEDIA_TYPE pmt) mut => VT.GetCurFile(ref this, out ppszFileName, out pmt);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFileSinkFilter self, PWSTR pszFileName, AM_MEDIA_TYPE* pmt) SetFileName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFileSinkFilter self, out PWSTR ppszFileName, out AM_MEDIA_TYPE pmt) GetCurFile;
			}
		}
		[CRepr]
		public struct IFileSinkFilter2 : IFileSinkFilter
		{
			public const new Guid IID = .(0x00855b90, 0xce1b, 0x11d0, 0xbd, 0x4f, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMode(uint32 dwFlags) mut => VT.SetMode(ref this, dwFlags);
			public HRESULT GetMode(out uint32 pdwFlags) mut => VT.GetMode(ref this, out pdwFlags);

			[CRepr]
			public struct VTable : IFileSinkFilter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFileSinkFilter2 self, uint32 dwFlags) SetMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFileSinkFilter2 self, out uint32 pdwFlags) GetMode;
			}
		}
		[CRepr]
		public struct IGraphBuilder : IFilterGraph
		{
			public const new Guid IID = .(0x56a868a9, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Connect(ref IPin ppinOut, ref IPin ppinIn) mut => VT.Connect(ref this, ref ppinOut, ref ppinIn);
			public HRESULT Render(ref IPin ppinOut) mut => VT.Render(ref this, ref ppinOut);
			public HRESULT RenderFile(PWSTR lpcwstrFile, PWSTR lpcwstrPlayList) mut => VT.RenderFile(ref this, lpcwstrFile, lpcwstrPlayList);
			public HRESULT AddSourceFilter(PWSTR lpcwstrFileName, PWSTR lpcwstrFilterName, out IBaseFilter* ppFilter) mut => VT.AddSourceFilter(ref this, lpcwstrFileName, lpcwstrFilterName, out ppFilter);
			public HRESULT SetLogFile(uint hFile) mut => VT.SetLogFile(ref this, hFile);
			public HRESULT Abort() mut => VT.Abort(ref this);
			public HRESULT ShouldOperationContinue() mut => VT.ShouldOperationContinue(ref this);

			[CRepr]
			public struct VTable : IFilterGraph.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self, ref IPin ppinOut, ref IPin ppinIn) Connect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self, ref IPin ppinOut) Render;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self, PWSTR lpcwstrFile, PWSTR lpcwstrPlayList) RenderFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self, PWSTR lpcwstrFileName, PWSTR lpcwstrFilterName, out IBaseFilter* ppFilter) AddSourceFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self, uint hFile) SetLogFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self) Abort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphBuilder self) ShouldOperationContinue;
			}
		}
		[CRepr]
		public struct ICaptureGraphBuilder : IUnknown
		{
			public const new Guid IID = .(0xbf87b6e0, 0x8c27, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetFiltergraph(ref IGraphBuilder pfg) mut => VT.SetFiltergraph(ref this, ref pfg);
			public HRESULT GetFiltergraph(out IGraphBuilder* ppfg) mut => VT.GetFiltergraph(ref this, out ppfg);
			public HRESULT SetOutputFileName(in Guid pType, PWSTR lpstrFile, out IBaseFilter* ppf, out IFileSinkFilter* ppSink) mut => VT.SetOutputFileName(ref this, pType, lpstrFile, out ppf, out ppSink);
			public HRESULT FindInterface(Guid* pCategory, ref IBaseFilter pf, in Guid riid, void** ppint) mut => VT.FindInterface(ref this, pCategory, ref pf, riid, ppint);
			public HRESULT RenderStream(Guid* pCategory, ref IUnknown pSource, ref IBaseFilter pfCompressor, ref IBaseFilter pfRenderer) mut => VT.RenderStream(ref this, pCategory, ref pSource, ref pfCompressor, ref pfRenderer);
			public HRESULT ControlStream(Guid* pCategory, ref IBaseFilter pFilter, out int64 pstart, out int64 pstop, uint16 wStartCookie, uint16 wStopCookie) mut => VT.ControlStream(ref this, pCategory, ref pFilter, out pstart, out pstop, wStartCookie, wStopCookie);
			public HRESULT AllocCapFile(PWSTR lpstr, uint64 dwlSize) mut => VT.AllocCapFile(ref this, lpstr, dwlSize);
			public HRESULT CopyCaptureFile(PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, ref IAMCopyCaptureFileProgress pCallback) mut => VT.CopyCaptureFile(ref this, lpwstrOld, lpwstrNew, fAllowEscAbort, ref pCallback);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, ref IGraphBuilder pfg) SetFiltergraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, out IGraphBuilder* ppfg) GetFiltergraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, in Guid pType, PWSTR lpstrFile, out IBaseFilter* ppf, out IFileSinkFilter* ppSink) SetOutputFileName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, Guid* pCategory, ref IBaseFilter pf, in Guid riid, void** ppint) FindInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, Guid* pCategory, ref IUnknown pSource, ref IBaseFilter pfCompressor, ref IBaseFilter pfRenderer) RenderStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, Guid* pCategory, ref IBaseFilter pFilter, out int64 pstart, out int64 pstop, uint16 wStartCookie, uint16 wStopCookie) ControlStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, PWSTR lpstr, uint64 dwlSize) AllocCapFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder self, PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, ref IAMCopyCaptureFileProgress pCallback) CopyCaptureFile;
			}
		}
		[CRepr]
		public struct IAMCopyCaptureFileProgress : IUnknown
		{
			public const new Guid IID = .(0x670d1d20, 0xa068, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Progress(int32 iProgress) mut => VT.Progress(ref this, iProgress);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCopyCaptureFileProgress self, int32 iProgress) Progress;
			}
		}
		[CRepr]
		public struct ICaptureGraphBuilder2 : IUnknown
		{
			public const new Guid IID = .(0x93e5a4e0, 0x2d50, 0x11d2, 0xab, 0xfa, 0x00, 0xa0, 0xc9, 0xc6, 0xe3, 0x8d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetFiltergraph(ref IGraphBuilder pfg) mut => VT.SetFiltergraph(ref this, ref pfg);
			public HRESULT GetFiltergraph(out IGraphBuilder* ppfg) mut => VT.GetFiltergraph(ref this, out ppfg);
			public HRESULT SetOutputFileName(in Guid pType, PWSTR lpstrFile, out IBaseFilter* ppf, IFileSinkFilter** ppSink) mut => VT.SetOutputFileName(ref this, pType, lpstrFile, out ppf, ppSink);
			public HRESULT FindInterface(Guid* pCategory, Guid* pType, ref IBaseFilter pf, in Guid riid, void** ppint) mut => VT.FindInterface(ref this, pCategory, pType, ref pf, riid, ppint);
			public HRESULT RenderStream(Guid* pCategory, in Guid pType, ref IUnknown pSource, ref IBaseFilter pfCompressor, ref IBaseFilter pfRenderer) mut => VT.RenderStream(ref this, pCategory, pType, ref pSource, ref pfCompressor, ref pfRenderer);
			public HRESULT ControlStream(in Guid pCategory, in Guid pType, ref IBaseFilter pFilter, int64* pstart, int64* pstop, uint16 wStartCookie, uint16 wStopCookie) mut => VT.ControlStream(ref this, pCategory, pType, ref pFilter, pstart, pstop, wStartCookie, wStopCookie);
			public HRESULT AllocCapFile(PWSTR lpstr, uint64 dwlSize) mut => VT.AllocCapFile(ref this, lpstr, dwlSize);
			public HRESULT CopyCaptureFile(PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, ref IAMCopyCaptureFileProgress pCallback) mut => VT.CopyCaptureFile(ref this, lpwstrOld, lpwstrNew, fAllowEscAbort, ref pCallback);
			public HRESULT FindPin(ref IUnknown pSource, PIN_DIRECTION pindir, Guid* pCategory, Guid* pType, BOOL fUnconnected, int32 num, out IPin* ppPin) mut => VT.FindPin(ref this, ref pSource, pindir, pCategory, pType, fUnconnected, num, out ppPin);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, ref IGraphBuilder pfg) SetFiltergraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, out IGraphBuilder* ppfg) GetFiltergraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, in Guid pType, PWSTR lpstrFile, out IBaseFilter* ppf, IFileSinkFilter** ppSink) SetOutputFileName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, Guid* pCategory, Guid* pType, ref IBaseFilter pf, in Guid riid, void** ppint) FindInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, Guid* pCategory, in Guid pType, ref IUnknown pSource, ref IBaseFilter pfCompressor, ref IBaseFilter pfRenderer) RenderStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, in Guid pCategory, in Guid pType, ref IBaseFilter pFilter, int64* pstart, int64* pstop, uint16 wStartCookie, uint16 wStopCookie) ControlStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, PWSTR lpstr, uint64 dwlSize) AllocCapFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, PWSTR lpwstrOld, PWSTR lpwstrNew, int32 fAllowEscAbort, ref IAMCopyCaptureFileProgress pCallback) CopyCaptureFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptureGraphBuilder2 self, ref IUnknown pSource, PIN_DIRECTION pindir, Guid* pCategory, Guid* pType, BOOL fUnconnected, int32 num, out IPin* ppPin) FindPin;
			}
		}
		[CRepr]
		public struct IFilterGraph2 : IGraphBuilder
		{
			public const new Guid IID = .(0x36b73882, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddSourceFilterForMoniker(ref IMoniker pMoniker, ref IBindCtx pCtx, PWSTR lpcwstrFilterName, out IBaseFilter* ppFilter) mut => VT.AddSourceFilterForMoniker(ref this, ref pMoniker, ref pCtx, lpcwstrFilterName, out ppFilter);
			public HRESULT ReconnectEx(ref IPin ppin, AM_MEDIA_TYPE* pmt) mut => VT.ReconnectEx(ref this, ref ppin, pmt);
			public HRESULT RenderEx(ref IPin pPinOut, uint32 dwFlags, out uint32 pvContext) mut => VT.RenderEx(ref this, ref pPinOut, dwFlags, out pvContext);

			[CRepr]
			public struct VTable : IGraphBuilder.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph2 self, ref IMoniker pMoniker, ref IBindCtx pCtx, PWSTR lpcwstrFilterName, out IBaseFilter* ppFilter) AddSourceFilterForMoniker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph2 self, ref IPin ppin, AM_MEDIA_TYPE* pmt) ReconnectEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph2 self, ref IPin pPinOut, uint32 dwFlags, out uint32 pvContext) RenderEx;
			}
		}
		[CRepr]
		public struct IFilterGraph3 : IFilterGraph2
		{
			public const new Guid IID = .(0xaaf38154, 0xb80b, 0x422f, 0x91, 0xe6, 0xb6, 0x64, 0x67, 0x50, 0x9a, 0x07);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetSyncSourceEx(ref IReferenceClock pClockForMostOfFilterGraph, ref IReferenceClock pClockForFilter, ref IBaseFilter pFilter) mut => VT.SetSyncSourceEx(ref this, ref pClockForMostOfFilterGraph, ref pClockForFilter, ref pFilter);

			[CRepr]
			public struct VTable : IFilterGraph2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterGraph3 self, ref IReferenceClock pClockForMostOfFilterGraph, ref IReferenceClock pClockForFilter, ref IBaseFilter pFilter) SetSyncSourceEx;
			}
		}
		[CRepr]
		public struct IStreamBuilder : IUnknown
		{
			public const new Guid IID = .(0x56a868bf, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Render(ref IPin ppinOut, ref IGraphBuilder pGraph) mut => VT.Render(ref this, ref ppinOut, ref pGraph);
			public HRESULT Backout(ref IPin ppinOut, ref IGraphBuilder pGraph) mut => VT.Backout(ref this, ref ppinOut, ref pGraph);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBuilder self, ref IPin ppinOut, ref IGraphBuilder pGraph) Render;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBuilder self, ref IPin ppinOut, ref IGraphBuilder pGraph) Backout;
			}
		}
		[CRepr]
		public struct IAsyncReader : IUnknown
		{
			public const new Guid IID = .(0x56a868aa, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RequestAllocator(ref IMemAllocator pPreferred, ref ALLOCATOR_PROPERTIES pProps, out IMemAllocator* ppActual) mut => VT.RequestAllocator(ref this, ref pPreferred, ref pProps, out ppActual);
			public HRESULT Request(ref IMediaSample pSample, uint dwUser) mut => VT.Request(ref this, ref pSample, dwUser);
			public HRESULT WaitForNext(uint32 dwTimeout, IMediaSample** ppSample, out uint pdwUser) mut => VT.WaitForNext(ref this, dwTimeout, ppSample, out pdwUser);
			public HRESULT SyncReadAligned(ref IMediaSample pSample) mut => VT.SyncReadAligned(ref this, ref pSample);
			public HRESULT SyncRead(int64 llPosition, int32 lLength, out uint8 pBuffer) mut => VT.SyncRead(ref this, llPosition, lLength, out pBuffer);
			public HRESULT Length(out int64 pTotal, out int64 pAvailable) mut => VT.Length(ref this, out pTotal, out pAvailable);
			public HRESULT BeginFlush() mut => VT.BeginFlush(ref this);
			public HRESULT EndFlush() mut => VT.EndFlush(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self, ref IMemAllocator pPreferred, ref ALLOCATOR_PROPERTIES pProps, out IMemAllocator* ppActual) RequestAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self, ref IMediaSample pSample, uint dwUser) Request;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self, uint32 dwTimeout, IMediaSample** ppSample, out uint pdwUser) WaitForNext;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self, ref IMediaSample pSample) SyncReadAligned;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self, int64 llPosition, int32 lLength, out uint8 pBuffer) SyncRead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self, out int64 pTotal, out int64 pAvailable) Length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self) BeginFlush;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAsyncReader self) EndFlush;
			}
		}
		[CRepr]
		public struct IGraphVersion : IUnknown
		{
			public const new Guid IID = .(0x56a868ab, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryVersion(out int32 pVersion) mut => VT.QueryVersion(ref this, out pVersion);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphVersion self, out int32 pVersion) QueryVersion;
			}
		}
		[CRepr]
		public struct IResourceConsumer : IUnknown
		{
			public const new Guid IID = .(0x56a868ad, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AcquireResource(int32 idResource) mut => VT.AcquireResource(ref this, idResource);
			public HRESULT ReleaseResource(int32 idResource) mut => VT.ReleaseResource(ref this, idResource);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceConsumer self, int32 idResource) AcquireResource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceConsumer self, int32 idResource) ReleaseResource;
			}
		}
		[CRepr]
		public struct IResourceManager : IUnknown
		{
			public const new Guid IID = .(0x56a868ac, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Register(PWSTR pName, int32 cResource, out int32 plToken) mut => VT.Register(ref this, pName, cResource, out plToken);
			public HRESULT RegisterGroup(PWSTR pName, int32 cResource, int32* palTokens, out int32 plToken) mut => VT.RegisterGroup(ref this, pName, cResource, palTokens, out plToken);
			public HRESULT RequestResource(int32 idResource, ref IUnknown pFocusObject, ref IResourceConsumer pConsumer) mut => VT.RequestResource(ref this, idResource, ref pFocusObject, ref pConsumer);
			public HRESULT NotifyAcquire(int32 idResource, ref IResourceConsumer pConsumer, HRESULT hr) mut => VT.NotifyAcquire(ref this, idResource, ref pConsumer, hr);
			public HRESULT NotifyRelease(int32 idResource, ref IResourceConsumer pConsumer, BOOL bStillWant) mut => VT.NotifyRelease(ref this, idResource, ref pConsumer, bStillWant);
			public HRESULT CancelRequest(int32 idResource, ref IResourceConsumer pConsumer) mut => VT.CancelRequest(ref this, idResource, ref pConsumer);
			public HRESULT SetFocus(ref IUnknown pFocusObject) mut => VT.SetFocus(ref this, ref pFocusObject);
			public HRESULT ReleaseFocus(ref IUnknown pFocusObject) mut => VT.ReleaseFocus(ref this, ref pFocusObject);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, PWSTR pName, int32 cResource, out int32 plToken) Register;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, PWSTR pName, int32 cResource, int32* palTokens, out int32 plToken) RegisterGroup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, int32 idResource, ref IUnknown pFocusObject, ref IResourceConsumer pConsumer) RequestResource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, int32 idResource, ref IResourceConsumer pConsumer, HRESULT hr) NotifyAcquire;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, int32 idResource, ref IResourceConsumer pConsumer, BOOL bStillWant) NotifyRelease;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, int32 idResource, ref IResourceConsumer pConsumer) CancelRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, ref IUnknown pFocusObject) SetFocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IResourceManager self, ref IUnknown pFocusObject) ReleaseFocus;
			}
		}
		[CRepr]
		public struct IDistributorNotify : IUnknown
		{
			public const new Guid IID = .(0x56a868af, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Stop() mut => VT.Stop(ref this);
			public HRESULT Pause() mut => VT.Pause(ref this);
			public HRESULT Run(int64 tStart) mut => VT.Run(ref this, tStart);
			public HRESULT SetSyncSource(ref IReferenceClock pClock) mut => VT.SetSyncSource(ref this, ref pClock);
			public HRESULT NotifyGraphChange() mut => VT.NotifyGraphChange(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDistributorNotify self) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDistributorNotify self) Pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDistributorNotify self, int64 tStart) Run;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDistributorNotify self, ref IReferenceClock pClock) SetSyncSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDistributorNotify self) NotifyGraphChange;
			}
		}
		[CRepr]
		public struct IAMStreamControl : IUnknown
		{
			public const new Guid IID = .(0x36b73881, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StartAt(int64* ptStart, uint32 dwCookie) mut => VT.StartAt(ref this, ptStart, dwCookie);
			public HRESULT StopAt(int64* ptStop, BOOL bSendExtra, uint32 dwCookie) mut => VT.StopAt(ref this, ptStop, bSendExtra, dwCookie);
			public HRESULT GetInfo(out AM_STREAM_INFO pInfo) mut => VT.GetInfo(ref this, out pInfo);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamControl self, int64* ptStart, uint32 dwCookie) StartAt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamControl self, int64* ptStop, BOOL bSendExtra, uint32 dwCookie) StopAt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamControl self, out AM_STREAM_INFO pInfo) GetInfo;
			}
		}
		[CRepr]
		public struct ISeekingPassThru : IUnknown
		{
			public const new Guid IID = .(0x36b73883, 0xc2c8, 0x11cf, 0x8b, 0x46, 0x00, 0x80, 0x5f, 0x6c, 0xef, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Init(BOOL bSupportRendering, ref IPin pPin) mut => VT.Init(ref this, bSupportRendering, ref pPin);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISeekingPassThru self, BOOL bSupportRendering, ref IPin pPin) Init;
			}
		}
		[CRepr]
		public struct IAMStreamConfig : IUnknown
		{
			public const new Guid IID = .(0xc6e13340, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetFormat(out AM_MEDIA_TYPE pmt) mut => VT.SetFormat(ref this, out pmt);
			public HRESULT GetFormat(out AM_MEDIA_TYPE* ppmt) mut => VT.GetFormat(ref this, out ppmt);
			public HRESULT GetNumberOfCapabilities(out int32 piCount, out int32 piSize) mut => VT.GetNumberOfCapabilities(ref this, out piCount, out piSize);
			public HRESULT GetStreamCaps(int32 iIndex, out AM_MEDIA_TYPE* ppmt, out uint8 pSCC) mut => VT.GetStreamCaps(ref this, iIndex, out ppmt, out pSCC);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamConfig self, out AM_MEDIA_TYPE pmt) SetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamConfig self, out AM_MEDIA_TYPE* ppmt) GetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamConfig self, out int32 piCount, out int32 piSize) GetNumberOfCapabilities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamConfig self, int32 iIndex, out AM_MEDIA_TYPE* ppmt, out uint8 pSCC) GetStreamCaps;
			}
		}
		[CRepr]
		public struct IConfigInterleaving : IUnknown
		{
			public const new Guid IID = .(0xbee3d220, 0x157b, 0x11d0, 0xbd, 0x23, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Mode(InterleavingMode mode) mut => VT.put_Mode(ref this, mode);
			public HRESULT get_Mode(out InterleavingMode pMode) mut => VT.get_Mode(ref this, out pMode);
			public HRESULT put_Interleaving(in int64 prtInterleave, in int64 prtPreroll) mut => VT.put_Interleaving(ref this, prtInterleave, prtPreroll);
			public HRESULT get_Interleaving(out int64 prtInterleave, out int64 prtPreroll) mut => VT.get_Interleaving(ref this, out prtInterleave, out prtPreroll);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigInterleaving self, InterleavingMode mode) put_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigInterleaving self, out InterleavingMode pMode) get_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigInterleaving self, in int64 prtInterleave, in int64 prtPreroll) put_Interleaving;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigInterleaving self, out int64 prtInterleave, out int64 prtPreroll) get_Interleaving;
			}
		}
		[CRepr]
		public struct IConfigAviMux : IUnknown
		{
			public const new Guid IID = .(0x5acd6aa0, 0xf482, 0x11ce, 0x8b, 0x67, 0x00, 0xaa, 0x00, 0xa3, 0xf1, 0xa6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMasterStream(int32 iStream) mut => VT.SetMasterStream(ref this, iStream);
			public HRESULT GetMasterStream(out int32 pStream) mut => VT.GetMasterStream(ref this, out pStream);
			public HRESULT SetOutputCompatibilityIndex(BOOL fOldIndex) mut => VT.SetOutputCompatibilityIndex(ref this, fOldIndex);
			public HRESULT GetOutputCompatibilityIndex(out BOOL pfOldIndex) mut => VT.GetOutputCompatibilityIndex(ref this, out pfOldIndex);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAviMux self, int32 iStream) SetMasterStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAviMux self, out int32 pStream) GetMasterStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAviMux self, BOOL fOldIndex) SetOutputCompatibilityIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAviMux self, out BOOL pfOldIndex) GetOutputCompatibilityIndex;
			}
		}
		[CRepr]
		public struct IAMVideoCompression : IUnknown
		{
			public const new Guid IID = .(0xc6e13343, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_KeyFrameRate(int32 KeyFrameRate) mut => VT.put_KeyFrameRate(ref this, KeyFrameRate);
			public HRESULT get_KeyFrameRate(out int32 pKeyFrameRate) mut => VT.get_KeyFrameRate(ref this, out pKeyFrameRate);
			public HRESULT put_PFramesPerKeyFrame(int32 PFramesPerKeyFrame) mut => VT.put_PFramesPerKeyFrame(ref this, PFramesPerKeyFrame);
			public HRESULT get_PFramesPerKeyFrame(out int32 pPFramesPerKeyFrame) mut => VT.get_PFramesPerKeyFrame(ref this, out pPFramesPerKeyFrame);
			public HRESULT put_Quality(double Quality) mut => VT.put_Quality(ref this, Quality);
			public HRESULT get_Quality(out double pQuality) mut => VT.get_Quality(ref this, out pQuality);
			public HRESULT put_WindowSize(uint64 WindowSize) mut => VT.put_WindowSize(ref this, WindowSize);
			public HRESULT get_WindowSize(out uint64 pWindowSize) mut => VT.get_WindowSize(ref this, out pWindowSize);
			public HRESULT GetInfo(PWSTR pszVersion, int32* pcbVersion, PWSTR pszDescription, int32* pcbDescription, int32* pDefaultKeyFrameRate, int32* pDefaultPFramesPerKey, double* pDefaultQuality, int32* pCapabilities) mut => VT.GetInfo(ref this, pszVersion, pcbVersion, pszDescription, pcbDescription, pDefaultKeyFrameRate, pDefaultPFramesPerKey, pDefaultQuality, pCapabilities);
			public HRESULT OverrideKeyFrame(int32 FrameNumber) mut => VT.OverrideKeyFrame(ref this, FrameNumber);
			public HRESULT OverrideFrameSize(int32 FrameNumber, int32 Size) mut => VT.OverrideFrameSize(ref this, FrameNumber, Size);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, int32 KeyFrameRate) put_KeyFrameRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, out int32 pKeyFrameRate) get_KeyFrameRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, int32 PFramesPerKeyFrame) put_PFramesPerKeyFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, out int32 pPFramesPerKeyFrame) get_PFramesPerKeyFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, double Quality) put_Quality;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, out double pQuality) get_Quality;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, uint64 WindowSize) put_WindowSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, out uint64 pWindowSize) get_WindowSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, PWSTR pszVersion, int32* pcbVersion, PWSTR pszDescription, int32* pcbDescription, int32* pDefaultKeyFrameRate, int32* pDefaultPFramesPerKey, double* pDefaultQuality, int32* pCapabilities) GetInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, int32 FrameNumber) OverrideKeyFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoCompression self, int32 FrameNumber, int32 Size) OverrideFrameSize;
			}
		}
		[CRepr]
		public struct IAMVfwCaptureDialogs : IUnknown
		{
			public const new Guid IID = .(0xd8d715a0, 0x6e5e, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT HasDialog(int32 iDialog) mut => VT.HasDialog(ref this, iDialog);
			public HRESULT ShowDialog(int32 iDialog, HWND hwnd) mut => VT.ShowDialog(ref this, iDialog, hwnd);
			public HRESULT SendDriverMessage(int32 iDialog, int32 uMsg, int32 dw1, int32 dw2) mut => VT.SendDriverMessage(ref this, iDialog, uMsg, dw1, dw2);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCaptureDialogs self, int32 iDialog) HasDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCaptureDialogs self, int32 iDialog, HWND hwnd) ShowDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCaptureDialogs self, int32 iDialog, int32 uMsg, int32 dw1, int32 dw2) SendDriverMessage;
			}
		}
		[CRepr]
		public struct IAMVfwCompressDialogs : IUnknown
		{
			public const new Guid IID = .(0xd8d715a3, 0x6e5e, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ShowDialog(int32 iDialog, HWND hwnd) mut => VT.ShowDialog(ref this, iDialog, hwnd);
			public HRESULT GetState(void* pState, out int32 pcbState) mut => VT.GetState(ref this, pState, out pcbState);
			public HRESULT SetState(void* pState, int32 cbState) mut => VT.SetState(ref this, pState, cbState);
			public HRESULT SendDriverMessage(int32 uMsg, int32 dw1, int32 dw2) mut => VT.SendDriverMessage(ref this, uMsg, dw1, dw2);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCompressDialogs self, int32 iDialog, HWND hwnd) ShowDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCompressDialogs self, void* pState, out int32 pcbState) GetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCompressDialogs self, void* pState, int32 cbState) SetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVfwCompressDialogs self, int32 uMsg, int32 dw1, int32 dw2) SendDriverMessage;
			}
		}
		[CRepr]
		public struct IAMDroppedFrames : IUnknown
		{
			public const new Guid IID = .(0xc6e13344, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNumDropped(out int32 plDropped) mut => VT.GetNumDropped(ref this, out plDropped);
			public HRESULT GetNumNotDropped(out int32 plNotDropped) mut => VT.GetNumNotDropped(ref this, out plNotDropped);
			public HRESULT GetDroppedInfo(int32 lSize, out int32 plArray, out int32 plNumCopied) mut => VT.GetDroppedInfo(ref this, lSize, out plArray, out plNumCopied);
			public HRESULT GetAverageFrameSize(out int32 plAverageSize) mut => VT.GetAverageFrameSize(ref this, out plAverageSize);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDroppedFrames self, out int32 plDropped) GetNumDropped;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDroppedFrames self, out int32 plNotDropped) GetNumNotDropped;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDroppedFrames self, int32 lSize, out int32 plArray, out int32 plNumCopied) GetDroppedInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDroppedFrames self, out int32 plAverageSize) GetAverageFrameSize;
			}
		}
		[CRepr]
		public struct IAMAudioInputMixer : IUnknown
		{
			public const new Guid IID = .(0x54c39221, 0x8380, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Enable(BOOL fEnable) mut => VT.put_Enable(ref this, fEnable);
			public HRESULT get_Enable(out BOOL pfEnable) mut => VT.get_Enable(ref this, out pfEnable);
			public HRESULT put_Mono(BOOL fMono) mut => VT.put_Mono(ref this, fMono);
			public HRESULT get_Mono(out BOOL pfMono) mut => VT.get_Mono(ref this, out pfMono);
			public HRESULT put_MixLevel(double Level) mut => VT.put_MixLevel(ref this, Level);
			public HRESULT get_MixLevel(out double pLevel) mut => VT.get_MixLevel(ref this, out pLevel);
			public HRESULT put_Pan(double Pan) mut => VT.put_Pan(ref this, Pan);
			public HRESULT get_Pan(out double pPan) mut => VT.get_Pan(ref this, out pPan);
			public HRESULT put_Loudness(BOOL fLoudness) mut => VT.put_Loudness(ref this, fLoudness);
			public HRESULT get_Loudness(out BOOL pfLoudness) mut => VT.get_Loudness(ref this, out pfLoudness);
			public HRESULT put_Treble(double Treble) mut => VT.put_Treble(ref this, Treble);
			public HRESULT get_Treble(out double pTreble) mut => VT.get_Treble(ref this, out pTreble);
			public HRESULT get_TrebleRange(out double pRange) mut => VT.get_TrebleRange(ref this, out pRange);
			public HRESULT put_Bass(double Bass) mut => VT.put_Bass(ref this, Bass);
			public HRESULT get_Bass(out double pBass) mut => VT.get_Bass(ref this, out pBass);
			public HRESULT get_BassRange(out double pRange) mut => VT.get_BassRange(ref this, out pRange);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, BOOL fEnable) put_Enable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out BOOL pfEnable) get_Enable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, BOOL fMono) put_Mono;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out BOOL pfMono) get_Mono;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, double Level) put_MixLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out double pLevel) get_MixLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, double Pan) put_Pan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out double pPan) get_Pan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, BOOL fLoudness) put_Loudness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out BOOL pfLoudness) get_Loudness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, double Treble) put_Treble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out double pTreble) get_Treble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out double pRange) get_TrebleRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, double Bass) put_Bass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out double pBass) get_Bass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioInputMixer self, out double pRange) get_BassRange;
			}
		}
		[CRepr]
		public struct IAMBufferNegotiation : IUnknown
		{
			public const new Guid IID = .(0x56ed71a0, 0xaf5f, 0x11d0, 0xb3, 0xf0, 0x00, 0xaa, 0x00, 0x37, 0x61, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SuggestAllocatorProperties(in ALLOCATOR_PROPERTIES pprop) mut => VT.SuggestAllocatorProperties(ref this, pprop);
			public HRESULT GetAllocatorProperties(out ALLOCATOR_PROPERTIES pprop) mut => VT.GetAllocatorProperties(ref this, out pprop);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMBufferNegotiation self, in ALLOCATOR_PROPERTIES pprop) SuggestAllocatorProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMBufferNegotiation self, out ALLOCATOR_PROPERTIES pprop) GetAllocatorProperties;
			}
		}
		[CRepr]
		public struct IAMAnalogVideoDecoder : IUnknown
		{
			public const new Guid IID = .(0xc6e13350, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AvailableTVFormats(out int32 lAnalogVideoStandard) mut => VT.get_AvailableTVFormats(ref this, out lAnalogVideoStandard);
			public HRESULT put_TVFormat(int32 lAnalogVideoStandard) mut => VT.put_TVFormat(ref this, lAnalogVideoStandard);
			public HRESULT get_TVFormat(out int32 plAnalogVideoStandard) mut => VT.get_TVFormat(ref this, out plAnalogVideoStandard);
			public HRESULT get_HorizontalLocked(out int32 plLocked) mut => VT.get_HorizontalLocked(ref this, out plLocked);
			public HRESULT put_VCRHorizontalLocking(int32 lVCRHorizontalLocking) mut => VT.put_VCRHorizontalLocking(ref this, lVCRHorizontalLocking);
			public HRESULT get_VCRHorizontalLocking(out int32 plVCRHorizontalLocking) mut => VT.get_VCRHorizontalLocking(ref this, out plVCRHorizontalLocking);
			public HRESULT get_NumberOfLines(out int32 plNumberOfLines) mut => VT.get_NumberOfLines(ref this, out plNumberOfLines);
			public HRESULT put_OutputEnable(int32 lOutputEnable) mut => VT.put_OutputEnable(ref this, lOutputEnable);
			public HRESULT get_OutputEnable(out int32 plOutputEnable) mut => VT.get_OutputEnable(ref this, out plOutputEnable);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, out int32 lAnalogVideoStandard) get_AvailableTVFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, int32 lAnalogVideoStandard) put_TVFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, out int32 plAnalogVideoStandard) get_TVFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, out int32 plLocked) get_HorizontalLocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, int32 lVCRHorizontalLocking) put_VCRHorizontalLocking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, out int32 plVCRHorizontalLocking) get_VCRHorizontalLocking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, out int32 plNumberOfLines) get_NumberOfLines;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, int32 lOutputEnable) put_OutputEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoDecoder self, out int32 plOutputEnable) get_OutputEnable;
			}
		}
		[CRepr]
		public struct IAMVideoProcAmp : IUnknown
		{
			public const new Guid IID = .(0xc6e13360, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRange(int32 Property, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlags) mut => VT.GetRange(ref this, Property, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlags);
			public HRESULT Set(int32 Property, int32 lValue, int32 Flags) mut => VT.Set(ref this, Property, lValue, Flags);
			public HRESULT Get(int32 Property, out int32 lValue, out int32 Flags) mut => VT.Get(ref this, Property, out lValue, out Flags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoProcAmp self, int32 Property, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlags) GetRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoProcAmp self, int32 Property, int32 lValue, int32 Flags) Set;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoProcAmp self, int32 Property, out int32 lValue, out int32 Flags) Get;
			}
		}
		[CRepr]
		public struct IAMCameraControl : IUnknown
		{
			public const new Guid IID = .(0xc6e13370, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRange(int32 Property, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlags) mut => VT.GetRange(ref this, Property, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlags);
			public HRESULT Set(int32 Property, int32 lValue, int32 Flags) mut => VT.Set(ref this, Property, lValue, Flags);
			public HRESULT Get(int32 Property, out int32 lValue, out int32 Flags) mut => VT.Get(ref this, Property, out lValue, out Flags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCameraControl self, int32 Property, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlags) GetRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCameraControl self, int32 Property, int32 lValue, int32 Flags) Set;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCameraControl self, int32 Property, out int32 lValue, out int32 Flags) Get;
			}
		}
		[CRepr]
		public struct IAMVideoControl : IUnknown
		{
			public const new Guid IID = .(0x6a2e0670, 0x28e4, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCaps(ref IPin pPin, out int32 pCapsFlags) mut => VT.GetCaps(ref this, ref pPin, out pCapsFlags);
			public HRESULT SetMode(ref IPin pPin, int32 Mode) mut => VT.SetMode(ref this, ref pPin, Mode);
			public HRESULT GetMode(ref IPin pPin, out int32 Mode) mut => VT.GetMode(ref this, ref pPin, out Mode);
			public HRESULT GetCurrentActualFrameRate(ref IPin pPin, out int64 ActualFrameRate) mut => VT.GetCurrentActualFrameRate(ref this, ref pPin, out ActualFrameRate);
			public HRESULT GetMaxAvailableFrameRate(ref IPin pPin, int32 iIndex, SIZE Dimensions, out int64 MaxAvailableFrameRate) mut => VT.GetMaxAvailableFrameRate(ref this, ref pPin, iIndex, Dimensions, out MaxAvailableFrameRate);
			public HRESULT GetFrameRateList(ref IPin pPin, int32 iIndex, SIZE Dimensions, out int32 ListSize, out int64* FrameRates) mut => VT.GetFrameRateList(ref this, ref pPin, iIndex, Dimensions, out ListSize, out FrameRates);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoControl self, ref IPin pPin, out int32 pCapsFlags) GetCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoControl self, ref IPin pPin, int32 Mode) SetMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoControl self, ref IPin pPin, out int32 Mode) GetMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoControl self, ref IPin pPin, out int64 ActualFrameRate) GetCurrentActualFrameRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoControl self, ref IPin pPin, int32 iIndex, SIZE Dimensions, out int64 MaxAvailableFrameRate) GetMaxAvailableFrameRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoControl self, ref IPin pPin, int32 iIndex, SIZE Dimensions, out int32 ListSize, out int64* FrameRates) GetFrameRateList;
			}
		}
		[CRepr]
		public struct IAMCrossbar : IUnknown
		{
			public const new Guid IID = .(0xc6e13380, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_PinCounts(out int32 OutputPinCount, out int32 InputPinCount) mut => VT.get_PinCounts(ref this, out OutputPinCount, out InputPinCount);
			public HRESULT CanRoute(int32 OutputPinIndex, int32 InputPinIndex) mut => VT.CanRoute(ref this, OutputPinIndex, InputPinIndex);
			public HRESULT Route(int32 OutputPinIndex, int32 InputPinIndex) mut => VT.Route(ref this, OutputPinIndex, InputPinIndex);
			public HRESULT get_IsRoutedTo(int32 OutputPinIndex, out int32 InputPinIndex) mut => VT.get_IsRoutedTo(ref this, OutputPinIndex, out InputPinIndex);
			public HRESULT get_CrossbarPinInfo(BOOL IsInputPin, int32 PinIndex, out int32 PinIndexRelated, out int32 PhysicalType) mut => VT.get_CrossbarPinInfo(ref this, IsInputPin, PinIndex, out PinIndexRelated, out PhysicalType);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCrossbar self, out int32 OutputPinCount, out int32 InputPinCount) get_PinCounts;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCrossbar self, int32 OutputPinIndex, int32 InputPinIndex) CanRoute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCrossbar self, int32 OutputPinIndex, int32 InputPinIndex) Route;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCrossbar self, int32 OutputPinIndex, out int32 InputPinIndex) get_IsRoutedTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCrossbar self, BOOL IsInputPin, int32 PinIndex, out int32 PinIndexRelated, out int32 PhysicalType) get_CrossbarPinInfo;
			}
		}
		[CRepr]
		public struct IAMTuner : IUnknown
		{
			public const new Guid IID = .(0x211a8761, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Channel(int32 lChannel, int32 lVideoSubChannel, int32 lAudioSubChannel) mut => VT.put_Channel(ref this, lChannel, lVideoSubChannel, lAudioSubChannel);
			public HRESULT get_Channel(out int32 plChannel, out int32 plVideoSubChannel, out int32 plAudioSubChannel) mut => VT.get_Channel(ref this, out plChannel, out plVideoSubChannel, out plAudioSubChannel);
			public HRESULT ChannelMinMax(out int32 lChannelMin, out int32 lChannelMax) mut => VT.ChannelMinMax(ref this, out lChannelMin, out lChannelMax);
			public HRESULT put_CountryCode(int32 lCountryCode) mut => VT.put_CountryCode(ref this, lCountryCode);
			public HRESULT get_CountryCode(out int32 plCountryCode) mut => VT.get_CountryCode(ref this, out plCountryCode);
			public HRESULT put_TuningSpace(int32 lTuningSpace) mut => VT.put_TuningSpace(ref this, lTuningSpace);
			public HRESULT get_TuningSpace(out int32 plTuningSpace) mut => VT.get_TuningSpace(ref this, out plTuningSpace);
			public HRESULT Logon(HANDLE hCurrentUser) mut => VT.Logon(ref this, hCurrentUser);
			public HRESULT Logout() mut => VT.Logout(ref this);
			public HRESULT SignalPresent(out int32 plSignalStrength) mut => VT.SignalPresent(ref this, out plSignalStrength);
			public HRESULT put_Mode(AMTunerModeType lMode) mut => VT.put_Mode(ref this, lMode);
			public HRESULT get_Mode(out AMTunerModeType plMode) mut => VT.get_Mode(ref this, out plMode);
			public HRESULT GetAvailableModes(out int32 plModes) mut => VT.GetAvailableModes(ref this, out plModes);
			public HRESULT RegisterNotificationCallBack(ref IAMTunerNotification pNotify, int32 lEvents) mut => VT.RegisterNotificationCallBack(ref this, ref pNotify, lEvents);
			public HRESULT UnRegisterNotificationCallBack(ref IAMTunerNotification pNotify) mut => VT.UnRegisterNotificationCallBack(ref this, ref pNotify);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, int32 lChannel, int32 lVideoSubChannel, int32 lAudioSubChannel) put_Channel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out int32 plChannel, out int32 plVideoSubChannel, out int32 plAudioSubChannel) get_Channel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out int32 lChannelMin, out int32 lChannelMax) ChannelMinMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, int32 lCountryCode) put_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out int32 plCountryCode) get_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, int32 lTuningSpace) put_TuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out int32 plTuningSpace) get_TuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, HANDLE hCurrentUser) Logon;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self) Logout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out int32 plSignalStrength) SignalPresent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, AMTunerModeType lMode) put_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out AMTunerModeType plMode) get_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, out int32 plModes) GetAvailableModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, ref IAMTunerNotification pNotify, int32 lEvents) RegisterNotificationCallBack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTuner self, ref IAMTunerNotification pNotify) UnRegisterNotificationCallBack;
			}
		}
		[CRepr]
		public struct IAMTunerNotification : IUnknown
		{
			public const new Guid IID = .(0x211a8760, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnEvent(AMTunerEventType Event) mut => VT.OnEvent(ref this, Event);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTunerNotification self, AMTunerEventType Event) OnEvent;
			}
		}
		[CRepr]
		public struct IAMTVTuner : IAMTuner
		{
			public const new Guid IID = .(0x211a8766, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AvailableTVFormats(out int32 lAnalogVideoStandard) mut => VT.get_AvailableTVFormats(ref this, out lAnalogVideoStandard);
			public HRESULT get_TVFormat(out int32 plAnalogVideoStandard) mut => VT.get_TVFormat(ref this, out plAnalogVideoStandard);
			public HRESULT AutoTune(int32 lChannel, out int32 plFoundSignal) mut => VT.AutoTune(ref this, lChannel, out plFoundSignal);
			public HRESULT StoreAutoTune() mut => VT.StoreAutoTune(ref this);
			public HRESULT get_NumInputConnections(out int32 plNumInputConnections) mut => VT.get_NumInputConnections(ref this, out plNumInputConnections);
			public HRESULT put_InputType(int32 lIndex, TunerInputType InputType) mut => VT.put_InputType(ref this, lIndex, InputType);
			public HRESULT get_InputType(int32 lIndex, out TunerInputType pInputType) mut => VT.get_InputType(ref this, lIndex, out pInputType);
			public HRESULT put_ConnectInput(int32 lIndex) mut => VT.put_ConnectInput(ref this, lIndex);
			public HRESULT get_ConnectInput(out int32 plIndex) mut => VT.get_ConnectInput(ref this, out plIndex);
			public HRESULT get_VideoFrequency(out int32 lFreq) mut => VT.get_VideoFrequency(ref this, out lFreq);
			public HRESULT get_AudioFrequency(out int32 lFreq) mut => VT.get_AudioFrequency(ref this, out lFreq);

			[CRepr]
			public struct VTable : IAMTuner.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, out int32 lAnalogVideoStandard) get_AvailableTVFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, out int32 plAnalogVideoStandard) get_TVFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, int32 lChannel, out int32 plFoundSignal) AutoTune;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self) StoreAutoTune;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, out int32 plNumInputConnections) get_NumInputConnections;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, int32 lIndex, TunerInputType InputType) put_InputType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, int32 lIndex, out TunerInputType pInputType) get_InputType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, int32 lIndex) put_ConnectInput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, out int32 plIndex) get_ConnectInput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, out int32 lFreq) get_VideoFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVTuner self, out int32 lFreq) get_AudioFrequency;
			}
		}
		[CRepr]
		public struct IBPCSatelliteTuner : IAMTuner
		{
			public const new Guid IID = .(0x211a8765, 0x03ac, 0x11d1, 0x8d, 0x13, 0x00, 0xaa, 0x00, 0xbd, 0x83, 0x39);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_DefaultSubChannelTypes(out int32 plDefaultVideoType, out int32 plDefaultAudioType) mut => VT.get_DefaultSubChannelTypes(ref this, out plDefaultVideoType, out plDefaultAudioType);
			public HRESULT put_DefaultSubChannelTypes(int32 lDefaultVideoType, int32 lDefaultAudioType) mut => VT.put_DefaultSubChannelTypes(ref this, lDefaultVideoType, lDefaultAudioType);
			public HRESULT IsTapingPermitted() mut => VT.IsTapingPermitted(ref this);

			[CRepr]
			public struct VTable : IAMTuner.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBPCSatelliteTuner self, out int32 plDefaultVideoType, out int32 plDefaultAudioType) get_DefaultSubChannelTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBPCSatelliteTuner self, int32 lDefaultVideoType, int32 lDefaultAudioType) put_DefaultSubChannelTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBPCSatelliteTuner self) IsTapingPermitted;
			}
		}
		[CRepr]
		public struct IAMTVAudio : IUnknown
		{
			public const new Guid IID = .(0x83ec1c30, 0x23d1, 0x11d1, 0x99, 0xe6, 0x00, 0xa0, 0xc9, 0x56, 0x02, 0x66);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetHardwareSupportedTVAudioModes(out int32 plModes) mut => VT.GetHardwareSupportedTVAudioModes(ref this, out plModes);
			public HRESULT GetAvailableTVAudioModes(out int32 plModes) mut => VT.GetAvailableTVAudioModes(ref this, out plModes);
			public HRESULT get_TVAudioMode(out int32 plMode) mut => VT.get_TVAudioMode(ref this, out plMode);
			public HRESULT put_TVAudioMode(int32 lMode) mut => VT.put_TVAudioMode(ref this, lMode);
			public HRESULT RegisterNotificationCallBack(ref IAMTunerNotification pNotify, int32 lEvents) mut => VT.RegisterNotificationCallBack(ref this, ref pNotify, lEvents);
			public HRESULT UnRegisterNotificationCallBack(ref IAMTunerNotification pNotify) mut => VT.UnRegisterNotificationCallBack(ref this, ref pNotify);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudio self, out int32 plModes) GetHardwareSupportedTVAudioModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudio self, out int32 plModes) GetAvailableTVAudioModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudio self, out int32 plMode) get_TVAudioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudio self, int32 lMode) put_TVAudioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudio self, ref IAMTunerNotification pNotify, int32 lEvents) RegisterNotificationCallBack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudio self, ref IAMTunerNotification pNotify) UnRegisterNotificationCallBack;
			}
		}
		[CRepr]
		public struct IAMTVAudioNotification : IUnknown
		{
			public const new Guid IID = .(0x83ec1c33, 0x23d1, 0x11d1, 0x99, 0xe6, 0x00, 0xa0, 0xc9, 0x56, 0x02, 0x66);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnEvent(AMTVAudioEventType Event) mut => VT.OnEvent(ref this, Event);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTVAudioNotification self, AMTVAudioEventType Event) OnEvent;
			}
		}
		[CRepr]
		public struct IAMAnalogVideoEncoder : IUnknown
		{
			public const new Guid IID = .(0xc6e133b0, 0x30ac, 0x11d0, 0xa1, 0x8c, 0x00, 0xa0, 0xc9, 0x11, 0x89, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AvailableTVFormats(out int32 lAnalogVideoStandard) mut => VT.get_AvailableTVFormats(ref this, out lAnalogVideoStandard);
			public HRESULT put_TVFormat(int32 lAnalogVideoStandard) mut => VT.put_TVFormat(ref this, lAnalogVideoStandard);
			public HRESULT get_TVFormat(out int32 plAnalogVideoStandard) mut => VT.get_TVFormat(ref this, out plAnalogVideoStandard);
			public HRESULT put_CopyProtection(int32 lVideoCopyProtection) mut => VT.put_CopyProtection(ref this, lVideoCopyProtection);
			public HRESULT get_CopyProtection(out int32 lVideoCopyProtection) mut => VT.get_CopyProtection(ref this, out lVideoCopyProtection);
			public HRESULT put_CCEnable(int32 lCCEnable) mut => VT.put_CCEnable(ref this, lCCEnable);
			public HRESULT get_CCEnable(out int32 lCCEnable) mut => VT.get_CCEnable(ref this, out lCCEnable);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, out int32 lAnalogVideoStandard) get_AvailableTVFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, int32 lAnalogVideoStandard) put_TVFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, out int32 plAnalogVideoStandard) get_TVFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, int32 lVideoCopyProtection) put_CopyProtection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, out int32 lVideoCopyProtection) get_CopyProtection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, int32 lCCEnable) put_CCEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAnalogVideoEncoder self, out int32 lCCEnable) get_CCEnable;
			}
		}
		[CRepr]
		public struct IMediaPropertyBag : IPropertyBag
		{
			public const new Guid IID = .(0x6025a880, 0xc0d5, 0x11d0, 0xbd, 0x4e, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EnumProperty(uint32 iProperty, out VARIANT pvarPropertyName, out VARIANT pvarPropertyValue) mut => VT.EnumProperty(ref this, iProperty, out pvarPropertyName, out pvarPropertyValue);

			[CRepr]
			public struct VTable : IPropertyBag.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPropertyBag self, uint32 iProperty, out VARIANT pvarPropertyName, out VARIANT pvarPropertyValue) EnumProperty;
			}
		}
		[CRepr]
		public struct IPersistMediaPropertyBag : IPersist
		{
			public const new Guid IID = .(0x5738e040, 0xb67f, 0x11d0, 0xbd, 0x4d, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InitNew() mut => VT.InitNew(ref this);
			public HRESULT Load(ref IMediaPropertyBag pPropBag, ref IErrorLog pErrorLog) mut => VT.Load(ref this, ref pPropBag, ref pErrorLog);
			public HRESULT Save(ref IMediaPropertyBag pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties) mut => VT.Save(ref this, ref pPropBag, fClearDirty, fSaveAllProperties);

			[CRepr]
			public struct VTable : IPersist.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistMediaPropertyBag self) InitNew;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistMediaPropertyBag self, ref IMediaPropertyBag pPropBag, ref IErrorLog pErrorLog) Load;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistMediaPropertyBag self, ref IMediaPropertyBag pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties) Save;
			}
		}
		[CRepr]
		public struct IAMPhysicalPinInfo : IUnknown
		{
			public const new Guid IID = .(0xf938c991, 0x3029, 0x11cf, 0x8c, 0x44, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPhysicalType(out int32 pType, out PWSTR ppszType) mut => VT.GetPhysicalType(ref this, out pType, out ppszType);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPhysicalPinInfo self, out int32 pType, out PWSTR ppszType) GetPhysicalType;
			}
		}
		[CRepr]
		public struct IAMExtDevice : IUnknown
		{
			public const new Guid IID = .(0xb5730a90, 0x1a2c, 0x11cf, 0x8c, 0x23, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCapability(int32 Capability, out int32 pValue, out double pdblValue) mut => VT.GetCapability(ref this, Capability, out pValue, out pdblValue);
			public HRESULT get_ExternalDeviceID(out PWSTR ppszData) mut => VT.get_ExternalDeviceID(ref this, out ppszData);
			public HRESULT get_ExternalDeviceVersion(out PWSTR ppszData) mut => VT.get_ExternalDeviceVersion(ref this, out ppszData);
			public HRESULT put_DevicePower(int32 PowerMode) mut => VT.put_DevicePower(ref this, PowerMode);
			public HRESULT get_DevicePower(out int32 pPowerMode) mut => VT.get_DevicePower(ref this, out pPowerMode);
			public HRESULT Calibrate(uint hEvent, int32 Mode, out int32 pStatus) mut => VT.Calibrate(ref this, hEvent, Mode, out pStatus);
			public HRESULT put_DevicePort(int32 DevicePort) mut => VT.put_DevicePort(ref this, DevicePort);
			public HRESULT get_DevicePort(out int32 pDevicePort) mut => VT.get_DevicePort(ref this, out pDevicePort);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, int32 Capability, out int32 pValue, out double pdblValue) GetCapability;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, out PWSTR ppszData) get_ExternalDeviceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, out PWSTR ppszData) get_ExternalDeviceVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, int32 PowerMode) put_DevicePower;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, out int32 pPowerMode) get_DevicePower;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, uint hEvent, int32 Mode, out int32 pStatus) Calibrate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, int32 DevicePort) put_DevicePort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtDevice self, out int32 pDevicePort) get_DevicePort;
			}
		}
		[CRepr]
		public struct IAMExtTransport : IUnknown
		{
			public const new Guid IID = .(0xa03cd5f0, 0x3045, 0x11cf, 0x8c, 0x44, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCapability(int32 Capability, out int32 pValue, out double pdblValue) mut => VT.GetCapability(ref this, Capability, out pValue, out pdblValue);
			public HRESULT put_MediaState(int32 State) mut => VT.put_MediaState(ref this, State);
			public HRESULT get_MediaState(out int32 pState) mut => VT.get_MediaState(ref this, out pState);
			public HRESULT put_LocalControl(int32 State) mut => VT.put_LocalControl(ref this, State);
			public HRESULT get_LocalControl(out int32 pState) mut => VT.get_LocalControl(ref this, out pState);
			public HRESULT GetStatus(int32 StatusItem, out int32 pValue) mut => VT.GetStatus(ref this, StatusItem, out pValue);
			public HRESULT GetTransportBasicParameters(int32 Param, out int32 pValue, out PWSTR ppszData) mut => VT.GetTransportBasicParameters(ref this, Param, out pValue, out ppszData);
			public HRESULT SetTransportBasicParameters(int32 Param, int32 Value, PWSTR pszData) mut => VT.SetTransportBasicParameters(ref this, Param, Value, pszData);
			public HRESULT GetTransportVideoParameters(int32 Param, out int32 pValue) mut => VT.GetTransportVideoParameters(ref this, Param, out pValue);
			public HRESULT SetTransportVideoParameters(int32 Param, int32 Value) mut => VT.SetTransportVideoParameters(ref this, Param, Value);
			public HRESULT GetTransportAudioParameters(int32 Param, out int32 pValue) mut => VT.GetTransportAudioParameters(ref this, Param, out pValue);
			public HRESULT SetTransportAudioParameters(int32 Param, int32 Value) mut => VT.SetTransportAudioParameters(ref this, Param, Value);
			public HRESULT put_Mode(int32 Mode) mut => VT.put_Mode(ref this, Mode);
			public HRESULT get_Mode(out int32 pMode) mut => VT.get_Mode(ref this, out pMode);
			public HRESULT put_Rate(double dblRate) mut => VT.put_Rate(ref this, dblRate);
			public HRESULT get_Rate(out double pdblRate) mut => VT.get_Rate(ref this, out pdblRate);
			public HRESULT GetChase(out int32 pEnabled, out int32 pOffset, out uint phEvent) mut => VT.GetChase(ref this, out pEnabled, out pOffset, out phEvent);
			public HRESULT SetChase(int32 Enable, int32 Offset, uint hEvent) mut => VT.SetChase(ref this, Enable, Offset, hEvent);
			public HRESULT GetBump(out int32 pSpeed, out int32 pDuration) mut => VT.GetBump(ref this, out pSpeed, out pDuration);
			public HRESULT SetBump(int32 Speed, int32 Duration) mut => VT.SetBump(ref this, Speed, Duration);
			public HRESULT get_AntiClogControl(out int32 pEnabled) mut => VT.get_AntiClogControl(ref this, out pEnabled);
			public HRESULT put_AntiClogControl(int32 Enable) mut => VT.put_AntiClogControl(ref this, Enable);
			public HRESULT GetEditPropertySet(int32 EditID, out int32 pState) mut => VT.GetEditPropertySet(ref this, EditID, out pState);
			public HRESULT SetEditPropertySet(out int32 pEditID, int32 State) mut => VT.SetEditPropertySet(ref this, out pEditID, State);
			public HRESULT GetEditProperty(int32 EditID, int32 Param, out int32 pValue) mut => VT.GetEditProperty(ref this, EditID, Param, out pValue);
			public HRESULT SetEditProperty(int32 EditID, int32 Param, int32 Value) mut => VT.SetEditProperty(ref this, EditID, Param, Value);
			public HRESULT get_EditStart(out int32 pValue) mut => VT.get_EditStart(ref this, out pValue);
			public HRESULT put_EditStart(int32 Value) mut => VT.put_EditStart(ref this, Value);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Capability, out int32 pValue, out double pdblValue) GetCapability;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 State) put_MediaState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pState) get_MediaState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 State) put_LocalControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pState) get_LocalControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 StatusItem, out int32 pValue) GetStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Param, out int32 pValue, out PWSTR ppszData) GetTransportBasicParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Param, int32 Value, PWSTR pszData) SetTransportBasicParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Param, out int32 pValue) GetTransportVideoParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Param, int32 Value) SetTransportVideoParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Param, out int32 pValue) GetTransportAudioParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Param, int32 Value) SetTransportAudioParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Mode) put_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pMode) get_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, double dblRate) put_Rate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out double pdblRate) get_Rate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pEnabled, out int32 pOffset, out uint phEvent) GetChase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Enable, int32 Offset, uint hEvent) SetChase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pSpeed, out int32 pDuration) GetBump;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Speed, int32 Duration) SetBump;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pEnabled) get_AntiClogControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Enable) put_AntiClogControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 EditID, out int32 pState) GetEditPropertySet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pEditID, int32 State) SetEditPropertySet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 EditID, int32 Param, out int32 pValue) GetEditProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 EditID, int32 Param, int32 Value) SetEditProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, out int32 pValue) get_EditStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtTransport self, int32 Value) put_EditStart;
			}
		}
		[CRepr]
		public struct IAMTimecodeReader : IUnknown
		{
			public const new Guid IID = .(0x9b496ce1, 0x811b, 0x11cf, 0x8c, 0x77, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTCRMode(int32 Param, out int32 pValue) mut => VT.GetTCRMode(ref this, Param, out pValue);
			public HRESULT SetTCRMode(int32 Param, int32 Value) mut => VT.SetTCRMode(ref this, Param, Value);
			public HRESULT put_VITCLine(int32 Line) mut => VT.put_VITCLine(ref this, Line);
			public HRESULT get_VITCLine(out int32 pLine) mut => VT.get_VITCLine(ref this, out pLine);
			public HRESULT GetTimecode(out TIMECODE_SAMPLE pTimecodeSample) mut => VT.GetTimecode(ref this, out pTimecodeSample);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeReader self, int32 Param, out int32 pValue) GetTCRMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeReader self, int32 Param, int32 Value) SetTCRMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeReader self, int32 Line) put_VITCLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeReader self, out int32 pLine) get_VITCLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeReader self, out TIMECODE_SAMPLE pTimecodeSample) GetTimecode;
			}
		}
		[CRepr]
		public struct IAMTimecodeGenerator : IUnknown
		{
			public const new Guid IID = .(0x9b496ce0, 0x811b, 0x11cf, 0x8c, 0x77, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTCGMode(int32 Param, out int32 pValue) mut => VT.GetTCGMode(ref this, Param, out pValue);
			public HRESULT SetTCGMode(int32 Param, int32 Value) mut => VT.SetTCGMode(ref this, Param, Value);
			public HRESULT put_VITCLine(int32 Line) mut => VT.put_VITCLine(ref this, Line);
			public HRESULT get_VITCLine(out int32 pLine) mut => VT.get_VITCLine(ref this, out pLine);
			public HRESULT SetTimecode(out TIMECODE_SAMPLE pTimecodeSample) mut => VT.SetTimecode(ref this, out pTimecodeSample);
			public HRESULT GetTimecode(out TIMECODE_SAMPLE pTimecodeSample) mut => VT.GetTimecode(ref this, out pTimecodeSample);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeGenerator self, int32 Param, out int32 pValue) GetTCGMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeGenerator self, int32 Param, int32 Value) SetTCGMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeGenerator self, int32 Line) put_VITCLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeGenerator self, out int32 pLine) get_VITCLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeGenerator self, out TIMECODE_SAMPLE pTimecodeSample) SetTimecode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeGenerator self, out TIMECODE_SAMPLE pTimecodeSample) GetTimecode;
			}
		}
		[CRepr]
		public struct IAMTimecodeDisplay : IUnknown
		{
			public const new Guid IID = .(0x9b496ce2, 0x811b, 0x11cf, 0x8c, 0x77, 0x00, 0xaa, 0x00, 0x6b, 0x68, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTCDisplayEnable(out int32 pState) mut => VT.GetTCDisplayEnable(ref this, out pState);
			public HRESULT SetTCDisplayEnable(int32 State) mut => VT.SetTCDisplayEnable(ref this, State);
			public HRESULT GetTCDisplay(int32 Param, out int32 pValue) mut => VT.GetTCDisplay(ref this, Param, out pValue);
			public HRESULT SetTCDisplay(int32 Param, int32 Value) mut => VT.SetTCDisplay(ref this, Param, Value);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeDisplay self, out int32 pState) GetTCDisplayEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeDisplay self, int32 State) SetTCDisplayEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeDisplay self, int32 Param, out int32 pValue) GetTCDisplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMTimecodeDisplay self, int32 Param, int32 Value) SetTCDisplay;
			}
		}
		[CRepr]
		public struct IAMDevMemoryAllocator : IUnknown
		{
			public const new Guid IID = .(0xc6545bf0, 0xe76b, 0x11d0, 0xbd, 0x52, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetInfo(out uint32 pdwcbTotalFree, out uint32 pdwcbLargestFree, out uint32 pdwcbTotalMemory, out uint32 pdwcbMinimumChunk) mut => VT.GetInfo(ref this, out pdwcbTotalFree, out pdwcbLargestFree, out pdwcbTotalMemory, out pdwcbMinimumChunk);
			public HRESULT CheckMemory(in uint8 pBuffer) mut => VT.CheckMemory(ref this, pBuffer);
			public HRESULT Alloc(out uint8* ppBuffer, out uint32 pdwcbBuffer) mut => VT.Alloc(ref this, out ppBuffer, out pdwcbBuffer);
			public HRESULT Free(out uint8 pBuffer) mut => VT.Free(ref this, out pBuffer);
			public HRESULT GetDevMemoryObject(out IUnknown* ppUnkInnner, ref IUnknown pUnkOuter) mut => VT.GetDevMemoryObject(ref this, out ppUnkInnner, ref pUnkOuter);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryAllocator self, out uint32 pdwcbTotalFree, out uint32 pdwcbLargestFree, out uint32 pdwcbTotalMemory, out uint32 pdwcbMinimumChunk) GetInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryAllocator self, in uint8 pBuffer) CheckMemory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryAllocator self, out uint8* ppBuffer, out uint32 pdwcbBuffer) Alloc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryAllocator self, out uint8 pBuffer) Free;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryAllocator self, out IUnknown* ppUnkInnner, ref IUnknown pUnkOuter) GetDevMemoryObject;
			}
		}
		[CRepr]
		public struct IAMDevMemoryControl : IUnknown
		{
			public const new Guid IID = .(0xc6545bf1, 0xe76b, 0x11d0, 0xbd, 0x52, 0x00, 0xa0, 0xc9, 0x11, 0xce, 0x86);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryWriteSync() mut => VT.QueryWriteSync(ref this);
			public HRESULT WriteSync() mut => VT.WriteSync(ref this);
			public HRESULT GetDevId(out uint32 pdwDevId) mut => VT.GetDevId(ref this, out pdwDevId);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryControl self) QueryWriteSync;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryControl self) WriteSync;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDevMemoryControl self, out uint32 pdwDevId) GetDevId;
			}
		}
		[CRepr]
		public struct IAMStreamSelect : IUnknown
		{
			public const new Guid IID = .(0xc1960960, 0x17f5, 0x11d1, 0xab, 0xe1, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Count(out uint32 pcStreams) mut => VT.Count(ref this, out pcStreams);
			public HRESULT Info(int32 lIndex, AM_MEDIA_TYPE** ppmt, uint32* pdwFlags, uint32* plcid, uint32* pdwGroup, PWSTR* ppszName, IUnknown** ppObject, IUnknown** ppUnk) mut => VT.Info(ref this, lIndex, ppmt, pdwFlags, plcid, pdwGroup, ppszName, ppObject, ppUnk);
			public HRESULT Enable(int32 lIndex, uint32 dwFlags) mut => VT.Enable(ref this, lIndex, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamSelect self, out uint32 pcStreams) Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamSelect self, int32 lIndex, AM_MEDIA_TYPE** ppmt, uint32* pdwFlags, uint32* plcid, uint32* pdwGroup, PWSTR* ppszName, IUnknown** ppObject, IUnknown** ppUnk) Info;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStreamSelect self, int32 lIndex, uint32 dwFlags) Enable;
			}
		}
		[CRepr]
		public struct IAMResourceControl : IUnknown
		{
			public const new Guid IID = .(0x8389d2d0, 0x77d7, 0x11d1, 0xab, 0xe6, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Reserve(uint32 dwFlags, void* pvReserved) mut => VT.Reserve(ref this, dwFlags, pvReserved);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMResourceControl self, uint32 dwFlags, void* pvReserved) Reserve;
			}
		}
		[CRepr]
		public struct IAMClockAdjust : IUnknown
		{
			public const new Guid IID = .(0x4d5466b0, 0xa49c, 0x11d1, 0xab, 0xe8, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetClockDelta(int64 rtDelta) mut => VT.SetClockDelta(ref this, rtDelta);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMClockAdjust self, int64 rtDelta) SetClockDelta;
			}
		}
		[CRepr]
		public struct IAMFilterMiscFlags : IUnknown
		{
			public const new Guid IID = .(0x2dd74950, 0xa890, 0x11d1, 0xab, 0xe8, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public uint32 GetMiscFlags() mut => VT.GetMiscFlags(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] uint32(ref IAMFilterMiscFlags self) GetMiscFlags;
			}
		}
		[CRepr]
		public struct IDrawVideoImage : IUnknown
		{
			public const new Guid IID = .(0x48efb120, 0xab49, 0x11d2, 0xae, 0xd2, 0x00, 0xa0, 0xc9, 0x95, 0xe8, 0xd5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT DrawVideoImageBegin() mut => VT.DrawVideoImageBegin(ref this);
			public HRESULT DrawVideoImageEnd() mut => VT.DrawVideoImageEnd(ref this);
			public HRESULT DrawVideoImageDraw(HDC hdc, ref RECT lprcSrc, ref RECT lprcDst) mut => VT.DrawVideoImageDraw(ref this, hdc, ref lprcSrc, ref lprcDst);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDrawVideoImage self) DrawVideoImageBegin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDrawVideoImage self) DrawVideoImageEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDrawVideoImage self, HDC hdc, ref RECT lprcSrc, ref RECT lprcDst) DrawVideoImageDraw;
			}
		}
		[CRepr]
		public struct IDecimateVideoImage : IUnknown
		{
			public const new Guid IID = .(0x2e5ea3e0, 0xe924, 0x11d2, 0xb6, 0xda, 0x00, 0xa0, 0xc9, 0x95, 0xe8, 0xdf);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDecimationImageSize(int32 lWidth, int32 lHeight) mut => VT.SetDecimationImageSize(ref this, lWidth, lHeight);
			public HRESULT ResetDecimationImageSize() mut => VT.ResetDecimationImageSize(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDecimateVideoImage self, int32 lWidth, int32 lHeight) SetDecimationImageSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDecimateVideoImage self) ResetDecimationImageSize;
			}
		}
		[CRepr]
		public struct IAMVideoDecimationProperties : IUnknown
		{
			public const new Guid IID = .(0x60d32930, 0x13da, 0x11d3, 0x9e, 0xc6, 0xc4, 0xfc, 0xae, 0xf5, 0xc7, 0xbe);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryDecimationUsage(out DECIMATION_USAGE lpUsage) mut => VT.QueryDecimationUsage(ref this, out lpUsage);
			public HRESULT SetDecimationUsage(DECIMATION_USAGE Usage) mut => VT.SetDecimationUsage(ref this, Usage);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoDecimationProperties self, out DECIMATION_USAGE lpUsage) QueryDecimationUsage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoDecimationProperties self, DECIMATION_USAGE Usage) SetDecimationUsage;
			}
		}
		[CRepr]
		public struct IVideoFrameStep : IUnknown
		{
			public const new Guid IID = .(0xe46a9787, 0x2b71, 0x444d, 0xa4, 0xb5, 0x1f, 0xab, 0x7b, 0x70, 0x8d, 0x6a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Step(uint32 dwFrames, IUnknown* pStepObject) mut => VT.Step(ref this, dwFrames, pStepObject);
			public HRESULT CanStep(int32 bMultiple, IUnknown* pStepObject) mut => VT.CanStep(ref this, bMultiple, pStepObject);
			public HRESULT CancelStep() mut => VT.CancelStep(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoFrameStep self, uint32 dwFrames, IUnknown* pStepObject) Step;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoFrameStep self, int32 bMultiple, IUnknown* pStepObject) CanStep;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoFrameStep self) CancelStep;
			}
		}
		[CRepr]
		public struct IAMLatency : IUnknown
		{
			public const new Guid IID = .(0x62ea93ba, 0xec62, 0x11d2, 0xb7, 0x70, 0x00, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetLatency(out int64 prtLatency) mut => VT.GetLatency(ref this, out prtLatency);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLatency self, out int64 prtLatency) GetLatency;
			}
		}
		[CRepr]
		public struct IAMPushSource : IAMLatency
		{
			public const new Guid IID = .(0xf185fe76, 0xe64e, 0x11d2, 0xb7, 0x6e, 0x00, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPushSourceFlags(out uint32 pFlags) mut => VT.GetPushSourceFlags(ref this, out pFlags);
			public HRESULT SetPushSourceFlags(uint32 Flags) mut => VT.SetPushSourceFlags(ref this, Flags);
			public HRESULT SetStreamOffset(int64 rtOffset) mut => VT.SetStreamOffset(ref this, rtOffset);
			public HRESULT GetStreamOffset(out int64 prtOffset) mut => VT.GetStreamOffset(ref this, out prtOffset);
			public HRESULT GetMaxStreamOffset(out int64 prtMaxOffset) mut => VT.GetMaxStreamOffset(ref this, out prtMaxOffset);
			public HRESULT SetMaxStreamOffset(int64 rtMaxOffset) mut => VT.SetMaxStreamOffset(ref this, rtMaxOffset);

			[CRepr]
			public struct VTable : IAMLatency.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPushSource self, out uint32 pFlags) GetPushSourceFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPushSource self, uint32 Flags) SetPushSourceFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPushSource self, int64 rtOffset) SetStreamOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPushSource self, out int64 prtOffset) GetStreamOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPushSource self, out int64 prtMaxOffset) GetMaxStreamOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPushSource self, int64 rtMaxOffset) SetMaxStreamOffset;
			}
		}
		[CRepr]
		public struct IAMDeviceRemoval : IUnknown
		{
			public const new Guid IID = .(0xf90a6130, 0xb658, 0x11d2, 0xae, 0x49, 0x00, 0x00, 0xf8, 0x75, 0x4b, 0x99);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT DeviceInfo(out Guid pclsidInterfaceClass, out PWSTR pwszSymbolicLink) mut => VT.DeviceInfo(ref this, out pclsidInterfaceClass, out pwszSymbolicLink);
			public HRESULT Reassociate() mut => VT.Reassociate(ref this);
			public HRESULT Disassociate() mut => VT.Disassociate(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDeviceRemoval self, out Guid pclsidInterfaceClass, out PWSTR pwszSymbolicLink) DeviceInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDeviceRemoval self) Reassociate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDeviceRemoval self) Disassociate;
			}
		}
		[CRepr]
		public struct IDVEnc : IUnknown
		{
			public const new Guid IID = .(0xd18e17a0, 0xaacb, 0x11d0, 0xaf, 0xb0, 0x00, 0xaa, 0x00, 0xb6, 0x7a, 0x42);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_IFormatResolution(out int32 VideoFormat, out int32 DVFormat, out int32 Resolution, uint8 fDVInfo, out DVINFO sDVInfo) mut => VT.get_IFormatResolution(ref this, out VideoFormat, out DVFormat, out Resolution, fDVInfo, out sDVInfo);
			public HRESULT put_IFormatResolution(int32 VideoFormat, int32 DVFormat, int32 Resolution, uint8 fDVInfo, ref DVINFO sDVInfo) mut => VT.put_IFormatResolution(ref this, VideoFormat, DVFormat, Resolution, fDVInfo, ref sDVInfo);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVEnc self, out int32 VideoFormat, out int32 DVFormat, out int32 Resolution, uint8 fDVInfo, out DVINFO sDVInfo) get_IFormatResolution;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVEnc self, int32 VideoFormat, int32 DVFormat, int32 Resolution, uint8 fDVInfo, ref DVINFO sDVInfo) put_IFormatResolution;
			}
		}
		[CRepr]
		public struct IIPDVDec : IUnknown
		{
			public const new Guid IID = .(0xb8e8bd60, 0x0bfe, 0x11d0, 0xaf, 0x91, 0x00, 0xaa, 0x00, 0xb6, 0x7a, 0x42);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_IPDisplay(out int32 displayPix) mut => VT.get_IPDisplay(ref this, out displayPix);
			public HRESULT put_IPDisplay(int32 displayPix) mut => VT.put_IPDisplay(ref this, displayPix);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIPDVDec self, out int32 displayPix) get_IPDisplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIPDVDec self, int32 displayPix) put_IPDisplay;
			}
		}
		[CRepr]
		public struct IDVRGB219 : IUnknown
		{
			public const new Guid IID = .(0x58473a19, 0x2bc8, 0x4663, 0x80, 0x12, 0x25, 0xf8, 0x1b, 0xab, 0xdd, 0xd1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetRGB219(BOOL bState) mut => VT.SetRGB219(ref this, bState);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVRGB219 self, BOOL bState) SetRGB219;
			}
		}
		[CRepr]
		public struct IDVSplitter : IUnknown
		{
			public const new Guid IID = .(0x92a3a302, 0xda7c, 0x4a1f, 0xba, 0x7e, 0x18, 0x02, 0xbb, 0x5d, 0x2d, 0x02);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT DiscardAlternateVideoFrames(int32 nDiscard) mut => VT.DiscardAlternateVideoFrames(ref this, nDiscard);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVSplitter self, int32 nDiscard) DiscardAlternateVideoFrames;
			}
		}
		[CRepr]
		public struct IAMAudioRendererStats : IUnknown
		{
			public const new Guid IID = .(0x22320cb2, 0xd41a, 0x11d2, 0xbf, 0x7c, 0xd7, 0xcb, 0x9d, 0xf0, 0xbf, 0x93);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetStatParam(uint32 dwParam, out uint32 pdwParam1, out uint32 pdwParam2) mut => VT.GetStatParam(ref this, dwParam, out pdwParam1, out pdwParam2);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAudioRendererStats self, uint32 dwParam, out uint32 pdwParam1, out uint32 pdwParam2) GetStatParam;
			}
		}
		[CRepr]
		public struct IAMGraphStreams : IUnknown
		{
			public const new Guid IID = .(0x632105fa, 0x072e, 0x11d3, 0x8a, 0xf9, 0x00, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FindUpstreamInterface(ref IPin pPin, in Guid riid, void** ppvInterface, uint32 dwFlags) mut => VT.FindUpstreamInterface(ref this, ref pPin, riid, ppvInterface, dwFlags);
			public HRESULT SyncUsingStreamOffset(BOOL bUseStreamOffset) mut => VT.SyncUsingStreamOffset(ref this, bUseStreamOffset);
			public HRESULT SetMaxGraphLatency(int64 rtMaxGraphLatency) mut => VT.SetMaxGraphLatency(ref this, rtMaxGraphLatency);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMGraphStreams self, ref IPin pPin, in Guid riid, void** ppvInterface, uint32 dwFlags) FindUpstreamInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMGraphStreams self, BOOL bUseStreamOffset) SyncUsingStreamOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMGraphStreams self, int64 rtMaxGraphLatency) SetMaxGraphLatency;
			}
		}
		[CRepr]
		public struct IAMOverlayFX : IUnknown
		{
			public const new Guid IID = .(0x62fae250, 0x7e65, 0x4460, 0xbf, 0xc9, 0x63, 0x98, 0xb3, 0x22, 0x07, 0x3c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryOverlayFXCaps(out uint32 lpdwOverlayFXCaps) mut => VT.QueryOverlayFXCaps(ref this, out lpdwOverlayFXCaps);
			public HRESULT SetOverlayFX(uint32 dwOverlayFX) mut => VT.SetOverlayFX(ref this, dwOverlayFX);
			public HRESULT GetOverlayFX(out uint32 lpdwOverlayFX) mut => VT.GetOverlayFX(ref this, out lpdwOverlayFX);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMOverlayFX self, out uint32 lpdwOverlayFXCaps) QueryOverlayFXCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMOverlayFX self, uint32 dwOverlayFX) SetOverlayFX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMOverlayFX self, out uint32 lpdwOverlayFX) GetOverlayFX;
			}
		}
		[CRepr]
		public struct IAMOpenProgress : IUnknown
		{
			public const new Guid IID = .(0x8e1c39a1, 0xde53, 0x11cf, 0xaa, 0x63, 0x00, 0x80, 0xc7, 0x44, 0x52, 0x8d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryProgress(out int64 pllTotal, out int64 pllCurrent) mut => VT.QueryProgress(ref this, out pllTotal, out pllCurrent);
			public HRESULT AbortOperation() mut => VT.AbortOperation(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMOpenProgress self, out int64 pllTotal, out int64 pllCurrent) QueryProgress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMOpenProgress self) AbortOperation;
			}
		}
		[CRepr]
		public struct IMpeg2Demultiplexer : IUnknown
		{
			public const new Guid IID = .(0x436eee9c, 0x264f, 0x4242, 0x90, 0xe1, 0x4e, 0x33, 0x0c, 0x10, 0x75, 0x12);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateOutputPin(out AM_MEDIA_TYPE pMediaType, PWSTR pszPinName, out IPin* ppIPin) mut => VT.CreateOutputPin(ref this, out pMediaType, pszPinName, out ppIPin);
			public HRESULT SetOutputPinMediaType(PWSTR pszPinName, ref AM_MEDIA_TYPE pMediaType) mut => VT.SetOutputPinMediaType(ref this, pszPinName, ref pMediaType);
			public HRESULT DeleteOutputPin(PWSTR pszPinName) mut => VT.DeleteOutputPin(ref this, pszPinName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Demultiplexer self, out AM_MEDIA_TYPE pMediaType, PWSTR pszPinName, out IPin* ppIPin) CreateOutputPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Demultiplexer self, PWSTR pszPinName, ref AM_MEDIA_TYPE pMediaType) SetOutputPinMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Demultiplexer self, PWSTR pszPinName) DeleteOutputPin;
			}
		}
		[CRepr]
		public struct IEnumStreamIdMap : IUnknown
		{
			public const new Guid IID = .(0x945c1566, 0x6202, 0x46fc, 0x96, 0xc7, 0xd8, 0x7f, 0x28, 0x9c, 0x65, 0x34);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cRequest, STREAM_ID_MAP* pStreamIdMap, uint32* pcReceived) mut => VT.Next(ref this, cRequest, pStreamIdMap, pcReceived);
			public HRESULT Skip(uint32 cRecords) mut => VT.Skip(ref this, cRecords);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumStreamIdMap* ppIEnumStreamIdMap) mut => VT.Clone(ref this, out ppIEnumStreamIdMap);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamIdMap self, uint32 cRequest, STREAM_ID_MAP* pStreamIdMap, uint32* pcReceived) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamIdMap self, uint32 cRecords) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamIdMap self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamIdMap self, out IEnumStreamIdMap* ppIEnumStreamIdMap) Clone;
			}
		}
		[CRepr]
		public struct IMPEG2StreamIdMap : IUnknown
		{
			public const new Guid IID = .(0xd0e04c47, 0x25b8, 0x4369, 0x92, 0x5a, 0x36, 0x2a, 0x01, 0xd9, 0x54, 0x44);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MapStreamId(uint32 ulStreamId, uint32 MediaSampleContent, uint32 ulSubstreamFilterValue, int32 iDataOffset) mut => VT.MapStreamId(ref this, ulStreamId, MediaSampleContent, ulSubstreamFilterValue, iDataOffset);
			public HRESULT UnmapStreamId(uint32 culStreamId, uint32* pulStreamId) mut => VT.UnmapStreamId(ref this, culStreamId, pulStreamId);
			public HRESULT EnumStreamIdMap(out IEnumStreamIdMap* ppIEnumStreamIdMap) mut => VT.EnumStreamIdMap(ref this, out ppIEnumStreamIdMap);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2StreamIdMap self, uint32 ulStreamId, uint32 MediaSampleContent, uint32 ulSubstreamFilterValue, int32 iDataOffset) MapStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2StreamIdMap self, uint32 culStreamId, uint32* pulStreamId) UnmapStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2StreamIdMap self, out IEnumStreamIdMap* ppIEnumStreamIdMap) EnumStreamIdMap;
			}
		}
		[CRepr]
		public struct IRegisterServiceProvider : IUnknown
		{
			public const new Guid IID = .(0x7b3a2f01, 0x0751, 0x48dd, 0xb5, 0x56, 0x00, 0x47, 0x85, 0x17, 0x1c, 0x54);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RegisterService(in Guid guidService, ref IUnknown pUnkObject) mut => VT.RegisterService(ref this, guidService, ref pUnkObject);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRegisterServiceProvider self, in Guid guidService, ref IUnknown pUnkObject) RegisterService;
			}
		}
		[CRepr]
		public struct IAMClockSlave : IUnknown
		{
			public const new Guid IID = .(0x9fd52741, 0x176d, 0x4b36, 0x8f, 0x51, 0xca, 0x8f, 0x93, 0x32, 0x23, 0xbe);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetErrorTolerance(uint32 dwTolerance) mut => VT.SetErrorTolerance(ref this, dwTolerance);
			public HRESULT GetErrorTolerance(out uint32 pdwTolerance) mut => VT.GetErrorTolerance(ref this, out pdwTolerance);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMClockSlave self, uint32 dwTolerance) SetErrorTolerance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMClockSlave self, out uint32 pdwTolerance) GetErrorTolerance;
			}
		}
		[CRepr]
		public struct IAMGraphBuilderCallback : IUnknown
		{
			public const new Guid IID = .(0x4995f511, 0x9ddb, 0x4f12, 0xbd, 0x3b, 0xf0, 0x46, 0x11, 0x80, 0x7b, 0x79);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SelectedFilter(ref IMoniker pMon) mut => VT.SelectedFilter(ref this, ref pMon);
			public HRESULT CreatedFilter(ref IBaseFilter pFil) mut => VT.CreatedFilter(ref this, ref pFil);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMGraphBuilderCallback self, ref IMoniker pMon) SelectedFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMGraphBuilderCallback self, ref IBaseFilter pFil) CreatedFilter;
			}
		}
		[CRepr]
		public struct IAMFilterGraphCallback : IUnknown
		{
			public const new Guid IID = .(0x56a868fd, 0x0ad4, 0x11ce, 0xb0, 0xa3, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT UnableToRender(ref IPin pPin) mut => VT.UnableToRender(ref this, ref pPin);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMFilterGraphCallback self, ref IPin pPin) UnableToRender;
			}
		}
		[CRepr]
		public struct IGetCapabilitiesKey : IUnknown
		{
			public const new Guid IID = .(0xa8809222, 0x07bb, 0x48ea, 0x95, 0x1c, 0x33, 0x15, 0x81, 0x00, 0x62, 0x5b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCapabilitiesKey(out HKEY pHKey) mut => VT.GetCapabilitiesKey(ref this, out pHKey);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGetCapabilitiesKey self, out HKEY pHKey) GetCapabilitiesKey;
			}
		}
		[CRepr]
		public struct IEncoderAPI : IUnknown
		{
			public const new Guid IID = .(0x70423839, 0x6acc, 0x4b23, 0xb0, 0x79, 0x21, 0xdb, 0xf0, 0x81, 0x56, 0xa5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsSupported(in Guid Api) mut => VT.IsSupported(ref this, Api);
			public HRESULT IsAvailable(in Guid Api) mut => VT.IsAvailable(ref this, Api);
			public HRESULT GetParameterRange(in Guid Api, out VARIANT ValueMin, out VARIANT ValueMax, out VARIANT SteppingDelta) mut => VT.GetParameterRange(ref this, Api, out ValueMin, out ValueMax, out SteppingDelta);
			public HRESULT GetParameterValues(in Guid Api, VARIANT** Values, out uint32 ValuesCount) mut => VT.GetParameterValues(ref this, Api, Values, out ValuesCount);
			public HRESULT GetDefaultValue(in Guid Api, out VARIANT Value) mut => VT.GetDefaultValue(ref this, Api, out Value);
			public HRESULT GetValue(in Guid Api, out VARIANT Value) mut => VT.GetValue(ref this, Api, out Value);
			public HRESULT SetValue(in Guid Api, ref VARIANT Value) mut => VT.SetValue(ref this, Api, ref Value);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api) IsSupported;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api) IsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api, out VARIANT ValueMin, out VARIANT ValueMax, out VARIANT SteppingDelta) GetParameterRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api, VARIANT** Values, out uint32 ValuesCount) GetParameterValues;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api, out VARIANT Value) GetDefaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api, out VARIANT Value) GetValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEncoderAPI self, in Guid Api, ref VARIANT Value) SetValue;
			}
		}
		[CRepr]
		public struct IVideoEncoder : IEncoderAPI
		{
			public const new Guid IID = .(0x02997c3b, 0x8e1b, 0x460e, 0x92, 0x70, 0x54, 0x5e, 0x0d, 0xe9, 0x56, 0x3e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IEncoderAPI.VTable {}
		}
		[CRepr]
		public struct IAMDecoderCaps : IUnknown
		{
			public const new Guid IID = .(0xc0dff467, 0xd499, 0x4986, 0x97, 0x2b, 0xe1, 0xd9, 0x09, 0x0f, 0xa9, 0x41);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDecoderCaps(uint32 dwCapIndex, out uint32 lpdwCap) mut => VT.GetDecoderCaps(ref this, dwCapIndex, out lpdwCap);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDecoderCaps self, uint32 dwCapIndex, out uint32 lpdwCap) GetDecoderCaps;
			}
		}
		[CRepr]
		public struct IAMCertifiedOutputProtection : IUnknown
		{
			public const new Guid IID = .(0x6feded3e, 0x0ff1, 0x4901, 0xa2, 0xf1, 0x43, 0xf7, 0x01, 0x2c, 0x85, 0x15);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT KeyExchange(out Guid pRandom, out uint8* VarLenCertGH, out uint32 pdwLengthCertGH) mut => VT.KeyExchange(ref this, out pRandom, out VarLenCertGH, out pdwLengthCertGH);
			public HRESULT SessionSequenceStart(out AMCOPPSignature pSig) mut => VT.SessionSequenceStart(ref this, out pSig);
			public HRESULT ProtectionCommand(in AMCOPPCommand cmd) mut => VT.ProtectionCommand(ref this, cmd);
			public HRESULT ProtectionStatus(in AMCOPPStatusInput pStatusInput, out AMCOPPStatusOutput pStatusOutput) mut => VT.ProtectionStatus(ref this, pStatusInput, out pStatusOutput);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCertifiedOutputProtection self, out Guid pRandom, out uint8* VarLenCertGH, out uint32 pdwLengthCertGH) KeyExchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCertifiedOutputProtection self, out AMCOPPSignature pSig) SessionSequenceStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCertifiedOutputProtection self, in AMCOPPCommand cmd) ProtectionCommand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCertifiedOutputProtection self, in AMCOPPStatusInput pStatusInput, out AMCOPPStatusOutput pStatusOutput) ProtectionStatus;
			}
		}
		[CRepr]
		public struct IAMAsyncReaderTimestampScaling : IUnknown
		{
			public const new Guid IID = .(0xcf7b26fc, 0x9a00, 0x485b, 0x81, 0x47, 0x3e, 0x78, 0x9d, 0x5e, 0x8f, 0x67);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTimestampMode(out BOOL pfRaw) mut => VT.GetTimestampMode(ref this, out pfRaw);
			public HRESULT SetTimestampMode(BOOL fRaw) mut => VT.SetTimestampMode(ref this, fRaw);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAsyncReaderTimestampScaling self, out BOOL pfRaw) GetTimestampMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMAsyncReaderTimestampScaling self, BOOL fRaw) SetTimestampMode;
			}
		}
		[CRepr]
		public struct IAMPluginControl : IUnknown
		{
			public const new Guid IID = .(0x0e26a181, 0xf40c, 0x4635, 0x87, 0x86, 0x97, 0x62, 0x84, 0xb5, 0x29, 0x81);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPreferredClsid(in Guid subType, out Guid clsid) mut => VT.GetPreferredClsid(ref this, subType, out clsid);
			public HRESULT GetPreferredClsidByIndex(uint32 index, out Guid subType, out Guid clsid) mut => VT.GetPreferredClsidByIndex(ref this, index, out subType, out clsid);
			public HRESULT SetPreferredClsid(in Guid subType, Guid* clsid) mut => VT.SetPreferredClsid(ref this, subType, clsid);
			public HRESULT IsDisabled(in Guid clsid) mut => VT.IsDisabled(ref this, clsid);
			public HRESULT GetDisabledByIndex(uint32 index, out Guid clsid) mut => VT.GetDisabledByIndex(ref this, index, out clsid);
			public HRESULT SetDisabled(in Guid clsid, BOOL disabled) mut => VT.SetDisabled(ref this, clsid, disabled);
			public HRESULT IsLegacyDisabled(PWSTR dllName) mut => VT.IsLegacyDisabled(ref this, dllName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, in Guid subType, out Guid clsid) GetPreferredClsid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, uint32 index, out Guid subType, out Guid clsid) GetPreferredClsidByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, in Guid subType, Guid* clsid) SetPreferredClsid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, in Guid clsid) IsDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, uint32 index, out Guid clsid) GetDisabledByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, in Guid clsid, BOOL disabled) SetDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPluginControl self, PWSTR dllName) IsLegacyDisabled;
			}
		}
		[CRepr]
		public struct IPinConnection : IUnknown
		{
			public const new Guid IID = .(0x4a9a62d3, 0x27d4, 0x403d, 0x91, 0xe9, 0x89, 0xf5, 0x40, 0xe5, 0x55, 0x34);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT DynamicQueryAccept(in AM_MEDIA_TYPE pmt) mut => VT.DynamicQueryAccept(ref this, pmt);
			public HRESULT NotifyEndOfStream(HANDLE hNotifyEvent) mut => VT.NotifyEndOfStream(ref this, hNotifyEvent);
			public HRESULT IsEndPin() mut => VT.IsEndPin(ref this);
			public HRESULT DynamicDisconnect() mut => VT.DynamicDisconnect(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinConnection self, in AM_MEDIA_TYPE pmt) DynamicQueryAccept;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinConnection self, HANDLE hNotifyEvent) NotifyEndOfStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinConnection self) IsEndPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinConnection self) DynamicDisconnect;
			}
		}
		[CRepr]
		public struct IPinFlowControl : IUnknown
		{
			public const new Guid IID = .(0xc56e9858, 0xdbf3, 0x4f6b, 0x81, 0x19, 0x38, 0x4a, 0xf2, 0x06, 0x0d, 0xeb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Block(uint32 dwBlockFlags, HANDLE hEvent) mut => VT.Block(ref this, dwBlockFlags, hEvent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinFlowControl self, uint32 dwBlockFlags, HANDLE hEvent) Block;
			}
		}
		[CRepr]
		public struct IGraphConfig : IUnknown
		{
			public const new Guid IID = .(0x03a1eb8e, 0x32bf, 0x4245, 0x85, 0x02, 0x11, 0x4d, 0x08, 0xa9, 0xcb, 0x88);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Reconnect(ref IPin pOutputPin, ref IPin pInputPin, in AM_MEDIA_TYPE pmtFirstConnection, ref IBaseFilter pUsingFilter, HANDLE hAbortEvent, uint32 dwFlags) mut => VT.Reconnect(ref this, ref pOutputPin, ref pInputPin, pmtFirstConnection, ref pUsingFilter, hAbortEvent, dwFlags);
			public HRESULT Reconfigure(ref IGraphConfigCallback pCallback, void* pvContext, uint32 dwFlags, HANDLE hAbortEvent) mut => VT.Reconfigure(ref this, ref pCallback, pvContext, dwFlags, hAbortEvent);
			public HRESULT AddFilterToCache(ref IBaseFilter pFilter) mut => VT.AddFilterToCache(ref this, ref pFilter);
			public HRESULT EnumCacheFilter(out IEnumFilters* pEnum) mut => VT.EnumCacheFilter(ref this, out pEnum);
			public HRESULT RemoveFilterFromCache(ref IBaseFilter pFilter) mut => VT.RemoveFilterFromCache(ref this, ref pFilter);
			public HRESULT GetStartTime(out int64 prtStart) mut => VT.GetStartTime(ref this, out prtStart);
			public HRESULT PushThroughData(ref IPin pOutputPin, ref IPinConnection pConnection, HANDLE hEventAbort) mut => VT.PushThroughData(ref this, ref pOutputPin, ref pConnection, hEventAbort);
			public HRESULT SetFilterFlags(ref IBaseFilter pFilter, uint32 dwFlags) mut => VT.SetFilterFlags(ref this, ref pFilter, dwFlags);
			public HRESULT GetFilterFlags(ref IBaseFilter pFilter, out uint32 pdwFlags) mut => VT.GetFilterFlags(ref this, ref pFilter, out pdwFlags);
			public HRESULT RemoveFilterEx(ref IBaseFilter pFilter, uint32 Flags) mut => VT.RemoveFilterEx(ref this, ref pFilter, Flags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IPin pOutputPin, ref IPin pInputPin, in AM_MEDIA_TYPE pmtFirstConnection, ref IBaseFilter pUsingFilter, HANDLE hAbortEvent, uint32 dwFlags) Reconnect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IGraphConfigCallback pCallback, void* pvContext, uint32 dwFlags, HANDLE hAbortEvent) Reconfigure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IBaseFilter pFilter) AddFilterToCache;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, out IEnumFilters* pEnum) EnumCacheFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IBaseFilter pFilter) RemoveFilterFromCache;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, out int64 prtStart) GetStartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IPin pOutputPin, ref IPinConnection pConnection, HANDLE hEventAbort) PushThroughData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IBaseFilter pFilter, uint32 dwFlags) SetFilterFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IBaseFilter pFilter, out uint32 pdwFlags) GetFilterFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfig self, ref IBaseFilter pFilter, uint32 Flags) RemoveFilterEx;
			}
		}
		[CRepr]
		public struct IGraphConfigCallback : IUnknown
		{
			public const new Guid IID = .(0xade0fd60, 0xd19d, 0x11d2, 0xab, 0xf6, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Reconfigure(void* pvContext, uint32 dwFlags) mut => VT.Reconfigure(ref this, pvContext, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGraphConfigCallback self, void* pvContext, uint32 dwFlags) Reconfigure;
			}
		}
		[CRepr]
		public struct IFilterChain : IUnknown
		{
			public const new Guid IID = .(0xdcfbdcf6, 0x0dc2, 0x45f5, 0x9a, 0xb2, 0x7c, 0x33, 0x0e, 0xa0, 0x9c, 0x29);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StartChain(ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) mut => VT.StartChain(ref this, ref pStartFilter, ref pEndFilter);
			public HRESULT PauseChain(ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) mut => VT.PauseChain(ref this, ref pStartFilter, ref pEndFilter);
			public HRESULT StopChain(ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) mut => VT.StopChain(ref this, ref pStartFilter, ref pEndFilter);
			public HRESULT RemoveChain(ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) mut => VT.RemoveChain(ref this, ref pStartFilter, ref pEndFilter);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterChain self, ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) StartChain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterChain self, ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) PauseChain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterChain self, ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) StopChain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterChain self, ref IBaseFilter pStartFilter, ref IBaseFilter pEndFilter) RemoveChain;
			}
		}
		[CRepr]
		public struct IVMRImagePresenter : IUnknown
		{
			public const new Guid IID = .(0xce704fe7, 0xe71e, 0x41fb, 0xba, 0xa2, 0xc4, 0x40, 0x3e, 0x11, 0x82, 0xf5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StartPresenting(uint dwUserID) mut => VT.StartPresenting(ref this, dwUserID);
			public HRESULT StopPresenting(uint dwUserID) mut => VT.StopPresenting(ref this, dwUserID);
			public HRESULT PresentImage(uint dwUserID, out VMRPRESENTATIONINFO lpPresInfo) mut => VT.PresentImage(ref this, dwUserID, out lpPresInfo);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenter self, uint dwUserID) StartPresenting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenter self, uint dwUserID) StopPresenting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenter self, uint dwUserID, out VMRPRESENTATIONINFO lpPresInfo) PresentImage;
			}
		}
		[CRepr]
		public struct IVMRSurfaceAllocator : IUnknown
		{
			public const new Guid IID = .(0x31ce832e, 0x4484, 0x458b, 0x8c, 0xca, 0xf4, 0xd7, 0xe3, 0xdb, 0x0b, 0x52);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AllocateSurface(uint dwUserID, out VMRALLOCATIONINFO lpAllocInfo, out uint32 lpdwActualBuffers, out IDirectDrawSurface7* lplpSurface) mut => VT.AllocateSurface(ref this, dwUserID, out lpAllocInfo, out lpdwActualBuffers, out lplpSurface);
			public HRESULT FreeSurface(uint dwID) mut => VT.FreeSurface(ref this, dwID);
			public HRESULT PrepareSurface(uint dwUserID, ref IDirectDrawSurface7 lpSurface, uint32 dwSurfaceFlags) mut => VT.PrepareSurface(ref this, dwUserID, ref lpSurface, dwSurfaceFlags);
			public HRESULT AdviseNotify(ref IVMRSurfaceAllocatorNotify lpIVMRSurfAllocNotify) mut => VT.AdviseNotify(ref this, ref lpIVMRSurfAllocNotify);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator self, uint dwUserID, out VMRALLOCATIONINFO lpAllocInfo, out uint32 lpdwActualBuffers, out IDirectDrawSurface7* lplpSurface) AllocateSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator self, uint dwID) FreeSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator self, uint dwUserID, ref IDirectDrawSurface7 lpSurface, uint32 dwSurfaceFlags) PrepareSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator self, ref IVMRSurfaceAllocatorNotify lpIVMRSurfAllocNotify) AdviseNotify;
			}
		}
		[CRepr]
		public struct IVMRSurfaceAllocatorNotify : IUnknown
		{
			public const new Guid IID = .(0xaada05a8, 0x5a4e, 0x4729, 0xaf, 0x0b, 0xce, 0xa2, 0x7a, 0xed, 0x51, 0xe2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AdviseSurfaceAllocator(uint dwUserID, ref IVMRSurfaceAllocator lpIVRMSurfaceAllocator) mut => VT.AdviseSurfaceAllocator(ref this, dwUserID, ref lpIVRMSurfaceAllocator);
			public HRESULT SetDDrawDevice(ref IDirectDraw7 lpDDrawDevice, HMONITOR hMonitor) mut => VT.SetDDrawDevice(ref this, ref lpDDrawDevice, hMonitor);
			public HRESULT ChangeDDrawDevice(ref IDirectDraw7 lpDDrawDevice, HMONITOR hMonitor) mut => VT.ChangeDDrawDevice(ref this, ref lpDDrawDevice, hMonitor);
			public HRESULT RestoreDDrawSurfaces() mut => VT.RestoreDDrawSurfaces(ref this);
			public HRESULT NotifyEvent(int32 EventCode, int Param1, int Param2) mut => VT.NotifyEvent(ref this, EventCode, Param1, Param2);
			public HRESULT SetBorderColor(uint32 clrBorder) mut => VT.SetBorderColor(ref this, clrBorder);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify self, uint dwUserID, ref IVMRSurfaceAllocator lpIVRMSurfaceAllocator) AdviseSurfaceAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify self, ref IDirectDraw7 lpDDrawDevice, HMONITOR hMonitor) SetDDrawDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify self, ref IDirectDraw7 lpDDrawDevice, HMONITOR hMonitor) ChangeDDrawDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify self) RestoreDDrawSurfaces;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify self, int32 EventCode, int Param1, int Param2) NotifyEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify self, uint32 clrBorder) SetBorderColor;
			}
		}
		[CRepr]
		public struct IVMRWindowlessControl : IUnknown
		{
			public const new Guid IID = .(0x0eb1088c, 0x4dcd, 0x46f0, 0x87, 0x8f, 0x39, 0xda, 0xe8, 0x6a, 0x51, 0xb7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNativeVideoSize(out int32 lpWidth, out int32 lpHeight, out int32 lpARWidth, out int32 lpARHeight) mut => VT.GetNativeVideoSize(ref this, out lpWidth, out lpHeight, out lpARWidth, out lpARHeight);
			public HRESULT GetMinIdealVideoSize(out int32 lpWidth, out int32 lpHeight) mut => VT.GetMinIdealVideoSize(ref this, out lpWidth, out lpHeight);
			public HRESULT GetMaxIdealVideoSize(out int32 lpWidth, out int32 lpHeight) mut => VT.GetMaxIdealVideoSize(ref this, out lpWidth, out lpHeight);
			public HRESULT SetVideoPosition(in RECT lpSRCRect, in RECT lpDSTRect) mut => VT.SetVideoPosition(ref this, lpSRCRect, lpDSTRect);
			public HRESULT GetVideoPosition(out RECT lpSRCRect, out RECT lpDSTRect) mut => VT.GetVideoPosition(ref this, out lpSRCRect, out lpDSTRect);
			public HRESULT GetAspectRatioMode(out uint32 lpAspectRatioMode) mut => VT.GetAspectRatioMode(ref this, out lpAspectRatioMode);
			public HRESULT SetAspectRatioMode(uint32 AspectRatioMode) mut => VT.SetAspectRatioMode(ref this, AspectRatioMode);
			public HRESULT SetVideoClippingWindow(HWND hwnd) mut => VT.SetVideoClippingWindow(ref this, hwnd);
			public HRESULT RepaintVideo(HWND hwnd, HDC hdc) mut => VT.RepaintVideo(ref this, hwnd, hdc);
			public HRESULT DisplayModeChanged() mut => VT.DisplayModeChanged(ref this);
			public HRESULT GetCurrentImage(out uint8* lpDib) mut => VT.GetCurrentImage(ref this, out lpDib);
			public HRESULT SetBorderColor(uint32 Clr) mut => VT.SetBorderColor(ref this, Clr);
			public HRESULT GetBorderColor(out uint32 lpClr) mut => VT.GetBorderColor(ref this, out lpClr);
			public HRESULT SetColorKey(uint32 Clr) mut => VT.SetColorKey(ref this, Clr);
			public HRESULT GetColorKey(out uint32 lpClr) mut => VT.GetColorKey(ref this, out lpClr);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out int32 lpWidth, out int32 lpHeight, out int32 lpARWidth, out int32 lpARHeight) GetNativeVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out int32 lpWidth, out int32 lpHeight) GetMinIdealVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out int32 lpWidth, out int32 lpHeight) GetMaxIdealVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, in RECT lpSRCRect, in RECT lpDSTRect) SetVideoPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out RECT lpSRCRect, out RECT lpDSTRect) GetVideoPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out uint32 lpAspectRatioMode) GetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, uint32 AspectRatioMode) SetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, HWND hwnd) SetVideoClippingWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, HWND hwnd, HDC hdc) RepaintVideo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self) DisplayModeChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out uint8* lpDib) GetCurrentImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, uint32 Clr) SetBorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out uint32 lpClr) GetBorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, uint32 Clr) SetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl self, out uint32 lpClr) GetColorKey;
			}
		}
		[CRepr]
		public struct IVMRMixerControl : IUnknown
		{
			public const new Guid IID = .(0x1c1a17b0, 0xbed0, 0x415d, 0x97, 0x4b, 0xdc, 0x66, 0x96, 0x13, 0x15, 0x99);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAlpha(uint32 dwStreamID, float Alpha) mut => VT.SetAlpha(ref this, dwStreamID, Alpha);
			public HRESULT GetAlpha(uint32 dwStreamID, out float pAlpha) mut => VT.GetAlpha(ref this, dwStreamID, out pAlpha);
			public HRESULT SetZOrder(uint32 dwStreamID, uint32 dwZ) mut => VT.SetZOrder(ref this, dwStreamID, dwZ);
			public HRESULT GetZOrder(uint32 dwStreamID, out uint32 pZ) mut => VT.GetZOrder(ref this, dwStreamID, out pZ);
			public HRESULT SetOutputRect(uint32 dwStreamID, in NORMALIZEDRECT pRect) mut => VT.SetOutputRect(ref this, dwStreamID, pRect);
			public HRESULT GetOutputRect(uint32 dwStreamID, out NORMALIZEDRECT pRect) mut => VT.GetOutputRect(ref this, dwStreamID, out pRect);
			public HRESULT SetBackgroundClr(uint32 ClrBkg) mut => VT.SetBackgroundClr(ref this, ClrBkg);
			public HRESULT GetBackgroundClr(out uint32 lpClrBkg) mut => VT.GetBackgroundClr(ref this, out lpClrBkg);
			public HRESULT SetMixingPrefs(uint32 dwMixerPrefs) mut => VT.SetMixingPrefs(ref this, dwMixerPrefs);
			public HRESULT GetMixingPrefs(out uint32 pdwMixerPrefs) mut => VT.GetMixingPrefs(ref this, out pdwMixerPrefs);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwStreamID, float Alpha) SetAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwStreamID, out float pAlpha) GetAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwStreamID, uint32 dwZ) SetZOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwStreamID, out uint32 pZ) GetZOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwStreamID, in NORMALIZEDRECT pRect) SetOutputRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwStreamID, out NORMALIZEDRECT pRect) GetOutputRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 ClrBkg) SetBackgroundClr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, out uint32 lpClrBkg) GetBackgroundClr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, uint32 dwMixerPrefs) SetMixingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl self, out uint32 pdwMixerPrefs) GetMixingPrefs;
			}
		}
		[CRepr]
		public struct IVMRMonitorConfig : IUnknown
		{
			public const new Guid IID = .(0x9cf0b1b6, 0xfbaa, 0x4b7f, 0x88, 0xcf, 0xcf, 0x1f, 0x13, 0x0a, 0x0d, 0xce);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMonitor(in VMRGUID pGUID) mut => VT.SetMonitor(ref this, pGUID);
			public HRESULT GetMonitor(out VMRGUID pGUID) mut => VT.GetMonitor(ref this, out pGUID);
			public HRESULT SetDefaultMonitor(in VMRGUID pGUID) mut => VT.SetDefaultMonitor(ref this, pGUID);
			public HRESULT GetDefaultMonitor(out VMRGUID pGUID) mut => VT.GetDefaultMonitor(ref this, out pGUID);
			public HRESULT GetAvailableMonitors(out VMRMONITORINFO pInfo, uint32 dwMaxInfoArraySize, out uint32 pdwNumDevices) mut => VT.GetAvailableMonitors(ref this, out pInfo, dwMaxInfoArraySize, out pdwNumDevices);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig self, in VMRGUID pGUID) SetMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig self, out VMRGUID pGUID) GetMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig self, in VMRGUID pGUID) SetDefaultMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig self, out VMRGUID pGUID) GetDefaultMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig self, out VMRMONITORINFO pInfo, uint32 dwMaxInfoArraySize, out uint32 pdwNumDevices) GetAvailableMonitors;
			}
		}
		[CRepr]
		public struct IVMRFilterConfig : IUnknown
		{
			public const new Guid IID = .(0x9e5530c5, 0x7034, 0x48b4, 0xbb, 0x46, 0x0b, 0x8a, 0x6e, 0xfc, 0x8e, 0x36);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetImageCompositor(ref IVMRImageCompositor lpVMRImgCompositor) mut => VT.SetImageCompositor(ref this, ref lpVMRImgCompositor);
			public HRESULT SetNumberOfStreams(uint32 dwMaxStreams) mut => VT.SetNumberOfStreams(ref this, dwMaxStreams);
			public HRESULT GetNumberOfStreams(out uint32 pdwMaxStreams) mut => VT.GetNumberOfStreams(ref this, out pdwMaxStreams);
			public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.SetRenderingPrefs(ref this, dwRenderFlags);
			public HRESULT GetRenderingPrefs(out uint32 pdwRenderFlags) mut => VT.GetRenderingPrefs(ref this, out pdwRenderFlags);
			public HRESULT SetRenderingMode(uint32 Mode) mut => VT.SetRenderingMode(ref this, Mode);
			public HRESULT GetRenderingMode(out uint32 pMode) mut => VT.GetRenderingMode(ref this, out pMode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, ref IVMRImageCompositor lpVMRImgCompositor) SetImageCompositor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, uint32 dwMaxStreams) SetNumberOfStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, out uint32 pdwMaxStreams) GetNumberOfStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, uint32 dwRenderFlags) SetRenderingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, out uint32 pdwRenderFlags) GetRenderingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, uint32 Mode) SetRenderingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig self, out uint32 pMode) GetRenderingMode;
			}
		}
		[CRepr]
		public struct IVMRAspectRatioControl : IUnknown
		{
			public const new Guid IID = .(0xede80b5c, 0xbad6, 0x4623, 0xb5, 0x37, 0x65, 0x58, 0x6c, 0x9f, 0x8d, 0xfd);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetAspectRatioMode(out uint32 lpdwARMode) mut => VT.GetAspectRatioMode(ref this, out lpdwARMode);
			public HRESULT SetAspectRatioMode(uint32 dwARMode) mut => VT.SetAspectRatioMode(ref this, dwARMode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRAspectRatioControl self, out uint32 lpdwARMode) GetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRAspectRatioControl self, uint32 dwARMode) SetAspectRatioMode;
			}
		}
		[CRepr]
		public struct IVMRDeinterlaceControl : IUnknown
		{
			public const new Guid IID = .(0xbb057577, 0x0db8, 0x4e6a, 0x87, 0xa7, 0x1a, 0x8c, 0x9a, 0x50, 0x5a, 0x0f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNumberOfDeinterlaceModes(out VMRVideoDesc lpVideoDescription, out uint32 lpdwNumDeinterlaceModes, out Guid lpDeinterlaceModes) mut => VT.GetNumberOfDeinterlaceModes(ref this, out lpVideoDescription, out lpdwNumDeinterlaceModes, out lpDeinterlaceModes);
			public HRESULT GetDeinterlaceModeCaps(out Guid lpDeinterlaceMode, out VMRVideoDesc lpVideoDescription, out VMRDeinterlaceCaps lpDeinterlaceCaps) mut => VT.GetDeinterlaceModeCaps(ref this, out lpDeinterlaceMode, out lpVideoDescription, out lpDeinterlaceCaps);
			public HRESULT GetDeinterlaceMode(uint32 dwStreamID, out Guid lpDeinterlaceMode) mut => VT.GetDeinterlaceMode(ref this, dwStreamID, out lpDeinterlaceMode);
			public HRESULT SetDeinterlaceMode(uint32 dwStreamID, out Guid lpDeinterlaceMode) mut => VT.SetDeinterlaceMode(ref this, dwStreamID, out lpDeinterlaceMode);
			public HRESULT GetDeinterlacePrefs(out uint32 lpdwDeinterlacePrefs) mut => VT.GetDeinterlacePrefs(ref this, out lpdwDeinterlacePrefs);
			public HRESULT SetDeinterlacePrefs(uint32 dwDeinterlacePrefs) mut => VT.SetDeinterlacePrefs(ref this, dwDeinterlacePrefs);
			public HRESULT GetActualDeinterlaceMode(uint32 dwStreamID, out Guid lpDeinterlaceMode) mut => VT.GetActualDeinterlaceMode(ref this, dwStreamID, out lpDeinterlaceMode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, out VMRVideoDesc lpVideoDescription, out uint32 lpdwNumDeinterlaceModes, out Guid lpDeinterlaceModes) GetNumberOfDeinterlaceModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, out Guid lpDeinterlaceMode, out VMRVideoDesc lpVideoDescription, out VMRDeinterlaceCaps lpDeinterlaceCaps) GetDeinterlaceModeCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, uint32 dwStreamID, out Guid lpDeinterlaceMode) GetDeinterlaceMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, uint32 dwStreamID, out Guid lpDeinterlaceMode) SetDeinterlaceMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, out uint32 lpdwDeinterlacePrefs) GetDeinterlacePrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, uint32 dwDeinterlacePrefs) SetDeinterlacePrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl self, uint32 dwStreamID, out Guid lpDeinterlaceMode) GetActualDeinterlaceMode;
			}
		}
		[CRepr]
		public struct IVMRMixerBitmap : IUnknown
		{
			public const new Guid IID = .(0x1e673275, 0x0257, 0x40aa, 0xaf, 0x20, 0x7c, 0x60, 0x8d, 0x4a, 0x04, 0x28);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAlphaBitmap(in VMRALPHABITMAP pBmpParms) mut => VT.SetAlphaBitmap(ref this, pBmpParms);
			public HRESULT UpdateAlphaBitmapParameters(out VMRALPHABITMAP pBmpParms) mut => VT.UpdateAlphaBitmapParameters(ref this, out pBmpParms);
			public HRESULT GetAlphaBitmapParameters(out VMRALPHABITMAP pBmpParms) mut => VT.GetAlphaBitmapParameters(ref this, out pBmpParms);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerBitmap self, in VMRALPHABITMAP pBmpParms) SetAlphaBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerBitmap self, out VMRALPHABITMAP pBmpParms) UpdateAlphaBitmapParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerBitmap self, out VMRALPHABITMAP pBmpParms) GetAlphaBitmapParameters;
			}
		}
		[CRepr]
		public struct IVMRImageCompositor : IUnknown
		{
			public const new Guid IID = .(0x7a4fb5af, 0x479f, 0x4074, 0xbb, 0x40, 0xce, 0x67, 0x22, 0xe4, 0x3c, 0x82);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InitCompositionTarget(ref IUnknown pD3DDevice, ref IDirectDrawSurface7 pddsRenderTarget) mut => VT.InitCompositionTarget(ref this, ref pD3DDevice, ref pddsRenderTarget);
			public HRESULT TermCompositionTarget(ref IUnknown pD3DDevice, ref IDirectDrawSurface7 pddsRenderTarget) mut => VT.TermCompositionTarget(ref this, ref pD3DDevice, ref pddsRenderTarget);
			public HRESULT SetStreamMediaType(uint32 dwStrmID, out AM_MEDIA_TYPE pmt, BOOL fTexture) mut => VT.SetStreamMediaType(ref this, dwStrmID, out pmt, fTexture);
			public HRESULT CompositeImage(ref IUnknown pD3DDevice, ref IDirectDrawSurface7 pddsRenderTarget, out AM_MEDIA_TYPE pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, out VMRVIDEOSTREAMINFO pVideoStreamInfo, uint32 cStreams) mut => VT.CompositeImage(ref this, ref pD3DDevice, ref pddsRenderTarget, out pmtRenderTarget, rtStart, rtEnd, dwClrBkGnd, out pVideoStreamInfo, cStreams);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor self, ref IUnknown pD3DDevice, ref IDirectDrawSurface7 pddsRenderTarget) InitCompositionTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor self, ref IUnknown pD3DDevice, ref IDirectDrawSurface7 pddsRenderTarget) TermCompositionTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor self, uint32 dwStrmID, out AM_MEDIA_TYPE pmt, BOOL fTexture) SetStreamMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor self, ref IUnknown pD3DDevice, ref IDirectDrawSurface7 pddsRenderTarget, out AM_MEDIA_TYPE pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, out VMRVIDEOSTREAMINFO pVideoStreamInfo, uint32 cStreams) CompositeImage;
			}
		}
		[CRepr]
		public struct IVMRVideoStreamControl : IUnknown
		{
			public const new Guid IID = .(0x058d1f11, 0x2a54, 0x4bef, 0xbd, 0x54, 0xdf, 0x70, 0x66, 0x26, 0xb7, 0x27);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetColorKey(out DDCOLORKEY lpClrKey) mut => VT.SetColorKey(ref this, out lpClrKey);
			public HRESULT GetColorKey(out DDCOLORKEY lpClrKey) mut => VT.GetColorKey(ref this, out lpClrKey);
			public HRESULT SetStreamActiveState(BOOL fActive) mut => VT.SetStreamActiveState(ref this, fActive);
			public HRESULT GetStreamActiveState(out BOOL lpfActive) mut => VT.GetStreamActiveState(ref this, out lpfActive);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRVideoStreamControl self, out DDCOLORKEY lpClrKey) SetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRVideoStreamControl self, out DDCOLORKEY lpClrKey) GetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRVideoStreamControl self, BOOL fActive) SetStreamActiveState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRVideoStreamControl self, out BOOL lpfActive) GetStreamActiveState;
			}
		}
		[CRepr]
		public struct IVMRSurface : IUnknown
		{
			public const new Guid IID = .(0xa9849bbe, 0x9ec8, 0x4263, 0xb7, 0x64, 0x62, 0x73, 0x0f, 0x0d, 0x15, 0xd0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsSurfaceLocked() mut => VT.IsSurfaceLocked(ref this);
			public HRESULT LockSurface(out uint8* lpSurface) mut => VT.LockSurface(ref this, out lpSurface);
			public HRESULT UnlockSurface() mut => VT.UnlockSurface(ref this);
			public HRESULT GetSurface(out IDirectDrawSurface7* lplpSurface) mut => VT.GetSurface(ref this, out lplpSurface);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface self) IsSurfaceLocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface self, out uint8* lpSurface) LockSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface self) UnlockSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface self, out IDirectDrawSurface7* lplpSurface) GetSurface;
			}
		}
		[CRepr]
		public struct IVMRImagePresenterConfig : IUnknown
		{
			public const new Guid IID = .(0x9f3a1c85, 0x8555, 0x49ba, 0x93, 0x5f, 0xbe, 0x5b, 0x5b, 0x29, 0xd1, 0x78);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.SetRenderingPrefs(ref this, dwRenderFlags);
			public HRESULT GetRenderingPrefs(out uint32 dwRenderFlags) mut => VT.GetRenderingPrefs(ref this, out dwRenderFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenterConfig self, uint32 dwRenderFlags) SetRenderingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenterConfig self, out uint32 dwRenderFlags) GetRenderingPrefs;
			}
		}
		[CRepr]
		public struct IVMRImagePresenterExclModeConfig : IVMRImagePresenterConfig
		{
			public const new Guid IID = .(0xe6f7ce40, 0x4673, 0x44f1, 0x8f, 0x77, 0x54, 0x99, 0xd6, 0x8c, 0xb4, 0xea);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetXlcModeDDObjAndPrimarySurface(ref IDirectDraw7 lpDDObj, ref IDirectDrawSurface7 lpPrimarySurf) mut => VT.SetXlcModeDDObjAndPrimarySurface(ref this, ref lpDDObj, ref lpPrimarySurf);
			public HRESULT GetXlcModeDDObjAndPrimarySurface(out IDirectDraw7* lpDDObj, out IDirectDrawSurface7* lpPrimarySurf) mut => VT.GetXlcModeDDObjAndPrimarySurface(ref this, out lpDDObj, out lpPrimarySurf);

			[CRepr]
			public struct VTable : IVMRImagePresenterConfig.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenterExclModeConfig self, ref IDirectDraw7 lpDDObj, ref IDirectDrawSurface7 lpPrimarySurf) SetXlcModeDDObjAndPrimarySurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenterExclModeConfig self, out IDirectDraw7* lpDDObj, out IDirectDrawSurface7* lpPrimarySurf) GetXlcModeDDObjAndPrimarySurface;
			}
		}
		[CRepr]
		public struct IVPManager : IUnknown
		{
			public const new Guid IID = .(0xaac18c18, 0xe186, 0x46d2, 0x82, 0x5d, 0xa1, 0xf8, 0xdc, 0x8e, 0x39, 0x5a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetVideoPortIndex(uint32 dwVideoPortIndex) mut => VT.SetVideoPortIndex(ref this, dwVideoPortIndex);
			public HRESULT GetVideoPortIndex(out uint32 pdwVideoPortIndex) mut => VT.GetVideoPortIndex(ref this, out pdwVideoPortIndex);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPManager self, uint32 dwVideoPortIndex) SetVideoPortIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPManager self, out uint32 pdwVideoPortIndex) GetVideoPortIndex;
			}
		}
		[CRepr]
		public struct IDvdControl : IUnknown
		{
			public const new Guid IID = .(0xa70efe61, 0xe2a3, 0x11d0, 0xa9, 0xbe, 0x00, 0xaa, 0x00, 0x61, 0xbe, 0x93);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT TitlePlay(uint32 ulTitle) mut => VT.TitlePlay(ref this, ulTitle);
			public HRESULT ChapterPlay(uint32 ulTitle, uint32 ulChapter) mut => VT.ChapterPlay(ref this, ulTitle, ulChapter);
			public HRESULT TimePlay(uint32 ulTitle, uint32 bcdTime) mut => VT.TimePlay(ref this, ulTitle, bcdTime);
			public HRESULT StopForResume() mut => VT.StopForResume(ref this);
			public HRESULT GoUp() mut => VT.GoUp(ref this);
			public HRESULT TimeSearch(uint32 bcdTime) mut => VT.TimeSearch(ref this, bcdTime);
			public HRESULT ChapterSearch(uint32 ulChapter) mut => VT.ChapterSearch(ref this, ulChapter);
			public HRESULT PrevPGSearch() mut => VT.PrevPGSearch(ref this);
			public HRESULT TopPGSearch() mut => VT.TopPGSearch(ref this);
			public HRESULT NextPGSearch() mut => VT.NextPGSearch(ref this);
			public HRESULT ForwardScan(double dwSpeed) mut => VT.ForwardScan(ref this, dwSpeed);
			public HRESULT BackwardScan(double dwSpeed) mut => VT.BackwardScan(ref this, dwSpeed);
			public HRESULT MenuCall(DVD_MENU_ID MenuID) mut => VT.MenuCall(ref this, MenuID);
			public HRESULT Resume() mut => VT.Resume(ref this);
			public HRESULT UpperButtonSelect() mut => VT.UpperButtonSelect(ref this);
			public HRESULT LowerButtonSelect() mut => VT.LowerButtonSelect(ref this);
			public HRESULT LeftButtonSelect() mut => VT.LeftButtonSelect(ref this);
			public HRESULT RightButtonSelect() mut => VT.RightButtonSelect(ref this);
			public HRESULT ButtonActivate() mut => VT.ButtonActivate(ref this);
			public HRESULT ButtonSelectAndActivate(uint32 ulButton) mut => VT.ButtonSelectAndActivate(ref this, ulButton);
			public HRESULT StillOff() mut => VT.StillOff(ref this);
			public HRESULT PauseOn() mut => VT.PauseOn(ref this);
			public HRESULT PauseOff() mut => VT.PauseOff(ref this);
			public HRESULT MenuLanguageSelect(uint32 Language) mut => VT.MenuLanguageSelect(ref this, Language);
			public HRESULT AudioStreamChange(uint32 ulAudio) mut => VT.AudioStreamChange(ref this, ulAudio);
			public HRESULT SubpictureStreamChange(uint32 ulSubPicture, BOOL bDisplay) mut => VT.SubpictureStreamChange(ref this, ulSubPicture, bDisplay);
			public HRESULT AngleChange(uint32 ulAngle) mut => VT.AngleChange(ref this, ulAngle);
			public HRESULT ParentalLevelSelect(uint32 ulParentalLevel) mut => VT.ParentalLevelSelect(ref this, ulParentalLevel);
			public HRESULT ParentalCountrySelect(uint16 wCountry) mut => VT.ParentalCountrySelect(ref this, wCountry);
			public HRESULT KaraokeAudioPresentationModeChange(uint32 ulMode) mut => VT.KaraokeAudioPresentationModeChange(ref this, ulMode);
			public HRESULT VideoModePreferrence(uint32 ulPreferredDisplayMode) mut => VT.VideoModePreferrence(ref this, ulPreferredDisplayMode);
			public HRESULT SetRoot(PWSTR pszPath) mut => VT.SetRoot(ref this, pszPath);
			public HRESULT MouseActivate(POINT point) mut => VT.MouseActivate(ref this, point);
			public HRESULT MouseSelect(POINT point) mut => VT.MouseSelect(ref this, point);
			public HRESULT ChapterPlayAutoStop(uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay) mut => VT.ChapterPlayAutoStop(ref this, ulTitle, ulChapter, ulChaptersToPlay);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulTitle) TitlePlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulTitle, uint32 ulChapter) ChapterPlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulTitle, uint32 bcdTime) TimePlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) StopForResume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) GoUp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 bcdTime) TimeSearch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulChapter) ChapterSearch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) PrevPGSearch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) TopPGSearch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) NextPGSearch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, double dwSpeed) ForwardScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, double dwSpeed) BackwardScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, DVD_MENU_ID MenuID) MenuCall;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) Resume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) UpperButtonSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) LowerButtonSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) LeftButtonSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) RightButtonSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) ButtonActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulButton) ButtonSelectAndActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) StillOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) PauseOn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self) PauseOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 Language) MenuLanguageSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulAudio) AudioStreamChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulSubPicture, BOOL bDisplay) SubpictureStreamChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulAngle) AngleChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulParentalLevel) ParentalLevelSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint16 wCountry) ParentalCountrySelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulMode) KaraokeAudioPresentationModeChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulPreferredDisplayMode) VideoModePreferrence;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, PWSTR pszPath) SetRoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, POINT point) MouseActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, POINT point) MouseSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl self, uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay) ChapterPlayAutoStop;
			}
		}
		[CRepr]
		public struct IDvdInfo : IUnknown
		{
			public const new Guid IID = .(0xa70efe60, 0xe2a3, 0x11d0, 0xa9, 0xbe, 0x00, 0xaa, 0x00, 0x61, 0xbe, 0x93);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCurrentDomain(out DVD_DOMAIN pDomain) mut => VT.GetCurrentDomain(ref this, out pDomain);
			public HRESULT GetCurrentLocation(out DVD_PLAYBACK_LOCATION pLocation) mut => VT.GetCurrentLocation(ref this, out pLocation);
			public HRESULT GetTotalTitleTime(out uint32 pulTotalTime) mut => VT.GetTotalTitleTime(ref this, out pulTotalTime);
			public HRESULT GetCurrentButton(out uint32 pulButtonsAvailable, out uint32 pulCurrentButton) mut => VT.GetCurrentButton(ref this, out pulButtonsAvailable, out pulCurrentButton);
			public HRESULT GetCurrentAngle(out uint32 pulAnglesAvailable, out uint32 pulCurrentAngle) mut => VT.GetCurrentAngle(ref this, out pulAnglesAvailable, out pulCurrentAngle);
			public HRESULT GetCurrentAudio(out uint32 pulStreamsAvailable, out uint32 pulCurrentStream) mut => VT.GetCurrentAudio(ref this, out pulStreamsAvailable, out pulCurrentStream);
			public HRESULT GetCurrentSubpicture(out uint32 pulStreamsAvailable, out uint32 pulCurrentStream, out BOOL pIsDisabled) mut => VT.GetCurrentSubpicture(ref this, out pulStreamsAvailable, out pulCurrentStream, out pIsDisabled);
			public HRESULT GetCurrentUOPS(out uint32 pUOP) mut => VT.GetCurrentUOPS(ref this, out pUOP);
			public HRESULT GetAllSPRMs(out uint16* pRegisterArray) mut => VT.GetAllSPRMs(ref this, out pRegisterArray);
			public HRESULT GetAllGPRMs(out uint16* pRegisterArray) mut => VT.GetAllGPRMs(ref this, out pRegisterArray);
			public HRESULT GetAudioLanguage(uint32 ulStream, out uint32 pLanguage) mut => VT.GetAudioLanguage(ref this, ulStream, out pLanguage);
			public HRESULT GetSubpictureLanguage(uint32 ulStream, out uint32 pLanguage) mut => VT.GetSubpictureLanguage(ref this, ulStream, out pLanguage);
			public HRESULT GetTitleAttributes(uint32 ulTitle, out DVD_ATR pATR) mut => VT.GetTitleAttributes(ref this, ulTitle, out pATR);
			public HRESULT GetVMGAttributes(out DVD_ATR pATR) mut => VT.GetVMGAttributes(ref this, out pATR);
			public HRESULT GetCurrentVideoAttributes(out uint8* pATR) mut => VT.GetCurrentVideoAttributes(ref this, out pATR);
			public HRESULT GetCurrentAudioAttributes(out uint8* pATR) mut => VT.GetCurrentAudioAttributes(ref this, out pATR);
			public HRESULT GetCurrentSubpictureAttributes(out uint8* pATR) mut => VT.GetCurrentSubpictureAttributes(ref this, out pATR);
			public HRESULT GetCurrentVolumeInfo(out uint32 pulNumOfVol, out uint32 pulThisVolNum, out DVD_DISC_SIDE pSide, out uint32 pulNumOfTitles) mut => VT.GetCurrentVolumeInfo(ref this, out pulNumOfVol, out pulThisVolNum, out pSide, out pulNumOfTitles);
			public HRESULT GetDVDTextInfo(out uint8 pTextManager, uint32 ulBufSize, out uint32 pulActualSize) mut => VT.GetDVDTextInfo(ref this, out pTextManager, ulBufSize, out pulActualSize);
			public HRESULT GetPlayerParentalLevel(out uint32 pulParentalLevel, out uint32 pulCountryCode) mut => VT.GetPlayerParentalLevel(ref this, out pulParentalLevel, out pulCountryCode);
			public HRESULT GetNumberOfChapters(uint32 ulTitle, out uint32 pulNumberOfChapters) mut => VT.GetNumberOfChapters(ref this, ulTitle, out pulNumberOfChapters);
			public HRESULT GetTitleParentalLevels(uint32 ulTitle, out uint32 pulParentalLevels) mut => VT.GetTitleParentalLevels(ref this, ulTitle, out pulParentalLevels);
			public HRESULT GetRoot(uint8* pRoot, uint32 ulBufSize, out uint32 pulActualSize) mut => VT.GetRoot(ref this, pRoot, ulBufSize, out pulActualSize);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out DVD_DOMAIN pDomain) GetCurrentDomain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out DVD_PLAYBACK_LOCATION pLocation) GetCurrentLocation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulTotalTime) GetTotalTitleTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulButtonsAvailable, out uint32 pulCurrentButton) GetCurrentButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulAnglesAvailable, out uint32 pulCurrentAngle) GetCurrentAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulStreamsAvailable, out uint32 pulCurrentStream) GetCurrentAudio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulStreamsAvailable, out uint32 pulCurrentStream, out BOOL pIsDisabled) GetCurrentSubpicture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pUOP) GetCurrentUOPS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint16* pRegisterArray) GetAllSPRMs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint16* pRegisterArray) GetAllGPRMs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, uint32 ulStream, out uint32 pLanguage) GetAudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, uint32 ulStream, out uint32 pLanguage) GetSubpictureLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, uint32 ulTitle, out DVD_ATR pATR) GetTitleAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out DVD_ATR pATR) GetVMGAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint8* pATR) GetCurrentVideoAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint8* pATR) GetCurrentAudioAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint8* pATR) GetCurrentSubpictureAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulNumOfVol, out uint32 pulThisVolNum, out DVD_DISC_SIDE pSide, out uint32 pulNumOfTitles) GetCurrentVolumeInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint8 pTextManager, uint32 ulBufSize, out uint32 pulActualSize) GetDVDTextInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, out uint32 pulParentalLevel, out uint32 pulCountryCode) GetPlayerParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, uint32 ulTitle, out uint32 pulNumberOfChapters) GetNumberOfChapters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, uint32 ulTitle, out uint32 pulParentalLevels) GetTitleParentalLevels;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo self, uint8* pRoot, uint32 ulBufSize, out uint32 pulActualSize) GetRoot;
			}
		}
		[CRepr]
		public struct IDvdCmd : IUnknown
		{
			public const new Guid IID = .(0x5a4a97e4, 0x94ee, 0x4a55, 0x97, 0x51, 0x74, 0xb5, 0x64, 0x3a, 0xa2, 0x7d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT WaitForStart() mut => VT.WaitForStart(ref this);
			public HRESULT WaitForEnd() mut => VT.WaitForEnd(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdCmd self) WaitForStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdCmd self) WaitForEnd;
			}
		}
		[CRepr]
		public struct IDvdState : IUnknown
		{
			public const new Guid IID = .(0x86303d6d, 0x1c4a, 0x4087, 0xab, 0x42, 0xf7, 0x11, 0x16, 0x70, 0x48, 0xef);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDiscID(out uint64 pullUniqueID) mut => VT.GetDiscID(ref this, out pullUniqueID);
			public HRESULT GetParentalLevel(out uint32 pulParentalLevel) mut => VT.GetParentalLevel(ref this, out pulParentalLevel);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdState self, out uint64 pullUniqueID) GetDiscID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdState self, out uint32 pulParentalLevel) GetParentalLevel;
			}
		}
		[CRepr]
		public struct IDvdControl2 : IUnknown
		{
			public const new Guid IID = .(0x33bc7430, 0xeec0, 0x11d2, 0x82, 0x01, 0x00, 0xa0, 0xc9, 0xd7, 0x48, 0x42);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PlayTitle(uint32 ulTitle, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayTitle(ref this, ulTitle, dwFlags, out ppCmd);
			public HRESULT PlayChapterInTitle(uint32 ulTitle, uint32 ulChapter, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayChapterInTitle(ref this, ulTitle, ulChapter, dwFlags, out ppCmd);
			public HRESULT PlayAtTimeInTitle(uint32 ulTitle, out DVD_HMSF_TIMECODE pStartTime, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayAtTimeInTitle(ref this, ulTitle, out pStartTime, dwFlags, out ppCmd);
			public HRESULT Stop() mut => VT.Stop(ref this);
			public HRESULT ReturnFromSubmenu(uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.ReturnFromSubmenu(ref this, dwFlags, out ppCmd);
			public HRESULT PlayAtTime(out DVD_HMSF_TIMECODE pTime, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayAtTime(ref this, out pTime, dwFlags, out ppCmd);
			public HRESULT PlayChapter(uint32 ulChapter, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayChapter(ref this, ulChapter, dwFlags, out ppCmd);
			public HRESULT PlayPrevChapter(uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayPrevChapter(ref this, dwFlags, out ppCmd);
			public HRESULT ReplayChapter(uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.ReplayChapter(ref this, dwFlags, out ppCmd);
			public HRESULT PlayNextChapter(uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayNextChapter(ref this, dwFlags, out ppCmd);
			public HRESULT PlayForwards(double dSpeed, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayForwards(ref this, dSpeed, dwFlags, out ppCmd);
			public HRESULT PlayBackwards(double dSpeed, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayBackwards(ref this, dSpeed, dwFlags, out ppCmd);
			public HRESULT ShowMenu(DVD_MENU_ID MenuID, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.ShowMenu(ref this, MenuID, dwFlags, out ppCmd);
			public HRESULT Resume(uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.Resume(ref this, dwFlags, out ppCmd);
			public HRESULT SelectRelativeButton(DVD_RELATIVE_BUTTON buttonDir) mut => VT.SelectRelativeButton(ref this, buttonDir);
			public HRESULT ActivateButton() mut => VT.ActivateButton(ref this);
			public HRESULT SelectButton(uint32 ulButton) mut => VT.SelectButton(ref this, ulButton);
			public HRESULT SelectAndActivateButton(uint32 ulButton) mut => VT.SelectAndActivateButton(ref this, ulButton);
			public HRESULT StillOff() mut => VT.StillOff(ref this);
			public HRESULT Pause(BOOL bState) mut => VT.Pause(ref this, bState);
			public HRESULT SelectAudioStream(uint32 ulAudio, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.SelectAudioStream(ref this, ulAudio, dwFlags, out ppCmd);
			public HRESULT SelectSubpictureStream(uint32 ulSubPicture, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.SelectSubpictureStream(ref this, ulSubPicture, dwFlags, out ppCmd);
			public HRESULT SetSubpictureState(BOOL bState, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.SetSubpictureState(ref this, bState, dwFlags, out ppCmd);
			public HRESULT SelectAngle(uint32 ulAngle, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.SelectAngle(ref this, ulAngle, dwFlags, out ppCmd);
			public HRESULT SelectParentalLevel(uint32 ulParentalLevel) mut => VT.SelectParentalLevel(ref this, ulParentalLevel);
			public HRESULT SelectParentalCountry(out uint8 bCountry) mut => VT.SelectParentalCountry(ref this, out bCountry);
			public HRESULT SelectKaraokeAudioPresentationMode(uint32 ulMode) mut => VT.SelectKaraokeAudioPresentationMode(ref this, ulMode);
			public HRESULT SelectVideoModePreference(uint32 ulPreferredDisplayMode) mut => VT.SelectVideoModePreference(ref this, ulPreferredDisplayMode);
			public HRESULT SetDVDDirectory(PWSTR pszwPath) mut => VT.SetDVDDirectory(ref this, pszwPath);
			public HRESULT ActivateAtPosition(POINT point) mut => VT.ActivateAtPosition(ref this, point);
			public HRESULT SelectAtPosition(POINT point) mut => VT.SelectAtPosition(ref this, point);
			public HRESULT PlayChaptersAutoStop(uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayChaptersAutoStop(ref this, ulTitle, ulChapter, ulChaptersToPlay, dwFlags, out ppCmd);
			public HRESULT AcceptParentalLevelChange(BOOL bAccept) mut => VT.AcceptParentalLevelChange(ref this, bAccept);
			public HRESULT SetOption(DVD_OPTION_FLAG flag, BOOL fState) mut => VT.SetOption(ref this, flag, fState);
			public HRESULT SetState(ref IDvdState pState, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.SetState(ref this, ref pState, dwFlags, out ppCmd);
			public HRESULT PlayPeriodInTitleAutoStop(uint32 ulTitle, out DVD_HMSF_TIMECODE pStartTime, out DVD_HMSF_TIMECODE pEndTime, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.PlayPeriodInTitleAutoStop(ref this, ulTitle, out pStartTime, out pEndTime, dwFlags, out ppCmd);
			public HRESULT SetGPRM(uint32 ulIndex, uint16 wValue, uint32 dwFlags, out IDvdCmd* ppCmd) mut => VT.SetGPRM(ref this, ulIndex, wValue, dwFlags, out ppCmd);
			public HRESULT SelectDefaultMenuLanguage(uint32 Language) mut => VT.SelectDefaultMenuLanguage(ref this, Language);
			public HRESULT SelectDefaultAudioLanguage(uint32 Language, DVD_AUDIO_LANG_EXT audioExtension) mut => VT.SelectDefaultAudioLanguage(ref this, Language, audioExtension);
			public HRESULT SelectDefaultSubpictureLanguage(uint32 Language, DVD_SUBPICTURE_LANG_EXT subpictureExtension) mut => VT.SelectDefaultSubpictureLanguage(ref this, Language, subpictureExtension);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulTitle, uint32 dwFlags, out IDvdCmd* ppCmd) PlayTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulTitle, uint32 ulChapter, uint32 dwFlags, out IDvdCmd* ppCmd) PlayChapterInTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulTitle, out DVD_HMSF_TIMECODE pStartTime, uint32 dwFlags, out IDvdCmd* ppCmd) PlayAtTimeInTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 dwFlags, out IDvdCmd* ppCmd) ReturnFromSubmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, out DVD_HMSF_TIMECODE pTime, uint32 dwFlags, out IDvdCmd* ppCmd) PlayAtTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulChapter, uint32 dwFlags, out IDvdCmd* ppCmd) PlayChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 dwFlags, out IDvdCmd* ppCmd) PlayPrevChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 dwFlags, out IDvdCmd* ppCmd) ReplayChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 dwFlags, out IDvdCmd* ppCmd) PlayNextChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, double dSpeed, uint32 dwFlags, out IDvdCmd* ppCmd) PlayForwards;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, double dSpeed, uint32 dwFlags, out IDvdCmd* ppCmd) PlayBackwards;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, DVD_MENU_ID MenuID, uint32 dwFlags, out IDvdCmd* ppCmd) ShowMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 dwFlags, out IDvdCmd* ppCmd) Resume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, DVD_RELATIVE_BUTTON buttonDir) SelectRelativeButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self) ActivateButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulButton) SelectButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulButton) SelectAndActivateButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self) StillOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, BOOL bState) Pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulAudio, uint32 dwFlags, out IDvdCmd* ppCmd) SelectAudioStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulSubPicture, uint32 dwFlags, out IDvdCmd* ppCmd) SelectSubpictureStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, BOOL bState, uint32 dwFlags, out IDvdCmd* ppCmd) SetSubpictureState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulAngle, uint32 dwFlags, out IDvdCmd* ppCmd) SelectAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulParentalLevel) SelectParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, out uint8 bCountry) SelectParentalCountry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulMode) SelectKaraokeAudioPresentationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulPreferredDisplayMode) SelectVideoModePreference;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, PWSTR pszwPath) SetDVDDirectory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, POINT point) ActivateAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, POINT point) SelectAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulTitle, uint32 ulChapter, uint32 ulChaptersToPlay, uint32 dwFlags, out IDvdCmd* ppCmd) PlayChaptersAutoStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, BOOL bAccept) AcceptParentalLevelChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, DVD_OPTION_FLAG flag, BOOL fState) SetOption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, ref IDvdState pState, uint32 dwFlags, out IDvdCmd* ppCmd) SetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulTitle, out DVD_HMSF_TIMECODE pStartTime, out DVD_HMSF_TIMECODE pEndTime, uint32 dwFlags, out IDvdCmd* ppCmd) PlayPeriodInTitleAutoStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 ulIndex, uint16 wValue, uint32 dwFlags, out IDvdCmd* ppCmd) SetGPRM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 Language) SelectDefaultMenuLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 Language, DVD_AUDIO_LANG_EXT audioExtension) SelectDefaultAudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdControl2 self, uint32 Language, DVD_SUBPICTURE_LANG_EXT subpictureExtension) SelectDefaultSubpictureLanguage;
			}
		}
		[CRepr]
		public struct IDvdInfo2 : IUnknown
		{
			public const new Guid IID = .(0x34151510, 0xeec0, 0x11d2, 0x82, 0x01, 0x00, 0xa0, 0xc9, 0xd7, 0x48, 0x42);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCurrentDomain(out DVD_DOMAIN pDomain) mut => VT.GetCurrentDomain(ref this, out pDomain);
			public HRESULT GetCurrentLocation(out DVD_PLAYBACK_LOCATION2 pLocation) mut => VT.GetCurrentLocation(ref this, out pLocation);
			public HRESULT GetTotalTitleTime(out DVD_HMSF_TIMECODE pTotalTime, out uint32 ulTimeCodeFlags) mut => VT.GetTotalTitleTime(ref this, out pTotalTime, out ulTimeCodeFlags);
			public HRESULT GetCurrentButton(out uint32 pulButtonsAvailable, out uint32 pulCurrentButton) mut => VT.GetCurrentButton(ref this, out pulButtonsAvailable, out pulCurrentButton);
			public HRESULT GetCurrentAngle(out uint32 pulAnglesAvailable, out uint32 pulCurrentAngle) mut => VT.GetCurrentAngle(ref this, out pulAnglesAvailable, out pulCurrentAngle);
			public HRESULT GetCurrentAudio(out uint32 pulStreamsAvailable, out uint32 pulCurrentStream) mut => VT.GetCurrentAudio(ref this, out pulStreamsAvailable, out pulCurrentStream);
			public HRESULT GetCurrentSubpicture(out uint32 pulStreamsAvailable, out uint32 pulCurrentStream, out BOOL pbIsDisabled) mut => VT.GetCurrentSubpicture(ref this, out pulStreamsAvailable, out pulCurrentStream, out pbIsDisabled);
			public HRESULT GetCurrentUOPS(out uint32 pulUOPs) mut => VT.GetCurrentUOPS(ref this, out pulUOPs);
			public HRESULT GetAllSPRMs(out uint16* pRegisterArray) mut => VT.GetAllSPRMs(ref this, out pRegisterArray);
			public HRESULT GetAllGPRMs(out uint16* pRegisterArray) mut => VT.GetAllGPRMs(ref this, out pRegisterArray);
			public HRESULT GetAudioLanguage(uint32 ulStream, out uint32 pLanguage) mut => VT.GetAudioLanguage(ref this, ulStream, out pLanguage);
			public HRESULT GetSubpictureLanguage(uint32 ulStream, out uint32 pLanguage) mut => VT.GetSubpictureLanguage(ref this, ulStream, out pLanguage);
			public HRESULT GetTitleAttributes(uint32 ulTitle, out DVD_MenuAttributes pMenu, out DVD_TitleAttributes pTitle) mut => VT.GetTitleAttributes(ref this, ulTitle, out pMenu, out pTitle);
			public HRESULT GetVMGAttributes(out DVD_MenuAttributes pATR) mut => VT.GetVMGAttributes(ref this, out pATR);
			public HRESULT GetCurrentVideoAttributes(out DVD_VideoAttributes pATR) mut => VT.GetCurrentVideoAttributes(ref this, out pATR);
			public HRESULT GetAudioAttributes(uint32 ulStream, out DVD_AudioAttributes pATR) mut => VT.GetAudioAttributes(ref this, ulStream, out pATR);
			public HRESULT GetKaraokeAttributes(uint32 ulStream, out DVD_KaraokeAttributes pAttributes) mut => VT.GetKaraokeAttributes(ref this, ulStream, out pAttributes);
			public HRESULT GetSubpictureAttributes(uint32 ulStream, out DVD_SubpictureAttributes pATR) mut => VT.GetSubpictureAttributes(ref this, ulStream, out pATR);
			public HRESULT GetDVDVolumeInfo(out uint32 pulNumOfVolumes, out uint32 pulVolume, out DVD_DISC_SIDE pSide, out uint32 pulNumOfTitles) mut => VT.GetDVDVolumeInfo(ref this, out pulNumOfVolumes, out pulVolume, out pSide, out pulNumOfTitles);
			public HRESULT GetDVDTextNumberOfLanguages(out uint32 pulNumOfLangs) mut => VT.GetDVDTextNumberOfLanguages(ref this, out pulNumOfLangs);
			public HRESULT GetDVDTextLanguageInfo(uint32 ulLangIndex, out uint32 pulNumOfStrings, out uint32 pLangCode, out DVD_TextCharSet pbCharacterSet) mut => VT.GetDVDTextLanguageInfo(ref this, ulLangIndex, out pulNumOfStrings, out pLangCode, out pbCharacterSet);
			public HRESULT GetDVDTextStringAsNative(uint32 ulLangIndex, uint32 ulStringIndex, out uint8 pbBuffer, uint32 ulMaxBufferSize, out uint32 pulActualSize, out DVD_TextStringType pType) mut => VT.GetDVDTextStringAsNative(ref this, ulLangIndex, ulStringIndex, out pbBuffer, ulMaxBufferSize, out pulActualSize, out pType);
			public HRESULT GetDVDTextStringAsUnicode(uint32 ulLangIndex, uint32 ulStringIndex, PWSTR pchwBuffer, uint32 ulMaxBufferSize, out uint32 pulActualSize, out DVD_TextStringType pType) mut => VT.GetDVDTextStringAsUnicode(ref this, ulLangIndex, ulStringIndex, pchwBuffer, ulMaxBufferSize, out pulActualSize, out pType);
			public HRESULT GetPlayerParentalLevel(out uint32 pulParentalLevel, out uint8 pbCountryCode) mut => VT.GetPlayerParentalLevel(ref this, out pulParentalLevel, out pbCountryCode);
			public HRESULT GetNumberOfChapters(uint32 ulTitle, out uint32 pulNumOfChapters) mut => VT.GetNumberOfChapters(ref this, ulTitle, out pulNumOfChapters);
			public HRESULT GetTitleParentalLevels(uint32 ulTitle, out uint32 pulParentalLevels) mut => VT.GetTitleParentalLevels(ref this, ulTitle, out pulParentalLevels);
			public HRESULT GetDVDDirectory(char16* pszwPath, uint32 ulMaxSize, out uint32 pulActualSize) mut => VT.GetDVDDirectory(ref this, pszwPath, ulMaxSize, out pulActualSize);
			public HRESULT IsAudioStreamEnabled(uint32 ulStreamNum, out BOOL pbEnabled) mut => VT.IsAudioStreamEnabled(ref this, ulStreamNum, out pbEnabled);
			public HRESULT GetDiscID(PWSTR pszwPath, out uint64 pullDiscID) mut => VT.GetDiscID(ref this, pszwPath, out pullDiscID);
			public HRESULT GetState(out IDvdState* pStateData) mut => VT.GetState(ref this, out pStateData);
			public HRESULT GetMenuLanguages(out uint32 pLanguages, uint32 ulMaxLanguages, out uint32 pulActualLanguages) mut => VT.GetMenuLanguages(ref this, out pLanguages, ulMaxLanguages, out pulActualLanguages);
			public HRESULT GetButtonAtPosition(POINT point, out uint32 pulButtonIndex) mut => VT.GetButtonAtPosition(ref this, point, out pulButtonIndex);
			public HRESULT GetCmdFromEvent(int lParam1, out IDvdCmd* pCmdObj) mut => VT.GetCmdFromEvent(ref this, lParam1, out pCmdObj);
			public HRESULT GetDefaultMenuLanguage(out uint32 pLanguage) mut => VT.GetDefaultMenuLanguage(ref this, out pLanguage);
			public HRESULT GetDefaultAudioLanguage(out uint32 pLanguage, out DVD_AUDIO_LANG_EXT pAudioExtension) mut => VT.GetDefaultAudioLanguage(ref this, out pLanguage, out pAudioExtension);
			public HRESULT GetDefaultSubpictureLanguage(out uint32 pLanguage, out DVD_SUBPICTURE_LANG_EXT pSubpictureExtension) mut => VT.GetDefaultSubpictureLanguage(ref this, out pLanguage, out pSubpictureExtension);
			public HRESULT GetDecoderCaps(out DVD_DECODER_CAPS pCaps) mut => VT.GetDecoderCaps(ref this, out pCaps);
			public HRESULT GetButtonRect(uint32 ulButton, out RECT pRect) mut => VT.GetButtonRect(ref this, ulButton, out pRect);
			public HRESULT IsSubpictureStreamEnabled(uint32 ulStreamNum, out BOOL pbEnabled) mut => VT.IsSubpictureStreamEnabled(ref this, ulStreamNum, out pbEnabled);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out DVD_DOMAIN pDomain) GetCurrentDomain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out DVD_PLAYBACK_LOCATION2 pLocation) GetCurrentLocation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out DVD_HMSF_TIMECODE pTotalTime, out uint32 ulTimeCodeFlags) GetTotalTitleTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulButtonsAvailable, out uint32 pulCurrentButton) GetCurrentButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulAnglesAvailable, out uint32 pulCurrentAngle) GetCurrentAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulStreamsAvailable, out uint32 pulCurrentStream) GetCurrentAudio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulStreamsAvailable, out uint32 pulCurrentStream, out BOOL pbIsDisabled) GetCurrentSubpicture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulUOPs) GetCurrentUOPS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint16* pRegisterArray) GetAllSPRMs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint16* pRegisterArray) GetAllGPRMs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStream, out uint32 pLanguage) GetAudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStream, out uint32 pLanguage) GetSubpictureLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulTitle, out DVD_MenuAttributes pMenu, out DVD_TitleAttributes pTitle) GetTitleAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out DVD_MenuAttributes pATR) GetVMGAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out DVD_VideoAttributes pATR) GetCurrentVideoAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStream, out DVD_AudioAttributes pATR) GetAudioAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStream, out DVD_KaraokeAttributes pAttributes) GetKaraokeAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStream, out DVD_SubpictureAttributes pATR) GetSubpictureAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulNumOfVolumes, out uint32 pulVolume, out DVD_DISC_SIDE pSide, out uint32 pulNumOfTitles) GetDVDVolumeInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulNumOfLangs) GetDVDTextNumberOfLanguages;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulLangIndex, out uint32 pulNumOfStrings, out uint32 pLangCode, out DVD_TextCharSet pbCharacterSet) GetDVDTextLanguageInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulLangIndex, uint32 ulStringIndex, out uint8 pbBuffer, uint32 ulMaxBufferSize, out uint32 pulActualSize, out DVD_TextStringType pType) GetDVDTextStringAsNative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulLangIndex, uint32 ulStringIndex, PWSTR pchwBuffer, uint32 ulMaxBufferSize, out uint32 pulActualSize, out DVD_TextStringType pType) GetDVDTextStringAsUnicode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pulParentalLevel, out uint8 pbCountryCode) GetPlayerParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulTitle, out uint32 pulNumOfChapters) GetNumberOfChapters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulTitle, out uint32 pulParentalLevels) GetTitleParentalLevels;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, char16* pszwPath, uint32 ulMaxSize, out uint32 pulActualSize) GetDVDDirectory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStreamNum, out BOOL pbEnabled) IsAudioStreamEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, PWSTR pszwPath, out uint64 pullDiscID) GetDiscID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out IDvdState* pStateData) GetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pLanguages, uint32 ulMaxLanguages, out uint32 pulActualLanguages) GetMenuLanguages;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, POINT point, out uint32 pulButtonIndex) GetButtonAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, int lParam1, out IDvdCmd* pCmdObj) GetCmdFromEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pLanguage) GetDefaultMenuLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pLanguage, out DVD_AUDIO_LANG_EXT pAudioExtension) GetDefaultAudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out uint32 pLanguage, out DVD_SUBPICTURE_LANG_EXT pSubpictureExtension) GetDefaultSubpictureLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, out DVD_DECODER_CAPS pCaps) GetDecoderCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulButton, out RECT pRect) GetButtonRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdInfo2 self, uint32 ulStreamNum, out BOOL pbEnabled) IsSubpictureStreamEnabled;
			}
		}
		[CRepr]
		public struct IDvdGraphBuilder : IUnknown
		{
			public const new Guid IID = .(0xfcc152b6, 0xf372, 0x11d0, 0x8e, 0x00, 0x00, 0xc0, 0x4f, 0xd7, 0xc0, 0x8b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFiltergraph(out IGraphBuilder* ppGB) mut => VT.GetFiltergraph(ref this, out ppGB);
			public HRESULT GetDvdInterface(in Guid riid, void** ppvIF) mut => VT.GetDvdInterface(ref this, riid, ppvIF);
			public HRESULT RenderDvdVideoVolume(PWSTR lpcwszPathName, uint32 dwFlags, out AM_DVD_RENDERSTATUS pStatus) mut => VT.RenderDvdVideoVolume(ref this, lpcwszPathName, dwFlags, out pStatus);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdGraphBuilder self, out IGraphBuilder* ppGB) GetFiltergraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdGraphBuilder self, in Guid riid, void** ppvIF) GetDvdInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvdGraphBuilder self, PWSTR lpcwszPathName, uint32 dwFlags, out AM_DVD_RENDERSTATUS pStatus) RenderDvdVideoVolume;
			}
		}
		[CRepr]
		public struct IDDrawExclModeVideo : IUnknown
		{
			public const new Guid IID = .(0x153acc21, 0xd83b, 0x11d1, 0x82, 0xbf, 0x00, 0xa0, 0xc9, 0x69, 0x6c, 0x8f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDDrawObject(ref IDirectDraw pDDrawObject) mut => VT.SetDDrawObject(ref this, ref pDDrawObject);
			public HRESULT GetDDrawObject(out IDirectDraw* ppDDrawObject, out BOOL pbUsingExternal) mut => VT.GetDDrawObject(ref this, out ppDDrawObject, out pbUsingExternal);
			public HRESULT SetDDrawSurface(ref IDirectDrawSurface pDDrawSurface) mut => VT.SetDDrawSurface(ref this, ref pDDrawSurface);
			public HRESULT GetDDrawSurface(out IDirectDrawSurface* ppDDrawSurface, out BOOL pbUsingExternal) mut => VT.GetDDrawSurface(ref this, out ppDDrawSurface, out pbUsingExternal);
			public HRESULT SetDrawParameters(in RECT prcSource, in RECT prcTarget) mut => VT.SetDrawParameters(ref this, prcSource, prcTarget);
			public HRESULT GetNativeVideoProps(out uint32 pdwVideoWidth, out uint32 pdwVideoHeight, out uint32 pdwPictAspectRatioX, out uint32 pdwPictAspectRatioY) mut => VT.GetNativeVideoProps(ref this, out pdwVideoWidth, out pdwVideoHeight, out pdwPictAspectRatioX, out pdwPictAspectRatioY);
			public HRESULT SetCallbackInterface(ref IDDrawExclModeVideoCallback pCallback, uint32 dwFlags) mut => VT.SetCallbackInterface(ref this, ref pCallback, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, ref IDirectDraw pDDrawObject) SetDDrawObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, out IDirectDraw* ppDDrawObject, out BOOL pbUsingExternal) GetDDrawObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, ref IDirectDrawSurface pDDrawSurface) SetDDrawSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, out IDirectDrawSurface* ppDDrawSurface, out BOOL pbUsingExternal) GetDDrawSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, in RECT prcSource, in RECT prcTarget) SetDrawParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, out uint32 pdwVideoWidth, out uint32 pdwVideoHeight, out uint32 pdwPictAspectRatioX, out uint32 pdwPictAspectRatioY) GetNativeVideoProps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideo self, ref IDDrawExclModeVideoCallback pCallback, uint32 dwFlags) SetCallbackInterface;
			}
		}
		[CRepr]
		public struct IDDrawExclModeVideoCallback : IUnknown
		{
			public const new Guid IID = .(0x913c24a0, 0x20ab, 0x11d2, 0x90, 0x38, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x98);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnUpdateOverlay(BOOL bBefore, uint32 dwFlags, BOOL bOldVisible, in RECT prcOldSrc, in RECT prcOldDest, BOOL bNewVisible, in RECT prcNewSrc, in RECT prcNewDest) mut => VT.OnUpdateOverlay(ref this, bBefore, dwFlags, bOldVisible, prcOldSrc, prcOldDest, bNewVisible, prcNewSrc, prcNewDest);
			public HRESULT OnUpdateColorKey(in COLORKEY pKey, uint32 dwColor) mut => VT.OnUpdateColorKey(ref this, pKey, dwColor);
			public HRESULT OnUpdateSize(uint32 dwWidth, uint32 dwHeight, uint32 dwARWidth, uint32 dwARHeight) mut => VT.OnUpdateSize(ref this, dwWidth, dwHeight, dwARWidth, dwARHeight);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideoCallback self, BOOL bBefore, uint32 dwFlags, BOOL bOldVisible, in RECT prcOldSrc, in RECT prcOldDest, BOOL bNewVisible, in RECT prcNewSrc, in RECT prcNewDest) OnUpdateOverlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideoCallback self, in COLORKEY pKey, uint32 dwColor) OnUpdateColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDDrawExclModeVideoCallback self, uint32 dwWidth, uint32 dwHeight, uint32 dwARWidth, uint32 dwARHeight) OnUpdateSize;
			}
		}
		[CRepr]
		public struct IBDA_NetworkProvider : IUnknown
		{
			public const new Guid IID = .(0xfd501041, 0x8ebe, 0x11ce, 0x81, 0x83, 0x00, 0xaa, 0x00, 0x57, 0x7d, 0xa2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PutSignalSource(uint32 ulSignalSource) mut => VT.PutSignalSource(ref this, ulSignalSource);
			public HRESULT GetSignalSource(out uint32 pulSignalSource) mut => VT.GetSignalSource(ref this, out pulSignalSource);
			public HRESULT GetNetworkType(out Guid pguidNetworkType) mut => VT.GetNetworkType(ref this, out pguidNetworkType);
			public HRESULT PutTuningSpace(in Guid guidTuningSpace) mut => VT.PutTuningSpace(ref this, guidTuningSpace);
			public HRESULT GetTuningSpace(out Guid pguidTuingSpace) mut => VT.GetTuningSpace(ref this, out pguidTuingSpace);
			public HRESULT RegisterDeviceFilter(ref IUnknown pUnkFilterControl, out uint32 ppvRegisitrationContext) mut => VT.RegisterDeviceFilter(ref this, ref pUnkFilterControl, out ppvRegisitrationContext);
			public HRESULT UnRegisterDeviceFilter(uint32 pvRegistrationContext) mut => VT.UnRegisterDeviceFilter(ref this, pvRegistrationContext);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, uint32 ulSignalSource) PutSignalSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, out uint32 pulSignalSource) GetSignalSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, out Guid pguidNetworkType) GetNetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, in Guid guidTuningSpace) PutTuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, out Guid pguidTuingSpace) GetTuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, ref IUnknown pUnkFilterControl, out uint32 ppvRegisitrationContext) RegisterDeviceFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NetworkProvider self, uint32 pvRegistrationContext) UnRegisterDeviceFilter;
			}
		}
		[CRepr]
		public struct IBDA_EthernetFilter : IUnknown
		{
			public const new Guid IID = .(0x71985f43, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetMulticastListSize(out uint32 pulcbAddresses) mut => VT.GetMulticastListSize(ref this, out pulcbAddresses);
			public HRESULT PutMulticastList(uint32 ulcbAddresses, uint8* pAddressList) mut => VT.PutMulticastList(ref this, ulcbAddresses, pAddressList);
			public HRESULT GetMulticastList(out uint32 pulcbAddresses, uint8* pAddressList) mut => VT.GetMulticastList(ref this, out pulcbAddresses, pAddressList);
			public HRESULT PutMulticastMode(uint32 ulModeMask) mut => VT.PutMulticastMode(ref this, ulModeMask);
			public HRESULT GetMulticastMode(out uint32 pulModeMask) mut => VT.GetMulticastMode(ref this, out pulModeMask);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EthernetFilter self, out uint32 pulcbAddresses) GetMulticastListSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EthernetFilter self, uint32 ulcbAddresses, uint8* pAddressList) PutMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EthernetFilter self, out uint32 pulcbAddresses, uint8* pAddressList) GetMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EthernetFilter self, uint32 ulModeMask) PutMulticastMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EthernetFilter self, out uint32 pulModeMask) GetMulticastMode;
			}
		}
		[CRepr]
		public struct IBDA_IPV4Filter : IUnknown
		{
			public const new Guid IID = .(0x71985f44, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetMulticastListSize(out uint32 pulcbAddresses) mut => VT.GetMulticastListSize(ref this, out pulcbAddresses);
			public HRESULT PutMulticastList(uint32 ulcbAddresses, uint8* pAddressList) mut => VT.PutMulticastList(ref this, ulcbAddresses, pAddressList);
			public HRESULT GetMulticastList(out uint32 pulcbAddresses, uint8* pAddressList) mut => VT.GetMulticastList(ref this, out pulcbAddresses, pAddressList);
			public HRESULT PutMulticastMode(uint32 ulModeMask) mut => VT.PutMulticastMode(ref this, ulModeMask);
			public HRESULT GetMulticastMode(out uint32 pulModeMask) mut => VT.GetMulticastMode(ref this, out pulModeMask);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV4Filter self, out uint32 pulcbAddresses) GetMulticastListSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV4Filter self, uint32 ulcbAddresses, uint8* pAddressList) PutMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV4Filter self, out uint32 pulcbAddresses, uint8* pAddressList) GetMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV4Filter self, uint32 ulModeMask) PutMulticastMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV4Filter self, out uint32 pulModeMask) GetMulticastMode;
			}
		}
		[CRepr]
		public struct IBDA_IPV6Filter : IUnknown
		{
			public const new Guid IID = .(0xe1785a74, 0x2a23, 0x4fb3, 0x92, 0x45, 0xa8, 0xf8, 0x80, 0x17, 0xef, 0x33);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetMulticastListSize(out uint32 pulcbAddresses) mut => VT.GetMulticastListSize(ref this, out pulcbAddresses);
			public HRESULT PutMulticastList(uint32 ulcbAddresses, uint8* pAddressList) mut => VT.PutMulticastList(ref this, ulcbAddresses, pAddressList);
			public HRESULT GetMulticastList(out uint32 pulcbAddresses, uint8* pAddressList) mut => VT.GetMulticastList(ref this, out pulcbAddresses, pAddressList);
			public HRESULT PutMulticastMode(uint32 ulModeMask) mut => VT.PutMulticastMode(ref this, ulModeMask);
			public HRESULT GetMulticastMode(out uint32 pulModeMask) mut => VT.GetMulticastMode(ref this, out pulModeMask);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV6Filter self, out uint32 pulcbAddresses) GetMulticastListSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV6Filter self, uint32 ulcbAddresses, uint8* pAddressList) PutMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV6Filter self, out uint32 pulcbAddresses, uint8* pAddressList) GetMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV6Filter self, uint32 ulModeMask) PutMulticastMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPV6Filter self, out uint32 pulModeMask) GetMulticastMode;
			}
		}
		[CRepr]
		public struct IBDA_DeviceControl : IUnknown
		{
			public const new Guid IID = .(0xfd0a5af3, 0xb41d, 0x11d2, 0x9c, 0x95, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StartChanges() mut => VT.StartChanges(ref this);
			public HRESULT CheckChanges() mut => VT.CheckChanges(ref this);
			public HRESULT CommitChanges() mut => VT.CommitChanges(ref this);
			public HRESULT GetChangeState(out uint32 pState) mut => VT.GetChangeState(ref this, out pState);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DeviceControl self) StartChanges;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DeviceControl self) CheckChanges;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DeviceControl self) CommitChanges;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DeviceControl self, out uint32 pState) GetChangeState;
			}
		}
		[CRepr]
		public struct IBDA_PinControl : IUnknown
		{
			public const new Guid IID = .(0x0ded49d5, 0xa8b7, 0x4d5d, 0x97, 0xa1, 0x12, 0xb0, 0xc1, 0x95, 0x87, 0x4d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPinID(out uint32 pulPinID) mut => VT.GetPinID(ref this, out pulPinID);
			public HRESULT GetPinType(out uint32 pulPinType) mut => VT.GetPinType(ref this, out pulPinType);
			public HRESULT RegistrationContext(out uint32 pulRegistrationCtx) mut => VT.RegistrationContext(ref this, out pulRegistrationCtx);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_PinControl self, out uint32 pulPinID) GetPinID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_PinControl self, out uint32 pulPinType) GetPinType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_PinControl self, out uint32 pulRegistrationCtx) RegistrationContext;
			}
		}
		[CRepr]
		public struct IBDA_SignalProperties : IUnknown
		{
			public const new Guid IID = .(0xd2f1644b, 0xb409, 0x11d2, 0xbc, 0x69, 0x00, 0xa0, 0xc9, 0xee, 0x9e, 0x16);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PutNetworkType(in Guid guidNetworkType) mut => VT.PutNetworkType(ref this, guidNetworkType);
			public HRESULT GetNetworkType(out Guid pguidNetworkType) mut => VT.GetNetworkType(ref this, out pguidNetworkType);
			public HRESULT PutSignalSource(uint32 ulSignalSource) mut => VT.PutSignalSource(ref this, ulSignalSource);
			public HRESULT GetSignalSource(out uint32 pulSignalSource) mut => VT.GetSignalSource(ref this, out pulSignalSource);
			public HRESULT PutTuningSpace(in Guid guidTuningSpace) mut => VT.PutTuningSpace(ref this, guidTuningSpace);
			public HRESULT GetTuningSpace(out Guid pguidTuingSpace) mut => VT.GetTuningSpace(ref this, out pguidTuingSpace);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalProperties self, in Guid guidNetworkType) PutNetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalProperties self, out Guid pguidNetworkType) GetNetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalProperties self, uint32 ulSignalSource) PutSignalSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalProperties self, out uint32 pulSignalSource) GetSignalSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalProperties self, in Guid guidTuningSpace) PutTuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalProperties self, out Guid pguidTuingSpace) GetTuningSpace;
			}
		}
		[CRepr]
		public struct IBDA_SignalStatistics : IUnknown
		{
			public const new Guid IID = .(0x1347d106, 0xcf3a, 0x428a, 0xa5, 0xcb, 0xac, 0x0d, 0x9a, 0x2a, 0x43, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_SignalStrength(int32 lDbStrength) mut => VT.put_SignalStrength(ref this, lDbStrength);
			public HRESULT get_SignalStrength(out int32 plDbStrength) mut => VT.get_SignalStrength(ref this, out plDbStrength);
			public HRESULT put_SignalQuality(int32 lPercentQuality) mut => VT.put_SignalQuality(ref this, lPercentQuality);
			public HRESULT get_SignalQuality(out int32 plPercentQuality) mut => VT.get_SignalQuality(ref this, out plPercentQuality);
			public HRESULT put_SignalPresent(BOOLEAN fPresent) mut => VT.put_SignalPresent(ref this, fPresent);
			public HRESULT get_SignalPresent(out uint8 pfPresent) mut => VT.get_SignalPresent(ref this, out pfPresent);
			public HRESULT put_SignalLocked(BOOLEAN fLocked) mut => VT.put_SignalLocked(ref this, fLocked);
			public HRESULT get_SignalLocked(out uint8 pfLocked) mut => VT.get_SignalLocked(ref this, out pfLocked);
			public HRESULT put_SampleTime(int32 lmsSampleTime) mut => VT.put_SampleTime(ref this, lmsSampleTime);
			public HRESULT get_SampleTime(out int32 plmsSampleTime) mut => VT.get_SampleTime(ref this, out plmsSampleTime);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, int32 lDbStrength) put_SignalStrength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, out int32 plDbStrength) get_SignalStrength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, int32 lPercentQuality) put_SignalQuality;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, out int32 plPercentQuality) get_SignalQuality;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, BOOLEAN fPresent) put_SignalPresent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, out uint8 pfPresent) get_SignalPresent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, BOOLEAN fLocked) put_SignalLocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, out uint8 pfLocked) get_SignalLocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, int32 lmsSampleTime) put_SampleTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_SignalStatistics self, out int32 plmsSampleTime) get_SampleTime;
			}
		}
		[CRepr]
		public struct IBDA_Topology : IUnknown
		{
			public const new Guid IID = .(0x79b56888, 0x7fea, 0x4690, 0xb4, 0x5d, 0x38, 0xfd, 0x3c, 0x78, 0x49, 0xbe);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNodeTypes(out uint32 pulcNodeTypes, uint32 ulcNodeTypesMax, uint32* rgulNodeTypes) mut => VT.GetNodeTypes(ref this, out pulcNodeTypes, ulcNodeTypesMax, rgulNodeTypes);
			public HRESULT GetNodeDescriptors(out uint32 ulcNodeDescriptors, uint32 ulcNodeDescriptorsMax, BDANODE_DESCRIPTOR* rgNodeDescriptors) mut => VT.GetNodeDescriptors(ref this, out ulcNodeDescriptors, ulcNodeDescriptorsMax, rgNodeDescriptors);
			public HRESULT GetNodeInterfaces(uint32 ulNodeType, out uint32 pulcInterfaces, uint32 ulcInterfacesMax, Guid* rgguidInterfaces) mut => VT.GetNodeInterfaces(ref this, ulNodeType, out pulcInterfaces, ulcInterfacesMax, rgguidInterfaces);
			public HRESULT GetPinTypes(out uint32 pulcPinTypes, uint32 ulcPinTypesMax, uint32* rgulPinTypes) mut => VT.GetPinTypes(ref this, out pulcPinTypes, ulcPinTypesMax, rgulPinTypes);
			public HRESULT GetTemplateConnections(out uint32 pulcConnections, uint32 ulcConnectionsMax, BDA_TEMPLATE_CONNECTION* rgConnections) mut => VT.GetTemplateConnections(ref this, out pulcConnections, ulcConnectionsMax, rgConnections);
			public HRESULT CreatePin(uint32 ulPinType, out uint32 pulPinId) mut => VT.CreatePin(ref this, ulPinType, out pulPinId);
			public HRESULT DeletePin(uint32 ulPinId) mut => VT.DeletePin(ref this, ulPinId);
			public HRESULT SetMediaType(uint32 ulPinId, ref AM_MEDIA_TYPE pMediaType) mut => VT.SetMediaType(ref this, ulPinId, ref pMediaType);
			public HRESULT SetMedium(uint32 ulPinId, ref REGPINMEDIUM pMedium) mut => VT.SetMedium(ref this, ulPinId, ref pMedium);
			public HRESULT CreateTopology(uint32 ulInputPinId, uint32 ulOutputPinId) mut => VT.CreateTopology(ref this, ulInputPinId, ulOutputPinId);
			public HRESULT GetControlNode(uint32 ulInputPinId, uint32 ulOutputPinId, uint32 ulNodeType, out IUnknown* ppControlNode) mut => VT.GetControlNode(ref this, ulInputPinId, ulOutputPinId, ulNodeType, out ppControlNode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, out uint32 pulcNodeTypes, uint32 ulcNodeTypesMax, uint32* rgulNodeTypes) GetNodeTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, out uint32 ulcNodeDescriptors, uint32 ulcNodeDescriptorsMax, BDANODE_DESCRIPTOR* rgNodeDescriptors) GetNodeDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulNodeType, out uint32 pulcInterfaces, uint32 ulcInterfacesMax, Guid* rgguidInterfaces) GetNodeInterfaces;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, out uint32 pulcPinTypes, uint32 ulcPinTypesMax, uint32* rgulPinTypes) GetPinTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, out uint32 pulcConnections, uint32 ulcConnectionsMax, BDA_TEMPLATE_CONNECTION* rgConnections) GetTemplateConnections;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulPinType, out uint32 pulPinId) CreatePin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulPinId) DeletePin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulPinId, ref AM_MEDIA_TYPE pMediaType) SetMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulPinId, ref REGPINMEDIUM pMedium) SetMedium;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulInputPinId, uint32 ulOutputPinId) CreateTopology;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Topology self, uint32 ulInputPinId, uint32 ulOutputPinId, uint32 ulNodeType, out IUnknown* ppControlNode) GetControlNode;
			}
		}
		[CRepr]
		public struct IBDA_VoidTransform : IUnknown
		{
			public const new Guid IID = .(0x71985f46, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Start() mut => VT.Start(ref this);
			public HRESULT Stop() mut => VT.Stop(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_VoidTransform self) Start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_VoidTransform self) Stop;
			}
		}
		[CRepr]
		public struct IBDA_NullTransform : IUnknown
		{
			public const new Guid IID = .(0xddf15b0d, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Start() mut => VT.Start(ref this);
			public HRESULT Stop() mut => VT.Stop(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NullTransform self) Start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NullTransform self) Stop;
			}
		}
		[CRepr]
		public struct IBDA_FrequencyFilter : IUnknown
		{
			public const new Guid IID = .(0x71985f47, 0x1ca1, 0x11d3, 0x9c, 0xc8, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Autotune(uint32 ulTransponder) mut => VT.put_Autotune(ref this, ulTransponder);
			public HRESULT get_Autotune(out uint32 pulTransponder) mut => VT.get_Autotune(ref this, out pulTransponder);
			public HRESULT put_Frequency(uint32 ulFrequency) mut => VT.put_Frequency(ref this, ulFrequency);
			public HRESULT get_Frequency(out uint32 pulFrequency) mut => VT.get_Frequency(ref this, out pulFrequency);
			public HRESULT put_Polarity(Polarisation Polarity) mut => VT.put_Polarity(ref this, Polarity);
			public HRESULT get_Polarity(out Polarisation pPolarity) mut => VT.get_Polarity(ref this, out pPolarity);
			public HRESULT put_Range(uint32 ulRange) mut => VT.put_Range(ref this, ulRange);
			public HRESULT get_Range(out uint32 pulRange) mut => VT.get_Range(ref this, out pulRange);
			public HRESULT put_Bandwidth(uint32 ulBandwidth) mut => VT.put_Bandwidth(ref this, ulBandwidth);
			public HRESULT get_Bandwidth(out uint32 pulBandwidth) mut => VT.get_Bandwidth(ref this, out pulBandwidth);
			public HRESULT put_FrequencyMultiplier(uint32 ulMultiplier) mut => VT.put_FrequencyMultiplier(ref this, ulMultiplier);
			public HRESULT get_FrequencyMultiplier(out uint32 pulMultiplier) mut => VT.get_FrequencyMultiplier(ref this, out pulMultiplier);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, uint32 ulTransponder) put_Autotune;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, out uint32 pulTransponder) get_Autotune;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, uint32 ulFrequency) put_Frequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, out uint32 pulFrequency) get_Frequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, Polarisation Polarity) put_Polarity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, out Polarisation pPolarity) get_Polarity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, uint32 ulRange) put_Range;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, out uint32 pulRange) get_Range;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, uint32 ulBandwidth) put_Bandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, out uint32 pulBandwidth) get_Bandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, uint32 ulMultiplier) put_FrequencyMultiplier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FrequencyFilter self, out uint32 pulMultiplier) get_FrequencyMultiplier;
			}
		}
		[CRepr]
		public struct IBDA_LNBInfo : IUnknown
		{
			public const new Guid IID = .(0x992cf102, 0x49f9, 0x4719, 0xa6, 0x64, 0xc4, 0xf2, 0x3e, 0x24, 0x08, 0xf4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_LocalOscilatorFrequencyLowBand(uint32 ulLOFLow) mut => VT.put_LocalOscilatorFrequencyLowBand(ref this, ulLOFLow);
			public HRESULT get_LocalOscilatorFrequencyLowBand(out uint32 pulLOFLow) mut => VT.get_LocalOscilatorFrequencyLowBand(ref this, out pulLOFLow);
			public HRESULT put_LocalOscilatorFrequencyHighBand(uint32 ulLOFHigh) mut => VT.put_LocalOscilatorFrequencyHighBand(ref this, ulLOFHigh);
			public HRESULT get_LocalOscilatorFrequencyHighBand(out uint32 pulLOFHigh) mut => VT.get_LocalOscilatorFrequencyHighBand(ref this, out pulLOFHigh);
			public HRESULT put_HighLowSwitchFrequency(uint32 ulSwitchFrequency) mut => VT.put_HighLowSwitchFrequency(ref this, ulSwitchFrequency);
			public HRESULT get_HighLowSwitchFrequency(out uint32 pulSwitchFrequency) mut => VT.get_HighLowSwitchFrequency(ref this, out pulSwitchFrequency);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_LNBInfo self, uint32 ulLOFLow) put_LocalOscilatorFrequencyLowBand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_LNBInfo self, out uint32 pulLOFLow) get_LocalOscilatorFrequencyLowBand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_LNBInfo self, uint32 ulLOFHigh) put_LocalOscilatorFrequencyHighBand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_LNBInfo self, out uint32 pulLOFHigh) get_LocalOscilatorFrequencyHighBand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_LNBInfo self, uint32 ulSwitchFrequency) put_HighLowSwitchFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_LNBInfo self, out uint32 pulSwitchFrequency) get_HighLowSwitchFrequency;
			}
		}
		[CRepr]
		public struct IBDA_DiseqCommand : IUnknown
		{
			public const new Guid IID = .(0xf84e2ab0, 0x3c6b, 0x45e3, 0xa0, 0xfc, 0x86, 0x69, 0xd4, 0xb8, 0x1f, 0x11);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_EnableDiseqCommands(BOOLEAN bEnable) mut => VT.put_EnableDiseqCommands(ref this, bEnable);
			public HRESULT put_DiseqLNBSource(uint32 ulLNBSource) mut => VT.put_DiseqLNBSource(ref this, ulLNBSource);
			public HRESULT put_DiseqUseToneBurst(BOOLEAN bUseToneBurst) mut => VT.put_DiseqUseToneBurst(ref this, bUseToneBurst);
			public HRESULT put_DiseqRepeats(uint32 ulRepeats) mut => VT.put_DiseqRepeats(ref this, ulRepeats);
			public HRESULT put_DiseqSendCommand(uint32 ulRequestId, uint32 ulcbCommandLen, uint8* pbCommand) mut => VT.put_DiseqSendCommand(ref this, ulRequestId, ulcbCommandLen, pbCommand);
			public HRESULT get_DiseqResponse(uint32 ulRequestId, out uint32 pulcbResponseLen, uint8* pbResponse) mut => VT.get_DiseqResponse(ref this, ulRequestId, out pulcbResponseLen, pbResponse);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DiseqCommand self, BOOLEAN bEnable) put_EnableDiseqCommands;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DiseqCommand self, uint32 ulLNBSource) put_DiseqLNBSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DiseqCommand self, BOOLEAN bUseToneBurst) put_DiseqUseToneBurst;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DiseqCommand self, uint32 ulRepeats) put_DiseqRepeats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DiseqCommand self, uint32 ulRequestId, uint32 ulcbCommandLen, uint8* pbCommand) put_DiseqSendCommand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DiseqCommand self, uint32 ulRequestId, out uint32 pulcbResponseLen, uint8* pbResponse) get_DiseqResponse;
			}
		}
		[CRepr]
		public struct IBDA_AutoDemodulate : IUnknown
		{
			public const new Guid IID = .(0xddf15b12, 0xbd25, 0x11d2, 0x9c, 0xa0, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_AutoDemodulate() mut => VT.put_AutoDemodulate(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_AutoDemodulate self) put_AutoDemodulate;
			}
		}
		[CRepr]
		public struct IBDA_AutoDemodulateEx : IBDA_AutoDemodulate
		{
			public const new Guid IID = .(0x34518d13, 0x1182, 0x48e6, 0xb2, 0x8f, 0xb2, 0x49, 0x87, 0x78, 0x73, 0x26);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SupportedDeviceNodeTypes(uint32 ulcDeviceNodeTypesMax, out uint32 pulcDeviceNodeTypes, out Guid pguidDeviceNodeTypes) mut => VT.get_SupportedDeviceNodeTypes(ref this, ulcDeviceNodeTypesMax, out pulcDeviceNodeTypes, out pguidDeviceNodeTypes);
			public HRESULT get_SupportedVideoFormats(out uint32 pulAMTunerModeType, out uint32 pulAnalogVideoStandard) mut => VT.get_SupportedVideoFormats(ref this, out pulAMTunerModeType, out pulAnalogVideoStandard);
			public HRESULT get_AuxInputCount(out uint32 pulCompositeCount, out uint32 pulSvideoCount) mut => VT.get_AuxInputCount(ref this, out pulCompositeCount, out pulSvideoCount);

			[CRepr]
			public struct VTable : IBDA_AutoDemodulate.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_AutoDemodulateEx self, uint32 ulcDeviceNodeTypesMax, out uint32 pulcDeviceNodeTypes, out Guid pguidDeviceNodeTypes) get_SupportedDeviceNodeTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_AutoDemodulateEx self, out uint32 pulAMTunerModeType, out uint32 pulAnalogVideoStandard) get_SupportedVideoFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_AutoDemodulateEx self, out uint32 pulCompositeCount, out uint32 pulSvideoCount) get_AuxInputCount;
			}
		}
		[CRepr]
		public struct IBDA_DigitalDemodulator : IUnknown
		{
			public const new Guid IID = .(0xef30f379, 0x985b, 0x4d10, 0xb6, 0x40, 0xa7, 0x9d, 0x5e, 0x04, 0xe1, 0xe0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ModulationType(ref ModulationType pModulationType) mut => VT.put_ModulationType(ref this, ref pModulationType);
			public HRESULT get_ModulationType(out ModulationType pModulationType) mut => VT.get_ModulationType(ref this, out pModulationType);
			public HRESULT put_InnerFECMethod(ref FECMethod pFECMethod) mut => VT.put_InnerFECMethod(ref this, ref pFECMethod);
			public HRESULT get_InnerFECMethod(out FECMethod pFECMethod) mut => VT.get_InnerFECMethod(ref this, out pFECMethod);
			public HRESULT put_InnerFECRate(ref BinaryConvolutionCodeRate pFECRate) mut => VT.put_InnerFECRate(ref this, ref pFECRate);
			public HRESULT get_InnerFECRate(out BinaryConvolutionCodeRate pFECRate) mut => VT.get_InnerFECRate(ref this, out pFECRate);
			public HRESULT put_OuterFECMethod(ref FECMethod pFECMethod) mut => VT.put_OuterFECMethod(ref this, ref pFECMethod);
			public HRESULT get_OuterFECMethod(out FECMethod pFECMethod) mut => VT.get_OuterFECMethod(ref this, out pFECMethod);
			public HRESULT put_OuterFECRate(ref BinaryConvolutionCodeRate pFECRate) mut => VT.put_OuterFECRate(ref this, ref pFECRate);
			public HRESULT get_OuterFECRate(out BinaryConvolutionCodeRate pFECRate) mut => VT.get_OuterFECRate(ref this, out pFECRate);
			public HRESULT put_SymbolRate(ref uint32 pSymbolRate) mut => VT.put_SymbolRate(ref this, ref pSymbolRate);
			public HRESULT get_SymbolRate(out uint32 pSymbolRate) mut => VT.get_SymbolRate(ref this, out pSymbolRate);
			public HRESULT put_SpectralInversion(ref SpectralInversion pSpectralInversion) mut => VT.put_SpectralInversion(ref this, ref pSpectralInversion);
			public HRESULT get_SpectralInversion(out SpectralInversion pSpectralInversion) mut => VT.get_SpectralInversion(ref this, out pSpectralInversion);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref ModulationType pModulationType) put_ModulationType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out ModulationType pModulationType) get_ModulationType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref FECMethod pFECMethod) put_InnerFECMethod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out FECMethod pFECMethod) get_InnerFECMethod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref BinaryConvolutionCodeRate pFECRate) put_InnerFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out BinaryConvolutionCodeRate pFECRate) get_InnerFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref FECMethod pFECMethod) put_OuterFECMethod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out FECMethod pFECMethod) get_OuterFECMethod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref BinaryConvolutionCodeRate pFECRate) put_OuterFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out BinaryConvolutionCodeRate pFECRate) get_OuterFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref uint32 pSymbolRate) put_SymbolRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out uint32 pSymbolRate) get_SymbolRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, ref SpectralInversion pSpectralInversion) put_SpectralInversion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator self, out SpectralInversion pSpectralInversion) get_SpectralInversion;
			}
		}
		[CRepr]
		public struct IBDA_DigitalDemodulator2 : IBDA_DigitalDemodulator
		{
			public const new Guid IID = .(0x525ed3ee, 0x5cf3, 0x4e1e, 0x9a, 0x06, 0x53, 0x68, 0xa8, 0x4f, 0x9a, 0x6e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_GuardInterval(ref GuardInterval pGuardInterval) mut => VT.put_GuardInterval(ref this, ref pGuardInterval);
			public HRESULT get_GuardInterval(out GuardInterval pGuardInterval) mut => VT.get_GuardInterval(ref this, out pGuardInterval);
			public HRESULT put_TransmissionMode(ref TransmissionMode pTransmissionMode) mut => VT.put_TransmissionMode(ref this, ref pTransmissionMode);
			public HRESULT get_TransmissionMode(out TransmissionMode pTransmissionMode) mut => VT.get_TransmissionMode(ref this, out pTransmissionMode);
			public HRESULT put_RollOff(ref RollOff pRollOff) mut => VT.put_RollOff(ref this, ref pRollOff);
			public HRESULT get_RollOff(out RollOff pRollOff) mut => VT.get_RollOff(ref this, out pRollOff);
			public HRESULT put_Pilot(ref Pilot pPilot) mut => VT.put_Pilot(ref this, ref pPilot);
			public HRESULT get_Pilot(out Pilot pPilot) mut => VT.get_Pilot(ref this, out pPilot);

			[CRepr]
			public struct VTable : IBDA_DigitalDemodulator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, ref GuardInterval pGuardInterval) put_GuardInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, out GuardInterval pGuardInterval) get_GuardInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, ref TransmissionMode pTransmissionMode) put_TransmissionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, out TransmissionMode pTransmissionMode) get_TransmissionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, ref RollOff pRollOff) put_RollOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, out RollOff pRollOff) get_RollOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, ref Pilot pPilot) put_Pilot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator2 self, out Pilot pPilot) get_Pilot;
			}
		}
		[CRepr]
		public struct IBDA_DigitalDemodulator3 : IBDA_DigitalDemodulator2
		{
			public const new Guid IID = .(0x13f19604, 0x7d32, 0x4359, 0x93, 0xa2, 0xa0, 0x52, 0x05, 0xd9, 0x0a, 0xc9);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_SignalTimeouts(ref BDA_SIGNAL_TIMEOUTS pSignalTimeouts) mut => VT.put_SignalTimeouts(ref this, ref pSignalTimeouts);
			public HRESULT get_SignalTimeouts(out BDA_SIGNAL_TIMEOUTS pSignalTimeouts) mut => VT.get_SignalTimeouts(ref this, out pSignalTimeouts);
			public HRESULT put_PLPNumber(ref uint32 pPLPNumber) mut => VT.put_PLPNumber(ref this, ref pPLPNumber);
			public HRESULT get_PLPNumber(out uint32 pPLPNumber) mut => VT.get_PLPNumber(ref this, out pPLPNumber);

			[CRepr]
			public struct VTable : IBDA_DigitalDemodulator2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator3 self, ref BDA_SIGNAL_TIMEOUTS pSignalTimeouts) put_SignalTimeouts;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator3 self, out BDA_SIGNAL_TIMEOUTS pSignalTimeouts) get_SignalTimeouts;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator3 self, ref uint32 pPLPNumber) put_PLPNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DigitalDemodulator3 self, out uint32 pPLPNumber) get_PLPNumber;
			}
		}
		[CRepr]
		public struct ICCSubStreamFiltering : IUnknown
		{
			public const new Guid IID = .(0x4b2bd7ea, 0x8347, 0x467b, 0x8d, 0xbf, 0x62, 0xf7, 0x84, 0x92, 0x9c, 0xc3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SubstreamTypes(out int32 pTypes) mut => VT.get_SubstreamTypes(ref this, out pTypes);
			public HRESULT put_SubstreamTypes(int32 Types) mut => VT.put_SubstreamTypes(ref this, Types);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICCSubStreamFiltering self, out int32 pTypes) get_SubstreamTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICCSubStreamFiltering self, int32 Types) put_SubstreamTypes;
			}
		}
		[CRepr]
		public struct IBDA_IPSinkControl : IUnknown
		{
			public const new Guid IID = .(0x3f4dc8e2, 0x4050, 0x11d3, 0x8f, 0x4b, 0x00, 0xc0, 0x4f, 0x79, 0x71, 0xe2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetMulticastList(out uint32 pulcbSize, out uint8* pbBuffer) mut => VT.GetMulticastList(ref this, out pulcbSize, out pbBuffer);
			public HRESULT GetAdapterIPAddress(out uint32 pulcbSize, out uint8* pbBuffer) mut => VT.GetAdapterIPAddress(ref this, out pulcbSize, out pbBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPSinkControl self, out uint32 pulcbSize, out uint8* pbBuffer) GetMulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPSinkControl self, out uint32 pulcbSize, out uint8* pbBuffer) GetAdapterIPAddress;
			}
		}
		[CRepr]
		public struct IBDA_IPSinkInfo : IUnknown
		{
			public const new Guid IID = .(0xa750108f, 0x492e, 0x4d51, 0x95, 0xf7, 0x64, 0x9b, 0x23, 0xff, 0x7a, 0xd7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MulticastList(out uint32 pulcbAddresses, uint8** ppbAddressList) mut => VT.get_MulticastList(ref this, out pulcbAddresses, ppbAddressList);
			public HRESULT get_AdapterIPAddress(out BSTR pbstrBuffer) mut => VT.get_AdapterIPAddress(ref this, out pbstrBuffer);
			public HRESULT get_AdapterDescription(out BSTR pbstrBuffer) mut => VT.get_AdapterDescription(ref this, out pbstrBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPSinkInfo self, out uint32 pulcbAddresses, uint8** ppbAddressList) get_MulticastList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPSinkInfo self, out BSTR pbstrBuffer) get_AdapterIPAddress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_IPSinkInfo self, out BSTR pbstrBuffer) get_AdapterDescription;
			}
		}
		[CRepr]
		public struct IEnumPIDMap : IUnknown
		{
			public const new Guid IID = .(0xafb6c2a2, 0x2c41, 0x11d3, 0x8a, 0x60, 0x00, 0x00, 0xf8, 0x1e, 0x0e, 0x4a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cRequest, PID_MAP* pPIDMap, out uint32 pcReceived) mut => VT.Next(ref this, cRequest, pPIDMap, out pcReceived);
			public HRESULT Skip(uint32 cRecords) mut => VT.Skip(ref this, cRecords);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumPIDMap* ppIEnumPIDMap) mut => VT.Clone(ref this, out ppIEnumPIDMap);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPIDMap self, uint32 cRequest, PID_MAP* pPIDMap, out uint32 pcReceived) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPIDMap self, uint32 cRecords) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPIDMap self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPIDMap self, out IEnumPIDMap* ppIEnumPIDMap) Clone;
			}
		}
		[CRepr]
		public struct IMPEG2PIDMap : IUnknown
		{
			public const new Guid IID = .(0xafb6c2a1, 0x2c41, 0x11d3, 0x8a, 0x60, 0x00, 0x00, 0xf8, 0x1e, 0x0e, 0x4a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MapPID(uint32 culPID, ref uint32 pulPID, MEDIA_SAMPLE_CONTENT MediaSampleContent) mut => VT.MapPID(ref this, culPID, ref pulPID, MediaSampleContent);
			public HRESULT UnmapPID(uint32 culPID, ref uint32 pulPID) mut => VT.UnmapPID(ref this, culPID, ref pulPID);
			public HRESULT EnumPIDMap(out IEnumPIDMap* pIEnumPIDMap) mut => VT.EnumPIDMap(ref this, out pIEnumPIDMap);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2PIDMap self, uint32 culPID, ref uint32 pulPID, MEDIA_SAMPLE_CONTENT MediaSampleContent) MapPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2PIDMap self, uint32 culPID, ref uint32 pulPID) UnmapPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2PIDMap self, out IEnumPIDMap* pIEnumPIDMap) EnumPIDMap;
			}
		}
		[CRepr]
		public struct IFrequencyMap : IUnknown
		{
			public const new Guid IID = .(0x06fb45c1, 0x693c, 0x4ea7, 0xb7, 0x9f, 0x7a, 0x6a, 0x54, 0xd8, 0xde, 0xf2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_FrequencyMapping(out uint32 ulCount, out uint32* ppulList) mut => VT.get_FrequencyMapping(ref this, out ulCount, out ppulList);
			public HRESULT put_FrequencyMapping(uint32 ulCount, uint32* pList) mut => VT.put_FrequencyMapping(ref this, ulCount, pList);
			public HRESULT get_CountryCode(out uint32 pulCountryCode) mut => VT.get_CountryCode(ref this, out pulCountryCode);
			public HRESULT put_CountryCode(uint32 ulCountryCode) mut => VT.put_CountryCode(ref this, ulCountryCode);
			public HRESULT get_DefaultFrequencyMapping(uint32 ulCountryCode, out uint32 pulCount, out uint32* ppulList) mut => VT.get_DefaultFrequencyMapping(ref this, ulCountryCode, out pulCount, out ppulList);
			public HRESULT get_CountryCodeList(out uint32 pulCount, out uint32* ppulList) mut => VT.get_CountryCodeList(ref this, out pulCount, out ppulList);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFrequencyMap self, out uint32 ulCount, out uint32* ppulList) get_FrequencyMapping;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFrequencyMap self, uint32 ulCount, uint32* pList) put_FrequencyMapping;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFrequencyMap self, out uint32 pulCountryCode) get_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFrequencyMap self, uint32 ulCountryCode) put_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFrequencyMap self, uint32 ulCountryCode, out uint32 pulCount, out uint32* ppulList) get_DefaultFrequencyMapping;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFrequencyMap self, out uint32 pulCount, out uint32* ppulList) get_CountryCodeList;
			}
		}
		[CRepr]
		public struct IBDA_EasMessage : IUnknown
		{
			public const new Guid IID = .(0xd806973d, 0x3ebe, 0x46de, 0x8f, 0xbb, 0x63, 0x58, 0xfe, 0x78, 0x42, 0x08);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_EasMessage(uint32 ulEventID, out IUnknown* ppEASObject) mut => VT.get_EasMessage(ref this, ulEventID, out ppEASObject);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EasMessage self, uint32 ulEventID, out IUnknown* ppEASObject) get_EasMessage;
			}
		}
		[CRepr]
		public struct IBDA_TransportStreamInfo : IUnknown
		{
			public const new Guid IID = .(0x8e882535, 0x5f86, 0x47ab, 0x86, 0xcf, 0xc2, 0x81, 0xa7, 0x2a, 0x05, 0x49);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_PatTableTickCount(out uint32 pPatTickCount) mut => VT.get_PatTableTickCount(ref this, out pPatTickCount);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_TransportStreamInfo self, out uint32 pPatTickCount) get_PatTableTickCount;
			}
		}
		[CRepr]
		public struct IBDA_ConditionalAccess : IUnknown
		{
			public const new Guid IID = .(0xcd51f1e0, 0x7be9, 0x4123, 0x84, 0x82, 0xa2, 0xa7, 0x96, 0xc0, 0xa6, 0xb0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SmartCardStatus(out SmartCardStatusType pCardStatus, out SmartCardAssociationType pCardAssociation, out BSTR pbstrCardError, out int16 pfOOBLocked) mut => VT.get_SmartCardStatus(ref this, out pCardStatus, out pCardAssociation, out pbstrCardError, out pfOOBLocked);
			public HRESULT get_SmartCardInfo(out BSTR pbstrCardName, out BSTR pbstrCardManufacturer, out int16 pfDaylightSavings, out uint8 pbyRatingRegion, out int32 plTimeZoneOffsetMinutes, out BSTR pbstrLanguage, out EALocationCodeType pEALocationCode) mut => VT.get_SmartCardInfo(ref this, out pbstrCardName, out pbstrCardManufacturer, out pfDaylightSavings, out pbyRatingRegion, out plTimeZoneOffsetMinutes, out pbstrLanguage, out pEALocationCode);
			public HRESULT get_SmartCardApplications(out uint32 pulcApplications, uint32 ulcApplicationsMax, SmartCardApplication* rgApplications) mut => VT.get_SmartCardApplications(ref this, out pulcApplications, ulcApplicationsMax, rgApplications);
			public HRESULT get_Entitlement(uint16 usVirtualChannel, out EntitlementType pEntitlement) mut => VT.get_Entitlement(ref this, usVirtualChannel, out pEntitlement);
			public HRESULT TuneByChannel(uint16 usVirtualChannel) mut => VT.TuneByChannel(ref this, usVirtualChannel);
			public HRESULT SetProgram(uint16 usProgramNumber) mut => VT.SetProgram(ref this, usProgramNumber);
			public HRESULT AddProgram(uint16 usProgramNumber) mut => VT.AddProgram(ref this, usProgramNumber);
			public HRESULT RemoveProgram(uint16 usProgramNumber) mut => VT.RemoveProgram(ref this, usProgramNumber);
			public HRESULT GetModuleUI(uint8 byDialogNumber, out BSTR pbstrURL) mut => VT.GetModuleUI(ref this, byDialogNumber, out pbstrURL);
			public HRESULT InformUIClosed(uint8 byDialogNumber, UICloseReasonType CloseReason) mut => VT.InformUIClosed(ref this, byDialogNumber, CloseReason);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, out SmartCardStatusType pCardStatus, out SmartCardAssociationType pCardAssociation, out BSTR pbstrCardError, out int16 pfOOBLocked) get_SmartCardStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, out BSTR pbstrCardName, out BSTR pbstrCardManufacturer, out int16 pfDaylightSavings, out uint8 pbyRatingRegion, out int32 plTimeZoneOffsetMinutes, out BSTR pbstrLanguage, out EALocationCodeType pEALocationCode) get_SmartCardInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, out uint32 pulcApplications, uint32 ulcApplicationsMax, SmartCardApplication* rgApplications) get_SmartCardApplications;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint16 usVirtualChannel, out EntitlementType pEntitlement) get_Entitlement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint16 usVirtualChannel) TuneByChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint16 usProgramNumber) SetProgram;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint16 usProgramNumber) AddProgram;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint16 usProgramNumber) RemoveProgram;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint8 byDialogNumber, out BSTR pbstrURL) GetModuleUI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccess self, uint8 byDialogNumber, UICloseReasonType CloseReason) InformUIClosed;
			}
		}
		[CRepr]
		public struct IBDA_DiagnosticProperties : IPropertyBag
		{
			public const new Guid IID = .(0x20e80cb5, 0xc543, 0x4c1b, 0x8e, 0xb3, 0x49, 0xe7, 0x19, 0xee, 0xe7, 0xd4);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IPropertyBag.VTable {}
		}
		[CRepr]
		public struct IBDA_DRM : IUnknown
		{
			public const new Guid IID = .(0xf98d88b0, 0x1992, 0x4cd6, 0xa6, 0xd9, 0xb9, 0xaf, 0xab, 0x99, 0x33, 0x0d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDRMPairingStatus(out uint32 pdwStatus, out HRESULT phError) mut => VT.GetDRMPairingStatus(ref this, out pdwStatus, out phError);
			public HRESULT PerformDRMPairing(BOOL fSync) mut => VT.PerformDRMPairing(ref this, fSync);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRM self, out uint32 pdwStatus, out HRESULT phError) GetDRMPairingStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRM self, BOOL fSync) PerformDRMPairing;
			}
		}
		[CRepr]
		public struct IBDA_NameValueService : IUnknown
		{
			public const new Guid IID = .(0x7f0b3150, 0x7b81, 0x4ad4, 0x98, 0xe3, 0x7e, 0x90, 0x97, 0x09, 0x43, 0x01);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetValueNameByIndex(uint32 ulIndex, out BSTR pbstrName) mut => VT.GetValueNameByIndex(ref this, ulIndex, out pbstrName);
			public HRESULT GetValue(BSTR bstrName, BSTR bstrLanguage, out BSTR pbstrValue) mut => VT.GetValue(ref this, bstrName, bstrLanguage, out pbstrValue);
			public HRESULT SetValue(uint32 ulDialogRequest, BSTR bstrLanguage, BSTR bstrName, BSTR bstrValue, uint32 ulReserved) mut => VT.SetValue(ref this, ulDialogRequest, bstrLanguage, bstrName, bstrValue, ulReserved);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NameValueService self, uint32 ulIndex, out BSTR pbstrName) GetValueNameByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NameValueService self, BSTR bstrName, BSTR bstrLanguage, out BSTR pbstrValue) GetValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_NameValueService self, uint32 ulDialogRequest, BSTR bstrLanguage, BSTR bstrName, BSTR bstrValue, uint32 ulReserved) SetValue;
			}
		}
		[CRepr]
		public struct IBDA_ConditionalAccessEx : IUnknown
		{
			public const new Guid IID = .(0x497c3418, 0x23cb, 0x44ba, 0xbb, 0x62, 0x76, 0x9f, 0x50, 0x6f, 0xce, 0xa7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CheckEntitlementToken(uint32 ulDialogRequest, BSTR bstrLanguage, BDA_CONDITIONALACCESS_REQUESTTYPE RequestType, uint32 ulcbEntitlementTokenLen, uint8* pbEntitlementToken, out uint32 pulDescrambleStatus) mut => VT.CheckEntitlementToken(ref this, ulDialogRequest, bstrLanguage, RequestType, ulcbEntitlementTokenLen, pbEntitlementToken, out pulDescrambleStatus);
			public HRESULT SetCaptureToken(uint32 ulcbCaptureTokenLen, uint8* pbCaptureToken) mut => VT.SetCaptureToken(ref this, ulcbCaptureTokenLen, pbCaptureToken);
			public HRESULT OpenBroadcastMmi(uint32 ulDialogRequest, BSTR bstrLanguage, uint32 EventId) mut => VT.OpenBroadcastMmi(ref this, ulDialogRequest, bstrLanguage, EventId);
			public HRESULT CloseMmiDialog(uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulDialogNumber, BDA_CONDITIONALACCESS_MMICLOSEREASON ReasonCode, out uint32 pulSessionResult) mut => VT.CloseMmiDialog(ref this, ulDialogRequest, bstrLanguage, ulDialogNumber, ReasonCode, out pulSessionResult);
			public HRESULT CreateDialogRequestNumber(out uint32 pulDialogRequestNumber) mut => VT.CreateDialogRequestNumber(ref this, out pulDialogRequestNumber);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccessEx self, uint32 ulDialogRequest, BSTR bstrLanguage, BDA_CONDITIONALACCESS_REQUESTTYPE RequestType, uint32 ulcbEntitlementTokenLen, uint8* pbEntitlementToken, out uint32 pulDescrambleStatus) CheckEntitlementToken;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccessEx self, uint32 ulcbCaptureTokenLen, uint8* pbCaptureToken) SetCaptureToken;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccessEx self, uint32 ulDialogRequest, BSTR bstrLanguage, uint32 EventId) OpenBroadcastMmi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccessEx self, uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulDialogNumber, BDA_CONDITIONALACCESS_MMICLOSEREASON ReasonCode, out uint32 pulSessionResult) CloseMmiDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ConditionalAccessEx self, out uint32 pulDialogRequestNumber) CreateDialogRequestNumber;
			}
		}
		[CRepr]
		public struct IBDA_ISDBConditionalAccess : IUnknown
		{
			public const new Guid IID = .(0x5e68c627, 0x16c2, 0x4e6c, 0xb1, 0xe2, 0xd0, 0x01, 0x70, 0xcd, 0xaa, 0x0f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetIsdbCasRequest(uint32 ulRequestId, uint32 ulcbRequestBufferLen, uint8* pbRequestBuffer) mut => VT.SetIsdbCasRequest(ref this, ulRequestId, ulcbRequestBufferLen, pbRequestBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_ISDBConditionalAccess self, uint32 ulRequestId, uint32 ulcbRequestBufferLen, uint8* pbRequestBuffer) SetIsdbCasRequest;
			}
		}
		[CRepr]
		public struct IBDA_EventingService : IUnknown
		{
			public const new Guid IID = .(0x207c413f, 0x00dc, 0x4c61, 0xba, 0xd6, 0x6f, 0xee, 0x1f, 0xf0, 0x70, 0x64);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CompleteEvent(uint32 ulEventID, uint32 ulEventResult) mut => VT.CompleteEvent(ref this, ulEventID, ulEventResult);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_EventingService self, uint32 ulEventID, uint32 ulEventResult) CompleteEvent;
			}
		}
		[CRepr]
		public struct IBDA_AUX : IUnknown
		{
			public const new Guid IID = .(0x7def4c09, 0x6e66, 0x4567, 0xa8, 0x19, 0xf0, 0xe1, 0x7f, 0x4a, 0x81, 0xab);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryCapabilities(out uint32 pdwNumAuxInputsBSTR) mut => VT.QueryCapabilities(ref this, out pdwNumAuxInputsBSTR);
			public HRESULT EnumCapability(uint32 dwIndex, out uint32 dwInputID, out Guid pConnectorType, out uint32 ConnTypeNum, out uint32 NumVideoStds, out uint64 AnalogStds) mut => VT.EnumCapability(ref this, dwIndex, out dwInputID, out pConnectorType, out ConnTypeNum, out NumVideoStds, out AnalogStds);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_AUX self, out uint32 pdwNumAuxInputsBSTR) QueryCapabilities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_AUX self, uint32 dwIndex, out uint32 dwInputID, out Guid pConnectorType, out uint32 ConnTypeNum, out uint32 NumVideoStds, out uint64 AnalogStds) EnumCapability;
			}
		}
		[CRepr]
		public struct IBDA_Encoder : IUnknown
		{
			public const new Guid IID = .(0x3a8bad59, 0x59fe, 0x4559, 0xa0, 0xba, 0x39, 0x6c, 0xfa, 0xa9, 0x8a, 0xe3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT QueryCapabilities(out uint32 NumAudioFmts, out uint32 NumVideoFmts) mut => VT.QueryCapabilities(ref this, out NumAudioFmts, out NumVideoFmts);
			public HRESULT EnumAudioCapability(uint32 FmtIndex, out uint32 MethodID, out uint32 AlgorithmType, out uint32 SamplingRate, out uint32 BitDepth, out uint32 NumChannels) mut => VT.EnumAudioCapability(ref this, FmtIndex, out MethodID, out AlgorithmType, out SamplingRate, out BitDepth, out NumChannels);
			public HRESULT EnumVideoCapability(uint32 FmtIndex, out uint32 MethodID, out uint32 AlgorithmType, out uint32 VerticalSize, out uint32 HorizontalSize, out uint32 AspectRatio, out uint32 FrameRateCode, out uint32 ProgressiveSequence) mut => VT.EnumVideoCapability(ref this, FmtIndex, out MethodID, out AlgorithmType, out VerticalSize, out HorizontalSize, out AspectRatio, out FrameRateCode, out ProgressiveSequence);
			public HRESULT SetParameters(uint32 AudioBitrateMode, uint32 AudioBitrate, uint32 AudioMethodID, uint32 AudioProgram, uint32 VideoBitrateMode, uint32 VideoBitrate, uint32 VideoMethodID) mut => VT.SetParameters(ref this, AudioBitrateMode, AudioBitrate, AudioMethodID, AudioProgram, VideoBitrateMode, VideoBitrate, VideoMethodID);
			public HRESULT GetState(out uint32 AudioBitrateMax, out uint32 AudioBitrateMin, out uint32 AudioBitrateMode, out uint32 AudioBitrateStepping, out uint32 AudioBitrate, out uint32 AudioMethodID, out uint32 AvailableAudioPrograms, out uint32 AudioProgram, out uint32 VideoBitrateMax, out uint32 VideoBitrateMin, out uint32 VideoBitrateMode, out uint32 VideoBitrate, out uint32 VideoBitrateStepping, out uint32 VideoMethodID, out uint32 SignalSourceID, out uint64 SignalFormat, out BOOL SignalLock, out int32 SignalLevel, out uint32 SignalToNoiseRatio) mut => VT.GetState(ref this, out AudioBitrateMax, out AudioBitrateMin, out AudioBitrateMode, out AudioBitrateStepping, out AudioBitrate, out AudioMethodID, out AvailableAudioPrograms, out AudioProgram, out VideoBitrateMax, out VideoBitrateMin, out VideoBitrateMode, out VideoBitrate, out VideoBitrateStepping, out VideoMethodID, out SignalSourceID, out SignalFormat, out SignalLock, out SignalLevel, out SignalToNoiseRatio);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Encoder self, out uint32 NumAudioFmts, out uint32 NumVideoFmts) QueryCapabilities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Encoder self, uint32 FmtIndex, out uint32 MethodID, out uint32 AlgorithmType, out uint32 SamplingRate, out uint32 BitDepth, out uint32 NumChannels) EnumAudioCapability;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Encoder self, uint32 FmtIndex, out uint32 MethodID, out uint32 AlgorithmType, out uint32 VerticalSize, out uint32 HorizontalSize, out uint32 AspectRatio, out uint32 FrameRateCode, out uint32 ProgressiveSequence) EnumVideoCapability;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Encoder self, uint32 AudioBitrateMode, uint32 AudioBitrate, uint32 AudioMethodID, uint32 AudioProgram, uint32 VideoBitrateMode, uint32 VideoBitrate, uint32 VideoMethodID) SetParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_Encoder self, out uint32 AudioBitrateMax, out uint32 AudioBitrateMin, out uint32 AudioBitrateMode, out uint32 AudioBitrateStepping, out uint32 AudioBitrate, out uint32 AudioMethodID, out uint32 AvailableAudioPrograms, out uint32 AudioProgram, out uint32 VideoBitrateMax, out uint32 VideoBitrateMin, out uint32 VideoBitrateMode, out uint32 VideoBitrate, out uint32 VideoBitrateStepping, out uint32 VideoMethodID, out uint32 SignalSourceID, out uint64 SignalFormat, out BOOL SignalLock, out int32 SignalLevel, out uint32 SignalToNoiseRatio) GetState;
			}
		}
		[CRepr]
		public struct IBDA_FDC : IUnknown
		{
			public const new Guid IID = .(0x138adc7e, 0x58ae, 0x437f, 0xb0, 0xb4, 0xc9, 0xfe, 0x19, 0xd5, 0xb4, 0xac);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetStatus(out uint32 CurrentBitrate, out BOOL CarrierLock, out uint32 CurrentFrequency, out BOOL CurrentSpectrumInversion, out BSTR CurrentPIDList, out BSTR CurrentTIDList, out BOOL Overflow) mut => VT.GetStatus(ref this, out CurrentBitrate, out CarrierLock, out CurrentFrequency, out CurrentSpectrumInversion, out CurrentPIDList, out CurrentTIDList, out Overflow);
			public HRESULT RequestTables(BSTR TableIDs) mut => VT.RequestTables(ref this, TableIDs);
			public HRESULT AddPid(BSTR PidsToAdd, out uint32 RemainingFilterEntries) mut => VT.AddPid(ref this, PidsToAdd, out RemainingFilterEntries);
			public HRESULT RemovePid(BSTR PidsToRemove) mut => VT.RemovePid(ref this, PidsToRemove);
			public HRESULT AddTid(BSTR TidsToAdd, out BSTR CurrentTidList) mut => VT.AddTid(ref this, TidsToAdd, out CurrentTidList);
			public HRESULT RemoveTid(BSTR TidsToRemove) mut => VT.RemoveTid(ref this, TidsToRemove);
			public HRESULT GetTableSection(out uint32 Pid, uint32 MaxBufferSize, out uint32 ActualSize, out uint8 SecBuffer) mut => VT.GetTableSection(ref this, out Pid, MaxBufferSize, out ActualSize, out SecBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, out uint32 CurrentBitrate, out BOOL CarrierLock, out uint32 CurrentFrequency, out BOOL CurrentSpectrumInversion, out BSTR CurrentPIDList, out BSTR CurrentTIDList, out BOOL Overflow) GetStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, BSTR TableIDs) RequestTables;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, BSTR PidsToAdd, out uint32 RemainingFilterEntries) AddPid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, BSTR PidsToRemove) RemovePid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, BSTR TidsToAdd, out BSTR CurrentTidList) AddTid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, BSTR TidsToRemove) RemoveTid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_FDC self, out uint32 Pid, uint32 MaxBufferSize, out uint32 ActualSize, out uint8 SecBuffer) GetTableSection;
			}
		}
		[CRepr]
		public struct IBDA_GuideDataDeliveryService : IUnknown
		{
			public const new Guid IID = .(0xc0afcb73, 0x23e7, 0x4bc6, 0xba, 0xfa, 0xfd, 0xc1, 0x67, 0xb4, 0x71, 0x9f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetGuideDataType(out Guid pguidDataType) mut => VT.GetGuideDataType(ref this, out pguidDataType);
			public HRESULT GetGuideData(out uint32 pulcbBufferLen, out uint8 pbBuffer, out uint32 pulGuideDataPercentageProgress) mut => VT.GetGuideData(ref this, out pulcbBufferLen, out pbBuffer, out pulGuideDataPercentageProgress);
			public HRESULT RequestGuideDataUpdate() mut => VT.RequestGuideDataUpdate(ref this);
			public HRESULT GetTuneXmlFromServiceIdx(uint64 ul64ServiceIdx, out BSTR pbstrTuneXml) mut => VT.GetTuneXmlFromServiceIdx(ref this, ul64ServiceIdx, out pbstrTuneXml);
			public HRESULT GetServices(out uint32 pulcbBufferLen, out uint8 pbBuffer) mut => VT.GetServices(ref this, out pulcbBufferLen, out pbBuffer);
			public HRESULT GetServiceInfoFromTuneXml(BSTR bstrTuneXml, out BSTR pbstrServiceDescription) mut => VT.GetServiceInfoFromTuneXml(ref this, bstrTuneXml, out pbstrServiceDescription);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_GuideDataDeliveryService self, out Guid pguidDataType) GetGuideDataType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_GuideDataDeliveryService self, out uint32 pulcbBufferLen, out uint8 pbBuffer, out uint32 pulGuideDataPercentageProgress) GetGuideData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_GuideDataDeliveryService self) RequestGuideDataUpdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_GuideDataDeliveryService self, uint64 ul64ServiceIdx, out BSTR pbstrTuneXml) GetTuneXmlFromServiceIdx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_GuideDataDeliveryService self, out uint32 pulcbBufferLen, out uint8 pbBuffer) GetServices;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_GuideDataDeliveryService self, BSTR bstrTuneXml, out BSTR pbstrServiceDescription) GetServiceInfoFromTuneXml;
			}
		}
		[CRepr]
		public struct IBDA_DRMService : IUnknown
		{
			public const new Guid IID = .(0xbff6b5bb, 0xb0ae, 0x484c, 0x9d, 0xca, 0x73, 0x52, 0x8f, 0xb0, 0xb4, 0x6e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDRM(ref Guid puuidNewDrm) mut => VT.SetDRM(ref this, ref puuidNewDrm);
			public HRESULT GetDRMStatus(out BSTR pbstrDrmUuidList, out Guid DrmUuid) mut => VT.GetDRMStatus(ref this, out pbstrDrmUuidList, out DrmUuid);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRMService self, ref Guid puuidNewDrm) SetDRM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRMService self, out BSTR pbstrDrmUuidList, out Guid DrmUuid) GetDRMStatus;
			}
		}
		[CRepr]
		public struct IBDA_WMDRMSession : IUnknown
		{
			public const new Guid IID = .(0x4be6fa3d, 0x07cd, 0x4139, 0x8b, 0x80, 0x8c, 0x18, 0xba, 0x3a, 0xec, 0x88);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetStatus(out uint32 MaxCaptureToken, out uint32 MaxStreamingPid, out uint32 MaxLicense, out uint32 MinSecurityLevel, out uint32 RevInfoSequenceNumber, out uint64 RevInfoIssuedTime, out uint32 RevInfoTTL, out uint32 RevListVersion, out uint32 ulState) mut => VT.GetStatus(ref this, out MaxCaptureToken, out MaxStreamingPid, out MaxLicense, out MinSecurityLevel, out RevInfoSequenceNumber, out RevInfoIssuedTime, out RevInfoTTL, out RevListVersion, out ulState);
			public HRESULT SetRevInfo(uint32 ulRevInfoLen, uint8* pbRevInfo) mut => VT.SetRevInfo(ref this, ulRevInfoLen, pbRevInfo);
			public HRESULT SetCrl(uint32 ulCrlLen, uint8* pbCrlLen) mut => VT.SetCrl(ref this, ulCrlLen, pbCrlLen);
			public HRESULT TransactMessage(uint32 ulcbRequest, uint8* pbRequest, out uint32 pulcbResponse, out uint8 pbResponse) mut => VT.TransactMessage(ref this, ulcbRequest, pbRequest, out pulcbResponse, out pbResponse);
			public HRESULT GetLicense(ref Guid uuidKey, out uint32 pulPackageLen, out uint8 pbPackage) mut => VT.GetLicense(ref this, ref uuidKey, out pulPackageLen, out pbPackage);
			public HRESULT ReissueLicense(ref Guid uuidKey) mut => VT.ReissueLicense(ref this, ref uuidKey);
			public HRESULT RenewLicense(uint32 ulInXmrLicenseLen, uint8* pbInXmrLicense, uint32 ulEntitlementTokenLen, uint8* pbEntitlementToken, out uint32 pulDescrambleStatus, out uint32 pulOutXmrLicenseLen, out uint8 pbOutXmrLicense) mut => VT.RenewLicense(ref this, ulInXmrLicenseLen, pbInXmrLicense, ulEntitlementTokenLen, pbEntitlementToken, out pulDescrambleStatus, out pulOutXmrLicenseLen, out pbOutXmrLicense);
			public HRESULT GetKeyInfo(out uint32 pulKeyInfoLen, out uint8 pbKeyInfo) mut => VT.GetKeyInfo(ref this, out pulKeyInfoLen, out pbKeyInfo);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, out uint32 MaxCaptureToken, out uint32 MaxStreamingPid, out uint32 MaxLicense, out uint32 MinSecurityLevel, out uint32 RevInfoSequenceNumber, out uint64 RevInfoIssuedTime, out uint32 RevInfoTTL, out uint32 RevListVersion, out uint32 ulState) GetStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, uint32 ulRevInfoLen, uint8* pbRevInfo) SetRevInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, uint32 ulCrlLen, uint8* pbCrlLen) SetCrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, uint32 ulcbRequest, uint8* pbRequest, out uint32 pulcbResponse, out uint8 pbResponse) TransactMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, ref Guid uuidKey, out uint32 pulPackageLen, out uint8 pbPackage) GetLicense;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, ref Guid uuidKey) ReissueLicense;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, uint32 ulInXmrLicenseLen, uint8* pbInXmrLicense, uint32 ulEntitlementTokenLen, uint8* pbEntitlementToken, out uint32 pulDescrambleStatus, out uint32 pulOutXmrLicenseLen, out uint8 pbOutXmrLicense) RenewLicense;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMSession self, out uint32 pulKeyInfoLen, out uint8 pbKeyInfo) GetKeyInfo;
			}
		}
		[CRepr]
		public struct IBDA_WMDRMTuner : IUnknown
		{
			public const new Guid IID = .(0x86d979cf, 0xa8a7, 0x4f94, 0xb5, 0xfb, 0x14, 0xc0, 0xac, 0xa6, 0x8f, 0xe6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PurchaseEntitlement(uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulPurchaseTokenLen, uint8* pbPurchaseToken, out uint32 pulDescrambleStatus, out uint32 pulCaptureTokenLen, out uint8 pbCaptureToken) mut => VT.PurchaseEntitlement(ref this, ulDialogRequest, bstrLanguage, ulPurchaseTokenLen, pbPurchaseToken, out pulDescrambleStatus, out pulCaptureTokenLen, out pbCaptureToken);
			public HRESULT CancelCaptureToken(uint32 ulCaptureTokenLen, uint8* pbCaptureToken) mut => VT.CancelCaptureToken(ref this, ulCaptureTokenLen, pbCaptureToken);
			public HRESULT SetPidProtection(uint32 ulPid, ref Guid uuidKey) mut => VT.SetPidProtection(ref this, ulPid, ref uuidKey);
			public HRESULT GetPidProtection(uint32 pulPid, out Guid uuidKey) mut => VT.GetPidProtection(ref this, pulPid, out uuidKey);
			public HRESULT SetSyncValue(uint32 ulSyncValue) mut => VT.SetSyncValue(ref this, ulSyncValue);
			public HRESULT GetStartCodeProfile(out uint32 pulStartCodeProfileLen, out uint8 pbStartCodeProfile) mut => VT.GetStartCodeProfile(ref this, out pulStartCodeProfileLen, out pbStartCodeProfile);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMTuner self, uint32 ulDialogRequest, BSTR bstrLanguage, uint32 ulPurchaseTokenLen, uint8* pbPurchaseToken, out uint32 pulDescrambleStatus, out uint32 pulCaptureTokenLen, out uint8 pbCaptureToken) PurchaseEntitlement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMTuner self, uint32 ulCaptureTokenLen, uint8* pbCaptureToken) CancelCaptureToken;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMTuner self, uint32 ulPid, ref Guid uuidKey) SetPidProtection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMTuner self, uint32 pulPid, out Guid uuidKey) GetPidProtection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMTuner self, uint32 ulSyncValue) SetSyncValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_WMDRMTuner self, out uint32 pulStartCodeProfileLen, out uint8 pbStartCodeProfile) GetStartCodeProfile;
			}
		}
		[CRepr]
		public struct IBDA_DRIDRMService : IUnknown
		{
			public const new Guid IID = .(0x1f9bc2a5, 0x44a3, 0x4c52, 0xaa, 0xb1, 0x0b, 0xbc, 0xe5, 0xa1, 0x38, 0x1d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDRM(BSTR bstrNewDrm) mut => VT.SetDRM(ref this, bstrNewDrm);
			public HRESULT GetDRMStatus(out BSTR pbstrDrmUuidList, out Guid DrmUuid) mut => VT.GetDRMStatus(ref this, out pbstrDrmUuidList, out DrmUuid);
			public HRESULT GetPairingStatus(out BDA_DrmPairingError penumPairingStatus) mut => VT.GetPairingStatus(ref this, out penumPairingStatus);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIDRMService self, BSTR bstrNewDrm) SetDRM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIDRMService self, out BSTR pbstrDrmUuidList, out Guid DrmUuid) GetDRMStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIDRMService self, out BDA_DrmPairingError penumPairingStatus) GetPairingStatus;
			}
		}
		[CRepr]
		public struct IBDA_DRIWMDRMSession : IUnknown
		{
			public const new Guid IID = .(0x05c690f8, 0x56db, 0x4bb2, 0xb0, 0x53, 0x79, 0xc1, 0x20, 0x98, 0xbb, 0x26);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AcknowledgeLicense(HRESULT hrLicenseAck) mut => VT.AcknowledgeLicense(ref this, hrLicenseAck);
			public HRESULT ProcessLicenseChallenge(uint32 dwcbLicenseMessage, uint8* pbLicenseMessage, out uint32 pdwcbLicenseResponse, out uint8* ppbLicenseResponse) mut => VT.ProcessLicenseChallenge(ref this, dwcbLicenseMessage, pbLicenseMessage, out pdwcbLicenseResponse, out ppbLicenseResponse);
			public HRESULT ProcessRegistrationChallenge(uint32 dwcbRegistrationMessage, uint8* pbRegistrationMessage, out uint32 pdwcbRegistrationResponse, out uint8* ppbRegistrationResponse) mut => VT.ProcessRegistrationChallenge(ref this, dwcbRegistrationMessage, pbRegistrationMessage, out pdwcbRegistrationResponse, out ppbRegistrationResponse);
			public HRESULT SetRevInfo(uint32 dwRevInfoLen, uint8* pbRevInfo, out uint32 pdwResponse) mut => VT.SetRevInfo(ref this, dwRevInfoLen, pbRevInfo, out pdwResponse);
			public HRESULT SetCrl(uint32 dwCrlLen, uint8* pbCrlLen, out uint32 pdwResponse) mut => VT.SetCrl(ref this, dwCrlLen, pbCrlLen, out pdwResponse);
			public HRESULT GetHMSAssociationData() mut => VT.GetHMSAssociationData(ref this);
			public HRESULT GetLastCardeaError(out uint32 pdwError) mut => VT.GetLastCardeaError(ref this, out pdwError);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self, HRESULT hrLicenseAck) AcknowledgeLicense;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self, uint32 dwcbLicenseMessage, uint8* pbLicenseMessage, out uint32 pdwcbLicenseResponse, out uint8* ppbLicenseResponse) ProcessLicenseChallenge;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self, uint32 dwcbRegistrationMessage, uint8* pbRegistrationMessage, out uint32 pdwcbRegistrationResponse, out uint8* ppbRegistrationResponse) ProcessRegistrationChallenge;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self, uint32 dwRevInfoLen, uint8* pbRevInfo, out uint32 pdwResponse) SetRevInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self, uint32 dwCrlLen, uint8* pbCrlLen, out uint32 pdwResponse) SetCrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self) GetHMSAssociationData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_DRIWMDRMSession self, out uint32 pdwError) GetLastCardeaError;
			}
		}
		[CRepr]
		public struct IBDA_MUX : IUnknown
		{
			public const new Guid IID = .(0x942aafec, 0x4c05, 0x4c74, 0xb8, 0xeb, 0x87, 0x06, 0xc2, 0xa4, 0x94, 0x3f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetPidList(uint32 ulPidListCount, BDA_MUX_PIDLISTITEM* pbPidListBuffer) mut => VT.SetPidList(ref this, ulPidListCount, pbPidListBuffer);
			public HRESULT GetPidList(out uint32 pulPidListCount, out BDA_MUX_PIDLISTITEM pbPidListBuffer) mut => VT.GetPidList(ref this, out pulPidListCount, out pbPidListBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_MUX self, uint32 ulPidListCount, BDA_MUX_PIDLISTITEM* pbPidListBuffer) SetPidList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_MUX self, out uint32 pulPidListCount, out BDA_MUX_PIDLISTITEM pbPidListBuffer) GetPidList;
			}
		}
		[CRepr]
		public struct IBDA_TransportStreamSelector : IUnknown
		{
			public const new Guid IID = .(0x1dcfafe9, 0xb45e, 0x41b3, 0xbb, 0x2a, 0x56, 0x1e, 0xb1, 0x29, 0xae, 0x98);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetTSID(uint16 usTSID) mut => VT.SetTSID(ref this, usTSID);
			public HRESULT GetTSInformation(out uint32 pulTSInformationBufferLen, uint8* pbTSInformationBuffer) mut => VT.GetTSInformation(ref this, out pulTSInformationBufferLen, pbTSInformationBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_TransportStreamSelector self, uint16 usTSID) SetTSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_TransportStreamSelector self, out uint32 pulTSInformationBufferLen, uint8* pbTSInformationBuffer) GetTSInformation;
			}
		}
		[CRepr]
		public struct IBDA_UserActivityService : IUnknown
		{
			public const new Guid IID = .(0x53b14189, 0xe478, 0x4b7a, 0xa1, 0xff, 0x50, 0x6d, 0xb4, 0xb9, 0x9d, 0xfe);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetCurrentTunerUseReason(uint32 dwUseReason) mut => VT.SetCurrentTunerUseReason(ref this, dwUseReason);
			public HRESULT GetUserActivityInterval(out uint32 pdwActivityInterval) mut => VT.GetUserActivityInterval(ref this, out pdwActivityInterval);
			public HRESULT UserActivityDetected() mut => VT.UserActivityDetected(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_UserActivityService self, uint32 dwUseReason) SetCurrentTunerUseReason;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_UserActivityService self, out uint32 pdwActivityInterval) GetUserActivityInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_UserActivityService self) UserActivityDetected;
			}
		}
		[CRepr]
		public struct IESEvent : IUnknown
		{
			public const new Guid IID = .(0x1f0e5357, 0xaf43, 0x44e6, 0x85, 0x47, 0x65, 0x4c, 0x64, 0x51, 0x45, 0xd2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEventId(out uint32 pdwEventId) mut => VT.GetEventId(ref this, out pdwEventId);
			public HRESULT GetEventType(out Guid pguidEventType) mut => VT.GetEventType(ref this, out pguidEventType);
			public HRESULT SetCompletionStatus(uint32 dwResult) mut => VT.SetCompletionStatus(ref this, dwResult);
			public HRESULT GetData(out SAFEARRAY* pbData) mut => VT.GetData(ref this, out pbData);
			public HRESULT GetStringData(out BSTR pbstrData) mut => VT.GetStringData(ref this, out pbstrData);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEvent self, out uint32 pdwEventId) GetEventId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEvent self, out Guid pguidEventType) GetEventType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEvent self, uint32 dwResult) SetCompletionStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEvent self, out SAFEARRAY* pbData) GetData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEvent self, out BSTR pbstrData) GetStringData;
			}
		}
		[CRepr]
		public struct IESEvents : IUnknown
		{
			public const new Guid IID = .(0xabd414bf, 0xcfe5, 0x4e5e, 0xaf, 0x5b, 0x4b, 0x4e, 0x49, 0xc5, 0xbf, 0xeb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnESEventReceived(Guid guidEventType, ref IESEvent pESEvent) mut => VT.OnESEventReceived(ref this, guidEventType, ref pESEvent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEvents self, Guid guidEventType, ref IESEvent pESEvent) OnESEventReceived;
			}
		}
		[CRepr]
		public struct IBroadcastEvent : IUnknown
		{
			public const new Guid IID = .(0x3b21263f, 0x26e8, 0x489d, 0xaa, 0xc4, 0x92, 0x4f, 0x7e, 0xfd, 0x95, 0x11);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Fire(Guid EventID) mut => VT.Fire(ref this, EventID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBroadcastEvent self, Guid EventID) Fire;
			}
		}
		[CRepr]
		public struct IBroadcastEventEx : IBroadcastEvent
		{
			public const new Guid IID = .(0x3d9e3887, 0x1929, 0x423f, 0x80, 0x21, 0x43, 0x68, 0x2d, 0xe9, 0x54, 0x48);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FireEx(Guid EventID, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) mut => VT.FireEx(ref this, EventID, Param1, Param2, Param3, Param4);

			[CRepr]
			public struct VTable : IBroadcastEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBroadcastEventEx self, Guid EventID, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) FireEx;
			}
		}
		[CRepr]
		public struct IAMNetShowConfig : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f1, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_BufferingTime(out double pBufferingTime) mut => VT.get_BufferingTime(ref this, out pBufferingTime);
			public HRESULT put_BufferingTime(double BufferingTime) mut => VT.put_BufferingTime(ref this, BufferingTime);
			public HRESULT get_UseFixedUDPPort(out int16 pUseFixedUDPPort) mut => VT.get_UseFixedUDPPort(ref this, out pUseFixedUDPPort);
			public HRESULT put_UseFixedUDPPort(int16 UseFixedUDPPort) mut => VT.put_UseFixedUDPPort(ref this, UseFixedUDPPort);
			public HRESULT get_FixedUDPPort(out int32 pFixedUDPPort) mut => VT.get_FixedUDPPort(ref this, out pFixedUDPPort);
			public HRESULT put_FixedUDPPort(int32 FixedUDPPort) mut => VT.put_FixedUDPPort(ref this, FixedUDPPort);
			public HRESULT get_UseHTTPProxy(out int16 pUseHTTPProxy) mut => VT.get_UseHTTPProxy(ref this, out pUseHTTPProxy);
			public HRESULT put_UseHTTPProxy(int16 UseHTTPProxy) mut => VT.put_UseHTTPProxy(ref this, UseHTTPProxy);
			public HRESULT get_EnableAutoProxy(out int16 pEnableAutoProxy) mut => VT.get_EnableAutoProxy(ref this, out pEnableAutoProxy);
			public HRESULT put_EnableAutoProxy(int16 EnableAutoProxy) mut => VT.put_EnableAutoProxy(ref this, EnableAutoProxy);
			public HRESULT get_HTTPProxyHost(out BSTR pbstrHTTPProxyHost) mut => VT.get_HTTPProxyHost(ref this, out pbstrHTTPProxyHost);
			public HRESULT put_HTTPProxyHost(BSTR bstrHTTPProxyHost) mut => VT.put_HTTPProxyHost(ref this, bstrHTTPProxyHost);
			public HRESULT get_HTTPProxyPort(out int32 pHTTPProxyPort) mut => VT.get_HTTPProxyPort(ref this, out pHTTPProxyPort);
			public HRESULT put_HTTPProxyPort(int32 HTTPProxyPort) mut => VT.put_HTTPProxyPort(ref this, HTTPProxyPort);
			public HRESULT get_EnableMulticast(out int16 pEnableMulticast) mut => VT.get_EnableMulticast(ref this, out pEnableMulticast);
			public HRESULT put_EnableMulticast(int16 EnableMulticast) mut => VT.put_EnableMulticast(ref this, EnableMulticast);
			public HRESULT get_EnableUDP(out int16 pEnableUDP) mut => VT.get_EnableUDP(ref this, out pEnableUDP);
			public HRESULT put_EnableUDP(int16 EnableUDP) mut => VT.put_EnableUDP(ref this, EnableUDP);
			public HRESULT get_EnableTCP(out int16 pEnableTCP) mut => VT.get_EnableTCP(ref this, out pEnableTCP);
			public HRESULT put_EnableTCP(int16 EnableTCP) mut => VT.put_EnableTCP(ref this, EnableTCP);
			public HRESULT get_EnableHTTP(out int16 pEnableHTTP) mut => VT.get_EnableHTTP(ref this, out pEnableHTTP);
			public HRESULT put_EnableHTTP(int16 EnableHTTP) mut => VT.put_EnableHTTP(ref this, EnableHTTP);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out double pBufferingTime) get_BufferingTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, double BufferingTime) put_BufferingTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pUseFixedUDPPort) get_UseFixedUDPPort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 UseFixedUDPPort) put_UseFixedUDPPort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int32 pFixedUDPPort) get_FixedUDPPort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int32 FixedUDPPort) put_FixedUDPPort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pUseHTTPProxy) get_UseHTTPProxy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 UseHTTPProxy) put_UseHTTPProxy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pEnableAutoProxy) get_EnableAutoProxy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 EnableAutoProxy) put_EnableAutoProxy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out BSTR pbstrHTTPProxyHost) get_HTTPProxyHost;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, BSTR bstrHTTPProxyHost) put_HTTPProxyHost;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int32 pHTTPProxyPort) get_HTTPProxyPort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int32 HTTPProxyPort) put_HTTPProxyPort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pEnableMulticast) get_EnableMulticast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 EnableMulticast) put_EnableMulticast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pEnableUDP) get_EnableUDP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 EnableUDP) put_EnableUDP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pEnableTCP) get_EnableTCP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 EnableTCP) put_EnableTCP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, out int16 pEnableHTTP) get_EnableHTTP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowConfig self, int16 EnableHTTP) put_EnableHTTP;
			}
		}
		[CRepr]
		public struct IAMChannelInfo : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f2, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ChannelName(out BSTR pbstrChannelName) mut => VT.get_ChannelName(ref this, out pbstrChannelName);
			public HRESULT get_ChannelDescription(out BSTR pbstrChannelDescription) mut => VT.get_ChannelDescription(ref this, out pbstrChannelDescription);
			public HRESULT get_ChannelURL(out BSTR pbstrChannelURL) mut => VT.get_ChannelURL(ref this, out pbstrChannelURL);
			public HRESULT get_ContactAddress(out BSTR pbstrContactAddress) mut => VT.get_ContactAddress(ref this, out pbstrContactAddress);
			public HRESULT get_ContactPhone(out BSTR pbstrContactPhone) mut => VT.get_ContactPhone(ref this, out pbstrContactPhone);
			public HRESULT get_ContactEmail(out BSTR pbstrContactEmail) mut => VT.get_ContactEmail(ref this, out pbstrContactEmail);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMChannelInfo self, out BSTR pbstrChannelName) get_ChannelName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMChannelInfo self, out BSTR pbstrChannelDescription) get_ChannelDescription;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMChannelInfo self, out BSTR pbstrChannelURL) get_ChannelURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMChannelInfo self, out BSTR pbstrContactAddress) get_ContactAddress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMChannelInfo self, out BSTR pbstrContactPhone) get_ContactPhone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMChannelInfo self, out BSTR pbstrContactEmail) get_ContactEmail;
			}
		}
		[CRepr]
		public struct IAMNetworkStatus : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f3, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ReceivedPackets(out int32 pReceivedPackets) mut => VT.get_ReceivedPackets(ref this, out pReceivedPackets);
			public HRESULT get_RecoveredPackets(out int32 pRecoveredPackets) mut => VT.get_RecoveredPackets(ref this, out pRecoveredPackets);
			public HRESULT get_LostPackets(out int32 pLostPackets) mut => VT.get_LostPackets(ref this, out pLostPackets);
			public HRESULT get_ReceptionQuality(out int32 pReceptionQuality) mut => VT.get_ReceptionQuality(ref this, out pReceptionQuality);
			public HRESULT get_BufferingCount(out int32 pBufferingCount) mut => VT.get_BufferingCount(ref this, out pBufferingCount);
			public HRESULT get_IsBroadcast(out int16 pIsBroadcast) mut => VT.get_IsBroadcast(ref this, out pIsBroadcast);
			public HRESULT get_BufferingProgress(out int32 pBufferingProgress) mut => VT.get_BufferingProgress(ref this, out pBufferingProgress);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int32 pReceivedPackets) get_ReceivedPackets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int32 pRecoveredPackets) get_RecoveredPackets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int32 pLostPackets) get_LostPackets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int32 pReceptionQuality) get_ReceptionQuality;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int32 pBufferingCount) get_BufferingCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int16 pIsBroadcast) get_IsBroadcast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetworkStatus self, out int32 pBufferingProgress) get_BufferingProgress;
			}
		}
		[CRepr]
		public struct IAMExtendedSeeking : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f9, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ExSeekCapabilities(out int32 pExCapabilities) mut => VT.get_ExSeekCapabilities(ref this, out pExCapabilities);
			public HRESULT get_MarkerCount(out int32 pMarkerCount) mut => VT.get_MarkerCount(ref this, out pMarkerCount);
			public HRESULT get_CurrentMarker(out int32 pCurrentMarker) mut => VT.get_CurrentMarker(ref this, out pCurrentMarker);
			public HRESULT GetMarkerTime(int32 MarkerNum, out double pMarkerTime) mut => VT.GetMarkerTime(ref this, MarkerNum, out pMarkerTime);
			public HRESULT GetMarkerName(int32 MarkerNum, out BSTR pbstrMarkerName) mut => VT.GetMarkerName(ref this, MarkerNum, out pbstrMarkerName);
			public HRESULT put_PlaybackSpeed(double Speed) mut => VT.put_PlaybackSpeed(ref this, Speed);
			public HRESULT get_PlaybackSpeed(out double pSpeed) mut => VT.get_PlaybackSpeed(ref this, out pSpeed);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, out int32 pExCapabilities) get_ExSeekCapabilities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, out int32 pMarkerCount) get_MarkerCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, out int32 pCurrentMarker) get_CurrentMarker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, int32 MarkerNum, out double pMarkerTime) GetMarkerTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, int32 MarkerNum, out BSTR pbstrMarkerName) GetMarkerName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, double Speed) put_PlaybackSpeed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedSeeking self, out double pSpeed) get_PlaybackSpeed;
			}
		}
		[CRepr]
		public struct IAMNetShowExProps : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f5, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SourceProtocol(out int32 pSourceProtocol) mut => VT.get_SourceProtocol(ref this, out pSourceProtocol);
			public HRESULT get_Bandwidth(out int32 pBandwidth) mut => VT.get_Bandwidth(ref this, out pBandwidth);
			public HRESULT get_ErrorCorrection(out BSTR pbstrErrorCorrection) mut => VT.get_ErrorCorrection(ref this, out pbstrErrorCorrection);
			public HRESULT get_CodecCount(out int32 pCodecCount) mut => VT.get_CodecCount(ref this, out pCodecCount);
			public HRESULT GetCodecInstalled(int32 CodecNum, out int16 pCodecInstalled) mut => VT.GetCodecInstalled(ref this, CodecNum, out pCodecInstalled);
			public HRESULT GetCodecDescription(int32 CodecNum, out BSTR pbstrCodecDescription) mut => VT.GetCodecDescription(ref this, CodecNum, out pbstrCodecDescription);
			public HRESULT GetCodecURL(int32 CodecNum, out BSTR pbstrCodecURL) mut => VT.GetCodecURL(ref this, CodecNum, out pbstrCodecURL);
			public HRESULT get_CreationDate(out double pCreationDate) mut => VT.get_CreationDate(ref this, out pCreationDate);
			public HRESULT get_SourceLink(out BSTR pbstrSourceLink) mut => VT.get_SourceLink(ref this, out pbstrSourceLink);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, out int32 pSourceProtocol) get_SourceProtocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, out int32 pBandwidth) get_Bandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, out BSTR pbstrErrorCorrection) get_ErrorCorrection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, out int32 pCodecCount) get_CodecCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, int32 CodecNum, out int16 pCodecInstalled) GetCodecInstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, int32 CodecNum, out BSTR pbstrCodecDescription) GetCodecDescription;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, int32 CodecNum, out BSTR pbstrCodecURL) GetCodecURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, out double pCreationDate) get_CreationDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowExProps self, out BSTR pbstrSourceLink) get_SourceLink;
			}
		}
		[CRepr]
		public struct IAMExtendedErrorInfo : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f6, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_HasError(out int16 pHasError) mut => VT.get_HasError(ref this, out pHasError);
			public HRESULT get_ErrorDescription(out BSTR pbstrErrorDescription) mut => VT.get_ErrorDescription(ref this, out pbstrErrorDescription);
			public HRESULT get_ErrorCode(out int32 pErrorCode) mut => VT.get_ErrorCode(ref this, out pErrorCode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedErrorInfo self, out int16 pHasError) get_HasError;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedErrorInfo self, out BSTR pbstrErrorDescription) get_ErrorDescription;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMExtendedErrorInfo self, out int32 pErrorCode) get_ErrorCode;
			}
		}
		[CRepr]
		public struct IAMMediaContent : IDispatch
		{
			public const new Guid IID = .(0xfa2aa8f4, 0x8b62, 0x11d0, 0xa5, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AuthorName(out BSTR pbstrAuthorName) mut => VT.get_AuthorName(ref this, out pbstrAuthorName);
			public HRESULT get_Title(out BSTR pbstrTitle) mut => VT.get_Title(ref this, out pbstrTitle);
			public HRESULT get_Rating(out BSTR pbstrRating) mut => VT.get_Rating(ref this, out pbstrRating);
			public HRESULT get_Description(out BSTR pbstrDescription) mut => VT.get_Description(ref this, out pbstrDescription);
			public HRESULT get_Copyright(out BSTR pbstrCopyright) mut => VT.get_Copyright(ref this, out pbstrCopyright);
			public HRESULT get_BaseURL(out BSTR pbstrBaseURL) mut => VT.get_BaseURL(ref this, out pbstrBaseURL);
			public HRESULT get_LogoURL(out BSTR pbstrLogoURL) mut => VT.get_LogoURL(ref this, out pbstrLogoURL);
			public HRESULT get_LogoIconURL(out BSTR pbstrLogoURL) mut => VT.get_LogoIconURL(ref this, out pbstrLogoURL);
			public HRESULT get_WatermarkURL(out BSTR pbstrWatermarkURL) mut => VT.get_WatermarkURL(ref this, out pbstrWatermarkURL);
			public HRESULT get_MoreInfoURL(out BSTR pbstrMoreInfoURL) mut => VT.get_MoreInfoURL(ref this, out pbstrMoreInfoURL);
			public HRESULT get_MoreInfoBannerImage(out BSTR pbstrMoreInfoBannerImage) mut => VT.get_MoreInfoBannerImage(ref this, out pbstrMoreInfoBannerImage);
			public HRESULT get_MoreInfoBannerURL(out BSTR pbstrMoreInfoBannerURL) mut => VT.get_MoreInfoBannerURL(ref this, out pbstrMoreInfoBannerURL);
			public HRESULT get_MoreInfoText(out BSTR pbstrMoreInfoText) mut => VT.get_MoreInfoText(ref this, out pbstrMoreInfoText);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrAuthorName) get_AuthorName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrTitle) get_Title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrRating) get_Rating;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrDescription) get_Description;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrCopyright) get_Copyright;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrBaseURL) get_BaseURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrLogoURL) get_LogoURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrLogoURL) get_LogoIconURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrWatermarkURL) get_WatermarkURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrMoreInfoURL) get_MoreInfoURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrMoreInfoBannerImage) get_MoreInfoBannerImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrMoreInfoBannerURL) get_MoreInfoBannerURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent self, out BSTR pbstrMoreInfoText) get_MoreInfoText;
			}
		}
		[CRepr]
		public struct IAMMediaContent2 : IDispatch
		{
			public const new Guid IID = .(0xce8f78c1, 0x74d9, 0x11d2, 0xb0, 0x9d, 0x00, 0xa0, 0xc9, 0xa8, 0x11, 0x17);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MediaParameter(int32 EntryNum, BSTR bstrName, out BSTR pbstrValue) mut => VT.get_MediaParameter(ref this, EntryNum, bstrName, out pbstrValue);
			public HRESULT get_MediaParameterName(int32 EntryNum, int32 Index, out BSTR pbstrName) mut => VT.get_MediaParameterName(ref this, EntryNum, Index, out pbstrName);
			public HRESULT get_PlaylistCount(out int32 pNumberEntries) mut => VT.get_PlaylistCount(ref this, out pNumberEntries);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent2 self, int32 EntryNum, BSTR bstrName, out BSTR pbstrValue) get_MediaParameter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent2 self, int32 EntryNum, int32 Index, out BSTR pbstrName) get_MediaParameterName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaContent2 self, out int32 pNumberEntries) get_PlaylistCount;
			}
		}
		[CRepr]
		public struct IAMNetShowPreroll : IDispatch
		{
			public const new Guid IID = .(0xaae7e4e2, 0x6388, 0x11d1, 0x8d, 0x93, 0x00, 0x60, 0x97, 0xc9, 0xa2, 0xb2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Preroll(int16 fPreroll) mut => VT.put_Preroll(ref this, fPreroll);
			public HRESULT get_Preroll(out int16 pfPreroll) mut => VT.get_Preroll(ref this, out pfPreroll);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowPreroll self, int16 fPreroll) put_Preroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMNetShowPreroll self, out int16 pfPreroll) get_Preroll;
			}
		}
		[CRepr]
		public struct IDShowPlugin : IUnknown
		{
			public const new Guid IID = .(0x4746b7c8, 0x700e, 0x11d1, 0xbe, 0xcc, 0x00, 0xc0, 0x4f, 0xb6, 0xe9, 0x37);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_URL(out BSTR pURL) mut => VT.get_URL(ref this, out pURL);
			public HRESULT get_UserAgent(out BSTR pUserAgent) mut => VT.get_UserAgent(ref this, out pUserAgent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDShowPlugin self, out BSTR pURL) get_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDShowPlugin self, out BSTR pUserAgent) get_UserAgent;
			}
		}
		[CRepr]
		public struct IAMDirectSound : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDirectSoundInterface(out IDirectSound* lplpds) mut => VT.GetDirectSoundInterface(ref this, out lplpds);
			public HRESULT GetPrimaryBufferInterface(out IDirectSoundBuffer* lplpdsb) mut => VT.GetPrimaryBufferInterface(ref this, out lplpdsb);
			public HRESULT GetSecondaryBufferInterface(out IDirectSoundBuffer* lplpdsb) mut => VT.GetSecondaryBufferInterface(ref this, out lplpdsb);
			public HRESULT ReleaseDirectSoundInterface(ref IDirectSound lpds) mut => VT.ReleaseDirectSoundInterface(ref this, ref lpds);
			public HRESULT ReleasePrimaryBufferInterface(ref IDirectSoundBuffer lpdsb) mut => VT.ReleasePrimaryBufferInterface(ref this, ref lpdsb);
			public HRESULT ReleaseSecondaryBufferInterface(ref IDirectSoundBuffer lpdsb) mut => VT.ReleaseSecondaryBufferInterface(ref this, ref lpdsb);
			public HRESULT SetFocusWindow(HWND param0, BOOL param1) mut => VT.SetFocusWindow(ref this, param0, param1);
			public HRESULT GetFocusWindow(out HWND param0, out BOOL param1) mut => VT.GetFocusWindow(ref this, out param0, out param1);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, out IDirectSound* lplpds) GetDirectSoundInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, out IDirectSoundBuffer* lplpdsb) GetPrimaryBufferInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, out IDirectSoundBuffer* lplpdsb) GetSecondaryBufferInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, ref IDirectSound lpds) ReleaseDirectSoundInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, ref IDirectSoundBuffer lpdsb) ReleasePrimaryBufferInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, ref IDirectSoundBuffer lpdsb) ReleaseSecondaryBufferInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, HWND param0, BOOL param1) SetFocusWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMDirectSound self, out HWND param0, out BOOL param1) GetFocusWindow;
			}
		}
		[CRepr]
		public struct IAMLine21Decoder : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDecoderLevel(out AM_LINE21_CCLEVEL lpLevel) mut => VT.GetDecoderLevel(ref this, out lpLevel);
			public HRESULT GetCurrentService(out AM_LINE21_CCSERVICE lpService) mut => VT.GetCurrentService(ref this, out lpService);
			public HRESULT SetCurrentService(AM_LINE21_CCSERVICE Service) mut => VT.SetCurrentService(ref this, Service);
			public HRESULT GetServiceState(out AM_LINE21_CCSTATE lpState) mut => VT.GetServiceState(ref this, out lpState);
			public HRESULT SetServiceState(AM_LINE21_CCSTATE State) mut => VT.SetServiceState(ref this, State);
			public HRESULT GetOutputFormat(out BITMAPINFOHEADER lpbmih) mut => VT.GetOutputFormat(ref this, out lpbmih);
			public HRESULT SetOutputFormat(out BITMAPINFO lpbmi) mut => VT.SetOutputFormat(ref this, out lpbmi);
			public HRESULT GetBackgroundColor(out uint32 pdwPhysColor) mut => VT.GetBackgroundColor(ref this, out pdwPhysColor);
			public HRESULT SetBackgroundColor(uint32 dwPhysColor) mut => VT.SetBackgroundColor(ref this, dwPhysColor);
			public HRESULT GetRedrawAlways(out int32 lpbOption) mut => VT.GetRedrawAlways(ref this, out lpbOption);
			public HRESULT SetRedrawAlways(BOOL bOption) mut => VT.SetRedrawAlways(ref this, bOption);
			public HRESULT GetDrawBackgroundMode(out AM_LINE21_DRAWBGMODE lpMode) mut => VT.GetDrawBackgroundMode(ref this, out lpMode);
			public HRESULT SetDrawBackgroundMode(AM_LINE21_DRAWBGMODE Mode) mut => VT.SetDrawBackgroundMode(ref this, Mode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out AM_LINE21_CCLEVEL lpLevel) GetDecoderLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out AM_LINE21_CCSERVICE lpService) GetCurrentService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, AM_LINE21_CCSERVICE Service) SetCurrentService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out AM_LINE21_CCSTATE lpState) GetServiceState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, AM_LINE21_CCSTATE State) SetServiceState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out BITMAPINFOHEADER lpbmih) GetOutputFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out BITMAPINFO lpbmi) SetOutputFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out uint32 pdwPhysColor) GetBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, uint32 dwPhysColor) SetBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out int32 lpbOption) GetRedrawAlways;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, BOOL bOption) SetRedrawAlways;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, out AM_LINE21_DRAWBGMODE lpMode) GetDrawBackgroundMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMLine21Decoder self, AM_LINE21_DRAWBGMODE Mode) SetDrawBackgroundMode;
			}
		}
		[CRepr]
		public struct IAMParse : IUnknown
		{
			public const new Guid IID = .(0xc47a3420, 0x005c, 0x11d2, 0x90, 0x38, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x98);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetParseTime(out int64 prtCurrent) mut => VT.GetParseTime(ref this, out prtCurrent);
			public HRESULT SetParseTime(int64 rtCurrent) mut => VT.SetParseTime(ref this, rtCurrent);
			public HRESULT Flush() mut => VT.Flush(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMParse self, out int64 prtCurrent) GetParseTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMParse self, int64 rtCurrent) SetParseTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMParse self) Flush;
			}
		}
		[CRepr]
		public struct IAMCollection : IDispatch
		{
			public const new Guid IID = .(0x56a868b9, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 plCount) mut => VT.get_Count(ref this, out plCount);
			public HRESULT Item(int32 lItem, IUnknown** ppUnk) mut => VT.Item(ref this, lItem, ppUnk);
			public HRESULT get__NewEnum(IUnknown** ppUnk) mut => VT.get__NewEnum(ref this, ppUnk);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCollection self, out int32 plCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCollection self, int32 lItem, IUnknown** ppUnk) Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMCollection self, IUnknown** ppUnk) get__NewEnum;
			}
		}
		[CRepr]
		public struct IMediaControl : IDispatch
		{
			public const new Guid IID = .(0x56a868b1, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Run() mut => VT.Run(ref this);
			public HRESULT Pause() mut => VT.Pause(ref this);
			public HRESULT Stop() mut => VT.Stop(ref this);
			public HRESULT GetState(int32 msTimeout, out int32 pfs) mut => VT.GetState(ref this, msTimeout, out pfs);
			public HRESULT RenderFile(BSTR strFilename) mut => VT.RenderFile(ref this, strFilename);
			public HRESULT AddSourceFilter(BSTR strFilename, IDispatch** ppUnk) mut => VT.AddSourceFilter(ref this, strFilename, ppUnk);
			public HRESULT get_FilterCollection(IDispatch** ppUnk) mut => VT.get_FilterCollection(ref this, ppUnk);
			public HRESULT get_RegFilterCollection(IDispatch** ppUnk) mut => VT.get_RegFilterCollection(ref this, ppUnk);
			public HRESULT StopWhenReady() mut => VT.StopWhenReady(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self) Run;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self) Pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self, int32 msTimeout, out int32 pfs) GetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self, BSTR strFilename) RenderFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self, BSTR strFilename, IDispatch** ppUnk) AddSourceFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self, IDispatch** ppUnk) get_FilterCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self, IDispatch** ppUnk) get_RegFilterCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaControl self) StopWhenReady;
			}
		}
		[CRepr]
		public struct IMediaEvent : IDispatch
		{
			public const new Guid IID = .(0x56a868b6, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEventHandle(out int hEvent) mut => VT.GetEventHandle(ref this, out hEvent);
			public HRESULT GetEvent(out int32 lEventCode, out int lParam1, out int lParam2, int32 msTimeout) mut => VT.GetEvent(ref this, out lEventCode, out lParam1, out lParam2, msTimeout);
			public HRESULT WaitForCompletion(int32 msTimeout, out int32 pEvCode) mut => VT.WaitForCompletion(ref this, msTimeout, out pEvCode);
			public HRESULT CancelDefaultHandling(int32 lEvCode) mut => VT.CancelDefaultHandling(ref this, lEvCode);
			public HRESULT RestoreDefaultHandling(int32 lEvCode) mut => VT.RestoreDefaultHandling(ref this, lEvCode);
			public HRESULT FreeEventParams(int32 lEvCode, int lParam1, int lParam2) mut => VT.FreeEventParams(ref this, lEvCode, lParam1, lParam2);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEvent self, out int hEvent) GetEventHandle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEvent self, out int32 lEventCode, out int lParam1, out int lParam2, int32 msTimeout) GetEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEvent self, int32 msTimeout, out int32 pEvCode) WaitForCompletion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEvent self, int32 lEvCode) CancelDefaultHandling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEvent self, int32 lEvCode) RestoreDefaultHandling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEvent self, int32 lEvCode, int lParam1, int lParam2) FreeEventParams;
			}
		}
		[CRepr]
		public struct IMediaEventEx : IMediaEvent
		{
			public const new Guid IID = .(0x56a868c0, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetNotifyWindow(int hwnd, int32 lMsg, int lInstanceData) mut => VT.SetNotifyWindow(ref this, hwnd, lMsg, lInstanceData);
			public HRESULT SetNotifyFlags(int32 lNoNotifyFlags) mut => VT.SetNotifyFlags(ref this, lNoNotifyFlags);
			public HRESULT GetNotifyFlags(out int32 lplNoNotifyFlags) mut => VT.GetNotifyFlags(ref this, out lplNoNotifyFlags);

			[CRepr]
			public struct VTable : IMediaEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEventEx self, int hwnd, int32 lMsg, int lInstanceData) SetNotifyWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEventEx self, int32 lNoNotifyFlags) SetNotifyFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaEventEx self, out int32 lplNoNotifyFlags) GetNotifyFlags;
			}
		}
		[CRepr]
		public struct IMediaPosition : IDispatch
		{
			public const new Guid IID = .(0x56a868b2, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Duration(out double plength) mut => VT.get_Duration(ref this, out plength);
			public HRESULT put_CurrentPosition(double llTime) mut => VT.put_CurrentPosition(ref this, llTime);
			public HRESULT get_CurrentPosition(out double pllTime) mut => VT.get_CurrentPosition(ref this, out pllTime);
			public HRESULT get_StopTime(out double pllTime) mut => VT.get_StopTime(ref this, out pllTime);
			public HRESULT put_StopTime(double llTime) mut => VT.put_StopTime(ref this, llTime);
			public HRESULT get_PrerollTime(out double pllTime) mut => VT.get_PrerollTime(ref this, out pllTime);
			public HRESULT put_PrerollTime(double llTime) mut => VT.put_PrerollTime(ref this, llTime);
			public HRESULT put_Rate(double dRate) mut => VT.put_Rate(ref this, dRate);
			public HRESULT get_Rate(out double pdRate) mut => VT.get_Rate(ref this, out pdRate);
			public HRESULT CanSeekForward(out int32 pCanSeekForward) mut => VT.CanSeekForward(ref this, out pCanSeekForward);
			public HRESULT CanSeekBackward(out int32 pCanSeekBackward) mut => VT.CanSeekBackward(ref this, out pCanSeekBackward);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out double plength) get_Duration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, double llTime) put_CurrentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out double pllTime) get_CurrentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out double pllTime) get_StopTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, double llTime) put_StopTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out double pllTime) get_PrerollTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, double llTime) put_PrerollTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, double dRate) put_Rate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out double pdRate) get_Rate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out int32 pCanSeekForward) CanSeekForward;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaPosition self, out int32 pCanSeekBackward) CanSeekBackward;
			}
		}
		[CRepr]
		public struct IBasicAudio : IDispatch
		{
			public const new Guid IID = .(0x56a868b3, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Volume(int32 lVolume) mut => VT.put_Volume(ref this, lVolume);
			public HRESULT get_Volume(out int32 plVolume) mut => VT.get_Volume(ref this, out plVolume);
			public HRESULT put_Balance(int32 lBalance) mut => VT.put_Balance(ref this, lBalance);
			public HRESULT get_Balance(out int32 plBalance) mut => VT.get_Balance(ref this, out plBalance);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicAudio self, int32 lVolume) put_Volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicAudio self, out int32 plVolume) get_Volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicAudio self, int32 lBalance) put_Balance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicAudio self, out int32 plBalance) get_Balance;
			}
		}
		[CRepr]
		public struct IVideoWindow : IDispatch
		{
			public const new Guid IID = .(0x56a868b4, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Caption(BSTR strCaption) mut => VT.put_Caption(ref this, strCaption);
			public HRESULT get_Caption(BSTR* strCaption) mut => VT.get_Caption(ref this, strCaption);
			public HRESULT put_WindowStyle(int32 WindowStyle) mut => VT.put_WindowStyle(ref this, WindowStyle);
			public HRESULT get_WindowStyle(out int32 WindowStyle) mut => VT.get_WindowStyle(ref this, out WindowStyle);
			public HRESULT put_WindowStyleEx(int32 WindowStyleEx) mut => VT.put_WindowStyleEx(ref this, WindowStyleEx);
			public HRESULT get_WindowStyleEx(out int32 WindowStyleEx) mut => VT.get_WindowStyleEx(ref this, out WindowStyleEx);
			public HRESULT put_AutoShow(int32 AutoShow) mut => VT.put_AutoShow(ref this, AutoShow);
			public HRESULT get_AutoShow(out int32 AutoShow) mut => VT.get_AutoShow(ref this, out AutoShow);
			public HRESULT put_WindowState(int32 WindowState) mut => VT.put_WindowState(ref this, WindowState);
			public HRESULT get_WindowState(out int32 WindowState) mut => VT.get_WindowState(ref this, out WindowState);
			public HRESULT put_BackgroundPalette(int32 BackgroundPalette) mut => VT.put_BackgroundPalette(ref this, BackgroundPalette);
			public HRESULT get_BackgroundPalette(out int32 pBackgroundPalette) mut => VT.get_BackgroundPalette(ref this, out pBackgroundPalette);
			public HRESULT put_Visible(int32 Visible) mut => VT.put_Visible(ref this, Visible);
			public HRESULT get_Visible(out int32 pVisible) mut => VT.get_Visible(ref this, out pVisible);
			public HRESULT put_Left(int32 Left) mut => VT.put_Left(ref this, Left);
			public HRESULT get_Left(out int32 pLeft) mut => VT.get_Left(ref this, out pLeft);
			public HRESULT put_Width(int32 Width) mut => VT.put_Width(ref this, Width);
			public HRESULT get_Width(out int32 pWidth) mut => VT.get_Width(ref this, out pWidth);
			public HRESULT put_Top(int32 Top) mut => VT.put_Top(ref this, Top);
			public HRESULT get_Top(out int32 pTop) mut => VT.get_Top(ref this, out pTop);
			public HRESULT put_Height(int32 Height) mut => VT.put_Height(ref this, Height);
			public HRESULT get_Height(out int32 pHeight) mut => VT.get_Height(ref this, out pHeight);
			public HRESULT put_Owner(int Owner) mut => VT.put_Owner(ref this, Owner);
			public HRESULT get_Owner(out int Owner) mut => VT.get_Owner(ref this, out Owner);
			public HRESULT put_MessageDrain(int Drain) mut => VT.put_MessageDrain(ref this, Drain);
			public HRESULT get_MessageDrain(out int Drain) mut => VT.get_MessageDrain(ref this, out Drain);
			public HRESULT get_BorderColor(out int32 Color) mut => VT.get_BorderColor(ref this, out Color);
			public HRESULT put_BorderColor(int32 Color) mut => VT.put_BorderColor(ref this, Color);
			public HRESULT get_FullScreenMode(out int32 FullScreenMode) mut => VT.get_FullScreenMode(ref this, out FullScreenMode);
			public HRESULT put_FullScreenMode(int32 FullScreenMode) mut => VT.put_FullScreenMode(ref this, FullScreenMode);
			public HRESULT SetWindowForeground(int32 Focus) mut => VT.SetWindowForeground(ref this, Focus);
			public HRESULT NotifyOwnerMessage(int hwnd, int32 uMsg, int wParam, int lParam) mut => VT.NotifyOwnerMessage(ref this, hwnd, uMsg, wParam, lParam);
			public HRESULT SetWindowPosition(int32 Left, int32 Top, int32 Width, int32 Height) mut => VT.SetWindowPosition(ref this, Left, Top, Width, Height);
			public HRESULT GetWindowPosition(out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) mut => VT.GetWindowPosition(ref this, out pLeft, out pTop, out pWidth, out pHeight);
			public HRESULT GetMinIdealImageSize(out int32 pWidth, out int32 pHeight) mut => VT.GetMinIdealImageSize(ref this, out pWidth, out pHeight);
			public HRESULT GetMaxIdealImageSize(out int32 pWidth, out int32 pHeight) mut => VT.GetMaxIdealImageSize(ref this, out pWidth, out pHeight);
			public HRESULT GetRestorePosition(out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) mut => VT.GetRestorePosition(ref this, out pLeft, out pTop, out pWidth, out pHeight);
			public HRESULT HideCursor(OA_BOOL HideCursor) mut => VT.HideCursor(ref this, HideCursor);
			public HRESULT IsCursorHidden(out int32 CursorHidden) mut => VT.IsCursorHidden(ref this, out CursorHidden);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, BSTR strCaption) put_Caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, BSTR* strCaption) get_Caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 WindowStyle) put_WindowStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 WindowStyle) get_WindowStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 WindowStyleEx) put_WindowStyleEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 WindowStyleEx) get_WindowStyleEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 AutoShow) put_AutoShow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 AutoShow) get_AutoShow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 WindowState) put_WindowState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 WindowState) get_WindowState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 BackgroundPalette) put_BackgroundPalette;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pBackgroundPalette) get_BackgroundPalette;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Visible) put_Visible;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pVisible) get_Visible;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Left) put_Left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pLeft) get_Left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Width) put_Width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pWidth) get_Width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Top) put_Top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pTop) get_Top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Height) put_Height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pHeight) get_Height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int Owner) put_Owner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int Owner) get_Owner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int Drain) put_MessageDrain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int Drain) get_MessageDrain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 Color) get_BorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Color) put_BorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 FullScreenMode) get_FullScreenMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 FullScreenMode) put_FullScreenMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Focus) SetWindowForeground;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int hwnd, int32 uMsg, int wParam, int lParam) NotifyOwnerMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, int32 Left, int32 Top, int32 Width, int32 Height) SetWindowPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) GetWindowPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pWidth, out int32 pHeight) GetMinIdealImageSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pWidth, out int32 pHeight) GetMaxIdealImageSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) GetRestorePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, OA_BOOL HideCursor) HideCursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoWindow self, out int32 CursorHidden) IsCursorHidden;
			}
		}
		[CRepr]
		public struct IBasicVideo : IDispatch
		{
			public const new Guid IID = .(0x56a868b5, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AvgTimePerFrame(out double pAvgTimePerFrame) mut => VT.get_AvgTimePerFrame(ref this, out pAvgTimePerFrame);
			public HRESULT get_BitRate(out int32 pBitRate) mut => VT.get_BitRate(ref this, out pBitRate);
			public HRESULT get_BitErrorRate(out int32 pBitErrorRate) mut => VT.get_BitErrorRate(ref this, out pBitErrorRate);
			public HRESULT get_VideoWidth(out int32 pVideoWidth) mut => VT.get_VideoWidth(ref this, out pVideoWidth);
			public HRESULT get_VideoHeight(out int32 pVideoHeight) mut => VT.get_VideoHeight(ref this, out pVideoHeight);
			public HRESULT put_SourceLeft(int32 SourceLeft) mut => VT.put_SourceLeft(ref this, SourceLeft);
			public HRESULT get_SourceLeft(out int32 pSourceLeft) mut => VT.get_SourceLeft(ref this, out pSourceLeft);
			public HRESULT put_SourceWidth(int32 SourceWidth) mut => VT.put_SourceWidth(ref this, SourceWidth);
			public HRESULT get_SourceWidth(out int32 pSourceWidth) mut => VT.get_SourceWidth(ref this, out pSourceWidth);
			public HRESULT put_SourceTop(int32 SourceTop) mut => VT.put_SourceTop(ref this, SourceTop);
			public HRESULT get_SourceTop(out int32 pSourceTop) mut => VT.get_SourceTop(ref this, out pSourceTop);
			public HRESULT put_SourceHeight(int32 SourceHeight) mut => VT.put_SourceHeight(ref this, SourceHeight);
			public HRESULT get_SourceHeight(out int32 pSourceHeight) mut => VT.get_SourceHeight(ref this, out pSourceHeight);
			public HRESULT put_DestinationLeft(int32 DestinationLeft) mut => VT.put_DestinationLeft(ref this, DestinationLeft);
			public HRESULT get_DestinationLeft(out int32 pDestinationLeft) mut => VT.get_DestinationLeft(ref this, out pDestinationLeft);
			public HRESULT put_DestinationWidth(int32 DestinationWidth) mut => VT.put_DestinationWidth(ref this, DestinationWidth);
			public HRESULT get_DestinationWidth(out int32 pDestinationWidth) mut => VT.get_DestinationWidth(ref this, out pDestinationWidth);
			public HRESULT put_DestinationTop(int32 DestinationTop) mut => VT.put_DestinationTop(ref this, DestinationTop);
			public HRESULT get_DestinationTop(out int32 pDestinationTop) mut => VT.get_DestinationTop(ref this, out pDestinationTop);
			public HRESULT put_DestinationHeight(int32 DestinationHeight) mut => VT.put_DestinationHeight(ref this, DestinationHeight);
			public HRESULT get_DestinationHeight(out int32 pDestinationHeight) mut => VT.get_DestinationHeight(ref this, out pDestinationHeight);
			public HRESULT SetSourcePosition(int32 Left, int32 Top, int32 Width, int32 Height) mut => VT.SetSourcePosition(ref this, Left, Top, Width, Height);
			public HRESULT GetSourcePosition(out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) mut => VT.GetSourcePosition(ref this, out pLeft, out pTop, out pWidth, out pHeight);
			public HRESULT SetDefaultSourcePosition() mut => VT.SetDefaultSourcePosition(ref this);
			public HRESULT SetDestinationPosition(int32 Left, int32 Top, int32 Width, int32 Height) mut => VT.SetDestinationPosition(ref this, Left, Top, Width, Height);
			public HRESULT GetDestinationPosition(out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) mut => VT.GetDestinationPosition(ref this, out pLeft, out pTop, out pWidth, out pHeight);
			public HRESULT SetDefaultDestinationPosition() mut => VT.SetDefaultDestinationPosition(ref this);
			public HRESULT GetVideoSize(out int32 pWidth, out int32 pHeight) mut => VT.GetVideoSize(ref this, out pWidth, out pHeight);
			public HRESULT GetVideoPaletteEntries(int32 StartIndex, int32 Entries, out int32 pRetrieved, out int32 pPalette) mut => VT.GetVideoPaletteEntries(ref this, StartIndex, Entries, out pRetrieved, out pPalette);
			public HRESULT GetCurrentImage(out int32 pBufferSize, out int32 pDIBImage) mut => VT.GetCurrentImage(ref this, out pBufferSize, out pDIBImage);
			public HRESULT IsUsingDefaultSource() mut => VT.IsUsingDefaultSource(ref this);
			public HRESULT IsUsingDefaultDestination() mut => VT.IsUsingDefaultDestination(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out double pAvgTimePerFrame) get_AvgTimePerFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pBitRate) get_BitRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pBitErrorRate) get_BitErrorRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pVideoWidth) get_VideoWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pVideoHeight) get_VideoHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 SourceLeft) put_SourceLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pSourceLeft) get_SourceLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 SourceWidth) put_SourceWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pSourceWidth) get_SourceWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 SourceTop) put_SourceTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pSourceTop) get_SourceTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 SourceHeight) put_SourceHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pSourceHeight) get_SourceHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 DestinationLeft) put_DestinationLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pDestinationLeft) get_DestinationLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 DestinationWidth) put_DestinationWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pDestinationWidth) get_DestinationWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 DestinationTop) put_DestinationTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pDestinationTop) get_DestinationTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 DestinationHeight) put_DestinationHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pDestinationHeight) get_DestinationHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 Left, int32 Top, int32 Width, int32 Height) SetSourcePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) GetSourcePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self) SetDefaultSourcePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 Left, int32 Top, int32 Width, int32 Height) SetDestinationPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pLeft, out int32 pTop, out int32 pWidth, out int32 pHeight) GetDestinationPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self) SetDefaultDestinationPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pWidth, out int32 pHeight) GetVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, int32 StartIndex, int32 Entries, out int32 pRetrieved, out int32 pPalette) GetVideoPaletteEntries;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self, out int32 pBufferSize, out int32 pDIBImage) GetCurrentImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self) IsUsingDefaultSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo self) IsUsingDefaultDestination;
			}
		}
		[CRepr]
		public struct IBasicVideo2 : IBasicVideo
		{
			public const new Guid IID = .(0x329bb360, 0xf6ea, 0x11d1, 0x90, 0x38, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x98);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPreferredAspectRatio(out int32 plAspectX, out int32 plAspectY) mut => VT.GetPreferredAspectRatio(ref this, out plAspectX, out plAspectY);

			[CRepr]
			public struct VTable : IBasicVideo.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBasicVideo2 self, out int32 plAspectX, out int32 plAspectY) GetPreferredAspectRatio;
			}
		}
		[CRepr]
		public struct IDeferredCommand : IUnknown
		{
			public const new Guid IID = .(0x56a868b8, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Cancel() mut => VT.Cancel(ref this);
			public HRESULT Confidence(out int32 pConfidence) mut => VT.Confidence(ref this, out pConfidence);
			public HRESULT Postpone(double newtime) mut => VT.Postpone(ref this, newtime);
			public HRESULT GetHResult(out HRESULT phrResult) mut => VT.GetHResult(ref this, out phrResult);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeferredCommand self) Cancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeferredCommand self, out int32 pConfidence) Confidence;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeferredCommand self, double newtime) Postpone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeferredCommand self, out HRESULT phrResult) GetHResult;
			}
		}
		[CRepr]
		public struct IQueueCommand : IUnknown
		{
			public const new Guid IID = .(0x56a868b7, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InvokeAtStreamTime(IDeferredCommand** pCmd, double time, ref Guid iid, int32 dispidMethod, int16 wFlags, int32 cArgs, ref VARIANT pDispParams, out VARIANT pvarResult, out int16 puArgErr) mut => VT.InvokeAtStreamTime(ref this, pCmd, time, ref iid, dispidMethod, wFlags, cArgs, ref pDispParams, out pvarResult, out puArgErr);
			public HRESULT InvokeAtPresentationTime(IDeferredCommand** pCmd, double time, ref Guid iid, int32 dispidMethod, int16 wFlags, int32 cArgs, ref VARIANT pDispParams, out VARIANT pvarResult, out int16 puArgErr) mut => VT.InvokeAtPresentationTime(ref this, pCmd, time, ref iid, dispidMethod, wFlags, cArgs, ref pDispParams, out pvarResult, out puArgErr);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQueueCommand self, IDeferredCommand** pCmd, double time, ref Guid iid, int32 dispidMethod, int16 wFlags, int32 cArgs, ref VARIANT pDispParams, out VARIANT pvarResult, out int16 puArgErr) InvokeAtStreamTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQueueCommand self, IDeferredCommand** pCmd, double time, ref Guid iid, int32 dispidMethod, int16 wFlags, int32 cArgs, ref VARIANT pDispParams, out VARIANT pvarResult, out int16 puArgErr) InvokeAtPresentationTime;
			}
		}
		[CRepr]
		public struct IFilterInfo : IDispatch
		{
			public const new Guid IID = .(0x56a868ba, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FindPin(BSTR strPinID, IDispatch** ppUnk) mut => VT.FindPin(ref this, strPinID, ppUnk);
			public HRESULT get_Name(BSTR* strName) mut => VT.get_Name(ref this, strName);
			public HRESULT get_VendorInfo(BSTR* strVendorInfo) mut => VT.get_VendorInfo(ref this, strVendorInfo);
			public HRESULT get_Filter(IUnknown** ppUnk) mut => VT.get_Filter(ref this, ppUnk);
			public HRESULT get_Pins(IDispatch** ppUnk) mut => VT.get_Pins(ref this, ppUnk);
			public HRESULT get_IsFileSource(out int32 pbIsSource) mut => VT.get_IsFileSource(ref this, out pbIsSource);
			public HRESULT get_Filename(BSTR* pstrFilename) mut => VT.get_Filename(ref this, pstrFilename);
			public HRESULT put_Filename(BSTR strFilename) mut => VT.put_Filename(ref this, strFilename);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, BSTR strPinID, IDispatch** ppUnk) FindPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, BSTR* strName) get_Name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, BSTR* strVendorInfo) get_VendorInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, IUnknown** ppUnk) get_Filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, IDispatch** ppUnk) get_Pins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, out int32 pbIsSource) get_IsFileSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, BSTR* pstrFilename) get_Filename;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFilterInfo self, BSTR strFilename) put_Filename;
			}
		}
		[CRepr]
		public struct IRegFilterInfo : IDispatch
		{
			public const new Guid IID = .(0x56a868bb, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Name(BSTR* strName) mut => VT.get_Name(ref this, strName);
			public HRESULT Filter(IDispatch** ppUnk) mut => VT.Filter(ref this, ppUnk);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRegFilterInfo self, BSTR* strName) get_Name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRegFilterInfo self, IDispatch** ppUnk) Filter;
			}
		}
		[CRepr]
		public struct IMediaTypeInfo : IDispatch
		{
			public const new Guid IID = .(0x56a868bc, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Type(BSTR* strType) mut => VT.get_Type(ref this, strType);
			public HRESULT get_Subtype(BSTR* strType) mut => VT.get_Subtype(ref this, strType);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaTypeInfo self, BSTR* strType) get_Type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaTypeInfo self, BSTR* strType) get_Subtype;
			}
		}
		[CRepr]
		public struct IPinInfo : IDispatch
		{
			public const new Guid IID = .(0x56a868bd, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Pin(IUnknown** ppUnk) mut => VT.get_Pin(ref this, ppUnk);
			public HRESULT get_ConnectedTo(IDispatch** ppUnk) mut => VT.get_ConnectedTo(ref this, ppUnk);
			public HRESULT get_ConnectionMediaType(IDispatch** ppUnk) mut => VT.get_ConnectionMediaType(ref this, ppUnk);
			public HRESULT get_FilterInfo(IDispatch** ppUnk) mut => VT.get_FilterInfo(ref this, ppUnk);
			public HRESULT get_Name(BSTR* ppUnk) mut => VT.get_Name(ref this, ppUnk);
			public HRESULT get_Direction(out int32 ppDirection) mut => VT.get_Direction(ref this, out ppDirection);
			public HRESULT get_PinID(BSTR* strPinID) mut => VT.get_PinID(ref this, strPinID);
			public HRESULT get_MediaTypes(IDispatch** ppUnk) mut => VT.get_MediaTypes(ref this, ppUnk);
			public HRESULT Connect(IUnknown* pPin) mut => VT.Connect(ref this, pPin);
			public HRESULT ConnectDirect(IUnknown* pPin) mut => VT.ConnectDirect(ref this, pPin);
			public HRESULT ConnectWithType(IUnknown* pPin, IDispatch* pMediaType) mut => VT.ConnectWithType(ref this, pPin, pMediaType);
			public HRESULT Disconnect() mut => VT.Disconnect(ref this);
			public HRESULT Render() mut => VT.Render(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IUnknown** ppUnk) get_Pin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IDispatch** ppUnk) get_ConnectedTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IDispatch** ppUnk) get_ConnectionMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IDispatch** ppUnk) get_FilterInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, BSTR* ppUnk) get_Name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, out int32 ppDirection) get_Direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, BSTR* strPinID) get_PinID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IDispatch** ppUnk) get_MediaTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IUnknown* pPin) Connect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IUnknown* pPin) ConnectDirect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self, IUnknown* pPin, IDispatch* pMediaType) ConnectWithType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self) Disconnect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPinInfo self) Render;
			}
		}
		[CRepr]
		public struct IAMStats : IDispatch
		{
			public const new Guid IID = .(0xbc9bcf80, 0xdcd2, 0x11d2, 0xab, 0xf6, 0x00, 0xa0, 0xc9, 0x05, 0xf3, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT get_Count(out int32 plCount) mut => VT.get_Count(ref this, out plCount);
			public HRESULT GetValueByIndex(int32 lIndex, BSTR* szName, out int32 lCount, out double dLast, out double dAverage, out double dStdDev, out double dMin, out double dMax) mut => VT.GetValueByIndex(ref this, lIndex, szName, out lCount, out dLast, out dAverage, out dStdDev, out dMin, out dMax);
			public HRESULT GetValueByName(BSTR szName, out int32 lIndex, out int32 lCount, out double dLast, out double dAverage, out double dStdDev, out double dMin, out double dMax) mut => VT.GetValueByName(ref this, szName, out lIndex, out lCount, out dLast, out dAverage, out dStdDev, out dMin, out dMax);
			public HRESULT GetIndex(BSTR szName, int32 lCreate, out int32 plIndex) mut => VT.GetIndex(ref this, szName, lCreate, out plIndex);
			public HRESULT AddValue(int32 lIndex, double dValue) mut => VT.AddValue(ref this, lIndex, dValue);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStats self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStats self, out int32 plCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStats self, int32 lIndex, BSTR* szName, out int32 lCount, out double dLast, out double dAverage, out double dStdDev, out double dMin, out double dMax) GetValueByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStats self, BSTR szName, out int32 lIndex, out int32 lCount, out double dLast, out double dAverage, out double dStdDev, out double dMin, out double dMax) GetValueByName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStats self, BSTR szName, int32 lCreate, out int32 plIndex) GetIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMStats self, int32 lIndex, double dValue) AddValue;
			}
		}
		[CRepr]
		public struct IAMVideoAcceleratorNotify : IUnknown
		{
			public const new Guid IID = .(0x256a6a21, 0xfbad, 0x11d1, 0x82, 0xbf, 0x00, 0xa0, 0xc9, 0x69, 0x6c, 0x8f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetUncompSurfacesInfo(in Guid pGuid, out AMVAUncompBufferInfo pUncompBufferInfo) mut => VT.GetUncompSurfacesInfo(ref this, pGuid, out pUncompBufferInfo);
			public HRESULT SetUncompSurfacesInfo(uint32 dwActualUncompSurfacesAllocated) mut => VT.SetUncompSurfacesInfo(ref this, dwActualUncompSurfacesAllocated);
			public HRESULT GetCreateVideoAcceleratorData(in Guid pGuid, out uint32 pdwSizeMiscData, void** ppMiscData) mut => VT.GetCreateVideoAcceleratorData(ref this, pGuid, out pdwSizeMiscData, ppMiscData);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAcceleratorNotify self, in Guid pGuid, out AMVAUncompBufferInfo pUncompBufferInfo) GetUncompSurfacesInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAcceleratorNotify self, uint32 dwActualUncompSurfacesAllocated) SetUncompSurfacesInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAcceleratorNotify self, in Guid pGuid, out uint32 pdwSizeMiscData, void** ppMiscData) GetCreateVideoAcceleratorData;
			}
		}
		[CRepr]
		public struct IAMVideoAccelerator : IUnknown
		{
			public const new Guid IID = .(0x256a6a22, 0xfbad, 0x11d1, 0x82, 0xbf, 0x00, 0xa0, 0xc9, 0x69, 0x6c, 0x8f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetVideoAcceleratorGUIDs(out uint32 pdwNumGuidsSupported, Guid* pGuidsSupported) mut => VT.GetVideoAcceleratorGUIDs(ref this, out pdwNumGuidsSupported, pGuidsSupported);
			public HRESULT GetUncompFormatsSupported(in Guid pGuid, out uint32 pdwNumFormatsSupported, DDPIXELFORMAT* pFormatsSupported) mut => VT.GetUncompFormatsSupported(ref this, pGuid, out pdwNumFormatsSupported, pFormatsSupported);
			public HRESULT GetInternalMemInfo(in Guid pGuid, in AMVAUncompDataInfo pamvaUncompDataInfo, out AMVAInternalMemInfo pamvaInternalMemInfo) mut => VT.GetInternalMemInfo(ref this, pGuid, pamvaUncompDataInfo, out pamvaInternalMemInfo);
			public HRESULT GetCompBufferInfo(in Guid pGuid, in AMVAUncompDataInfo pamvaUncompDataInfo, out uint32 pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) mut => VT.GetCompBufferInfo(ref this, pGuid, pamvaUncompDataInfo, out pdwNumTypesCompBuffers, pamvaCompBufferInfo);
			public HRESULT GetInternalCompBufferInfo(out uint32 pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) mut => VT.GetInternalCompBufferInfo(ref this, out pdwNumTypesCompBuffers, pamvaCompBufferInfo);
			public HRESULT BeginFrame(in AMVABeginFrameInfo amvaBeginFrameInfo) mut => VT.BeginFrame(ref this, amvaBeginFrameInfo);
			public HRESULT EndFrame(in AMVAEndFrameInfo pEndFrameInfo) mut => VT.EndFrame(ref this, pEndFrameInfo);
			public HRESULT GetBuffer(uint32 dwTypeIndex, uint32 dwBufferIndex, BOOL bReadOnly, void** ppBuffer, out int32 lpStride) mut => VT.GetBuffer(ref this, dwTypeIndex, dwBufferIndex, bReadOnly, ppBuffer, out lpStride);
			public HRESULT ReleaseBuffer(uint32 dwTypeIndex, uint32 dwBufferIndex) mut => VT.ReleaseBuffer(ref this, dwTypeIndex, dwBufferIndex);
			public HRESULT Execute(uint32 dwFunction, void* lpPrivateInputData, uint32 cbPrivateInputData, void* lpPrivateOutputDat, uint32 cbPrivateOutputData, uint32 dwNumBuffers, AMVABUFFERINFO* pamvaBufferInfo) mut => VT.Execute(ref this, dwFunction, lpPrivateInputData, cbPrivateInputData, lpPrivateOutputDat, cbPrivateOutputData, dwNumBuffers, pamvaBufferInfo);
			public HRESULT QueryRenderStatus(uint32 dwTypeIndex, uint32 dwBufferIndex, uint32 dwFlags) mut => VT.QueryRenderStatus(ref this, dwTypeIndex, dwBufferIndex, dwFlags);
			public HRESULT DisplayFrame(uint32 dwFlipToIndex, ref IMediaSample pMediaSample) mut => VT.DisplayFrame(ref this, dwFlipToIndex, ref pMediaSample);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, out uint32 pdwNumGuidsSupported, Guid* pGuidsSupported) GetVideoAcceleratorGUIDs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, in Guid pGuid, out uint32 pdwNumFormatsSupported, DDPIXELFORMAT* pFormatsSupported) GetUncompFormatsSupported;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, in Guid pGuid, in AMVAUncompDataInfo pamvaUncompDataInfo, out AMVAInternalMemInfo pamvaInternalMemInfo) GetInternalMemInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, in Guid pGuid, in AMVAUncompDataInfo pamvaUncompDataInfo, out uint32 pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) GetCompBufferInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, out uint32 pdwNumTypesCompBuffers, AMVACompBufferInfo* pamvaCompBufferInfo) GetInternalCompBufferInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, in AMVABeginFrameInfo amvaBeginFrameInfo) BeginFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, in AMVAEndFrameInfo pEndFrameInfo) EndFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, uint32 dwTypeIndex, uint32 dwBufferIndex, BOOL bReadOnly, void** ppBuffer, out int32 lpStride) GetBuffer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, uint32 dwTypeIndex, uint32 dwBufferIndex) ReleaseBuffer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, uint32 dwFunction, void* lpPrivateInputData, uint32 cbPrivateInputData, void* lpPrivateOutputDat, uint32 cbPrivateOutputData, uint32 dwNumBuffers, AMVABUFFERINFO* pamvaBufferInfo) Execute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, uint32 dwTypeIndex, uint32 dwBufferIndex, uint32 dwFlags) QueryRenderStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMVideoAccelerator self, uint32 dwFlipToIndex, ref IMediaSample pMediaSample) DisplayFrame;
			}
		}
		[CRepr]
		public struct IAMWstDecoder : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDecoderLevel(out AM_WST_LEVEL lpLevel) mut => VT.GetDecoderLevel(ref this, out lpLevel);
			public HRESULT GetCurrentService(out AM_WST_SERVICE lpService) mut => VT.GetCurrentService(ref this, out lpService);
			public HRESULT GetServiceState(out AM_WST_STATE lpState) mut => VT.GetServiceState(ref this, out lpState);
			public HRESULT SetServiceState(AM_WST_STATE State) mut => VT.SetServiceState(ref this, State);
			public HRESULT GetOutputFormat(out BITMAPINFOHEADER lpbmih) mut => VT.GetOutputFormat(ref this, out lpbmih);
			public HRESULT SetOutputFormat(out BITMAPINFO lpbmi) mut => VT.SetOutputFormat(ref this, out lpbmi);
			public HRESULT GetBackgroundColor(out uint32 pdwPhysColor) mut => VT.GetBackgroundColor(ref this, out pdwPhysColor);
			public HRESULT SetBackgroundColor(uint32 dwPhysColor) mut => VT.SetBackgroundColor(ref this, dwPhysColor);
			public HRESULT GetRedrawAlways(out int32 lpbOption) mut => VT.GetRedrawAlways(ref this, out lpbOption);
			public HRESULT SetRedrawAlways(BOOL bOption) mut => VT.SetRedrawAlways(ref this, bOption);
			public HRESULT GetDrawBackgroundMode(out AM_WST_DRAWBGMODE lpMode) mut => VT.GetDrawBackgroundMode(ref this, out lpMode);
			public HRESULT SetDrawBackgroundMode(AM_WST_DRAWBGMODE Mode) mut => VT.SetDrawBackgroundMode(ref this, Mode);
			public HRESULT SetAnswerMode(BOOL bAnswer) mut => VT.SetAnswerMode(ref this, bAnswer);
			public HRESULT GetAnswerMode(out BOOL pbAnswer) mut => VT.GetAnswerMode(ref this, out pbAnswer);
			public HRESULT SetHoldPage(BOOL bHoldPage) mut => VT.SetHoldPage(ref this, bHoldPage);
			public HRESULT GetHoldPage(out BOOL pbHoldPage) mut => VT.GetHoldPage(ref this, out pbHoldPage);
			public HRESULT GetCurrentPage(out AM_WST_PAGE pWstPage) mut => VT.GetCurrentPage(ref this, out pWstPage);
			public HRESULT SetCurrentPage(AM_WST_PAGE WstPage) mut => VT.SetCurrentPage(ref this, WstPage);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out AM_WST_LEVEL lpLevel) GetDecoderLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out AM_WST_SERVICE lpService) GetCurrentService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out AM_WST_STATE lpState) GetServiceState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, AM_WST_STATE State) SetServiceState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out BITMAPINFOHEADER lpbmih) GetOutputFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out BITMAPINFO lpbmi) SetOutputFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out uint32 pdwPhysColor) GetBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, uint32 dwPhysColor) SetBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out int32 lpbOption) GetRedrawAlways;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, BOOL bOption) SetRedrawAlways;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out AM_WST_DRAWBGMODE lpMode) GetDrawBackgroundMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, AM_WST_DRAWBGMODE Mode) SetDrawBackgroundMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, BOOL bAnswer) SetAnswerMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out BOOL pbAnswer) GetAnswerMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, BOOL bHoldPage) SetHoldPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out BOOL pbHoldPage) GetHoldPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, out AM_WST_PAGE pWstPage) GetCurrentPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMWstDecoder self, AM_WST_PAGE WstPage) SetCurrentPage;
			}
		}
		[CRepr]
		public struct IKsTopologyInfo : IUnknown
		{
			public const new Guid IID = .(0x720d4ac0, 0x7533, 0x11d0, 0xa5, 0xd6, 0x28, 0xdb, 0x04, 0xc1, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_NumCategories(out uint32 pdwNumCategories) mut => VT.get_NumCategories(ref this, out pdwNumCategories);
			public HRESULT get_Category(uint32 dwIndex, out Guid pCategory) mut => VT.get_Category(ref this, dwIndex, out pCategory);
			public HRESULT get_NumConnections(out uint32 pdwNumConnections) mut => VT.get_NumConnections(ref this, out pdwNumConnections);
			public HRESULT get_ConnectionInfo(uint32 dwIndex, out KSTOPOLOGY_CONNECTION pConnectionInfo) mut => VT.get_ConnectionInfo(ref this, dwIndex, out pConnectionInfo);
			public HRESULT get_NodeName(uint32 dwNodeId, PWSTR pwchNodeName, uint32 dwBufSize, out uint32 pdwNameLen) mut => VT.get_NodeName(ref this, dwNodeId, pwchNodeName, dwBufSize, out pdwNameLen);
			public HRESULT get_NumNodes(out uint32 pdwNumNodes) mut => VT.get_NumNodes(ref this, out pdwNumNodes);
			public HRESULT get_NodeType(uint32 dwNodeId, out Guid pNodeType) mut => VT.get_NodeType(ref this, dwNodeId, out pNodeType);
			public HRESULT CreateNodeInstance(uint32 dwNodeId, in Guid iid, void** ppvObject) mut => VT.CreateNodeInstance(ref this, dwNodeId, iid, ppvObject);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, out uint32 pdwNumCategories) get_NumCategories;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, uint32 dwIndex, out Guid pCategory) get_Category;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, out uint32 pdwNumConnections) get_NumConnections;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, uint32 dwIndex, out KSTOPOLOGY_CONNECTION pConnectionInfo) get_ConnectionInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, uint32 dwNodeId, PWSTR pwchNodeName, uint32 dwBufSize, out uint32 pdwNameLen) get_NodeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, out uint32 pdwNumNodes) get_NumNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, uint32 dwNodeId, out Guid pNodeType) get_NodeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsTopologyInfo self, uint32 dwNodeId, in Guid iid, void** ppvObject) CreateNodeInstance;
			}
		}
		[CRepr]
		public struct ISelector : IUnknown
		{
			public const new Guid IID = .(0x1abdaeca, 0x68b6, 0x4f83, 0x93, 0x71, 0xb4, 0x13, 0x90, 0x7c, 0x7b, 0x9f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_NumSources(out uint32 pdwNumSources) mut => VT.get_NumSources(ref this, out pdwNumSources);
			public HRESULT get_SourceNodeId(out uint32 pdwPinId) mut => VT.get_SourceNodeId(ref this, out pdwPinId);
			public HRESULT put_SourceNodeId(uint32 dwPinId) mut => VT.put_SourceNodeId(ref this, dwPinId);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelector self, out uint32 pdwNumSources) get_NumSources;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelector self, out uint32 pdwPinId) get_SourceNodeId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelector self, uint32 dwPinId) put_SourceNodeId;
			}
		}
		[CRepr]
		public struct ICameraControl : IUnknown
		{
			public const new Guid IID = .(0x2ba1785d, 0x4d1b, 0x44ef, 0x85, 0xe8, 0xc7, 0xf1, 0xd3, 0xf2, 0x01, 0x84);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Exposure(out int32 pValue, out int32 pFlags) mut => VT.get_Exposure(ref this, out pValue, out pFlags);
			public HRESULT put_Exposure(int32 Value, int32 Flags) mut => VT.put_Exposure(ref this, Value, Flags);
			public HRESULT getRange_Exposure(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Exposure(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Focus(out int32 pValue, out int32 pFlags) mut => VT.get_Focus(ref this, out pValue, out pFlags);
			public HRESULT put_Focus(int32 Value, int32 Flags) mut => VT.put_Focus(ref this, Value, Flags);
			public HRESULT getRange_Focus(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Focus(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Iris(out int32 pValue, out int32 pFlags) mut => VT.get_Iris(ref this, out pValue, out pFlags);
			public HRESULT put_Iris(int32 Value, int32 Flags) mut => VT.put_Iris(ref this, Value, Flags);
			public HRESULT getRange_Iris(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Iris(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Zoom(out int32 pValue, out int32 pFlags) mut => VT.get_Zoom(ref this, out pValue, out pFlags);
			public HRESULT put_Zoom(int32 Value, int32 Flags) mut => VT.put_Zoom(ref this, Value, Flags);
			public HRESULT getRange_Zoom(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Zoom(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_FocalLengths(out int32 plOcularFocalLength, out int32 plObjectiveFocalLengthMin, out int32 plObjectiveFocalLengthMax) mut => VT.get_FocalLengths(ref this, out plOcularFocalLength, out plObjectiveFocalLengthMin, out plObjectiveFocalLengthMax);
			public HRESULT get_Pan(out int32 pValue, out int32 pFlags) mut => VT.get_Pan(ref this, out pValue, out pFlags);
			public HRESULT put_Pan(int32 Value, int32 Flags) mut => VT.put_Pan(ref this, Value, Flags);
			public HRESULT getRange_Pan(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Pan(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Tilt(out int32 pValue, out int32 pFlags) mut => VT.get_Tilt(ref this, out pValue, out pFlags);
			public HRESULT put_Tilt(int32 Value, int32 Flags) mut => VT.put_Tilt(ref this, Value, Flags);
			public HRESULT getRange_Tilt(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Tilt(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_PanTilt(out int32 pPanValue, out int32 pTiltValue, out int32 pFlags) mut => VT.get_PanTilt(ref this, out pPanValue, out pTiltValue, out pFlags);
			public HRESULT put_PanTilt(int32 PanValue, int32 TiltValue, int32 Flags) mut => VT.put_PanTilt(ref this, PanValue, TiltValue, Flags);
			public HRESULT get_Roll(out int32 pValue, out int32 pFlags) mut => VT.get_Roll(ref this, out pValue, out pFlags);
			public HRESULT put_Roll(int32 Value, int32 Flags) mut => VT.put_Roll(ref this, Value, Flags);
			public HRESULT getRange_Roll(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Roll(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_ExposureRelative(out int32 pValue, out int32 pFlags) mut => VT.get_ExposureRelative(ref this, out pValue, out pFlags);
			public HRESULT put_ExposureRelative(int32 Value, int32 Flags) mut => VT.put_ExposureRelative(ref this, Value, Flags);
			public HRESULT getRange_ExposureRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_ExposureRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_FocusRelative(out int32 pValue, out int32 pFlags) mut => VT.get_FocusRelative(ref this, out pValue, out pFlags);
			public HRESULT put_FocusRelative(int32 Value, int32 Flags) mut => VT.put_FocusRelative(ref this, Value, Flags);
			public HRESULT getRange_FocusRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_FocusRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_IrisRelative(out int32 pValue, out int32 pFlags) mut => VT.get_IrisRelative(ref this, out pValue, out pFlags);
			public HRESULT put_IrisRelative(int32 Value, int32 Flags) mut => VT.put_IrisRelative(ref this, Value, Flags);
			public HRESULT getRange_IrisRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_IrisRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_ZoomRelative(out int32 pValue, out int32 pFlags) mut => VT.get_ZoomRelative(ref this, out pValue, out pFlags);
			public HRESULT put_ZoomRelative(int32 Value, int32 Flags) mut => VT.put_ZoomRelative(ref this, Value, Flags);
			public HRESULT getRange_ZoomRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_ZoomRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_PanRelative(out int32 pValue, out int32 pFlags) mut => VT.get_PanRelative(ref this, out pValue, out pFlags);
			public HRESULT put_PanRelative(int32 Value, int32 Flags) mut => VT.put_PanRelative(ref this, Value, Flags);
			public HRESULT get_TiltRelative(out int32 pValue, out int32 pFlags) mut => VT.get_TiltRelative(ref this, out pValue, out pFlags);
			public HRESULT put_TiltRelative(int32 Value, int32 Flags) mut => VT.put_TiltRelative(ref this, Value, Flags);
			public HRESULT getRange_TiltRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_TiltRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_PanTiltRelative(out int32 pPanValue, out int32 pTiltValue, out int32 pFlags) mut => VT.get_PanTiltRelative(ref this, out pPanValue, out pTiltValue, out pFlags);
			public HRESULT put_PanTiltRelative(int32 PanValue, int32 TiltValue, int32 Flags) mut => VT.put_PanTiltRelative(ref this, PanValue, TiltValue, Flags);
			public HRESULT getRange_PanRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_PanRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_RollRelative(out int32 pValue, out int32 pFlags) mut => VT.get_RollRelative(ref this, out pValue, out pFlags);
			public HRESULT put_RollRelative(int32 Value, int32 Flags) mut => VT.put_RollRelative(ref this, Value, Flags);
			public HRESULT getRange_RollRelative(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_RollRelative(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_ScanMode(out int32 pValue, out int32 pFlags) mut => VT.get_ScanMode(ref this, out pValue, out pFlags);
			public HRESULT put_ScanMode(int32 Value, int32 Flags) mut => VT.put_ScanMode(ref this, Value, Flags);
			public HRESULT get_PrivacyMode(out int32 pValue, out int32 pFlags) mut => VT.get_PrivacyMode(ref this, out pValue, out pFlags);
			public HRESULT put_PrivacyMode(int32 Value, int32 Flags) mut => VT.put_PrivacyMode(ref this, Value, Flags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Exposure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Exposure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Exposure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Iris;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Iris;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Iris;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 plOcularFocalLength, out int32 plObjectiveFocalLengthMin, out int32 plObjectiveFocalLengthMax) get_FocalLengths;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Pan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Pan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Pan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Tilt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Tilt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Tilt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pPanValue, out int32 pTiltValue, out int32 pFlags) get_PanTilt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 PanValue, int32 TiltValue, int32 Flags) put_PanTilt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_Roll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_Roll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Roll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_ExposureRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_ExposureRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_ExposureRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_FocusRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_FocusRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_FocusRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_IrisRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_IrisRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_IrisRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_ZoomRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_ZoomRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_ZoomRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_PanRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_PanRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_TiltRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_TiltRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_TiltRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pPanValue, out int32 pTiltValue, out int32 pFlags) get_PanTiltRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 PanValue, int32 TiltValue, int32 Flags) put_PanTiltRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_PanRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_RollRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_RollRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_RollRelative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_ScanMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_ScanMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, out int32 pValue, out int32 pFlags) get_PrivacyMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICameraControl self, int32 Value, int32 Flags) put_PrivacyMode;
			}
		}
		[CRepr]
		public struct IVideoProcAmp : IUnknown
		{
			public const new Guid IID = .(0x4050560e, 0x42a7, 0x413a, 0x85, 0xc2, 0x09, 0x26, 0x9a, 0x2d, 0x0f, 0x44);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_BacklightCompensation(out int32 pValue, out int32 pFlags) mut => VT.get_BacklightCompensation(ref this, out pValue, out pFlags);
			public HRESULT put_BacklightCompensation(int32 Value, int32 Flags) mut => VT.put_BacklightCompensation(ref this, Value, Flags);
			public HRESULT getRange_BacklightCompensation(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_BacklightCompensation(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Brightness(out int32 pValue, out int32 pFlags) mut => VT.get_Brightness(ref this, out pValue, out pFlags);
			public HRESULT put_Brightness(int32 Value, int32 Flags) mut => VT.put_Brightness(ref this, Value, Flags);
			public HRESULT getRange_Brightness(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Brightness(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_ColorEnable(out int32 pValue, out int32 pFlags) mut => VT.get_ColorEnable(ref this, out pValue, out pFlags);
			public HRESULT put_ColorEnable(int32 Value, int32 Flags) mut => VT.put_ColorEnable(ref this, Value, Flags);
			public HRESULT getRange_ColorEnable(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_ColorEnable(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Contrast(out int32 pValue, out int32 pFlags) mut => VT.get_Contrast(ref this, out pValue, out pFlags);
			public HRESULT put_Contrast(int32 Value, int32 Flags) mut => VT.put_Contrast(ref this, Value, Flags);
			public HRESULT getRange_Contrast(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Contrast(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Gamma(out int32 pValue, out int32 pFlags) mut => VT.get_Gamma(ref this, out pValue, out pFlags);
			public HRESULT put_Gamma(int32 Value, int32 Flags) mut => VT.put_Gamma(ref this, Value, Flags);
			public HRESULT getRange_Gamma(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Gamma(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Saturation(out int32 pValue, out int32 pFlags) mut => VT.get_Saturation(ref this, out pValue, out pFlags);
			public HRESULT put_Saturation(int32 Value, int32 Flags) mut => VT.put_Saturation(ref this, Value, Flags);
			public HRESULT getRange_Saturation(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Saturation(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Sharpness(out int32 pValue, out int32 pFlags) mut => VT.get_Sharpness(ref this, out pValue, out pFlags);
			public HRESULT put_Sharpness(int32 Value, int32 Flags) mut => VT.put_Sharpness(ref this, Value, Flags);
			public HRESULT getRange_Sharpness(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Sharpness(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_WhiteBalance(out int32 pValue, out int32 pFlags) mut => VT.get_WhiteBalance(ref this, out pValue, out pFlags);
			public HRESULT put_WhiteBalance(int32 Value, int32 Flags) mut => VT.put_WhiteBalance(ref this, Value, Flags);
			public HRESULT getRange_WhiteBalance(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_WhiteBalance(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Gain(out int32 pValue, out int32 pFlags) mut => VT.get_Gain(ref this, out pValue, out pFlags);
			public HRESULT put_Gain(int32 Value, int32 Flags) mut => VT.put_Gain(ref this, Value, Flags);
			public HRESULT getRange_Gain(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Gain(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_Hue(out int32 pValue, out int32 pFlags) mut => VT.get_Hue(ref this, out pValue, out pFlags);
			public HRESULT put_Hue(int32 Value, int32 Flags) mut => VT.put_Hue(ref this, Value, Flags);
			public HRESULT getRange_Hue(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_Hue(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_DigitalMultiplier(out int32 pValue, out int32 pFlags) mut => VT.get_DigitalMultiplier(ref this, out pValue, out pFlags);
			public HRESULT put_DigitalMultiplier(int32 Value, int32 Flags) mut => VT.put_DigitalMultiplier(ref this, Value, Flags);
			public HRESULT getRange_DigitalMultiplier(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_DigitalMultiplier(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_PowerlineFrequency(out int32 pValue, out int32 pFlags) mut => VT.get_PowerlineFrequency(ref this, out pValue, out pFlags);
			public HRESULT put_PowerlineFrequency(int32 Value, int32 Flags) mut => VT.put_PowerlineFrequency(ref this, Value, Flags);
			public HRESULT getRange_PowerlineFrequency(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_PowerlineFrequency(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);
			public HRESULT get_WhiteBalanceComponent(out int32 pValue1, out int32 pValue2, out int32 pFlags) mut => VT.get_WhiteBalanceComponent(ref this, out pValue1, out pValue2, out pFlags);
			public HRESULT put_WhiteBalanceComponent(int32 Value1, int32 Value2, int32 Flags) mut => VT.put_WhiteBalanceComponent(ref this, Value1, Value2, Flags);
			public HRESULT getRange_WhiteBalanceComponent(out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) mut => VT.getRange_WhiteBalanceComponent(ref this, out pMin, out pMax, out pSteppingDelta, out pDefault, out pCapsFlag);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_BacklightCompensation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_BacklightCompensation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_BacklightCompensation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Brightness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Brightness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Brightness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_ColorEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_ColorEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_ColorEnable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Contrast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Contrast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Contrast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Gamma;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Gamma;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Gamma;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Saturation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Saturation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Saturation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Sharpness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Sharpness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Sharpness;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_WhiteBalance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_WhiteBalance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_WhiteBalance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Gain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Gain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Gain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_Hue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_Hue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_Hue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_DigitalMultiplier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_DigitalMultiplier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_DigitalMultiplier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue, out int32 pFlags) get_PowerlineFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value, int32 Flags) put_PowerlineFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_PowerlineFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pValue1, out int32 pValue2, out int32 pFlags) get_WhiteBalanceComponent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, int32 Value1, int32 Value2, int32 Flags) put_WhiteBalanceComponent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVideoProcAmp self, out int32 pMin, out int32 pMax, out int32 pSteppingDelta, out int32 pDefault, out int32 pCapsFlag) getRange_WhiteBalanceComponent;
			}
		}
		[CRepr]
		public struct IKsNodeControl : IUnknown
		{
			public const new Guid IID = .(0x11737c14, 0x24a7, 0x4bb5, 0x81, 0xa0, 0x0d, 0x00, 0x38, 0x13, 0xb0, 0xc4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_NodeId(uint32 dwNodeId) mut => VT.put_NodeId(ref this, dwNodeId);
			public HRESULT put_KsControl(void* pKsControl) mut => VT.put_KsControl(ref this, pKsControl);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsNodeControl self, uint32 dwNodeId) put_NodeId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IKsNodeControl self, void* pKsControl) put_KsControl;
			}
		}
		[CRepr]
		public struct IConfigAsfWriter : IUnknown
		{
			public const new Guid IID = .(0x45086030, 0xf7e4, 0x486a, 0xb5, 0x04, 0x82, 0x6b, 0xb5, 0x79, 0x2a, 0x3b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ConfigureFilterUsingProfileId(uint32 dwProfileId) mut => VT.ConfigureFilterUsingProfileId(ref this, dwProfileId);
			public HRESULT GetCurrentProfileId(out uint32 pdwProfileId) mut => VT.GetCurrentProfileId(ref this, out pdwProfileId);
			public HRESULT ConfigureFilterUsingProfileGuid(in Guid guidProfile) mut => VT.ConfigureFilterUsingProfileGuid(ref this, guidProfile);
			public HRESULT GetCurrentProfileGuid(out Guid pProfileGuid) mut => VT.GetCurrentProfileGuid(ref this, out pProfileGuid);
			public HRESULT ConfigureFilterUsingProfile(ref IWMProfile pProfile) mut => VT.ConfigureFilterUsingProfile(ref this, ref pProfile);
			public HRESULT GetCurrentProfile(out IWMProfile* ppProfile) mut => VT.GetCurrentProfile(ref this, out ppProfile);
			public HRESULT SetIndexMode(BOOL bIndexFile) mut => VT.SetIndexMode(ref this, bIndexFile);
			public HRESULT GetIndexMode(out BOOL pbIndexFile) mut => VT.GetIndexMode(ref this, out pbIndexFile);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, uint32 dwProfileId) ConfigureFilterUsingProfileId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, out uint32 pdwProfileId) GetCurrentProfileId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, in Guid guidProfile) ConfigureFilterUsingProfileGuid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, out Guid pProfileGuid) GetCurrentProfileGuid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, ref IWMProfile pProfile) ConfigureFilterUsingProfile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, out IWMProfile* ppProfile) GetCurrentProfile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, BOOL bIndexFile) SetIndexMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter self, out BOOL pbIndexFile) GetIndexMode;
			}
		}
		[CRepr]
		public struct IConfigAsfWriter2 : IConfigAsfWriter
		{
			public const new Guid IID = .(0x7989ccaa, 0x53f0, 0x44f0, 0x88, 0x4a, 0xf3, 0xb0, 0x3f, 0x6a, 0xe0, 0x66);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StreamNumFromPin(ref IPin pPin, out uint16 pwStreamNum) mut => VT.StreamNumFromPin(ref this, ref pPin, out pwStreamNum);
			public HRESULT SetParam(uint32 dwParam, uint32 dwParam1, uint32 dwParam2) mut => VT.SetParam(ref this, dwParam, dwParam1, dwParam2);
			public HRESULT GetParam(uint32 dwParam, out uint32 pdwParam1, out uint32 pdwParam2) mut => VT.GetParam(ref this, dwParam, out pdwParam1, out pdwParam2);
			public HRESULT ResetMultiPassState() mut => VT.ResetMultiPassState(ref this);

			[CRepr]
			public struct VTable : IConfigAsfWriter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter2 self, ref IPin pPin, out uint16 pwStreamNum) StreamNumFromPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter2 self, uint32 dwParam, uint32 dwParam1, uint32 dwParam2) SetParam;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter2 self, uint32 dwParam, out uint32 pdwParam1, out uint32 pdwParam2) GetParam;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IConfigAsfWriter2 self) ResetMultiPassState;
			}
		}
		[CRepr]
		public struct IMultiMediaStream : IUnknown
		{
			public const new Guid IID = .(0xb502d1bc, 0x9a57, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetInformation(out MMSSF_GET_INFORMATION_FLAGS pdwFlags, out STREAM_TYPE pStreamType) mut => VT.GetInformation(ref this, out pdwFlags, out pStreamType);
			public HRESULT GetMediaStream(ref Guid idPurpose, out IMediaStream* ppMediaStream) mut => VT.GetMediaStream(ref this, ref idPurpose, out ppMediaStream);
			public HRESULT EnumMediaStreams(int32 Index, out IMediaStream* ppMediaStream) mut => VT.EnumMediaStreams(ref this, Index, out ppMediaStream);
			public HRESULT GetState(out STREAM_STATE pCurrentState) mut => VT.GetState(ref this, out pCurrentState);
			public HRESULT SetState(STREAM_STATE NewState) mut => VT.SetState(ref this, NewState);
			public HRESULT GetTime(out int64 pCurrentTime) mut => VT.GetTime(ref this, out pCurrentTime);
			public HRESULT GetDuration(out int64 pDuration) mut => VT.GetDuration(ref this, out pDuration);
			public HRESULT Seek(int64 SeekTime) mut => VT.Seek(ref this, SeekTime);
			public HRESULT GetEndOfStreamEventHandle(out HANDLE phEOS) mut => VT.GetEndOfStreamEventHandle(ref this, out phEOS);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, out MMSSF_GET_INFORMATION_FLAGS pdwFlags, out STREAM_TYPE pStreamType) GetInformation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, ref Guid idPurpose, out IMediaStream* ppMediaStream) GetMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, int32 Index, out IMediaStream* ppMediaStream) EnumMediaStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, out STREAM_STATE pCurrentState) GetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, STREAM_STATE NewState) SetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, out int64 pCurrentTime) GetTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, out int64 pDuration) GetDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, int64 SeekTime) Seek;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMultiMediaStream self, out HANDLE phEOS) GetEndOfStreamEventHandle;
			}
		}
		[CRepr]
		public struct IMediaStream : IUnknown
		{
			public const new Guid IID = .(0xb502d1bd, 0x9a57, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetMultiMediaStream(out IMultiMediaStream* ppMultiMediaStream) mut => VT.GetMultiMediaStream(ref this, out ppMultiMediaStream);
			public HRESULT GetInformation(out Guid pPurposeId, out STREAM_TYPE pType) mut => VT.GetInformation(ref this, out pPurposeId, out pType);
			public HRESULT SetSameFormat(ref IMediaStream pStreamThatHasDesiredFormat, uint32 dwFlags) mut => VT.SetSameFormat(ref this, ref pStreamThatHasDesiredFormat, dwFlags);
			public HRESULT AllocateSample(uint32 dwFlags, out IStreamSample* ppSample) mut => VT.AllocateSample(ref this, dwFlags, out ppSample);
			public HRESULT CreateSharedSample(ref IStreamSample pExistingSample, uint32 dwFlags, out IStreamSample* ppNewSample) mut => VT.CreateSharedSample(ref this, ref pExistingSample, dwFlags, out ppNewSample);
			public HRESULT SendEndOfStream(uint32 dwFlags) mut => VT.SendEndOfStream(ref this, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStream self, out IMultiMediaStream* ppMultiMediaStream) GetMultiMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStream self, out Guid pPurposeId, out STREAM_TYPE pType) GetInformation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStream self, ref IMediaStream pStreamThatHasDesiredFormat, uint32 dwFlags) SetSameFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStream self, uint32 dwFlags, out IStreamSample* ppSample) AllocateSample;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStream self, ref IStreamSample pExistingSample, uint32 dwFlags, out IStreamSample* ppNewSample) CreateSharedSample;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStream self, uint32 dwFlags) SendEndOfStream;
			}
		}
		[CRepr]
		public struct IStreamSample : IUnknown
		{
			public const new Guid IID = .(0xb502d1be, 0x9a57, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetMediaStream(ref IMediaStream* ppMediaStream) mut => VT.GetMediaStream(ref this, ref ppMediaStream);
			public HRESULT GetSampleTimes(out int64 pStartTime, out int64 pEndTime, out int64 pCurrentTime) mut => VT.GetSampleTimes(ref this, out pStartTime, out pEndTime, out pCurrentTime);
			public HRESULT SetSampleTimes(in int64 pStartTime, in int64 pEndTime) mut => VT.SetSampleTimes(ref this, pStartTime, pEndTime);
			public HRESULT Update(uint32 dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, uint dwAPCData) mut => VT.Update(ref this, dwFlags, hEvent, pfnAPC, dwAPCData);
			public HRESULT CompletionStatus(uint32 dwFlags, uint32 dwMilliseconds) mut => VT.CompletionStatus(ref this, dwFlags, dwMilliseconds);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamSample self, ref IMediaStream* ppMediaStream) GetMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamSample self, out int64 pStartTime, out int64 pEndTime, out int64 pCurrentTime) GetSampleTimes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamSample self, in int64 pStartTime, in int64 pEndTime) SetSampleTimes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamSample self, uint32 dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, uint dwAPCData) Update;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamSample self, uint32 dwFlags, uint32 dwMilliseconds) CompletionStatus;
			}
		}
		[CRepr]
		public struct IDirectDrawMediaStream : IMediaStream
		{
			public const new Guid IID = .(0xf4104fce, 0x9a70, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFormat(out DDSURFACEDESC pDDSDCurrent, out IDirectDrawPalette* ppDirectDrawPalette, out DDSURFACEDESC pDDSDDesired, out uint32 pdwFlags) mut => VT.GetFormat(ref this, out pDDSDCurrent, out ppDirectDrawPalette, out pDDSDDesired, out pdwFlags);
			public HRESULT SetFormat(in DDSURFACEDESC pDDSurfaceDesc, ref IDirectDrawPalette pDirectDrawPalette) mut => VT.SetFormat(ref this, pDDSurfaceDesc, ref pDirectDrawPalette);
			public HRESULT GetDirectDraw(out IDirectDraw* ppDirectDraw) mut => VT.GetDirectDraw(ref this, out ppDirectDraw);
			public HRESULT SetDirectDraw(ref IDirectDraw pDirectDraw) mut => VT.SetDirectDraw(ref this, ref pDirectDraw);
			public HRESULT CreateSample(ref IDirectDrawSurface pSurface, in RECT pRect, uint32 dwFlags, out IDirectDrawStreamSample* ppSample) mut => VT.CreateSample(ref this, ref pSurface, pRect, dwFlags, out ppSample);
			public HRESULT GetTimePerFrame(out int64 pFrameTime) mut => VT.GetTimePerFrame(ref this, out pFrameTime);

			[CRepr]
			public struct VTable : IMediaStream.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaStream self, out DDSURFACEDESC pDDSDCurrent, out IDirectDrawPalette* ppDirectDrawPalette, out DDSURFACEDESC pDDSDDesired, out uint32 pdwFlags) GetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaStream self, in DDSURFACEDESC pDDSurfaceDesc, ref IDirectDrawPalette pDirectDrawPalette) SetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaStream self, out IDirectDraw* ppDirectDraw) GetDirectDraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaStream self, ref IDirectDraw pDirectDraw) SetDirectDraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaStream self, ref IDirectDrawSurface pSurface, in RECT pRect, uint32 dwFlags, out IDirectDrawStreamSample* ppSample) CreateSample;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaStream self, out int64 pFrameTime) GetTimePerFrame;
			}
		}
		[CRepr]
		public struct IDirectDrawStreamSample : IStreamSample
		{
			public const new Guid IID = .(0xf4104fcf, 0x9a70, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSurface(out IDirectDrawSurface* ppDirectDrawSurface, out RECT pRect) mut => VT.GetSurface(ref this, out ppDirectDrawSurface, out pRect);
			public HRESULT SetRect(in RECT pRect) mut => VT.SetRect(ref this, pRect);

			[CRepr]
			public struct VTable : IStreamSample.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawStreamSample self, out IDirectDrawSurface* ppDirectDrawSurface, out RECT pRect) GetSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawStreamSample self, in RECT pRect) SetRect;
			}
		}
		[CRepr]
		public struct IAudioMediaStream : IMediaStream
		{
			public const new Guid IID = .(0xf7537560, 0xa3be, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFormat(out WAVEFORMATEX pWaveFormatCurrent) mut => VT.GetFormat(ref this, out pWaveFormatCurrent);
			public HRESULT SetFormat(in WAVEFORMATEX lpWaveFormat) mut => VT.SetFormat(ref this, lpWaveFormat);
			public HRESULT CreateSample(ref IAudioData pAudioData, uint32 dwFlags, out IAudioStreamSample* ppSample) mut => VT.CreateSample(ref this, ref pAudioData, dwFlags, out ppSample);

			[CRepr]
			public struct VTable : IMediaStream.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioMediaStream self, out WAVEFORMATEX pWaveFormatCurrent) GetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioMediaStream self, in WAVEFORMATEX lpWaveFormat) SetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioMediaStream self, ref IAudioData pAudioData, uint32 dwFlags, out IAudioStreamSample* ppSample) CreateSample;
			}
		}
		[CRepr]
		public struct IAudioStreamSample : IStreamSample
		{
			public const new Guid IID = .(0x345fee00, 0xaba5, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetAudioData(out IAudioData* ppAudio) mut => VT.GetAudioData(ref this, out ppAudio);

			[CRepr]
			public struct VTable : IStreamSample.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioStreamSample self, out IAudioData* ppAudio) GetAudioData;
			}
		}
		[CRepr]
		public struct IMemoryData : IUnknown
		{
			public const new Guid IID = .(0x327fc560, 0xaf60, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetBuffer(uint32 cbSize, ref uint8 pbData, uint32 dwFlags) mut => VT.SetBuffer(ref this, cbSize, ref pbData, dwFlags);
			public HRESULT GetInfo(out uint32 pdwLength, out uint8* ppbData, out uint32 pcbActualData) mut => VT.GetInfo(ref this, out pdwLength, out ppbData, out pcbActualData);
			public HRESULT SetActual(uint32 cbDataValid) mut => VT.SetActual(ref this, cbDataValid);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemoryData self, uint32 cbSize, ref uint8 pbData, uint32 dwFlags) SetBuffer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemoryData self, out uint32 pdwLength, out uint8* ppbData, out uint32 pcbActualData) GetInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMemoryData self, uint32 cbDataValid) SetActual;
			}
		}
		[CRepr]
		public struct IAudioData : IMemoryData
		{
			public const new Guid IID = .(0x54c719c0, 0xaf60, 0x11d0, 0x82, 0x12, 0x00, 0xc0, 0x4f, 0xc3, 0x2c, 0x45);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFormat(out WAVEFORMATEX pWaveFormatCurrent) mut => VT.GetFormat(ref this, out pWaveFormatCurrent);
			public HRESULT SetFormat(in WAVEFORMATEX lpWaveFormat) mut => VT.SetFormat(ref this, lpWaveFormat);

			[CRepr]
			public struct VTable : IMemoryData.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioData self, out WAVEFORMATEX pWaveFormatCurrent) GetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioData self, in WAVEFORMATEX lpWaveFormat) SetFormat;
			}
		}
		[CRepr]
		public struct IAMMultiMediaStream : IMultiMediaStream
		{
			public const new Guid IID = .(0xbebe595c, 0x9a6f, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(STREAM_TYPE StreamType, AMMSF_MMS_INIT_FLAGS dwFlags, ref IGraphBuilder pFilterGraph) mut => VT.Initialize(ref this, StreamType, dwFlags, ref pFilterGraph);
			public HRESULT GetFilterGraph(out IGraphBuilder* ppGraphBuilder) mut => VT.GetFilterGraph(ref this, out ppGraphBuilder);
			public HRESULT GetFilter(out IMediaStreamFilter* ppFilter) mut => VT.GetFilter(ref this, out ppFilter);
			public HRESULT AddMediaStream(ref IUnknown pStreamObject, in Guid PurposeId, AMMSF_MS_FLAGS dwFlags, out IMediaStream* ppNewStream) mut => VT.AddMediaStream(ref this, ref pStreamObject, PurposeId, dwFlags, out ppNewStream);
			public HRESULT OpenFile(PWSTR pszFileName, uint32 dwFlags) mut => VT.OpenFile(ref this, pszFileName, dwFlags);
			public HRESULT OpenMoniker(ref IBindCtx pCtx, ref IMoniker pMoniker, uint32 dwFlags) mut => VT.OpenMoniker(ref this, ref pCtx, ref pMoniker, dwFlags);
			public HRESULT Render(uint32 dwFlags) mut => VT.Render(ref this, dwFlags);

			[CRepr]
			public struct VTable : IMultiMediaStream.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, STREAM_TYPE StreamType, AMMSF_MMS_INIT_FLAGS dwFlags, ref IGraphBuilder pFilterGraph) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, out IGraphBuilder* ppGraphBuilder) GetFilterGraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, out IMediaStreamFilter* ppFilter) GetFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, ref IUnknown pStreamObject, in Guid PurposeId, AMMSF_MS_FLAGS dwFlags, out IMediaStream* ppNewStream) AddMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, PWSTR pszFileName, uint32 dwFlags) OpenFile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, ref IBindCtx pCtx, ref IMoniker pMoniker, uint32 dwFlags) OpenMoniker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMultiMediaStream self, uint32 dwFlags) Render;
			}
		}
		[CRepr]
		public struct IAMMediaStream : IMediaStream
		{
			public const new Guid IID = .(0xbebe595d, 0x9a6f, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref IUnknown pSourceObject, uint32 dwFlags, ref Guid PurposeId, STREAM_TYPE StreamType) mut => VT.Initialize(ref this, ref pSourceObject, dwFlags, ref PurposeId, StreamType);
			public HRESULT SetState(FILTER_STATE State) mut => VT.SetState(ref this, State);
			public HRESULT JoinAMMultiMediaStream(ref IAMMultiMediaStream pAMMultiMediaStream) mut => VT.JoinAMMultiMediaStream(ref this, ref pAMMultiMediaStream);
			public HRESULT JoinFilter(ref IMediaStreamFilter pMediaStreamFilter) mut => VT.JoinFilter(ref this, ref pMediaStreamFilter);
			public HRESULT JoinFilterGraph(ref IFilterGraph pFilterGraph) mut => VT.JoinFilterGraph(ref this, ref pFilterGraph);

			[CRepr]
			public struct VTable : IMediaStream.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaStream self, ref IUnknown pSourceObject, uint32 dwFlags, ref Guid PurposeId, STREAM_TYPE StreamType) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaStream self, FILTER_STATE State) SetState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaStream self, ref IAMMultiMediaStream pAMMultiMediaStream) JoinAMMultiMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaStream self, ref IMediaStreamFilter pMediaStreamFilter) JoinFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaStream self, ref IFilterGraph pFilterGraph) JoinFilterGraph;
			}
		}
		[CRepr]
		public struct IMediaStreamFilter : IBaseFilter
		{
			public const new Guid IID = .(0xbebe595e, 0x9a6f, 0x11d0, 0x8f, 0xde, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddMediaStream(ref IAMMediaStream pAMMediaStream) mut => VT.AddMediaStream(ref this, ref pAMMediaStream);
			public HRESULT GetMediaStream(ref Guid idPurpose, out IMediaStream* ppMediaStream) mut => VT.GetMediaStream(ref this, ref idPurpose, out ppMediaStream);
			public HRESULT EnumMediaStreams(int32 Index, out IMediaStream* ppMediaStream) mut => VT.EnumMediaStreams(ref this, Index, out ppMediaStream);
			public HRESULT SupportSeeking(BOOL bRenderer) mut => VT.SupportSeeking(ref this, bRenderer);
			public HRESULT ReferenceTimeToStreamTime(out int64 pTime) mut => VT.ReferenceTimeToStreamTime(ref this, out pTime);
			public HRESULT GetCurrentStreamTime(out int64 pCurrentStreamTime) mut => VT.GetCurrentStreamTime(ref this, out pCurrentStreamTime);
			public HRESULT WaitUntil(int64 WaitStreamTime) mut => VT.WaitUntil(ref this, WaitStreamTime);
			public HRESULT Flush(BOOL bCancelEOS) mut => VT.Flush(ref this, bCancelEOS);
			public HRESULT EndOfStream() mut => VT.EndOfStream(ref this);

			[CRepr]
			public struct VTable : IBaseFilter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, ref IAMMediaStream pAMMediaStream) AddMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, ref Guid idPurpose, out IMediaStream* ppMediaStream) GetMediaStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, int32 Index, out IMediaStream* ppMediaStream) EnumMediaStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, BOOL bRenderer) SupportSeeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, out int64 pTime) ReferenceTimeToStreamTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, out int64 pCurrentStreamTime) GetCurrentStreamTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, int64 WaitStreamTime) WaitUntil;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self, BOOL bCancelEOS) Flush;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaStreamFilter self) EndOfStream;
			}
		}
		[CRepr]
		public struct IDirectDrawMediaSampleAllocator : IUnknown
		{
			public const new Guid IID = .(0xab6b4afc, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDirectDraw(out IDirectDraw* ppDirectDraw) mut => VT.GetDirectDraw(ref this, out ppDirectDraw);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaSampleAllocator self, out IDirectDraw* ppDirectDraw) GetDirectDraw;
			}
		}
		[CRepr]
		public struct IDirectDrawMediaSample : IUnknown
		{
			public const new Guid IID = .(0xab6b4afe, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSurfaceAndReleaseLock(out IDirectDrawSurface* ppDirectDrawSurface, out RECT pRect) mut => VT.GetSurfaceAndReleaseLock(ref this, out ppDirectDrawSurface, out pRect);
			public HRESULT LockMediaSamplePointer() mut => VT.LockMediaSamplePointer(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaSample self, out IDirectDrawSurface* ppDirectDrawSurface, out RECT pRect) GetSurfaceAndReleaseLock;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawMediaSample self) LockMediaSamplePointer;
			}
		}
		[CRepr]
		public struct IAMMediaTypeStream : IMediaStream
		{
			public const new Guid IID = .(0xab6b4afa, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFormat(out AM_MEDIA_TYPE pMediaType, uint32 dwFlags) mut => VT.GetFormat(ref this, out pMediaType, dwFlags);
			public HRESULT SetFormat(ref AM_MEDIA_TYPE pMediaType, uint32 dwFlags) mut => VT.SetFormat(ref this, ref pMediaType, dwFlags);
			public HRESULT CreateSample(int32 lSampleSize, ref uint8 pbBuffer, uint32 dwFlags, ref IUnknown pUnkOuter, out IAMMediaTypeSample* ppAMMediaTypeSample) mut => VT.CreateSample(ref this, lSampleSize, ref pbBuffer, dwFlags, ref pUnkOuter, out ppAMMediaTypeSample);
			public HRESULT GetStreamAllocatorRequirements(out ALLOCATOR_PROPERTIES pProps) mut => VT.GetStreamAllocatorRequirements(ref this, out pProps);
			public HRESULT SetStreamAllocatorRequirements(ref ALLOCATOR_PROPERTIES pProps) mut => VT.SetStreamAllocatorRequirements(ref this, ref pProps);

			[CRepr]
			public struct VTable : IMediaStream.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeStream self, out AM_MEDIA_TYPE pMediaType, uint32 dwFlags) GetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeStream self, ref AM_MEDIA_TYPE pMediaType, uint32 dwFlags) SetFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeStream self, int32 lSampleSize, ref uint8 pbBuffer, uint32 dwFlags, ref IUnknown pUnkOuter, out IAMMediaTypeSample* ppAMMediaTypeSample) CreateSample;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeStream self, out ALLOCATOR_PROPERTIES pProps) GetStreamAllocatorRequirements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeStream self, ref ALLOCATOR_PROPERTIES pProps) SetStreamAllocatorRequirements;
			}
		}
		[CRepr]
		public struct IAMMediaTypeSample : IStreamSample
		{
			public const new Guid IID = .(0xab6b4afb, 0xf6e4, 0x11d0, 0x90, 0x0d, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0x9d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetPointer(uint8* pBuffer, int32 lSize) mut => VT.SetPointer(ref this, pBuffer, lSize);
			public HRESULT GetPointer(out uint8* ppBuffer) mut => VT.GetPointer(ref this, out ppBuffer);
			public int32 GetSize() mut => VT.GetSize(ref this);
			public HRESULT GetTime(out int64 pTimeStart, out int64 pTimeEnd) mut => VT.GetTime(ref this, out pTimeStart, out pTimeEnd);
			public HRESULT SetTime(ref int64 pTimeStart, ref int64 pTimeEnd) mut => VT.SetTime(ref this, ref pTimeStart, ref pTimeEnd);
			public HRESULT IsSyncPoint() mut => VT.IsSyncPoint(ref this);
			public HRESULT SetSyncPoint(BOOL bIsSyncPoint) mut => VT.SetSyncPoint(ref this, bIsSyncPoint);
			public HRESULT IsPreroll() mut => VT.IsPreroll(ref this);
			public HRESULT SetPreroll(BOOL bIsPreroll) mut => VT.SetPreroll(ref this, bIsPreroll);
			public int32 GetActualDataLength() mut => VT.GetActualDataLength(ref this);
			public HRESULT SetActualDataLength(int32 __MIDL__IAMMediaTypeSample0000) mut => VT.SetActualDataLength(ref this, __MIDL__IAMMediaTypeSample0000);
			public HRESULT GetMediaType(out AM_MEDIA_TYPE* ppMediaType) mut => VT.GetMediaType(ref this, out ppMediaType);
			public HRESULT SetMediaType(ref AM_MEDIA_TYPE pMediaType) mut => VT.SetMediaType(ref this, ref pMediaType);
			public HRESULT IsDiscontinuity() mut => VT.IsDiscontinuity(ref this);
			public HRESULT SetDiscontinuity(BOOL bDiscontinuity) mut => VT.SetDiscontinuity(ref this, bDiscontinuity);
			public HRESULT GetMediaTime(out int64 pTimeStart, out int64 pTimeEnd) mut => VT.GetMediaTime(ref this, out pTimeStart, out pTimeEnd);
			public HRESULT SetMediaTime(ref int64 pTimeStart, ref int64 pTimeEnd) mut => VT.SetMediaTime(ref this, ref pTimeStart, ref pTimeEnd);

			[CRepr]
			public struct VTable : IStreamSample.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, uint8* pBuffer, int32 lSize) SetPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, out uint8* ppBuffer) GetPointer;
				public new function [CallingConvention(.Stdcall)] int32(ref IAMMediaTypeSample self) GetSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, out int64 pTimeStart, out int64 pTimeEnd) GetTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, ref int64 pTimeStart, ref int64 pTimeEnd) SetTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self) IsSyncPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, BOOL bIsSyncPoint) SetSyncPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self) IsPreroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, BOOL bIsPreroll) SetPreroll;
				public new function [CallingConvention(.Stdcall)] int32(ref IAMMediaTypeSample self) GetActualDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, int32 __MIDL__IAMMediaTypeSample0000) SetActualDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, out AM_MEDIA_TYPE* ppMediaType) GetMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, ref AM_MEDIA_TYPE pMediaType) SetMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self) IsDiscontinuity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, BOOL bDiscontinuity) SetDiscontinuity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, out int64 pTimeStart, out int64 pTimeEnd) GetMediaTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMMediaTypeSample self, ref int64 pTimeStart, ref int64 pTimeEnd) SetMediaTime;
			}
		}
		[CRepr]
		public struct IDirectDrawVideo : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSwitches(out uint32 pSwitches) mut => VT.GetSwitches(ref this, out pSwitches);
			public HRESULT SetSwitches(uint32 Switches) mut => VT.SetSwitches(ref this, Switches);
			public HRESULT GetCaps(out DDCAPS_DX7 pCaps) mut => VT.GetCaps(ref this, out pCaps);
			public HRESULT GetEmulatedCaps(out DDCAPS_DX7 pCaps) mut => VT.GetEmulatedCaps(ref this, out pCaps);
			public HRESULT GetSurfaceDesc(out DDSURFACEDESC pSurfaceDesc) mut => VT.GetSurfaceDesc(ref this, out pSurfaceDesc);
			public HRESULT GetFourCCCodes(out uint32 pCount, out uint32 pCodes) mut => VT.GetFourCCCodes(ref this, out pCount, out pCodes);
			public HRESULT SetDirectDraw(ref IDirectDraw pDirectDraw) mut => VT.SetDirectDraw(ref this, ref pDirectDraw);
			public HRESULT GetDirectDraw(out IDirectDraw* ppDirectDraw) mut => VT.GetDirectDraw(ref this, out ppDirectDraw);
			public HRESULT GetSurfaceType(out uint32 pSurfaceType) mut => VT.GetSurfaceType(ref this, out pSurfaceType);
			public HRESULT SetDefault() mut => VT.SetDefault(ref this);
			public HRESULT UseScanLine(int32 UseScanLine) mut => VT.UseScanLine(ref this, UseScanLine);
			public HRESULT CanUseScanLine(out int32 UseScanLine) mut => VT.CanUseScanLine(ref this, out UseScanLine);
			public HRESULT UseOverlayStretch(int32 UseOverlayStretch) mut => VT.UseOverlayStretch(ref this, UseOverlayStretch);
			public HRESULT CanUseOverlayStretch(out int32 UseOverlayStretch) mut => VT.CanUseOverlayStretch(ref this, out UseOverlayStretch);
			public HRESULT UseWhenFullScreen(int32 UseWhenFullScreen) mut => VT.UseWhenFullScreen(ref this, UseWhenFullScreen);
			public HRESULT WillUseFullScreen(out int32 UseWhenFullScreen) mut => VT.WillUseFullScreen(ref this, out UseWhenFullScreen);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out uint32 pSwitches) GetSwitches;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, uint32 Switches) SetSwitches;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out DDCAPS_DX7 pCaps) GetCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out DDCAPS_DX7 pCaps) GetEmulatedCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out DDSURFACEDESC pSurfaceDesc) GetSurfaceDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out uint32 pCount, out uint32 pCodes) GetFourCCCodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, ref IDirectDraw pDirectDraw) SetDirectDraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out IDirectDraw* ppDirectDraw) GetDirectDraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out uint32 pSurfaceType) GetSurfaceType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self) SetDefault;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, int32 UseScanLine) UseScanLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out int32 UseScanLine) CanUseScanLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, int32 UseOverlayStretch) UseOverlayStretch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out int32 UseOverlayStretch) CanUseOverlayStretch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, int32 UseWhenFullScreen) UseWhenFullScreen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDirectDrawVideo self, out int32 UseWhenFullScreen) WillUseFullScreen;
			}
		}
		[CRepr]
		public struct IQualProp : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_FramesDroppedInRenderer(out int32 pcFrames) mut => VT.get_FramesDroppedInRenderer(ref this, out pcFrames);
			public HRESULT get_FramesDrawn(out int32 pcFramesDrawn) mut => VT.get_FramesDrawn(ref this, out pcFramesDrawn);
			public HRESULT get_AvgFrameRate(out int32 piAvgFrameRate) mut => VT.get_AvgFrameRate(ref this, out piAvgFrameRate);
			public HRESULT get_Jitter(out int32 iJitter) mut => VT.get_Jitter(ref this, out iJitter);
			public HRESULT get_AvgSyncOffset(out int32 piAvg) mut => VT.get_AvgSyncOffset(ref this, out piAvg);
			public HRESULT get_DevSyncOffset(out int32 piDev) mut => VT.get_DevSyncOffset(ref this, out piDev);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualProp self, out int32 pcFrames) get_FramesDroppedInRenderer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualProp self, out int32 pcFramesDrawn) get_FramesDrawn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualProp self, out int32 piAvgFrameRate) get_AvgFrameRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualProp self, out int32 iJitter) get_Jitter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualProp self, out int32 piAvg) get_AvgSyncOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IQualProp self, out int32 piDev) get_DevSyncOffset;
			}
		}
		[CRepr]
		public struct IFullScreenVideo : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CountModes(out int32 pModes) mut => VT.CountModes(ref this, out pModes);
			public HRESULT GetModeInfo(int32 Mode, out int32 pWidth, out int32 pHeight, out int32 pDepth) mut => VT.GetModeInfo(ref this, Mode, out pWidth, out pHeight, out pDepth);
			public HRESULT GetCurrentMode(out int32 pMode) mut => VT.GetCurrentMode(ref this, out pMode);
			public HRESULT IsModeAvailable(int32 Mode) mut => VT.IsModeAvailable(ref this, Mode);
			public HRESULT IsModeEnabled(int32 Mode) mut => VT.IsModeEnabled(ref this, Mode);
			public HRESULT SetEnabled(int32 Mode, int32 bEnabled) mut => VT.SetEnabled(ref this, Mode, bEnabled);
			public HRESULT GetClipFactor(out int32 pClipFactor) mut => VT.GetClipFactor(ref this, out pClipFactor);
			public HRESULT SetClipFactor(int32 ClipFactor) mut => VT.SetClipFactor(ref this, ClipFactor);
			public HRESULT SetMessageDrain(HWND hwnd) mut => VT.SetMessageDrain(ref this, hwnd);
			public HRESULT GetMessageDrain(out HWND hwnd) mut => VT.GetMessageDrain(ref this, out hwnd);
			public HRESULT SetMonitor(int32 Monitor) mut => VT.SetMonitor(ref this, Monitor);
			public HRESULT GetMonitor(out int32 Monitor) mut => VT.GetMonitor(ref this, out Monitor);
			public HRESULT HideOnDeactivate(int32 Hide) mut => VT.HideOnDeactivate(ref this, Hide);
			public HRESULT IsHideOnDeactivate() mut => VT.IsHideOnDeactivate(ref this);
			public HRESULT SetCaption(BSTR strCaption) mut => VT.SetCaption(ref this, strCaption);
			public HRESULT GetCaption(out BSTR pstrCaption) mut => VT.GetCaption(ref this, out pstrCaption);
			public HRESULT SetDefault() mut => VT.SetDefault(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, out int32 pModes) CountModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 Mode, out int32 pWidth, out int32 pHeight, out int32 pDepth) GetModeInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, out int32 pMode) GetCurrentMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 Mode) IsModeAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 Mode) IsModeEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 Mode, int32 bEnabled) SetEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, out int32 pClipFactor) GetClipFactor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 ClipFactor) SetClipFactor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, HWND hwnd) SetMessageDrain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, out HWND hwnd) GetMessageDrain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 Monitor) SetMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, out int32 Monitor) GetMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, int32 Hide) HideOnDeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self) IsHideOnDeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, BSTR strCaption) SetCaption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self, out BSTR pstrCaption) GetCaption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideo self) SetDefault;
			}
		}
		[CRepr]
		public struct IFullScreenVideoEx : IFullScreenVideo
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAcceleratorTable(HWND hwnd, HACCEL hAccel) mut => VT.SetAcceleratorTable(ref this, hwnd, hAccel);
			public HRESULT GetAcceleratorTable(out HWND phwnd, out HACCEL phAccel) mut => VT.GetAcceleratorTable(ref this, out phwnd, out phAccel);
			public HRESULT KeepPixelAspectRatio(int32 KeepAspect) mut => VT.KeepPixelAspectRatio(ref this, KeepAspect);
			public HRESULT IsKeepPixelAspectRatio(out int32 pKeepAspect) mut => VT.IsKeepPixelAspectRatio(ref this, out pKeepAspect);

			[CRepr]
			public struct VTable : IFullScreenVideo.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideoEx self, HWND hwnd, HACCEL hAccel) SetAcceleratorTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideoEx self, out HWND phwnd, out HACCEL phAccel) GetAcceleratorTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideoEx self, int32 KeepAspect) KeepPixelAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFullScreenVideoEx self, out int32 pKeepAspect) IsKeepPixelAspectRatio;
			}
		}
		[CRepr]
		public struct IBaseVideoMixer : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetLeadPin(int32 iPin) mut => VT.SetLeadPin(ref this, iPin);
			public HRESULT GetLeadPin(out int32 piPin) mut => VT.GetLeadPin(ref this, out piPin);
			public HRESULT GetInputPinCount(out int32 piPinCount) mut => VT.GetInputPinCount(ref this, out piPinCount);
			public HRESULT IsUsingClock(out int32 pbValue) mut => VT.IsUsingClock(ref this, out pbValue);
			public HRESULT SetUsingClock(int32 bValue) mut => VT.SetUsingClock(ref this, bValue);
			public HRESULT GetClockPeriod(out int32 pbValue) mut => VT.GetClockPeriod(ref this, out pbValue);
			public HRESULT SetClockPeriod(int32 bValue) mut => VT.SetClockPeriod(ref this, bValue);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, int32 iPin) SetLeadPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, out int32 piPin) GetLeadPin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, out int32 piPinCount) GetInputPinCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, out int32 pbValue) IsUsingClock;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, int32 bValue) SetUsingClock;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, out int32 pbValue) GetClockPeriod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBaseVideoMixer self, int32 bValue) SetClockPeriod;
			}
		}
		[CRepr]
		public struct IDMOWrapperFilter : IUnknown
		{
			public const new Guid IID = .(0x52d6f586, 0x9f0f, 0x4824, 0x8f, 0xc8, 0xe3, 0x2c, 0xa0, 0x49, 0x30, 0xc2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Init(in Guid clsidDMO, in Guid catDMO) mut => VT.Init(ref this, clsidDMO, catDMO);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDMOWrapperFilter self, in Guid clsidDMO, in Guid catDMO) Init;
			}
		}
		[CRepr]
		public struct IMixerOCXNotify : IUnknown
		{
			public const new Guid IID = .(0x81a3bd31, 0xdee1, 0x11d1, 0x85, 0x08, 0x00, 0xa0, 0xc9, 0x1f, 0x9c, 0xa0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnInvalidateRect(ref RECT lpcRect) mut => VT.OnInvalidateRect(ref this, ref lpcRect);
			public HRESULT OnStatusChange(uint32 ulStatusFlags) mut => VT.OnStatusChange(ref this, ulStatusFlags);
			public HRESULT OnDataChange(uint32 ulDataFlags) mut => VT.OnDataChange(ref this, ulDataFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCXNotify self, ref RECT lpcRect) OnInvalidateRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCXNotify self, uint32 ulStatusFlags) OnStatusChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCXNotify self, uint32 ulDataFlags) OnDataChange;
			}
		}
		[CRepr]
		public struct IMixerOCX : IUnknown
		{
			public const new Guid IID = .(0x81a3bd32, 0xdee1, 0x11d1, 0x85, 0x08, 0x00, 0xa0, 0xc9, 0x1f, 0x9c, 0xa0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnDisplayChange(uint32 ulBitsPerPixel, uint32 ulScreenWidth, uint32 ulScreenHeight) mut => VT.OnDisplayChange(ref this, ulBitsPerPixel, ulScreenWidth, ulScreenHeight);
			public HRESULT GetAspectRatio(out uint32 pdwPictAspectRatioX, out uint32 pdwPictAspectRatioY) mut => VT.GetAspectRatio(ref this, out pdwPictAspectRatioX, out pdwPictAspectRatioY);
			public HRESULT GetVideoSize(out uint32 pdwVideoWidth, out uint32 pdwVideoHeight) mut => VT.GetVideoSize(ref this, out pdwVideoWidth, out pdwVideoHeight);
			public HRESULT GetStatus(out uint32* pdwStatus) mut => VT.GetStatus(ref this, out pdwStatus);
			public HRESULT OnDraw(HDC hdcDraw, ref RECT prcDraw) mut => VT.OnDraw(ref this, hdcDraw, ref prcDraw);
			public HRESULT SetDrawRegion(ref POINT lpptTopLeftSC, ref RECT prcDrawCC, ref RECT lprcClip) mut => VT.SetDrawRegion(ref this, ref lpptTopLeftSC, ref prcDrawCC, ref lprcClip);
			public HRESULT Advise(ref IMixerOCXNotify pmdns) mut => VT.Advise(ref this, ref pmdns);
			public HRESULT UnAdvise() mut => VT.UnAdvise(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, uint32 ulBitsPerPixel, uint32 ulScreenWidth, uint32 ulScreenHeight) OnDisplayChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, out uint32 pdwPictAspectRatioX, out uint32 pdwPictAspectRatioY) GetAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, out uint32 pdwVideoWidth, out uint32 pdwVideoHeight) GetVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, out uint32* pdwStatus) GetStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, HDC hdcDraw, ref RECT prcDraw) OnDraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, ref POINT lpptTopLeftSC, ref RECT prcDrawCC, ref RECT lprcClip) SetDrawRegion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self, ref IMixerOCXNotify pmdns) Advise;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerOCX self) UnAdvise;
			}
		}
		[CRepr]
		public struct IMixerPinConfig : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetRelativePosition(uint32 dwLeft, uint32 dwTop, uint32 dwRight, uint32 dwBottom) mut => VT.SetRelativePosition(ref this, dwLeft, dwTop, dwRight, dwBottom);
			public HRESULT GetRelativePosition(out uint32 pdwLeft, out uint32 pdwTop, out uint32 pdwRight, out uint32 pdwBottom) mut => VT.GetRelativePosition(ref this, out pdwLeft, out pdwTop, out pdwRight, out pdwBottom);
			public HRESULT SetZOrder(uint32 dwZOrder) mut => VT.SetZOrder(ref this, dwZOrder);
			public HRESULT GetZOrder(out uint32 pdwZOrder) mut => VT.GetZOrder(ref this, out pdwZOrder);
			public HRESULT SetColorKey(out COLORKEY pColorKey) mut => VT.SetColorKey(ref this, out pColorKey);
			public HRESULT GetColorKey(out COLORKEY pColorKey, out uint32 pColor) mut => VT.GetColorKey(ref this, out pColorKey, out pColor);
			public HRESULT SetBlendingParameter(uint32 dwBlendingParameter) mut => VT.SetBlendingParameter(ref this, dwBlendingParameter);
			public HRESULT GetBlendingParameter(out uint32 pdwBlendingParameter) mut => VT.GetBlendingParameter(ref this, out pdwBlendingParameter);
			public HRESULT SetAspectRatioMode(AM_ASPECT_RATIO_MODE amAspectRatioMode) mut => VT.SetAspectRatioMode(ref this, amAspectRatioMode);
			public HRESULT GetAspectRatioMode(out AM_ASPECT_RATIO_MODE pamAspectRatioMode) mut => VT.GetAspectRatioMode(ref this, out pamAspectRatioMode);
			public HRESULT SetStreamTransparent(BOOL bStreamTransparent) mut => VT.SetStreamTransparent(ref this, bStreamTransparent);
			public HRESULT GetStreamTransparent(out BOOL pbStreamTransparent) mut => VT.GetStreamTransparent(ref this, out pbStreamTransparent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, uint32 dwLeft, uint32 dwTop, uint32 dwRight, uint32 dwBottom) SetRelativePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out uint32 pdwLeft, out uint32 pdwTop, out uint32 pdwRight, out uint32 pdwBottom) GetRelativePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, uint32 dwZOrder) SetZOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out uint32 pdwZOrder) GetZOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out COLORKEY pColorKey) SetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out COLORKEY pColorKey, out uint32 pColor) GetColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, uint32 dwBlendingParameter) SetBlendingParameter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out uint32 pdwBlendingParameter) GetBlendingParameter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, AM_ASPECT_RATIO_MODE amAspectRatioMode) SetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out AM_ASPECT_RATIO_MODE pamAspectRatioMode) GetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, BOOL bStreamTransparent) SetStreamTransparent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig self, out BOOL pbStreamTransparent) GetStreamTransparent;
			}
		}
		[CRepr]
		public struct IMixerPinConfig2 : IMixerPinConfig
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetOverlaySurfaceColorControls(out DDCOLORCONTROL pColorControl) mut => VT.SetOverlaySurfaceColorControls(ref this, out pColorControl);
			public HRESULT GetOverlaySurfaceColorControls(out DDCOLORCONTROL pColorControl) mut => VT.GetOverlaySurfaceColorControls(ref this, out pColorControl);

			[CRepr]
			public struct VTable : IMixerPinConfig.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig2 self, out DDCOLORCONTROL pColorControl) SetOverlaySurfaceColorControls;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMixerPinConfig2 self, out DDCOLORCONTROL pColorControl) GetOverlaySurfaceColorControls;
			}
		}
		[CRepr]
		public struct IMpegAudioDecoder : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_FrequencyDivider(out uint32 pDivider) mut => VT.get_FrequencyDivider(ref this, out pDivider);
			public HRESULT put_FrequencyDivider(uint32 Divider) mut => VT.put_FrequencyDivider(ref this, Divider);
			public HRESULT get_DecoderAccuracy(out uint32 pAccuracy) mut => VT.get_DecoderAccuracy(ref this, out pAccuracy);
			public HRESULT put_DecoderAccuracy(uint32 Accuracy) mut => VT.put_DecoderAccuracy(ref this, Accuracy);
			public HRESULT get_Stereo(out uint32 pStereo) mut => VT.get_Stereo(ref this, out pStereo);
			public HRESULT put_Stereo(uint32 Stereo) mut => VT.put_Stereo(ref this, Stereo);
			public HRESULT get_DecoderWordSize(out uint32 pWordSize) mut => VT.get_DecoderWordSize(ref this, out pWordSize);
			public HRESULT put_DecoderWordSize(uint32 WordSize) mut => VT.put_DecoderWordSize(ref this, WordSize);
			public HRESULT get_IntegerDecode(out uint32 pIntDecode) mut => VT.get_IntegerDecode(ref this, out pIntDecode);
			public HRESULT put_IntegerDecode(uint32 IntDecode) mut => VT.put_IntegerDecode(ref this, IntDecode);
			public HRESULT get_DualMode(out uint32 pIntDecode) mut => VT.get_DualMode(ref this, out pIntDecode);
			public HRESULT put_DualMode(uint32 IntDecode) mut => VT.put_DualMode(ref this, IntDecode);
			public HRESULT get_AudioFormat(out MPEG1WAVEFORMAT lpFmt) mut => VT.get_AudioFormat(ref this, out lpFmt);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out uint32 pDivider) get_FrequencyDivider;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, uint32 Divider) put_FrequencyDivider;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out uint32 pAccuracy) get_DecoderAccuracy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, uint32 Accuracy) put_DecoderAccuracy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out uint32 pStereo) get_Stereo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, uint32 Stereo) put_Stereo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out uint32 pWordSize) get_DecoderWordSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, uint32 WordSize) put_DecoderWordSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out uint32 pIntDecode) get_IntegerDecode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, uint32 IntDecode) put_IntegerDecode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out uint32 pIntDecode) get_DualMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, uint32 IntDecode) put_DualMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpegAudioDecoder self, out MPEG1WAVEFORMAT lpFmt) get_AudioFormat;
			}
		}
		[CRepr]
		public struct IVMRImagePresenter9 : IUnknown
		{
			public const new Guid IID = .(0x69188c61, 0x12a3, 0x40f0, 0x8f, 0xfc, 0x34, 0x2e, 0x7b, 0x43, 0x3f, 0xd7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StartPresenting(uint dwUserID) mut => VT.StartPresenting(ref this, dwUserID);
			public HRESULT StopPresenting(uint dwUserID) mut => VT.StopPresenting(ref this, dwUserID);
			public HRESULT PresentImage(uint dwUserID, ref VMR9PresentationInfo lpPresInfo) mut => VT.PresentImage(ref this, dwUserID, ref lpPresInfo);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenter9 self, uint dwUserID) StartPresenting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenter9 self, uint dwUserID) StopPresenting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenter9 self, uint dwUserID, ref VMR9PresentationInfo lpPresInfo) PresentImage;
			}
		}
		[CRepr]
		public struct IVMRSurfaceAllocator9 : IUnknown
		{
			public const new Guid IID = .(0x8d5148ea, 0x3f5d, 0x46cf, 0x9d, 0xf1, 0xd1, 0xb8, 0x96, 0xee, 0xdb, 0x1f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InitializeDevice(uint dwUserID, ref VMR9AllocationInfo lpAllocInfo, out uint32 lpNumBuffers) mut => VT.InitializeDevice(ref this, dwUserID, ref lpAllocInfo, out lpNumBuffers);
			public HRESULT TerminateDevice(uint dwID) mut => VT.TerminateDevice(ref this, dwID);
			public HRESULT GetSurface(uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, out IDirect3DSurface9* lplpSurface) mut => VT.GetSurface(ref this, dwUserID, SurfaceIndex, SurfaceFlags, out lplpSurface);
			public HRESULT AdviseNotify(ref IVMRSurfaceAllocatorNotify9 lpIVMRSurfAllocNotify) mut => VT.AdviseNotify(ref this, ref lpIVMRSurfAllocNotify);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator9 self, uint dwUserID, ref VMR9AllocationInfo lpAllocInfo, out uint32 lpNumBuffers) InitializeDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator9 self, uint dwID) TerminateDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator9 self, uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, out IDirect3DSurface9* lplpSurface) GetSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocator9 self, ref IVMRSurfaceAllocatorNotify9 lpIVMRSurfAllocNotify) AdviseNotify;
			}
		}
		[CRepr]
		public struct IVMRSurfaceAllocatorEx9 : IVMRSurfaceAllocator9
		{
			public const new Guid IID = .(0x6de9a68a, 0xa928, 0x4522, 0xbf, 0x57, 0x65, 0x5a, 0xe3, 0x86, 0x64, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSurfaceEx(uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, out IDirect3DSurface9* lplpSurface, out RECT lprcDst) mut => VT.GetSurfaceEx(ref this, dwUserID, SurfaceIndex, SurfaceFlags, out lplpSurface, out lprcDst);

			[CRepr]
			public struct VTable : IVMRSurfaceAllocator9.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorEx9 self, uint dwUserID, uint32 SurfaceIndex, uint32 SurfaceFlags, out IDirect3DSurface9* lplpSurface, out RECT lprcDst) GetSurfaceEx;
			}
		}
		[CRepr]
		public struct IVMRSurfaceAllocatorNotify9 : IUnknown
		{
			public const new Guid IID = .(0xdca3f5df, 0xbb3a, 0x4d03, 0xbd, 0x81, 0x84, 0x61, 0x4b, 0xfb, 0xfa, 0x0c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AdviseSurfaceAllocator(uint dwUserID, ref IVMRSurfaceAllocator9 lpIVRMSurfaceAllocator) mut => VT.AdviseSurfaceAllocator(ref this, dwUserID, ref lpIVRMSurfaceAllocator);
			public HRESULT SetD3DDevice(ref IDirect3DDevice9 lpD3DDevice, HMONITOR hMonitor) mut => VT.SetD3DDevice(ref this, ref lpD3DDevice, hMonitor);
			public HRESULT ChangeD3DDevice(ref IDirect3DDevice9 lpD3DDevice, HMONITOR hMonitor) mut => VT.ChangeD3DDevice(ref this, ref lpD3DDevice, hMonitor);
			public HRESULT AllocateSurfaceHelper(ref VMR9AllocationInfo lpAllocInfo, out uint32 lpNumBuffers, out IDirect3DSurface9* lplpSurface) mut => VT.AllocateSurfaceHelper(ref this, ref lpAllocInfo, out lpNumBuffers, out lplpSurface);
			public HRESULT NotifyEvent(int32 EventCode, int Param1, int Param2) mut => VT.NotifyEvent(ref this, EventCode, Param1, Param2);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify9 self, uint dwUserID, ref IVMRSurfaceAllocator9 lpIVRMSurfaceAllocator) AdviseSurfaceAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify9 self, ref IDirect3DDevice9 lpD3DDevice, HMONITOR hMonitor) SetD3DDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify9 self, ref IDirect3DDevice9 lpD3DDevice, HMONITOR hMonitor) ChangeD3DDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify9 self, ref VMR9AllocationInfo lpAllocInfo, out uint32 lpNumBuffers, out IDirect3DSurface9* lplpSurface) AllocateSurfaceHelper;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurfaceAllocatorNotify9 self, int32 EventCode, int Param1, int Param2) NotifyEvent;
			}
		}
		[CRepr]
		public struct IVMRWindowlessControl9 : IUnknown
		{
			public const new Guid IID = .(0x8f537d09, 0xf85e, 0x4414, 0xb2, 0x3b, 0x50, 0x2e, 0x54, 0xc7, 0x99, 0x27);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNativeVideoSize(out int32 lpWidth, out int32 lpHeight, out int32 lpARWidth, out int32 lpARHeight) mut => VT.GetNativeVideoSize(ref this, out lpWidth, out lpHeight, out lpARWidth, out lpARHeight);
			public HRESULT GetMinIdealVideoSize(out int32 lpWidth, out int32 lpHeight) mut => VT.GetMinIdealVideoSize(ref this, out lpWidth, out lpHeight);
			public HRESULT GetMaxIdealVideoSize(out int32 lpWidth, out int32 lpHeight) mut => VT.GetMaxIdealVideoSize(ref this, out lpWidth, out lpHeight);
			public HRESULT SetVideoPosition(in RECT lpSRCRect, in RECT lpDSTRect) mut => VT.SetVideoPosition(ref this, lpSRCRect, lpDSTRect);
			public HRESULT GetVideoPosition(out RECT lpSRCRect, out RECT lpDSTRect) mut => VT.GetVideoPosition(ref this, out lpSRCRect, out lpDSTRect);
			public HRESULT GetAspectRatioMode(out uint32 lpAspectRatioMode) mut => VT.GetAspectRatioMode(ref this, out lpAspectRatioMode);
			public HRESULT SetAspectRatioMode(uint32 AspectRatioMode) mut => VT.SetAspectRatioMode(ref this, AspectRatioMode);
			public HRESULT SetVideoClippingWindow(HWND hwnd) mut => VT.SetVideoClippingWindow(ref this, hwnd);
			public HRESULT RepaintVideo(HWND hwnd, HDC hdc) mut => VT.RepaintVideo(ref this, hwnd, hdc);
			public HRESULT DisplayModeChanged() mut => VT.DisplayModeChanged(ref this);
			public HRESULT GetCurrentImage(out uint8* lpDib) mut => VT.GetCurrentImage(ref this, out lpDib);
			public HRESULT SetBorderColor(uint32 Clr) mut => VT.SetBorderColor(ref this, Clr);
			public HRESULT GetBorderColor(out uint32 lpClr) mut => VT.GetBorderColor(ref this, out lpClr);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out int32 lpWidth, out int32 lpHeight, out int32 lpARWidth, out int32 lpARHeight) GetNativeVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out int32 lpWidth, out int32 lpHeight) GetMinIdealVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out int32 lpWidth, out int32 lpHeight) GetMaxIdealVideoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, in RECT lpSRCRect, in RECT lpDSTRect) SetVideoPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out RECT lpSRCRect, out RECT lpDSTRect) GetVideoPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out uint32 lpAspectRatioMode) GetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, uint32 AspectRatioMode) SetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, HWND hwnd) SetVideoClippingWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, HWND hwnd, HDC hdc) RepaintVideo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self) DisplayModeChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out uint8* lpDib) GetCurrentImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, uint32 Clr) SetBorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRWindowlessControl9 self, out uint32 lpClr) GetBorderColor;
			}
		}
		[CRepr]
		public struct IVMRMixerControl9 : IUnknown
		{
			public const new Guid IID = .(0x1a777eaa, 0x47c8, 0x4930, 0xb2, 0xc9, 0x8f, 0xee, 0x1c, 0x1b, 0x0f, 0x3b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAlpha(uint32 dwStreamID, float Alpha) mut => VT.SetAlpha(ref this, dwStreamID, Alpha);
			public HRESULT GetAlpha(uint32 dwStreamID, out float pAlpha) mut => VT.GetAlpha(ref this, dwStreamID, out pAlpha);
			public HRESULT SetZOrder(uint32 dwStreamID, uint32 dwZ) mut => VT.SetZOrder(ref this, dwStreamID, dwZ);
			public HRESULT GetZOrder(uint32 dwStreamID, out uint32 pZ) mut => VT.GetZOrder(ref this, dwStreamID, out pZ);
			public HRESULT SetOutputRect(uint32 dwStreamID, in VMR9NormalizedRect pRect) mut => VT.SetOutputRect(ref this, dwStreamID, pRect);
			public HRESULT GetOutputRect(uint32 dwStreamID, out VMR9NormalizedRect pRect) mut => VT.GetOutputRect(ref this, dwStreamID, out pRect);
			public HRESULT SetBackgroundClr(uint32 ClrBkg) mut => VT.SetBackgroundClr(ref this, ClrBkg);
			public HRESULT GetBackgroundClr(ref uint32 lpClrBkg) mut => VT.GetBackgroundClr(ref this, ref lpClrBkg);
			public HRESULT SetMixingPrefs(uint32 dwMixerPrefs) mut => VT.SetMixingPrefs(ref this, dwMixerPrefs);
			public HRESULT GetMixingPrefs(out uint32 pdwMixerPrefs) mut => VT.GetMixingPrefs(ref this, out pdwMixerPrefs);
			public HRESULT SetProcAmpControl(uint32 dwStreamID, ref VMR9ProcAmpControl lpClrControl) mut => VT.SetProcAmpControl(ref this, dwStreamID, ref lpClrControl);
			public HRESULT GetProcAmpControl(uint32 dwStreamID, out VMR9ProcAmpControl lpClrControl) mut => VT.GetProcAmpControl(ref this, dwStreamID, out lpClrControl);
			public HRESULT GetProcAmpControlRange(uint32 dwStreamID, out VMR9ProcAmpControlRange lpClrControl) mut => VT.GetProcAmpControlRange(ref this, dwStreamID, out lpClrControl);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, float Alpha) SetAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, out float pAlpha) GetAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, uint32 dwZ) SetZOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, out uint32 pZ) GetZOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, in VMR9NormalizedRect pRect) SetOutputRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, out VMR9NormalizedRect pRect) GetOutputRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 ClrBkg) SetBackgroundClr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, ref uint32 lpClrBkg) GetBackgroundClr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwMixerPrefs) SetMixingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, out uint32 pdwMixerPrefs) GetMixingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, ref VMR9ProcAmpControl lpClrControl) SetProcAmpControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, out VMR9ProcAmpControl lpClrControl) GetProcAmpControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerControl9 self, uint32 dwStreamID, out VMR9ProcAmpControlRange lpClrControl) GetProcAmpControlRange;
			}
		}
		[CRepr]
		public struct IVMRMixerBitmap9 : IUnknown
		{
			public const new Guid IID = .(0xced175e5, 0x1935, 0x4820, 0x81, 0xbd, 0xff, 0x6a, 0xd0, 0x0c, 0x91, 0x08);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAlphaBitmap(in VMR9AlphaBitmap pBmpParms) mut => VT.SetAlphaBitmap(ref this, pBmpParms);
			public HRESULT UpdateAlphaBitmapParameters(in VMR9AlphaBitmap pBmpParms) mut => VT.UpdateAlphaBitmapParameters(ref this, pBmpParms);
			public HRESULT GetAlphaBitmapParameters(out VMR9AlphaBitmap pBmpParms) mut => VT.GetAlphaBitmapParameters(ref this, out pBmpParms);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerBitmap9 self, in VMR9AlphaBitmap pBmpParms) SetAlphaBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerBitmap9 self, in VMR9AlphaBitmap pBmpParms) UpdateAlphaBitmapParameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMixerBitmap9 self, out VMR9AlphaBitmap pBmpParms) GetAlphaBitmapParameters;
			}
		}
		[CRepr]
		public struct IVMRSurface9 : IUnknown
		{
			public const new Guid IID = .(0xdfc581a1, 0x6e1f, 0x4c3a, 0x8d, 0x0a, 0x5e, 0x97, 0x92, 0xea, 0x2a, 0xfc);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsSurfaceLocked() mut => VT.IsSurfaceLocked(ref this);
			public HRESULT LockSurface(out uint8* lpSurface) mut => VT.LockSurface(ref this, out lpSurface);
			public HRESULT UnlockSurface() mut => VT.UnlockSurface(ref this);
			public HRESULT GetSurface(out IDirect3DSurface9* lplpSurface) mut => VT.GetSurface(ref this, out lplpSurface);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface9 self) IsSurfaceLocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface9 self, out uint8* lpSurface) LockSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface9 self) UnlockSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRSurface9 self, out IDirect3DSurface9* lplpSurface) GetSurface;
			}
		}
		[CRepr]
		public struct IVMRImagePresenterConfig9 : IUnknown
		{
			public const new Guid IID = .(0x45c15cab, 0x6e22, 0x420a, 0x80, 0x43, 0xae, 0x1f, 0x0a, 0xc0, 0x2c, 0x7d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.SetRenderingPrefs(ref this, dwRenderFlags);
			public HRESULT GetRenderingPrefs(out uint32 dwRenderFlags) mut => VT.GetRenderingPrefs(ref this, out dwRenderFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenterConfig9 self, uint32 dwRenderFlags) SetRenderingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImagePresenterConfig9 self, out uint32 dwRenderFlags) GetRenderingPrefs;
			}
		}
		[CRepr]
		public struct IVMRVideoStreamControl9 : IUnknown
		{
			public const new Guid IID = .(0xd0cfe38b, 0x93e7, 0x4772, 0x89, 0x57, 0x04, 0x00, 0xc4, 0x9a, 0x44, 0x85);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetStreamActiveState(BOOL fActive) mut => VT.SetStreamActiveState(ref this, fActive);
			public HRESULT GetStreamActiveState(out BOOL lpfActive) mut => VT.GetStreamActiveState(ref this, out lpfActive);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRVideoStreamControl9 self, BOOL fActive) SetStreamActiveState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRVideoStreamControl9 self, out BOOL lpfActive) GetStreamActiveState;
			}
		}
		[CRepr]
		public struct IVMRFilterConfig9 : IUnknown
		{
			public const new Guid IID = .(0x5a804648, 0x4f66, 0x4867, 0x9c, 0x43, 0x4f, 0x5c, 0x82, 0x2c, 0xf1, 0xb8);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetImageCompositor(ref IVMRImageCompositor9 lpVMRImgCompositor) mut => VT.SetImageCompositor(ref this, ref lpVMRImgCompositor);
			public HRESULT SetNumberOfStreams(uint32 dwMaxStreams) mut => VT.SetNumberOfStreams(ref this, dwMaxStreams);
			public HRESULT GetNumberOfStreams(out uint32 pdwMaxStreams) mut => VT.GetNumberOfStreams(ref this, out pdwMaxStreams);
			public HRESULT SetRenderingPrefs(uint32 dwRenderFlags) mut => VT.SetRenderingPrefs(ref this, dwRenderFlags);
			public HRESULT GetRenderingPrefs(out uint32 pdwRenderFlags) mut => VT.GetRenderingPrefs(ref this, out pdwRenderFlags);
			public HRESULT SetRenderingMode(uint32 Mode) mut => VT.SetRenderingMode(ref this, Mode);
			public HRESULT GetRenderingMode(out uint32 pMode) mut => VT.GetRenderingMode(ref this, out pMode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, ref IVMRImageCompositor9 lpVMRImgCompositor) SetImageCompositor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, uint32 dwMaxStreams) SetNumberOfStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, out uint32 pdwMaxStreams) GetNumberOfStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, uint32 dwRenderFlags) SetRenderingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, out uint32 pdwRenderFlags) GetRenderingPrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, uint32 Mode) SetRenderingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRFilterConfig9 self, out uint32 pMode) GetRenderingMode;
			}
		}
		[CRepr]
		public struct IVMRAspectRatioControl9 : IUnknown
		{
			public const new Guid IID = .(0x00d96c29, 0xbbde, 0x4efc, 0x99, 0x01, 0xbb, 0x50, 0x36, 0x39, 0x21, 0x46);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetAspectRatioMode(out uint32 lpdwARMode) mut => VT.GetAspectRatioMode(ref this, out lpdwARMode);
			public HRESULT SetAspectRatioMode(uint32 dwARMode) mut => VT.SetAspectRatioMode(ref this, dwARMode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRAspectRatioControl9 self, out uint32 lpdwARMode) GetAspectRatioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRAspectRatioControl9 self, uint32 dwARMode) SetAspectRatioMode;
			}
		}
		[CRepr]
		public struct IVMRMonitorConfig9 : IUnknown
		{
			public const new Guid IID = .(0x46c2e457, 0x8ba0, 0x4eef, 0xb8, 0x0b, 0x06, 0x80, 0xf0, 0x97, 0x87, 0x49);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMonitor(uint32 uDev) mut => VT.SetMonitor(ref this, uDev);
			public HRESULT GetMonitor(out uint32 puDev) mut => VT.GetMonitor(ref this, out puDev);
			public HRESULT SetDefaultMonitor(uint32 uDev) mut => VT.SetDefaultMonitor(ref this, uDev);
			public HRESULT GetDefaultMonitor(out uint32 puDev) mut => VT.GetDefaultMonitor(ref this, out puDev);
			public HRESULT GetAvailableMonitors(VMR9MonitorInfo* pInfo, uint32 dwMaxInfoArraySize, out uint32 pdwNumDevices) mut => VT.GetAvailableMonitors(ref this, pInfo, dwMaxInfoArraySize, out pdwNumDevices);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig9 self, uint32 uDev) SetMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig9 self, out uint32 puDev) GetMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig9 self, uint32 uDev) SetDefaultMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig9 self, out uint32 puDev) GetDefaultMonitor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRMonitorConfig9 self, VMR9MonitorInfo* pInfo, uint32 dwMaxInfoArraySize, out uint32 pdwNumDevices) GetAvailableMonitors;
			}
		}
		[CRepr]
		public struct IVMRDeinterlaceControl9 : IUnknown
		{
			public const new Guid IID = .(0xa215fb8d, 0x13c2, 0x4f7f, 0x99, 0x3c, 0x00, 0x3d, 0x62, 0x71, 0xa4, 0x59);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNumberOfDeinterlaceModes(ref VMR9VideoDesc lpVideoDescription, out uint32 lpdwNumDeinterlaceModes, out Guid lpDeinterlaceModes) mut => VT.GetNumberOfDeinterlaceModes(ref this, ref lpVideoDescription, out lpdwNumDeinterlaceModes, out lpDeinterlaceModes);
			public HRESULT GetDeinterlaceModeCaps(ref Guid lpDeinterlaceMode, ref VMR9VideoDesc lpVideoDescription, out VMR9DeinterlaceCaps lpDeinterlaceCaps) mut => VT.GetDeinterlaceModeCaps(ref this, ref lpDeinterlaceMode, ref lpVideoDescription, out lpDeinterlaceCaps);
			public HRESULT GetDeinterlaceMode(uint32 dwStreamID, out Guid lpDeinterlaceMode) mut => VT.GetDeinterlaceMode(ref this, dwStreamID, out lpDeinterlaceMode);
			public HRESULT SetDeinterlaceMode(uint32 dwStreamID, ref Guid lpDeinterlaceMode) mut => VT.SetDeinterlaceMode(ref this, dwStreamID, ref lpDeinterlaceMode);
			public HRESULT GetDeinterlacePrefs(out uint32 lpdwDeinterlacePrefs) mut => VT.GetDeinterlacePrefs(ref this, out lpdwDeinterlacePrefs);
			public HRESULT SetDeinterlacePrefs(uint32 dwDeinterlacePrefs) mut => VT.SetDeinterlacePrefs(ref this, dwDeinterlacePrefs);
			public HRESULT GetActualDeinterlaceMode(uint32 dwStreamID, out Guid lpDeinterlaceMode) mut => VT.GetActualDeinterlaceMode(ref this, dwStreamID, out lpDeinterlaceMode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, ref VMR9VideoDesc lpVideoDescription, out uint32 lpdwNumDeinterlaceModes, out Guid lpDeinterlaceModes) GetNumberOfDeinterlaceModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, ref Guid lpDeinterlaceMode, ref VMR9VideoDesc lpVideoDescription, out VMR9DeinterlaceCaps lpDeinterlaceCaps) GetDeinterlaceModeCaps;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, uint32 dwStreamID, out Guid lpDeinterlaceMode) GetDeinterlaceMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, uint32 dwStreamID, ref Guid lpDeinterlaceMode) SetDeinterlaceMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, out uint32 lpdwDeinterlacePrefs) GetDeinterlacePrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, uint32 dwDeinterlacePrefs) SetDeinterlacePrefs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRDeinterlaceControl9 self, uint32 dwStreamID, out Guid lpDeinterlaceMode) GetActualDeinterlaceMode;
			}
		}
		[CRepr]
		public struct IVMRImageCompositor9 : IUnknown
		{
			public const new Guid IID = .(0x4a5c89eb, 0xdf51, 0x4654, 0xac, 0x2a, 0xe4, 0x8e, 0x02, 0xbb, 0xab, 0xf6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InitCompositionDevice(ref IUnknown pD3DDevice) mut => VT.InitCompositionDevice(ref this, ref pD3DDevice);
			public HRESULT TermCompositionDevice(ref IUnknown pD3DDevice) mut => VT.TermCompositionDevice(ref this, ref pD3DDevice);
			public HRESULT SetStreamMediaType(uint32 dwStrmID, ref AM_MEDIA_TYPE pmt, BOOL fTexture) mut => VT.SetStreamMediaType(ref this, dwStrmID, ref pmt, fTexture);
			public HRESULT CompositeImage(ref IUnknown pD3DDevice, ref IDirect3DSurface9 pddsRenderTarget, ref AM_MEDIA_TYPE pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, ref VMR9VideoStreamInfo pVideoStreamInfo, uint32 cStreams) mut => VT.CompositeImage(ref this, ref pD3DDevice, ref pddsRenderTarget, ref pmtRenderTarget, rtStart, rtEnd, dwClrBkGnd, ref pVideoStreamInfo, cStreams);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor9 self, ref IUnknown pD3DDevice) InitCompositionDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor9 self, ref IUnknown pD3DDevice) TermCompositionDevice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor9 self, uint32 dwStrmID, ref AM_MEDIA_TYPE pmt, BOOL fTexture) SetStreamMediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVMRImageCompositor9 self, ref IUnknown pD3DDevice, ref IDirect3DSurface9 pddsRenderTarget, ref AM_MEDIA_TYPE pmtRenderTarget, int64 rtStart, int64 rtEnd, uint32 dwClrBkGnd, ref VMR9VideoStreamInfo pVideoStreamInfo, uint32 cStreams) CompositeImage;
			}
		}
		[CRepr]
		public struct IVPBaseConfig : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetConnectInfo(out uint32 pdwNumConnectInfo, DDVIDEOPORTCONNECT* pddVPConnectInfo) mut => VT.GetConnectInfo(ref this, out pdwNumConnectInfo, pddVPConnectInfo);
			public HRESULT SetConnectInfo(uint32 dwChosenEntry) mut => VT.SetConnectInfo(ref this, dwChosenEntry);
			public HRESULT GetVPDataInfo(out AMVPDATAINFO pamvpDataInfo) mut => VT.GetVPDataInfo(ref this, out pamvpDataInfo);
			public HRESULT GetMaxPixelRate(out AMVPSIZE pamvpSize, out uint32 pdwMaxPixelsPerSecond) mut => VT.GetMaxPixelRate(ref this, out pamvpSize, out pdwMaxPixelsPerSecond);
			public HRESULT InformVPInputFormats(uint32 dwNumFormats, out DDPIXELFORMAT pDDPixelFormats) mut => VT.InformVPInputFormats(ref this, dwNumFormats, out pDDPixelFormats);
			public HRESULT GetVideoFormats(out uint32 pdwNumFormats, DDPIXELFORMAT* pddPixelFormats) mut => VT.GetVideoFormats(ref this, out pdwNumFormats, pddPixelFormats);
			public HRESULT SetVideoFormat(uint32 dwChosenEntry) mut => VT.SetVideoFormat(ref this, dwChosenEntry);
			public HRESULT SetInvertPolarity() mut => VT.SetInvertPolarity(ref this);
			public HRESULT GetOverlaySurface(out IDirectDrawSurface* ppddOverlaySurface) mut => VT.GetOverlaySurface(ref this, out ppddOverlaySurface);
			public HRESULT SetDirectDrawKernelHandle(uint dwDDKernelHandle) mut => VT.SetDirectDrawKernelHandle(ref this, dwDDKernelHandle);
			public HRESULT SetVideoPortID(uint32 dwVideoPortID) mut => VT.SetVideoPortID(ref this, dwVideoPortID);
			public HRESULT SetDDSurfaceKernelHandles(uint32 cHandles, out uint rgDDKernelHandles) mut => VT.SetDDSurfaceKernelHandles(ref this, cHandles, out rgDDKernelHandles);
			public HRESULT SetSurfaceParameters(uint32 dwPitch, uint32 dwXOrigin, uint32 dwYOrigin) mut => VT.SetSurfaceParameters(ref this, dwPitch, dwXOrigin, dwYOrigin);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, out uint32 pdwNumConnectInfo, DDVIDEOPORTCONNECT* pddVPConnectInfo) GetConnectInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint32 dwChosenEntry) SetConnectInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, out AMVPDATAINFO pamvpDataInfo) GetVPDataInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, out AMVPSIZE pamvpSize, out uint32 pdwMaxPixelsPerSecond) GetMaxPixelRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint32 dwNumFormats, out DDPIXELFORMAT pDDPixelFormats) InformVPInputFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, out uint32 pdwNumFormats, DDPIXELFORMAT* pddPixelFormats) GetVideoFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint32 dwChosenEntry) SetVideoFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self) SetInvertPolarity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, out IDirectDrawSurface* ppddOverlaySurface) GetOverlaySurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint dwDDKernelHandle) SetDirectDrawKernelHandle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint32 dwVideoPortID) SetVideoPortID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint32 cHandles, out uint rgDDKernelHandles) SetDDSurfaceKernelHandles;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseConfig self, uint32 dwPitch, uint32 dwXOrigin, uint32 dwYOrigin) SetSurfaceParameters;
			}
		}
		[CRepr]
		public struct IVPConfig : IVPBaseConfig
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsVPDecimationAllowed(out int32 pbIsDecimationAllowed) mut => VT.IsVPDecimationAllowed(ref this, out pbIsDecimationAllowed);
			public HRESULT SetScalingFactors(out AMVPSIZE pamvpSize) mut => VT.SetScalingFactors(ref this, out pamvpSize);

			[CRepr]
			public struct VTable : IVPBaseConfig.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPConfig self, out int32 pbIsDecimationAllowed) IsVPDecimationAllowed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPConfig self, out AMVPSIZE pamvpSize) SetScalingFactors;
			}
		}
		[CRepr]
		public struct IVPVBIConfig : IVPBaseConfig
		{
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IVPBaseConfig.VTable {}
		}
		[CRepr]
		public struct IVPBaseNotify : IUnknown
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RenegotiateVPParameters() mut => VT.RenegotiateVPParameters(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPBaseNotify self) RenegotiateVPParameters;
			}
		}
		[CRepr]
		public struct IVPNotify : IVPBaseNotify
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDeinterlaceMode(AMVP_MODE mode) mut => VT.SetDeinterlaceMode(ref this, mode);
			public HRESULT GetDeinterlaceMode(out AMVP_MODE pMode) mut => VT.GetDeinterlaceMode(ref this, out pMode);

			[CRepr]
			public struct VTable : IVPBaseNotify.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPNotify self, AMVP_MODE mode) SetDeinterlaceMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPNotify self, out AMVP_MODE pMode) GetDeinterlaceMode;
			}
		}
		[CRepr]
		public struct IVPNotify2 : IVPNotify
		{
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetVPSyncMaster(BOOL bVPSyncMaster) mut => VT.SetVPSyncMaster(ref this, bVPSyncMaster);
			public HRESULT GetVPSyncMaster(out BOOL pbVPSyncMaster) mut => VT.GetVPSyncMaster(ref this, out pbVPSyncMaster);

			[CRepr]
			public struct VTable : IVPNotify.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPNotify2 self, BOOL bVPSyncMaster) SetVPSyncMaster;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IVPNotify2 self, out BOOL pbVPSyncMaster) GetVPSyncMaster;
			}
		}
		[CRepr]
		public struct IVPVBINotify : IVPBaseNotify
		{
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IVPBaseNotify.VTable {}
		}
		[CRepr]
		public struct IMediaParamInfo : IUnknown
		{
			public const new Guid IID = .(0x6d6cbb60, 0xa223, 0x44aa, 0x84, 0x2f, 0xa2, 0xf0, 0x67, 0x50, 0xbe, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetParamCount(out uint32 pdwParams) mut => VT.GetParamCount(ref this, out pdwParams);
			public HRESULT GetParamInfo(uint32 dwParamIndex, out MP_PARAMINFO pInfo) mut => VT.GetParamInfo(ref this, dwParamIndex, out pInfo);
			public HRESULT GetParamText(uint32 dwParamIndex, out uint16* ppwchText) mut => VT.GetParamText(ref this, dwParamIndex, out ppwchText);
			public HRESULT GetNumTimeFormats(out uint32 pdwNumTimeFormats) mut => VT.GetNumTimeFormats(ref this, out pdwNumTimeFormats);
			public HRESULT GetSupportedTimeFormat(uint32 dwFormatIndex, out Guid pguidTimeFormat) mut => VT.GetSupportedTimeFormat(ref this, dwFormatIndex, out pguidTimeFormat);
			public HRESULT GetCurrentTimeFormat(out Guid pguidTimeFormat, out uint32 pTimeData) mut => VT.GetCurrentTimeFormat(ref this, out pguidTimeFormat, out pTimeData);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParamInfo self, out uint32 pdwParams) GetParamCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParamInfo self, uint32 dwParamIndex, out MP_PARAMINFO pInfo) GetParamInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParamInfo self, uint32 dwParamIndex, out uint16* ppwchText) GetParamText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParamInfo self, out uint32 pdwNumTimeFormats) GetNumTimeFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParamInfo self, uint32 dwFormatIndex, out Guid pguidTimeFormat) GetSupportedTimeFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParamInfo self, out Guid pguidTimeFormat, out uint32 pTimeData) GetCurrentTimeFormat;
			}
		}
		[CRepr]
		public struct IMediaParams : IUnknown
		{
			public const new Guid IID = .(0x6d6cbb61, 0xa223, 0x44aa, 0x84, 0x2f, 0xa2, 0xf0, 0x67, 0x50, 0xbe, 0x6e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetParam(uint32 dwParamIndex, out float pValue) mut => VT.GetParam(ref this, dwParamIndex, out pValue);
			public HRESULT SetParam(uint32 dwParamIndex, float value) mut => VT.SetParam(ref this, dwParamIndex, value);
			public HRESULT AddEnvelope(uint32 dwParamIndex, uint32 cSegments, ref MP_ENVELOPE_SEGMENT pEnvelopeSegments) mut => VT.AddEnvelope(ref this, dwParamIndex, cSegments, ref pEnvelopeSegments);
			public HRESULT FlushEnvelope(uint32 dwParamIndex, int64 refTimeStart, int64 refTimeEnd) mut => VT.FlushEnvelope(ref this, dwParamIndex, refTimeStart, refTimeEnd);
			public HRESULT SetTimeFormat(Guid guidTimeFormat, uint32 mpTimeData) mut => VT.SetTimeFormat(ref this, guidTimeFormat, mpTimeData);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParams self, uint32 dwParamIndex, out float pValue) GetParam;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParams self, uint32 dwParamIndex, float value) SetParam;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParams self, uint32 dwParamIndex, uint32 cSegments, ref MP_ENVELOPE_SEGMENT pEnvelopeSegments) AddEnvelope;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParams self, uint32 dwParamIndex, int64 refTimeStart, int64 refTimeEnd) FlushEnvelope;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaParams self, Guid guidTimeFormat, uint32 mpTimeData) SetTimeFormat;
			}
		}
		[CRepr]
		public struct IAMPlayListItem : IUnknown
		{
			public const new Guid IID = .(0x56a868ff, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ComGetFlags(out uint32 pdwFlags) mut => VT.ComGetFlags(ref this, out pdwFlags);
			public HRESULT GetSourceCount(out uint32 pdwSources) mut => VT.GetSourceCount(ref this, out pdwSources);
			public HRESULT GetSourceURL(uint32 dwSourceIndex, BSTR* pbstrURL) mut => VT.GetSourceURL(ref this, dwSourceIndex, pbstrURL);
			public HRESULT GetSourceStart(uint32 dwSourceIndex, out int64 prtStart) mut => VT.GetSourceStart(ref this, dwSourceIndex, out prtStart);
			public HRESULT GetSourceDuration(uint32 dwSourceIndex, out int64 prtDuration) mut => VT.GetSourceDuration(ref this, dwSourceIndex, out prtDuration);
			public HRESULT GetSourceStartMarker(uint32 dwSourceIndex, out uint32 pdwMarker) mut => VT.GetSourceStartMarker(ref this, dwSourceIndex, out pdwMarker);
			public HRESULT GetSourceEndMarker(uint32 dwSourceIndex, out uint32 pdwMarker) mut => VT.GetSourceEndMarker(ref this, dwSourceIndex, out pdwMarker);
			public HRESULT GetSourceStartMarkerName(uint32 dwSourceIndex, BSTR* pbstrStartMarker) mut => VT.GetSourceStartMarkerName(ref this, dwSourceIndex, pbstrStartMarker);
			public HRESULT GetSourceEndMarkerName(uint32 dwSourceIndex, BSTR* pbstrEndMarker) mut => VT.GetSourceEndMarkerName(ref this, dwSourceIndex, pbstrEndMarker);
			public HRESULT GetLinkURL(BSTR* pbstrURL) mut => VT.GetLinkURL(ref this, pbstrURL);
			public HRESULT GetScanDuration(uint32 dwSourceIndex, out int64 prtScanDuration) mut => VT.GetScanDuration(ref this, dwSourceIndex, out prtScanDuration);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, out uint32 pdwFlags) ComGetFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, out uint32 pdwSources) GetSourceCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, BSTR* pbstrURL) GetSourceURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, out int64 prtStart) GetSourceStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, out int64 prtDuration) GetSourceDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, out uint32 pdwMarker) GetSourceStartMarker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, out uint32 pdwMarker) GetSourceEndMarker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, BSTR* pbstrStartMarker) GetSourceStartMarkerName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, BSTR* pbstrEndMarker) GetSourceEndMarkerName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, BSTR* pbstrURL) GetLinkURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayListItem self, uint32 dwSourceIndex, out int64 prtScanDuration) GetScanDuration;
			}
		}
		[CRepr]
		public struct IAMPlayList : IUnknown
		{
			public const new Guid IID = .(0x56a868fe, 0x0ad4, 0x11ce, 0xb0, 0x3a, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ComGetFlags(out uint32 pdwFlags) mut => VT.ComGetFlags(ref this, out pdwFlags);
			public HRESULT GetItemCount(out uint32 pdwItems) mut => VT.GetItemCount(ref this, out pdwItems);
			public HRESULT GetItem(uint32 dwItemIndex, IAMPlayListItem** ppItem) mut => VT.GetItem(ref this, dwItemIndex, ppItem);
			public HRESULT GetNamedEvent(PWSTR pwszEventName, uint32 dwItemIndex, IAMPlayListItem** ppItem, out uint32 pdwFlags) mut => VT.GetNamedEvent(ref this, pwszEventName, dwItemIndex, ppItem, out pdwFlags);
			public HRESULT GetRepeatInfo(out uint32 pdwRepeatCount, out uint32 pdwRepeatStart, out uint32 pdwRepeatEnd) mut => VT.GetRepeatInfo(ref this, out pdwRepeatCount, out pdwRepeatStart, out pdwRepeatEnd);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayList self, out uint32 pdwFlags) ComGetFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayList self, out uint32 pdwItems) GetItemCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayList self, uint32 dwItemIndex, IAMPlayListItem** ppItem) GetItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayList self, PWSTR pwszEventName, uint32 dwItemIndex, IAMPlayListItem** ppItem, out uint32 pdwFlags) GetNamedEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMPlayList self, out uint32 pdwRepeatCount, out uint32 pdwRepeatStart, out uint32 pdwRepeatEnd) GetRepeatInfo;
			}
		}
		[CRepr]
		public struct ISpecifyParticularPages : IUnknown
		{
			public const new Guid IID = .(0x4c437b91, 0x6e9e, 0x11d1, 0xa7, 0x04, 0x00, 0x60, 0x97, 0xc4, 0xe4, 0x76);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPages(in Guid guidWhatPages, out CAUUID pPages) mut => VT.GetPages(ref this, guidWhatPages, out pPages);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISpecifyParticularPages self, in Guid guidWhatPages, out CAUUID pPages) GetPages;
			}
		}
		[CRepr]
		public struct IAMRebuild : IUnknown
		{
			public const new Guid IID = .(0x02ef04dd, 0x7580, 0x11d1, 0xbe, 0xce, 0x00, 0xc0, 0x4f, 0xb6, 0xe9, 0x37);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RebuildNow() mut => VT.RebuildNow(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAMRebuild self) RebuildNow;
			}
		}
		[CRepr]
		public struct IBufferingTime : IUnknown
		{
			public const new Guid IID = .(0x1e00486a, 0x78dd, 0x11d2, 0x8d, 0xd3, 0x00, 0x60, 0x97, 0xc9, 0xa2, 0xb2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetBufferingTime(out uint32 pdwMilliseconds) mut => VT.GetBufferingTime(ref this, out pdwMilliseconds);
			public HRESULT SetBufferingTime(uint32 dwMilliseconds) mut => VT.SetBufferingTime(ref this, dwMilliseconds);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBufferingTime self, out uint32 pdwMilliseconds) GetBufferingTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBufferingTime self, uint32 dwMilliseconds) SetBufferingTime;
			}
		}
		[CRepr]
		public struct ICreatePropBagOnRegKey : IUnknown
		{
			public const new Guid IID = .(0x8a674b48, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Create(HKEY hkey, PWSTR subkey, uint32 ulOptions, uint32 samDesired, in Guid iid, void** ppBag) mut => VT.Create(ref this, hkey, subkey, ulOptions, samDesired, iid, ppBag);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICreatePropBagOnRegKey self, HKEY hkey, PWSTR subkey, uint32 ulOptions, uint32 samDesired, in Guid iid, void** ppBag) Create;
			}
		}
		[CRepr]
		public struct ITuningSpaces : IDispatch
		{
			public const new Guid IID = .(0x901284e4, 0x33fe, 0x4b69, 0x8d, 0x63, 0x63, 0x4a, 0x59, 0x6f, 0x37, 0x56);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 Count) mut => VT.get_Count(ref this, out Count);
			public HRESULT get__NewEnum(out IEnumVARIANT* NewEnum) mut => VT.get__NewEnum(ref this, out NewEnum);
			public HRESULT get_Item(VARIANT varIndex, out ITuningSpace* TuningSpace) mut => VT.get_Item(ref this, varIndex, out TuningSpace);
			public HRESULT get_EnumTuningSpaces(out IEnumTuningSpaces* NewEnum) mut => VT.get_EnumTuningSpaces(ref this, out NewEnum);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaces self, out int32 Count) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaces self, out IEnumVARIANT* NewEnum) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaces self, VARIANT varIndex, out ITuningSpace* TuningSpace) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaces self, out IEnumTuningSpaces* NewEnum) get_EnumTuningSpaces;
			}
		}
		[CRepr]
		public struct ITuningSpaceContainer : IDispatch
		{
			public const new Guid IID = .(0x5b692e84, 0xe2f1, 0x11d2, 0x94, 0x93, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 Count) mut => VT.get_Count(ref this, out Count);
			public HRESULT get__NewEnum(out IEnumVARIANT* NewEnum) mut => VT.get__NewEnum(ref this, out NewEnum);
			public HRESULT get_Item(VARIANT varIndex, out ITuningSpace* TuningSpace) mut => VT.get_Item(ref this, varIndex, out TuningSpace);
			public HRESULT put_Item(VARIANT varIndex, ref ITuningSpace TuningSpace) mut => VT.put_Item(ref this, varIndex, ref TuningSpace);
			public HRESULT TuningSpacesForCLSID(BSTR SpaceCLSID, out ITuningSpaces* NewColl) mut => VT.TuningSpacesForCLSID(ref this, SpaceCLSID, out NewColl);
			public HRESULT _TuningSpacesForCLSID2(in Guid SpaceCLSID, out ITuningSpaces* NewColl) mut => VT._TuningSpacesForCLSID2(ref this, SpaceCLSID, out NewColl);
			public HRESULT TuningSpacesForName(BSTR Name, out ITuningSpaces* NewColl) mut => VT.TuningSpacesForName(ref this, Name, out NewColl);
			public HRESULT FindID(ref ITuningSpace TuningSpace, out int32 ID) mut => VT.FindID(ref this, ref TuningSpace, out ID);
			public HRESULT Add(ref ITuningSpace TuningSpace, out VARIANT NewIndex) mut => VT.Add(ref this, ref TuningSpace, out NewIndex);
			public HRESULT get_EnumTuningSpaces(out IEnumTuningSpaces* ppEnum) mut => VT.get_EnumTuningSpaces(ref this, out ppEnum);
			public HRESULT Remove(VARIANT Index) mut => VT.Remove(ref this, Index);
			public HRESULT get_MaxCount(out int32 MaxCount) mut => VT.get_MaxCount(ref this, out MaxCount);
			public HRESULT put_MaxCount(int32 MaxCount) mut => VT.put_MaxCount(ref this, MaxCount);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, out int32 Count) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, out IEnumVARIANT* NewEnum) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, VARIANT varIndex, out ITuningSpace* TuningSpace) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, VARIANT varIndex, ref ITuningSpace TuningSpace) put_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, BSTR SpaceCLSID, out ITuningSpaces* NewColl) TuningSpacesForCLSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, in Guid SpaceCLSID, out ITuningSpaces* NewColl) _TuningSpacesForCLSID2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, BSTR Name, out ITuningSpaces* NewColl) TuningSpacesForName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, ref ITuningSpace TuningSpace, out int32 ID) FindID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, ref ITuningSpace TuningSpace, out VARIANT NewIndex) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, out IEnumTuningSpaces* ppEnum) get_EnumTuningSpaces;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, VARIANT Index) Remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, out int32 MaxCount) get_MaxCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpaceContainer self, int32 MaxCount) put_MaxCount;
			}
		}
		[CRepr]
		public struct ITuningSpace : IDispatch
		{
			public const new Guid IID = .(0x061c6e30, 0xe622, 0x11d2, 0x94, 0x93, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_UniqueName(out BSTR Name) mut => VT.get_UniqueName(ref this, out Name);
			public HRESULT put_UniqueName(BSTR Name) mut => VT.put_UniqueName(ref this, Name);
			public HRESULT get_FriendlyName(out BSTR Name) mut => VT.get_FriendlyName(ref this, out Name);
			public HRESULT put_FriendlyName(BSTR Name) mut => VT.put_FriendlyName(ref this, Name);
			public HRESULT get_CLSID(out BSTR SpaceCLSID) mut => VT.get_CLSID(ref this, out SpaceCLSID);
			public HRESULT get_NetworkType(out BSTR NetworkTypeGuid) mut => VT.get_NetworkType(ref this, out NetworkTypeGuid);
			public HRESULT put_NetworkType(BSTR NetworkTypeGuid) mut => VT.put_NetworkType(ref this, NetworkTypeGuid);
			public HRESULT get__NetworkType(out Guid NetworkTypeGuid) mut => VT.get__NetworkType(ref this, out NetworkTypeGuid);
			public HRESULT put__NetworkType(in Guid NetworkTypeGuid) mut => VT.put__NetworkType(ref this, NetworkTypeGuid);
			public HRESULT CreateTuneRequest(out ITuneRequest* TuneRequest) mut => VT.CreateTuneRequest(ref this, out TuneRequest);
			public HRESULT EnumCategoryGUIDs(out IEnumGUID* ppEnum) mut => VT.EnumCategoryGUIDs(ref this, out ppEnum);
			public HRESULT EnumDeviceMonikers(out IEnumMoniker* ppEnum) mut => VT.EnumDeviceMonikers(ref this, out ppEnum);
			public HRESULT get_DefaultPreferredComponentTypes(out IComponentTypes* ComponentTypes) mut => VT.get_DefaultPreferredComponentTypes(ref this, out ComponentTypes);
			public HRESULT put_DefaultPreferredComponentTypes(ref IComponentTypes NewComponentTypes) mut => VT.put_DefaultPreferredComponentTypes(ref this, ref NewComponentTypes);
			public HRESULT get_FrequencyMapping(out BSTR pMapping) mut => VT.get_FrequencyMapping(ref this, out pMapping);
			public HRESULT put_FrequencyMapping(BSTR Mapping) mut => VT.put_FrequencyMapping(ref this, Mapping);
			public HRESULT get_DefaultLocator(out ILocator* LocatorVal) mut => VT.get_DefaultLocator(ref this, out LocatorVal);
			public HRESULT put_DefaultLocator(ref ILocator LocatorVal) mut => VT.put_DefaultLocator(ref this, ref LocatorVal);
			public HRESULT Clone(out ITuningSpace* NewTS) mut => VT.Clone(ref this, out NewTS);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out BSTR Name) get_UniqueName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, BSTR Name) put_UniqueName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out BSTR Name) get_FriendlyName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, BSTR Name) put_FriendlyName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out BSTR SpaceCLSID) get_CLSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out BSTR NetworkTypeGuid) get_NetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, BSTR NetworkTypeGuid) put_NetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out Guid NetworkTypeGuid) get__NetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, in Guid NetworkTypeGuid) put__NetworkType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out ITuneRequest* TuneRequest) CreateTuneRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out IEnumGUID* ppEnum) EnumCategoryGUIDs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out IEnumMoniker* ppEnum) EnumDeviceMonikers;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out IComponentTypes* ComponentTypes) get_DefaultPreferredComponentTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, ref IComponentTypes NewComponentTypes) put_DefaultPreferredComponentTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out BSTR pMapping) get_FrequencyMapping;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, BSTR Mapping) put_FrequencyMapping;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out ILocator* LocatorVal) get_DefaultLocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, ref ILocator LocatorVal) put_DefaultLocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuningSpace self, out ITuningSpace* NewTS) Clone;
			}
		}
		[CRepr]
		public struct IEnumTuningSpaces : IUnknown
		{
			public const new Guid IID = .(0x8b8eb248, 0xfc2b, 0x11d2, 0x9d, 0x8c, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, ITuningSpace** rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumTuningSpaces* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuningSpaces self, uint32 celt, ITuningSpace** rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuningSpaces self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuningSpaces self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuningSpaces self, out IEnumTuningSpaces* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IDVBTuningSpace : ITuningSpace
		{
			public const new Guid IID = .(0xada0b268, 0x3b19, 0x4e5b, 0xac, 0xc4, 0x49, 0xf8, 0x52, 0xbe, 0x13, 0xba);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SystemType(out DVBSystemType SysType) mut => VT.get_SystemType(ref this, out SysType);
			public HRESULT put_SystemType(DVBSystemType SysType) mut => VT.put_SystemType(ref this, SysType);

			[CRepr]
			public struct VTable : ITuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuningSpace self, out DVBSystemType SysType) get_SystemType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuningSpace self, DVBSystemType SysType) put_SystemType;
			}
		}
		[CRepr]
		public struct IDVBTuningSpace2 : IDVBTuningSpace
		{
			public const new Guid IID = .(0x843188b4, 0xce62, 0x43db, 0x96, 0x6b, 0x81, 0x45, 0xa0, 0x94, 0xe0, 0x40);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_NetworkID(out int32 NetworkID) mut => VT.get_NetworkID(ref this, out NetworkID);
			public HRESULT put_NetworkID(int32 NetworkID) mut => VT.put_NetworkID(ref this, NetworkID);

			[CRepr]
			public struct VTable : IDVBTuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuningSpace2 self, out int32 NetworkID) get_NetworkID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuningSpace2 self, int32 NetworkID) put_NetworkID;
			}
		}
		[CRepr]
		public struct IDVBSTuningSpace : IDVBTuningSpace2
		{
			public const new Guid IID = .(0xcdf7be60, 0xd954, 0x42fd, 0xa9, 0x72, 0x78, 0x97, 0x19, 0x58, 0xe4, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_LowOscillator(out int32 LowOscillator) mut => VT.get_LowOscillator(ref this, out LowOscillator);
			public HRESULT put_LowOscillator(int32 LowOscillator) mut => VT.put_LowOscillator(ref this, LowOscillator);
			public HRESULT get_HighOscillator(out int32 HighOscillator) mut => VT.get_HighOscillator(ref this, out HighOscillator);
			public HRESULT put_HighOscillator(int32 HighOscillator) mut => VT.put_HighOscillator(ref this, HighOscillator);
			public HRESULT get_LNBSwitch(out int32 LNBSwitch) mut => VT.get_LNBSwitch(ref this, out LNBSwitch);
			public HRESULT put_LNBSwitch(int32 LNBSwitch) mut => VT.put_LNBSwitch(ref this, LNBSwitch);
			public HRESULT get_InputRange(out BSTR InputRange) mut => VT.get_InputRange(ref this, out InputRange);
			public HRESULT put_InputRange(BSTR InputRange) mut => VT.put_InputRange(ref this, InputRange);
			public HRESULT get_SpectralInversion(out SpectralInversion SpectralInversionVal) mut => VT.get_SpectralInversion(ref this, out SpectralInversionVal);
			public HRESULT put_SpectralInversion(SpectralInversion SpectralInversionVal) mut => VT.put_SpectralInversion(ref this, SpectralInversionVal);

			[CRepr]
			public struct VTable : IDVBTuningSpace2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, out int32 LowOscillator) get_LowOscillator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, int32 LowOscillator) put_LowOscillator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, out int32 HighOscillator) get_HighOscillator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, int32 HighOscillator) put_HighOscillator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, out int32 LNBSwitch) get_LNBSwitch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, int32 LNBSwitch) put_LNBSwitch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, out BSTR InputRange) get_InputRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, BSTR InputRange) put_InputRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, out SpectralInversion SpectralInversionVal) get_SpectralInversion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSTuningSpace self, SpectralInversion SpectralInversionVal) put_SpectralInversion;
			}
		}
		[CRepr]
		public struct IAuxInTuningSpace : ITuningSpace
		{
			public const new Guid IID = .(0xe48244b8, 0x7e17, 0x4f76, 0xa7, 0x63, 0x50, 0x90, 0xff, 0x1e, 0x2f, 0x30);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : ITuningSpace.VTable {}
		}
		[CRepr]
		public struct IAuxInTuningSpace2 : IAuxInTuningSpace
		{
			public const new Guid IID = .(0xb10931ed, 0x8bfe, 0x4ab0, 0x9d, 0xce, 0xe4, 0x69, 0xc2, 0x9a, 0x97, 0x29);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_CountryCode(out int32 CountryCodeVal) mut => VT.get_CountryCode(ref this, out CountryCodeVal);
			public HRESULT put_CountryCode(int32 NewCountryCodeVal) mut => VT.put_CountryCode(ref this, NewCountryCodeVal);

			[CRepr]
			public struct VTable : IAuxInTuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAuxInTuningSpace2 self, out int32 CountryCodeVal) get_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAuxInTuningSpace2 self, int32 NewCountryCodeVal) put_CountryCode;
			}
		}
		[CRepr]
		public struct IAnalogTVTuningSpace : ITuningSpace
		{
			public const new Guid IID = .(0x2a6e293c, 0x2595, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MinChannel(out int32 MinChannelVal) mut => VT.get_MinChannel(ref this, out MinChannelVal);
			public HRESULT put_MinChannel(int32 NewMinChannelVal) mut => VT.put_MinChannel(ref this, NewMinChannelVal);
			public HRESULT get_MaxChannel(out int32 MaxChannelVal) mut => VT.get_MaxChannel(ref this, out MaxChannelVal);
			public HRESULT put_MaxChannel(int32 NewMaxChannelVal) mut => VT.put_MaxChannel(ref this, NewMaxChannelVal);
			public HRESULT get_InputType(out TunerInputType InputTypeVal) mut => VT.get_InputType(ref this, out InputTypeVal);
			public HRESULT put_InputType(TunerInputType NewInputTypeVal) mut => VT.put_InputType(ref this, NewInputTypeVal);
			public HRESULT get_CountryCode(out int32 CountryCodeVal) mut => VT.get_CountryCode(ref this, out CountryCodeVal);
			public HRESULT put_CountryCode(int32 NewCountryCodeVal) mut => VT.put_CountryCode(ref this, NewCountryCodeVal);

			[CRepr]
			public struct VTable : ITuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, out int32 MinChannelVal) get_MinChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, int32 NewMinChannelVal) put_MinChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, out int32 MaxChannelVal) get_MaxChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, int32 NewMaxChannelVal) put_MaxChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, out TunerInputType InputTypeVal) get_InputType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, TunerInputType NewInputTypeVal) put_InputType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, out int32 CountryCodeVal) get_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogTVTuningSpace self, int32 NewCountryCodeVal) put_CountryCode;
			}
		}
		[CRepr]
		public struct IATSCTuningSpace : IAnalogTVTuningSpace
		{
			public const new Guid IID = .(0x0369b4e2, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MinMinorChannel(out int32 MinMinorChannelVal) mut => VT.get_MinMinorChannel(ref this, out MinMinorChannelVal);
			public HRESULT put_MinMinorChannel(int32 NewMinMinorChannelVal) mut => VT.put_MinMinorChannel(ref this, NewMinMinorChannelVal);
			public HRESULT get_MaxMinorChannel(out int32 MaxMinorChannelVal) mut => VT.get_MaxMinorChannel(ref this, out MaxMinorChannelVal);
			public HRESULT put_MaxMinorChannel(int32 NewMaxMinorChannelVal) mut => VT.put_MaxMinorChannel(ref this, NewMaxMinorChannelVal);
			public HRESULT get_MinPhysicalChannel(out int32 MinPhysicalChannelVal) mut => VT.get_MinPhysicalChannel(ref this, out MinPhysicalChannelVal);
			public HRESULT put_MinPhysicalChannel(int32 NewMinPhysicalChannelVal) mut => VT.put_MinPhysicalChannel(ref this, NewMinPhysicalChannelVal);
			public HRESULT get_MaxPhysicalChannel(out int32 MaxPhysicalChannelVal) mut => VT.get_MaxPhysicalChannel(ref this, out MaxPhysicalChannelVal);
			public HRESULT put_MaxPhysicalChannel(int32 NewMaxPhysicalChannelVal) mut => VT.put_MaxPhysicalChannel(ref this, NewMaxPhysicalChannelVal);

			[CRepr]
			public struct VTable : IAnalogTVTuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, out int32 MinMinorChannelVal) get_MinMinorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, int32 NewMinMinorChannelVal) put_MinMinorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, out int32 MaxMinorChannelVal) get_MaxMinorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, int32 NewMaxMinorChannelVal) put_MaxMinorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, out int32 MinPhysicalChannelVal) get_MinPhysicalChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, int32 NewMinPhysicalChannelVal) put_MinPhysicalChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, out int32 MaxPhysicalChannelVal) get_MaxPhysicalChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCTuningSpace self, int32 NewMaxPhysicalChannelVal) put_MaxPhysicalChannel;
			}
		}
		[CRepr]
		public struct IDigitalCableTuningSpace : IATSCTuningSpace
		{
			public const new Guid IID = .(0x013f9f9c, 0xb449, 0x4ec7, 0xa6, 0xd2, 0x9d, 0x4f, 0x2f, 0xc7, 0x0a, 0xe5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MinMajorChannel(out int32 MinMajorChannelVal) mut => VT.get_MinMajorChannel(ref this, out MinMajorChannelVal);
			public HRESULT put_MinMajorChannel(int32 NewMinMajorChannelVal) mut => VT.put_MinMajorChannel(ref this, NewMinMajorChannelVal);
			public HRESULT get_MaxMajorChannel(out int32 MaxMajorChannelVal) mut => VT.get_MaxMajorChannel(ref this, out MaxMajorChannelVal);
			public HRESULT put_MaxMajorChannel(int32 NewMaxMajorChannelVal) mut => VT.put_MaxMajorChannel(ref this, NewMaxMajorChannelVal);
			public HRESULT get_MinSourceID(out int32 MinSourceIDVal) mut => VT.get_MinSourceID(ref this, out MinSourceIDVal);
			public HRESULT put_MinSourceID(int32 NewMinSourceIDVal) mut => VT.put_MinSourceID(ref this, NewMinSourceIDVal);
			public HRESULT get_MaxSourceID(out int32 MaxSourceIDVal) mut => VT.get_MaxSourceID(ref this, out MaxSourceIDVal);
			public HRESULT put_MaxSourceID(int32 NewMaxSourceIDVal) mut => VT.put_MaxSourceID(ref this, NewMaxSourceIDVal);

			[CRepr]
			public struct VTable : IATSCTuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, out int32 MinMajorChannelVal) get_MinMajorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, int32 NewMinMajorChannelVal) put_MinMajorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, out int32 MaxMajorChannelVal) get_MaxMajorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, int32 NewMaxMajorChannelVal) put_MaxMajorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, out int32 MinSourceIDVal) get_MinSourceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, int32 NewMinSourceIDVal) put_MinSourceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, out int32 MaxSourceIDVal) get_MaxSourceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuningSpace self, int32 NewMaxSourceIDVal) put_MaxSourceID;
			}
		}
		[CRepr]
		public struct IAnalogRadioTuningSpace : ITuningSpace
		{
			public const new Guid IID = .(0x2a6e293b, 0x2595, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MinFrequency(out int32 MinFrequencyVal) mut => VT.get_MinFrequency(ref this, out MinFrequencyVal);
			public HRESULT put_MinFrequency(int32 NewMinFrequencyVal) mut => VT.put_MinFrequency(ref this, NewMinFrequencyVal);
			public HRESULT get_MaxFrequency(out int32 MaxFrequencyVal) mut => VT.get_MaxFrequency(ref this, out MaxFrequencyVal);
			public HRESULT put_MaxFrequency(int32 NewMaxFrequencyVal) mut => VT.put_MaxFrequency(ref this, NewMaxFrequencyVal);
			public HRESULT get_Step(out int32 StepVal) mut => VT.get_Step(ref this, out StepVal);
			public HRESULT put_Step(int32 NewStepVal) mut => VT.put_Step(ref this, NewStepVal);

			[CRepr]
			public struct VTable : ITuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace self, out int32 MinFrequencyVal) get_MinFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace self, int32 NewMinFrequencyVal) put_MinFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace self, out int32 MaxFrequencyVal) get_MaxFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace self, int32 NewMaxFrequencyVal) put_MaxFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace self, out int32 StepVal) get_Step;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace self, int32 NewStepVal) put_Step;
			}
		}
		[CRepr]
		public struct IAnalogRadioTuningSpace2 : IAnalogRadioTuningSpace
		{
			public const new Guid IID = .(0x39dd45da, 0x2da8, 0x46ba, 0x8a, 0x8a, 0x87, 0xe2, 0xb7, 0x3d, 0x98, 0x3a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_CountryCode(out int32 CountryCodeVal) mut => VT.get_CountryCode(ref this, out CountryCodeVal);
			public HRESULT put_CountryCode(int32 NewCountryCodeVal) mut => VT.put_CountryCode(ref this, NewCountryCodeVal);

			[CRepr]
			public struct VTable : IAnalogRadioTuningSpace.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace2 self, out int32 CountryCodeVal) get_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogRadioTuningSpace2 self, int32 NewCountryCodeVal) put_CountryCode;
			}
		}
		[CRepr]
		public struct ITuneRequest : IDispatch
		{
			public const new Guid IID = .(0x07ddc146, 0xfc3d, 0x11d2, 0x9d, 0x8c, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_TuningSpace(out ITuningSpace* TuningSpace) mut => VT.get_TuningSpace(ref this, out TuningSpace);
			public HRESULT get_Components(out IComponents* Components) mut => VT.get_Components(ref this, out Components);
			public HRESULT Clone(out ITuneRequest* NewTuneRequest) mut => VT.Clone(ref this, out NewTuneRequest);
			public HRESULT get_Locator(out ILocator* Locator) mut => VT.get_Locator(ref this, out Locator);
			public HRESULT put_Locator(ref ILocator Locator) mut => VT.put_Locator(ref this, ref Locator);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequest self, out ITuningSpace* TuningSpace) get_TuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequest self, out IComponents* Components) get_Components;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequest self, out ITuneRequest* NewTuneRequest) Clone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequest self, out ILocator* Locator) get_Locator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequest self, ref ILocator Locator) put_Locator;
			}
		}
		[CRepr]
		public struct IChannelIDTuneRequest : ITuneRequest
		{
			public const new Guid IID = .(0x156eff60, 0x86f4, 0x4e28, 0x89, 0xfc, 0x10, 0x97, 0x99, 0xfd, 0x57, 0xee);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ChannelID(out BSTR ChannelID) mut => VT.get_ChannelID(ref this, out ChannelID);
			public HRESULT put_ChannelID(BSTR ChannelID) mut => VT.put_ChannelID(ref this, ChannelID);

			[CRepr]
			public struct VTable : ITuneRequest.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IChannelIDTuneRequest self, out BSTR ChannelID) get_ChannelID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IChannelIDTuneRequest self, BSTR ChannelID) put_ChannelID;
			}
		}
		[CRepr]
		public struct IChannelTuneRequest : ITuneRequest
		{
			public const new Guid IID = .(0x0369b4e0, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Channel(out int32 Channel) mut => VT.get_Channel(ref this, out Channel);
			public HRESULT put_Channel(int32 Channel) mut => VT.put_Channel(ref this, Channel);

			[CRepr]
			public struct VTable : ITuneRequest.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IChannelTuneRequest self, out int32 Channel) get_Channel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IChannelTuneRequest self, int32 Channel) put_Channel;
			}
		}
		[CRepr]
		public struct IATSCChannelTuneRequest : IChannelTuneRequest
		{
			public const new Guid IID = .(0x0369b4e1, 0x45b6, 0x11d3, 0xb6, 0x50, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MinorChannel(out int32 MinorChannel) mut => VT.get_MinorChannel(ref this, out MinorChannel);
			public HRESULT put_MinorChannel(int32 MinorChannel) mut => VT.put_MinorChannel(ref this, MinorChannel);

			[CRepr]
			public struct VTable : IChannelTuneRequest.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCChannelTuneRequest self, out int32 MinorChannel) get_MinorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCChannelTuneRequest self, int32 MinorChannel) put_MinorChannel;
			}
		}
		[CRepr]
		public struct IDigitalCableTuneRequest : IATSCChannelTuneRequest
		{
			public const new Guid IID = .(0xbad7753b, 0x6b37, 0x4810, 0xae, 0x57, 0x3c, 0xe0, 0xc4, 0xa9, 0xe6, 0xcb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_MajorChannel(out int32 pMajorChannel) mut => VT.get_MajorChannel(ref this, out pMajorChannel);
			public HRESULT put_MajorChannel(int32 MajorChannel) mut => VT.put_MajorChannel(ref this, MajorChannel);
			public HRESULT get_SourceID(out int32 pSourceID) mut => VT.get_SourceID(ref this, out pSourceID);
			public HRESULT put_SourceID(int32 SourceID) mut => VT.put_SourceID(ref this, SourceID);

			[CRepr]
			public struct VTable : IATSCChannelTuneRequest.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuneRequest self, out int32 pMajorChannel) get_MajorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuneRequest self, int32 MajorChannel) put_MajorChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuneRequest self, out int32 pSourceID) get_SourceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDigitalCableTuneRequest self, int32 SourceID) put_SourceID;
			}
		}
		[CRepr]
		public struct IDVBTuneRequest : ITuneRequest
		{
			public const new Guid IID = .(0x0d6f567e, 0xa636, 0x42bb, 0x83, 0xba, 0xce, 0x4c, 0x17, 0x04, 0xaf, 0xa2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ONID(out int32 ONID) mut => VT.get_ONID(ref this, out ONID);
			public HRESULT put_ONID(int32 ONID) mut => VT.put_ONID(ref this, ONID);
			public HRESULT get_TSID(out int32 TSID) mut => VT.get_TSID(ref this, out TSID);
			public HRESULT put_TSID(int32 TSID) mut => VT.put_TSID(ref this, TSID);
			public HRESULT get_SID(out int32 SID) mut => VT.get_SID(ref this, out SID);
			public HRESULT put_SID(int32 SID) mut => VT.put_SID(ref this, SID);

			[CRepr]
			public struct VTable : ITuneRequest.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuneRequest self, out int32 ONID) get_ONID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuneRequest self, int32 ONID) put_ONID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuneRequest self, out int32 TSID) get_TSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuneRequest self, int32 TSID) put_TSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuneRequest self, out int32 SID) get_SID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTuneRequest self, int32 SID) put_SID;
			}
		}
		[CRepr]
		public struct IMPEG2TuneRequest : ITuneRequest
		{
			public const new Guid IID = .(0xeb7d987f, 0x8a01, 0x42ad, 0xb8, 0xae, 0x57, 0x4d, 0xee, 0xe4, 0x4d, 0x1a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_TSID(out int32 TSID) mut => VT.get_TSID(ref this, out TSID);
			public HRESULT put_TSID(int32 TSID) mut => VT.put_TSID(ref this, TSID);
			public HRESULT get_ProgNo(out int32 ProgNo) mut => VT.get_ProgNo(ref this, out ProgNo);
			public HRESULT put_ProgNo(int32 ProgNo) mut => VT.put_ProgNo(ref this, ProgNo);

			[CRepr]
			public struct VTable : ITuneRequest.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2TuneRequest self, out int32 TSID) get_TSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2TuneRequest self, int32 TSID) put_TSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2TuneRequest self, out int32 ProgNo) get_ProgNo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2TuneRequest self, int32 ProgNo) put_ProgNo;
			}
		}
		[CRepr]
		public struct IMPEG2TuneRequestFactory : IDispatch
		{
			public const new Guid IID = .(0x14e11abd, 0xee37, 0x4893, 0x9e, 0xa1, 0x69, 0x64, 0xde, 0x93, 0x3e, 0x39);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateTuneRequest(ref ITuningSpace TuningSpace, out IMPEG2TuneRequest* TuneRequest) mut => VT.CreateTuneRequest(ref this, ref TuningSpace, out TuneRequest);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2TuneRequestFactory self, ref ITuningSpace TuningSpace, out IMPEG2TuneRequest* TuneRequest) CreateTuneRequest;
			}
		}
		[CRepr]
		public struct IMPEG2TuneRequestSupport : IUnknown
		{
			public const new Guid IID = .(0x1b9d5fc3, 0x5bbc, 0x4b6c, 0xbb, 0x18, 0xb9, 0xd1, 0x0e, 0x3e, 0xee, 0xbf);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IUnknown.VTable {}
		}
		[CRepr]
		public struct ITunerCap : IUnknown
		{
			public const new Guid IID = .(0xe60dfa45, 0x8d56, 0x4e65, 0xa8, 0xab, 0xd6, 0xbe, 0x94, 0x12, 0xc2, 0x49);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SupportedNetworkTypes(uint32 ulcNetworkTypesMax, out uint32 pulcNetworkTypes, out Guid pguidNetworkTypes) mut => VT.get_SupportedNetworkTypes(ref this, ulcNetworkTypesMax, out pulcNetworkTypes, out pguidNetworkTypes);
			public HRESULT get_SupportedVideoFormats(out uint32 pulAMTunerModeType, out uint32 pulAnalogVideoStandard) mut => VT.get_SupportedVideoFormats(ref this, out pulAMTunerModeType, out pulAnalogVideoStandard);
			public HRESULT get_AuxInputCount(out uint32 pulCompositeCount, out uint32 pulSvideoCount) mut => VT.get_AuxInputCount(ref this, out pulCompositeCount, out pulSvideoCount);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITunerCap self, uint32 ulcNetworkTypesMax, out uint32 pulcNetworkTypes, out Guid pguidNetworkTypes) get_SupportedNetworkTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITunerCap self, out uint32 pulAMTunerModeType, out uint32 pulAnalogVideoStandard) get_SupportedVideoFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITunerCap self, out uint32 pulCompositeCount, out uint32 pulSvideoCount) get_AuxInputCount;
			}
		}
		[CRepr]
		public struct ITunerCapEx : IUnknown
		{
			public const new Guid IID = .(0xed3e0c66, 0x18c8, 0x4ea6, 0x93, 0x00, 0xf6, 0x84, 0x1f, 0xdd, 0x35, 0xdc);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Has608_708Caption(out int16 pbHasCaption) mut => VT.get_Has608_708Caption(ref this, out pbHasCaption);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITunerCapEx self, out int16 pbHasCaption) get_Has608_708Caption;
			}
		}
		[CRepr]
		public struct ITuner : IUnknown
		{
			public const new Guid IID = .(0x28c52640, 0x018a, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_TuningSpace(out ITuningSpace* TuningSpace) mut => VT.get_TuningSpace(ref this, out TuningSpace);
			public HRESULT put_TuningSpace(ref ITuningSpace TuningSpace) mut => VT.put_TuningSpace(ref this, ref TuningSpace);
			public HRESULT EnumTuningSpaces(out IEnumTuningSpaces* ppEnum) mut => VT.EnumTuningSpaces(ref this, out ppEnum);
			public HRESULT get_TuneRequest(out ITuneRequest* TuneRequest) mut => VT.get_TuneRequest(ref this, out TuneRequest);
			public HRESULT put_TuneRequest(ref ITuneRequest TuneRequest) mut => VT.put_TuneRequest(ref this, ref TuneRequest);
			public HRESULT Validate(ref ITuneRequest TuneRequest) mut => VT.Validate(ref this, ref TuneRequest);
			public HRESULT get_PreferredComponentTypes(out IComponentTypes* ComponentTypes) mut => VT.get_PreferredComponentTypes(ref this, out ComponentTypes);
			public HRESULT put_PreferredComponentTypes(ref IComponentTypes ComponentTypes) mut => VT.put_PreferredComponentTypes(ref this, ref ComponentTypes);
			public HRESULT get_SignalStrength(out int32 Strength) mut => VT.get_SignalStrength(ref this, out Strength);
			public HRESULT TriggerSignalEvents(int32 Interval) mut => VT.TriggerSignalEvents(ref this, Interval);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, out ITuningSpace* TuningSpace) get_TuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, ref ITuningSpace TuningSpace) put_TuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, out IEnumTuningSpaces* ppEnum) EnumTuningSpaces;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, out ITuneRequest* TuneRequest) get_TuneRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, ref ITuneRequest TuneRequest) put_TuneRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, ref ITuneRequest TuneRequest) Validate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, out IComponentTypes* ComponentTypes) get_PreferredComponentTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, ref IComponentTypes ComponentTypes) put_PreferredComponentTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, out int32 Strength) get_SignalStrength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuner self, int32 Interval) TriggerSignalEvents;
			}
		}
		[CRepr]
		public struct IScanningTuner : ITuner
		{
			public const new Guid IID = .(0x1dfd0a5c, 0x0284, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SeekUp() mut => VT.SeekUp(ref this);
			public HRESULT SeekDown() mut => VT.SeekDown(ref this);
			public HRESULT ScanUp(int32 MillisecondsPause) mut => VT.ScanUp(ref this, MillisecondsPause);
			public HRESULT ScanDown(int32 MillisecondsPause) mut => VT.ScanDown(ref this, MillisecondsPause);
			public HRESULT AutoProgram() mut => VT.AutoProgram(ref this);

			[CRepr]
			public struct VTable : ITuner.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTuner self) SeekUp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTuner self) SeekDown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTuner self, int32 MillisecondsPause) ScanUp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTuner self, int32 MillisecondsPause) ScanDown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTuner self) AutoProgram;
			}
		}
		[CRepr]
		public struct IScanningTunerEx : IScanningTuner
		{
			public const new Guid IID = .(0x04bbd195, 0x0e2d, 0x4593, 0x9b, 0xd5, 0x4f, 0x90, 0x8b, 0xc3, 0x3c, 0xf5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCurrentLocator(ILocator** pILocator) mut => VT.GetCurrentLocator(ref this, pILocator);
			public HRESULT PerformExhaustiveScan(int32 dwLowerFreq, int32 dwHigherFreq, int16 bFineTune, uint hEvent) mut => VT.PerformExhaustiveScan(ref this, dwLowerFreq, dwHigherFreq, bFineTune, hEvent);
			public HRESULT TerminateCurrentScan(out int32 pcurrentFreq) mut => VT.TerminateCurrentScan(ref this, out pcurrentFreq);
			public HRESULT ResumeCurrentScan(uint hEvent) mut => VT.ResumeCurrentScan(ref this, hEvent);
			public HRESULT GetTunerScanningCapability(out int32 HardwareAssistedScanning, out int32 NumStandardsSupported, out Guid BroadcastStandards) mut => VT.GetTunerScanningCapability(ref this, out HardwareAssistedScanning, out NumStandardsSupported, out BroadcastStandards);
			public HRESULT GetTunerStatus(out int32 SecondsLeft, out int32 CurrentLockType, out int32 AutoDetect, out int32 CurrentFreq) mut => VT.GetTunerStatus(ref this, out SecondsLeft, out CurrentLockType, out AutoDetect, out CurrentFreq);
			public HRESULT GetCurrentTunerStandardCapability(Guid CurrentBroadcastStandard, out int32 SettlingTime, out int32 TvStandardsSupported) mut => VT.GetCurrentTunerStandardCapability(ref this, CurrentBroadcastStandard, out SettlingTime, out TvStandardsSupported);
			public HRESULT SetScanSignalTypeFilter(int32 ScanModulationTypes, int32 AnalogVideoStandard) mut => VT.SetScanSignalTypeFilter(ref this, ScanModulationTypes, AnalogVideoStandard);

			[CRepr]
			public struct VTable : IScanningTuner.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, ILocator** pILocator) GetCurrentLocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, int32 dwLowerFreq, int32 dwHigherFreq, int16 bFineTune, uint hEvent) PerformExhaustiveScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, out int32 pcurrentFreq) TerminateCurrentScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, uint hEvent) ResumeCurrentScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, out int32 HardwareAssistedScanning, out int32 NumStandardsSupported, out Guid BroadcastStandards) GetTunerScanningCapability;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, out int32 SecondsLeft, out int32 CurrentLockType, out int32 AutoDetect, out int32 CurrentFreq) GetTunerStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, Guid CurrentBroadcastStandard, out int32 SettlingTime, out int32 TvStandardsSupported) GetCurrentTunerStandardCapability;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScanningTunerEx self, int32 ScanModulationTypes, int32 AnalogVideoStandard) SetScanSignalTypeFilter;
			}
		}
		[CRepr]
		public struct IComponentType : IDispatch
		{
			public const new Guid IID = .(0x6a340dc0, 0x0311, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Category(out ComponentCategory Category) mut => VT.get_Category(ref this, out Category);
			public HRESULT put_Category(ComponentCategory Category) mut => VT.put_Category(ref this, Category);
			public HRESULT get_MediaMajorType(out BSTR MediaMajorType) mut => VT.get_MediaMajorType(ref this, out MediaMajorType);
			public HRESULT put_MediaMajorType(BSTR MediaMajorType) mut => VT.put_MediaMajorType(ref this, MediaMajorType);
			public HRESULT get__MediaMajorType(out Guid MediaMajorTypeGuid) mut => VT.get__MediaMajorType(ref this, out MediaMajorTypeGuid);
			public HRESULT put__MediaMajorType(in Guid MediaMajorTypeGuid) mut => VT.put__MediaMajorType(ref this, MediaMajorTypeGuid);
			public HRESULT get_MediaSubType(out BSTR MediaSubType) mut => VT.get_MediaSubType(ref this, out MediaSubType);
			public HRESULT put_MediaSubType(BSTR MediaSubType) mut => VT.put_MediaSubType(ref this, MediaSubType);
			public HRESULT get__MediaSubType(out Guid MediaSubTypeGuid) mut => VT.get__MediaSubType(ref this, out MediaSubTypeGuid);
			public HRESULT put__MediaSubType(in Guid MediaSubTypeGuid) mut => VT.put__MediaSubType(ref this, MediaSubTypeGuid);
			public HRESULT get_MediaFormatType(out BSTR MediaFormatType) mut => VT.get_MediaFormatType(ref this, out MediaFormatType);
			public HRESULT put_MediaFormatType(BSTR MediaFormatType) mut => VT.put_MediaFormatType(ref this, MediaFormatType);
			public HRESULT get__MediaFormatType(out Guid MediaFormatTypeGuid) mut => VT.get__MediaFormatType(ref this, out MediaFormatTypeGuid);
			public HRESULT put__MediaFormatType(in Guid MediaFormatTypeGuid) mut => VT.put__MediaFormatType(ref this, MediaFormatTypeGuid);
			public HRESULT get_MediaType(out AM_MEDIA_TYPE MediaType) mut => VT.get_MediaType(ref this, out MediaType);
			public HRESULT put_MediaType(ref AM_MEDIA_TYPE MediaType) mut => VT.put_MediaType(ref this, ref MediaType);
			public HRESULT Clone(out IComponentType* NewCT) mut => VT.Clone(ref this, out NewCT);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out ComponentCategory Category) get_Category;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, ComponentCategory Category) put_Category;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out BSTR MediaMajorType) get_MediaMajorType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, BSTR MediaMajorType) put_MediaMajorType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out Guid MediaMajorTypeGuid) get__MediaMajorType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, in Guid MediaMajorTypeGuid) put__MediaMajorType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out BSTR MediaSubType) get_MediaSubType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, BSTR MediaSubType) put_MediaSubType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out Guid MediaSubTypeGuid) get__MediaSubType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, in Guid MediaSubTypeGuid) put__MediaSubType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out BSTR MediaFormatType) get_MediaFormatType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, BSTR MediaFormatType) put_MediaFormatType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out Guid MediaFormatTypeGuid) get__MediaFormatType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, in Guid MediaFormatTypeGuid) put__MediaFormatType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out AM_MEDIA_TYPE MediaType) get_MediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, ref AM_MEDIA_TYPE MediaType) put_MediaType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentType self, out IComponentType* NewCT) Clone;
			}
		}
		[CRepr]
		public struct ILanguageComponentType : IComponentType
		{
			public const new Guid IID = .(0xb874c8ba, 0x0fa2, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_LangID(out int32 LangID) mut => VT.get_LangID(ref this, out LangID);
			public HRESULT put_LangID(int32 LangID) mut => VT.put_LangID(ref this, LangID);

			[CRepr]
			public struct VTable : IComponentType.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILanguageComponentType self, out int32 LangID) get_LangID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILanguageComponentType self, int32 LangID) put_LangID;
			}
		}
		[CRepr]
		public struct IMPEG2ComponentType : ILanguageComponentType
		{
			public const new Guid IID = .(0x2c073d84, 0xb51c, 0x48c9, 0xaa, 0x9f, 0x68, 0x97, 0x1e, 0x1f, 0x6e, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_StreamType(out MPEG2StreamType MP2StreamType) mut => VT.get_StreamType(ref this, out MP2StreamType);
			public HRESULT put_StreamType(MPEG2StreamType MP2StreamType) mut => VT.put_StreamType(ref this, MP2StreamType);

			[CRepr]
			public struct VTable : ILanguageComponentType.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2ComponentType self, out MPEG2StreamType MP2StreamType) get_StreamType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2ComponentType self, MPEG2StreamType MP2StreamType) put_StreamType;
			}
		}
		[CRepr]
		public struct IATSCComponentType : IMPEG2ComponentType
		{
			public const new Guid IID = .(0xfc189e4d, 0x7bd4, 0x4125, 0xb3, 0xb3, 0x3a, 0x76, 0xa3, 0x32, 0xcc, 0x96);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Flags(out int32 Flags) mut => VT.get_Flags(ref this, out Flags);
			public HRESULT put_Flags(int32 flags) mut => VT.put_Flags(ref this, flags);

			[CRepr]
			public struct VTable : IMPEG2ComponentType.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCComponentType self, out int32 Flags) get_Flags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCComponentType self, int32 flags) put_Flags;
			}
		}
		[CRepr]
		public struct IEnumComponentTypes : IUnknown
		{
			public const new Guid IID = .(0x8a674b4a, 0x1f63, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, IComponentType** rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumComponentTypes* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponentTypes self, uint32 celt, IComponentType** rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponentTypes self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponentTypes self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponentTypes self, out IEnumComponentTypes* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IComponentTypes : IDispatch
		{
			public const new Guid IID = .(0x0dc13d4a, 0x0313, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 Count) mut => VT.get_Count(ref this, out Count);
			public HRESULT get__NewEnum(out IEnumVARIANT* ppNewEnum) mut => VT.get__NewEnum(ref this, out ppNewEnum);
			public HRESULT EnumComponentTypes(out IEnumComponentTypes* ppNewEnum) mut => VT.EnumComponentTypes(ref this, out ppNewEnum);
			public HRESULT get_Item(VARIANT Index, out IComponentType* ComponentType) mut => VT.get_Item(ref this, Index, out ComponentType);
			public HRESULT put_Item(VARIANT Index, ref IComponentType ComponentType) mut => VT.put_Item(ref this, Index, ref ComponentType);
			public HRESULT Add(ref IComponentType ComponentType, out VARIANT NewIndex) mut => VT.Add(ref this, ref ComponentType, out NewIndex);
			public HRESULT Remove(VARIANT Index) mut => VT.Remove(ref this, Index);
			public HRESULT Clone(out IComponentTypes* NewList) mut => VT.Clone(ref this, out NewList);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, out int32 Count) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, out IEnumVARIANT* ppNewEnum) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, out IEnumComponentTypes* ppNewEnum) EnumComponentTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, VARIANT Index, out IComponentType* ComponentType) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, VARIANT Index, ref IComponentType ComponentType) put_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, ref IComponentType ComponentType, out VARIANT NewIndex) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, VARIANT Index) Remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentTypes self, out IComponentTypes* NewList) Clone;
			}
		}
		[CRepr]
		public struct IComponent : IDispatch
		{
			public const new Guid IID = .(0x1a5576fc, 0x0e19, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Type(out IComponentType* CT) mut => VT.get_Type(ref this, out CT);
			public HRESULT put_Type(ref IComponentType CT) mut => VT.put_Type(ref this, ref CT);
			public HRESULT get_DescLangID(out int32 LangID) mut => VT.get_DescLangID(ref this, out LangID);
			public HRESULT put_DescLangID(int32 LangID) mut => VT.put_DescLangID(ref this, LangID);
			public HRESULT get_Status(out ComponentStatus Status) mut => VT.get_Status(ref this, out Status);
			public HRESULT put_Status(ComponentStatus Status) mut => VT.put_Status(ref this, Status);
			public HRESULT get_Description(out BSTR Description) mut => VT.get_Description(ref this, out Description);
			public HRESULT put_Description(BSTR Description) mut => VT.put_Description(ref this, Description);
			public HRESULT Clone(out IComponent* NewComponent) mut => VT.Clone(ref this, out NewComponent);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, out IComponentType* CT) get_Type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, ref IComponentType CT) put_Type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, out int32 LangID) get_DescLangID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, int32 LangID) put_DescLangID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, out ComponentStatus Status) get_Status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, ComponentStatus Status) put_Status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, out BSTR Description) get_Description;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, BSTR Description) put_Description;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponent self, out IComponent* NewComponent) Clone;
			}
		}
		[CRepr]
		public struct IAnalogAudioComponentType : IComponentType
		{
			public const new Guid IID = .(0x2cfeb2a8, 0x1787, 0x4a24, 0xa9, 0x41, 0xc6, 0xea, 0xec, 0x39, 0xc8, 0x42);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AnalogAudioMode(out TVAudioMode Mode) mut => VT.get_AnalogAudioMode(ref this, out Mode);
			public HRESULT put_AnalogAudioMode(TVAudioMode Mode) mut => VT.put_AnalogAudioMode(ref this, Mode);

			[CRepr]
			public struct VTable : IComponentType.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogAudioComponentType self, out TVAudioMode Mode) get_AnalogAudioMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogAudioComponentType self, TVAudioMode Mode) put_AnalogAudioMode;
			}
		}
		[CRepr]
		public struct IMPEG2Component : IComponent
		{
			public const new Guid IID = .(0x1493e353, 0x1eb6, 0x473c, 0x80, 0x2d, 0x8e, 0x6b, 0x8e, 0xc9, 0xd2, 0xa9);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_PID(out int32 PID) mut => VT.get_PID(ref this, out PID);
			public HRESULT put_PID(int32 PID) mut => VT.put_PID(ref this, PID);
			public HRESULT get_PCRPID(out int32 PCRPID) mut => VT.get_PCRPID(ref this, out PCRPID);
			public HRESULT put_PCRPID(int32 PCRPID) mut => VT.put_PCRPID(ref this, PCRPID);
			public HRESULT get_ProgramNumber(out int32 ProgramNumber) mut => VT.get_ProgramNumber(ref this, out ProgramNumber);
			public HRESULT put_ProgramNumber(int32 ProgramNumber) mut => VT.put_ProgramNumber(ref this, ProgramNumber);

			[CRepr]
			public struct VTable : IComponent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2Component self, out int32 PID) get_PID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2Component self, int32 PID) put_PID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2Component self, out int32 PCRPID) get_PCRPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2Component self, int32 PCRPID) put_PCRPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2Component self, out int32 ProgramNumber) get_ProgramNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2Component self, int32 ProgramNumber) put_ProgramNumber;
			}
		}
		[CRepr]
		public struct IEnumComponents : IUnknown
		{
			public const new Guid IID = .(0x2a6e2939, 0x2595, 0x11d3, 0xb6, 0x4c, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, IComponent** rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumComponents* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponents self, uint32 celt, IComponent** rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponents self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponents self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumComponents self, out IEnumComponents* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IComponents : IDispatch
		{
			public const new Guid IID = .(0x39a48091, 0xfffe, 0x4182, 0xa1, 0x61, 0x3f, 0xf8, 0x02, 0x64, 0x0e, 0x26);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 Count) mut => VT.get_Count(ref this, out Count);
			public HRESULT get__NewEnum(out IEnumVARIANT* ppNewEnum) mut => VT.get__NewEnum(ref this, out ppNewEnum);
			public HRESULT EnumComponents(out IEnumComponents* ppNewEnum) mut => VT.EnumComponents(ref this, out ppNewEnum);
			public HRESULT get_Item(VARIANT Index, out IComponent* ppComponent) mut => VT.get_Item(ref this, Index, out ppComponent);
			public HRESULT Add(ref IComponent Component, out VARIANT NewIndex) mut => VT.Add(ref this, ref Component, out NewIndex);
			public HRESULT Remove(VARIANT Index) mut => VT.Remove(ref this, Index);
			public HRESULT Clone(out IComponents* NewList) mut => VT.Clone(ref this, out NewList);
			public HRESULT put_Item(VARIANT Index, ref IComponent ppComponent) mut => VT.put_Item(ref this, Index, ref ppComponent);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, out int32 Count) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, out IEnumVARIANT* ppNewEnum) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, out IEnumComponents* ppNewEnum) EnumComponents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, VARIANT Index, out IComponent* ppComponent) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, ref IComponent Component, out VARIANT NewIndex) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, VARIANT Index) Remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, out IComponents* NewList) Clone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponents self, VARIANT Index, ref IComponent ppComponent) put_Item;
			}
		}
		[CRepr]
		public struct IComponentsOld : IDispatch
		{
			public const new Guid IID = .(0xfcd01846, 0x0e19, 0x11d3, 0x9d, 0x8e, 0x00, 0xc0, 0x4f, 0x72, 0xd9, 0x80);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 Count) mut => VT.get_Count(ref this, out Count);
			public HRESULT get__NewEnum(out IEnumVARIANT* ppNewEnum) mut => VT.get__NewEnum(ref this, out ppNewEnum);
			public HRESULT EnumComponents(out IEnumComponents* ppNewEnum) mut => VT.EnumComponents(ref this, out ppNewEnum);
			public HRESULT get_Item(VARIANT Index, out IComponent* ppComponent) mut => VT.get_Item(ref this, Index, out ppComponent);
			public HRESULT Add(ref IComponent Component, out VARIANT NewIndex) mut => VT.Add(ref this, ref Component, out NewIndex);
			public HRESULT Remove(VARIANT Index) mut => VT.Remove(ref this, Index);
			public HRESULT Clone(out IComponents* NewList) mut => VT.Clone(ref this, out NewList);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, out int32 Count) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, out IEnumVARIANT* ppNewEnum) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, out IEnumComponents* ppNewEnum) EnumComponents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, VARIANT Index, out IComponent* ppComponent) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, ref IComponent Component, out VARIANT NewIndex) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, VARIANT Index) Remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IComponentsOld self, out IComponents* NewList) Clone;
			}
		}
		[CRepr]
		public struct ILocator : IDispatch
		{
			public const new Guid IID = .(0x286d7f89, 0x760c, 0x4f89, 0x80, 0xc4, 0x66, 0x84, 0x1d, 0x25, 0x07, 0xaa);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_CarrierFrequency(out int32 Frequency) mut => VT.get_CarrierFrequency(ref this, out Frequency);
			public HRESULT put_CarrierFrequency(int32 Frequency) mut => VT.put_CarrierFrequency(ref this, Frequency);
			public HRESULT get_InnerFEC(out FECMethod FEC) mut => VT.get_InnerFEC(ref this, out FEC);
			public HRESULT put_InnerFEC(FECMethod FEC) mut => VT.put_InnerFEC(ref this, FEC);
			public HRESULT get_InnerFECRate(out BinaryConvolutionCodeRate FEC) mut => VT.get_InnerFECRate(ref this, out FEC);
			public HRESULT put_InnerFECRate(BinaryConvolutionCodeRate FEC) mut => VT.put_InnerFECRate(ref this, FEC);
			public HRESULT get_OuterFEC(out FECMethod FEC) mut => VT.get_OuterFEC(ref this, out FEC);
			public HRESULT put_OuterFEC(FECMethod FEC) mut => VT.put_OuterFEC(ref this, FEC);
			public HRESULT get_OuterFECRate(out BinaryConvolutionCodeRate FEC) mut => VT.get_OuterFECRate(ref this, out FEC);
			public HRESULT put_OuterFECRate(BinaryConvolutionCodeRate FEC) mut => VT.put_OuterFECRate(ref this, FEC);
			public HRESULT get_Modulation(out ModulationType Modulation) mut => VT.get_Modulation(ref this, out Modulation);
			public HRESULT put_Modulation(ModulationType Modulation) mut => VT.put_Modulation(ref this, Modulation);
			public HRESULT get_SymbolRate(out int32 Rate) mut => VT.get_SymbolRate(ref this, out Rate);
			public HRESULT put_SymbolRate(int32 Rate) mut => VT.put_SymbolRate(ref this, Rate);
			public HRESULT Clone(out ILocator* NewLocator) mut => VT.Clone(ref this, out NewLocator);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out int32 Frequency) get_CarrierFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, int32 Frequency) put_CarrierFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out FECMethod FEC) get_InnerFEC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, FECMethod FEC) put_InnerFEC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out BinaryConvolutionCodeRate FEC) get_InnerFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, BinaryConvolutionCodeRate FEC) put_InnerFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out FECMethod FEC) get_OuterFEC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, FECMethod FEC) put_OuterFEC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out BinaryConvolutionCodeRate FEC) get_OuterFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, BinaryConvolutionCodeRate FEC) put_OuterFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out ModulationType Modulation) get_Modulation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, ModulationType Modulation) put_Modulation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out int32 Rate) get_SymbolRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, int32 Rate) put_SymbolRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILocator self, out ILocator* NewLocator) Clone;
			}
		}
		[CRepr]
		public struct IAnalogLocator : ILocator
		{
			public const new Guid IID = .(0x34d1f26b, 0xe339, 0x430d, 0xab, 0xce, 0x73, 0x8c, 0xb4, 0x89, 0x84, 0xdc);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_VideoStandard(out AnalogVideoStandard AVS) mut => VT.get_VideoStandard(ref this, out AVS);
			public HRESULT put_VideoStandard(AnalogVideoStandard AVS) mut => VT.put_VideoStandard(ref this, AVS);

			[CRepr]
			public struct VTable : ILocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogLocator self, out AnalogVideoStandard AVS) get_VideoStandard;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnalogLocator self, AnalogVideoStandard AVS) put_VideoStandard;
			}
		}
		[CRepr]
		public struct IDigitalLocator : ILocator
		{
			public const new Guid IID = .(0x19b595d8, 0x839a, 0x47f0, 0x96, 0xdf, 0x4f, 0x19, 0x4f, 0x3c, 0x76, 0x8c);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : ILocator.VTable {}
		}
		[CRepr]
		public struct IATSCLocator : IDigitalLocator
		{
			public const new Guid IID = .(0xbf8d986f, 0x8c2b, 0x4131, 0x94, 0xd7, 0x4d, 0x3d, 0x9f, 0xcc, 0x21, 0xef);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_PhysicalChannel(out int32 PhysicalChannel) mut => VT.get_PhysicalChannel(ref this, out PhysicalChannel);
			public HRESULT put_PhysicalChannel(int32 PhysicalChannel) mut => VT.put_PhysicalChannel(ref this, PhysicalChannel);
			public HRESULT get_TSID(out int32 TSID) mut => VT.get_TSID(ref this, out TSID);
			public HRESULT put_TSID(int32 TSID) mut => VT.put_TSID(ref this, TSID);

			[CRepr]
			public struct VTable : IDigitalLocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCLocator self, out int32 PhysicalChannel) get_PhysicalChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCLocator self, int32 PhysicalChannel) put_PhysicalChannel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCLocator self, out int32 TSID) get_TSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCLocator self, int32 TSID) put_TSID;
			}
		}
		[CRepr]
		public struct IATSCLocator2 : IATSCLocator
		{
			public const new Guid IID = .(0x612aa885, 0x66cf, 0x4090, 0xba, 0x0a, 0x56, 0x6f, 0x53, 0x12, 0xe4, 0xca);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ProgramNumber(out int32 ProgramNumber) mut => VT.get_ProgramNumber(ref this, out ProgramNumber);
			public HRESULT put_ProgramNumber(int32 ProgramNumber) mut => VT.put_ProgramNumber(ref this, ProgramNumber);

			[CRepr]
			public struct VTable : IATSCLocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCLocator2 self, out int32 ProgramNumber) get_ProgramNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSCLocator2 self, int32 ProgramNumber) put_ProgramNumber;
			}
		}
		[CRepr]
		public struct IDigitalCableLocator : IATSCLocator2
		{
			public const new Guid IID = .(0x48f66a11, 0x171a, 0x419a, 0x95, 0x25, 0xbe, 0xee, 0xcd, 0x51, 0x58, 0x4c);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IATSCLocator2.VTable {}
		}
		[CRepr]
		public struct IDVBTLocator : IDigitalLocator
		{
			public const new Guid IID = .(0x8664da16, 0xdda2, 0x42ac, 0x92, 0x6a, 0xc1, 0x8f, 0x91, 0x27, 0xc3, 0x02);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Bandwidth(out int32 BandWidthVal) mut => VT.get_Bandwidth(ref this, out BandWidthVal);
			public HRESULT put_Bandwidth(int32 BandwidthVal) mut => VT.put_Bandwidth(ref this, BandwidthVal);
			public HRESULT get_LPInnerFEC(out FECMethod FEC) mut => VT.get_LPInnerFEC(ref this, out FEC);
			public HRESULT put_LPInnerFEC(FECMethod FEC) mut => VT.put_LPInnerFEC(ref this, FEC);
			public HRESULT get_LPInnerFECRate(out BinaryConvolutionCodeRate FEC) mut => VT.get_LPInnerFECRate(ref this, out FEC);
			public HRESULT put_LPInnerFECRate(BinaryConvolutionCodeRate FEC) mut => VT.put_LPInnerFECRate(ref this, FEC);
			public HRESULT get_HAlpha(out HierarchyAlpha Alpha) mut => VT.get_HAlpha(ref this, out Alpha);
			public HRESULT put_HAlpha(HierarchyAlpha Alpha) mut => VT.put_HAlpha(ref this, Alpha);
			public HRESULT get_Guard(out GuardInterval GI) mut => VT.get_Guard(ref this, out GI);
			public HRESULT put_Guard(GuardInterval GI) mut => VT.put_Guard(ref this, GI);
			public HRESULT get_Mode(out TransmissionMode mode) mut => VT.get_Mode(ref this, out mode);
			public HRESULT put_Mode(TransmissionMode mode) mut => VT.put_Mode(ref this, mode);
			public HRESULT get_OtherFrequencyInUse(out int16 OtherFrequencyInUseVal) mut => VT.get_OtherFrequencyInUse(ref this, out OtherFrequencyInUseVal);
			public HRESULT put_OtherFrequencyInUse(int16 OtherFrequencyInUseVal) mut => VT.put_OtherFrequencyInUse(ref this, OtherFrequencyInUseVal);

			[CRepr]
			public struct VTable : IDigitalLocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out int32 BandWidthVal) get_Bandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, int32 BandwidthVal) put_Bandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out FECMethod FEC) get_LPInnerFEC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, FECMethod FEC) put_LPInnerFEC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out BinaryConvolutionCodeRate FEC) get_LPInnerFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, BinaryConvolutionCodeRate FEC) put_LPInnerFECRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out HierarchyAlpha Alpha) get_HAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, HierarchyAlpha Alpha) put_HAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out GuardInterval GI) get_Guard;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, GuardInterval GI) put_Guard;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out TransmissionMode mode) get_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, TransmissionMode mode) put_Mode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, out int16 OtherFrequencyInUseVal) get_OtherFrequencyInUse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator self, int16 OtherFrequencyInUseVal) put_OtherFrequencyInUse;
			}
		}
		[CRepr]
		public struct IDVBTLocator2 : IDVBTLocator
		{
			public const new Guid IID = .(0x448a2edf, 0xae95, 0x4b43, 0xa3, 0xcc, 0x74, 0x78, 0x43, 0xc4, 0x53, 0xd4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_PhysicalLayerPipeId(out int32 PhysicalLayerPipeIdVal) mut => VT.get_PhysicalLayerPipeId(ref this, out PhysicalLayerPipeIdVal);
			public HRESULT put_PhysicalLayerPipeId(int32 PhysicalLayerPipeIdVal) mut => VT.put_PhysicalLayerPipeId(ref this, PhysicalLayerPipeIdVal);

			[CRepr]
			public struct VTable : IDVBTLocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator2 self, out int32 PhysicalLayerPipeIdVal) get_PhysicalLayerPipeId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBTLocator2 self, int32 PhysicalLayerPipeIdVal) put_PhysicalLayerPipeId;
			}
		}
		[CRepr]
		public struct IDVBSLocator : IDigitalLocator
		{
			public const new Guid IID = .(0x3d7c353c, 0x0d04, 0x45f1, 0xa7, 0x42, 0xf9, 0x7c, 0xc1, 0x18, 0x8d, 0xc8);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_SignalPolarisation(out Polarisation PolarisationVal) mut => VT.get_SignalPolarisation(ref this, out PolarisationVal);
			public HRESULT put_SignalPolarisation(Polarisation PolarisationVal) mut => VT.put_SignalPolarisation(ref this, PolarisationVal);
			public HRESULT get_WestPosition(out int16 WestLongitude) mut => VT.get_WestPosition(ref this, out WestLongitude);
			public HRESULT put_WestPosition(int16 WestLongitude) mut => VT.put_WestPosition(ref this, WestLongitude);
			public HRESULT get_OrbitalPosition(out int32 longitude) mut => VT.get_OrbitalPosition(ref this, out longitude);
			public HRESULT put_OrbitalPosition(int32 longitude) mut => VT.put_OrbitalPosition(ref this, longitude);
			public HRESULT get_Azimuth(out int32 Azimuth) mut => VT.get_Azimuth(ref this, out Azimuth);
			public HRESULT put_Azimuth(int32 Azimuth) mut => VT.put_Azimuth(ref this, Azimuth);
			public HRESULT get_Elevation(out int32 Elevation) mut => VT.get_Elevation(ref this, out Elevation);
			public HRESULT put_Elevation(int32 Elevation) mut => VT.put_Elevation(ref this, Elevation);

			[CRepr]
			public struct VTable : IDigitalLocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, out Polarisation PolarisationVal) get_SignalPolarisation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, Polarisation PolarisationVal) put_SignalPolarisation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, out int16 WestLongitude) get_WestPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, int16 WestLongitude) put_WestPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, out int32 longitude) get_OrbitalPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, int32 longitude) put_OrbitalPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, out int32 Azimuth) get_Azimuth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, int32 Azimuth) put_Azimuth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, out int32 Elevation) get_Elevation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator self, int32 Elevation) put_Elevation;
			}
		}
		[CRepr]
		public struct IDVBSLocator2 : IDVBSLocator
		{
			public const new Guid IID = .(0x6044634a, 0x1733, 0x4f99, 0xb9, 0x82, 0x5f, 0xb1, 0x2a, 0xfc, 0xe4, 0xf0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_DiseqLNBSource(out LNB_Source DiseqLNBSourceVal) mut => VT.get_DiseqLNBSource(ref this, out DiseqLNBSourceVal);
			public HRESULT put_DiseqLNBSource(LNB_Source DiseqLNBSourceVal) mut => VT.put_DiseqLNBSource(ref this, DiseqLNBSourceVal);
			public HRESULT get_LocalOscillatorOverrideLow(out int32 LocalOscillatorOverrideLowVal) mut => VT.get_LocalOscillatorOverrideLow(ref this, out LocalOscillatorOverrideLowVal);
			public HRESULT put_LocalOscillatorOverrideLow(int32 LocalOscillatorOverrideLowVal) mut => VT.put_LocalOscillatorOverrideLow(ref this, LocalOscillatorOverrideLowVal);
			public HRESULT get_LocalOscillatorOverrideHigh(out int32 LocalOscillatorOverrideHighVal) mut => VT.get_LocalOscillatorOverrideHigh(ref this, out LocalOscillatorOverrideHighVal);
			public HRESULT put_LocalOscillatorOverrideHigh(int32 LocalOscillatorOverrideHighVal) mut => VT.put_LocalOscillatorOverrideHigh(ref this, LocalOscillatorOverrideHighVal);
			public HRESULT get_LocalLNBSwitchOverride(out int32 LocalLNBSwitchOverrideVal) mut => VT.get_LocalLNBSwitchOverride(ref this, out LocalLNBSwitchOverrideVal);
			public HRESULT put_LocalLNBSwitchOverride(int32 LocalLNBSwitchOverrideVal) mut => VT.put_LocalLNBSwitchOverride(ref this, LocalLNBSwitchOverrideVal);
			public HRESULT get_LocalSpectralInversionOverride(out SpectralInversion LocalSpectralInversionOverrideVal) mut => VT.get_LocalSpectralInversionOverride(ref this, out LocalSpectralInversionOverrideVal);
			public HRESULT put_LocalSpectralInversionOverride(SpectralInversion LocalSpectralInversionOverrideVal) mut => VT.put_LocalSpectralInversionOverride(ref this, LocalSpectralInversionOverrideVal);
			public HRESULT get_SignalRollOff(out RollOff RollOffVal) mut => VT.get_SignalRollOff(ref this, out RollOffVal);
			public HRESULT put_SignalRollOff(RollOff RollOffVal) mut => VT.put_SignalRollOff(ref this, RollOffVal);
			public HRESULT get_SignalPilot(out Pilot PilotVal) mut => VT.get_SignalPilot(ref this, out PilotVal);
			public HRESULT put_SignalPilot(Pilot PilotVal) mut => VT.put_SignalPilot(ref this, PilotVal);

			[CRepr]
			public struct VTable : IDVBSLocator.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out LNB_Source DiseqLNBSourceVal) get_DiseqLNBSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, LNB_Source DiseqLNBSourceVal) put_DiseqLNBSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out int32 LocalOscillatorOverrideLowVal) get_LocalOscillatorOverrideLow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, int32 LocalOscillatorOverrideLowVal) put_LocalOscillatorOverrideLow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out int32 LocalOscillatorOverrideHighVal) get_LocalOscillatorOverrideHigh;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, int32 LocalOscillatorOverrideHighVal) put_LocalOscillatorOverrideHigh;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out int32 LocalLNBSwitchOverrideVal) get_LocalLNBSwitchOverride;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, int32 LocalLNBSwitchOverrideVal) put_LocalLNBSwitchOverride;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out SpectralInversion LocalSpectralInversionOverrideVal) get_LocalSpectralInversionOverride;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, SpectralInversion LocalSpectralInversionOverrideVal) put_LocalSpectralInversionOverride;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out RollOff RollOffVal) get_SignalRollOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, RollOff RollOffVal) put_SignalRollOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, out Pilot PilotVal) get_SignalPilot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVBSLocator2 self, Pilot PilotVal) put_SignalPilot;
			}
		}
		[CRepr]
		public struct IDVBCLocator : IDigitalLocator
		{
			public const new Guid IID = .(0x6e42f36e, 0x1dd2, 0x43c4, 0x9f, 0x78, 0x69, 0xd2, 0x5a, 0xe3, 0x90, 0x34);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDigitalLocator.VTable {}
		}
		[CRepr]
		public struct IISDBSLocator : IDVBSLocator
		{
			public const new Guid IID = .(0xc9897087, 0xe29c, 0x473f, 0x9e, 0x4b, 0x70, 0x72, 0x12, 0x3d, 0xea, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDVBSLocator.VTable {}
		}
		[CRepr]
		public struct IESOpenMmiEvent : IESEvent
		{
			public const new Guid IID = .(0xba4b6526, 0x1a35, 0x4635, 0x8b, 0x56, 0x3e, 0xc6, 0x12, 0x74, 0x6a, 0x8c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDialogNumber(out uint32 pDialogRequest, out uint32 pDialogNumber) mut => VT.GetDialogNumber(ref this, out pDialogRequest, out pDialogNumber);
			public HRESULT GetDialogType(out Guid guidDialogType) mut => VT.GetDialogType(ref this, out guidDialogType);
			public HRESULT GetDialogData(out SAFEARRAY* pbData) mut => VT.GetDialogData(ref this, out pbData);
			public HRESULT GetDialogStringData(out BSTR pbstrBaseUrl, out BSTR pbstrData) mut => VT.GetDialogStringData(ref this, out pbstrBaseUrl, out pbstrData);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESOpenMmiEvent self, out uint32 pDialogRequest, out uint32 pDialogNumber) GetDialogNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESOpenMmiEvent self, out Guid guidDialogType) GetDialogType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESOpenMmiEvent self, out SAFEARRAY* pbData) GetDialogData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESOpenMmiEvent self, out BSTR pbstrBaseUrl, out BSTR pbstrData) GetDialogStringData;
			}
		}
		[CRepr]
		public struct IESCloseMmiEvent : IESEvent
		{
			public const new Guid IID = .(0x6b80e96f, 0x55e2, 0x45aa, 0xb7, 0x54, 0x0c, 0x23, 0xc8, 0xe7, 0xd5, 0xc1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDialogNumber(out uint32 pDialogNumber) mut => VT.GetDialogNumber(ref this, out pDialogNumber);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESCloseMmiEvent self, out uint32 pDialogNumber) GetDialogNumber;
			}
		}
		[CRepr]
		public struct IESValueUpdatedEvent : IESEvent
		{
			public const new Guid IID = .(0x8a24c46e, 0xbb63, 0x4664, 0x86, 0x02, 0x5d, 0x9c, 0x71, 0x8c, 0x14, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetValueNames(out SAFEARRAY* pbstrNames) mut => VT.GetValueNames(ref this, out pbstrNames);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESValueUpdatedEvent self, out SAFEARRAY* pbstrNames) GetValueNames;
			}
		}
		[CRepr]
		public struct IESRequestTunerEvent : IESEvent
		{
			public const new Guid IID = .(0x54c7a5e8, 0xc3bb, 0x4f51, 0xaf, 0x14, 0xe0, 0xe2, 0xc0, 0xe3, 0x4c, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPriority(out uint8 pbyPriority) mut => VT.GetPriority(ref this, out pbyPriority);
			public HRESULT GetReason(out uint8 pbyReason) mut => VT.GetReason(ref this, out pbyReason);
			public HRESULT GetConsequences(out uint8 pbyConsequences) mut => VT.GetConsequences(ref this, out pbyConsequences);
			public HRESULT GetEstimatedTime(out uint32 pdwEstimatedTime) mut => VT.GetEstimatedTime(ref this, out pdwEstimatedTime);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESRequestTunerEvent self, out uint8 pbyPriority) GetPriority;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESRequestTunerEvent self, out uint8 pbyReason) GetReason;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESRequestTunerEvent self, out uint8 pbyConsequences) GetConsequences;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESRequestTunerEvent self, out uint32 pdwEstimatedTime) GetEstimatedTime;
			}
		}
		[CRepr]
		public struct IESIsdbCasResponseEvent : IESEvent
		{
			public const new Guid IID = .(0x2017cb03, 0xdc0f, 0x4c24, 0x83, 0xca, 0x36, 0x30, 0x7b, 0x2c, 0xd1, 0x9f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRequestId(out uint32 pRequestId) mut => VT.GetRequestId(ref this, out pRequestId);
			public HRESULT GetStatus(out uint32 pStatus) mut => VT.GetStatus(ref this, out pStatus);
			public HRESULT GetDataLength(out uint32 pRequestLength) mut => VT.GetDataLength(ref this, out pRequestLength);
			public HRESULT GetResponseData(out SAFEARRAY* pbData) mut => VT.GetResponseData(ref this, out pbData);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESIsdbCasResponseEvent self, out uint32 pRequestId) GetRequestId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESIsdbCasResponseEvent self, out uint32 pStatus) GetStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESIsdbCasResponseEvent self, out uint32 pRequestLength) GetDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESIsdbCasResponseEvent self, out SAFEARRAY* pbData) GetResponseData;
			}
		}
		[CRepr]
		public struct IGpnvsCommonBase : IUnknown
		{
			public const new Guid IID = .(0x907e0b5c, 0xe42d, 0x4f04, 0x91, 0xf0, 0x26, 0xf4, 0x01, 0xf3, 0x69, 0x07);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetValueUpdateName(out BSTR pbstrName) mut => VT.GetValueUpdateName(ref this, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGpnvsCommonBase self, out BSTR pbstrName) GetValueUpdateName;
			}
		}
		[CRepr]
		public struct IESEventFactory : IUnknown
		{
			public const new Guid IID = .(0x506a09b8, 0x7f86, 0x4e04, 0xac, 0x05, 0x33, 0x03, 0xbf, 0xe8, 0xfc, 0x49);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateESEvent(ref IUnknown pServiceProvider, uint32 dwEventId, Guid guidEventType, uint32 dwEventDataLength, uint8* pEventData, BSTR bstrBaseUrl, ref IUnknown pInitContext, out IESEvent* ppESEvent) mut => VT.CreateESEvent(ref this, ref pServiceProvider, dwEventId, guidEventType, dwEventDataLength, pEventData, bstrBaseUrl, ref pInitContext, out ppESEvent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventFactory self, ref IUnknown pServiceProvider, uint32 dwEventId, Guid guidEventType, uint32 dwEventDataLength, uint8* pEventData, BSTR bstrBaseUrl, ref IUnknown pInitContext, out IESEvent* ppESEvent) CreateESEvent;
			}
		}
		[CRepr]
		public struct IESLicenseRenewalResultEvent : IESEvent
		{
			public const new Guid IID = .(0xd5a48ef5, 0xa81b, 0x4df0, 0xac, 0xaa, 0x5e, 0x35, 0xe7, 0xea, 0x45, 0xd4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCallersId(out uint32 pdwCallersId) mut => VT.GetCallersId(ref this, out pdwCallersId);
			public HRESULT GetFileName(out BSTR pbstrFilename) mut => VT.GetFileName(ref this, out pbstrFilename);
			public HRESULT IsRenewalSuccessful(out BOOL pfRenewalSuccessful) mut => VT.IsRenewalSuccessful(ref this, out pfRenewalSuccessful);
			public HRESULT IsCheckEntitlementCallRequired(out BOOL pfCheckEntTokenCallNeeded) mut => VT.IsCheckEntitlementCallRequired(ref this, out pfCheckEntTokenCallNeeded);
			public HRESULT GetDescrambledStatus(out uint32 pDescrambledStatus) mut => VT.GetDescrambledStatus(ref this, out pDescrambledStatus);
			public HRESULT GetRenewalResultCode(out uint32 pdwRenewalResultCode) mut => VT.GetRenewalResultCode(ref this, out pdwRenewalResultCode);
			public HRESULT GetCASFailureCode(out uint32 pdwCASFailureCode) mut => VT.GetCASFailureCode(ref this, out pdwCASFailureCode);
			public HRESULT GetRenewalHResult(out HRESULT phr) mut => VT.GetRenewalHResult(ref this, out phr);
			public HRESULT GetEntitlementTokenLength(out uint32 pdwLength) mut => VT.GetEntitlementTokenLength(ref this, out pdwLength);
			public HRESULT GetEntitlementToken(out SAFEARRAY* pbData) mut => VT.GetEntitlementToken(ref this, out pbData);
			public HRESULT GetExpiryDate(out uint64 pqwExpiryDate) mut => VT.GetExpiryDate(ref this, out pqwExpiryDate);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out uint32 pdwCallersId) GetCallersId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out BSTR pbstrFilename) GetFileName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out BOOL pfRenewalSuccessful) IsRenewalSuccessful;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out BOOL pfCheckEntTokenCallNeeded) IsCheckEntitlementCallRequired;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out uint32 pDescrambledStatus) GetDescrambledStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out uint32 pdwRenewalResultCode) GetRenewalResultCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out uint32 pdwCASFailureCode) GetCASFailureCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out HRESULT phr) GetRenewalHResult;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out uint32 pdwLength) GetEntitlementTokenLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out SAFEARRAY* pbData) GetEntitlementToken;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESLicenseRenewalResultEvent self, out uint64 pqwExpiryDate) GetExpiryDate;
			}
		}
		[CRepr]
		public struct IESFileExpiryDateEvent : IESEvent
		{
			public const new Guid IID = .(0xba9edcb6, 0x4d36, 0x4cfe, 0x8c, 0x56, 0x87, 0xa6, 0xb0, 0xca, 0x48, 0xe1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTunerId(out Guid pguidTunerId) mut => VT.GetTunerId(ref this, out pguidTunerId);
			public HRESULT GetExpiryDate(out uint64 pqwExpiryDate) mut => VT.GetExpiryDate(ref this, out pqwExpiryDate);
			public HRESULT GetFinalExpiryDate(out uint64 pqwExpiryDate) mut => VT.GetFinalExpiryDate(ref this, out pqwExpiryDate);
			public HRESULT GetMaxRenewalCount(out uint32 dwMaxRenewalCount) mut => VT.GetMaxRenewalCount(ref this, out dwMaxRenewalCount);
			public HRESULT IsEntitlementTokenPresent(out BOOL pfEntTokenPresent) mut => VT.IsEntitlementTokenPresent(ref this, out pfEntTokenPresent);
			public HRESULT DoesExpireAfterFirstUse(out BOOL pfExpireAfterFirstUse) mut => VT.DoesExpireAfterFirstUse(ref this, out pfExpireAfterFirstUse);

			[CRepr]
			public struct VTable : IESEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESFileExpiryDateEvent self, out Guid pguidTunerId) GetTunerId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESFileExpiryDateEvent self, out uint64 pqwExpiryDate) GetExpiryDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESFileExpiryDateEvent self, out uint64 pqwExpiryDate) GetFinalExpiryDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESFileExpiryDateEvent self, out uint32 dwMaxRenewalCount) GetMaxRenewalCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESFileExpiryDateEvent self, out BOOL pfEntTokenPresent) IsEntitlementTokenPresent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESFileExpiryDateEvent self, out BOOL pfExpireAfterFirstUse) DoesExpireAfterFirstUse;
			}
		}
		[CRepr]
		public struct IESEventService : IUnknown
		{
			public const new Guid IID = .(0xed89a619, 0x4c06, 0x4b2f, 0x99, 0xeb, 0xc7, 0x66, 0x9b, 0x13, 0x04, 0x7c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FireESEvent(IESEvent* pESEvent) mut => VT.FireESEvent(ref this, pESEvent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventService self, IESEvent* pESEvent) FireESEvent;
			}
		}
		[CRepr]
		public struct IESEventServiceConfiguration : IUnknown
		{
			public const new Guid IID = .(0x33b9daae, 0x9309, 0x491d, 0xa0, 0x51, 0xbc, 0xad, 0x2a, 0x70, 0xcd, 0x66);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetParent(IESEventService* pEventService) mut => VT.SetParent(ref this, pEventService);
			public HRESULT RemoveParent() mut => VT.RemoveParent(ref this);
			public HRESULT SetOwner(IESEvents* pESEvents) mut => VT.SetOwner(ref this, pESEvents);
			public HRESULT RemoveOwner() mut => VT.RemoveOwner(ref this);
			public HRESULT SetGraph(IFilterGraph* pGraph) mut => VT.SetGraph(ref this, pGraph);
			public HRESULT RemoveGraph(IFilterGraph* pGraph) mut => VT.RemoveGraph(ref this, pGraph);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventServiceConfiguration self, IESEventService* pEventService) SetParent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventServiceConfiguration self) RemoveParent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventServiceConfiguration self, IESEvents* pESEvents) SetOwner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventServiceConfiguration self) RemoveOwner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventServiceConfiguration self, IFilterGraph* pGraph) SetGraph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IESEventServiceConfiguration self, IFilterGraph* pGraph) RemoveGraph;
			}
		}
		[CRepr]
		public struct IRegisterTuner : IUnknown
		{
			public const new Guid IID = .(0x359b3901, 0x572c, 0x4854, 0xbb, 0x49, 0xcd, 0xef, 0x66, 0x60, 0x6a, 0x25);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Register(ref ITuner pTuner, ref IGraphBuilder pGraph) mut => VT.Register(ref this, ref pTuner, ref pGraph);
			public HRESULT Unregister() mut => VT.Unregister(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRegisterTuner self, ref ITuner pTuner, ref IGraphBuilder pGraph) Register;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRegisterTuner self) Unregister;
			}
		}
		[CRepr]
		public struct IBDAComparable : IUnknown
		{
			public const new Guid IID = .(0xb34505e0, 0x2f0e, 0x497b, 0x80, 0xbc, 0xd4, 0x3f, 0x3b, 0x24, 0xed, 0x7f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CompareExact(ref IDispatch CompareTo, out int32 Result) mut => VT.CompareExact(ref this, ref CompareTo, out Result);
			public HRESULT CompareEquivalent(ref IDispatch CompareTo, uint32 dwFlags, out int32 Result) mut => VT.CompareEquivalent(ref this, ref CompareTo, dwFlags, out Result);
			public HRESULT HashExact(out int64 Result) mut => VT.HashExact(ref this, out Result);
			public HRESULT HashExactIncremental(int64 PartialResult, out int64 Result) mut => VT.HashExactIncremental(ref this, PartialResult, out Result);
			public HRESULT HashEquivalent(uint32 dwFlags, out int64 Result) mut => VT.HashEquivalent(ref this, dwFlags, out Result);
			public HRESULT HashEquivalentIncremental(int64 PartialResult, uint32 dwFlags, out int64 Result) mut => VT.HashEquivalentIncremental(ref this, PartialResult, dwFlags, out Result);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDAComparable self, ref IDispatch CompareTo, out int32 Result) CompareExact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDAComparable self, ref IDispatch CompareTo, uint32 dwFlags, out int32 Result) CompareEquivalent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDAComparable self, out int64 Result) HashExact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDAComparable self, int64 PartialResult, out int64 Result) HashExactIncremental;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDAComparable self, uint32 dwFlags, out int64 Result) HashEquivalent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDAComparable self, int64 PartialResult, uint32 dwFlags, out int64 Result) HashEquivalentIncremental;
			}
		}
		[CRepr]
		public struct IPersistTuneXml : IPersist
		{
			public const new Guid IID = .(0x0754cd31, 0x8d15, 0x47a9, 0x82, 0x15, 0xd2, 0x00, 0x64, 0x15, 0x72, 0x44);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InitNew() mut => VT.InitNew(ref this);
			public HRESULT Load(VARIANT varValue) mut => VT.Load(ref this, varValue);
			public HRESULT Save(out VARIANT pvarFragment) mut => VT.Save(ref this, out pvarFragment);

			[CRepr]
			public struct VTable : IPersist.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistTuneXml self) InitNew;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistTuneXml self, VARIANT varValue) Load;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistTuneXml self, out VARIANT pvarFragment) Save;
			}
		}
		[CRepr]
		public struct IPersistTuneXmlUtility : IUnknown
		{
			public const new Guid IID = .(0x990237ae, 0xac11, 0x4614, 0xbe, 0x8f, 0xdd, 0x21, 0x7a, 0x4c, 0xb4, 0xcb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Deserialize(VARIANT varValue, out IUnknown* ppObject) mut => VT.Deserialize(ref this, varValue, out ppObject);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistTuneXmlUtility self, VARIANT varValue, out IUnknown* ppObject) Deserialize;
			}
		}
		[CRepr]
		public struct IPersistTuneXmlUtility2 : IPersistTuneXmlUtility
		{
			public const new Guid IID = .(0x992e165f, 0xea24, 0x4b2f, 0x9a, 0x1d, 0x00, 0x9d, 0x92, 0x12, 0x04, 0x51);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Serialize(ref ITuneRequest piTuneRequest, out BSTR pString) mut => VT.Serialize(ref this, ref piTuneRequest, out pString);

			[CRepr]
			public struct VTable : IPersistTuneXmlUtility.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistTuneXmlUtility2 self, ref ITuneRequest piTuneRequest, out BSTR pString) Serialize;
			}
		}
		[CRepr]
		public struct IBDACreateTuneRequestEx : IUnknown
		{
			public const new Guid IID = .(0xc0a4a1d4, 0x2b3c, 0x491a, 0xba, 0x22, 0x49, 0x9f, 0xba, 0xdd, 0x4d, 0x12);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateTuneRequestEx(in Guid TuneRequestIID, out ITuneRequest* TuneRequest) mut => VT.CreateTuneRequestEx(ref this, TuneRequestIID, out TuneRequest);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDACreateTuneRequestEx self, in Guid TuneRequestIID, out ITuneRequest* TuneRequest) CreateTuneRequestEx;
			}
		}
		[CRepr]
		public struct IETFilterConfig : IUnknown
		{
			public const new Guid IID = .(0xc4c4c4d1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InitLicense(int32 LicenseId) mut => VT.InitLicense(ref this, LicenseId);
			public HRESULT GetSecureChannelObject(out IUnknown* ppUnkDRMSecureChannel) mut => VT.GetSecureChannelObject(ref this, out ppUnkDRMSecureChannel);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilterConfig self, int32 LicenseId) InitLicense;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilterConfig self, out IUnknown* ppUnkDRMSecureChannel) GetSecureChannelObject;
			}
		}
		[CRepr]
		public struct IDTFilterConfig : IUnknown
		{
			public const new Guid IID = .(0xc4c4c4d2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSecureChannelObject(out IUnknown* ppUnkDRMSecureChannel) mut => VT.GetSecureChannelObject(ref this, out ppUnkDRMSecureChannel);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilterConfig self, out IUnknown* ppUnkDRMSecureChannel) GetSecureChannelObject;
			}
		}
		[CRepr]
		public struct IXDSCodecConfig : IUnknown
		{
			public const new Guid IID = .(0xc4c4c4d3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSecureChannelObject(out IUnknown* ppUnkDRMSecureChannel) mut => VT.GetSecureChannelObject(ref this, out ppUnkDRMSecureChannel);
			public HRESULT SetPauseBufferTime(uint32 dwPauseBufferTime) mut => VT.SetPauseBufferTime(ref this, dwPauseBufferTime);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodecConfig self, out IUnknown* ppUnkDRMSecureChannel) GetSecureChannelObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodecConfig self, uint32 dwPauseBufferTime) SetPauseBufferTime;
			}
		}
		[CRepr]
		public struct IDTFilterLicenseRenewal : IUnknown
		{
			public const new Guid IID = .(0x8a78b317, 0xe405, 0x4a43, 0x99, 0x4a, 0x62, 0x0d, 0x8f, 0x5c, 0xe2, 0x5e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetLicenseRenewalData(out PWSTR ppwszFileName, out PWSTR ppwszExpiredKid, out PWSTR ppwszTunerId) mut => VT.GetLicenseRenewalData(ref this, out ppwszFileName, out ppwszExpiredKid, out ppwszTunerId);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilterLicenseRenewal self, out PWSTR ppwszFileName, out PWSTR ppwszExpiredKid, out PWSTR ppwszTunerId) GetLicenseRenewalData;
			}
		}
		[CRepr]
		public struct IPTFilterLicenseRenewal : IUnknown
		{
			public const new Guid IID = .(0x26d836a5, 0x0c15, 0x44c7, 0xac, 0x59, 0xb0, 0xda, 0x87, 0x28, 0xf2, 0x40);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RenewLicenses(PWSTR wszFileName, PWSTR wszExpiredKid, uint32 dwCallersId, BOOL bHighPriority) mut => VT.RenewLicenses(ref this, wszFileName, wszExpiredKid, dwCallersId, bHighPriority);
			public HRESULT CancelLicenseRenewal() mut => VT.CancelLicenseRenewal(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPTFilterLicenseRenewal self, PWSTR wszFileName, PWSTR wszExpiredKid, uint32 dwCallersId, BOOL bHighPriority) RenewLicenses;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPTFilterLicenseRenewal self) CancelLicenseRenewal;
			}
		}
		[CRepr]
		public struct IMceBurnerControl : IUnknown
		{
			public const new Guid IID = .(0x5a86b91a, 0xe71e, 0x46c1, 0x88, 0xa9, 0x9b, 0xb3, 0x38, 0x71, 0x05, 0x52);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetBurnerNoDecryption() mut => VT.GetBurnerNoDecryption(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMceBurnerControl self) GetBurnerNoDecryption;
			}
		}
		[CRepr]
		public struct IETFilter : IUnknown
		{
			public const new Guid IID = .(0xc4c4c4b1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_EvalRatObjOK(out HRESULT pHrCoCreateRetVal) mut => VT.get_EvalRatObjOK(ref this, out pHrCoCreateRetVal);
			public HRESULT GetCurrRating(out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnRating, out int32 plbfEnAttr) mut => VT.GetCurrRating(ref this, out pEnSystem, out pEnRating, out plbfEnAttr);
			public HRESULT GetCurrLicenseExpDate(ref ProtType protType, out int32 lpDateTime) mut => VT.GetCurrLicenseExpDate(ref this, ref protType, out lpDateTime);
			public HRESULT GetLastErrorCode() mut => VT.GetLastErrorCode(ref this);
			public HRESULT SetRecordingOn(BOOL fRecState) mut => VT.SetRecordingOn(ref this, fRecState);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilter self, out HRESULT pHrCoCreateRetVal) get_EvalRatObjOK;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilter self, out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnRating, out int32 plbfEnAttr) GetCurrRating;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilter self, ref ProtType protType, out int32 lpDateTime) GetCurrLicenseExpDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilter self) GetLastErrorCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IETFilter self, BOOL fRecState) SetRecordingOn;
			}
		}
		[CRepr]
		public struct IETFilterEvents : IDispatch
		{
			public const new Guid IID = .(0xc4c4c4c1, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDTFilter : IUnknown
		{
			public const new Guid IID = .(0xc4c4c4b2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_EvalRatObjOK(out HRESULT pHrCoCreateRetVal) mut => VT.get_EvalRatObjOK(ref this, out pHrCoCreateRetVal);
			public HRESULT GetCurrRating(out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnRating, out int32 plbfEnAttr) mut => VT.GetCurrRating(ref this, out pEnSystem, out pEnRating, out plbfEnAttr);
			public HRESULT get_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, out int32 plbfEnAttr) mut => VT.get_BlockedRatingAttributes(ref this, enSystem, enLevel, out plbfEnAttr);
			public HRESULT put_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) mut => VT.put_BlockedRatingAttributes(ref this, enSystem, enLevel, lbfAttrs);
			public HRESULT get_BlockUnRated(out BOOL pfBlockUnRatedShows) mut => VT.get_BlockUnRated(ref this, out pfBlockUnRatedShows);
			public HRESULT put_BlockUnRated(BOOL fBlockUnRatedShows) mut => VT.put_BlockUnRated(ref this, fBlockUnRatedShows);
			public HRESULT get_BlockUnRatedDelay(out int32 pmsecsDelayBeforeBlock) mut => VT.get_BlockUnRatedDelay(ref this, out pmsecsDelayBeforeBlock);
			public HRESULT put_BlockUnRatedDelay(int32 msecsDelayBeforeBlock) mut => VT.put_BlockUnRatedDelay(ref this, msecsDelayBeforeBlock);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, out HRESULT pHrCoCreateRetVal) get_EvalRatObjOK;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnRating, out int32 plbfEnAttr) GetCurrRating;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, out int32 plbfEnAttr) get_BlockedRatingAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) put_BlockedRatingAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, out BOOL pfBlockUnRatedShows) get_BlockUnRated;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, BOOL fBlockUnRatedShows) put_BlockUnRated;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, out int32 pmsecsDelayBeforeBlock) get_BlockUnRatedDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter self, int32 msecsDelayBeforeBlock) put_BlockUnRatedDelay;
			}
		}
		[CRepr]
		public struct IDTFilter2 : IDTFilter
		{
			public const new Guid IID = .(0xc4c4c4b4, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ChallengeUrl(out BSTR pbstrChallengeUrl) mut => VT.get_ChallengeUrl(ref this, out pbstrChallengeUrl);
			public HRESULT GetCurrLicenseExpDate(ref ProtType protType, out int32 lpDateTime) mut => VT.GetCurrLicenseExpDate(ref this, ref protType, out lpDateTime);
			public HRESULT GetLastErrorCode() mut => VT.GetLastErrorCode(ref this);

			[CRepr]
			public struct VTable : IDTFilter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter2 self, out BSTR pbstrChallengeUrl) get_ChallengeUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter2 self, ref ProtType protType, out int32 lpDateTime) GetCurrLicenseExpDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter2 self) GetLastErrorCode;
			}
		}
		[CRepr]
		public struct IDTFilter3 : IDTFilter2
		{
			public const new Guid IID = .(0x513998cc, 0xe929, 0x4cdf, 0x9f, 0xbd, 0xba, 0xd1, 0xe0, 0x31, 0x48, 0x66);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetProtectionType(out ProtType pProtectionType) mut => VT.GetProtectionType(ref this, out pProtectionType);
			public HRESULT LicenseHasExpirationDate(out BOOL pfLicenseHasExpirationDate) mut => VT.LicenseHasExpirationDate(ref this, out pfLicenseHasExpirationDate);
			public HRESULT SetRights(BSTR bstrRights) mut => VT.SetRights(ref this, bstrRights);

			[CRepr]
			public struct VTable : IDTFilter2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter3 self, out ProtType pProtectionType) GetProtectionType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter3 self, out BOOL pfLicenseHasExpirationDate) LicenseHasExpirationDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDTFilter3 self, BSTR bstrRights) SetRights;
			}
		}
		[CRepr]
		public struct IDTFilterEvents : IDispatch
		{
			public const new Guid IID = .(0xc4c4c4c2, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IXDSCodec : IUnknown
		{
			public const new Guid IID = .(0xc4c4c4b3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_XDSToRatObjOK(out HRESULT pHrCoCreateRetVal) mut => VT.get_XDSToRatObjOK(ref this, out pHrCoCreateRetVal);
			public HRESULT put_CCSubstreamService(int32 SubstreamMask) mut => VT.put_CCSubstreamService(ref this, SubstreamMask);
			public HRESULT get_CCSubstreamService(out int32 pSubstreamMask) mut => VT.get_CCSubstreamService(ref this, out pSubstreamMask);
			public HRESULT GetContentAdvisoryRating(out int32 pRat, out int32 pPktSeqID, out int32 pCallSeqID, out int64 pTimeStart, out int64 pTimeEnd) mut => VT.GetContentAdvisoryRating(ref this, out pRat, out pPktSeqID, out pCallSeqID, out pTimeStart, out pTimeEnd);
			public HRESULT GetXDSPacket(out int32 pXDSClassPkt, out int32 pXDSTypePkt, out BSTR pBstrXDSPkt, out int32 pPktSeqID, out int32 pCallSeqID, out int64 pTimeStart, out int64 pTimeEnd) mut => VT.GetXDSPacket(ref this, out pXDSClassPkt, out pXDSTypePkt, out pBstrXDSPkt, out pPktSeqID, out pCallSeqID, out pTimeStart, out pTimeEnd);
			public HRESULT GetCurrLicenseExpDate(ref ProtType protType, out int32 lpDateTime) mut => VT.GetCurrLicenseExpDate(ref this, ref protType, out lpDateTime);
			public HRESULT GetLastErrorCode() mut => VT.GetLastErrorCode(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self, out HRESULT pHrCoCreateRetVal) get_XDSToRatObjOK;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self, int32 SubstreamMask) put_CCSubstreamService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self, out int32 pSubstreamMask) get_CCSubstreamService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self, out int32 pRat, out int32 pPktSeqID, out int32 pCallSeqID, out int64 pTimeStart, out int64 pTimeEnd) GetContentAdvisoryRating;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self, out int32 pXDSClassPkt, out int32 pXDSTypePkt, out BSTR pBstrXDSPkt, out int32 pPktSeqID, out int32 pCallSeqID, out int64 pTimeStart, out int64 pTimeEnd) GetXDSPacket;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self, ref ProtType protType, out int32 lpDateTime) GetCurrLicenseExpDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSCodec self) GetLastErrorCode;
			}
		}
		[CRepr]
		public struct IXDSCodecEvents : IDispatch
		{
			public const new Guid IID = .(0xc4c4c4c3, 0x0049, 0x4e2b, 0x98, 0xfb, 0x95, 0x37, 0xf6, 0xce, 0x51, 0x6d);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IXDSToRat : IDispatch
		{
			public const new Guid IID = .(0xc5c5c5b0, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Init() mut => VT.Init(ref this);
			public HRESULT ParseXDSBytePair(uint8 byte1, uint8 byte2, out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnLevel, out int32 plBfEnAttributes) mut => VT.ParseXDSBytePair(ref this, byte1, byte2, out pEnSystem, out pEnLevel, out plBfEnAttributes);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSToRat self) Init;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXDSToRat self, uint8 byte1, uint8 byte2, out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnLevel, out int32 plBfEnAttributes) ParseXDSBytePair;
			}
		}
		[CRepr]
		public struct IEvalRat : IDispatch
		{
			public const new Guid IID = .(0xc5c5c5b1, 0x3abc, 0x11d6, 0xb2, 0x5b, 0x00, 0xc0, 0x4f, 0xa0, 0xc0, 0x26);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, out int32 plbfAttrs) mut => VT.get_BlockedRatingAttributes(ref this, enSystem, enLevel, out plbfAttrs);
			public HRESULT put_BlockedRatingAttributes(EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) mut => VT.put_BlockedRatingAttributes(ref this, enSystem, enLevel, lbfAttrs);
			public HRESULT get_BlockUnRated(out BOOL pfBlockUnRatedShows) mut => VT.get_BlockUnRated(ref this, out pfBlockUnRatedShows);
			public HRESULT put_BlockUnRated(BOOL fBlockUnRatedShows) mut => VT.put_BlockUnRated(ref this, fBlockUnRatedShows);
			public HRESULT MostRestrictiveRating(EnTvRat_System enSystem1, EnTvRat_GenericLevel enEnLevel1, int32 lbfEnAttr1, EnTvRat_System enSystem2, EnTvRat_GenericLevel enEnLevel2, int32 lbfEnAttr2, out EnTvRat_System penSystem, out EnTvRat_GenericLevel penEnLevel, out int32 plbfEnAttr) mut => VT.MostRestrictiveRating(ref this, enSystem1, enEnLevel1, lbfEnAttr1, enSystem2, enEnLevel2, lbfEnAttr2, out penSystem, out penEnLevel, out plbfEnAttr);
			public HRESULT TestRating(EnTvRat_System enShowSystem, EnTvRat_GenericLevel enShowLevel, int32 lbfEnShowAttributes) mut => VT.TestRating(ref this, enShowSystem, enShowLevel, lbfEnShowAttributes);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEvalRat self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, out int32 plbfAttrs) get_BlockedRatingAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEvalRat self, EnTvRat_System enSystem, EnTvRat_GenericLevel enLevel, int32 lbfAttrs) put_BlockedRatingAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEvalRat self, out BOOL pfBlockUnRatedShows) get_BlockUnRated;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEvalRat self, BOOL fBlockUnRatedShows) put_BlockUnRated;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEvalRat self, EnTvRat_System enSystem1, EnTvRat_GenericLevel enEnLevel1, int32 lbfEnAttr1, EnTvRat_System enSystem2, EnTvRat_GenericLevel enEnLevel2, int32 lbfEnAttr2, out EnTvRat_System penSystem, out EnTvRat_GenericLevel penEnLevel, out int32 plbfEnAttr) MostRestrictiveRating;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEvalRat self, EnTvRat_System enShowSystem, EnTvRat_GenericLevel enShowLevel, int32 lbfEnShowAttributes) TestRating;
			}
		}
		[CRepr]
		public struct IMSVidRect : IDispatch
		{
			public const new Guid IID = .(0x7f5000a6, 0xa440, 0x47ca, 0x8a, 0xcc, 0xc0, 0xe7, 0x55, 0x31, 0xa2, 0xc2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Top(out int32 TopVal) mut => VT.get_Top(ref this, out TopVal);
			public HRESULT put_Top(int32 TopVal) mut => VT.put_Top(ref this, TopVal);
			public HRESULT get_Left(out int32 LeftVal) mut => VT.get_Left(ref this, out LeftVal);
			public HRESULT put_Left(int32 LeftVal) mut => VT.put_Left(ref this, LeftVal);
			public HRESULT get_Width(out int32 WidthVal) mut => VT.get_Width(ref this, out WidthVal);
			public HRESULT put_Width(int32 WidthVal) mut => VT.put_Width(ref this, WidthVal);
			public HRESULT get_Height(out int32 HeightVal) mut => VT.get_Height(ref this, out HeightVal);
			public HRESULT put_Height(int32 HeightVal) mut => VT.put_Height(ref this, HeightVal);
			public HRESULT get_HWnd(out HWND HWndVal) mut => VT.get_HWnd(ref this, out HWndVal);
			public HRESULT put_HWnd(HWND HWndVal) mut => VT.put_HWnd(ref this, HWndVal);
			public HRESULT put_Rect(ref IMSVidRect RectVal) mut => VT.put_Rect(ref this, ref RectVal);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, out int32 TopVal) get_Top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, int32 TopVal) put_Top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, out int32 LeftVal) get_Left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, int32 LeftVal) put_Left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, out int32 WidthVal) get_Width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, int32 WidthVal) put_Width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, out int32 HeightVal) get_Height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, int32 HeightVal) put_Height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, out HWND HWndVal) get_HWnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, HWND HWndVal) put_HWnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidRect self, ref IMSVidRect RectVal) put_Rect;
			}
		}
		[CRepr]
		public struct IMSVidGraphSegmentContainer : IUnknown
		{
			public const new Guid IID = .(0x3dd2903d, 0xe0aa, 0x11d2, 0xb6, 0x3a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Graph(out IGraphBuilder* ppGraph) mut => VT.get_Graph(ref this, out ppGraph);
			public HRESULT get_Input(out IMSVidGraphSegment* ppInput) mut => VT.get_Input(ref this, out ppInput);
			public HRESULT get_Outputs(out IEnumMSVidGraphSegment* ppOutputs) mut => VT.get_Outputs(ref this, out ppOutputs);
			public HRESULT get_VideoRenderer(out IMSVidGraphSegment* ppVR) mut => VT.get_VideoRenderer(ref this, out ppVR);
			public HRESULT get_AudioRenderer(out IMSVidGraphSegment* ppAR) mut => VT.get_AudioRenderer(ref this, out ppAR);
			public HRESULT get_Features(out IEnumMSVidGraphSegment* ppFeatures) mut => VT.get_Features(ref this, out ppFeatures);
			public HRESULT get_Composites(out IEnumMSVidGraphSegment* ppComposites) mut => VT.get_Composites(ref this, out ppComposites);
			public HRESULT get_ParentContainer(out IUnknown* ppContainer) mut => VT.get_ParentContainer(ref this, out ppContainer);
			public HRESULT Decompose(IMSVidGraphSegment* pSegment) mut => VT.Decompose(ref this, pSegment);
			public HRESULT IsWindowless() mut => VT.IsWindowless(ref this);
			public HRESULT GetFocus() mut => VT.GetFocus(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IGraphBuilder* ppGraph) get_Graph;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IMSVidGraphSegment* ppInput) get_Input;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IEnumMSVidGraphSegment* ppOutputs) get_Outputs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IMSVidGraphSegment* ppVR) get_VideoRenderer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IMSVidGraphSegment* ppAR) get_AudioRenderer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IEnumMSVidGraphSegment* ppFeatures) get_Features;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IEnumMSVidGraphSegment* ppComposites) get_Composites;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, out IUnknown* ppContainer) get_ParentContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self, IMSVidGraphSegment* pSegment) Decompose;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self) IsWindowless;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentContainer self) GetFocus;
			}
		}
		[CRepr]
		public struct IMSVidGraphSegment : IPersist
		{
			public const new Guid IID = .(0x238dec54, 0xadeb, 0x4005, 0xa3, 0x49, 0xf7, 0x72, 0xb9, 0xaf, 0xeb, 0xc4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Init(out IUnknown* pInit) mut => VT.get_Init(ref this, out pInit);
			public HRESULT put_Init(ref IUnknown pInit) mut => VT.put_Init(ref this, ref pInit);
			public HRESULT EnumFilters(out IEnumFilters* pNewEnum) mut => VT.EnumFilters(ref this, out pNewEnum);
			public HRESULT get_Container(out IMSVidGraphSegmentContainer* ppCtl) mut => VT.get_Container(ref this, out ppCtl);
			public HRESULT put_Container(ref IMSVidGraphSegmentContainer pCtl) mut => VT.put_Container(ref this, ref pCtl);
			public HRESULT get_Type(out MSVidSegmentType pType) mut => VT.get_Type(ref this, out pType);
			public HRESULT get_Category(out Guid pGuid) mut => VT.get_Category(ref this, out pGuid);
			public HRESULT Build() mut => VT.Build(ref this);
			public HRESULT PostBuild() mut => VT.PostBuild(ref this);
			public HRESULT PreRun() mut => VT.PreRun(ref this);
			public HRESULT PostRun() mut => VT.PostRun(ref this);
			public HRESULT PreStop() mut => VT.PreStop(ref this);
			public HRESULT PostStop() mut => VT.PostStop(ref this);
			public HRESULT OnEventNotify(int32 lEventCode, int lEventParm1, int lEventParm2) mut => VT.OnEventNotify(ref this, lEventCode, lEventParm1, lEventParm2);
			public HRESULT Decompose() mut => VT.Decompose(ref this);

			[CRepr]
			public struct VTable : IPersist.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, out IUnknown* pInit) get_Init;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, ref IUnknown pInit) put_Init;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, out IEnumFilters* pNewEnum) EnumFilters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, out IMSVidGraphSegmentContainer* ppCtl) get_Container;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, ref IMSVidGraphSegmentContainer pCtl) put_Container;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, out MSVidSegmentType pType) get_Type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, out Guid pGuid) get_Category;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) Build;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) PostBuild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) PreRun;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) PostRun;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) PreStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) PostStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self, int32 lEventCode, int lEventParm1, int lEventParm2) OnEventNotify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegment self) Decompose;
			}
		}
		[CRepr]
		public struct IMSVidGraphSegmentUserInput : IUnknown
		{
			public const new Guid IID = .(0x301c060e, 0x20d9, 0x4587, 0x9b, 0x03, 0xf8, 0x2e, 0xd9, 0xa9, 0x94, 0x3c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Click() mut => VT.Click(ref this);
			public HRESULT DblClick() mut => VT.DblClick(ref this);
			public HRESULT KeyDown(ref int16 KeyCode, int16 ShiftState) mut => VT.KeyDown(ref this, ref KeyCode, ShiftState);
			public HRESULT KeyPress(ref int16 KeyAscii) mut => VT.KeyPress(ref this, ref KeyAscii);
			public HRESULT KeyUp(ref int16 KeyCode, int16 ShiftState) mut => VT.KeyUp(ref this, ref KeyCode, ShiftState);
			public HRESULT MouseDown(int16 ButtonState, int16 ShiftState, int32 x, int32 y) mut => VT.MouseDown(ref this, ButtonState, ShiftState, x, y);
			public HRESULT MouseMove(int16 ButtonState, int16 ShiftState, int32 x, int32 y) mut => VT.MouseMove(ref this, ButtonState, ShiftState, x, y);
			public HRESULT MouseUp(int16 ButtonState, int16 ShiftState, int32 x, int32 y) mut => VT.MouseUp(ref this, ButtonState, ShiftState, x, y);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self) Click;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self) DblClick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self, ref int16 KeyCode, int16 ShiftState) KeyDown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self, ref int16 KeyAscii) KeyPress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self, ref int16 KeyCode, int16 ShiftState) KeyUp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self, int16 ButtonState, int16 ShiftState, int32 x, int32 y) MouseDown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self, int16 ButtonState, int16 ShiftState, int32 x, int32 y) MouseMove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGraphSegmentUserInput self, int16 ButtonState, int16 ShiftState, int32 x, int32 y) MouseUp;
			}
		}
		[CRepr]
		public struct IMSVidCompositionSegment : IMSVidGraphSegment
		{
			public const new Guid IID = .(0x1c15d483, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Compose(ref IMSVidGraphSegment upstream, ref IMSVidGraphSegment downstream) mut => VT.Compose(ref this, ref upstream, ref downstream);
			public HRESULT get_Up(out IMSVidGraphSegment* upstream) mut => VT.get_Up(ref this, out upstream);
			public HRESULT get_Down(out IMSVidGraphSegment* downstream) mut => VT.get_Down(ref this, out downstream);

			[CRepr]
			public struct VTable : IMSVidGraphSegment.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCompositionSegment self, ref IMSVidGraphSegment upstream, ref IMSVidGraphSegment downstream) Compose;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCompositionSegment self, out IMSVidGraphSegment* upstream) get_Up;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCompositionSegment self, out IMSVidGraphSegment* downstream) get_Down;
			}
		}
		[CRepr]
		public struct IEnumMSVidGraphSegment : IUnknown
		{
			public const new Guid IID = .(0x3dd2903e, 0xe0aa, 0x11d2, 0xb6, 0x3a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, out IMSVidGraphSegment* rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, out rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumMSVidGraphSegment* ppenum) mut => VT.Clone(ref this, out ppenum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMSVidGraphSegment self, uint32 celt, out IMSVidGraphSegment* rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMSVidGraphSegment self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMSVidGraphSegment self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumMSVidGraphSegment self, out IEnumMSVidGraphSegment* ppenum) Clone;
			}
		}
		[CRepr]
		public struct IMSVidVRGraphSegment : IMSVidGraphSegment
		{
			public const new Guid IID = .(0xdd47de3f, 0x9874, 0x4f7b, 0x8b, 0x22, 0x7c, 0xb2, 0x68, 0x84, 0x61, 0xe7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put__VMRendererMode(int32 dwMode) mut => VT.put__VMRendererMode(ref this, dwMode);
			public HRESULT put_Owner(HWND Window) mut => VT.put_Owner(ref this, Window);
			public HRESULT get_Owner(out HWND Window) mut => VT.get_Owner(ref this, out Window);
			public HRESULT get_UseOverlay(out int16 UseOverlayVal) mut => VT.get_UseOverlay(ref this, out UseOverlayVal);
			public HRESULT put_UseOverlay(int16 UseOverlayVal) mut => VT.put_UseOverlay(ref this, UseOverlayVal);
			public HRESULT get_Visible(out int16 Visible) mut => VT.get_Visible(ref this, out Visible);
			public HRESULT put_Visible(int16 Visible) mut => VT.put_Visible(ref this, Visible);
			public HRESULT get_ColorKey(out uint32 ColorKey) mut => VT.get_ColorKey(ref this, out ColorKey);
			public HRESULT put_ColorKey(uint32 ColorKey) mut => VT.put_ColorKey(ref this, ColorKey);
			public HRESULT get_Source(out RECT r) mut => VT.get_Source(ref this, out r);
			public HRESULT put_Source(RECT r) mut => VT.put_Source(ref this, r);
			public HRESULT get_Destination(out RECT r) mut => VT.get_Destination(ref this, out r);
			public HRESULT put_Destination(RECT r) mut => VT.put_Destination(ref this, r);
			public HRESULT get_NativeSize(out SIZE sizeval, out SIZE aspectratio) mut => VT.get_NativeSize(ref this, out sizeval, out aspectratio);
			public HRESULT get_BorderColor(out uint32 color) mut => VT.get_BorderColor(ref this, out color);
			public HRESULT put_BorderColor(uint32 color) mut => VT.put_BorderColor(ref this, color);
			public HRESULT get_MaintainAspectRatio(out int16 fMaintain) mut => VT.get_MaintainAspectRatio(ref this, out fMaintain);
			public HRESULT put_MaintainAspectRatio(int16 fMaintain) mut => VT.put_MaintainAspectRatio(ref this, fMaintain);
			public HRESULT Refresh() mut => VT.Refresh(ref this);
			public HRESULT DisplayChange() mut => VT.DisplayChange(ref this);
			public HRESULT RePaint(HDC hdc) mut => VT.RePaint(ref this, hdc);

			[CRepr]
			public struct VTable : IMSVidGraphSegment.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, int32 dwMode) put__VMRendererMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, HWND Window) put_Owner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out HWND Window) get_Owner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out int16 UseOverlayVal) get_UseOverlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, int16 UseOverlayVal) put_UseOverlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out int16 Visible) get_Visible;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, int16 Visible) put_Visible;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out uint32 ColorKey) get_ColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, uint32 ColorKey) put_ColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out RECT r) get_Source;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, RECT r) put_Source;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out RECT r) get_Destination;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, RECT r) put_Destination;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out SIZE sizeval, out SIZE aspectratio) get_NativeSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out uint32 color) get_BorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, uint32 color) put_BorderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, out int16 fMaintain) get_MaintainAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, int16 fMaintain) put_MaintainAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self) Refresh;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self) DisplayChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVRGraphSegment self, HDC hdc) RePaint;
			}
		}
		[CRepr]
		public struct IMSVidDevice : IDispatch
		{
			public const new Guid IID = .(0x1c15d47c, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Name(out BSTR Name) mut => VT.get_Name(ref this, out Name);
			public HRESULT get_Status(out int32 Status) mut => VT.get_Status(ref this, out Status);
			public HRESULT put_Power(int16 Power) mut => VT.put_Power(ref this, Power);
			public HRESULT get_Power(out int16 Power) mut => VT.get_Power(ref this, out Power);
			public HRESULT get_Category(out BSTR Guid) mut => VT.get_Category(ref this, out Guid);
			public HRESULT get_ClassID(out BSTR Clsid) mut => VT.get_ClassID(ref this, out Clsid);
			public HRESULT get__Category(out Guid Guid) mut => VT.get__Category(ref this, out Guid);
			public HRESULT get__ClassID(out Guid Clsid) mut => VT.get__ClassID(ref this, out Clsid);
			public HRESULT IsEqualDevice(ref IMSVidDevice Device, out int16 IsEqual) mut => VT.IsEqualDevice(ref this, ref Device, out IsEqual);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out BSTR Name) get_Name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out int32 Status) get_Status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, int16 Power) put_Power;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out int16 Power) get_Power;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out BSTR Guid) get_Category;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out BSTR Clsid) get_ClassID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out Guid Guid) get__Category;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, out Guid Clsid) get__ClassID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice self, ref IMSVidDevice Device, out int16 IsEqual) IsEqualDevice;
			}
		}
		[CRepr]
		public struct IMSVidDevice2 : IUnknown
		{
			public const new Guid IID = .(0x87bd2783, 0xebc0, 0x478c, 0xb4, 0xa0, 0xe8, 0xe7, 0xf4, 0x3a, 0xb7, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_DevicePath(out BSTR DevPath) mut => VT.get_DevicePath(ref this, out DevPath);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDevice2 self, out BSTR DevPath) get_DevicePath;
			}
		}
		[CRepr]
		public struct IMSVidInputDevice : IMSVidDevice
		{
			public const new Guid IID = .(0x37b0353d, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsViewable(ref VARIANT v, out int16 pfViewable) mut => VT.IsViewable(ref this, ref v, out pfViewable);
			public HRESULT View(ref VARIANT v) mut => VT.View(ref this, ref v);

			[CRepr]
			public struct VTable : IMSVidDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevice self, ref VARIANT v, out int16 pfViewable) IsViewable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevice self, ref VARIANT v) View;
			}
		}
		[CRepr]
		public struct IMSVidDeviceEvent : IDispatch
		{
			public const new Guid IID = .(0x1c15d480, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StateChange(ref IMSVidDevice lpd, int32 oldState, int32 newState) mut => VT.StateChange(ref this, ref lpd, oldState, newState);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidDeviceEvent self, ref IMSVidDevice lpd, int32 oldState, int32 newState) StateChange;
			}
		}
		[CRepr]
		public struct IMSVidInputDeviceEvent : IDispatch
		{
			public const new Guid IID = .(0x37b0353e, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IMSVidVideoInputDevice : IMSVidInputDevice
		{
			public const new Guid IID = .(0x1c15d47f, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidInputDevice.VTable {}
		}
		[CRepr]
		public struct IMSVidPlayback : IMSVidInputDevice
		{
			public const new Guid IID = .(0x37b03538, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_EnableResetOnStop(out int16 pVal) mut => VT.get_EnableResetOnStop(ref this, out pVal);
			public HRESULT put_EnableResetOnStop(int16 newVal) mut => VT.put_EnableResetOnStop(ref this, newVal);
			public HRESULT Run() mut => VT.Run(ref this);
			public HRESULT Pause() mut => VT.Pause(ref this);
			public HRESULT Stop() mut => VT.Stop(ref this);
			public HRESULT get_CanStep(int16 fBackwards, out int16 pfCan) mut => VT.get_CanStep(ref this, fBackwards, out pfCan);
			public HRESULT Step(int32 lStep) mut => VT.Step(ref this, lStep);
			public HRESULT put_Rate(double plRate) mut => VT.put_Rate(ref this, plRate);
			public HRESULT get_Rate(out double plRate) mut => VT.get_Rate(ref this, out plRate);
			public HRESULT put_CurrentPosition(int32 lPosition) mut => VT.put_CurrentPosition(ref this, lPosition);
			public HRESULT get_CurrentPosition(out int32 lPosition) mut => VT.get_CurrentPosition(ref this, out lPosition);
			public HRESULT put_PositionMode(PositionModeList lPositionMode) mut => VT.put_PositionMode(ref this, lPositionMode);
			public HRESULT get_PositionMode(out PositionModeList lPositionMode) mut => VT.get_PositionMode(ref this, out lPositionMode);
			public HRESULT get_Length(out int32 lLength) mut => VT.get_Length(ref this, out lLength);

			[CRepr]
			public struct VTable : IMSVidInputDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, out int16 pVal) get_EnableResetOnStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, int16 newVal) put_EnableResetOnStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self) Run;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self) Pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, int16 fBackwards, out int16 pfCan) get_CanStep;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, int32 lStep) Step;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, double plRate) put_Rate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, out double plRate) get_Rate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, int32 lPosition) put_CurrentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, out int32 lPosition) get_CurrentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, PositionModeList lPositionMode) put_PositionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, out PositionModeList lPositionMode) get_PositionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlayback self, out int32 lLength) get_Length;
			}
		}
		[CRepr]
		public struct IMSVidPlaybackEvent : IMSVidInputDeviceEvent
		{
			public const new Guid IID = .(0x37b0353b, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EndOfMedia(ref IMSVidPlayback lpd) mut => VT.EndOfMedia(ref this, ref lpd);

			[CRepr]
			public struct VTable : IMSVidInputDeviceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidPlaybackEvent self, ref IMSVidPlayback lpd) EndOfMedia;
			}
		}
		[CRepr]
		public struct IMSVidTuner : IMSVidVideoInputDevice
		{
			public const new Guid IID = .(0x1c15d47d, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Tune(out ITuneRequest* ppTR) mut => VT.get_Tune(ref this, out ppTR);
			public HRESULT put_Tune(ref ITuneRequest pTR) mut => VT.put_Tune(ref this, ref pTR);
			public HRESULT get_TuningSpace(out ITuningSpace* plTS) mut => VT.get_TuningSpace(ref this, out plTS);
			public HRESULT put_TuningSpace(ref ITuningSpace plTS) mut => VT.put_TuningSpace(ref this, ref plTS);

			[CRepr]
			public struct VTable : IMSVidVideoInputDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidTuner self, out ITuneRequest* ppTR) get_Tune;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidTuner self, ref ITuneRequest pTR) put_Tune;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidTuner self, out ITuningSpace* plTS) get_TuningSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidTuner self, ref ITuningSpace plTS) put_TuningSpace;
			}
		}
		[CRepr]
		public struct IMSVidTunerEvent : IMSVidInputDeviceEvent
		{
			public const new Guid IID = .(0x1c15d485, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT TuneChanged(ref IMSVidTuner lpd) mut => VT.TuneChanged(ref this, ref lpd);

			[CRepr]
			public struct VTable : IMSVidInputDeviceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidTunerEvent self, ref IMSVidTuner lpd) TuneChanged;
			}
		}
		[CRepr]
		public struct IMSVidAnalogTuner : IMSVidTuner
		{
			public const new Guid IID = .(0x1c15d47e, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Channel(out int32 Channel) mut => VT.get_Channel(ref this, out Channel);
			public HRESULT put_Channel(int32 Channel) mut => VT.put_Channel(ref this, Channel);
			public HRESULT get_VideoFrequency(out int32 lcc) mut => VT.get_VideoFrequency(ref this, out lcc);
			public HRESULT get_AudioFrequency(out int32 lcc) mut => VT.get_AudioFrequency(ref this, out lcc);
			public HRESULT get_CountryCode(out int32 lcc) mut => VT.get_CountryCode(ref this, out lcc);
			public HRESULT put_CountryCode(int32 lcc) mut => VT.put_CountryCode(ref this, lcc);
			public HRESULT get_SAP(out int16 pfSapOn) mut => VT.get_SAP(ref this, out pfSapOn);
			public HRESULT put_SAP(int16 fSapOn) mut => VT.put_SAP(ref this, fSapOn);
			public HRESULT ChannelAvailable(int32 nChannel, out int32 SignalStrength, out int16 fSignalPresent) mut => VT.ChannelAvailable(ref this, nChannel, out SignalStrength, out fSignalPresent);

			[CRepr]
			public struct VTable : IMSVidTuner.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, out int32 Channel) get_Channel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, int32 Channel) put_Channel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, out int32 lcc) get_VideoFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, out int32 lcc) get_AudioFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, out int32 lcc) get_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, int32 lcc) put_CountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, out int16 pfSapOn) get_SAP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, int16 fSapOn) put_SAP;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner self, int32 nChannel, out int32 SignalStrength, out int16 fSignalPresent) ChannelAvailable;
			}
		}
		[CRepr]
		public struct IMSVidAnalogTuner2 : IMSVidAnalogTuner
		{
			public const new Guid IID = .(0x37647bf7, 0x3dde, 0x4cc8, 0xa4, 0xdc, 0x0d, 0x53, 0x4d, 0x3d, 0x00, 0x37);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_TVFormats(out int32 Formats) mut => VT.get_TVFormats(ref this, out Formats);
			public HRESULT get_TunerModes(out int32 Modes) mut => VT.get_TunerModes(ref this, out Modes);
			public HRESULT get_NumAuxInputs(out int32 Inputs) mut => VT.get_NumAuxInputs(ref this, out Inputs);

			[CRepr]
			public struct VTable : IMSVidAnalogTuner.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner2 self, out int32 Formats) get_TVFormats;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner2 self, out int32 Modes) get_TunerModes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAnalogTuner2 self, out int32 Inputs) get_NumAuxInputs;
			}
		}
		[CRepr]
		public struct IMSVidAnalogTunerEvent : IMSVidTunerEvent
		{
			public const new Guid IID = .(0x1c15d486, 0x911d, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidTunerEvent.VTable {}
		}
		[CRepr]
		public struct IMSVidFilePlayback : IMSVidPlayback
		{
			public const new Guid IID = .(0x37b03539, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_FileName(out BSTR FileName) mut => VT.get_FileName(ref this, out FileName);
			public HRESULT put_FileName(BSTR FileName) mut => VT.put_FileName(ref this, FileName);

			[CRepr]
			public struct VTable : IMSVidPlayback.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFilePlayback self, out BSTR FileName) get_FileName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFilePlayback self, BSTR FileName) put_FileName;
			}
		}
		[CRepr]
		public struct IMSVidFilePlayback2 : IMSVidFilePlayback
		{
			public const new Guid IID = .(0x2f7e44af, 0x6e52, 0x4660, 0xbc, 0x08, 0xd8, 0xd5, 0x42, 0x58, 0x7d, 0x72);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put__SourceFilter(BSTR FileName) mut => VT.put__SourceFilter(ref this, FileName);
			public HRESULT put___SourceFilter(Guid FileName) mut => VT.put___SourceFilter(ref this, FileName);

			[CRepr]
			public struct VTable : IMSVidFilePlayback.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFilePlayback2 self, BSTR FileName) put__SourceFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFilePlayback2 self, Guid FileName) put___SourceFilter;
			}
		}
		[CRepr]
		public struct IMSVidFilePlaybackEvent : IMSVidPlaybackEvent
		{
			public const new Guid IID = .(0x37b0353a, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidPlaybackEvent.VTable {}
		}
		[CRepr]
		public struct IMSVidWebDVD : IMSVidPlayback
		{
			public const new Guid IID = .(0xcf45f88b, 0xac56, 0x4ee2, 0xa7, 0x3a, 0xed, 0x04, 0xe2, 0x88, 0x5d, 0x3c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnDVDEvent(int32 lEvent, int lParam1, int lParam2) mut => VT.OnDVDEvent(ref this, lEvent, lParam1, lParam2);
			public HRESULT PlayTitle(int32 lTitle) mut => VT.PlayTitle(ref this, lTitle);
			public HRESULT PlayChapterInTitle(int32 lTitle, int32 lChapter) mut => VT.PlayChapterInTitle(ref this, lTitle, lChapter);
			public HRESULT PlayChapter(int32 lChapter) mut => VT.PlayChapter(ref this, lChapter);
			public HRESULT PlayChaptersAutoStop(int32 lTitle, int32 lstrChapter, int32 lChapterCount) mut => VT.PlayChaptersAutoStop(ref this, lTitle, lstrChapter, lChapterCount);
			public HRESULT PlayAtTime(BSTR strTime) mut => VT.PlayAtTime(ref this, strTime);
			public HRESULT PlayAtTimeInTitle(int32 lTitle, BSTR strTime) mut => VT.PlayAtTimeInTitle(ref this, lTitle, strTime);
			public HRESULT PlayPeriodInTitleAutoStop(int32 lTitle, BSTR strStartTime, BSTR strEndTime) mut => VT.PlayPeriodInTitleAutoStop(ref this, lTitle, strStartTime, strEndTime);
			public HRESULT ReplayChapter() mut => VT.ReplayChapter(ref this);
			public HRESULT PlayPrevChapter() mut => VT.PlayPrevChapter(ref this);
			public HRESULT PlayNextChapter() mut => VT.PlayNextChapter(ref this);
			public HRESULT StillOff() mut => VT.StillOff(ref this);
			public HRESULT get_AudioLanguage(int32 lStream, int16 fFormat, out BSTR strAudioLang) mut => VT.get_AudioLanguage(ref this, lStream, fFormat, out strAudioLang);
			public HRESULT ShowMenu(DVDMenuIDConstants MenuID) mut => VT.ShowMenu(ref this, MenuID);
			public HRESULT Resume() mut => VT.Resume(ref this);
			public HRESULT ReturnFromSubmenu() mut => VT.ReturnFromSubmenu(ref this);
			public HRESULT get_ButtonsAvailable(out int32 pVal) mut => VT.get_ButtonsAvailable(ref this, out pVal);
			public HRESULT get_CurrentButton(out int32 pVal) mut => VT.get_CurrentButton(ref this, out pVal);
			public HRESULT SelectAndActivateButton(int32 lButton) mut => VT.SelectAndActivateButton(ref this, lButton);
			public HRESULT ActivateButton() mut => VT.ActivateButton(ref this);
			public HRESULT SelectRightButton() mut => VT.SelectRightButton(ref this);
			public HRESULT SelectLeftButton() mut => VT.SelectLeftButton(ref this);
			public HRESULT SelectLowerButton() mut => VT.SelectLowerButton(ref this);
			public HRESULT SelectUpperButton() mut => VT.SelectUpperButton(ref this);
			public HRESULT ActivateAtPosition(int32 xPos, int32 yPos) mut => VT.ActivateAtPosition(ref this, xPos, yPos);
			public HRESULT SelectAtPosition(int32 xPos, int32 yPos) mut => VT.SelectAtPosition(ref this, xPos, yPos);
			public HRESULT get_ButtonAtPosition(int32 xPos, int32 yPos, out int32 plButton) mut => VT.get_ButtonAtPosition(ref this, xPos, yPos, out plButton);
			public HRESULT get_NumberOfChapters(int32 lTitle, out int32 pVal) mut => VT.get_NumberOfChapters(ref this, lTitle, out pVal);
			public HRESULT get_TotalTitleTime(out BSTR pVal) mut => VT.get_TotalTitleTime(ref this, out pVal);
			public HRESULT get_TitlesAvailable(out int32 pVal) mut => VT.get_TitlesAvailable(ref this, out pVal);
			public HRESULT get_VolumesAvailable(out int32 pVal) mut => VT.get_VolumesAvailable(ref this, out pVal);
			public HRESULT get_CurrentVolume(out int32 pVal) mut => VT.get_CurrentVolume(ref this, out pVal);
			public HRESULT get_CurrentDiscSide(out int32 pVal) mut => VT.get_CurrentDiscSide(ref this, out pVal);
			public HRESULT get_CurrentDomain(out int32 pVal) mut => VT.get_CurrentDomain(ref this, out pVal);
			public HRESULT get_CurrentChapter(out int32 pVal) mut => VT.get_CurrentChapter(ref this, out pVal);
			public HRESULT get_CurrentTitle(out int32 pVal) mut => VT.get_CurrentTitle(ref this, out pVal);
			public HRESULT get_CurrentTime(out BSTR pVal) mut => VT.get_CurrentTime(ref this, out pVal);
			public HRESULT DVDTimeCode2bstr(int32 timeCode, out BSTR pTimeStr) mut => VT.DVDTimeCode2bstr(ref this, timeCode, out pTimeStr);
			public HRESULT get_DVDDirectory(out BSTR pVal) mut => VT.get_DVDDirectory(ref this, out pVal);
			public HRESULT put_DVDDirectory(BSTR newVal) mut => VT.put_DVDDirectory(ref this, newVal);
			public HRESULT IsSubpictureStreamEnabled(int32 lstream, out int16 fEnabled) mut => VT.IsSubpictureStreamEnabled(ref this, lstream, out fEnabled);
			public HRESULT IsAudioStreamEnabled(int32 lstream, out int16 fEnabled) mut => VT.IsAudioStreamEnabled(ref this, lstream, out fEnabled);
			public HRESULT get_CurrentSubpictureStream(out int32 pVal) mut => VT.get_CurrentSubpictureStream(ref this, out pVal);
			public HRESULT put_CurrentSubpictureStream(int32 newVal) mut => VT.put_CurrentSubpictureStream(ref this, newVal);
			public HRESULT get_SubpictureLanguage(int32 lStream, out BSTR strLanguage) mut => VT.get_SubpictureLanguage(ref this, lStream, out strLanguage);
			public HRESULT get_CurrentAudioStream(out int32 pVal) mut => VT.get_CurrentAudioStream(ref this, out pVal);
			public HRESULT put_CurrentAudioStream(int32 newVal) mut => VT.put_CurrentAudioStream(ref this, newVal);
			public HRESULT get_AudioStreamsAvailable(out int32 pVal) mut => VT.get_AudioStreamsAvailable(ref this, out pVal);
			public HRESULT get_AnglesAvailable(out int32 pVal) mut => VT.get_AnglesAvailable(ref this, out pVal);
			public HRESULT get_CurrentAngle(out int32 pVal) mut => VT.get_CurrentAngle(ref this, out pVal);
			public HRESULT put_CurrentAngle(int32 newVal) mut => VT.put_CurrentAngle(ref this, newVal);
			public HRESULT get_SubpictureStreamsAvailable(out int32 pVal) mut => VT.get_SubpictureStreamsAvailable(ref this, out pVal);
			public HRESULT get_SubpictureOn(out int16 pVal) mut => VT.get_SubpictureOn(ref this, out pVal);
			public HRESULT put_SubpictureOn(int16 newVal) mut => VT.put_SubpictureOn(ref this, newVal);
			public HRESULT get_DVDUniqueID(out BSTR pVal) mut => VT.get_DVDUniqueID(ref this, out pVal);
			public HRESULT AcceptParentalLevelChange(int16 fAccept, BSTR strUserName, BSTR strPassword) mut => VT.AcceptParentalLevelChange(ref this, fAccept, strUserName, strPassword);
			public HRESULT NotifyParentalLevelChange(int16 newVal) mut => VT.NotifyParentalLevelChange(ref this, newVal);
			public HRESULT SelectParentalCountry(int32 lCountry, BSTR strUserName, BSTR strPassword) mut => VT.SelectParentalCountry(ref this, lCountry, strUserName, strPassword);
			public HRESULT SelectParentalLevel(int32 lParentalLevel, BSTR strUserName, BSTR strPassword) mut => VT.SelectParentalLevel(ref this, lParentalLevel, strUserName, strPassword);
			public HRESULT get_TitleParentalLevels(int32 lTitle, out int32 plParentalLevels) mut => VT.get_TitleParentalLevels(ref this, lTitle, out plParentalLevels);
			public HRESULT get_PlayerParentalCountry(out int32 plCountryCode) mut => VT.get_PlayerParentalCountry(ref this, out plCountryCode);
			public HRESULT get_PlayerParentalLevel(out int32 plParentalLevel) mut => VT.get_PlayerParentalLevel(ref this, out plParentalLevel);
			public HRESULT Eject() mut => VT.Eject(ref this);
			public HRESULT UOPValid(int32 lUOP, out int16 pfValid) mut => VT.UOPValid(ref this, lUOP, out pfValid);
			public HRESULT get_SPRM(int32 lIndex, out int16 psSPRM) mut => VT.get_SPRM(ref this, lIndex, out psSPRM);
			public HRESULT get_GPRM(int32 lIndex, out int16 psSPRM) mut => VT.get_GPRM(ref this, lIndex, out psSPRM);
			public HRESULT put_GPRM(int32 lIndex, int16 sValue) mut => VT.put_GPRM(ref this, lIndex, sValue);
			public HRESULT get_DVDTextStringType(int32 lLangIndex, int32 lStringIndex, out DVDTextStringType pType) mut => VT.get_DVDTextStringType(ref this, lLangIndex, lStringIndex, out pType);
			public HRESULT get_DVDTextString(int32 lLangIndex, int32 lStringIndex, out BSTR pstrText) mut => VT.get_DVDTextString(ref this, lLangIndex, lStringIndex, out pstrText);
			public HRESULT get_DVDTextNumberOfStrings(int32 lLangIndex, out int32 plNumOfStrings) mut => VT.get_DVDTextNumberOfStrings(ref this, lLangIndex, out plNumOfStrings);
			public HRESULT get_DVDTextNumberOfLanguages(out int32 plNumOfLangs) mut => VT.get_DVDTextNumberOfLanguages(ref this, out plNumOfLangs);
			public HRESULT get_DVDTextLanguageLCID(int32 lLangIndex, out int32 lcid) mut => VT.get_DVDTextLanguageLCID(ref this, lLangIndex, out lcid);
			public HRESULT RegionChange() mut => VT.RegionChange(ref this);
			public HRESULT get_DVDAdm(out IDispatch* pVal) mut => VT.get_DVDAdm(ref this, out pVal);
			public HRESULT DeleteBookmark() mut => VT.DeleteBookmark(ref this);
			public HRESULT RestoreBookmark() mut => VT.RestoreBookmark(ref this);
			public HRESULT SaveBookmark() mut => VT.SaveBookmark(ref this);
			public HRESULT SelectDefaultAudioLanguage(int32 lang, int32 ext) mut => VT.SelectDefaultAudioLanguage(ref this, lang, ext);
			public HRESULT SelectDefaultSubpictureLanguage(int32 lang, DVDSPExt ext) mut => VT.SelectDefaultSubpictureLanguage(ref this, lang, ext);
			public HRESULT get_PreferredSubpictureStream(out int32 pVal) mut => VT.get_PreferredSubpictureStream(ref this, out pVal);
			public HRESULT get_DefaultMenuLanguage(out int32 lang) mut => VT.get_DefaultMenuLanguage(ref this, out lang);
			public HRESULT put_DefaultMenuLanguage(int32 lang) mut => VT.put_DefaultMenuLanguage(ref this, lang);
			public HRESULT get_DefaultSubpictureLanguage(out int32 lang) mut => VT.get_DefaultSubpictureLanguage(ref this, out lang);
			public HRESULT get_DefaultAudioLanguage(out int32 lang) mut => VT.get_DefaultAudioLanguage(ref this, out lang);
			public HRESULT get_DefaultSubpictureLanguageExt(out DVDSPExt ext) mut => VT.get_DefaultSubpictureLanguageExt(ref this, out ext);
			public HRESULT get_DefaultAudioLanguageExt(out int32 ext) mut => VT.get_DefaultAudioLanguageExt(ref this, out ext);
			public HRESULT get_LanguageFromLCID(int32 lcid, out BSTR lang) mut => VT.get_LanguageFromLCID(ref this, lcid, out lang);
			public HRESULT get_KaraokeAudioPresentationMode(out int32 pVal) mut => VT.get_KaraokeAudioPresentationMode(ref this, out pVal);
			public HRESULT put_KaraokeAudioPresentationMode(int32 newVal) mut => VT.put_KaraokeAudioPresentationMode(ref this, newVal);
			public HRESULT get_KaraokeChannelContent(int32 lStream, int32 lChan, out int32 lContent) mut => VT.get_KaraokeChannelContent(ref this, lStream, lChan, out lContent);
			public HRESULT get_KaraokeChannelAssignment(int32 lStream, out int32 lChannelAssignment) mut => VT.get_KaraokeChannelAssignment(ref this, lStream, out lChannelAssignment);
			public HRESULT RestorePreferredSettings() mut => VT.RestorePreferredSettings(ref this);
			public HRESULT get_ButtonRect(int32 lButton, out IMSVidRect* pRect) mut => VT.get_ButtonRect(ref this, lButton, out pRect);
			public HRESULT get_DVDScreenInMouseCoordinates(out IMSVidRect* ppRect) mut => VT.get_DVDScreenInMouseCoordinates(ref this, out ppRect);
			public HRESULT put_DVDScreenInMouseCoordinates(ref IMSVidRect pRect) mut => VT.put_DVDScreenInMouseCoordinates(ref this, ref pRect);

			[CRepr]
			public struct VTable : IMSVidPlayback.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lEvent, int lParam1, int lParam2) OnDVDEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle) PlayTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle, int32 lChapter) PlayChapterInTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lChapter) PlayChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle, int32 lstrChapter, int32 lChapterCount) PlayChaptersAutoStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, BSTR strTime) PlayAtTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle, BSTR strTime) PlayAtTimeInTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle, BSTR strStartTime, BSTR strEndTime) PlayPeriodInTitleAutoStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) ReplayChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) PlayPrevChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) PlayNextChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) StillOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lStream, int16 fFormat, out BSTR strAudioLang) get_AudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, DVDMenuIDConstants MenuID) ShowMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) Resume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) ReturnFromSubmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_ButtonsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lButton) SelectAndActivateButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) ActivateButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) SelectRightButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) SelectLeftButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) SelectLowerButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) SelectUpperButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 xPos, int32 yPos) ActivateAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 xPos, int32 yPos) SelectAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 xPos, int32 yPos, out int32 plButton) get_ButtonAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle, out int32 pVal) get_NumberOfChapters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out BSTR pVal) get_TotalTitleTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_TitlesAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_VolumesAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentVolume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentDiscSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentDomain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out BSTR pVal) get_CurrentTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 timeCode, out BSTR pTimeStr) DVDTimeCode2bstr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out BSTR pVal) get_DVDDirectory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, BSTR newVal) put_DVDDirectory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lstream, out int16 fEnabled) IsSubpictureStreamEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lstream, out int16 fEnabled) IsAudioStreamEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentSubpictureStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 newVal) put_CurrentSubpictureStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lStream, out BSTR strLanguage) get_SubpictureLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentAudioStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 newVal) put_CurrentAudioStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_AudioStreamsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_AnglesAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_CurrentAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 newVal) put_CurrentAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_SubpictureStreamsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int16 pVal) get_SubpictureOn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int16 newVal) put_SubpictureOn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out BSTR pVal) get_DVDUniqueID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int16 fAccept, BSTR strUserName, BSTR strPassword) AcceptParentalLevelChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int16 newVal) NotifyParentalLevelChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lCountry, BSTR strUserName, BSTR strPassword) SelectParentalCountry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lParentalLevel, BSTR strUserName, BSTR strPassword) SelectParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lTitle, out int32 plParentalLevels) get_TitleParentalLevels;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 plCountryCode) get_PlayerParentalCountry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 plParentalLevel) get_PlayerParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) Eject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lUOP, out int16 pfValid) UOPValid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lIndex, out int16 psSPRM) get_SPRM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lIndex, out int16 psSPRM) get_GPRM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lIndex, int16 sValue) put_GPRM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lLangIndex, int32 lStringIndex, out DVDTextStringType pType) get_DVDTextStringType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lLangIndex, int32 lStringIndex, out BSTR pstrText) get_DVDTextString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lLangIndex, out int32 plNumOfStrings) get_DVDTextNumberOfStrings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 plNumOfLangs) get_DVDTextNumberOfLanguages;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lLangIndex, out int32 lcid) get_DVDTextLanguageLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) RegionChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out IDispatch* pVal) get_DVDAdm;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) DeleteBookmark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) RestoreBookmark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) SaveBookmark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lang, int32 ext) SelectDefaultAudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lang, DVDSPExt ext) SelectDefaultSubpictureLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_PreferredSubpictureStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 lang) get_DefaultMenuLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lang) put_DefaultMenuLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 lang) get_DefaultSubpictureLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 lang) get_DefaultAudioLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out DVDSPExt ext) get_DefaultSubpictureLanguageExt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 ext) get_DefaultAudioLanguageExt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lcid, out BSTR lang) get_LanguageFromLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out int32 pVal) get_KaraokeAudioPresentationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 newVal) put_KaraokeAudioPresentationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lStream, int32 lChan, out int32 lContent) get_KaraokeChannelContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lStream, out int32 lChannelAssignment) get_KaraokeChannelAssignment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self) RestorePreferredSettings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, int32 lButton, out IMSVidRect* pRect) get_ButtonRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, out IMSVidRect* ppRect) get_DVDScreenInMouseCoordinates;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD self, ref IMSVidRect pRect) put_DVDScreenInMouseCoordinates;
			}
		}
		[CRepr]
		public struct IMSVidWebDVD2 : IMSVidWebDVD
		{
			public const new Guid IID = .(0x7027212f, 0xee9a, 0x4a7c, 0x8b, 0x67, 0xf0, 0x23, 0x71, 0x4c, 0xda, 0xff);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Bookmark(uint8** ppData, out uint32 pDataLength) mut => VT.get_Bookmark(ref this, ppData, out pDataLength);
			public HRESULT put_Bookmark(ref uint8 pData, uint32 dwDataLength) mut => VT.put_Bookmark(ref this, ref pData, dwDataLength);

			[CRepr]
			public struct VTable : IMSVidWebDVD.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD2 self, uint8** ppData, out uint32 pDataLength) get_Bookmark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVD2 self, ref uint8 pData, uint32 dwDataLength) put_Bookmark;
			}
		}
		[CRepr]
		public struct IMSVidWebDVDEvent : IMSVidPlaybackEvent
		{
			public const new Guid IID = .(0xb4f7a674, 0x9b83, 0x49cb, 0xa3, 0x57, 0xc6, 0x3b, 0x87, 0x1b, 0xe9, 0x58);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT DVDNotify(int32 lEventCode, VARIANT lParam1, VARIANT lParam2) mut => VT.DVDNotify(ref this, lEventCode, lParam1, lParam2);
			public HRESULT PlayForwards(int16 bEnabled) mut => VT.PlayForwards(ref this, bEnabled);
			public HRESULT PlayBackwards(int16 bEnabled) mut => VT.PlayBackwards(ref this, bEnabled);
			public HRESULT ShowMenu(DVDMenuIDConstants MenuID, int16 bEnabled) mut => VT.ShowMenu(ref this, MenuID, bEnabled);
			public HRESULT Resume(int16 bEnabled) mut => VT.Resume(ref this, bEnabled);
			public HRESULT SelectOrActivateButton(int16 bEnabled) mut => VT.SelectOrActivateButton(ref this, bEnabled);
			public HRESULT StillOff(int16 bEnabled) mut => VT.StillOff(ref this, bEnabled);
			public HRESULT PauseOn(int16 bEnabled) mut => VT.PauseOn(ref this, bEnabled);
			public HRESULT ChangeCurrentAudioStream(int16 bEnabled) mut => VT.ChangeCurrentAudioStream(ref this, bEnabled);
			public HRESULT ChangeCurrentSubpictureStream(int16 bEnabled) mut => VT.ChangeCurrentSubpictureStream(ref this, bEnabled);
			public HRESULT ChangeCurrentAngle(int16 bEnabled) mut => VT.ChangeCurrentAngle(ref this, bEnabled);
			public HRESULT PlayAtTimeInTitle(int16 bEnabled) mut => VT.PlayAtTimeInTitle(ref this, bEnabled);
			public HRESULT PlayAtTime(int16 bEnabled) mut => VT.PlayAtTime(ref this, bEnabled);
			public HRESULT PlayChapterInTitle(int16 bEnabled) mut => VT.PlayChapterInTitle(ref this, bEnabled);
			public HRESULT PlayChapter(int16 bEnabled) mut => VT.PlayChapter(ref this, bEnabled);
			public HRESULT ReplayChapter(int16 bEnabled) mut => VT.ReplayChapter(ref this, bEnabled);
			public HRESULT PlayNextChapter(int16 bEnabled) mut => VT.PlayNextChapter(ref this, bEnabled);
			public HRESULT Stop(int16 bEnabled) mut => VT.Stop(ref this, bEnabled);
			public HRESULT ReturnFromSubmenu(int16 bEnabled) mut => VT.ReturnFromSubmenu(ref this, bEnabled);
			public HRESULT PlayTitle(int16 bEnabled) mut => VT.PlayTitle(ref this, bEnabled);
			public HRESULT PlayPrevChapter(int16 bEnabled) mut => VT.PlayPrevChapter(ref this, bEnabled);
			public HRESULT ChangeKaraokePresMode(int16 bEnabled) mut => VT.ChangeKaraokePresMode(ref this, bEnabled);
			public HRESULT ChangeVideoPresMode(int16 bEnabled) mut => VT.ChangeVideoPresMode(ref this, bEnabled);

			[CRepr]
			public struct VTable : IMSVidPlaybackEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int32 lEventCode, VARIANT lParam1, VARIANT lParam2) DVDNotify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayForwards;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayBackwards;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, DVDMenuIDConstants MenuID, int16 bEnabled) ShowMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) Resume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) SelectOrActivateButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) StillOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PauseOn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ChangeCurrentAudioStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ChangeCurrentSubpictureStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ChangeCurrentAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayAtTimeInTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayAtTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayChapterInTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ReplayChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayNextChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ReturnFromSubmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayTitle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) PlayPrevChapter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ChangeKaraokePresMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDEvent self, int16 bEnabled) ChangeVideoPresMode;
			}
		}
		[CRepr]
		public struct IMSVidWebDVDAdm : IDispatch
		{
			public const new Guid IID = .(0xb8be681a, 0xeb2c, 0x47f0, 0xb4, 0x15, 0x94, 0xd5, 0x45, 0x2f, 0x0e, 0x05);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ChangePassword(BSTR strUserName, BSTR strOld, BSTR strNew) mut => VT.ChangePassword(ref this, strUserName, strOld, strNew);
			public HRESULT SaveParentalLevel(int32 level, BSTR strUserName, BSTR strPassword) mut => VT.SaveParentalLevel(ref this, level, strUserName, strPassword);
			public HRESULT SaveParentalCountry(int32 country, BSTR strUserName, BSTR strPassword) mut => VT.SaveParentalCountry(ref this, country, strUserName, strPassword);
			public HRESULT ConfirmPassword(BSTR strUserName, BSTR strPassword, out int16 pVal) mut => VT.ConfirmPassword(ref this, strUserName, strPassword, out pVal);
			public HRESULT GetParentalLevel(out int32 lLevel) mut => VT.GetParentalLevel(ref this, out lLevel);
			public HRESULT GetParentalCountry(out int32 lCountry) mut => VT.GetParentalCountry(ref this, out lCountry);
			public HRESULT get_DefaultAudioLCID(out int32 pVal) mut => VT.get_DefaultAudioLCID(ref this, out pVal);
			public HRESULT put_DefaultAudioLCID(int32 newVal) mut => VT.put_DefaultAudioLCID(ref this, newVal);
			public HRESULT get_DefaultSubpictureLCID(out int32 pVal) mut => VT.get_DefaultSubpictureLCID(ref this, out pVal);
			public HRESULT put_DefaultSubpictureLCID(int32 newVal) mut => VT.put_DefaultSubpictureLCID(ref this, newVal);
			public HRESULT get_DefaultMenuLCID(out int32 pVal) mut => VT.get_DefaultMenuLCID(ref this, out pVal);
			public HRESULT put_DefaultMenuLCID(int32 newVal) mut => VT.put_DefaultMenuLCID(ref this, newVal);
			public HRESULT get_BookmarkOnStop(out int16 pVal) mut => VT.get_BookmarkOnStop(ref this, out pVal);
			public HRESULT put_BookmarkOnStop(int16 newVal) mut => VT.put_BookmarkOnStop(ref this, newVal);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, BSTR strUserName, BSTR strOld, BSTR strNew) ChangePassword;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, int32 level, BSTR strUserName, BSTR strPassword) SaveParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, int32 country, BSTR strUserName, BSTR strPassword) SaveParentalCountry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, BSTR strUserName, BSTR strPassword, out int16 pVal) ConfirmPassword;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, out int32 lLevel) GetParentalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, out int32 lCountry) GetParentalCountry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, out int32 pVal) get_DefaultAudioLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, int32 newVal) put_DefaultAudioLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, out int32 pVal) get_DefaultSubpictureLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, int32 newVal) put_DefaultSubpictureLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, out int32 pVal) get_DefaultMenuLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, int32 newVal) put_DefaultMenuLCID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, out int16 pVal) get_BookmarkOnStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidWebDVDAdm self, int16 newVal) put_BookmarkOnStop;
			}
		}
		[CRepr]
		public struct IMSVidOutputDevice : IMSVidDevice
		{
			public const new Guid IID = .(0x37b03546, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidDevice.VTable {}
		}
		[CRepr]
		public struct IMSVidOutputDeviceEvent : IMSVidDeviceEvent
		{
			public const new Guid IID = .(0x2e6a14e2, 0x571c, 0x11d3, 0xb6, 0x52, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidDeviceEvent.VTable {}
		}
		[CRepr]
		public struct IMSVidFeature : IMSVidDevice
		{
			public const new Guid IID = .(0x37b03547, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidDevice.VTable {}
		}
		[CRepr]
		public struct IMSVidFeatureEvent : IMSVidDeviceEvent
		{
			public const new Guid IID = .(0x3dd2903c, 0xe0aa, 0x11d2, 0xb6, 0x3a, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidDeviceEvent.VTable {}
		}
		[CRepr]
		public struct IMSVidEncoder : IMSVidFeature
		{
			public const new Guid IID = .(0xc0020fd4, 0xbee7, 0x43d9, 0xa4, 0x95, 0x9f, 0x21, 0x31, 0x17, 0x10, 0x3d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_VideoEncoderInterface(out IUnknown* ppEncInt) mut => VT.get_VideoEncoderInterface(ref this, out ppEncInt);
			public HRESULT get_AudioEncoderInterface(out IUnknown* ppEncInt) mut => VT.get_AudioEncoderInterface(ref this, out ppEncInt);

			[CRepr]
			public struct VTable : IMSVidFeature.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEncoder self, out IUnknown* ppEncInt) get_VideoEncoderInterface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEncoder self, out IUnknown* ppEncInt) get_AudioEncoderInterface;
			}
		}
		[CRepr]
		public struct IMSVidClosedCaptioning : IMSVidFeature
		{
			public const new Guid IID = .(0x99652ea1, 0xc1f7, 0x414f, 0xbb, 0x7b, 0x1c, 0x96, 0x7d, 0xe7, 0x59, 0x83);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Enable(out int16 On) mut => VT.get_Enable(ref this, out On);
			public HRESULT put_Enable(int16 On) mut => VT.put_Enable(ref this, On);

			[CRepr]
			public struct VTable : IMSVidFeature.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidClosedCaptioning self, out int16 On) get_Enable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidClosedCaptioning self, int16 On) put_Enable;
			}
		}
		[CRepr]
		public struct IMSVidClosedCaptioning2 : IMSVidClosedCaptioning
		{
			public const new Guid IID = .(0xe00cb864, 0xa029, 0x4310, 0x99, 0x87, 0xa8, 0x73, 0xf5, 0x88, 0x7d, 0x97);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Service(out MSVidCCService On) mut => VT.get_Service(ref this, out On);
			public HRESULT put_Service(MSVidCCService On) mut => VT.put_Service(ref this, On);

			[CRepr]
			public struct VTable : IMSVidClosedCaptioning.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidClosedCaptioning2 self, out MSVidCCService On) get_Service;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidClosedCaptioning2 self, MSVidCCService On) put_Service;
			}
		}
		[CRepr]
		public struct IMSVidClosedCaptioning3 : IMSVidClosedCaptioning2
		{
			public const new Guid IID = .(0xc8638e8a, 0x7625, 0x4c51, 0x93, 0x66, 0x2f, 0x40, 0xa9, 0x83, 0x1f, 0xc0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_TeleTextFilter(out IUnknown* punkTTFilter) mut => VT.get_TeleTextFilter(ref this, out punkTTFilter);

			[CRepr]
			public struct VTable : IMSVidClosedCaptioning2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidClosedCaptioning3 self, out IUnknown* punkTTFilter) get_TeleTextFilter;
			}
		}
		[CRepr]
		public struct IMSVidXDS : IMSVidFeature
		{
			public const new Guid IID = .(0x11ebc158, 0xe712, 0x4d1f, 0x8b, 0xb3, 0x01, 0xed, 0x52, 0x74, 0xc4, 0xce);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ChannelChangeInterface(out IUnknown* punkCC) mut => VT.get_ChannelChangeInterface(ref this, out punkCC);

			[CRepr]
			public struct VTable : IMSVidFeature.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidXDS self, out IUnknown* punkCC) get_ChannelChangeInterface;
			}
		}
		[CRepr]
		public struct IMSVidXDSEvent : IMSVidFeatureEvent
		{
			public const new Guid IID = .(0x6db2317d, 0x3b23, 0x41ec, 0xba, 0x4b, 0x70, 0x1f, 0x40, 0x7e, 0xaf, 0x3a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RatingChange(EnTvRat_System PrevRatingSystem, EnTvRat_GenericLevel PrevLevel, BfEnTvRat_GenericAttributes PrevAttributes, EnTvRat_System NewRatingSystem, EnTvRat_GenericLevel NewLevel, BfEnTvRat_GenericAttributes NewAttributes) mut => VT.RatingChange(ref this, PrevRatingSystem, PrevLevel, PrevAttributes, NewRatingSystem, NewLevel, NewAttributes);

			[CRepr]
			public struct VTable : IMSVidFeatureEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidXDSEvent self, EnTvRat_System PrevRatingSystem, EnTvRat_GenericLevel PrevLevel, BfEnTvRat_GenericAttributes PrevAttributes, EnTvRat_System NewRatingSystem, EnTvRat_GenericLevel NewLevel, BfEnTvRat_GenericAttributes NewAttributes) RatingChange;
			}
		}
		[CRepr]
		public struct IMSVidDataServices : IMSVidFeature
		{
			public const new Guid IID = .(0x334125c1, 0x77e5, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidFeature.VTable {}
		}
		[CRepr]
		public struct IMSVidDataServicesEvent : IMSVidDeviceEvent
		{
			public const new Guid IID = .(0x334125c2, 0x77e5, 0x11d3, 0xb6, 0x53, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidDeviceEvent.VTable {}
		}
		[CRepr]
		public struct IMSVidVideoRenderer : IMSVidOutputDevice
		{
			public const new Guid IID = .(0x37b03540, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_CustomCompositorClass(out BSTR CompositorCLSID) mut => VT.get_CustomCompositorClass(ref this, out CompositorCLSID);
			public HRESULT put_CustomCompositorClass(BSTR CompositorCLSID) mut => VT.put_CustomCompositorClass(ref this, CompositorCLSID);
			public HRESULT get__CustomCompositorClass(out Guid CompositorCLSID) mut => VT.get__CustomCompositorClass(ref this, out CompositorCLSID);
			public HRESULT put__CustomCompositorClass(in Guid CompositorCLSID) mut => VT.put__CustomCompositorClass(ref this, CompositorCLSID);
			public HRESULT get__CustomCompositor(out IVMRImageCompositor* Compositor) mut => VT.get__CustomCompositor(ref this, out Compositor);
			public HRESULT put__CustomCompositor(ref IVMRImageCompositor Compositor) mut => VT.put__CustomCompositor(ref this, ref Compositor);
			public HRESULT get_MixerBitmap(out IPictureDisp* MixerPictureDisp) mut => VT.get_MixerBitmap(ref this, out MixerPictureDisp);
			public HRESULT get__MixerBitmap(out IVMRMixerBitmap* MixerPicture) mut => VT.get__MixerBitmap(ref this, out MixerPicture);
			public HRESULT put_MixerBitmap(ref IPictureDisp MixerPictureDisp) mut => VT.put_MixerBitmap(ref this, ref MixerPictureDisp);
			public HRESULT put__MixerBitmap(ref VMRALPHABITMAP MixerPicture) mut => VT.put__MixerBitmap(ref this, ref MixerPicture);
			public HRESULT get_MixerBitmapPositionRect(out IMSVidRect* rDest) mut => VT.get_MixerBitmapPositionRect(ref this, out rDest);
			public HRESULT put_MixerBitmapPositionRect(ref IMSVidRect rDest) mut => VT.put_MixerBitmapPositionRect(ref this, ref rDest);
			public HRESULT get_MixerBitmapOpacity(out int32 opacity) mut => VT.get_MixerBitmapOpacity(ref this, out opacity);
			public HRESULT put_MixerBitmapOpacity(int32 opacity) mut => VT.put_MixerBitmapOpacity(ref this, opacity);
			public HRESULT SetupMixerBitmap(ref IPictureDisp MixerPictureDisp, int32 Opacity, ref IMSVidRect rDest) mut => VT.SetupMixerBitmap(ref this, ref MixerPictureDisp, Opacity, ref rDest);
			public HRESULT get_SourceSize(out SourceSizeList CurrentSize) mut => VT.get_SourceSize(ref this, out CurrentSize);
			public HRESULT put_SourceSize(SourceSizeList NewSize) mut => VT.put_SourceSize(ref this, NewSize);
			public HRESULT get_OverScan(out int32 plPercent) mut => VT.get_OverScan(ref this, out plPercent);
			public HRESULT put_OverScan(int32 lPercent) mut => VT.put_OverScan(ref this, lPercent);
			public HRESULT get_AvailableSourceRect(out IMSVidRect* pRect) mut => VT.get_AvailableSourceRect(ref this, out pRect);
			public HRESULT get_MaxVidRect(out IMSVidRect* ppVidRect) mut => VT.get_MaxVidRect(ref this, out ppVidRect);
			public HRESULT get_MinVidRect(out IMSVidRect* ppVidRect) mut => VT.get_MinVidRect(ref this, out ppVidRect);
			public HRESULT get_ClippedSourceRect(out IMSVidRect* pRect) mut => VT.get_ClippedSourceRect(ref this, out pRect);
			public HRESULT put_ClippedSourceRect(ref IMSVidRect pRect) mut => VT.put_ClippedSourceRect(ref this, ref pRect);
			public HRESULT get_UsingOverlay(out int16 UseOverlayVal) mut => VT.get_UsingOverlay(ref this, out UseOverlayVal);
			public HRESULT put_UsingOverlay(int16 UseOverlayVal) mut => VT.put_UsingOverlay(ref this, UseOverlayVal);
			public HRESULT Capture(out IPictureDisp* currentImage) mut => VT.Capture(ref this, out currentImage);
			public HRESULT get_FramesPerSecond(out int32 pVal) mut => VT.get_FramesPerSecond(ref this, out pVal);
			public HRESULT get_DecimateInput(out int16 pDeci) mut => VT.get_DecimateInput(ref this, out pDeci);
			public HRESULT put_DecimateInput(int16 pDeci) mut => VT.put_DecimateInput(ref this, pDeci);

			[CRepr]
			public struct VTable : IMSVidOutputDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out BSTR CompositorCLSID) get_CustomCompositorClass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, BSTR CompositorCLSID) put_CustomCompositorClass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out Guid CompositorCLSID) get__CustomCompositorClass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, in Guid CompositorCLSID) put__CustomCompositorClass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IVMRImageCompositor* Compositor) get__CustomCompositor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, ref IVMRImageCompositor Compositor) put__CustomCompositor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IPictureDisp* MixerPictureDisp) get_MixerBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IVMRMixerBitmap* MixerPicture) get__MixerBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, ref IPictureDisp MixerPictureDisp) put_MixerBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, ref VMRALPHABITMAP MixerPicture) put__MixerBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IMSVidRect* rDest) get_MixerBitmapPositionRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, ref IMSVidRect rDest) put_MixerBitmapPositionRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out int32 opacity) get_MixerBitmapOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, int32 opacity) put_MixerBitmapOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, ref IPictureDisp MixerPictureDisp, int32 Opacity, ref IMSVidRect rDest) SetupMixerBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out SourceSizeList CurrentSize) get_SourceSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, SourceSizeList NewSize) put_SourceSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out int32 plPercent) get_OverScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, int32 lPercent) put_OverScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IMSVidRect* pRect) get_AvailableSourceRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IMSVidRect* ppVidRect) get_MaxVidRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IMSVidRect* ppVidRect) get_MinVidRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IMSVidRect* pRect) get_ClippedSourceRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, ref IMSVidRect pRect) put_ClippedSourceRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out int16 UseOverlayVal) get_UsingOverlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, int16 UseOverlayVal) put_UsingOverlay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out IPictureDisp* currentImage) Capture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out int32 pVal) get_FramesPerSecond;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, out int16 pDeci) get_DecimateInput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer self, int16 pDeci) put_DecimateInput;
			}
		}
		[CRepr]
		public struct IMSVidVideoRendererEvent : IMSVidOutputDeviceEvent
		{
			public const new Guid IID = .(0x37b03545, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OverlayUnavailable() mut => VT.OverlayUnavailable(ref this);

			[CRepr]
			public struct VTable : IMSVidOutputDeviceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererEvent self) OverlayUnavailable;
			}
		}
		[CRepr]
		public struct IMSVidGenericSink : IMSVidOutputDevice
		{
			public const new Guid IID = .(0x6c29b41d, 0x455b, 0x4c33, 0x96, 0x3a, 0x0d, 0x28, 0xe5, 0xe5, 0x55, 0xea);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetSinkFilter(BSTR bstrName) mut => VT.SetSinkFilter(ref this, bstrName);
			public HRESULT get_SinkStreams(out MSVidSinkStreams pStreams) mut => VT.get_SinkStreams(ref this, out pStreams);
			public HRESULT put_SinkStreams(MSVidSinkStreams Streams) mut => VT.put_SinkStreams(ref this, Streams);

			[CRepr]
			public struct VTable : IMSVidOutputDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGenericSink self, BSTR bstrName) SetSinkFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGenericSink self, out MSVidSinkStreams pStreams) get_SinkStreams;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGenericSink self, MSVidSinkStreams Streams) put_SinkStreams;
			}
		}
		[CRepr]
		public struct IMSVidGenericSink2 : IMSVidGenericSink
		{
			public const new Guid IID = .(0x6b5a28f3, 0x47f1, 0x4092, 0xb1, 0x68, 0x60, 0xca, 0xbe, 0xc0, 0x8f, 0x1c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddFilter(BSTR bstrName) mut => VT.AddFilter(ref this, bstrName);
			public HRESULT ResetFilterList() mut => VT.ResetFilterList(ref this);

			[CRepr]
			public struct VTable : IMSVidGenericSink.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGenericSink2 self, BSTR bstrName) AddFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidGenericSink2 self) ResetFilterList;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferRecordingControl : IDispatch
		{
			public const new Guid IID = .(0x160621aa, 0xbbbc, 0x4326, 0xa8, 0x24, 0xc3, 0x95, 0xae, 0xbc, 0x6e, 0x74);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_StartTime(out int32 rtStart) mut => VT.get_StartTime(ref this, out rtStart);
			public HRESULT put_StartTime(int32 rtStart) mut => VT.put_StartTime(ref this, rtStart);
			public HRESULT get_StopTime(out int32 rtStop) mut => VT.get_StopTime(ref this, out rtStop);
			public HRESULT put_StopTime(int32 rtStop) mut => VT.put_StopTime(ref this, rtStop);
			public HRESULT get_RecordingStopped(out int16 phResult) mut => VT.get_RecordingStopped(ref this, out phResult);
			public HRESULT get_RecordingStarted(out int16 phResult) mut => VT.get_RecordingStarted(ref this, out phResult);
			public HRESULT get_RecordingType(out RecordingType dwType) mut => VT.get_RecordingType(ref this, out dwType);
			public HRESULT get_RecordingAttribute(out IUnknown* pRecordingAttribute) mut => VT.get_RecordingAttribute(ref this, out pRecordingAttribute);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, out int32 rtStart) get_StartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, int32 rtStart) put_StartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, out int32 rtStop) get_StopTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, int32 rtStop) put_StopTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, out int16 phResult) get_RecordingStopped;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, out int16 phResult) get_RecordingStarted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, out RecordingType dwType) get_RecordingType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferRecordingControl self, out IUnknown* pRecordingAttribute) get_RecordingAttribute;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSink : IMSVidOutputDevice
		{
			public const new Guid IID = .(0x159dbb45, 0xcd1b, 0x4dab, 0x83, 0xea, 0x5c, 0xb1, 0xf4, 0xf2, 0x1d, 0x07);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ContentRecorder(BSTR pszFilename, out IMSVidStreamBufferRecordingControl* pRecordingIUnknown) mut => VT.get_ContentRecorder(ref this, pszFilename, out pRecordingIUnknown);
			public HRESULT get_ReferenceRecorder(BSTR pszFilename, out IMSVidStreamBufferRecordingControl* pRecordingIUnknown) mut => VT.get_ReferenceRecorder(ref this, pszFilename, out pRecordingIUnknown);
			public HRESULT get_SinkName(out BSTR pName) mut => VT.get_SinkName(ref this, out pName);
			public HRESULT put_SinkName(BSTR Name) mut => VT.put_SinkName(ref this, Name);
			public HRESULT NameSetLock() mut => VT.NameSetLock(ref this);
			public HRESULT get_SBESink(out IUnknown* sbeConfig) mut => VT.get_SBESink(ref this, out sbeConfig);

			[CRepr]
			public struct VTable : IMSVidOutputDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink self, BSTR pszFilename, out IMSVidStreamBufferRecordingControl* pRecordingIUnknown) get_ContentRecorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink self, BSTR pszFilename, out IMSVidStreamBufferRecordingControl* pRecordingIUnknown) get_ReferenceRecorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink self, out BSTR pName) get_SinkName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink self, BSTR Name) put_SinkName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink self) NameSetLock;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink self, out IUnknown* sbeConfig) get_SBESink;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSink2 : IMSVidStreamBufferSink
		{
			public const new Guid IID = .(0x2ca9fc63, 0xc131, 0x4e5a, 0x95, 0x5a, 0x54, 0x4a, 0x47, 0xc6, 0x71, 0x46);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT UnlockProfile() mut => VT.UnlockProfile(ref this);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSink.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink2 self) UnlockProfile;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSink3 : IMSVidStreamBufferSink2
		{
			public const new Guid IID = .(0x4f8721d7, 0x7d59, 0x4d8b, 0x99, 0xf5, 0xa7, 0x77, 0x75, 0x58, 0x6b, 0xd5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMinSeek(out int32 pdwMin) mut => VT.SetMinSeek(ref this, out pdwMin);
			public HRESULT get_AudioCounter(out IUnknown* ppUnk) mut => VT.get_AudioCounter(ref this, out ppUnk);
			public HRESULT get_VideoCounter(out IUnknown* ppUnk) mut => VT.get_VideoCounter(ref this, out ppUnk);
			public HRESULT get_CCCounter(out IUnknown* ppUnk) mut => VT.get_CCCounter(ref this, out ppUnk);
			public HRESULT get_WSTCounter(out IUnknown* ppUnk) mut => VT.get_WSTCounter(ref this, out ppUnk);
			public HRESULT put_AudioAnalysisFilter(BSTR szCLSID) mut => VT.put_AudioAnalysisFilter(ref this, szCLSID);
			public HRESULT get_AudioAnalysisFilter(out BSTR pszCLSID) mut => VT.get_AudioAnalysisFilter(ref this, out pszCLSID);
			public HRESULT put__AudioAnalysisFilter(Guid guid) mut => VT.put__AudioAnalysisFilter(ref this, guid);
			public HRESULT get__AudioAnalysisFilter(out Guid pGuid) mut => VT.get__AudioAnalysisFilter(ref this, out pGuid);
			public HRESULT put_VideoAnalysisFilter(BSTR szCLSID) mut => VT.put_VideoAnalysisFilter(ref this, szCLSID);
			public HRESULT get_VideoAnalysisFilter(out BSTR pszCLSID) mut => VT.get_VideoAnalysisFilter(ref this, out pszCLSID);
			public HRESULT put__VideoAnalysisFilter(Guid guid) mut => VT.put__VideoAnalysisFilter(ref this, guid);
			public HRESULT get__VideoAnalysisFilter(out Guid pGuid) mut => VT.get__VideoAnalysisFilter(ref this, out pGuid);
			public HRESULT put_DataAnalysisFilter(BSTR szCLSID) mut => VT.put_DataAnalysisFilter(ref this, szCLSID);
			public HRESULT get_DataAnalysisFilter(out BSTR pszCLSID) mut => VT.get_DataAnalysisFilter(ref this, out pszCLSID);
			public HRESULT put__DataAnalysisFilter(Guid guid) mut => VT.put__DataAnalysisFilter(ref this, guid);
			public HRESULT get__DataAnalysisFilter(out Guid pGuid) mut => VT.get__DataAnalysisFilter(ref this, out pGuid);
			public HRESULT get_LicenseErrorCode(out HRESULT hres) mut => VT.get_LicenseErrorCode(ref this, out hres);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSink2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out int32 pdwMin) SetMinSeek;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out IUnknown* ppUnk) get_AudioCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out IUnknown* ppUnk) get_VideoCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out IUnknown* ppUnk) get_CCCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out IUnknown* ppUnk) get_WSTCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, BSTR szCLSID) put_AudioAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out BSTR pszCLSID) get_AudioAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, Guid guid) put__AudioAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out Guid pGuid) get__AudioAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, BSTR szCLSID) put_VideoAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out BSTR pszCLSID) get_VideoAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, Guid guid) put__VideoAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out Guid pGuid) get__VideoAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, BSTR szCLSID) put_DataAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out BSTR pszCLSID) get_DataAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, Guid guid) put__DataAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out Guid pGuid) get__DataAnalysisFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSink3 self, out HRESULT hres) get_LicenseErrorCode;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSinkEvent : IMSVidOutputDeviceEvent
		{
			public const new Guid IID = .(0xf798a36b, 0xb05b, 0x4bbe, 0x97, 0x03, 0xea, 0xea, 0x7d, 0x61, 0xcd, 0x51);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CertificateFailure() mut => VT.CertificateFailure(ref this);
			public HRESULT CertificateSuccess() mut => VT.CertificateSuccess(ref this);
			public HRESULT WriteFailure() mut => VT.WriteFailure(ref this);

			[CRepr]
			public struct VTable : IMSVidOutputDeviceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent self) CertificateFailure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent self) CertificateSuccess;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent self) WriteFailure;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSinkEvent2 : IMSVidStreamBufferSinkEvent
		{
			public const new Guid IID = .(0x3d7a5166, 0x72d7, 0x484b, 0xa0, 0x6f, 0x28, 0x61, 0x87, 0xb8, 0x0c, 0xa1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EncryptionOn() mut => VT.EncryptionOn(ref this);
			public HRESULT EncryptionOff() mut => VT.EncryptionOff(ref this);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSinkEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent2 self) EncryptionOn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent2 self) EncryptionOff;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSinkEvent3 : IMSVidStreamBufferSinkEvent2
		{
			public const new Guid IID = .(0x735ad8d5, 0xc259, 0x48e9, 0x81, 0xe7, 0xd2, 0x79, 0x53, 0x66, 0x5b, 0x23);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT LicenseChange(int32 dwProt) mut => VT.LicenseChange(ref this, dwProt);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSinkEvent2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent3 self, int32 dwProt) LicenseChange;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSinkEvent4 : IMSVidStreamBufferSinkEvent3
		{
			public const new Guid IID = .(0x1b01dcb0, 0xdaf0, 0x412c, 0xa5, 0xd1, 0x59, 0x0c, 0x7f, 0x62, 0xe2, 0xb8);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT WriteFailureClear() mut => VT.WriteFailureClear(ref this);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSinkEvent3.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSinkEvent4 self) WriteFailureClear;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSource : IMSVidFilePlayback
		{
			public const new Guid IID = .(0xeb0c8cf9, 0x6950, 0x4772, 0x87, 0xb1, 0x47, 0xd1, 0x1c, 0xf3, 0xa0, 0x2f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Start(out int32 lStart) mut => VT.get_Start(ref this, out lStart);
			public HRESULT get_RecordingAttribute(out IUnknown* pRecordingAttribute) mut => VT.get_RecordingAttribute(ref this, out pRecordingAttribute);
			public HRESULT CurrentRatings(out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnRating, out int32 pBfEnAttr) mut => VT.CurrentRatings(ref this, out pEnSystem, out pEnRating, out pBfEnAttr);
			public HRESULT MaxRatingsLevel(EnTvRat_System enSystem, EnTvRat_GenericLevel enRating, int32 lbfEnAttr) mut => VT.MaxRatingsLevel(ref this, enSystem, enRating, lbfEnAttr);
			public HRESULT put_BlockUnrated(int16 bBlock) mut => VT.put_BlockUnrated(ref this, bBlock);
			public HRESULT put_UnratedDelay(int32 dwDelay) mut => VT.put_UnratedDelay(ref this, dwDelay);
			public HRESULT get_SBESource(out IUnknown* sbeFilter) mut => VT.get_SBESource(ref this, out sbeFilter);

			[CRepr]
			public struct VTable : IMSVidFilePlayback.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, out int32 lStart) get_Start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, out IUnknown* pRecordingAttribute) get_RecordingAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, out EnTvRat_System pEnSystem, out EnTvRat_GenericLevel pEnRating, out int32 pBfEnAttr) CurrentRatings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, EnTvRat_System enSystem, EnTvRat_GenericLevel enRating, int32 lbfEnAttr) MaxRatingsLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, int16 bBlock) put_BlockUnrated;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, int32 dwDelay) put_UnratedDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource self, out IUnknown* sbeFilter) get_SBESource;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSource2 : IMSVidStreamBufferSource
		{
			public const new Guid IID = .(0xe4ba9059, 0xb1ce, 0x40d8, 0xb9, 0xa0, 0xd4, 0xea, 0x4a, 0x99, 0x89, 0xd3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_RateEx(double dwRate, uint32 dwFramesPerSecond) mut => VT.put_RateEx(ref this, dwRate, dwFramesPerSecond);
			public HRESULT get_AudioCounter(out IUnknown* ppUnk) mut => VT.get_AudioCounter(ref this, out ppUnk);
			public HRESULT get_VideoCounter(out IUnknown* ppUnk) mut => VT.get_VideoCounter(ref this, out ppUnk);
			public HRESULT get_CCCounter(out IUnknown* ppUnk) mut => VT.get_CCCounter(ref this, out ppUnk);
			public HRESULT get_WSTCounter(out IUnknown* ppUnk) mut => VT.get_WSTCounter(ref this, out ppUnk);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSource.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource2 self, double dwRate, uint32 dwFramesPerSecond) put_RateEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource2 self, out IUnknown* ppUnk) get_AudioCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource2 self, out IUnknown* ppUnk) get_VideoCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource2 self, out IUnknown* ppUnk) get_CCCounter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSource2 self, out IUnknown* ppUnk) get_WSTCounter;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSourceEvent : IMSVidFilePlaybackEvent
		{
			public const new Guid IID = .(0x50ce8a7d, 0x9c28, 0x4da8, 0x90, 0x42, 0xcd, 0xfa, 0x71, 0x16, 0xf9, 0x79);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CertificateFailure() mut => VT.CertificateFailure(ref this);
			public HRESULT CertificateSuccess() mut => VT.CertificateSuccess(ref this);
			public HRESULT RatingsBlocked() mut => VT.RatingsBlocked(ref this);
			public HRESULT RatingsUnblocked() mut => VT.RatingsUnblocked(ref this);
			public HRESULT RatingsChanged() mut => VT.RatingsChanged(ref this);
			public HRESULT TimeHole(int32 StreamOffsetMS, int32 SizeMS) mut => VT.TimeHole(ref this, StreamOffsetMS, SizeMS);
			public HRESULT StaleDataRead() mut => VT.StaleDataRead(ref this);
			public HRESULT ContentBecomingStale() mut => VT.ContentBecomingStale(ref this);
			public HRESULT StaleFileDeleted() mut => VT.StaleFileDeleted(ref this);

			[CRepr]
			public struct VTable : IMSVidFilePlaybackEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) CertificateFailure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) CertificateSuccess;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) RatingsBlocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) RatingsUnblocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) RatingsChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self, int32 StreamOffsetMS, int32 SizeMS) TimeHole;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) StaleDataRead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) ContentBecomingStale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent self) StaleFileDeleted;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSourceEvent2 : IMSVidStreamBufferSourceEvent
		{
			public const new Guid IID = .(0x7aef50ce, 0x8e22, 0x4ba8, 0xbc, 0x06, 0xa9, 0x2a, 0x45, 0x8b, 0x4e, 0xf2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RateChange(double qwNewRate, double qwOldRate) mut => VT.RateChange(ref this, qwNewRate, qwOldRate);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSourceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent2 self, double qwNewRate, double qwOldRate) RateChange;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferSourceEvent3 : IMSVidStreamBufferSourceEvent2
		{
			public const new Guid IID = .(0xceabd6ab, 0x9b90, 0x4570, 0xad, 0xf1, 0x3c, 0xe7, 0x6e, 0x00, 0xa7, 0x63);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT BroadcastEvent(BSTR Guid) mut => VT.BroadcastEvent(ref this, Guid);
			public HRESULT BroadcastEventEx(BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) mut => VT.BroadcastEventEx(ref this, Guid, Param1, Param2, Param3, Param4);
			public HRESULT COPPBlocked() mut => VT.COPPBlocked(ref this);
			public HRESULT COPPUnblocked() mut => VT.COPPUnblocked(ref this);
			public HRESULT ContentPrimarilyAudio() mut => VT.ContentPrimarilyAudio(ref this);

			[CRepr]
			public struct VTable : IMSVidStreamBufferSourceEvent2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent3 self, BSTR Guid) BroadcastEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent3 self, BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) BroadcastEventEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent3 self) COPPBlocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent3 self) COPPUnblocked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferSourceEvent3 self) ContentPrimarilyAudio;
			}
		}
		[CRepr]
		public struct IMSVidStreamBufferV2SourceEvent : IMSVidFilePlaybackEvent
		{
			public const new Guid IID = .(0x49c771f9, 0x41b2, 0x4cf7, 0x9f, 0x9a, 0xa3, 0x13, 0xa8, 0xf6, 0x02, 0x7e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RatingsChanged() mut => VT.RatingsChanged(ref this);
			public HRESULT TimeHole(int32 StreamOffsetMS, int32 SizeMS) mut => VT.TimeHole(ref this, StreamOffsetMS, SizeMS);
			public HRESULT StaleDataRead() mut => VT.StaleDataRead(ref this);
			public HRESULT ContentBecomingStale() mut => VT.ContentBecomingStale(ref this);
			public HRESULT StaleFileDeleted() mut => VT.StaleFileDeleted(ref this);
			public HRESULT RateChange(double qwNewRate, double qwOldRate) mut => VT.RateChange(ref this, qwNewRate, qwOldRate);
			public HRESULT BroadcastEvent(BSTR Guid) mut => VT.BroadcastEvent(ref this, Guid);
			public HRESULT BroadcastEventEx(BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) mut => VT.BroadcastEventEx(ref this, Guid, Param1, Param2, Param3, Param4);
			public HRESULT ContentPrimarilyAudio() mut => VT.ContentPrimarilyAudio(ref this);

			[CRepr]
			public struct VTable : IMSVidFilePlaybackEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self) RatingsChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self, int32 StreamOffsetMS, int32 SizeMS) TimeHole;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self) StaleDataRead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self) ContentBecomingStale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self) StaleFileDeleted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self, double qwNewRate, double qwOldRate) RateChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self, BSTR Guid) BroadcastEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self, BSTR Guid, uint32 Param1, uint32 Param2, uint32 Param3, uint32 Param4) BroadcastEventEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidStreamBufferV2SourceEvent self) ContentPrimarilyAudio;
			}
		}
		[CRepr]
		public struct IMSVidVideoRenderer2 : IMSVidVideoRenderer
		{
			public const new Guid IID = .(0x6bdd5c1e, 0x2810, 0x4159, 0x94, 0xbc, 0x05, 0x51, 0x1a, 0xe8, 0x54, 0x9b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Allocator(out IUnknown* AllocPresent) mut => VT.get_Allocator(ref this, out AllocPresent);
			public HRESULT get__Allocator(out IVMRSurfaceAllocator* AllocPresent) mut => VT.get__Allocator(ref this, out AllocPresent);
			public HRESULT get_Allocator_ID(out int32 ID) mut => VT.get_Allocator_ID(ref this, out ID);
			public HRESULT SetAllocator(ref IUnknown AllocPresent, int32 ID) mut => VT.SetAllocator(ref this, ref AllocPresent, ID);
			public HRESULT _SetAllocator2(ref IVMRSurfaceAllocator AllocPresent, int32 ID) mut => VT._SetAllocator2(ref this, ref AllocPresent, ID);
			public HRESULT put_SuppressEffects(int16 bSuppress) mut => VT.put_SuppressEffects(ref this, bSuppress);
			public HRESULT get_SuppressEffects(out int16 bSuppress) mut => VT.get_SuppressEffects(ref this, out bSuppress);

			[CRepr]
			public struct VTable : IMSVidVideoRenderer.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, out IUnknown* AllocPresent) get_Allocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, out IVMRSurfaceAllocator* AllocPresent) get__Allocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, out int32 ID) get_Allocator_ID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, ref IUnknown AllocPresent, int32 ID) SetAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, ref IVMRSurfaceAllocator AllocPresent, int32 ID) _SetAllocator2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, int16 bSuppress) put_SuppressEffects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRenderer2 self, out int16 bSuppress) get_SuppressEffects;
			}
		}
		[CRepr]
		public struct IMSVidVideoRendererEvent2 : IMSVidOutputDeviceEvent
		{
			public const new Guid IID = .(0x7145ed66, 0x4730, 0x4fdb, 0x8a, 0x53, 0xfd, 0xe7, 0x50, 0x8d, 0x3e, 0x5e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OverlayUnavailable() mut => VT.OverlayUnavailable(ref this);

			[CRepr]
			public struct VTable : IMSVidOutputDeviceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererEvent2 self) OverlayUnavailable;
			}
		}
		[CRepr]
		public struct IMSVidVMR9 : IMSVidVideoRenderer
		{
			public const new Guid IID = .(0xd58b0015, 0xebef, 0x44bb, 0xbb, 0xdd, 0x3f, 0x36, 0x99, 0xd7, 0x6e, 0xa1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Allocator_ID(out int32 ID) mut => VT.get_Allocator_ID(ref this, out ID);
			public HRESULT SetAllocator(ref IUnknown AllocPresent, int32 ID) mut => VT.SetAllocator(ref this, ref AllocPresent, ID);
			public HRESULT put_SuppressEffects(int16 bSuppress) mut => VT.put_SuppressEffects(ref this, bSuppress);
			public HRESULT get_SuppressEffects(out int16 bSuppress) mut => VT.get_SuppressEffects(ref this, out bSuppress);
			public HRESULT get_Allocator(out IUnknown* AllocPresent) mut => VT.get_Allocator(ref this, out AllocPresent);

			[CRepr]
			public struct VTable : IMSVidVideoRenderer.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVMR9 self, out int32 ID) get_Allocator_ID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVMR9 self, ref IUnknown AllocPresent, int32 ID) SetAllocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVMR9 self, int16 bSuppress) put_SuppressEffects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVMR9 self, out int16 bSuppress) get_SuppressEffects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVMR9 self, out IUnknown* AllocPresent) get_Allocator;
			}
		}
		[CRepr]
		public struct IMSVidEVR : IMSVidVideoRenderer
		{
			public const new Guid IID = .(0x15e496ae, 0x82a8, 0x4cf9, 0xa6, 0xb6, 0xc5, 0x61, 0xdc, 0x60, 0x39, 0x8f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Presenter(out IMFVideoPresenter* ppAllocPresent) mut => VT.get_Presenter(ref this, out ppAllocPresent);
			public HRESULT put_Presenter(ref IMFVideoPresenter pAllocPresent) mut => VT.put_Presenter(ref this, ref pAllocPresent);
			public HRESULT put_SuppressEffects(int16 bSuppress) mut => VT.put_SuppressEffects(ref this, bSuppress);
			public HRESULT get_SuppressEffects(out int16 bSuppress) mut => VT.get_SuppressEffects(ref this, out bSuppress);

			[CRepr]
			public struct VTable : IMSVidVideoRenderer.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEVR self, out IMFVideoPresenter* ppAllocPresent) get_Presenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEVR self, ref IMFVideoPresenter pAllocPresent) put_Presenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEVR self, int16 bSuppress) put_SuppressEffects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEVR self, out int16 bSuppress) get_SuppressEffects;
			}
		}
		[CRepr]
		public struct IMSVidEVREvent : IMSVidOutputDeviceEvent
		{
			public const new Guid IID = .(0x349abb10, 0x883c, 0x4f22, 0x87, 0x14, 0xce, 0xca, 0xee, 0xe4, 0x5d, 0x62);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnUserEvent(int32 lEventCode) mut => VT.OnUserEvent(ref this, lEventCode);

			[CRepr]
			public struct VTable : IMSVidOutputDeviceEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidEVREvent self, int32 lEventCode) OnUserEvent;
			}
		}
		[CRepr]
		public struct IMSVidAudioRenderer : IMSVidOutputDevice
		{
			public const new Guid IID = .(0x37b0353f, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_Volume(int32 lVol) mut => VT.put_Volume(ref this, lVol);
			public HRESULT get_Volume(out int32 lVol) mut => VT.get_Volume(ref this, out lVol);
			public HRESULT put_Balance(int32 lBal) mut => VT.put_Balance(ref this, lBal);
			public HRESULT get_Balance(out int32 lBal) mut => VT.get_Balance(ref this, out lBal);

			[CRepr]
			public struct VTable : IMSVidOutputDevice.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRenderer self, int32 lVol) put_Volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRenderer self, out int32 lVol) get_Volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRenderer self, int32 lBal) put_Balance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRenderer self, out int32 lBal) get_Balance;
			}
		}
		[CRepr]
		public struct IMSVidAudioRendererEvent : IMSVidOutputDeviceEvent
		{
			public const new Guid IID = .(0x37b03541, 0xa4c8, 0x11d2, 0xb6, 0x34, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMSVidOutputDeviceEvent.VTable {}
		}
		[CRepr]
		public struct IMSVidAudioRendererEvent2 : IMSVidAudioRendererEvent
		{
			public const new Guid IID = .(0xe3f55729, 0x353b, 0x4c43, 0xa0, 0x28, 0x50, 0xf7, 0x9a, 0xa9, 0xa9, 0x07);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AVDecAudioDualMono() mut => VT.AVDecAudioDualMono(ref this);
			public HRESULT AVAudioSampleRate() mut => VT.AVAudioSampleRate(ref this);
			public HRESULT AVAudioChannelConfig() mut => VT.AVAudioChannelConfig(ref this);
			public HRESULT AVAudioChannelCount() mut => VT.AVAudioChannelCount(ref this);
			public HRESULT AVDecCommonMeanBitRate() mut => VT.AVDecCommonMeanBitRate(ref this);
			public HRESULT AVDDSurroundMode() mut => VT.AVDDSurroundMode(ref this);
			public HRESULT AVDecCommonInputFormat() mut => VT.AVDecCommonInputFormat(ref this);
			public HRESULT AVDecCommonOutputFormat() mut => VT.AVDecCommonOutputFormat(ref this);

			[CRepr]
			public struct VTable : IMSVidAudioRendererEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVDecAudioDualMono;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVAudioSampleRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVAudioChannelConfig;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVAudioChannelCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVDecCommonMeanBitRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVDDSurroundMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVDecCommonInputFormat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererEvent2 self) AVDecCommonOutputFormat;
			}
		}
		[CRepr]
		public struct IMSVidInputDevices : IDispatch
		{
			public const new Guid IID = .(0xc5702cd1, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 lCount) mut => VT.get_Count(ref this, out lCount);
			public HRESULT get__NewEnum(out IEnumVARIANT* pD) mut => VT.get__NewEnum(ref this, out pD);
			public HRESULT get_Item(VARIANT v, out IMSVidInputDevice* pDB) mut => VT.get_Item(ref this, v, out pDB);
			public HRESULT Add(ref IMSVidInputDevice pDB) mut => VT.Add(ref this, ref pDB);
			public HRESULT Remove(VARIANT v) mut => VT.Remove(ref this, v);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevices self, out int32 lCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevices self, out IEnumVARIANT* pD) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevices self, VARIANT v, out IMSVidInputDevice* pDB) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevices self, ref IMSVidInputDevice pDB) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidInputDevices self, VARIANT v) Remove;
			}
		}
		[CRepr]
		public struct IMSVidOutputDevices : IDispatch
		{
			public const new Guid IID = .(0xc5702cd2, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 lCount) mut => VT.get_Count(ref this, out lCount);
			public HRESULT get__NewEnum(out IEnumVARIANT* pD) mut => VT.get__NewEnum(ref this, out pD);
			public HRESULT get_Item(VARIANT v, out IMSVidOutputDevice* pDB) mut => VT.get_Item(ref this, v, out pDB);
			public HRESULT Add(ref IMSVidOutputDevice pDB) mut => VT.Add(ref this, ref pDB);
			public HRESULT Remove(VARIANT v) mut => VT.Remove(ref this, v);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidOutputDevices self, out int32 lCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidOutputDevices self, out IEnumVARIANT* pD) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidOutputDevices self, VARIANT v, out IMSVidOutputDevice* pDB) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidOutputDevices self, ref IMSVidOutputDevice pDB) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidOutputDevices self, VARIANT v) Remove;
			}
		}
		[CRepr]
		public struct IMSVidVideoRendererDevices : IDispatch
		{
			public const new Guid IID = .(0xc5702cd3, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 lCount) mut => VT.get_Count(ref this, out lCount);
			public HRESULT get__NewEnum(out IEnumVARIANT* pD) mut => VT.get__NewEnum(ref this, out pD);
			public HRESULT get_Item(VARIANT v, out IMSVidVideoRenderer* pDB) mut => VT.get_Item(ref this, v, out pDB);
			public HRESULT Add(ref IMSVidVideoRenderer pDB) mut => VT.Add(ref this, ref pDB);
			public HRESULT Remove(VARIANT v) mut => VT.Remove(ref this, v);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererDevices self, out int32 lCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererDevices self, out IEnumVARIANT* pD) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererDevices self, VARIANT v, out IMSVidVideoRenderer* pDB) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererDevices self, ref IMSVidVideoRenderer pDB) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidVideoRendererDevices self, VARIANT v) Remove;
			}
		}
		[CRepr]
		public struct IMSVidAudioRendererDevices : IDispatch
		{
			public const new Guid IID = .(0xc5702cd4, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 lCount) mut => VT.get_Count(ref this, out lCount);
			public HRESULT get__NewEnum(out IEnumVARIANT* pD) mut => VT.get__NewEnum(ref this, out pD);
			public HRESULT get_Item(VARIANT v, out IMSVidAudioRenderer* pDB) mut => VT.get_Item(ref this, v, out pDB);
			public HRESULT Add(ref IMSVidAudioRenderer pDB) mut => VT.Add(ref this, ref pDB);
			public HRESULT Remove(VARIANT v) mut => VT.Remove(ref this, v);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererDevices self, out int32 lCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererDevices self, out IEnumVARIANT* pD) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererDevices self, VARIANT v, out IMSVidAudioRenderer* pDB) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererDevices self, ref IMSVidAudioRenderer pDB) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidAudioRendererDevices self, VARIANT v) Remove;
			}
		}
		[CRepr]
		public struct IMSVidFeatures : IDispatch
		{
			public const new Guid IID = .(0xc5702cd5, 0x9b79, 0x11d3, 0xb6, 0x54, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Count(out int32 lCount) mut => VT.get_Count(ref this, out lCount);
			public HRESULT get__NewEnum(out IEnumVARIANT* pD) mut => VT.get__NewEnum(ref this, out pD);
			public HRESULT get_Item(VARIANT v, out IMSVidFeature* pDB) mut => VT.get_Item(ref this, v, out pDB);
			public HRESULT Add(ref IMSVidFeature pDB) mut => VT.Add(ref this, ref pDB);
			public HRESULT Remove(VARIANT v) mut => VT.Remove(ref this, v);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFeatures self, out int32 lCount) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFeatures self, out IEnumVARIANT* pD) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFeatures self, VARIANT v, out IMSVidFeature* pDB) get_Item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFeatures self, ref IMSVidFeature pDB) Add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidFeatures self, VARIANT v) Remove;
			}
		}
		[CRepr]
		public struct IMSVidCtl : IDispatch
		{
			public const new Guid IID = .(0xb0edf162, 0x910a, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_AutoSize(out int16 pbool) mut => VT.get_AutoSize(ref this, out pbool);
			public HRESULT put_AutoSize(int16 vbool) mut => VT.put_AutoSize(ref this, vbool);
			public HRESULT get_BackColor(out uint32 backcolor) mut => VT.get_BackColor(ref this, out backcolor);
			public HRESULT put_BackColor(uint32 backcolor) mut => VT.put_BackColor(ref this, backcolor);
			public HRESULT get_Enabled(out int16 pbool) mut => VT.get_Enabled(ref this, out pbool);
			public HRESULT put_Enabled(int16 vbool) mut => VT.put_Enabled(ref this, vbool);
			public HRESULT get_TabStop(out int16 pbool) mut => VT.get_TabStop(ref this, out pbool);
			public HRESULT put_TabStop(int16 vbool) mut => VT.put_TabStop(ref this, vbool);
			public HRESULT get_Window(out HWND phwnd) mut => VT.get_Window(ref this, out phwnd);
			public HRESULT Refresh() mut => VT.Refresh(ref this);
			public HRESULT get_DisplaySize(out DisplaySizeList CurrentValue) mut => VT.get_DisplaySize(ref this, out CurrentValue);
			public HRESULT put_DisplaySize(DisplaySizeList NewValue) mut => VT.put_DisplaySize(ref this, NewValue);
			public HRESULT get_MaintainAspectRatio(out int16 CurrentValue) mut => VT.get_MaintainAspectRatio(ref this, out CurrentValue);
			public HRESULT put_MaintainAspectRatio(int16 NewValue) mut => VT.put_MaintainAspectRatio(ref this, NewValue);
			public HRESULT get_ColorKey(out uint32 CurrentValue) mut => VT.get_ColorKey(ref this, out CurrentValue);
			public HRESULT put_ColorKey(uint32 NewValue) mut => VT.put_ColorKey(ref this, NewValue);
			public HRESULT get_InputsAvailable(BSTR CategoryGuid, out IMSVidInputDevices* pVal) mut => VT.get_InputsAvailable(ref this, CategoryGuid, out pVal);
			public HRESULT get_OutputsAvailable(BSTR CategoryGuid, out IMSVidOutputDevices* pVal) mut => VT.get_OutputsAvailable(ref this, CategoryGuid, out pVal);
			public HRESULT get__InputsAvailable(in Guid CategoryGuid, out IMSVidInputDevices* pVal) mut => VT.get__InputsAvailable(ref this, CategoryGuid, out pVal);
			public HRESULT get__OutputsAvailable(in Guid CategoryGuid, out IMSVidOutputDevices* pVal) mut => VT.get__OutputsAvailable(ref this, CategoryGuid, out pVal);
			public HRESULT get_VideoRenderersAvailable(out IMSVidVideoRendererDevices* pVal) mut => VT.get_VideoRenderersAvailable(ref this, out pVal);
			public HRESULT get_AudioRenderersAvailable(out IMSVidAudioRendererDevices* pVal) mut => VT.get_AudioRenderersAvailable(ref this, out pVal);
			public HRESULT get_FeaturesAvailable(out IMSVidFeatures* pVal) mut => VT.get_FeaturesAvailable(ref this, out pVal);
			public HRESULT get_InputActive(out IMSVidInputDevice* pVal) mut => VT.get_InputActive(ref this, out pVal);
			public HRESULT put_InputActive(ref IMSVidInputDevice pVal) mut => VT.put_InputActive(ref this, ref pVal);
			public HRESULT get_OutputsActive(out IMSVidOutputDevices* pVal) mut => VT.get_OutputsActive(ref this, out pVal);
			public HRESULT put_OutputsActive(ref IMSVidOutputDevices pVal) mut => VT.put_OutputsActive(ref this, ref pVal);
			public HRESULT get_VideoRendererActive(out IMSVidVideoRenderer* pVal) mut => VT.get_VideoRendererActive(ref this, out pVal);
			public HRESULT put_VideoRendererActive(ref IMSVidVideoRenderer pVal) mut => VT.put_VideoRendererActive(ref this, ref pVal);
			public HRESULT get_AudioRendererActive(out IMSVidAudioRenderer* pVal) mut => VT.get_AudioRendererActive(ref this, out pVal);
			public HRESULT put_AudioRendererActive(ref IMSVidAudioRenderer pVal) mut => VT.put_AudioRendererActive(ref this, ref pVal);
			public HRESULT get_FeaturesActive(out IMSVidFeatures* pVal) mut => VT.get_FeaturesActive(ref this, out pVal);
			public HRESULT put_FeaturesActive(ref IMSVidFeatures pVal) mut => VT.put_FeaturesActive(ref this, ref pVal);
			public HRESULT get_State(out MSVidCtlStateList lState) mut => VT.get_State(ref this, out lState);
			public HRESULT View(ref VARIANT v) mut => VT.View(ref this, ref v);
			public HRESULT Build() mut => VT.Build(ref this);
			public HRESULT Pause() mut => VT.Pause(ref this);
			public HRESULT Run() mut => VT.Run(ref this);
			public HRESULT Stop() mut => VT.Stop(ref this);
			public HRESULT Decompose() mut => VT.Decompose(ref this);
			public HRESULT DisableVideo() mut => VT.DisableVideo(ref this);
			public HRESULT DisableAudio() mut => VT.DisableAudio(ref this);
			public HRESULT ViewNext(ref VARIANT v) mut => VT.ViewNext(ref this, ref v);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out int16 pbool) get_AutoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, int16 vbool) put_AutoSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out uint32 backcolor) get_BackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, uint32 backcolor) put_BackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out int16 pbool) get_Enabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, int16 vbool) put_Enabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out int16 pbool) get_TabStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, int16 vbool) put_TabStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out HWND phwnd) get_Window;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) Refresh;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out DisplaySizeList CurrentValue) get_DisplaySize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, DisplaySizeList NewValue) put_DisplaySize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out int16 CurrentValue) get_MaintainAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, int16 NewValue) put_MaintainAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out uint32 CurrentValue) get_ColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, uint32 NewValue) put_ColorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, BSTR CategoryGuid, out IMSVidInputDevices* pVal) get_InputsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, BSTR CategoryGuid, out IMSVidOutputDevices* pVal) get_OutputsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, in Guid CategoryGuid, out IMSVidInputDevices* pVal) get__InputsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, in Guid CategoryGuid, out IMSVidOutputDevices* pVal) get__OutputsAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidVideoRendererDevices* pVal) get_VideoRenderersAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidAudioRendererDevices* pVal) get_AudioRenderersAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidFeatures* pVal) get_FeaturesAvailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidInputDevice* pVal) get_InputActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref IMSVidInputDevice pVal) put_InputActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidOutputDevices* pVal) get_OutputsActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref IMSVidOutputDevices pVal) put_OutputsActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidVideoRenderer* pVal) get_VideoRendererActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref IMSVidVideoRenderer pVal) put_VideoRendererActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidAudioRenderer* pVal) get_AudioRendererActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref IMSVidAudioRenderer pVal) put_AudioRendererActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out IMSVidFeatures* pVal) get_FeaturesActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref IMSVidFeatures pVal) put_FeaturesActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, out MSVidCtlStateList lState) get_State;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref VARIANT v) View;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) Build;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) Pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) Run;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) Decompose;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) DisableVideo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self) DisableAudio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSVidCtl self, ref VARIANT v) ViewNext;
			}
		}
		[CRepr]
		public struct IMSEventBinder : IDispatch
		{
			public const new Guid IID = .(0xc3a9f406, 0x2222, 0x436d, 0x86, 0xd5, 0xba, 0x32, 0x29, 0x27, 0x9e, 0xfb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Bind(ref IDispatch pEventObject, BSTR EventName, BSTR EventHandler, out int32 CancelID) mut => VT.Bind(ref this, ref pEventObject, EventName, EventHandler, out CancelID);
			public HRESULT Unbind(uint32 CancelCookie) mut => VT.Unbind(ref this, CancelCookie);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSEventBinder self, ref IDispatch pEventObject, BSTR EventName, BSTR EventHandler, out int32 CancelID) Bind;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMSEventBinder self, uint32 CancelCookie) Unbind;
			}
		}
		[CRepr]
		public struct _IMSVidCtlEvents : IDispatch
		{
			public const new Guid IID = .(0xb0edf164, 0x910a, 0x11d2, 0xb6, 0x32, 0x00, 0xc0, 0x4f, 0x79, 0x49, 0x8e);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IStreamBufferInitialize : IUnknown
		{
			public const new Guid IID = .(0x9ce50f2d, 0x6ba7, 0x40fb, 0xa0, 0x34, 0x50, 0xb1, 0xa6, 0x74, 0xec, 0x78);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetHKEY(HKEY hkeyRoot) mut => VT.SetHKEY(ref this, hkeyRoot);
			public HRESULT SetSIDs(uint32 cSIDs, out PSID ppSID) mut => VT.SetSIDs(ref this, cSIDs, out ppSID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferInitialize self, HKEY hkeyRoot) SetHKEY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferInitialize self, uint32 cSIDs, out PSID ppSID) SetSIDs;
			}
		}
		[CRepr]
		public struct IStreamBufferSink : IUnknown
		{
			public const new Guid IID = .(0xafd1f242, 0x7efd, 0x45ee, 0xba, 0x4e, 0x40, 0x7a, 0x25, 0xc9, 0xa7, 0x7a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT LockProfile(PWSTR pszStreamBufferFilename) mut => VT.LockProfile(ref this, pszStreamBufferFilename);
			public HRESULT CreateRecorder(PWSTR pszFilename, uint32 dwRecordType, out IUnknown* pRecordingIUnknown) mut => VT.CreateRecorder(ref this, pszFilename, dwRecordType, out pRecordingIUnknown);
			public HRESULT IsProfileLocked() mut => VT.IsProfileLocked(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferSink self, PWSTR pszStreamBufferFilename) LockProfile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferSink self, PWSTR pszFilename, uint32 dwRecordType, out IUnknown* pRecordingIUnknown) CreateRecorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferSink self) IsProfileLocked;
			}
		}
		[CRepr]
		public struct IStreamBufferSink2 : IStreamBufferSink
		{
			public const new Guid IID = .(0xdb94a660, 0xf4fb, 0x4bfa, 0xbc, 0xc6, 0xfe, 0x15, 0x9a, 0x4e, 0xea, 0x93);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT UnlockProfile() mut => VT.UnlockProfile(ref this);

			[CRepr]
			public struct VTable : IStreamBufferSink.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferSink2 self) UnlockProfile;
			}
		}
		[CRepr]
		public struct IStreamBufferSink3 : IStreamBufferSink2
		{
			public const new Guid IID = .(0x974723f2, 0x887a, 0x4452, 0x93, 0x66, 0x2c, 0xff, 0x30, 0x57, 0xbc, 0x8f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAvailableFilter(out int64 prtMin) mut => VT.SetAvailableFilter(ref this, out prtMin);

			[CRepr]
			public struct VTable : IStreamBufferSink2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferSink3 self, out int64 prtMin) SetAvailableFilter;
			}
		}
		[CRepr]
		public struct IStreamBufferSource : IUnknown
		{
			public const new Guid IID = .(0x1c5bd776, 0x6ced, 0x4f44, 0x81, 0x64, 0x5e, 0xab, 0x0e, 0x98, 0xdb, 0x12);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetStreamSink(ref IStreamBufferSink pIStreamBufferSink) mut => VT.SetStreamSink(ref this, ref pIStreamBufferSink);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferSource self, ref IStreamBufferSink pIStreamBufferSink) SetStreamSink;
			}
		}
		[CRepr]
		public struct IStreamBufferRecordControl : IUnknown
		{
			public const new Guid IID = .(0xba9b6c99, 0xf3c7, 0x4ff2, 0x92, 0xdb, 0xcf, 0xdd, 0x48, 0x51, 0xbf, 0x31);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Start(out int64 prtStart) mut => VT.Start(ref this, out prtStart);
			public HRESULT Stop(int64 rtStop) mut => VT.Stop(ref this, rtStop);
			public HRESULT GetRecordingStatus(out HRESULT phResult, out BOOL pbStarted, out BOOL pbStopped) mut => VT.GetRecordingStatus(ref this, out phResult, out pbStarted, out pbStopped);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordControl self, out int64 prtStart) Start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordControl self, int64 rtStop) Stop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordControl self, out HRESULT phResult, out BOOL pbStarted, out BOOL pbStopped) GetRecordingStatus;
			}
		}
		[CRepr]
		public struct IStreamBufferRecComp : IUnknown
		{
			public const new Guid IID = .(0x9e259a9b, 0x8815, 0x42ae, 0xb0, 0x9f, 0x22, 0x19, 0x70, 0xb1, 0x54, 0xfd);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(PWSTR pszTargetFilename, PWSTR pszSBRecProfileRef) mut => VT.Initialize(ref this, pszTargetFilename, pszSBRecProfileRef);
			public HRESULT Append(PWSTR pszSBRecording) mut => VT.Append(ref this, pszSBRecording);
			public HRESULT AppendEx(PWSTR pszSBRecording, int64 rtStart, int64 rtStop) mut => VT.AppendEx(ref this, pszSBRecording, rtStart, rtStop);
			public HRESULT GetCurrentLength(out uint32 pcSeconds) mut => VT.GetCurrentLength(ref this, out pcSeconds);
			public HRESULT Close() mut => VT.Close(ref this);
			public HRESULT Cancel() mut => VT.Cancel(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecComp self, PWSTR pszTargetFilename, PWSTR pszSBRecProfileRef) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecComp self, PWSTR pszSBRecording) Append;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecComp self, PWSTR pszSBRecording, int64 rtStart, int64 rtStop) AppendEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecComp self, out uint32 pcSeconds) GetCurrentLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecComp self) Close;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecComp self) Cancel;
			}
		}
		[CRepr]
		public struct IStreamBufferRecordingAttribute : IUnknown
		{
			public const new Guid IID = .(0x16ca4e03, 0xfe69, 0x4705, 0xbd, 0x41, 0x5b, 0x7d, 0xfc, 0x0c, 0x95, 0xf3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAttribute(uint32 ulReserved, PWSTR pszAttributeName, STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType, uint8* pbAttribute, uint16 cbAttributeLength) mut => VT.SetAttribute(ref this, ulReserved, pszAttributeName, StreamBufferAttributeType, pbAttribute, cbAttributeLength);
			public HRESULT GetAttributeCount(uint32 ulReserved, out uint16 pcAttributes) mut => VT.GetAttributeCount(ref this, ulReserved, out pcAttributes);
			public HRESULT GetAttributeByName(PWSTR pszAttributeName, ref uint32 pulReserved, out STREAMBUFFER_ATTR_DATATYPE pStreamBufferAttributeType, uint8* pbAttribute, out uint16 pcbLength) mut => VT.GetAttributeByName(ref this, pszAttributeName, ref pulReserved, out pStreamBufferAttributeType, pbAttribute, out pcbLength);
			public HRESULT GetAttributeByIndex(uint16 wIndex, ref uint32 pulReserved, PWSTR pszAttributeName, out uint16 pcchNameLength, out STREAMBUFFER_ATTR_DATATYPE pStreamBufferAttributeType, uint8* pbAttribute, out uint16 pcbLength) mut => VT.GetAttributeByIndex(ref this, wIndex, ref pulReserved, pszAttributeName, out pcchNameLength, out pStreamBufferAttributeType, pbAttribute, out pcbLength);
			public HRESULT EnumAttributes(out IEnumStreamBufferRecordingAttrib* ppIEnumStreamBufferAttrib) mut => VT.EnumAttributes(ref this, out ppIEnumStreamBufferAttrib);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordingAttribute self, uint32 ulReserved, PWSTR pszAttributeName, STREAMBUFFER_ATTR_DATATYPE StreamBufferAttributeType, uint8* pbAttribute, uint16 cbAttributeLength) SetAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordingAttribute self, uint32 ulReserved, out uint16 pcAttributes) GetAttributeCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordingAttribute self, PWSTR pszAttributeName, ref uint32 pulReserved, out STREAMBUFFER_ATTR_DATATYPE pStreamBufferAttributeType, uint8* pbAttribute, out uint16 pcbLength) GetAttributeByName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordingAttribute self, uint16 wIndex, ref uint32 pulReserved, PWSTR pszAttributeName, out uint16 pcchNameLength, out STREAMBUFFER_ATTR_DATATYPE pStreamBufferAttributeType, uint8* pbAttribute, out uint16 pcbLength) GetAttributeByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferRecordingAttribute self, out IEnumStreamBufferRecordingAttrib* ppIEnumStreamBufferAttrib) EnumAttributes;
			}
		}
		[CRepr]
		public struct IEnumStreamBufferRecordingAttrib : IUnknown
		{
			public const new Guid IID = .(0xc18a9162, 0x1e82, 0x4142, 0x8c, 0x73, 0x56, 0x90, 0xfa, 0x62, 0xfe, 0x33);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cRequest, STREAMBUFFER_ATTRIBUTE* pStreamBufferAttribute, out uint32 pcReceived) mut => VT.Next(ref this, cRequest, pStreamBufferAttribute, out pcReceived);
			public HRESULT Skip(uint32 cRecords) mut => VT.Skip(ref this, cRecords);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumStreamBufferRecordingAttrib* ppIEnumStreamBufferAttrib) mut => VT.Clone(ref this, out ppIEnumStreamBufferAttrib);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamBufferRecordingAttrib self, uint32 cRequest, STREAMBUFFER_ATTRIBUTE* pStreamBufferAttribute, out uint32 pcReceived) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamBufferRecordingAttrib self, uint32 cRecords) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamBufferRecordingAttrib self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumStreamBufferRecordingAttrib self, out IEnumStreamBufferRecordingAttrib* ppIEnumStreamBufferAttrib) Clone;
			}
		}
		[CRepr]
		public struct IStreamBufferConfigure : IUnknown
		{
			public const new Guid IID = .(0xce14dfae, 0x4098, 0x4af7, 0xbb, 0xf7, 0xd6, 0x51, 0x1f, 0x83, 0x54, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDirectory(PWSTR pszDirectoryName) mut => VT.SetDirectory(ref this, pszDirectoryName);
			public HRESULT GetDirectory(out PWSTR ppszDirectoryName) mut => VT.GetDirectory(ref this, out ppszDirectoryName);
			public HRESULT SetBackingFileCount(uint32 dwMin, uint32 dwMax) mut => VT.SetBackingFileCount(ref this, dwMin, dwMax);
			public HRESULT GetBackingFileCount(out uint32 pdwMin, out uint32 pdwMax) mut => VT.GetBackingFileCount(ref this, out pdwMin, out pdwMax);
			public HRESULT SetBackingFileDuration(uint32 dwSeconds) mut => VT.SetBackingFileDuration(ref this, dwSeconds);
			public HRESULT GetBackingFileDuration(out uint32 pdwSeconds) mut => VT.GetBackingFileDuration(ref this, out pdwSeconds);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure self, PWSTR pszDirectoryName) SetDirectory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure self, out PWSTR ppszDirectoryName) GetDirectory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure self, uint32 dwMin, uint32 dwMax) SetBackingFileCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure self, out uint32 pdwMin, out uint32 pdwMax) GetBackingFileCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure self, uint32 dwSeconds) SetBackingFileDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure self, out uint32 pdwSeconds) GetBackingFileDuration;
			}
		}
		[CRepr]
		public struct IStreamBufferConfigure2 : IStreamBufferConfigure
		{
			public const new Guid IID = .(0x53e037bf, 0x3992, 0x4282, 0xae, 0x34, 0x24, 0x87, 0xb4, 0xda, 0xe0, 0x6b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMultiplexedPacketSize(uint32 cbBytesPerPacket) mut => VT.SetMultiplexedPacketSize(ref this, cbBytesPerPacket);
			public HRESULT GetMultiplexedPacketSize(out uint32 pcbBytesPerPacket) mut => VT.GetMultiplexedPacketSize(ref this, out pcbBytesPerPacket);
			public HRESULT SetFFTransitionRates(uint32 dwMaxFullFrameRate, uint32 dwMaxNonSkippingRate) mut => VT.SetFFTransitionRates(ref this, dwMaxFullFrameRate, dwMaxNonSkippingRate);
			public HRESULT GetFFTransitionRates(out uint32 pdwMaxFullFrameRate, out uint32 pdwMaxNonSkippingRate) mut => VT.GetFFTransitionRates(ref this, out pdwMaxFullFrameRate, out pdwMaxNonSkippingRate);

			[CRepr]
			public struct VTable : IStreamBufferConfigure.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure2 self, uint32 cbBytesPerPacket) SetMultiplexedPacketSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure2 self, out uint32 pcbBytesPerPacket) GetMultiplexedPacketSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure2 self, uint32 dwMaxFullFrameRate, uint32 dwMaxNonSkippingRate) SetFFTransitionRates;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure2 self, out uint32 pdwMaxFullFrameRate, out uint32 pdwMaxNonSkippingRate) GetFFTransitionRates;
			}
		}
		[CRepr]
		public struct IStreamBufferConfigure3 : IStreamBufferConfigure2
		{
			public const new Guid IID = .(0x7e2d2a1e, 0x7192, 0x4bd7, 0x80, 0xc1, 0x06, 0x1f, 0xd1, 0xd1, 0x04, 0x02);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetStartRecConfig(BOOL fStartStopsCur) mut => VT.SetStartRecConfig(ref this, fStartStopsCur);
			public HRESULT GetStartRecConfig(out BOOL pfStartStopsCur) mut => VT.GetStartRecConfig(ref this, out pfStartStopsCur);
			public HRESULT SetNamespace(PWSTR pszNamespace) mut => VT.SetNamespace(ref this, pszNamespace);
			public HRESULT GetNamespace(out PWSTR ppszNamespace) mut => VT.GetNamespace(ref this, out ppszNamespace);

			[CRepr]
			public struct VTable : IStreamBufferConfigure2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure3 self, BOOL fStartStopsCur) SetStartRecConfig;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure3 self, out BOOL pfStartStopsCur) GetStartRecConfig;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure3 self, PWSTR pszNamespace) SetNamespace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferConfigure3 self, out PWSTR ppszNamespace) GetNamespace;
			}
		}
		[CRepr]
		public struct IStreamBufferMediaSeeking : IMediaSeeking
		{
			public const new Guid IID = .(0xf61f5c26, 0x863d, 0x4afa, 0xb0, 0xba, 0x2f, 0x81, 0xdc, 0x97, 0x85, 0x96);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IMediaSeeking.VTable {}
		}
		[CRepr]
		public struct IStreamBufferMediaSeeking2 : IStreamBufferMediaSeeking
		{
			public const new Guid IID = .(0x3a439ab0, 0x155f, 0x470a, 0x86, 0xa6, 0x9e, 0xa5, 0x4a, 0xfd, 0x6e, 0xaf);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetRateEx(double dRate, uint32 dwFramesPerSec) mut => VT.SetRateEx(ref this, dRate, dwFramesPerSec);

			[CRepr]
			public struct VTable : IStreamBufferMediaSeeking.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferMediaSeeking2 self, double dRate, uint32 dwFramesPerSec) SetRateEx;
			}
		}
		[CRepr]
		public struct IStreamBufferDataCounters : IUnknown
		{
			public const new Guid IID = .(0x9d2a2563, 0x31ab, 0x402e, 0x9a, 0x6b, 0xad, 0xb9, 0x03, 0x48, 0x94, 0x40);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetData(out SBE_PIN_DATA pPinData) mut => VT.GetData(ref this, out pPinData);
			public HRESULT ResetData() mut => VT.ResetData(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferDataCounters self, out SBE_PIN_DATA pPinData) GetData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IStreamBufferDataCounters self) ResetData;
			}
		}
		[CRepr]
		public struct ISBE2GlobalEvent : IUnknown
		{
			public const new Guid IID = .(0xcaede759, 0xb6b1, 0x11db, 0xa5, 0x78, 0x00, 0x18, 0xf3, 0xfa, 0x24, 0xc6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEvent(in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, out BOOL pSpanning, out uint32 pcb, out uint8 pb) mut => VT.GetEvent(ref this, idEvt, param1, param2, param3, param4, out pSpanning, out pcb, out pb);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2GlobalEvent self, in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, out BOOL pSpanning, out uint32 pcb, out uint8 pb) GetEvent;
			}
		}
		[CRepr]
		public struct ISBE2GlobalEvent2 : ISBE2GlobalEvent
		{
			public const new Guid IID = .(0x6d8309bf, 0x00fe, 0x4506, 0x8b, 0x03, 0xf8, 0xc6, 0x5b, 0x5c, 0x9b, 0x39);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEventEx(in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, out BOOL pSpanning, out uint32 pcb, out uint8 pb, out int64 pStreamTime) mut => VT.GetEventEx(ref this, idEvt, param1, param2, param3, param4, out pSpanning, out pcb, out pb, out pStreamTime);

			[CRepr]
			public struct VTable : ISBE2GlobalEvent.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2GlobalEvent2 self, in Guid idEvt, uint32 param1, uint32 param2, uint32 param3, uint32 param4, out BOOL pSpanning, out uint32 pcb, out uint8 pb, out int64 pStreamTime) GetEventEx;
			}
		}
		[CRepr]
		public struct ISBE2SpanningEvent : IUnknown
		{
			public const new Guid IID = .(0xcaede760, 0xb6b1, 0x11db, 0xa5, 0x78, 0x00, 0x18, 0xf3, 0xfa, 0x24, 0xc6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEvent(in Guid idEvt, uint32 streamId, out uint32 pcb, out uint8 pb) mut => VT.GetEvent(ref this, idEvt, streamId, out pcb, out pb);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2SpanningEvent self, in Guid idEvt, uint32 streamId, out uint32 pcb, out uint8 pb) GetEvent;
			}
		}
		[CRepr]
		public struct ISBE2Crossbar : IUnknown
		{
			public const new Guid IID = .(0x547b6d26, 0x3226, 0x487e, 0x82, 0x53, 0x8a, 0xa1, 0x68, 0x74, 0x94, 0x34);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EnableDefaultMode(uint32 DefaultFlags) mut => VT.EnableDefaultMode(ref this, DefaultFlags);
			public HRESULT GetInitialProfile(out ISBE2MediaTypeProfile* ppProfile) mut => VT.GetInitialProfile(ref this, out ppProfile);
			public HRESULT SetOutputProfile(ref ISBE2MediaTypeProfile pProfile, out uint32 pcOutputPins, out IPin* ppOutputPins) mut => VT.SetOutputProfile(ref this, ref pProfile, out pcOutputPins, out ppOutputPins);
			public HRESULT EnumStreams(out ISBE2EnumStream* ppStreams) mut => VT.EnumStreams(ref this, out ppStreams);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2Crossbar self, uint32 DefaultFlags) EnableDefaultMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2Crossbar self, out ISBE2MediaTypeProfile* ppProfile) GetInitialProfile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2Crossbar self, ref ISBE2MediaTypeProfile pProfile, out uint32 pcOutputPins, out IPin* ppOutputPins) SetOutputProfile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2Crossbar self, out ISBE2EnumStream* ppStreams) EnumStreams;
			}
		}
		[CRepr]
		public struct ISBE2StreamMap : IUnknown
		{
			public const new Guid IID = .(0x667c7745, 0x85b1, 0x4c55, 0xae, 0x55, 0x4e, 0x25, 0x05, 0x61, 0x59, 0xfc);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MapStream(uint32 Stream) mut => VT.MapStream(ref this, Stream);
			public HRESULT UnmapStream(uint32 Stream) mut => VT.UnmapStream(ref this, Stream);
			public HRESULT EnumMappedStreams(out ISBE2EnumStream* ppStreams) mut => VT.EnumMappedStreams(ref this, out ppStreams);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2StreamMap self, uint32 Stream) MapStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2StreamMap self, uint32 Stream) UnmapStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2StreamMap self, out ISBE2EnumStream* ppStreams) EnumMappedStreams;
			}
		}
		[CRepr]
		public struct ISBE2EnumStream : IUnknown
		{
			public const new Guid IID = .(0xf7611092, 0x9fbc, 0x46ec, 0xa7, 0xc7, 0x54, 0x8e, 0xa7, 0x8b, 0x71, 0xa4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 cRequest, SBE2_STREAM_DESC* pStreamDesc, out uint32 pcReceived) mut => VT.Next(ref this, cRequest, pStreamDesc, out pcReceived);
			public HRESULT Skip(uint32 cRecords) mut => VT.Skip(ref this, cRecords);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out ISBE2EnumStream* ppIEnumStream) mut => VT.Clone(ref this, out ppIEnumStream);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2EnumStream self, uint32 cRequest, SBE2_STREAM_DESC* pStreamDesc, out uint32 pcReceived) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2EnumStream self, uint32 cRecords) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2EnumStream self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2EnumStream self, out ISBE2EnumStream* ppIEnumStream) Clone;
			}
		}
		[CRepr]
		public struct ISBE2MediaTypeProfile : IUnknown
		{
			public const new Guid IID = .(0xf238267d, 0x4671, 0x40d7, 0x99, 0x7e, 0x25, 0xdc, 0x32, 0xcf, 0xed, 0x2a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetStreamCount(out uint32 pCount) mut => VT.GetStreamCount(ref this, out pCount);
			public HRESULT GetStream(uint32 Index, out AM_MEDIA_TYPE* ppMediaType) mut => VT.GetStream(ref this, Index, out ppMediaType);
			public HRESULT AddStream(ref AM_MEDIA_TYPE pMediaType) mut => VT.AddStream(ref this, ref pMediaType);
			public HRESULT DeleteStream(uint32 Index) mut => VT.DeleteStream(ref this, Index);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2MediaTypeProfile self, out uint32 pCount) GetStreamCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2MediaTypeProfile self, uint32 Index, out AM_MEDIA_TYPE* ppMediaType) GetStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2MediaTypeProfile self, ref AM_MEDIA_TYPE pMediaType) AddStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2MediaTypeProfile self, uint32 Index) DeleteStream;
			}
		}
		[CRepr]
		public struct ISBE2FileScan : IUnknown
		{
			public const new Guid IID = .(0x3e2bf5a5, 0x4f96, 0x4899, 0xa1, 0xa3, 0x75, 0xe8, 0xbe, 0x9a, 0x5a, 0xc0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RepairFile(PWSTR filename) mut => VT.RepairFile(ref this, filename);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISBE2FileScan self, PWSTR filename) RepairFile;
			}
		}
		[CRepr]
		public struct IMpeg2TableFilter : IUnknown
		{
			public const new Guid IID = .(0xbdcdd913, 0x9ecd, 0x4fb2, 0x81, 0xae, 0xad, 0xf7, 0x47, 0xea, 0x75, 0xa5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddPID(uint16 p) mut => VT.AddPID(ref this, p);
			public HRESULT AddTable(uint16 p, uint8 t) mut => VT.AddTable(ref this, p, t);
			public HRESULT AddExtension(uint16 p, uint8 t, uint16 e) mut => VT.AddExtension(ref this, p, t, e);
			public HRESULT RemovePID(uint16 p) mut => VT.RemovePID(ref this, p);
			public HRESULT RemoveTable(uint16 p, uint8 t) mut => VT.RemoveTable(ref this, p, t);
			public HRESULT RemoveExtension(uint16 p, uint8 t, uint16 e) mut => VT.RemoveExtension(ref this, p, t, e);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2TableFilter self, uint16 p) AddPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2TableFilter self, uint16 p, uint8 t) AddTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2TableFilter self, uint16 p, uint8 t, uint16 e) AddExtension;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2TableFilter self, uint16 p) RemovePID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2TableFilter self, uint16 p, uint8 t) RemoveTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2TableFilter self, uint16 p, uint8 t, uint16 e) RemoveExtension;
			}
		}
		[CRepr]
		public struct IMpeg2Data : IUnknown
		{
			public const new Guid IID = .(0x9b396d40, 0xf380, 0x4e3c, 0xa5, 0x14, 0x1a, 0x82, 0xbf, 0x6e, 0xbf, 0xe6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSection(uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, uint32 dwTimeout, out ISectionList* ppSectionList) mut => VT.GetSection(ref this, pid, tid, ref pFilter, dwTimeout, out ppSectionList);
			public HRESULT GetTable(uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, uint32 dwTimeout, out ISectionList* ppSectionList) mut => VT.GetTable(ref this, pid, tid, ref pFilter, dwTimeout, out ppSectionList);
			public HRESULT GetStreamOfSections(uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, HANDLE hDataReadyEvent, out IMpeg2Stream* ppMpegStream) mut => VT.GetStreamOfSections(ref this, pid, tid, ref pFilter, hDataReadyEvent, out ppMpegStream);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Data self, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, uint32 dwTimeout, out ISectionList* ppSectionList) GetSection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Data self, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, uint32 dwTimeout, out ISectionList* ppSectionList) GetTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Data self, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, HANDLE hDataReadyEvent, out IMpeg2Stream* ppMpegStream) GetStreamOfSections;
			}
		}
		[CRepr]
		public struct ISectionList : IUnknown
		{
			public const new Guid IID = .(0xafec1eb5, 0x2a64, 0x46c6, 0xbf, 0x4b, 0xae, 0x3c, 0xcb, 0x6a, 0xfd, 0xb0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(MPEG_REQUEST_TYPE requestType, ref IMpeg2Data pMpeg2Data, ref MPEG_CONTEXT pContext, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, uint32 timeout, HANDLE hDoneEvent) mut => VT.Initialize(ref this, requestType, ref pMpeg2Data, ref pContext, pid, tid, ref pFilter, timeout, hDoneEvent);
			public HRESULT InitializeWithRawSections(ref MPEG_PACKET_LIST pmplSections) mut => VT.InitializeWithRawSections(ref this, ref pmplSections);
			public HRESULT CancelPendingRequest() mut => VT.CancelPendingRequest(ref this);
			public HRESULT GetNumberOfSections(out uint16 pCount) mut => VT.GetNumberOfSections(ref this, out pCount);
			public HRESULT GetSectionData(uint16 sectionNumber, out uint32 pdwRawPacketLength, out SECTION* ppSection) mut => VT.GetSectionData(ref this, sectionNumber, out pdwRawPacketLength, out ppSection);
			public HRESULT GetProgramIdentifier(ref uint16 pPid) mut => VT.GetProgramIdentifier(ref this, ref pPid);
			public HRESULT GetTableIdentifier(ref uint8 pTableId) mut => VT.GetTableIdentifier(ref this, ref pTableId);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self, MPEG_REQUEST_TYPE requestType, ref IMpeg2Data pMpeg2Data, ref MPEG_CONTEXT pContext, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, uint32 timeout, HANDLE hDoneEvent) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self, ref MPEG_PACKET_LIST pmplSections) InitializeWithRawSections;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self) CancelPendingRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self, out uint16 pCount) GetNumberOfSections;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self, uint16 sectionNumber, out uint32 pdwRawPacketLength, out SECTION* ppSection) GetSectionData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self, ref uint16 pPid) GetProgramIdentifier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISectionList self, ref uint8 pTableId) GetTableIdentifier;
			}
		}
		[CRepr]
		public struct IMpeg2Stream : IUnknown
		{
			public const new Guid IID = .(0x400cc286, 0x32a0, 0x4ce4, 0x90, 0x41, 0x39, 0x57, 0x11, 0x25, 0xa6, 0x35);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(MPEG_REQUEST_TYPE requestType, ref IMpeg2Data pMpeg2Data, ref MPEG_CONTEXT pContext, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, HANDLE hDataReadyEvent) mut => VT.Initialize(ref this, requestType, ref pMpeg2Data, ref pContext, pid, tid, ref pFilter, hDataReadyEvent);
			public HRESULT SupplyDataBuffer(ref MPEG_STREAM_BUFFER pStreamBuffer) mut => VT.SupplyDataBuffer(ref this, ref pStreamBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Stream self, MPEG_REQUEST_TYPE requestType, ref IMpeg2Data pMpeg2Data, ref MPEG_CONTEXT pContext, uint16 pid, uint8 tid, ref MPEG2_FILTER pFilter, HANDLE hDataReadyEvent) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMpeg2Stream self, ref MPEG_STREAM_BUFFER pStreamBuffer) SupplyDataBuffer;
			}
		}
		[CRepr]
		public struct IGenericDescriptor : IUnknown
		{
			public const new Guid IID = .(0x6a5918f8, 0xa77a, 0x4f61, 0xae, 0xd0, 0x57, 0x02, 0xbd, 0xcd, 0xa3, 0xe6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref uint8 pbDesc, int32 bCount) mut => VT.Initialize(ref this, ref pbDesc, bCount);
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetBody(out uint8* ppbVal) mut => VT.GetBody(ref this, out ppbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGenericDescriptor self, ref uint8 pbDesc, int32 bCount) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGenericDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGenericDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGenericDescriptor self, out uint8* ppbVal) GetBody;
			}
		}
		[CRepr]
		public struct IGenericDescriptor2 : IGenericDescriptor
		{
			public const new Guid IID = .(0xbf02fb7e, 0x9792, 0x4e10, 0xa6, 0x8d, 0x03, 0x3a, 0x2c, 0xc2, 0x46, 0xa5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref uint8 pbDesc, uint16 wCount) mut => VT.Initialize(ref this, ref pbDesc, wCount);
			public HRESULT GetLength(out uint16 pwVal) mut => VT.GetLength(ref this, out pwVal);

			[CRepr]
			public struct VTable : IGenericDescriptor.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGenericDescriptor2 self, ref uint8 pbDesc, uint16 wCount) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGenericDescriptor2 self, out uint16 pwVal) GetLength;
			}
		}
		[CRepr]
		public struct IPAT : IUnknown
		{
			public const new Guid IID = .(0x6623b511, 0x4b5f, 0x43c3, 0x9a, 0x01, 0xe8, 0xff, 0x84, 0x18, 0x80, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetTransportStreamId(out uint16 pwVal) mut => VT.GetTransportStreamId(ref this, out pwVal);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordProgramNumber(uint32 dwIndex, out uint16 pwVal) mut => VT.GetRecordProgramNumber(ref this, dwIndex, out pwVal);
			public HRESULT GetRecordProgramMapPid(uint32 dwIndex, out uint16 pwVal) mut => VT.GetRecordProgramMapPid(ref this, dwIndex, out pwVal);
			public HRESULT FindRecordProgramMapPid(uint16 wProgramNumber, out uint16 pwVal) mut => VT.FindRecordProgramMapPid(ref this, wProgramNumber, out pwVal);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out IPAT* ppPAT) mut => VT.GetNextTable(ref this, out ppPAT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, out uint16 pwVal) GetTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, uint32 dwIndex, out uint16 pwVal) GetRecordProgramNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, uint32 dwIndex, out uint16 pwVal) GetRecordProgramMapPid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, uint16 wProgramNumber, out uint16 pwVal) FindRecordProgramMapPid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, out IPAT* ppPAT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPAT self) ConvertNextToCurrent;
			}
		}
		[CRepr]
		public struct ICAT : IUnknown
		{
			public const new Guid IID = .(0x7c6995fb, 0x2a31, 0x4bd7, 0x95, 0x3e, 0xb1, 0xad, 0x7f, 0xb7, 0xd3, 0x1c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(uint32 dwTimeout, out ICAT* ppCAT) mut => VT.GetNextTable(ref this, dwTimeout, out ppCAT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, uint32 dwTimeout, out ICAT* ppCAT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICAT self) ConvertNextToCurrent;
			}
		}
		[CRepr]
		public struct IPMT : IUnknown
		{
			public const new Guid IID = .(0x01f3b398, 0x9527, 0x4736, 0x94, 0xdb, 0x51, 0x95, 0x87, 0x8e, 0x97, 0xa8);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetProgramNumber(out uint16 pwVal) mut => VT.GetProgramNumber(ref this, out pwVal);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetPcrPid(out uint16 pPidVal) mut => VT.GetPcrPid(ref this, out pPidVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, out ppDescriptor);
			public HRESULT GetCountOfRecords(out uint16 pwVal) mut => VT.GetCountOfRecords(ref this, out pwVal);
			public HRESULT GetRecordStreamType(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordStreamType(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordElementaryPid(uint32 dwRecordIndex, out uint16 pPidVal) mut => VT.GetRecordElementaryPid(ref this, dwRecordIndex, out pPidVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwDescIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwDescIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, out pdwCookie, out ppDescriptor);
			public HRESULT QueryServiceGatewayInfo(out DSMCC_ELEMENT* ppDSMCCList, out uint32 puiCount) mut => VT.QueryServiceGatewayInfo(ref this, out ppDSMCCList, out puiCount);
			public HRESULT QueryMPEInfo(out MPE_ELEMENT* ppMPEList, out uint32 puiCount) mut => VT.QueryMPEInfo(ref this, out ppMPEList, out puiCount);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out IPMT* ppPMT) mut => VT.GetNextTable(ref this, out ppPMT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out uint16 pwVal) GetProgramNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out uint16 pPidVal) GetPcrPid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out uint16 pwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordStreamType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint32 dwRecordIndex, out uint16 pPidVal) GetRecordElementaryPid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint32 dwRecordIndex, uint32 dwDescIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out DSMCC_ELEMENT* ppDSMCCList, out uint32 puiCount) QueryServiceGatewayInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out MPE_ELEMENT* ppMPEList, out uint32 puiCount) QueryMPEInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, out IPMT* ppPMT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPMT self) ConvertNextToCurrent;
			}
		}
		[CRepr]
		public struct ITSDT : IUnknown
		{
			public const new Guid IID = .(0xd19bdb43, 0x405b, 0x4a7c, 0xa7, 0x91, 0xc8, 0x91, 0x10, 0xc3, 0x31, 0x65);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out ITSDT* ppTSDT) mut => VT.GetNextTable(ref this, out ppTSDT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, out ITSDT* ppTSDT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITSDT self) ConvertNextToCurrent;
			}
		}
		[CRepr]
		public struct IPSITables : IUnknown
		{
			public const new Guid IID = .(0x919f24c5, 0x7b14, 0x42ac, 0xa4, 0xb0, 0x2a, 0xe0, 0x8d, 0xaf, 0x00, 0xac);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTable(uint32 dwTSID, uint32 dwTID_PID, uint32 dwHashedVer, uint32 dwPara4, out IUnknown* ppIUnknown) mut => VT.GetTable(ref this, dwTSID, dwTID_PID, dwHashedVer, dwPara4, out ppIUnknown);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPSITables self, uint32 dwTSID, uint32 dwTID_PID, uint32 dwHashedVer, uint32 dwPara4, out IUnknown* ppIUnknown) GetTable;
			}
		}
		[CRepr]
		public struct IAtscPsipParser : IUnknown
		{
			public const new Guid IID = .(0xb2c98995, 0x5eb2, 0x4fb1, 0xb4, 0x06, 0xf3, 0xe8, 0xe2, 0x02, 0x6a, 0x9a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(IUnknown* punkMpeg2Data) mut => VT.Initialize(ref this, punkMpeg2Data);
			public HRESULT GetPAT(IPAT** ppPAT) mut => VT.GetPAT(ref this, ppPAT);
			public HRESULT GetCAT(uint32 dwTimeout, ICAT** ppCAT) mut => VT.GetCAT(ref this, dwTimeout, ppCAT);
			public HRESULT GetPMT(uint16 pid, ref uint16 pwProgramNumber, IPMT** ppPMT) mut => VT.GetPMT(ref this, pid, ref pwProgramNumber, ppPMT);
			public HRESULT GetTSDT(ITSDT** ppTSDT) mut => VT.GetTSDT(ref this, ppTSDT);
			public HRESULT GetMGT(IATSC_MGT** ppMGT) mut => VT.GetMGT(ref this, ppMGT);
			public HRESULT GetVCT(uint8 tableId, BOOL fGetNextTable, IATSC_VCT** ppVCT) mut => VT.GetVCT(ref this, tableId, fGetNextTable, ppVCT);
			public HRESULT GetEIT(uint16 pid, ref uint16 pwSourceId, uint32 dwTimeout, IATSC_EIT** ppEIT) mut => VT.GetEIT(ref this, pid, ref pwSourceId, dwTimeout, ppEIT);
			public HRESULT GetETT(uint16 pid, ref uint16 wSourceId, ref uint16 pwEventId, IATSC_ETT** ppETT) mut => VT.GetETT(ref this, pid, ref wSourceId, ref pwEventId, ppETT);
			public HRESULT GetSTT(IATSC_STT** ppSTT) mut => VT.GetSTT(ref this, ppSTT);
			public HRESULT GetEAS(uint16 pid, ISCTE_EAS** ppEAS) mut => VT.GetEAS(ref this, pid, ppEAS);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, IUnknown* punkMpeg2Data) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, IPAT** ppPAT) GetPAT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, uint32 dwTimeout, ICAT** ppCAT) GetCAT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, uint16 pid, ref uint16 pwProgramNumber, IPMT** ppPMT) GetPMT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, ITSDT** ppTSDT) GetTSDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, IATSC_MGT** ppMGT) GetMGT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, uint8 tableId, BOOL fGetNextTable, IATSC_VCT** ppVCT) GetVCT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, uint16 pid, ref uint16 pwSourceId, uint32 dwTimeout, IATSC_EIT** ppEIT) GetEIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, uint16 pid, ref uint16 wSourceId, ref uint16 pwEventId, IATSC_ETT** ppETT) GetETT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, IATSC_STT** ppSTT) GetSTT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscPsipParser self, uint16 pid, ISCTE_EAS** ppEAS) GetEAS;
			}
		}
		[CRepr]
		public struct IATSC_MGT : IUnknown
		{
			public const new Guid IID = .(0x8877dabd, 0xc137, 0x4073, 0x97, 0xe3, 0x77, 0x94, 0x07, 0xa5, 0xd8, 0x7a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.Initialize(ref this, pSectionList, pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetProtocolVersion(out uint8 pbVal) mut => VT.GetProtocolVersion(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordType(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordType(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordTypePid(uint32 dwRecordIndex, out uint16 ppidVal) mut => VT.GetRecordTypePid(ref this, dwRecordIndex, out ppidVal);
			public HRESULT GetRecordVersionNumber(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordVersionNumber(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, out pdwCookie, ppDescriptor);
			public HRESULT GetCountOfTableDescriptors(ref uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, ref pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, out uint8 pbVal) GetProtocolVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwRecordIndex, out uint16 ppidVal) GetRecordTypePid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, ref uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_MGT self, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
			}
		}
		[CRepr]
		public struct IATSC_VCT : IUnknown
		{
			public const new Guid IID = .(0x26879a18, 0x32f9, 0x46c6, 0x91, 0xf0, 0xfb, 0x64, 0x79, 0x27, 0x0e, 0x8c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.Initialize(ref this, pSectionList, pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetTransportStreamId(out uint16 pwVal) mut => VT.GetTransportStreamId(ref this, out pwVal);
			public HRESULT GetProtocolVersion(out uint8 pbVal) mut => VT.GetProtocolVersion(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordName(uint32 dwRecordIndex, PWSTR* pwsName) mut => VT.GetRecordName(ref this, dwRecordIndex, pwsName);
			public HRESULT GetRecordMajorChannelNumber(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordMajorChannelNumber(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordMinorChannelNumber(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordMinorChannelNumber(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordModulationMode(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordModulationMode(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordCarrierFrequency(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCarrierFrequency(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordTransportStreamId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordProgramNumber(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordProgramNumber(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordEtmLocation(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordEtmLocation(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordIsAccessControlledBitSet(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordIsAccessControlledBitSet(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordIsHiddenBitSet(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordIsHiddenBitSet(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordIsPathSelectBitSet(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordIsPathSelectBitSet(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordIsOutOfBandBitSet(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordIsOutOfBandBitSet(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordIsHideGuideBitSet(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordIsHideGuideBitSet(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordServiceType(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordServiceType(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordSourceId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordSourceId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, out pdwCookie, ppDescriptor);
			public HRESULT GetCountOfTableDescriptors(ref uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, ref pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, out uint16 pwVal) GetTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, out uint8 pbVal) GetProtocolVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, PWSTR* pwsName) GetRecordName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordMajorChannelNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordMinorChannelNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordModulationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCarrierFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordProgramNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordEtmLocation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordIsAccessControlledBitSet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordIsHiddenBitSet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordIsPathSelectBitSet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordIsOutOfBandBitSet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordIsHideGuideBitSet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordServiceType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordSourceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, ref uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_VCT self, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
			}
		}
		[CRepr]
		public struct IATSC_EIT : IUnknown
		{
			public const new Guid IID = .(0xd7c212d7, 0x76a2, 0x4b4b, 0xaa, 0x56, 0x84, 0x68, 0x79, 0xa8, 0x00, 0x96);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.Initialize(ref this, pSectionList, pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetSourceId(out uint16 pwVal) mut => VT.GetSourceId(ref this, out pwVal);
			public HRESULT GetProtocolVersion(out uint8 pbVal) mut => VT.GetProtocolVersion(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordEventId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordEventId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordStartTime(uint32 dwRecordIndex, out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetRecordStartTime(ref this, dwRecordIndex, out pmdtVal);
			public HRESULT GetRecordEtmLocation(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordEtmLocation(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordDuration(uint32 dwRecordIndex, out MPEG_TIME pmdVal) mut => VT.GetRecordDuration(ref this, dwRecordIndex, out pmdVal);
			public HRESULT GetRecordTitleText(uint32 dwRecordIndex, out uint32 pdwLength, uint8** ppText) mut => VT.GetRecordTitleText(ref this, dwRecordIndex, out pdwLength, ppText);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, out pdwCookie, ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, out uint16 pwVal) GetSourceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, out uint8 pbVal) GetProtocolVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordEventId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, out MPEG_DATE_AND_TIME pmdtVal) GetRecordStartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordEtmLocation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, out MPEG_TIME pmdVal) GetRecordDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, out uint32 pdwLength, uint8** ppText) GetRecordTitleText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_EIT self, uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetRecordDescriptorByTag;
			}
		}
		[CRepr]
		public struct IATSC_ETT : IUnknown
		{
			public const new Guid IID = .(0x5a142cc9, 0xb8cf, 0x4a86, 0xa0, 0x40, 0xe9, 0xca, 0xdf, 0x3e, 0xf3, 0xe7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.Initialize(ref this, pSectionList, pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetProtocolVersion(out uint8 pbVal) mut => VT.GetProtocolVersion(ref this, out pbVal);
			public HRESULT GetEtmId(out uint32 pdwVal) mut => VT.GetEtmId(ref this, out pdwVal);
			public HRESULT GetExtendedMessageText(out uint32 pdwLength, uint8** ppText) mut => VT.GetExtendedMessageText(ref this, out pdwLength, ppText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_ETT self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_ETT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_ETT self, out uint8 pbVal) GetProtocolVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_ETT self, out uint32 pdwVal) GetEtmId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_ETT self, out uint32 pdwLength, uint8** ppText) GetExtendedMessageText;
			}
		}
		[CRepr]
		public struct IATSC_STT : IUnknown
		{
			public const new Guid IID = .(0x6bf42423, 0x217d, 0x4d6f, 0x81, 0xe1, 0x3a, 0x7b, 0x36, 0x0e, 0xc8, 0x96);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.Initialize(ref this, pSectionList, pMPEGData);
			public HRESULT GetProtocolVersion(out uint8 pbVal) mut => VT.GetProtocolVersion(ref this, out pbVal);
			public HRESULT GetSystemTime(out MPEG_DATE_AND_TIME pmdtSystemTime) mut => VT.GetSystemTime(ref this, out pmdtSystemTime);
			public HRESULT GetGpsUtcOffset(out uint8 pbVal) mut => VT.GetGpsUtcOffset(ref this, out pbVal);
			public HRESULT GetDaylightSavings(out uint16 pwVal) mut => VT.GetDaylightSavings(ref this, out pwVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, out uint8 pbVal) GetProtocolVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, out MPEG_DATE_AND_TIME pmdtSystemTime) GetSystemTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, out uint8 pbVal) GetGpsUtcOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, out uint16 pwVal) GetDaylightSavings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IATSC_STT self, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
			}
		}
		[CRepr]
		public struct ISCTE_EAS : IUnknown
		{
			public const new Guid IID = .(0x1ff544d6, 0x161d, 0x4fae, 0x9f, 0xaa, 0x4f, 0x9f, 0x49, 0x2a, 0xe9, 0x99);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ISectionList* pSectionList, IMpeg2Data* pMPEGData) mut => VT.Initialize(ref this, pSectionList, pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetSequencyNumber(out uint8 pbVal) mut => VT.GetSequencyNumber(ref this, out pbVal);
			public HRESULT GetProtocolVersion(out uint8 pbVal) mut => VT.GetProtocolVersion(ref this, out pbVal);
			public HRESULT GetEASEventID(out uint16 pwVal) mut => VT.GetEASEventID(ref this, out pwVal);
			public HRESULT GetOriginatorCode(out uint8 pbVal) mut => VT.GetOriginatorCode(ref this, out pbVal);
			public HRESULT GetEASEventCodeLen(out uint8 pbVal) mut => VT.GetEASEventCodeLen(ref this, out pbVal);
			public HRESULT GetEASEventCode(out uint8 pbVal) mut => VT.GetEASEventCode(ref this, out pbVal);
			public HRESULT GetRawNatureOfActivationTextLen(out uint8 pbVal) mut => VT.GetRawNatureOfActivationTextLen(ref this, out pbVal);
			public HRESULT GetRawNatureOfActivationText(out uint8 pbVal) mut => VT.GetRawNatureOfActivationText(ref this, out pbVal);
			public HRESULT GetNatureOfActivationText(BSTR bstrIS0639code, BSTR* pbstrString) mut => VT.GetNatureOfActivationText(ref this, bstrIS0639code, pbstrString);
			public HRESULT GetTimeRemaining(out uint8 pbVal) mut => VT.GetTimeRemaining(ref this, out pbVal);
			public HRESULT GetStartTime(out uint32 pdwVal) mut => VT.GetStartTime(ref this, out pdwVal);
			public HRESULT GetDuration(out uint16 pwVal) mut => VT.GetDuration(ref this, out pwVal);
			public HRESULT GetAlertPriority(out uint8 pbVal) mut => VT.GetAlertPriority(ref this, out pbVal);
			public HRESULT GetDetailsOOBSourceID(out uint16 pwVal) mut => VT.GetDetailsOOBSourceID(ref this, out pwVal);
			public HRESULT GetDetailsMajor(out uint16 pwVal) mut => VT.GetDetailsMajor(ref this, out pwVal);
			public HRESULT GetDetailsMinor(out uint16 pwVal) mut => VT.GetDetailsMinor(ref this, out pwVal);
			public HRESULT GetDetailsAudioOOBSourceID(out uint16 pwVal) mut => VT.GetDetailsAudioOOBSourceID(ref this, out pwVal);
			public HRESULT GetAlertText(BSTR bstrIS0639code, BSTR* pbstrString) mut => VT.GetAlertText(ref this, bstrIS0639code, pbstrString);
			public HRESULT GetRawAlertTextLen(out uint16 pwVal) mut => VT.GetRawAlertTextLen(ref this, out pwVal);
			public HRESULT GetRawAlertText(out uint8 pbVal) mut => VT.GetRawAlertText(ref this, out pbVal);
			public HRESULT GetLocationCount(out uint8 pbVal) mut => VT.GetLocationCount(ref this, out pbVal);
			public HRESULT GetLocationCodes(uint8 bIndex, out uint8 pbState, out uint8 pbCountySubdivision, out uint16 pwCounty) mut => VT.GetLocationCodes(ref this, bIndex, out pbState, out pbCountySubdivision, out pwCounty);
			public HRESULT GetExceptionCount(out uint8 pbVal) mut => VT.GetExceptionCount(ref this, out pbVal);
			public HRESULT GetExceptionService(uint8 bIndex, out uint8 pbIBRef, out uint16 pwFirst, out uint16 pwSecond) mut => VT.GetExceptionService(ref this, bIndex, out pbIBRef, out pwFirst, out pwSecond);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, out pdwCookie, ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, ISectionList* pSectionList, IMpeg2Data* pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetSequencyNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetProtocolVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetEASEventID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetOriginatorCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetEASEventCodeLen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetEASEventCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetRawNatureOfActivationTextLen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetRawNatureOfActivationText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, BSTR bstrIS0639code, BSTR* pbstrString) GetNatureOfActivationText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetTimeRemaining;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint32 pdwVal) GetStartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetAlertPriority;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetDetailsOOBSourceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetDetailsMajor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetDetailsMinor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetDetailsAudioOOBSourceID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, BSTR bstrIS0639code, BSTR* pbstrString) GetAlertText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint16 pwVal) GetRawAlertTextLen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetRawAlertText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetLocationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, uint8 bIndex, out uint8 pbState, out uint8 pbCountySubdivision, out uint16 pwCounty) GetLocationCodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint8 pbVal) GetExceptionCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, uint8 bIndex, out uint8 pbIBRef, out uint16 pwFirst, out uint16 pwSecond) GetExceptionService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, uint32 dwIndex, IGenericDescriptor** ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISCTE_EAS self, uint8 bTag, out uint32 pdwCookie, IGenericDescriptor** ppDescriptor) GetTableDescriptorByTag;
			}
		}
		[CRepr]
		public struct IAtscContentAdvisoryDescriptor : IUnknown
		{
			public const new Guid IID = .(0xff76e60c, 0x0283, 0x43ea, 0xba, 0x32, 0xb4, 0x22, 0x23, 0x85, 0x47, 0xee);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetRatingRegionCount(out uint8 pbVal) mut => VT.GetRatingRegionCount(ref this, out pbVal);
			public HRESULT GetRecordRatingRegion(uint8 bIndex, out uint8 pbVal) mut => VT.GetRecordRatingRegion(ref this, bIndex, out pbVal);
			public HRESULT GetRecordRatedDimensions(uint8 bIndex, out uint8 pbVal) mut => VT.GetRecordRatedDimensions(ref this, bIndex, out pbVal);
			public HRESULT GetRecordRatingDimension(uint8 bIndexOuter, uint8 bIndexInner, out uint8 pbVal) mut => VT.GetRecordRatingDimension(ref this, bIndexOuter, bIndexInner, out pbVal);
			public HRESULT GetRecordRatingValue(uint8 bIndexOuter, uint8 bIndexInner, out uint8 pbVal) mut => VT.GetRecordRatingValue(ref this, bIndexOuter, bIndexInner, out pbVal);
			public HRESULT GetRecordRatingDescriptionText(uint8 bIndex, out uint8 pbLength, uint8** ppText) mut => VT.GetRecordRatingDescriptionText(ref this, bIndex, out pbLength, ppText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, out uint8 pbVal) GetRatingRegionCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, uint8 bIndex, out uint8 pbVal) GetRecordRatingRegion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, uint8 bIndex, out uint8 pbVal) GetRecordRatedDimensions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, uint8 bIndexOuter, uint8 bIndexInner, out uint8 pbVal) GetRecordRatingDimension;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, uint8 bIndexOuter, uint8 bIndexInner, out uint8 pbVal) GetRecordRatingValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAtscContentAdvisoryDescriptor self, uint8 bIndex, out uint8 pbLength, uint8** ppText) GetRecordRatingDescriptionText;
			}
		}
		[CRepr]
		public struct ICaptionServiceDescriptor : IUnknown
		{
			public const new Guid IID = .(0x40834007, 0x6834, 0x46f0, 0xbd, 0x45, 0xd5, 0xf6, 0xa6, 0xbe, 0x25, 0x8c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNumberOfServices(out uint8 pbVal) mut => VT.GetNumberOfServices(ref this, out pbVal);
			public HRESULT GetLanguageCode(uint8 bIndex, uint8* LangCode) mut => VT.GetLanguageCode(ref this, bIndex, LangCode);
			public HRESULT GetCaptionServiceNumber(uint8 bIndex, out uint8 pbVal) mut => VT.GetCaptionServiceNumber(ref this, bIndex, out pbVal);
			public HRESULT GetCCType(uint8 bIndex, out uint8 pbVal) mut => VT.GetCCType(ref this, bIndex, out pbVal);
			public HRESULT GetEasyReader(uint8 bIndex, out uint8 pbVal) mut => VT.GetEasyReader(ref this, bIndex, out pbVal);
			public HRESULT GetWideAspectRatio(uint8 bIndex, out uint8 pbVal) mut => VT.GetWideAspectRatio(ref this, bIndex, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptionServiceDescriptor self, out uint8 pbVal) GetNumberOfServices;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptionServiceDescriptor self, uint8 bIndex, uint8* LangCode) GetLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptionServiceDescriptor self, uint8 bIndex, out uint8 pbVal) GetCaptionServiceNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptionServiceDescriptor self, uint8 bIndex, out uint8 pbVal) GetCCType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptionServiceDescriptor self, uint8 bIndex, out uint8 pbVal) GetEasyReader;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaptionServiceDescriptor self, uint8 bIndex, out uint8 pbVal) GetWideAspectRatio;
			}
		}
		[CRepr]
		public struct IServiceLocationDescriptor : IUnknown
		{
			public const new Guid IID = .(0x58c3c827, 0x9d91, 0x4215, 0xbf, 0xf3, 0x82, 0x0a, 0x49, 0xf0, 0x90, 0x4c);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPCR_PID(out uint16 pwVal) mut => VT.GetPCR_PID(ref this, out pwVal);
			public HRESULT GetNumberOfElements(out uint8 pbVal) mut => VT.GetNumberOfElements(ref this, out pbVal);
			public HRESULT GetElementStreamType(uint8 bIndex, out uint8 pbVal) mut => VT.GetElementStreamType(ref this, bIndex, out pbVal);
			public HRESULT GetElementPID(uint8 bIndex, out uint16 pwVal) mut => VT.GetElementPID(ref this, bIndex, out pwVal);
			public HRESULT GetElementLanguageCode(uint8 bIndex, uint8* LangCode) mut => VT.GetElementLanguageCode(ref this, bIndex, LangCode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IServiceLocationDescriptor self, out uint16 pwVal) GetPCR_PID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IServiceLocationDescriptor self, out uint8 pbVal) GetNumberOfElements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IServiceLocationDescriptor self, uint8 bIndex, out uint8 pbVal) GetElementStreamType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IServiceLocationDescriptor self, uint8 bIndex, out uint16 pwVal) GetElementPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IServiceLocationDescriptor self, uint8 bIndex, uint8* LangCode) GetElementLanguageCode;
			}
		}
		[CRepr]
		public struct IAttributeSet : IUnknown
		{
			public const new Guid IID = .(0x583ec3cc, 0x4960, 0x4857, 0x98, 0x2b, 0x41, 0xa3, 0x3e, 0xa0, 0xa0, 0x06);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetAttrib(Guid guidAttribute, ref uint8 pbAttribute, uint32 dwAttributeLength) mut => VT.SetAttrib(ref this, guidAttribute, ref pbAttribute, dwAttributeLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAttributeSet self, Guid guidAttribute, ref uint8 pbAttribute, uint32 dwAttributeLength) SetAttrib;
			}
		}
		[CRepr]
		public struct IAttributeGet : IUnknown
		{
			public const new Guid IID = .(0x52dbd1ec, 0xe48f, 0x4528, 0x92, 0x32, 0xf4, 0x42, 0xa6, 0x8f, 0x0a, 0xe1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCount(out int32 plCount) mut => VT.GetCount(ref this, out plCount);
			public HRESULT GetAttribIndexed(int32 lIndex, out Guid pguidAttribute, out uint8 pbAttribute, out uint32 pdwAttributeLength) mut => VT.GetAttribIndexed(ref this, lIndex, out pguidAttribute, out pbAttribute, out pdwAttributeLength);
			public HRESULT GetAttrib(Guid guidAttribute, out uint8 pbAttribute, out uint32 pdwAttributeLength) mut => VT.GetAttrib(ref this, guidAttribute, out pbAttribute, out pdwAttributeLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAttributeGet self, out int32 plCount) GetCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAttributeGet self, int32 lIndex, out Guid pguidAttribute, out uint8 pbAttribute, out uint32 pdwAttributeLength) GetAttribIndexed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAttributeGet self, Guid guidAttribute, out uint8 pbAttribute, out uint32 pdwAttributeLength) GetAttrib;
			}
		}
		[CRepr]
		public struct IDvbSiParser : IUnknown
		{
			public const new Guid IID = .(0xb758a7bd, 0x14dc, 0x449d, 0xb8, 0x28, 0x35, 0x90, 0x9a, 0xcb, 0x3b, 0x1e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref IUnknown punkMpeg2Data) mut => VT.Initialize(ref this, ref punkMpeg2Data);
			public HRESULT GetPAT(out IPAT* ppPAT) mut => VT.GetPAT(ref this, out ppPAT);
			public HRESULT GetCAT(uint32 dwTimeout, out ICAT* ppCAT) mut => VT.GetCAT(ref this, dwTimeout, out ppCAT);
			public HRESULT GetPMT(uint16 pid, uint16* pwProgramNumber, out IPMT* ppPMT) mut => VT.GetPMT(ref this, pid, pwProgramNumber, out ppPMT);
			public HRESULT GetTSDT(out ITSDT* ppTSDT) mut => VT.GetTSDT(ref this, out ppTSDT);
			public HRESULT GetNIT(uint8 tableId, uint16* pwNetworkId, out IDVB_NIT* ppNIT) mut => VT.GetNIT(ref this, tableId, pwNetworkId, out ppNIT);
			public HRESULT GetSDT(uint8 tableId, uint16* pwTransportStreamId, out IDVB_SDT* ppSDT) mut => VT.GetSDT(ref this, tableId, pwTransportStreamId, out ppSDT);
			public HRESULT GetEIT(uint8 tableId, uint16* pwServiceId, out IDVB_EIT* ppEIT) mut => VT.GetEIT(ref this, tableId, pwServiceId, out ppEIT);
			public HRESULT GetBAT(uint16* pwBouquetId, out IDVB_BAT* ppBAT) mut => VT.GetBAT(ref this, pwBouquetId, out ppBAT);
			public HRESULT GetRST(uint32 dwTimeout, out IDVB_RST* ppRST) mut => VT.GetRST(ref this, dwTimeout, out ppRST);
			public HRESULT GetST(uint16 pid, uint32 dwTimeout, out IDVB_ST* ppST) mut => VT.GetST(ref this, pid, dwTimeout, out ppST);
			public HRESULT GetTDT(out IDVB_TDT* ppTDT) mut => VT.GetTDT(ref this, out ppTDT);
			public HRESULT GetTOT(out IDVB_TOT* ppTOT) mut => VT.GetTOT(ref this, out ppTOT);
			public HRESULT GetDIT(uint32 dwTimeout, out IDVB_DIT* ppDIT) mut => VT.GetDIT(ref this, dwTimeout, out ppDIT);
			public HRESULT GetSIT(uint32 dwTimeout, out IDVB_SIT* ppSIT) mut => VT.GetSIT(ref this, dwTimeout, out ppSIT);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, ref IUnknown punkMpeg2Data) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, out IPAT* ppPAT) GetPAT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint32 dwTimeout, out ICAT* ppCAT) GetCAT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint16 pid, uint16* pwProgramNumber, out IPMT* ppPMT) GetPMT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, out ITSDT* ppTSDT) GetTSDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint8 tableId, uint16* pwNetworkId, out IDVB_NIT* ppNIT) GetNIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint8 tableId, uint16* pwTransportStreamId, out IDVB_SDT* ppSDT) GetSDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint8 tableId, uint16* pwServiceId, out IDVB_EIT* ppEIT) GetEIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint16* pwBouquetId, out IDVB_BAT* ppBAT) GetBAT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint32 dwTimeout, out IDVB_RST* ppRST) GetRST;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint16 pid, uint32 dwTimeout, out IDVB_ST* ppST) GetST;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, out IDVB_TDT* ppTDT) GetTDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, out IDVB_TOT* ppTOT) GetTOT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint32 dwTimeout, out IDVB_DIT* ppDIT) GetDIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser self, uint32 dwTimeout, out IDVB_SIT* ppSIT) GetSIT;
			}
		}
		[CRepr]
		public struct IDvbSiParser2 : IDvbSiParser
		{
			public const new Guid IID = .(0x0ac5525f, 0xf816, 0x42f4, 0x93, 0xba, 0x4c, 0x0f, 0x32, 0xf4, 0x6e, 0x54);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEIT2(uint8 tableId, uint16* pwServiceId, uint8* pbSegment, out IDVB_EIT2* ppEIT) mut => VT.GetEIT2(ref this, tableId, pwServiceId, pbSegment, out ppEIT);

			[CRepr]
			public struct VTable : IDvbSiParser.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSiParser2 self, uint8 tableId, uint16* pwServiceId, uint8* pbSegment, out IDVB_EIT2* ppEIT) GetEIT2;
			}
		}
		[CRepr]
		public struct IIsdbSiParser2 : IDvbSiParser2
		{
			public const new Guid IID = .(0x900e4bb7, 0x18cd, 0x453f, 0x98, 0xbe, 0x3b, 0xe6, 0xaa, 0x21, 0x17, 0x72);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSDT(uint8 tableId, uint16* pwTransportStreamId, out IISDB_SDT* ppSDT) mut => VT.GetSDT(ref this, tableId, pwTransportStreamId, out ppSDT);
			public HRESULT GetBIT(uint8 tableId, uint16* pwOriginalNetworkId, out IISDB_BIT* ppBIT) mut => VT.GetBIT(ref this, tableId, pwOriginalNetworkId, out ppBIT);
			public HRESULT GetNBIT(uint8 tableId, uint16* pwOriginalNetworkId, out IISDB_NBIT* ppNBIT) mut => VT.GetNBIT(ref this, tableId, pwOriginalNetworkId, out ppNBIT);
			public HRESULT GetLDT(uint8 tableId, uint16* pwOriginalServiceId, out IISDB_LDT* ppLDT) mut => VT.GetLDT(ref this, tableId, pwOriginalServiceId, out ppLDT);
			public HRESULT GetSDTT(uint8 tableId, uint16* pwTableIdExt, out IISDB_SDTT* ppSDTT) mut => VT.GetSDTT(ref this, tableId, pwTableIdExt, out ppSDTT);
			public HRESULT GetCDT(uint8 tableId, uint8 bSectionNumber, uint16* pwDownloadDataId, out IISDB_CDT* ppCDT) mut => VT.GetCDT(ref this, tableId, bSectionNumber, pwDownloadDataId, out ppCDT);
			public HRESULT GetEMM(uint16 pid, uint16 wTableIdExt, out IISDB_EMM* ppEMM) mut => VT.GetEMM(ref this, pid, wTableIdExt, out ppEMM);

			[CRepr]
			public struct VTable : IDvbSiParser2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint8 tableId, uint16* pwTransportStreamId, out IISDB_SDT* ppSDT) GetSDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint8 tableId, uint16* pwOriginalNetworkId, out IISDB_BIT* ppBIT) GetBIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint8 tableId, uint16* pwOriginalNetworkId, out IISDB_NBIT* ppNBIT) GetNBIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint8 tableId, uint16* pwOriginalServiceId, out IISDB_LDT* ppLDT) GetLDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint8 tableId, uint16* pwTableIdExt, out IISDB_SDTT* ppSDTT) GetSDTT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint8 tableId, uint8 bSectionNumber, uint16* pwDownloadDataId, out IISDB_CDT* ppCDT) GetCDT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSiParser2 self, uint16 pid, uint16 wTableIdExt, out IISDB_EMM* ppEMM) GetEMM;
			}
		}
		[CRepr]
		public struct IDVB_NIT : IUnknown
		{
			public const new Guid IID = .(0xc64935f4, 0x29e4, 0x4e22, 0x91, 0x1a, 0x63, 0xf7, 0xf5, 0x5c, 0xb0, 0x97);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetNetworkId(out uint16 pwVal) mut => VT.GetNetworkId(ref this, out pwVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordTransportStreamId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordOriginalNetworkId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordOriginalNetworkId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out IDVB_NIT* ppNIT) mut => VT.GetNextTable(ref this, out ppNIT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, out uint16 pwVal) GetNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, out IDVB_NIT* ppNIT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self) ConvertNextToCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_NIT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IDVB_SDT : IUnknown
		{
			public const new Guid IID = .(0x02cad8d3, 0xfe43, 0x48e2, 0x90, 0xbd, 0x45, 0x0e, 0xd9, 0xa8, 0xa5, 0xfd);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetTransportStreamId(out uint16 pwVal) mut => VT.GetTransportStreamId(ref this, out pwVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordServiceId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordServiceId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordEITScheduleFlag(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordEITScheduleFlag(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordEITPresentFollowingFlag(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordEITPresentFollowingFlag(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordRunningStatus(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordFreeCAMode(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordFreeCAMode(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out IDVB_SDT* ppSDT) mut => VT.GetNextTable(ref this, out ppSDT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, out uint16 pwVal) GetTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordEITScheduleFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordEITPresentFollowingFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordRunningStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordFreeCAMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, out IDVB_SDT* ppSDT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self) ConvertNextToCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SDT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IISDB_SDT : IDVB_SDT
		{
			public const new Guid IID = .(0x3f3dc9a2, 0xbb32, 0x4fb9, 0xae, 0x9e, 0xd8, 0x56, 0x84, 0x89, 0x27, 0xa3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRecordEITUserDefinedFlags(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordEITUserDefinedFlags(ref this, dwRecordIndex, out pbVal);

			[CRepr]
			public struct VTable : IDVB_SDT.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordEITUserDefinedFlags;
			}
		}
		[CRepr]
		public struct IDVB_EIT : IUnknown
		{
			public const new Guid IID = .(0x442db029, 0x02cb, 0x4495, 0x8b, 0x92, 0x1c, 0x13, 0x37, 0x5b, 0xce, 0x99);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetServiceId(out uint16 pwVal) mut => VT.GetServiceId(ref this, out pwVal);
			public HRESULT GetTransportStreamId(out uint16 pwVal) mut => VT.GetTransportStreamId(ref this, out pwVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetSegmentLastSectionNumber(out uint8 pbVal) mut => VT.GetSegmentLastSectionNumber(ref this, out pbVal);
			public HRESULT GetLastTableId(out uint8 pbVal) mut => VT.GetLastTableId(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordEventId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordEventId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordStartTime(uint32 dwRecordIndex, out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetRecordStartTime(ref this, dwRecordIndex, out pmdtVal);
			public HRESULT GetRecordDuration(uint32 dwRecordIndex, out MPEG_TIME pmdVal) mut => VT.GetRecordDuration(ref this, dwRecordIndex, out pmdVal);
			public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordRunningStatus(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordFreeCAMode(uint32 dwRecordIndex, out BOOL pfVal) mut => VT.GetRecordFreeCAMode(ref this, dwRecordIndex, out pfVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out IDVB_EIT* ppEIT) mut => VT.GetNextTable(ref this, out ppEIT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint16 pwVal) GetServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint16 pwVal) GetTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint8 pbVal) GetSegmentLastSectionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint8 pbVal) GetLastTableId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordEventId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, out MPEG_DATE_AND_TIME pmdtVal) GetRecordStartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, out MPEG_TIME pmdVal) GetRecordDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordRunningStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, out BOOL pfVal) GetRecordFreeCAMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out IDVB_EIT* ppEIT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self) ConvertNextToCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IDVB_EIT2 : IDVB_EIT
		{
			public const new Guid IID = .(0x61a389e0, 0x9b9e, 0x4ba0, 0xae, 0xea, 0x5d, 0xdd, 0x15, 0x98, 0x20, 0xea);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSegmentInfo(out uint8 pbTid, out uint8 pbSegment) mut => VT.GetSegmentInfo(ref this, out pbTid, out pbSegment);
			public HRESULT GetRecordSection(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordSection(ref this, dwRecordIndex, out pbVal);

			[CRepr]
			public struct VTable : IDVB_EIT.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT2 self, out uint8 pbTid, out uint8 pbSegment) GetSegmentInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_EIT2 self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordSection;
			}
		}
		[CRepr]
		public struct IDVB_BAT : IUnknown
		{
			public const new Guid IID = .(0xece9bb0c, 0x43b6, 0x4558, 0xa0, 0xec, 0x18, 0x12, 0xc3, 0x4c, 0xd6, 0xca);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetBouquetId(out uint16 pwVal) mut => VT.GetBouquetId(ref this, out pwVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, ref IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, ref ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordTransportStreamId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordOriginalNetworkId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordOriginalNetworkId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(out IDVB_BAT* ppBAT) mut => VT.GetNextTable(ref this, out ppBAT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, out uint16 pwVal) GetBouquetId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint32 dwIndex, ref IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, out IDVB_BAT* ppBAT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_BAT self) ConvertNextToCurrent;
			}
		}
		[CRepr]
		public struct IDVB_RST : IUnknown
		{
			public const new Guid IID = .(0xf47dcd04, 0x1e23, 0x4fb7, 0x9f, 0x96, 0xb4, 0x0e, 0xea, 0xd1, 0x0b, 0x2b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList) mut => VT.Initialize(ref this, ref pSectionList);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordTransportStreamId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordTransportStreamId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordOriginalNetworkId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordOriginalNetworkId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordServiceId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordServiceId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordEventId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordEventId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordRunningStatus(ref this, dwRecordIndex, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, ref ISectionList pSectionList) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordEventId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_RST self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordRunningStatus;
			}
		}
		[CRepr]
		public struct IDVB_ST : IUnknown
		{
			public const new Guid IID = .(0x4d5b9f23, 0x2a02, 0x45de, 0xbc, 0xda, 0x5d, 0x5d, 0xbf, 0xbf, 0xbe, 0x62);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList) mut => VT.Initialize(ref this, ref pSectionList);
			public HRESULT GetDataLength(out uint16 pwVal) mut => VT.GetDataLength(ref this, out pwVal);
			public HRESULT GetData(out uint8* ppData) mut => VT.GetData(ref this, out ppData);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_ST self, ref ISectionList pSectionList) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_ST self, out uint16 pwVal) GetDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_ST self, out uint8* ppData) GetData;
			}
		}
		[CRepr]
		public struct IDVB_TDT : IUnknown
		{
			public const new Guid IID = .(0x0780dc7d, 0xd55c, 0x4aef, 0x97, 0xe6, 0x6b, 0x75, 0x90, 0x6e, 0x27, 0x96);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList) mut => VT.Initialize(ref this, ref pSectionList);
			public HRESULT GetUTCTime(out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetUTCTime(ref this, out pmdtVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TDT self, ref ISectionList pSectionList) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TDT self, out MPEG_DATE_AND_TIME pmdtVal) GetUTCTime;
			}
		}
		[CRepr]
		public struct IDVB_TOT : IUnknown
		{
			public const new Guid IID = .(0x83295d6a, 0xfaba, 0x4ee1, 0x9b, 0x15, 0x80, 0x67, 0x69, 0x69, 0x10, 0xae);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList) mut => VT.Initialize(ref this, ref pSectionList);
			public HRESULT GetUTCTime(out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetUTCTime(ref this, out pmdtVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, pdwCookie, out ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TOT self, ref ISectionList pSectionList) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TOT self, out MPEG_DATE_AND_TIME pmdtVal) GetUTCTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TOT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TOT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_TOT self, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
			}
		}
		[CRepr]
		public struct IDVB_DIT : IUnknown
		{
			public const new Guid IID = .(0x91bffdf9, 0x9432, 0x410f, 0x86, 0xef, 0x1c, 0x22, 0x8e, 0xd0, 0xad, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList) mut => VT.Initialize(ref this, ref pSectionList);
			public HRESULT GetTransitionFlag(out BOOL pfVal) mut => VT.GetTransitionFlag(ref this, out pfVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_DIT self, ref ISectionList pSectionList) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_DIT self, out BOOL pfVal) GetTransitionFlag;
			}
		}
		[CRepr]
		public struct IDVB_SIT : IUnknown
		{
			public const new Guid IID = .(0x68cdce53, 0x8bea, 0x45c2, 0x9d, 0x9d, 0xac, 0xf5, 0x75, 0xa0, 0x89, 0xb5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordServiceId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordServiceId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordRunningStatus(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordRunningStatus(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT RegisterForNextTable(HANDLE hNextTableAvailable) mut => VT.RegisterForNextTable(ref this, hNextTableAvailable);
			public HRESULT GetNextTable(uint32 dwTimeout, out IDVB_SIT* ppSIT) mut => VT.GetNextTable(ref this, dwTimeout, out ppSIT);
			public HRESULT RegisterForWhenCurrent(HANDLE hNextTableIsCurrent) mut => VT.RegisterForWhenCurrent(ref this, hNextTableIsCurrent);
			public HRESULT ConvertNextToCurrent() mut => VT.ConvertNextToCurrent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordRunningStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, HANDLE hNextTableAvailable) RegisterForNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, uint32 dwTimeout, out IDVB_SIT* ppSIT) GetNextTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self, HANDLE hNextTableIsCurrent) RegisterForWhenCurrent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDVB_SIT self) ConvertNextToCurrent;
			}
		}
		[CRepr]
		public struct IISDB_BIT : IUnknown
		{
			public const new Guid IID = .(0x537cd71e, 0x0e46, 0x4173, 0x90, 0x01, 0xba, 0x04, 0x3f, 0x3e, 0x49, 0xe2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetBroadcastViewPropriety(out uint8 pbVal) mut => VT.GetBroadcastViewPropriety(ref this, out pbVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordBroadcasterId(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordBroadcasterId(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, out uint8 pbVal) GetBroadcastViewPropriety;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordBroadcasterId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_BIT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IISDB_NBIT : IUnknown
		{
			public const new Guid IID = .(0x1b1863ef, 0x08f1, 0x40b7, 0xa5, 0x59, 0x3b, 0x1e, 0xff, 0x8c, 0xaf, 0xa6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordInformationId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordInformationId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordInformationType(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordInformationType(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordDescriptionBodyLocation(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordDescriptionBodyLocation(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordMessageSectionNumber(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordMessageSectionNumber(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordUserDefined(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordUserDefined(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordNumberOfKeys(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordNumberOfKeys(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordKeys(uint32 dwRecordIndex, out uint8* pbKeys) mut => VT.GetRecordKeys(ref this, dwRecordIndex, out pbKeys);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordInformationId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordInformationType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordDescriptionBodyLocation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordMessageSectionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordUserDefined;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordNumberOfKeys;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint8* pbKeys) GetRecordKeys;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_NBIT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IISDB_LDT : IUnknown
		{
			public const new Guid IID = .(0x141a546b, 0x02ff, 0x4fb9, 0xa3, 0xa3, 0x2f, 0x07, 0x4b, 0x74, 0xa9, 0xa9);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetOriginalServiceId(out uint16 pwVal) mut => VT.GetOriginalServiceId(ref this, out pwVal);
			public HRESULT GetTransportStreamId(out uint16 pwVal) mut => VT.GetTransportStreamId(ref this, out pwVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordDescriptionId(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordDescriptionId(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, out uint16 pwVal) GetOriginalServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, out uint16 pwVal) GetTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordDescriptionId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_LDT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IISDB_SDTT : IUnknown
		{
			public const new Guid IID = .(0xee60ef2d, 0x813a, 0x4dc7, 0xbf, 0x92, 0xea, 0x13, 0xda, 0xc8, 0x53, 0x13);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetTableIdExt(out uint16 pwVal) mut => VT.GetTableIdExt(ref this, out pwVal);
			public HRESULT GetTransportStreamId(out uint16 pwVal) mut => VT.GetTransportStreamId(ref this, out pwVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetServiceId(out uint16 pwVal) mut => VT.GetServiceId(ref this, out pwVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordGroup(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordGroup(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordTargetVersion(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordTargetVersion(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordNewVersion(uint32 dwRecordIndex, out uint16 pwVal) mut => VT.GetRecordNewVersion(ref this, dwRecordIndex, out pwVal);
			public HRESULT GetRecordDownloadLevel(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordDownloadLevel(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordVersionIndicator(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordVersionIndicator(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordScheduleTimeShiftInformation(uint32 dwRecordIndex, out uint8 pbVal) mut => VT.GetRecordScheduleTimeShiftInformation(ref this, dwRecordIndex, out pbVal);
			public HRESULT GetRecordCountOfSchedules(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfSchedules(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordStartTimeByIndex(uint32 dwRecordIndex, uint32 dwIndex, out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetRecordStartTimeByIndex(ref this, dwRecordIndex, dwIndex, out pmdtVal);
			public HRESULT GetRecordDurationByIndex(uint32 dwRecordIndex, uint32 dwIndex, out MPEG_TIME pmdVal) mut => VT.GetRecordDurationByIndex(ref this, dwRecordIndex, dwIndex, out pmdVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint16 pwVal) GetTableIdExt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint16 pwVal) GetTransportStreamId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint16 pwVal) GetServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordGroup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordTargetVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint16 pwVal) GetRecordNewVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordDownloadLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordVersionIndicator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint8 pbVal) GetRecordScheduleTimeShiftInformation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfSchedules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, uint32 dwIndex, out MPEG_DATE_AND_TIME pmdtVal) GetRecordStartTimeByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, uint32 dwIndex, out MPEG_TIME pmdVal) GetRecordDurationByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, uint32 dwRecordIndex, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_SDTT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IISDB_CDT : IUnknown
		{
			public const new Guid IID = .(0x25fa92c2, 0x8b80, 0x4787, 0xa8, 0x41, 0x3a, 0x0e, 0x8f, 0x17, 0x98, 0x4b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData, uint8 bSectionNumber) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData, bSectionNumber);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetDownloadDataId(out uint16 pwVal) mut => VT.GetDownloadDataId(ref this, out pwVal);
			public HRESULT GetSectionNumber(out uint8 pbVal) mut => VT.GetSectionNumber(ref this, out pbVal);
			public HRESULT GetOriginalNetworkId(out uint16 pwVal) mut => VT.GetOriginalNetworkId(ref this, out pwVal);
			public HRESULT GetDataType(out uint8 pbVal) mut => VT.GetDataType(ref this, out pbVal);
			public HRESULT GetCountOfTableDescriptors(out uint32 pdwVal) mut => VT.GetCountOfTableDescriptors(ref this, out pdwVal);
			public HRESULT GetTableDescriptorByIndex(uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByIndex(ref this, dwIndex, out ppDescriptor);
			public HRESULT GetTableDescriptorByTag(uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetTableDescriptorByTag(ref this, bTag, pdwCookie, out ppDescriptor);
			public HRESULT GetSizeOfDataModule(out uint32 pdwVal) mut => VT.GetSizeOfDataModule(ref this, out pdwVal);
			public HRESULT GetDataModule(out uint8* pbData) mut => VT.GetDataModule(ref this, out pbData);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData, uint8 bSectionNumber) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint16 pwVal) GetDownloadDataId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint8 pbVal) GetSectionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint16 pwVal) GetOriginalNetworkId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint8 pbVal) GetDataType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint32 pdwVal) GetCountOfTableDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, uint8 bTag, uint32* pdwCookie, out IGenericDescriptor* ppDescriptor) GetTableDescriptorByTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint32 pdwVal) GetSizeOfDataModule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint8* pbData) GetDataModule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_CDT self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IISDB_EMM : IUnknown
		{
			public const new Guid IID = .(0x0edb556d, 0x43ad, 0x4938, 0x96, 0x68, 0x32, 0x1b, 0x2f, 0xfe, 0xcf, 0xd3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) mut => VT.Initialize(ref this, ref pSectionList, ref pMPEGData);
			public HRESULT GetVersionNumber(out uint8 pbVal) mut => VT.GetVersionNumber(ref this, out pbVal);
			public HRESULT GetTableIdExtension(out uint16 pwVal) mut => VT.GetTableIdExtension(ref this, out pwVal);
			public HRESULT GetDataBytes(out uint16 pwBufferLength, out uint8 pbBuffer) mut => VT.GetDataBytes(ref this, out pwBufferLength, out pbBuffer);
			public HRESULT GetSharedEmmMessage(out uint16 pwLength, out uint8* ppbMessage) mut => VT.GetSharedEmmMessage(ref this, out pwLength, out ppbMessage);
			public HRESULT GetIndividualEmmMessage(ref IUnknown pUnknown, out uint16 pwLength, out uint8* ppbMessage) mut => VT.GetIndividualEmmMessage(ref this, ref pUnknown, out pwLength, out ppbMessage);
			public HRESULT GetVersionHash(out uint32 pdwVersionHash) mut => VT.GetVersionHash(ref this, out pdwVersionHash);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, ref ISectionList pSectionList, ref IMpeg2Data pMPEGData) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, out uint8 pbVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, out uint16 pwVal) GetTableIdExtension;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, out uint16 pwBufferLength, out uint8 pbBuffer) GetDataBytes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, out uint16 pwLength, out uint8* ppbMessage) GetSharedEmmMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, ref IUnknown pUnknown, out uint16 pwLength, out uint8* ppbMessage) GetIndividualEmmMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IISDB_EMM self, out uint32 pdwVersionHash) GetVersionHash;
			}
		}
		[CRepr]
		public struct IDvbServiceAttributeDescriptor : IUnknown
		{
			public const new Guid IID = .(0x0f37bd92, 0xd6a1, 0x4854, 0xb9, 0x50, 0x3a, 0x96, 0x9d, 0x27, 0xf3, 0x0e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordServiceId(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordServiceId(ref this, bRecordIndex, out pwVal);
			public HRESULT GetRecordNumericSelectionFlag(uint8 bRecordIndex, out BOOL pfVal) mut => VT.GetRecordNumericSelectionFlag(ref this, bRecordIndex, out pfVal);
			public HRESULT GetRecordVisibleServiceFlag(uint8 bRecordIndex, out BOOL pfVal) mut => VT.GetRecordVisibleServiceFlag(ref this, bRecordIndex, out pfVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceAttributeDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceAttributeDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceAttributeDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceAttributeDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceAttributeDescriptor self, uint8 bRecordIndex, out BOOL pfVal) GetRecordNumericSelectionFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceAttributeDescriptor self, uint8 bRecordIndex, out BOOL pfVal) GetRecordVisibleServiceFlag;
			}
		}
		[CRepr]
		public struct IDvbContentIdentifierDescriptor : IUnknown
		{
			public const new Guid IID = .(0x05e0c1ea, 0xf661, 0x4053, 0x9f, 0xbf, 0xd9, 0x3b, 0x28, 0x35, 0x98, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordCrid(uint8 bRecordIndex, out uint8 pbType, out uint8 pbLocation, out uint8 pbLength, uint8** ppbBytes) mut => VT.GetRecordCrid(ref this, bRecordIndex, out pbType, out pbLocation, out pbLength, ppbBytes);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentIdentifierDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentIdentifierDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentIdentifierDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentIdentifierDescriptor self, uint8 bRecordIndex, out uint8 pbType, out uint8 pbLocation, out uint8 pbLength, uint8** ppbBytes) GetRecordCrid;
			}
		}
		[CRepr]
		public struct IDvbDefaultAuthorityDescriptor : IUnknown
		{
			public const new Guid IID = .(0x05ec24d1, 0x3a31, 0x44e7, 0xb4, 0x08, 0x67, 0xc6, 0x0a, 0x35, 0x22, 0x76);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetDefaultAuthority(out uint8 pbLength, uint8** ppbBytes) mut => VT.GetDefaultAuthority(ref this, out pbLength, ppbBytes);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDefaultAuthorityDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDefaultAuthorityDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDefaultAuthorityDescriptor self, out uint8 pbLength, uint8** ppbBytes) GetDefaultAuthority;
			}
		}
		[CRepr]
		public struct IDvbSatelliteDeliverySystemDescriptor : IUnknown
		{
			public const new Guid IID = .(0x02f2225a, 0x805b, 0x4ec5, 0xa9, 0xa6, 0xf9, 0xb5, 0x91, 0x3c, 0xd4, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetFrequency(out uint32 pdwVal) mut => VT.GetFrequency(ref this, out pdwVal);
			public HRESULT GetOrbitalPosition(out uint16 pwVal) mut => VT.GetOrbitalPosition(ref this, out pwVal);
			public HRESULT GetWestEastFlag(out uint8 pbVal) mut => VT.GetWestEastFlag(ref this, out pbVal);
			public HRESULT GetPolarization(out uint8 pbVal) mut => VT.GetPolarization(ref this, out pbVal);
			public HRESULT GetModulation(out uint8 pbVal) mut => VT.GetModulation(ref this, out pbVal);
			public HRESULT GetSymbolRate(out uint32 pdwVal) mut => VT.GetSymbolRate(ref this, out pdwVal);
			public HRESULT GetFECInner(out uint8 pbVal) mut => VT.GetFECInner(ref this, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint32 pdwVal) GetFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint16 pwVal) GetOrbitalPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint8 pbVal) GetWestEastFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint8 pbVal) GetPolarization;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint8 pbVal) GetModulation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint32 pdwVal) GetSymbolRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSatelliteDeliverySystemDescriptor self, out uint8 pbVal) GetFECInner;
			}
		}
		[CRepr]
		public struct IDvbCableDeliverySystemDescriptor : IUnknown
		{
			public const new Guid IID = .(0xdfb98e36, 0x9e1a, 0x4862, 0x99, 0x46, 0x99, 0x3a, 0x4e, 0x59, 0x01, 0x7b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetFrequency(out uint32 pdwVal) mut => VT.GetFrequency(ref this, out pdwVal);
			public HRESULT GetFECOuter(out uint8 pbVal) mut => VT.GetFECOuter(ref this, out pbVal);
			public HRESULT GetModulation(out uint8 pbVal) mut => VT.GetModulation(ref this, out pbVal);
			public HRESULT GetSymbolRate(out uint32 pdwVal) mut => VT.GetSymbolRate(ref this, out pdwVal);
			public HRESULT GetFECInner(out uint8 pbVal) mut => VT.GetFECInner(ref this, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint32 pdwVal) GetFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint8 pbVal) GetFECOuter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint8 pbVal) GetModulation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint32 pdwVal) GetSymbolRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbCableDeliverySystemDescriptor self, out uint8 pbVal) GetFECInner;
			}
		}
		[CRepr]
		public struct IDvbTerrestrialDeliverySystemDescriptor : IUnknown
		{
			public const new Guid IID = .(0xed7e1b91, 0xd12e, 0x420c, 0xb4, 0x1d, 0xa4, 0x9d, 0x84, 0xfe, 0x18, 0x23);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCentreFrequency(out uint32 pdwVal) mut => VT.GetCentreFrequency(ref this, out pdwVal);
			public HRESULT GetBandwidth(out uint8 pbVal) mut => VT.GetBandwidth(ref this, out pbVal);
			public HRESULT GetConstellation(out uint8 pbVal) mut => VT.GetConstellation(ref this, out pbVal);
			public HRESULT GetHierarchyInformation(out uint8 pbVal) mut => VT.GetHierarchyInformation(ref this, out pbVal);
			public HRESULT GetCodeRateHPStream(out uint8 pbVal) mut => VT.GetCodeRateHPStream(ref this, out pbVal);
			public HRESULT GetCodeRateLPStream(out uint8 pbVal) mut => VT.GetCodeRateLPStream(ref this, out pbVal);
			public HRESULT GetGuardInterval(out uint8 pbVal) mut => VT.GetGuardInterval(ref this, out pbVal);
			public HRESULT GetTransmissionMode(out uint8 pbVal) mut => VT.GetTransmissionMode(ref this, out pbVal);
			public HRESULT GetOtherFrequencyFlag(out uint8 pbVal) mut => VT.GetOtherFrequencyFlag(ref this, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint32 pdwVal) GetCentreFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetBandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetConstellation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetHierarchyInformation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetCodeRateHPStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetCodeRateLPStream;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetGuardInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetTransmissionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetOtherFrequencyFlag;
			}
		}
		[CRepr]
		public struct IDvbTerrestrial2DeliverySystemDescriptor : IUnknown
		{
			public const new Guid IID = .(0x20ee9be9, 0xcd57, 0x49ab, 0x8f, 0x6e, 0x1d, 0x07, 0xae, 0xb8, 0xe4, 0x82);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetTagExtension(out uint8 pbVal) mut => VT.GetTagExtension(ref this, out pbVal);
			public HRESULT GetCentreFrequency(out uint32 pdwVal) mut => VT.GetCentreFrequency(ref this, out pdwVal);
			public HRESULT GetPLPId(out uint8 pbVal) mut => VT.GetPLPId(ref this, out pbVal);
			public HRESULT GetT2SystemId(out uint16 pwVal) mut => VT.GetT2SystemId(ref this, out pwVal);
			public HRESULT GetMultipleInputMode(out uint8 pbVal) mut => VT.GetMultipleInputMode(ref this, out pbVal);
			public HRESULT GetBandwidth(out uint8 pbVal) mut => VT.GetBandwidth(ref this, out pbVal);
			public HRESULT GetGuardInterval(out uint8 pbVal) mut => VT.GetGuardInterval(ref this, out pbVal);
			public HRESULT GetTransmissionMode(out uint8 pbVal) mut => VT.GetTransmissionMode(ref this, out pbVal);
			public HRESULT GetCellId(out uint16 pwVal) mut => VT.GetCellId(ref this, out pwVal);
			public HRESULT GetOtherFrequencyFlag(out uint8 pbVal) mut => VT.GetOtherFrequencyFlag(ref this, out pbVal);
			public HRESULT GetTFSFlag(out uint8 pbVal) mut => VT.GetTFSFlag(ref this, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetTagExtension;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint32 pdwVal) GetCentreFrequency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetPLPId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint16 pwVal) GetT2SystemId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetMultipleInputMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetBandwidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetGuardInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetTransmissionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint16 pwVal) GetCellId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetOtherFrequencyFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTerrestrial2DeliverySystemDescriptor self, out uint8 pbVal) GetTFSFlag;
			}
		}
		[CRepr]
		public struct IDvbFrequencyListDescriptor : IUnknown
		{
			public const new Guid IID = .(0x1cadb613, 0xe1dd, 0x4512, 0xaf, 0xa8, 0xbb, 0x7a, 0x00, 0x7e, 0xf8, 0xb1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCodingType(out uint8 pbVal) mut => VT.GetCodingType(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordCentreFrequency(uint8 bRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCentreFrequency(ref this, bRecordIndex, out pdwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbFrequencyListDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbFrequencyListDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbFrequencyListDescriptor self, out uint8 pbVal) GetCodingType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbFrequencyListDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbFrequencyListDescriptor self, uint8 bRecordIndex, out uint32 pdwVal) GetRecordCentreFrequency;
			}
		}
		[CRepr]
		public struct IDvbPrivateDataSpecifierDescriptor : IUnknown
		{
			public const new Guid IID = .(0x5660a019, 0xe75a, 0x4b82, 0x9b, 0x4c, 0xed, 0x22, 0x56, 0xd1, 0x65, 0xa2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetPrivateDataSpecifier(out uint32 pdwVal) mut => VT.GetPrivateDataSpecifier(ref this, out pdwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbPrivateDataSpecifierDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbPrivateDataSpecifierDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbPrivateDataSpecifierDescriptor self, out uint32 pdwVal) GetPrivateDataSpecifier;
			}
		}
		[CRepr]
		public struct IDvbLogicalChannelDescriptor : IUnknown
		{
			public const new Guid IID = .(0xcf1edaff, 0x3ffd, 0x4cf7, 0x82, 0x01, 0x35, 0x75, 0x6a, 0xcb, 0xf8, 0x5f);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordServiceId(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordServiceId(ref this, bRecordIndex, out pwVal);
			public HRESULT GetRecordLogicalChannelNumber(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordLogicalChannelNumber(ref this, bRecordIndex, out pwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannelDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannelDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannelDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannelDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannelDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetRecordLogicalChannelNumber;
			}
		}
		[CRepr]
		public struct IDvbLogicalChannelDescriptor2 : IDvbLogicalChannelDescriptor
		{
			public const new Guid IID = .(0x43aca974, 0x4be8, 0x4b98, 0xbc, 0x17, 0x9e, 0xaf, 0xd7, 0x88, 0xb1, 0xd7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRecordLogicalChannelAndVisibility(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordLogicalChannelAndVisibility(ref this, bRecordIndex, out pwVal);

			[CRepr]
			public struct VTable : IDvbLogicalChannelDescriptor.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannelDescriptor2 self, uint8 bRecordIndex, out uint16 pwVal) GetRecordLogicalChannelAndVisibility;
			}
		}
		[CRepr]
		public struct IDvbLogicalChannel2Descriptor : IDvbLogicalChannelDescriptor2
		{
			public const new Guid IID = .(0xf69c3747, 0x8a30, 0x4980, 0x99, 0x8c, 0x01, 0xfe, 0x7f, 0x0b, 0xa3, 0x5a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCountOfLists(out uint8 pbVal) mut => VT.GetCountOfLists(ref this, out pbVal);
			public HRESULT GetListId(uint8 bListIndex, out uint8 pbVal) mut => VT.GetListId(ref this, bListIndex, out pbVal);
			public HRESULT GetListNameW(uint8 bListIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetListNameW(ref this, bListIndex, convMode, out pbstrName);
			public HRESULT GetListCountryCode(uint8 bListIndex, uint8* pszCode) mut => VT.GetListCountryCode(ref this, bListIndex, pszCode);
			public HRESULT GetListCountOfRecords(uint8 bChannelListIndex, out uint8 pbVal) mut => VT.GetListCountOfRecords(ref this, bChannelListIndex, out pbVal);
			public HRESULT GetListRecordServiceId(uint8 bListIndex, uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetListRecordServiceId(ref this, bListIndex, bRecordIndex, out pwVal);
			public HRESULT GetListRecordLogicalChannelNumber(uint8 bListIndex, uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetListRecordLogicalChannelNumber(ref this, bListIndex, bRecordIndex, out pwVal);
			public HRESULT GetListRecordLogicalChannelAndVisibility(uint8 bListIndex, uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetListRecordLogicalChannelAndVisibility(ref this, bListIndex, bRecordIndex, out pwVal);

			[CRepr]
			public struct VTable : IDvbLogicalChannelDescriptor2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, out uint8 pbVal) GetCountOfLists;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bListIndex, out uint8 pbVal) GetListId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bListIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetListNameW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bListIndex, uint8* pszCode) GetListCountryCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bChannelListIndex, out uint8 pbVal) GetListCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bListIndex, uint8 bRecordIndex, out uint16 pwVal) GetListRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bListIndex, uint8 bRecordIndex, out uint16 pwVal) GetListRecordLogicalChannelNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLogicalChannel2Descriptor self, uint8 bListIndex, uint8 bRecordIndex, out uint16 pwVal) GetListRecordLogicalChannelAndVisibility;
			}
		}
		[CRepr]
		public struct IDvbHDSimulcastLogicalChannelDescriptor : IDvbLogicalChannelDescriptor2
		{
			public const new Guid IID = .(0x1ea8b738, 0xa307, 0x4680, 0x9e, 0x26, 0xd0, 0xa9, 0x08, 0xc8, 0x24, 0xf4);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDvbLogicalChannelDescriptor2.VTable {}
		}
		[CRepr]
		public struct IDvbDataBroadcastIDDescriptor : IUnknown
		{
			public const new Guid IID = .(0x5f26f518, 0x65c8, 0x4048, 0x91, 0xf2, 0x92, 0x90, 0xf5, 0x9f, 0x7b, 0x90);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetDataBroadcastID(out uint16 pwVal) mut => VT.GetDataBroadcastID(ref this, out pwVal);
			public HRESULT GetIDSelectorBytes(out uint8 pbLen, out uint8 pbVal) mut => VT.GetIDSelectorBytes(ref this, out pbLen, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastIDDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastIDDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastIDDescriptor self, out uint16 pwVal) GetDataBroadcastID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastIDDescriptor self, out uint8 pbLen, out uint8 pbVal) GetIDSelectorBytes;
			}
		}
		[CRepr]
		public struct IDvbDataBroadcastDescriptor : IUnknown
		{
			public const new Guid IID = .(0xd1ebc1d6, 0x8b60, 0x4c20, 0x9c, 0xaf, 0xe5, 0x93, 0x82, 0xe7, 0xc4, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetDataBroadcastID(out uint16 pwVal) mut => VT.GetDataBroadcastID(ref this, out pwVal);
			public HRESULT GetComponentTag(out uint8 pbVal) mut => VT.GetComponentTag(ref this, out pbVal);
			public HRESULT GetSelectorLength(out uint8 pbVal) mut => VT.GetSelectorLength(ref this, out pbVal);
			public HRESULT GetSelectorBytes(out uint8 pbLen, out uint8 pbVal) mut => VT.GetSelectorBytes(ref this, out pbLen, out pbVal);
			public HRESULT GetLangID(out uint32 pulVal) mut => VT.GetLangID(ref this, out pulVal);
			public HRESULT GetTextLength(out uint8 pbVal) mut => VT.GetTextLength(ref this, out pbVal);
			public HRESULT GetText(out uint8 pbLen, out uint8 pbVal) mut => VT.GetText(ref this, out pbLen, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint16 pwVal) GetDataBroadcastID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbVal) GetComponentTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbVal) GetSelectorLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbLen, out uint8 pbVal) GetSelectorBytes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint32 pulVal) GetLangID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbVal) GetTextLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbDataBroadcastDescriptor self, out uint8 pbLen, out uint8 pbVal) GetText;
			}
		}
		[CRepr]
		public struct IDvbLinkageDescriptor : IUnknown
		{
			public const new Guid IID = .(0x1cdf8b31, 0x994a, 0x46fc, 0xac, 0xfd, 0x6a, 0x6b, 0xe8, 0x93, 0x4d, 0xd5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetTSId(out uint16 pwVal) mut => VT.GetTSId(ref this, out pwVal);
			public HRESULT GetONId(out uint16 pwVal) mut => VT.GetONId(ref this, out pwVal);
			public HRESULT GetServiceId(out uint16 pwVal) mut => VT.GetServiceId(ref this, out pwVal);
			public HRESULT GetLinkageType(out uint8 pbVal) mut => VT.GetLinkageType(ref this, out pbVal);
			public HRESULT GetPrivateDataLength(out uint8 pbVal) mut => VT.GetPrivateDataLength(ref this, out pbVal);
			public HRESULT GetPrivateData(out uint8 pbLen, out uint8 pbData) mut => VT.GetPrivateData(ref this, out pbLen, out pbData);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint16 pwVal) GetTSId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint16 pwVal) GetONId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint16 pwVal) GetServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint8 pbVal) GetLinkageType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint8 pbVal) GetPrivateDataLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbLinkageDescriptor self, out uint8 pbLen, out uint8 pbData) GetPrivateData;
			}
		}
		[CRepr]
		public struct IDvbTeletextDescriptor : IUnknown
		{
			public const new Guid IID = .(0x9cd29d47, 0x69c6, 0x4f92, 0x98, 0xa9, 0x21, 0x0a, 0xf1, 0xb7, 0x30, 0x3a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordLangId(uint8 bRecordIndex, out uint32 pulVal) mut => VT.GetRecordLangId(ref this, bRecordIndex, out pulVal);
			public HRESULT GetRecordTeletextType(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordTeletextType(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordMagazineNumber(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordMagazineNumber(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordPageNumber(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordPageNumber(ref this, bRecordIndex, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, uint8 bRecordIndex, out uint32 pulVal) GetRecordLangId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordTeletextType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordMagazineNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbTeletextDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordPageNumber;
			}
		}
		[CRepr]
		public struct IDvbSubtitlingDescriptor : IUnknown
		{
			public const new Guid IID = .(0x9b25fe1d, 0xfa23, 0x4e50, 0x97, 0x84, 0x6d, 0xf8, 0xb2, 0x6f, 0x8a, 0x49);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordLangId(uint8 bRecordIndex, out uint32 pulVal) mut => VT.GetRecordLangId(ref this, bRecordIndex, out pulVal);
			public HRESULT GetRecordSubtitlingType(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordSubtitlingType(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordCompositionPageID(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordCompositionPageID(ref this, bRecordIndex, out pwVal);
			public HRESULT GetRecordAncillaryPageID(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordAncillaryPageID(ref this, bRecordIndex, out pwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, uint8 bRecordIndex, out uint32 pulVal) GetRecordLangId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordSubtitlingType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetRecordCompositionPageID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbSubtitlingDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetRecordAncillaryPageID;
			}
		}
		[CRepr]
		public struct IDvbServiceDescriptor : IUnknown
		{
			public const new Guid IID = .(0xf9c7fbcf, 0xe2d6, 0x464d, 0xb3, 0x2d, 0x2e, 0xf5, 0x26, 0xe4, 0x92, 0x90);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetServiceType(out uint8 pbVal) mut => VT.GetServiceType(ref this, out pbVal);
			public HRESULT GetServiceProviderName(out uint8* pszName) mut => VT.GetServiceProviderName(ref this, out pszName);
			public HRESULT GetServiceProviderNameW(out BSTR pbstrName) mut => VT.GetServiceProviderNameW(ref this, out pbstrName);
			public HRESULT GetServiceName(out uint8* pszName) mut => VT.GetServiceName(ref this, out pszName);
			public HRESULT GetProcessedServiceName(out BSTR pbstrName) mut => VT.GetProcessedServiceName(ref this, out pbstrName);
			public HRESULT GetServiceNameEmphasized(out BSTR pbstrName) mut => VT.GetServiceNameEmphasized(ref this, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out uint8 pbVal) GetServiceType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out uint8* pszName) GetServiceProviderName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out BSTR pbstrName) GetServiceProviderNameW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out uint8* pszName) GetServiceName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out BSTR pbstrName) GetProcessedServiceName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor self, out BSTR pbstrName) GetServiceNameEmphasized;
			}
		}
		[CRepr]
		public struct IDvbServiceDescriptor2 : IDvbServiceDescriptor
		{
			public const new Guid IID = .(0xd6c76506, 0x85ab, 0x487c, 0x9b, 0x2b, 0x36, 0x41, 0x65, 0x11, 0xe4, 0xa2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetServiceProviderNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetServiceProviderNameW(ref this, convMode, out pbstrName);
			public HRESULT GetServiceNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetServiceNameW(ref this, convMode, out pbstrName);

			[CRepr]
			public struct VTable : IDvbServiceDescriptor.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor2 self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetServiceProviderNameW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceDescriptor2 self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetServiceNameW;
			}
		}
		[CRepr]
		public struct IDvbServiceListDescriptor : IUnknown
		{
			public const new Guid IID = .(0x05db0d8f, 0x6008, 0x491a, 0xac, 0xd3, 0x70, 0x90, 0x95, 0x27, 0x07, 0xd0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordServiceId(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetRecordServiceId(ref this, bRecordIndex, out pwVal);
			public HRESULT GetRecordServiceType(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordServiceType(ref this, bRecordIndex, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceListDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceListDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceListDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceListDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetRecordServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbServiceListDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordServiceType;
			}
		}
		[CRepr]
		public struct IDvbMultilingualServiceNameDescriptor : IUnknown
		{
			public const new Guid IID = .(0x2d80433b, 0xb32c, 0x47ef, 0x98, 0x7f, 0xe7, 0x8e, 0xbb, 0x77, 0x3e, 0x34);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordLangId(uint8 bRecordIndex, out uint32 ulVal) mut => VT.GetRecordLangId(ref this, bRecordIndex, out ulVal);
			public HRESULT GetRecordServiceProviderNameW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetRecordServiceProviderNameW(ref this, bRecordIndex, convMode, out pbstrName);
			public HRESULT GetRecordServiceNameW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetRecordServiceNameW(ref this, bRecordIndex, convMode, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbMultilingualServiceNameDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbMultilingualServiceNameDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbMultilingualServiceNameDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbMultilingualServiceNameDescriptor self, uint8 bRecordIndex, out uint32 ulVal) GetRecordLangId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbMultilingualServiceNameDescriptor self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetRecordServiceProviderNameW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbMultilingualServiceNameDescriptor self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetRecordServiceNameW;
			}
		}
		[CRepr]
		public struct IDvbNetworkNameDescriptor : IUnknown
		{
			public const new Guid IID = .(0x5b2a80cf, 0x35b9, 0x446c, 0xb3, 0xe4, 0x04, 0x8b, 0x76, 0x1d, 0xbc, 0x51);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetNetworkName(out uint8* pszName) mut => VT.GetNetworkName(ref this, out pszName);
			public HRESULT GetNetworkNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetNetworkNameW(ref this, convMode, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbNetworkNameDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbNetworkNameDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbNetworkNameDescriptor self, out uint8* pszName) GetNetworkName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbNetworkNameDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetNetworkNameW;
			}
		}
		[CRepr]
		public struct IDvbShortEventDescriptor : IUnknown
		{
			public const new Guid IID = .(0xb170be92, 0x5b75, 0x458e, 0x9c, 0x6e, 0xb0, 0x00, 0x82, 0x31, 0x49, 0x1a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.GetLanguageCode(ref this, pszCode);
			public HRESULT GetEventNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetEventNameW(ref this, convMode, out pbstrName);
			public HRESULT GetTextW(DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetTextW(ref this, convMode, out pbstrText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbShortEventDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbShortEventDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbShortEventDescriptor self, uint8* pszCode) GetLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbShortEventDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetEventNameW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbShortEventDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetTextW;
			}
		}
		[CRepr]
		public struct IDvbExtendedEventDescriptor : IUnknown
		{
			public const new Guid IID = .(0xc9b22eca, 0x85f4, 0x499f, 0xb1, 0xdb, 0xef, 0xa9, 0x3a, 0x91, 0xee, 0x57);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetDescriptorNumber(out uint8 pbVal) mut => VT.GetDescriptorNumber(ref this, out pbVal);
			public HRESULT GetLastDescriptorNumber(out uint8 pbVal) mut => VT.GetLastDescriptorNumber(ref this, out pbVal);
			public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.GetLanguageCode(ref this, pszCode);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordItemW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrDesc, out BSTR pbstrItem) mut => VT.GetRecordItemW(ref this, bRecordIndex, convMode, out pbstrDesc, out pbstrItem);
			public HRESULT GetConcatenatedItemW(ref IDvbExtendedEventDescriptor pFollowingDescriptor, DVB_STRCONV_MODE convMode, out BSTR pbstrDesc, out BSTR pbstrItem) mut => VT.GetConcatenatedItemW(ref this, ref pFollowingDescriptor, convMode, out pbstrDesc, out pbstrItem);
			public HRESULT GetTextW(DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetTextW(ref this, convMode, out pbstrText);
			public HRESULT GetConcatenatedTextW(ref IDvbExtendedEventDescriptor FollowingDescriptor, DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetConcatenatedTextW(ref this, ref FollowingDescriptor, convMode, out pbstrText);
			public HRESULT GetRecordItemRawBytes(uint8 bRecordIndex, out uint8* ppbRawItem, out uint8 pbItemLength) mut => VT.GetRecordItemRawBytes(ref this, bRecordIndex, out ppbRawItem, out pbItemLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, out uint8 pbVal) GetDescriptorNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, out uint8 pbVal) GetLastDescriptorNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, uint8* pszCode) GetLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrDesc, out BSTR pbstrItem) GetRecordItemW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, ref IDvbExtendedEventDescriptor pFollowingDescriptor, DVB_STRCONV_MODE convMode, out BSTR pbstrDesc, out BSTR pbstrItem) GetConcatenatedItemW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetTextW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, ref IDvbExtendedEventDescriptor FollowingDescriptor, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetConcatenatedTextW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbExtendedEventDescriptor self, uint8 bRecordIndex, out uint8* ppbRawItem, out uint8 pbItemLength) GetRecordItemRawBytes;
			}
		}
		[CRepr]
		public struct IDvbComponentDescriptor : IUnknown
		{
			public const new Guid IID = .(0x91e405cf, 0x80e7, 0x457f, 0x90, 0x96, 0x1b, 0x9d, 0x1c, 0xe3, 0x21, 0x41);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetStreamContent(out uint8 pbVal) mut => VT.GetStreamContent(ref this, out pbVal);
			public HRESULT GetComponentType(out uint8 pbVal) mut => VT.GetComponentType(ref this, out pbVal);
			public HRESULT GetComponentTag(out uint8 pbVal) mut => VT.GetComponentTag(ref this, out pbVal);
			public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.GetLanguageCode(ref this, pszCode);
			public HRESULT GetTextW(DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetTextW(ref this, convMode, out pbstrText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, out uint8 pbVal) GetStreamContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, out uint8 pbVal) GetComponentType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, out uint8 pbVal) GetComponentTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, uint8* pszCode) GetLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbComponentDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetTextW;
			}
		}
		[CRepr]
		public struct IDvbContentDescriptor : IUnknown
		{
			public const new Guid IID = .(0x2e883881, 0xa467, 0x412a, 0x9d, 0x63, 0x6f, 0x2b, 0x6d, 0xa0, 0x5b, 0xf0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordContentNibbles(uint8 bRecordIndex, out uint8 pbValLevel1, out uint8 pbValLevel2) mut => VT.GetRecordContentNibbles(ref this, bRecordIndex, out pbValLevel1, out pbValLevel2);
			public HRESULT GetRecordUserNibbles(uint8 bRecordIndex, out uint8 pbVal1, out uint8 pbVal2) mut => VT.GetRecordUserNibbles(ref this, bRecordIndex, out pbVal1, out pbVal2);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentDescriptor self, uint8 bRecordIndex, out uint8 pbValLevel1, out uint8 pbValLevel2) GetRecordContentNibbles;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbContentDescriptor self, uint8 bRecordIndex, out uint8 pbVal1, out uint8 pbVal2) GetRecordUserNibbles;
			}
		}
		[CRepr]
		public struct IDvbParentalRatingDescriptor : IUnknown
		{
			public const new Guid IID = .(0x3ad9dde1, 0xfb1b, 0x4186, 0x93, 0x7f, 0x22, 0xe6, 0xb5, 0xa7, 0x2a, 0x10);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordRating(uint8 bRecordIndex, uint8* pszCountryCode, out uint8 pbVal) mut => VT.GetRecordRating(ref this, bRecordIndex, pszCountryCode, out pbVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbParentalRatingDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbParentalRatingDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbParentalRatingDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDvbParentalRatingDescriptor self, uint8 bRecordIndex, uint8* pszCountryCode, out uint8 pbVal) GetRecordRating;
			}
		}
		[CRepr]
		public struct IIsdbTerrestrialDeliverySystemDescriptor : IUnknown
		{
			public const new Guid IID = .(0x39fae0a6, 0xd151, 0x44dd, 0xa2, 0x8a, 0x76, 0x5d, 0xe5, 0x99, 0x16, 0x70);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetAreaCode(out uint16 pwVal) mut => VT.GetAreaCode(ref this, out pwVal);
			public HRESULT GetGuardInterval(out uint8 pbVal) mut => VT.GetGuardInterval(ref this, out pbVal);
			public HRESULT GetTransmissionMode(out uint8 pbVal) mut => VT.GetTransmissionMode(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordFrequency(uint8 bRecordIndex, out uint32 pdwVal) mut => VT.GetRecordFrequency(ref this, bRecordIndex, out pdwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, out uint16 pwVal) GetAreaCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetGuardInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetTransmissionMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTerrestrialDeliverySystemDescriptor self, uint8 bRecordIndex, out uint32 pdwVal) GetRecordFrequency;
			}
		}
		[CRepr]
		public struct IIsdbTSInformationDescriptor : IUnknown
		{
			public const new Guid IID = .(0xd7ad183e, 0x38f5, 0x4210, 0xb5, 0x5f, 0xec, 0x8d, 0x60, 0x1b, 0xbd, 0x47);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetRemoteControlKeyId(out uint8 pbVal) mut => VT.GetRemoteControlKeyId(ref this, out pbVal);
			public HRESULT GetTSNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetTSNameW(ref this, convMode, out pbstrName);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordTransmissionTypeInfo(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordTransmissionTypeInfo(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordNumberOfServices(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordNumberOfServices(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordServiceIdByIndex(uint8 bRecordIndex, uint8 bServiceIndex, out uint16 pdwVal) mut => VT.GetRecordServiceIdByIndex(ref this, bRecordIndex, bServiceIndex, out pdwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, out uint8 pbVal) GetRemoteControlKeyId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetTSNameW;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordTransmissionTypeInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordNumberOfServices;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbTSInformationDescriptor self, uint8 bRecordIndex, uint8 bServiceIndex, out uint16 pdwVal) GetRecordServiceIdByIndex;
			}
		}
		[CRepr]
		public struct IIsdbDigitalCopyControlDescriptor : IUnknown
		{
			public const new Guid IID = .(0x1a28417e, 0x266a, 0x4bb8, 0xa4, 0xbd, 0xd7, 0x82, 0xbc, 0xfb, 0x81, 0x61);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCopyControl(out uint8 pbDigitalRecordingControlData, out uint8 pbCopyControlType, out uint8 pbAPSControlData, out uint8 pbMaximumBitrate) mut => VT.GetCopyControl(ref this, out pbDigitalRecordingControlData, out pbCopyControlType, out pbAPSControlData, out pbMaximumBitrate);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordCopyControl(uint8 bRecordIndex, out uint8 pbComponentTag, out uint8 pbDigitalRecordingControlData, out uint8 pbCopyControlType, out uint8 pbAPSControlData, out uint8 pbMaximumBitrate) mut => VT.GetRecordCopyControl(ref this, bRecordIndex, out pbComponentTag, out pbDigitalRecordingControlData, out pbCopyControlType, out pbAPSControlData, out pbMaximumBitrate);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDigitalCopyControlDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDigitalCopyControlDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDigitalCopyControlDescriptor self, out uint8 pbDigitalRecordingControlData, out uint8 pbCopyControlType, out uint8 pbAPSControlData, out uint8 pbMaximumBitrate) GetCopyControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDigitalCopyControlDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDigitalCopyControlDescriptor self, uint8 bRecordIndex, out uint8 pbComponentTag, out uint8 pbDigitalRecordingControlData, out uint8 pbCopyControlType, out uint8 pbAPSControlData, out uint8 pbMaximumBitrate) GetRecordCopyControl;
			}
		}
		[CRepr]
		public struct IIsdbAudioComponentDescriptor : IUnknown
		{
			public const new Guid IID = .(0x679d2002, 0x2425, 0x4be4, 0xa4, 0xc7, 0xd6, 0x63, 0x2a, 0x57, 0x4f, 0x4d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetStreamContent(out uint8 pbVal) mut => VT.GetStreamContent(ref this, out pbVal);
			public HRESULT GetComponentType(out uint8 pbVal) mut => VT.GetComponentType(ref this, out pbVal);
			public HRESULT GetComponentTag(out uint8 pbVal) mut => VT.GetComponentTag(ref this, out pbVal);
			public HRESULT GetStreamType(out uint8 pbVal) mut => VT.GetStreamType(ref this, out pbVal);
			public HRESULT GetSimulcastGroupTag(out uint8 pbVal) mut => VT.GetSimulcastGroupTag(ref this, out pbVal);
			public HRESULT GetESMultiLingualFlag(out BOOL pfVal) mut => VT.GetESMultiLingualFlag(ref this, out pfVal);
			public HRESULT GetMainComponentFlag(out BOOL pfVal) mut => VT.GetMainComponentFlag(ref this, out pfVal);
			public HRESULT GetQualityIndicator(out uint8 pbVal) mut => VT.GetQualityIndicator(ref this, out pbVal);
			public HRESULT GetSamplingRate(out uint8 pbVal) mut => VT.GetSamplingRate(ref this, out pbVal);
			public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.GetLanguageCode(ref this, pszCode);
			public HRESULT GetLanguageCode2(uint8* pszCode) mut => VT.GetLanguageCode2(ref this, pszCode);
			public HRESULT GetTextW(DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetTextW(ref this, convMode, out pbstrText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetStreamContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetComponentType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetComponentTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetStreamType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetSimulcastGroupTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out BOOL pfVal) GetESMultiLingualFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out BOOL pfVal) GetMainComponentFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetQualityIndicator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, out uint8 pbVal) GetSamplingRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, uint8* pszCode) GetLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, uint8* pszCode) GetLanguageCode2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbAudioComponentDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetTextW;
			}
		}
		[CRepr]
		public struct IIsdbDataContentDescriptor : IUnknown
		{
			public const new Guid IID = .(0xa428100a, 0xe646, 0x4bd6, 0xaa, 0x14, 0x60, 0x87, 0xbd, 0xc0, 0x8c, 0xd5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetDataComponentId(out uint16 pwVal) mut => VT.GetDataComponentId(ref this, out pwVal);
			public HRESULT GetEntryComponent(out uint8 pbVal) mut => VT.GetEntryComponent(ref this, out pbVal);
			public HRESULT GetSelectorLength(out uint8 pbVal) mut => VT.GetSelectorLength(ref this, out pbVal);
			public HRESULT GetSelectorBytes(uint8 bBufLength, out uint8 pbBuf) mut => VT.GetSelectorBytes(ref this, bBufLength, out pbBuf);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordComponentRef(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordComponentRef(ref this, bRecordIndex, out pbVal);
			public HRESULT GetLanguageCode(uint8* pszCode) mut => VT.GetLanguageCode(ref this, pszCode);
			public HRESULT GetTextW(DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetTextW(ref this, convMode, out pbstrText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, out uint16 pwVal) GetDataComponentId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, out uint8 pbVal) GetEntryComponent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, out uint8 pbVal) GetSelectorLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, uint8 bBufLength, out uint8 pbBuf) GetSelectorBytes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordComponentRef;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, uint8* pszCode) GetLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDataContentDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetTextW;
			}
		}
		[CRepr]
		public struct IIsdbCAContractInformationDescriptor : IUnknown
		{
			public const new Guid IID = .(0x08e18b25, 0xa28f, 0x4e92, 0x82, 0x1e, 0x4f, 0xce, 0xd5, 0xcc, 0x22, 0x91);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCASystemId(out uint16 pwVal) mut => VT.GetCASystemId(ref this, out pwVal);
			public HRESULT GetCAUnitId(out uint8 pbVal) mut => VT.GetCAUnitId(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordComponentTag(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordComponentTag(ref this, bRecordIndex, out pbVal);
			public HRESULT GetContractVerificationInfoLength(out uint8 pbVal) mut => VT.GetContractVerificationInfoLength(ref this, out pbVal);
			public HRESULT GetContractVerificationInfo(uint8 bBufLength, out uint8 pbBuf) mut => VT.GetContractVerificationInfo(ref this, bBufLength, out pbBuf);
			public HRESULT GetFeeNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetFeeNameW(ref this, convMode, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, out uint16 pwVal) GetCASystemId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, out uint8 pbVal) GetCAUnitId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordComponentTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, out uint8 pbVal) GetContractVerificationInfoLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, uint8 bBufLength, out uint8 pbBuf) GetContractVerificationInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAContractInformationDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetFeeNameW;
			}
		}
		[CRepr]
		public struct IIsdbEventGroupDescriptor : IUnknown
		{
			public const new Guid IID = .(0x94b06780, 0x2e2a, 0x44dc, 0xa9, 0x66, 0xcc, 0x56, 0xfd, 0xab, 0xc6, 0xc2);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetGroupType(out uint8 pbVal) mut => VT.GetGroupType(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordEvent(uint8 bRecordIndex, out uint16 pwServiceId, out uint16 pwEventId) mut => VT.GetRecordEvent(ref this, bRecordIndex, out pwServiceId, out pwEventId);
			public HRESULT GetCountOfRefRecords(out uint8 pbVal) mut => VT.GetCountOfRefRecords(ref this, out pbVal);
			public HRESULT GetRefRecordEvent(uint8 bRecordIndex, out uint16 pwOriginalNetworkId, out uint16 pwTransportStreamId, out uint16 pwServiceId, out uint16 pwEventId) mut => VT.GetRefRecordEvent(ref this, bRecordIndex, out pwOriginalNetworkId, out pwTransportStreamId, out pwServiceId, out pwEventId);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, out uint8 pbVal) GetGroupType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, uint8 bRecordIndex, out uint16 pwServiceId, out uint16 pwEventId) GetRecordEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, out uint8 pbVal) GetCountOfRefRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEventGroupDescriptor self, uint8 bRecordIndex, out uint16 pwOriginalNetworkId, out uint16 pwTransportStreamId, out uint16 pwServiceId, out uint16 pwEventId) GetRefRecordEvent;
			}
		}
		[CRepr]
		public struct IIsdbComponentGroupDescriptor : IUnknown
		{
			public const new Guid IID = .(0xa494f17f, 0xc592, 0x47d8, 0x89, 0x43, 0x64, 0xc9, 0xa3, 0x4b, 0xe7, 0xb9);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetComponentGroupType(out uint8 pbVal) mut => VT.GetComponentGroupType(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetRecordGroupId(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordGroupId(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordNumberOfCAUnit(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordNumberOfCAUnit(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordCAUnitCAUnitId(uint8 bRecordIndex, uint8 bCAUnitIndex, out uint8 pbVal) mut => VT.GetRecordCAUnitCAUnitId(ref this, bRecordIndex, bCAUnitIndex, out pbVal);
			public HRESULT GetRecordCAUnitNumberOfComponents(uint8 bRecordIndex, uint8 bCAUnitIndex, out uint8 pbVal) mut => VT.GetRecordCAUnitNumberOfComponents(ref this, bRecordIndex, bCAUnitIndex, out pbVal);
			public HRESULT GetRecordCAUnitComponentTag(uint8 bRecordIndex, uint8 bCAUnitIndex, uint8 bComponentIndex, out uint8 pbVal) mut => VT.GetRecordCAUnitComponentTag(ref this, bRecordIndex, bCAUnitIndex, bComponentIndex, out pbVal);
			public HRESULT GetRecordTotalBitRate(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetRecordTotalBitRate(ref this, bRecordIndex, out pbVal);
			public HRESULT GetRecordTextW(uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrText) mut => VT.GetRecordTextW(ref this, bRecordIndex, convMode, out pbstrText);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, out uint8 pbVal) GetComponentGroupType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordGroupId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordNumberOfCAUnit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, uint8 bCAUnitIndex, out uint8 pbVal) GetRecordCAUnitCAUnitId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, uint8 bCAUnitIndex, out uint8 pbVal) GetRecordCAUnitNumberOfComponents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, uint8 bCAUnitIndex, uint8 bComponentIndex, out uint8 pbVal) GetRecordCAUnitComponentTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetRecordTotalBitRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbComponentGroupDescriptor self, uint8 bRecordIndex, DVB_STRCONV_MODE convMode, out BSTR pbstrText) GetRecordTextW;
			}
		}
		[CRepr]
		public struct IIsdbSeriesDescriptor : IUnknown
		{
			public const new Guid IID = .(0x07ef6370, 0x1660, 0x4f26, 0x87, 0xfc, 0x61, 0x4a, 0xda, 0xb2, 0x4b, 0x11);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetSeriesId(out uint16 pwVal) mut => VT.GetSeriesId(ref this, out pwVal);
			public HRESULT GetRepeatLabel(out uint8 pbVal) mut => VT.GetRepeatLabel(ref this, out pbVal);
			public HRESULT GetProgramPattern(out uint8 pbVal) mut => VT.GetProgramPattern(ref this, out pbVal);
			public HRESULT GetExpireDate(out BOOL pfValid, out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetExpireDate(ref this, out pfValid, out pmdtVal);
			public HRESULT GetEpisodeNumber(out uint16 pwVal) mut => VT.GetEpisodeNumber(ref this, out pwVal);
			public HRESULT GetLastEpisodeNumber(out uint16 pwVal) mut => VT.GetLastEpisodeNumber(ref this, out pwVal);
			public HRESULT GetSeriesNameW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetSeriesNameW(ref this, convMode, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint16 pwVal) GetSeriesId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint8 pbVal) GetRepeatLabel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint8 pbVal) GetProgramPattern;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out BOOL pfValid, out MPEG_DATE_AND_TIME pmdtVal) GetExpireDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint16 pwVal) GetEpisodeNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, out uint16 pwVal) GetLastEpisodeNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSeriesDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetSeriesNameW;
			}
		}
		[CRepr]
		public struct IIsdbDownloadContentDescriptor : IUnknown
		{
			public const new Guid IID = .(0x5298661e, 0xcb88, 0x4f5f, 0xa1, 0xde, 0x5f, 0x44, 0x0c, 0x18, 0x5b, 0x92);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT ComGetFlags(out BOOL pfReboot, out BOOL pfAddOn, out BOOL pfCompatibility, out BOOL pfModuleInfo, out BOOL pfTextInfo) mut => VT.ComGetFlags(ref this, out pfReboot, out pfAddOn, out pfCompatibility, out pfModuleInfo, out pfTextInfo);
			public HRESULT GetComponentSize(out uint32 pdwVal) mut => VT.GetComponentSize(ref this, out pdwVal);
			public HRESULT GetDownloadId(out uint32 pdwVal) mut => VT.GetDownloadId(ref this, out pdwVal);
			public HRESULT GetTimeOutValueDII(out uint32 pdwVal) mut => VT.GetTimeOutValueDII(ref this, out pdwVal);
			public HRESULT GetLeakRate(out uint32 pdwVal) mut => VT.GetLeakRate(ref this, out pdwVal);
			public HRESULT GetComponentTag(out uint8 pbVal) mut => VT.GetComponentTag(ref this, out pbVal);
			public HRESULT GetCompatiblityDescriptorLength(out uint16 pwLength) mut => VT.GetCompatiblityDescriptorLength(ref this, out pwLength);
			public HRESULT GetCompatiblityDescriptor(out uint8* ppbData) mut => VT.GetCompatiblityDescriptor(ref this, out ppbData);
			public HRESULT GetCountOfRecords(out uint16 pwVal) mut => VT.GetCountOfRecords(ref this, out pwVal);
			public HRESULT GetRecordModuleId(uint16 wRecordIndex, out uint16 pwVal) mut => VT.GetRecordModuleId(ref this, wRecordIndex, out pwVal);
			public HRESULT GetRecordModuleSize(uint16 wRecordIndex, out uint32 pdwVal) mut => VT.GetRecordModuleSize(ref this, wRecordIndex, out pdwVal);
			public HRESULT GetRecordModuleInfoLength(uint16 wRecordIndex, out uint8 pbVal) mut => VT.GetRecordModuleInfoLength(ref this, wRecordIndex, out pbVal);
			public HRESULT GetRecordModuleInfo(uint16 wRecordIndex, out uint8* ppbData) mut => VT.GetRecordModuleInfo(ref this, wRecordIndex, out ppbData);
			public HRESULT GetTextLanguageCode(uint8* szCode) mut => VT.GetTextLanguageCode(ref this, szCode);
			public HRESULT GetTextW(DVB_STRCONV_MODE convMode, out BSTR pbstrName) mut => VT.GetTextW(ref this, convMode, out pbstrName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out BOOL pfReboot, out BOOL pfAddOn, out BOOL pfCompatibility, out BOOL pfModuleInfo, out BOOL pfTextInfo) ComGetFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint32 pdwVal) GetComponentSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint32 pdwVal) GetDownloadId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint32 pdwVal) GetTimeOutValueDII;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint32 pdwVal) GetLeakRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint8 pbVal) GetComponentTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint16 pwLength) GetCompatiblityDescriptorLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint8* ppbData) GetCompatiblityDescriptor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, out uint16 pwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, uint16 wRecordIndex, out uint16 pwVal) GetRecordModuleId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, uint16 wRecordIndex, out uint32 pdwVal) GetRecordModuleSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, uint16 wRecordIndex, out uint8 pbVal) GetRecordModuleInfoLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, uint16 wRecordIndex, out uint8* ppbData) GetRecordModuleInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, uint8* szCode) GetTextLanguageCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbDownloadContentDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrName) GetTextW;
			}
		}
		[CRepr]
		public struct IIsdbLogoTransmissionDescriptor : IUnknown
		{
			public const new Guid IID = .(0xe0103f49, 0x4ae1, 0x4f07, 0x90, 0x98, 0x75, 0x6d, 0xb1, 0xfa, 0x88, 0xcd);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetLogoTransmissionType(out uint8 pbVal) mut => VT.GetLogoTransmissionType(ref this, out pbVal);
			public HRESULT GetLogoId(out uint16 pwVal) mut => VT.GetLogoId(ref this, out pwVal);
			public HRESULT GetLogoVersion(out uint16 pwVal) mut => VT.GetLogoVersion(ref this, out pwVal);
			public HRESULT GetDownloadDataId(out uint16 pwVal) mut => VT.GetDownloadDataId(ref this, out pwVal);
			public HRESULT GetLogoCharW(DVB_STRCONV_MODE convMode, out BSTR pbstrChar) mut => VT.GetLogoCharW(ref this, convMode, out pbstrChar);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, out uint8 pbVal) GetLogoTransmissionType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, out uint16 pwVal) GetLogoId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, out uint16 pwVal) GetLogoVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, out uint16 pwVal) GetDownloadDataId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbLogoTransmissionDescriptor self, DVB_STRCONV_MODE convMode, out BSTR pbstrChar) GetLogoCharW;
			}
		}
		[CRepr]
		public struct IIsdbSIParameterDescriptor : IUnknown
		{
			public const new Guid IID = .(0xf837dc36, 0x867c, 0x426a, 0x91, 0x11, 0xf6, 0x20, 0x93, 0x95, 0x1a, 0x45);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetParameterVersion(out uint8 pbVal) mut => VT.GetParameterVersion(ref this, out pbVal);
			public HRESULT GetUpdateTime(out MPEG_DATE pVal) mut => VT.GetUpdateTime(ref this, out pVal);
			public HRESULT GetRecordNumberOfTable(out uint8 pbVal) mut => VT.GetRecordNumberOfTable(ref this, out pbVal);
			public HRESULT GetTableId(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetTableId(ref this, bRecordIndex, out pbVal);
			public HRESULT GetTableDescriptionLength(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetTableDescriptionLength(ref this, bRecordIndex, out pbVal);
			public HRESULT GetTableDescriptionBytes(uint8 bRecordIndex, out uint8 pbBufferLength, out uint8 pbBuffer) mut => VT.GetTableDescriptionBytes(ref this, bRecordIndex, out pbBufferLength, out pbBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, out uint8 pbVal) GetParameterVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, out MPEG_DATE pVal) GetUpdateTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, out uint8 pbVal) GetRecordNumberOfTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetTableId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetTableDescriptionLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbSIParameterDescriptor self, uint8 bRecordIndex, out uint8 pbBufferLength, out uint8 pbBuffer) GetTableDescriptionBytes;
			}
		}
		[CRepr]
		public struct IIsdbEmergencyInformationDescriptor : IUnknown
		{
			public const new Guid IID = .(0xba6fa681, 0xb973, 0x4da1, 0x92, 0x07, 0xac, 0x3e, 0x7f, 0x03, 0x41, 0xeb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCountOfRecords(out uint8 pbVal) mut => VT.GetCountOfRecords(ref this, out pbVal);
			public HRESULT GetServiceId(uint8 bRecordIndex, out uint16 pwVal) mut => VT.GetServiceId(ref this, bRecordIndex, out pwVal);
			public HRESULT GetStartEndFlag(uint8 bRecordIndex, out uint8 pVal) mut => VT.GetStartEndFlag(ref this, bRecordIndex, out pVal);
			public HRESULT GetSignalLevel(uint8 bRecordIndex, out uint8 pbVal) mut => VT.GetSignalLevel(ref this, bRecordIndex, out pbVal);
			public HRESULT GetAreaCode(uint8 bRecordIndex, out uint16* ppwVal, out uint8 pbNumAreaCodes) mut => VT.GetAreaCode(ref this, bRecordIndex, out ppwVal, out pbNumAreaCodes);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, out uint8 pbVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, uint8 bRecordIndex, out uint16 pwVal) GetServiceId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, uint8 bRecordIndex, out uint8 pVal) GetStartEndFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, uint8 bRecordIndex, out uint8 pbVal) GetSignalLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbEmergencyInformationDescriptor self, uint8 bRecordIndex, out uint16* ppwVal, out uint8 pbNumAreaCodes) GetAreaCode;
			}
		}
		[CRepr]
		public struct IIsdbCADescriptor : IUnknown
		{
			public const new Guid IID = .(0x0570aa47, 0x52bc, 0x42ae, 0x8c, 0xa5, 0x96, 0x9f, 0x41, 0xe8, 0x1a, 0xea);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCASystemId(out uint16 pwVal) mut => VT.GetCASystemId(ref this, out pwVal);
			public HRESULT GetReservedBits(out uint8 pbVal) mut => VT.GetReservedBits(ref this, out pbVal);
			public HRESULT GetCAPID(out uint16 pwVal) mut => VT.GetCAPID(ref this, out pwVal);
			public HRESULT GetPrivateDataBytes(out uint8 pbBufferLength, out uint8 pbBuffer) mut => VT.GetPrivateDataBytes(ref this, out pbBufferLength, out pbBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCADescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCADescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCADescriptor self, out uint16 pwVal) GetCASystemId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCADescriptor self, out uint8 pbVal) GetReservedBits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCADescriptor self, out uint16 pwVal) GetCAPID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCADescriptor self, out uint8 pbBufferLength, out uint8 pbBuffer) GetPrivateDataBytes;
			}
		}
		[CRepr]
		public struct IIsdbCAServiceDescriptor : IUnknown
		{
			public const new Guid IID = .(0x39cbeb97, 0xff0b, 0x42a7, 0x9a, 0xb9, 0x7b, 0x9c, 0xfe, 0x70, 0xa7, 0x7a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetCASystemId(out uint16 pwVal) mut => VT.GetCASystemId(ref this, out pwVal);
			public HRESULT GetCABroadcasterGroupId(out uint8 pbVal) mut => VT.GetCABroadcasterGroupId(ref this, out pbVal);
			public HRESULT GetMessageControl(out uint8 pbVal) mut => VT.GetMessageControl(ref this, out pbVal);
			public HRESULT GetServiceIds(out uint8 pbNumServiceIds, out uint16 pwServiceIds) mut => VT.GetServiceIds(ref this, out pbNumServiceIds, out pwServiceIds);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAServiceDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAServiceDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAServiceDescriptor self, out uint16 pwVal) GetCASystemId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAServiceDescriptor self, out uint8 pbVal) GetCABroadcasterGroupId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAServiceDescriptor self, out uint8 pbVal) GetMessageControl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbCAServiceDescriptor self, out uint8 pbNumServiceIds, out uint16 pwServiceIds) GetServiceIds;
			}
		}
		[CRepr]
		public struct IIsdbHierarchicalTransmissionDescriptor : IUnknown
		{
			public const new Guid IID = .(0xb7b3ae90, 0xee0b, 0x446d, 0x87, 0x69, 0xf7, 0xe2, 0xaa, 0x26, 0x6a, 0xa6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint8 pbVal) mut => VT.GetLength(ref this, out pbVal);
			public HRESULT GetFutureUse1(out uint8 pbVal) mut => VT.GetFutureUse1(ref this, out pbVal);
			public HRESULT GetQualityLevel(out uint8 pbVal) mut => VT.GetQualityLevel(ref this, out pbVal);
			public HRESULT GetFutureUse2(out uint8 pbVal) mut => VT.GetFutureUse2(ref this, out pbVal);
			public HRESULT GetReferencePid(out uint16 pwVal) mut => VT.GetReferencePid(ref this, out pwVal);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbHierarchicalTransmissionDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbHierarchicalTransmissionDescriptor self, out uint8 pbVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbHierarchicalTransmissionDescriptor self, out uint8 pbVal) GetFutureUse1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbHierarchicalTransmissionDescriptor self, out uint8 pbVal) GetQualityLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbHierarchicalTransmissionDescriptor self, out uint8 pbVal) GetFutureUse2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIsdbHierarchicalTransmissionDescriptor self, out uint16 pwVal) GetReferencePid;
			}
		}
		[CRepr]
		public struct IPBDASiParser : IUnknown
		{
			public const new Guid IID = .(0x9de49a74, 0xaba2, 0x4a18, 0x93, 0xe1, 0x21, 0xf1, 0x7f, 0x95, 0xc3, 0xc3);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(ref IUnknown punk) mut => VT.Initialize(ref this, ref punk);
			public HRESULT GetEIT(uint32 dwSize, ref uint8 pBuffer, out IPBDA_EIT* ppEIT) mut => VT.GetEIT(ref this, dwSize, ref pBuffer, out ppEIT);
			public HRESULT GetServices(uint32 dwSize, in uint8 pBuffer, out IPBDA_Services* ppServices) mut => VT.GetServices(ref this, dwSize, pBuffer, out ppServices);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDASiParser self, ref IUnknown punk) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDASiParser self, uint32 dwSize, ref uint8 pBuffer, out IPBDA_EIT* ppEIT) GetEIT;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDASiParser self, uint32 dwSize, in uint8 pBuffer, out IPBDA_Services* ppServices) GetServices;
			}
		}
		[CRepr]
		public struct IPBDA_EIT : IUnknown
		{
			public const new Guid IID = .(0xa35f2dea, 0x098f, 0x4ebd, 0x98, 0x4c, 0x2b, 0xd4, 0xc3, 0xc8, 0xce, 0x0a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(uint32 size, in uint8 pBuffer) mut => VT.Initialize(ref this, size, pBuffer);
			public HRESULT GetTableId(out uint8 pbVal) mut => VT.GetTableId(ref this, out pbVal);
			public HRESULT GetVersionNumber(out uint16 pwVal) mut => VT.GetVersionNumber(ref this, out pwVal);
			public HRESULT GetServiceIdx(out uint64 plwVal) mut => VT.GetServiceIdx(ref this, out plwVal);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordEventId(uint32 dwRecordIndex, out uint64 plwVal) mut => VT.GetRecordEventId(ref this, dwRecordIndex, out plwVal);
			public HRESULT GetRecordStartTime(uint32 dwRecordIndex, out MPEG_DATE_AND_TIME pmdtVal) mut => VT.GetRecordStartTime(ref this, dwRecordIndex, out pmdtVal);
			public HRESULT GetRecordDuration(uint32 dwRecordIndex, out MPEG_TIME pmdVal) mut => VT.GetRecordDuration(ref this, dwRecordIndex, out pmdVal);
			public HRESULT GetRecordCountOfDescriptors(uint32 dwRecordIndex, out uint32 pdwVal) mut => VT.GetRecordCountOfDescriptors(ref this, dwRecordIndex, out pdwVal);
			public HRESULT GetRecordDescriptorByIndex(uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByIndex(ref this, dwRecordIndex, dwIndex, out ppDescriptor);
			public HRESULT GetRecordDescriptorByTag(uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) mut => VT.GetRecordDescriptorByTag(ref this, dwRecordIndex, bTag, out pdwCookie, out ppDescriptor);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 size, in uint8 pBuffer) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, out uint8 pbVal) GetTableId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, out uint16 pwVal) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, out uint64 plwVal) GetServiceIdx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 dwRecordIndex, out uint64 plwVal) GetRecordEventId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 dwRecordIndex, out MPEG_DATE_AND_TIME pmdtVal) GetRecordStartTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 dwRecordIndex, out MPEG_TIME pmdVal) GetRecordDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 dwRecordIndex, out uint32 pdwVal) GetRecordCountOfDescriptors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 dwRecordIndex, uint32 dwIndex, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_EIT self, uint32 dwRecordIndex, uint8 bTag, out uint32 pdwCookie, out IGenericDescriptor* ppDescriptor) GetRecordDescriptorByTag;
			}
		}
		[CRepr]
		public struct IPBDA_Services : IUnknown
		{
			public const new Guid IID = .(0x944eab37, 0xeed4, 0x4850, 0xaf, 0xd2, 0x77, 0xe7, 0xef, 0xeb, 0x44, 0x27);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(uint32 size, ref uint8 pBuffer) mut => VT.Initialize(ref this, size, ref pBuffer);
			public HRESULT GetCountOfRecords(out uint32 pdwVal) mut => VT.GetCountOfRecords(ref this, out pdwVal);
			public HRESULT GetRecordByIndex(uint32 dwRecordIndex, out uint64 pul64ServiceIdx) mut => VT.GetRecordByIndex(ref this, dwRecordIndex, out pul64ServiceIdx);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_Services self, uint32 size, ref uint8 pBuffer) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_Services self, out uint32 pdwVal) GetCountOfRecords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDA_Services self, uint32 dwRecordIndex, out uint64 pul64ServiceIdx) GetRecordByIndex;
			}
		}
		[CRepr]
		public struct IPBDAEntitlementDescriptor : IUnknown
		{
			public const new Guid IID = .(0x22632497, 0x0de3, 0x4587, 0xaa, 0xdc, 0xd8, 0xd9, 0x90, 0x17, 0xe7, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint16 pwVal) mut => VT.GetLength(ref this, out pwVal);
			public HRESULT GetToken(out uint8* ppbTokenBuffer, out uint32 pdwTokenLength) mut => VT.GetToken(ref this, out ppbTokenBuffer, out pdwTokenLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDAEntitlementDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDAEntitlementDescriptor self, out uint16 pwVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDAEntitlementDescriptor self, out uint8* ppbTokenBuffer, out uint32 pdwTokenLength) GetToken;
			}
		}
		[CRepr]
		public struct IPBDAAttributesDescriptor : IUnknown
		{
			public const new Guid IID = .(0x313b3620, 0x3263, 0x45a6, 0x95, 0x33, 0x96, 0x8b, 0xef, 0xbe, 0xac, 0x03);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTag(out uint8 pbVal) mut => VT.GetTag(ref this, out pbVal);
			public HRESULT GetLength(out uint16 pwVal) mut => VT.GetLength(ref this, out pwVal);
			public HRESULT GetAttributePayload(out uint8* ppbAttributeBuffer, out uint32 pdwAttributeLength) mut => VT.GetAttributePayload(ref this, out ppbAttributeBuffer, out pdwAttributeLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDAAttributesDescriptor self, out uint8 pbVal) GetTag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDAAttributesDescriptor self, out uint16 pwVal) GetLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPBDAAttributesDescriptor self, out uint8* ppbAttributeBuffer, out uint32 pdwAttributeLength) GetAttributePayload;
			}
		}
		[CRepr]
		public struct IBDA_TIF_REGISTRATION : IUnknown
		{
			public const new Guid IID = .(0xdfef4a68, 0xee61, 0x415f, 0x9c, 0xcb, 0xcd, 0x95, 0xf2, 0xf9, 0x8a, 0x3a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RegisterTIFEx(ref IPin pTIFInputPin, out uint32 ppvRegistrationContext, out IUnknown* ppMpeg2DataControl) mut => VT.RegisterTIFEx(ref this, ref pTIFInputPin, out ppvRegistrationContext, out ppMpeg2DataControl);
			public HRESULT UnregisterTIF(uint32 pvRegistrationContext) mut => VT.UnregisterTIF(ref this, pvRegistrationContext);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_TIF_REGISTRATION self, ref IPin pTIFInputPin, out uint32 ppvRegistrationContext, out IUnknown* ppMpeg2DataControl) RegisterTIFEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBDA_TIF_REGISTRATION self, uint32 pvRegistrationContext) UnregisterTIF;
			}
		}
		[CRepr]
		public struct IMPEG2_TIF_CONTROL : IUnknown
		{
			public const new Guid IID = .(0xf9bac2f9, 0x4149, 0x4916, 0xb2, 0xef, 0xfa, 0xa2, 0x02, 0x32, 0x68, 0x62);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RegisterTIF(ref IUnknown pUnkTIF, out uint32 ppvRegistrationContext) mut => VT.RegisterTIF(ref this, ref pUnkTIF, out ppvRegistrationContext);
			public HRESULT UnregisterTIF(uint32 pvRegistrationContext) mut => VT.UnregisterTIF(ref this, pvRegistrationContext);
			public HRESULT AddPIDs(uint32 ulcPIDs, ref uint32 pulPIDs) mut => VT.AddPIDs(ref this, ulcPIDs, ref pulPIDs);
			public HRESULT DeletePIDs(uint32 ulcPIDs, ref uint32 pulPIDs) mut => VT.DeletePIDs(ref this, ulcPIDs, ref pulPIDs);
			public HRESULT GetPIDCount(out uint32 pulcPIDs) mut => VT.GetPIDCount(ref this, out pulcPIDs);
			public HRESULT GetPIDs(out uint32 pulcPIDs, out uint32 pulPIDs) mut => VT.GetPIDs(ref this, out pulcPIDs, out pulPIDs);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2_TIF_CONTROL self, ref IUnknown pUnkTIF, out uint32 ppvRegistrationContext) RegisterTIF;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2_TIF_CONTROL self, uint32 pvRegistrationContext) UnregisterTIF;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2_TIF_CONTROL self, uint32 ulcPIDs, ref uint32 pulPIDs) AddPIDs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2_TIF_CONTROL self, uint32 ulcPIDs, ref uint32 pulPIDs) DeletePIDs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2_TIF_CONTROL self, out uint32 pulcPIDs) GetPIDCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMPEG2_TIF_CONTROL self, out uint32 pulcPIDs, out uint32 pulPIDs) GetPIDs;
			}
		}
		[CRepr]
		public struct ITuneRequestInfo : IUnknown
		{
			public const new Guid IID = .(0xa3b152df, 0x7a90, 0x4218, 0xac, 0x54, 0x98, 0x30, 0xbe, 0xe8, 0xc0, 0xb6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetLocatorData(ref ITuneRequest Request) mut => VT.GetLocatorData(ref this, ref Request);
			public HRESULT GetComponentData(ref ITuneRequest CurrentRequest) mut => VT.GetComponentData(ref this, ref CurrentRequest);
			public HRESULT CreateComponentList(ref ITuneRequest CurrentRequest) mut => VT.CreateComponentList(ref this, ref CurrentRequest);
			public HRESULT GetNextProgram(ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) mut => VT.GetNextProgram(ref this, ref CurrentRequest, out TuneRequest);
			public HRESULT GetPreviousProgram(ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) mut => VT.GetPreviousProgram(ref this, ref CurrentRequest, out TuneRequest);
			public HRESULT GetNextLocator(ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) mut => VT.GetNextLocator(ref this, ref CurrentRequest, out TuneRequest);
			public HRESULT GetPreviousLocator(ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) mut => VT.GetPreviousLocator(ref this, ref CurrentRequest, out TuneRequest);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest Request) GetLocatorData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest CurrentRequest) GetComponentData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest CurrentRequest) CreateComponentList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) GetNextProgram;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) GetPreviousProgram;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) GetNextLocator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfo self, ref ITuneRequest CurrentRequest, out ITuneRequest* TuneRequest) GetPreviousLocator;
			}
		}
		[CRepr]
		public struct ITuneRequestInfoEx : ITuneRequestInfo
		{
			public const new Guid IID = .(0xee957c52, 0xb0d0, 0x4e78, 0x8d, 0xd1, 0xb8, 0x7a, 0x08, 0xbf, 0xd8, 0x93);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateComponentListEx(ref ITuneRequest CurrentRequest, out IUnknown* ppCurPMT) mut => VT.CreateComponentListEx(ref this, ref CurrentRequest, out ppCurPMT);

			[CRepr]
			public struct VTable : ITuneRequestInfo.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITuneRequestInfoEx self, ref ITuneRequest CurrentRequest, out IUnknown* ppCurPMT) CreateComponentListEx;
			}
		}
		[CRepr]
		public struct ISIInbandEPGEvent : IUnknown
		{
			public const new Guid IID = .(0x7e47913a, 0x5a89, 0x423d, 0x9a, 0x2b, 0xe1, 0x51, 0x68, 0x85, 0x89, 0x34);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SIObjectEvent(ref IDVB_EIT2 pIDVB_EIT, uint32 dwTable_ID, uint32 dwService_ID) mut => VT.SIObjectEvent(ref this, ref pIDVB_EIT, dwTable_ID, dwService_ID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISIInbandEPGEvent self, ref IDVB_EIT2 pIDVB_EIT, uint32 dwTable_ID, uint32 dwService_ID) SIObjectEvent;
			}
		}
		[CRepr]
		public struct ISIInbandEPG : IUnknown
		{
			public const new Guid IID = .(0xf90ad9d0, 0xb854, 0x4b68, 0x9c, 0xc1, 0xb2, 0xcc, 0x96, 0x11, 0x9d, 0x85);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT StartSIEPGScan() mut => VT.StartSIEPGScan(ref this);
			public HRESULT StopSIEPGScan() mut => VT.StopSIEPGScan(ref this);
			public HRESULT IsSIEPGScanRunning(out BOOL bRunning) mut => VT.IsSIEPGScanRunning(ref this, out bRunning);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISIInbandEPG self) StartSIEPGScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISIInbandEPG self) StopSIEPGScan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISIInbandEPG self, out BOOL bRunning) IsSIEPGScanRunning;
			}
		}
		[CRepr]
		public struct IGuideDataEvent : IUnknown
		{
			public const new Guid IID = .(0xefda0c80, 0xf395, 0x42c3, 0x9b, 0x3c, 0x56, 0xb3, 0x7d, 0xec, 0x7b, 0xb7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GuideDataAcquired() mut => VT.GuideDataAcquired(ref this);
			public HRESULT ProgramChanged(VARIANT varProgramDescriptionID) mut => VT.ProgramChanged(ref this, varProgramDescriptionID);
			public HRESULT ServiceChanged(VARIANT varServiceDescriptionID) mut => VT.ServiceChanged(ref this, varServiceDescriptionID);
			public HRESULT ScheduleEntryChanged(VARIANT varScheduleEntryDescriptionID) mut => VT.ScheduleEntryChanged(ref this, varScheduleEntryDescriptionID);
			public HRESULT ProgramDeleted(VARIANT varProgramDescriptionID) mut => VT.ProgramDeleted(ref this, varProgramDescriptionID);
			public HRESULT ServiceDeleted(VARIANT varServiceDescriptionID) mut => VT.ServiceDeleted(ref this, varServiceDescriptionID);
			public HRESULT ScheduleDeleted(VARIANT varScheduleEntryDescriptionID) mut => VT.ScheduleDeleted(ref this, varScheduleEntryDescriptionID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self) GuideDataAcquired;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self, VARIANT varProgramDescriptionID) ProgramChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self, VARIANT varServiceDescriptionID) ServiceChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self, VARIANT varScheduleEntryDescriptionID) ScheduleEntryChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self, VARIANT varProgramDescriptionID) ProgramDeleted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self, VARIANT varServiceDescriptionID) ServiceDeleted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataEvent self, VARIANT varScheduleEntryDescriptionID) ScheduleDeleted;
			}
		}
		[CRepr]
		public struct IGuideDataProperty : IUnknown
		{
			public const new Guid IID = .(0x88ec5e58, 0xbb73, 0x41d6, 0x99, 0xce, 0x66, 0xc5, 0x24, 0xb8, 0xb5, 0x91);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Name(out BSTR pbstrName) mut => VT.get_Name(ref this, out pbstrName);
			public HRESULT get_Language(out int32 idLang) mut => VT.get_Language(ref this, out idLang);
			public HRESULT get_Value(out VARIANT pvar) mut => VT.get_Value(ref this, out pvar);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataProperty self, out BSTR pbstrName) get_Name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataProperty self, out int32 idLang) get_Language;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataProperty self, out VARIANT pvar) get_Value;
			}
		}
		[CRepr]
		public struct IEnumGuideDataProperties : IUnknown
		{
			public const new Guid IID = .(0xae44423b, 0x4571, 0x475c, 0xad, 0x2c, 0xf4, 0x0a, 0x77, 0x1d, 0x80, 0xef);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, out IGuideDataProperty* ppprop, out uint32 pcelt) mut => VT.Next(ref this, celt, out ppprop, out pcelt);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumGuideDataProperties* ppenum) mut => VT.Clone(ref this, out ppenum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumGuideDataProperties self, uint32 celt, out IGuideDataProperty* ppprop, out uint32 pcelt) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumGuideDataProperties self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumGuideDataProperties self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumGuideDataProperties self, out IEnumGuideDataProperties* ppenum) Clone;
			}
		}
		[CRepr]
		public struct IEnumTuneRequests : IUnknown
		{
			public const new Guid IID = .(0x1993299c, 0xced6, 0x4788, 0x87, 0xa3, 0x42, 0x00, 0x67, 0xdc, 0xe0, 0xc7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, out ITuneRequest* ppprop, out uint32 pcelt) mut => VT.Next(ref this, celt, out ppprop, out pcelt);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumTuneRequests* ppenum) mut => VT.Clone(ref this, out ppenum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuneRequests self, uint32 celt, out ITuneRequest* ppprop, out uint32 pcelt) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuneRequests self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuneRequests self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumTuneRequests self, out IEnumTuneRequests* ppenum) Clone;
			}
		}
		[CRepr]
		public struct IGuideData : IUnknown
		{
			public const new Guid IID = .(0x61571138, 0x5b01, 0x43cd, 0xae, 0xaf, 0x60, 0xb7, 0x84, 0xa0, 0xbf, 0x93);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetServices(out IEnumTuneRequests* ppEnumTuneRequests) mut => VT.GetServices(ref this, out ppEnumTuneRequests);
			public HRESULT GetServiceProperties(ref ITuneRequest pTuneRequest, out IEnumGuideDataProperties* ppEnumProperties) mut => VT.GetServiceProperties(ref this, ref pTuneRequest, out ppEnumProperties);
			public HRESULT GetGuideProgramIDs(out IEnumVARIANT* pEnumPrograms) mut => VT.GetGuideProgramIDs(ref this, out pEnumPrograms);
			public HRESULT GetProgramProperties(VARIANT varProgramDescriptionID, out IEnumGuideDataProperties* ppEnumProperties) mut => VT.GetProgramProperties(ref this, varProgramDescriptionID, out ppEnumProperties);
			public HRESULT GetScheduleEntryIDs(out IEnumVARIANT* pEnumScheduleEntries) mut => VT.GetScheduleEntryIDs(ref this, out pEnumScheduleEntries);
			public HRESULT GetScheduleEntryProperties(VARIANT varScheduleEntryDescriptionID, out IEnumGuideDataProperties* ppEnumProperties) mut => VT.GetScheduleEntryProperties(ref this, varScheduleEntryDescriptionID, out ppEnumProperties);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideData self, out IEnumTuneRequests* ppEnumTuneRequests) GetServices;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideData self, ref ITuneRequest pTuneRequest, out IEnumGuideDataProperties* ppEnumProperties) GetServiceProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideData self, out IEnumVARIANT* pEnumPrograms) GetGuideProgramIDs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideData self, VARIANT varProgramDescriptionID, out IEnumGuideDataProperties* ppEnumProperties) GetProgramProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideData self, out IEnumVARIANT* pEnumScheduleEntries) GetScheduleEntryIDs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideData self, VARIANT varScheduleEntryDescriptionID, out IEnumGuideDataProperties* ppEnumProperties) GetScheduleEntryProperties;
			}
		}
		[CRepr]
		public struct IGuideDataLoader : IUnknown
		{
			public const new Guid IID = .(0x4764ff7c, 0xfa95, 0x4525, 0xaf, 0x4d, 0xd3, 0x22, 0x36, 0xdb, 0x9e, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Init(ref IGuideData pGuideStore) mut => VT.Init(ref this, ref pGuideStore);
			public HRESULT Terminate() mut => VT.Terminate(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataLoader self, ref IGuideData pGuideStore) Init;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGuideDataLoader self) Terminate;
			}
		}
		
		// --- Functions ---
		
		[Import("quartz.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern uint32 AMGetErrorTextA(HRESULT hr, uint8* pbuffer, uint32 MaxLen);
		[Import("quartz.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern uint32 AMGetErrorTextW(HRESULT hr, char16* pbuffer, uint32 MaxLen);
	}
}
