using System;

// namespace System.Antimalware
namespace Win32
{
	extension Win32
	{
		// --- Typedefs ---
		
		public typealias HAMSICONTEXT = int;
		public typealias HAMSISESSION = int;
		
		// --- Enums ---
		
		[AllowDuplicates]
		public enum AMSI_RESULT : int32
		{
			AMSI_RESULT_CLEAN = 0,
			AMSI_RESULT_NOT_DETECTED = 1,
			AMSI_RESULT_BLOCKED_BY_ADMIN_START = 16384,
			AMSI_RESULT_BLOCKED_BY_ADMIN_END = 20479,
			AMSI_RESULT_DETECTED = 32768,
		}
		[AllowDuplicates]
		public enum AMSI_ATTRIBUTE : int32
		{
			AMSI_ATTRIBUTE_APP_NAME = 0,
			AMSI_ATTRIBUTE_CONTENT_NAME = 1,
			AMSI_ATTRIBUTE_CONTENT_SIZE = 2,
			AMSI_ATTRIBUTE_CONTENT_ADDRESS = 3,
			AMSI_ATTRIBUTE_SESSION = 4,
			AMSI_ATTRIBUTE_REDIRECT_CHAIN_SIZE = 5,
			AMSI_ATTRIBUTE_REDIRECT_CHAIN_ADDRESS = 6,
			AMSI_ATTRIBUTE_ALL_SIZE = 7,
			AMSI_ATTRIBUTE_ALL_ADDRESS = 8,
			AMSI_ATTRIBUTE_QUIET = 9,
		}
		[AllowDuplicates]
		public enum AMSI_UAC_REQUEST_TYPE : int32
		{
			AMSI_UAC_REQUEST_TYPE_EXE = 0,
			AMSI_UAC_REQUEST_TYPE_COM = 1,
			AMSI_UAC_REQUEST_TYPE_MSI = 2,
			AMSI_UAC_REQUEST_TYPE_AX = 3,
			AMSI_UAC_REQUEST_TYPE_PACKAGED_APP = 4,
			AMSI_UAC_REQUEST_TYPE_MAX = 5,
		}
		[AllowDuplicates]
		public enum AMSI_UAC_TRUST_STATE : int32
		{
			AMSI_UAC_TRUST_STATE_TRUSTED = 0,
			AMSI_UAC_TRUST_STATE_UNTRUSTED = 1,
			AMSI_UAC_TRUST_STATE_BLOCKED = 2,
			AMSI_UAC_TRUST_STATE_MAX = 3,
		}
		[AllowDuplicates]
		public enum AMSI_UAC_MSI_ACTION : int32
		{
			AMSI_UAC_MSI_ACTION_INSTALL = 0,
			AMSI_UAC_MSI_ACTION_UNINSTALL = 1,
			AMSI_UAC_MSI_ACTION_UPDATE = 2,
			AMSI_UAC_MSI_ACTION_MAINTENANCE = 3,
			AMSI_UAC_MSI_ACTION_MAX = 4,
		}
		
		// --- Structs ---
		
		[CRepr]
		public struct AMSI_UAC_REQUEST_EXE_INFO
		{
			public uint32 ulLength;
			public PWSTR lpwszApplicationName;
			public PWSTR lpwszCommandLine;
			public PWSTR lpwszDLLParameter;
		}
		[CRepr]
		public struct AMSI_UAC_REQUEST_COM_INFO
		{
			public uint32 ulLength;
			public PWSTR lpwszServerBinary;
			public PWSTR lpwszRequestor;
			public Guid Clsid;
		}
		[CRepr]
		public struct AMSI_UAC_REQUEST_MSI_INFO
		{
			public uint32 ulLength;
			public AMSI_UAC_MSI_ACTION MsiAction;
			public PWSTR lpwszProductName;
			public PWSTR lpwszVersion;
			public PWSTR lpwszLanguage;
			public PWSTR lpwszManufacturer;
			public PWSTR lpwszPackagePath;
			public PWSTR lpwszPackageSource;
			public uint32 ulUpdates;
			public PWSTR* ppwszUpdates;
			public PWSTR* ppwszUpdateSources;
		}
		[CRepr]
		public struct AMSI_UAC_REQUEST_AX_INFO
		{
			public uint32 ulLength;
			public PWSTR lpwszLocalInstallPath;
			public PWSTR lpwszSourceURL;
		}
		[CRepr]
		public struct AMSI_UAC_REQUEST_PACKAGED_APP_INFO
		{
			public uint32 ulLength;
			public PWSTR lpwszApplicationName;
			public PWSTR lpwszCommandLine;
			public PWSTR lpPackageFamilyName;
			public PWSTR lpApplicationId;
		}
		[CRepr]
		public struct AMSI_UAC_REQUEST_CONTEXT
		{
			public uint32 ulLength;
			public uint32 ulRequestorProcessId;
			public AMSI_UAC_TRUST_STATE UACTrustState;
			public AMSI_UAC_REQUEST_TYPE Type;
			public _RequestType_e__Union RequestType;
			public BOOL bAutoElevateRequest;
			
			[CRepr, Union]
			public struct _RequestType_e__Union
			{
				public AMSI_UAC_REQUEST_EXE_INFO ExeInfo;
				public AMSI_UAC_REQUEST_COM_INFO ComInfo;
				public AMSI_UAC_REQUEST_MSI_INFO MsiInfo;
				public AMSI_UAC_REQUEST_AX_INFO ActiveXInfo;
				public AMSI_UAC_REQUEST_PACKAGED_APP_INFO PackagedAppInfo;
			}
		}
		
		// --- COM Class IDs ---
		
		public const Guid CLSID_CAntimalware = .(0xfdb00e52, 0xa214, 0x4aa1, 0x8f, 0xba, 0x43, 0x57, 0xbb, 0x00, 0x72, 0xec);
		
		// --- COM Interfaces ---
		
		public struct IAmsiStream {}
		public struct IAntimalwareProvider {}
		public struct IAntimalwareUacProvider {}
		public struct IAntimalwareProvider2 {}
		public struct IAntimalware {}
		public struct IAntimalware2 {}
		
		// --- Functions ---
		
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT AmsiInitialize(PWSTR appName, HAMSICONTEXT* amsiContext);
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern void AmsiUninitialize(HAMSICONTEXT amsiContext);
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT AmsiOpenSession(HAMSICONTEXT amsiContext, HAMSISESSION* amsiSession);
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern void AmsiCloseSession(HAMSICONTEXT amsiContext, HAMSISESSION amsiSession);
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT AmsiScanBuffer(HAMSICONTEXT amsiContext, void* buffer, uint32 length, PWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT* result);
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT AmsiNotifyOperation(HAMSICONTEXT amsiContext, void* buffer, uint32 length, PWSTR contentName, AMSI_RESULT* result);
		[Import("amsi.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT AmsiScanString(HAMSICONTEXT amsiContext, PWSTR string, PWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT* result);
		[Import("kernel32.lib"), CLink, CallingConvention(.Stdcall)]
		public static extern BOOL InstallELAMCertificateInfo(HANDLE ELAMFile);
		
	}
}
