using System;

// namespace Devices.Tapi
namespace Win32
{
	extension Win32
	{
		// --- Constants ---
		
		public const uint32 TAPI_CURRENT_VERSION = 131074;
		public const int32 LINE_ADDRESSSTATE = 0;
		public const int32 LINE_CALLINFO = 1;
		public const int32 LINE_CALLSTATE = 2;
		public const int32 LINE_CLOSE = 3;
		public const int32 LINE_DEVSPECIFIC = 4;
		public const int32 LINE_DEVSPECIFICFEATURE = 5;
		public const int32 LINE_GATHERDIGITS = 6;
		public const int32 LINE_GENERATE = 7;
		public const int32 LINE_LINEDEVSTATE = 8;
		public const int32 LINE_MONITORDIGITS = 9;
		public const int32 LINE_MONITORMEDIA = 10;
		public const int32 LINE_MONITORTONE = 11;
		public const int32 LINE_REPLY = 12;
		public const int32 LINE_REQUEST = 13;
		public const int32 PHONE_BUTTON = 14;
		public const int32 PHONE_CLOSE = 15;
		public const int32 PHONE_DEVSPECIFIC = 16;
		public const int32 PHONE_REPLY = 17;
		public const int32 PHONE_STATE = 18;
		public const int32 LINE_CREATE = 19;
		public const int32 PHONE_CREATE = 20;
		public const int32 LINE_AGENTSPECIFIC = 21;
		public const int32 LINE_AGENTSTATUS = 22;
		public const int32 LINE_APPNEWCALL = 23;
		public const int32 LINE_PROXYREQUEST = 24;
		public const int32 LINE_REMOVE = 25;
		public const int32 PHONE_REMOVE = 26;
		public const int32 LINE_AGENTSESSIONSTATUS = 27;
		public const int32 LINE_QUEUESTATUS = 28;
		public const int32 LINE_AGENTSTATUSEX = 29;
		public const int32 LINE_GROUPSTATUS = 30;
		public const int32 LINE_PROXYSTATUS = 31;
		public const int32 LINE_APPNEWCALLHUB = 32;
		public const int32 LINE_CALLHUBCLOSE = 33;
		public const int32 LINE_DEVSPECIFICEX = 34;
		public const uint32 INITIALIZE_NEGOTIATION = 4294967295;
		public const uint32 LINEADDRCAPFLAGS_FWDNUMRINGS = 1;
		public const uint32 LINEADDRCAPFLAGS_PICKUPGROUPID = 2;
		public const uint32 LINEADDRCAPFLAGS_SECURE = 4;
		public const uint32 LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 8;
		public const uint32 LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 16;
		public const uint32 LINEADDRCAPFLAGS_DIALED = 32;
		public const uint32 LINEADDRCAPFLAGS_ORIGOFFHOOK = 64;
		public const uint32 LINEADDRCAPFLAGS_DESTOFFHOOK = 128;
		public const uint32 LINEADDRCAPFLAGS_FWDCONSULT = 256;
		public const uint32 LINEADDRCAPFLAGS_SETUPCONFNULL = 512;
		public const uint32 LINEADDRCAPFLAGS_AUTORECONNECT = 1024;
		public const uint32 LINEADDRCAPFLAGS_COMPLETIONID = 2048;
		public const uint32 LINEADDRCAPFLAGS_TRANSFERHELD = 4096;
		public const uint32 LINEADDRCAPFLAGS_TRANSFERMAKE = 8192;
		public const uint32 LINEADDRCAPFLAGS_CONFERENCEHELD = 16384;
		public const uint32 LINEADDRCAPFLAGS_CONFERENCEMAKE = 32768;
		public const uint32 LINEADDRCAPFLAGS_PARTIALDIAL = 65536;
		public const uint32 LINEADDRCAPFLAGS_FWDSTATUSVALID = 131072;
		public const uint32 LINEADDRCAPFLAGS_FWDINTEXTADDR = 262144;
		public const uint32 LINEADDRCAPFLAGS_FWDBUSYNAADDR = 524288;
		public const uint32 LINEADDRCAPFLAGS_ACCEPTTOALERT = 1048576;
		public const uint32 LINEADDRCAPFLAGS_CONFDROP = 2097152;
		public const uint32 LINEADDRCAPFLAGS_PICKUPCALLWAIT = 4194304;
		public const uint32 LINEADDRCAPFLAGS_PREDICTIVEDIALER = 8388608;
		public const uint32 LINEADDRCAPFLAGS_QUEUE = 16777216;
		public const uint32 LINEADDRCAPFLAGS_ROUTEPOINT = 33554432;
		public const uint32 LINEADDRCAPFLAGS_HOLDMAKESNEW = 67108864;
		public const uint32 LINEADDRCAPFLAGS_NOINTERNALCALLS = 134217728;
		public const uint32 LINEADDRCAPFLAGS_NOEXTERNALCALLS = 268435456;
		public const uint32 LINEADDRCAPFLAGS_SETCALLINGID = 536870912;
		public const uint32 LINEADDRCAPFLAGS_ACDGROUP = 1073741824;
		public const uint32 LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = 2147483648;
		public const uint32 LINEADDRESSMODE_ADDRESSID = 1;
		public const uint32 LINEADDRESSMODE_DIALABLEADDR = 2;
		public const uint32 LINEADDRESSSHARING_PRIVATE = 1;
		public const uint32 LINEADDRESSSHARING_BRIDGEDEXCL = 2;
		public const uint32 LINEADDRESSSHARING_BRIDGEDNEW = 4;
		public const uint32 LINEADDRESSSHARING_BRIDGEDSHARED = 8;
		public const uint32 LINEADDRESSSHARING_MONITORED = 16;
		public const uint32 LINEADDRESSSTATE_OTHER = 1;
		public const uint32 LINEADDRESSSTATE_DEVSPECIFIC = 2;
		public const uint32 LINEADDRESSSTATE_INUSEZERO = 4;
		public const uint32 LINEADDRESSSTATE_INUSEONE = 8;
		public const uint32 LINEADDRESSSTATE_INUSEMANY = 16;
		public const uint32 LINEADDRESSSTATE_NUMCALLS = 32;
		public const uint32 LINEADDRESSSTATE_FORWARD = 64;
		public const uint32 LINEADDRESSSTATE_TERMINALS = 128;
		public const uint32 LINEADDRESSSTATE_CAPSCHANGE = 256;
		public const uint32 LINEADDRESSTYPE_PHONENUMBER = 1;
		public const uint32 LINEADDRESSTYPE_SDP = 2;
		public const uint32 LINEADDRESSTYPE_EMAILNAME = 4;
		public const uint32 LINEADDRESSTYPE_DOMAINNAME = 8;
		public const uint32 LINEADDRESSTYPE_IPADDRESS = 16;
		public const uint32 LINEADDRFEATURE_FORWARD = 1;
		public const uint32 LINEADDRFEATURE_MAKECALL = 2;
		public const uint32 LINEADDRFEATURE_PICKUP = 4;
		public const uint32 LINEADDRFEATURE_SETMEDIACONTROL = 8;
		public const uint32 LINEADDRFEATURE_SETTERMINAL = 16;
		public const uint32 LINEADDRFEATURE_SETUPCONF = 32;
		public const uint32 LINEADDRFEATURE_UNCOMPLETECALL = 64;
		public const uint32 LINEADDRFEATURE_UNPARK = 128;
		public const uint32 LINEADDRFEATURE_PICKUPHELD = 256;
		public const uint32 LINEADDRFEATURE_PICKUPGROUP = 512;
		public const uint32 LINEADDRFEATURE_PICKUPDIRECT = 1024;
		public const uint32 LINEADDRFEATURE_PICKUPWAITING = 2048;
		public const uint32 LINEADDRFEATURE_FORWARDFWD = 4096;
		public const uint32 LINEADDRFEATURE_FORWARDDND = 8192;
		public const uint32 LINEAGENTFEATURE_SETAGENTGROUP = 1;
		public const uint32 LINEAGENTFEATURE_SETAGENTSTATE = 2;
		public const uint32 LINEAGENTFEATURE_SETAGENTACTIVITY = 4;
		public const uint32 LINEAGENTFEATURE_AGENTSPECIFIC = 8;
		public const uint32 LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 16;
		public const uint32 LINEAGENTFEATURE_GETAGENTGROUP = 32;
		public const uint32 LINEAGENTSTATE_LOGGEDOFF = 1;
		public const uint32 LINEAGENTSTATE_NOTREADY = 2;
		public const uint32 LINEAGENTSTATE_READY = 4;
		public const uint32 LINEAGENTSTATE_BUSYACD = 8;
		public const uint32 LINEAGENTSTATE_BUSYINCOMING = 16;
		public const uint32 LINEAGENTSTATE_BUSYOUTBOUND = 32;
		public const uint32 LINEAGENTSTATE_BUSYOTHER = 64;
		public const uint32 LINEAGENTSTATE_WORKINGAFTERCALL = 128;
		public const uint32 LINEAGENTSTATE_UNKNOWN = 256;
		public const uint32 LINEAGENTSTATE_UNAVAIL = 512;
		public const uint32 LINEAGENTSTATUS_GROUP = 1;
		public const uint32 LINEAGENTSTATUS_STATE = 2;
		public const uint32 LINEAGENTSTATUS_NEXTSTATE = 4;
		public const uint32 LINEAGENTSTATUS_ACTIVITY = 8;
		public const uint32 LINEAGENTSTATUS_ACTIVITYLIST = 16;
		public const uint32 LINEAGENTSTATUS_GROUPLIST = 32;
		public const uint32 LINEAGENTSTATUS_CAPSCHANGE = 64;
		public const uint32 LINEAGENTSTATUS_VALIDSTATES = 128;
		public const uint32 LINEAGENTSTATUS_VALIDNEXTSTATES = 256;
		public const uint32 LINEAGENTSTATEEX_NOTREADY = 1;
		public const uint32 LINEAGENTSTATEEX_READY = 2;
		public const uint32 LINEAGENTSTATEEX_BUSYACD = 4;
		public const uint32 LINEAGENTSTATEEX_BUSYINCOMING = 8;
		public const uint32 LINEAGENTSTATEEX_BUSYOUTGOING = 16;
		public const uint32 LINEAGENTSTATEEX_UNKNOWN = 32;
		public const uint32 LINEAGENTSTATEEX_RELEASED = 64;
		public const uint32 LINEAGENTSTATUSEX_NEWAGENT = 1;
		public const uint32 LINEAGENTSTATUSEX_STATE = 2;
		public const uint32 LINEAGENTSTATUSEX_UPDATEINFO = 4;
		public const uint32 LINEAGENTSESSIONSTATE_NOTREADY = 1;
		public const uint32 LINEAGENTSESSIONSTATE_READY = 2;
		public const uint32 LINEAGENTSESSIONSTATE_BUSYONCALL = 4;
		public const uint32 LINEAGENTSESSIONSTATE_BUSYWRAPUP = 8;
		public const uint32 LINEAGENTSESSIONSTATE_ENDED = 16;
		public const uint32 LINEAGENTSESSIONSTATE_RELEASED = 32;
		public const uint32 LINEAGENTSESSIONSTATUS_NEWSESSION = 1;
		public const uint32 LINEAGENTSESSIONSTATUS_STATE = 2;
		public const uint32 LINEAGENTSESSIONSTATUS_UPDATEINFO = 4;
		public const uint32 LINEQUEUESTATUS_UPDATEINFO = 1;
		public const uint32 LINEQUEUESTATUS_NEWQUEUE = 2;
		public const uint32 LINEQUEUESTATUS_QUEUEREMOVED = 4;
		public const uint32 LINEGROUPSTATUS_NEWGROUP = 1;
		public const uint32 LINEGROUPSTATUS_GROUPREMOVED = 2;
		public const uint32 LINEPROXYSTATUS_OPEN = 1;
		public const uint32 LINEPROXYSTATUS_CLOSE = 2;
		public const uint32 LINEPROXYSTATUS_ALLOPENFORACD = 4;
		public const uint32 LINEANSWERMODE_NONE = 1;
		public const uint32 LINEANSWERMODE_DROP = 2;
		public const uint32 LINEANSWERMODE_HOLD = 4;
		public const uint32 LINEBEARERMODE_VOICE = 1;
		public const uint32 LINEBEARERMODE_SPEECH = 2;
		public const uint32 LINEBEARERMODE_MULTIUSE = 4;
		public const uint32 LINEBEARERMODE_DATA = 8;
		public const uint32 LINEBEARERMODE_ALTSPEECHDATA = 16;
		public const uint32 LINEBEARERMODE_NONCALLSIGNALING = 32;
		public const uint32 LINEBEARERMODE_PASSTHROUGH = 64;
		public const uint32 LINEBEARERMODE_RESTRICTEDDATA = 128;
		public const uint32 LINEBUSYMODE_STATION = 1;
		public const uint32 LINEBUSYMODE_TRUNK = 2;
		public const uint32 LINEBUSYMODE_UNKNOWN = 4;
		public const uint32 LINEBUSYMODE_UNAVAIL = 8;
		public const uint32 LINECALLCOMPLCOND_BUSY = 1;
		public const uint32 LINECALLCOMPLCOND_NOANSWER = 2;
		public const uint32 LINECALLCOMPLMODE_CAMPON = 1;
		public const uint32 LINECALLCOMPLMODE_CALLBACK = 2;
		public const uint32 LINECALLCOMPLMODE_INTRUDE = 4;
		public const uint32 LINECALLCOMPLMODE_MESSAGE = 8;
		public const uint32 LINECALLFEATURE_ACCEPT = 1;
		public const uint32 LINECALLFEATURE_ADDTOCONF = 2;
		public const uint32 LINECALLFEATURE_ANSWER = 4;
		public const uint32 LINECALLFEATURE_BLINDTRANSFER = 8;
		public const uint32 LINECALLFEATURE_COMPLETECALL = 16;
		public const uint32 LINECALLFEATURE_COMPLETETRANSF = 32;
		public const uint32 LINECALLFEATURE_DIAL = 64;
		public const uint32 LINECALLFEATURE_DROP = 128;
		public const uint32 LINECALLFEATURE_GATHERDIGITS = 256;
		public const uint32 LINECALLFEATURE_GENERATEDIGITS = 512;
		public const uint32 LINECALLFEATURE_GENERATETONE = 1024;
		public const uint32 LINECALLFEATURE_HOLD = 2048;
		public const uint32 LINECALLFEATURE_MONITORDIGITS = 4096;
		public const uint32 LINECALLFEATURE_MONITORMEDIA = 8192;
		public const uint32 LINECALLFEATURE_MONITORTONES = 16384;
		public const uint32 LINECALLFEATURE_PARK = 32768;
		public const uint32 LINECALLFEATURE_PREPAREADDCONF = 65536;
		public const uint32 LINECALLFEATURE_REDIRECT = 131072;
		public const uint32 LINECALLFEATURE_REMOVEFROMCONF = 262144;
		public const uint32 LINECALLFEATURE_SECURECALL = 524288;
		public const uint32 LINECALLFEATURE_SENDUSERUSER = 1048576;
		public const uint32 LINECALLFEATURE_SETCALLPARAMS = 2097152;
		public const uint32 LINECALLFEATURE_SETMEDIACONTROL = 4194304;
		public const uint32 LINECALLFEATURE_SETTERMINAL = 8388608;
		public const uint32 LINECALLFEATURE_SETUPCONF = 16777216;
		public const uint32 LINECALLFEATURE_SETUPTRANSFER = 33554432;
		public const uint32 LINECALLFEATURE_SWAPHOLD = 67108864;
		public const uint32 LINECALLFEATURE_UNHOLD = 134217728;
		public const uint32 LINECALLFEATURE_RELEASEUSERUSERINFO = 268435456;
		public const uint32 LINECALLFEATURE_SETTREATMENT = 536870912;
		public const uint32 LINECALLFEATURE_SETQOS = 1073741824;
		public const uint32 LINECALLFEATURE_SETCALLDATA = 2147483648;
		public const uint32 LINECALLFEATURE2_NOHOLDCONFERENCE = 1;
		public const uint32 LINECALLFEATURE2_ONESTEPTRANSFER = 2;
		public const uint32 LINECALLFEATURE2_COMPLCAMPON = 4;
		public const uint32 LINECALLFEATURE2_COMPLCALLBACK = 8;
		public const uint32 LINECALLFEATURE2_COMPLINTRUDE = 16;
		public const uint32 LINECALLFEATURE2_COMPLMESSAGE = 32;
		public const uint32 LINECALLFEATURE2_TRANSFERNORM = 64;
		public const uint32 LINECALLFEATURE2_TRANSFERCONF = 128;
		public const uint32 LINECALLFEATURE2_PARKDIRECT = 256;
		public const uint32 LINECALLFEATURE2_PARKNONDIRECT = 512;
		public const uint32 LINECALLHUBTRACKING_NONE = 0;
		public const uint32 LINECALLHUBTRACKING_PROVIDERLEVEL = 1;
		public const uint32 LINECALLHUBTRACKING_ALLCALLS = 2;
		public const uint32 LINECALLINFOSTATE_OTHER = 1;
		public const uint32 LINECALLINFOSTATE_DEVSPECIFIC = 2;
		public const uint32 LINECALLINFOSTATE_BEARERMODE = 4;
		public const uint32 LINECALLINFOSTATE_RATE = 8;
		public const uint32 LINECALLINFOSTATE_MEDIAMODE = 16;
		public const uint32 LINECALLINFOSTATE_APPSPECIFIC = 32;
		public const uint32 LINECALLINFOSTATE_CALLID = 64;
		public const uint32 LINECALLINFOSTATE_RELATEDCALLID = 128;
		public const uint32 LINECALLINFOSTATE_ORIGIN = 256;
		public const uint32 LINECALLINFOSTATE_REASON = 512;
		public const uint32 LINECALLINFOSTATE_COMPLETIONID = 1024;
		public const uint32 LINECALLINFOSTATE_NUMOWNERINCR = 2048;
		public const uint32 LINECALLINFOSTATE_NUMOWNERDECR = 4096;
		public const uint32 LINECALLINFOSTATE_NUMMONITORS = 8192;
		public const uint32 LINECALLINFOSTATE_TRUNK = 16384;
		public const uint32 LINECALLINFOSTATE_CALLERID = 32768;
		public const uint32 LINECALLINFOSTATE_CALLEDID = 65536;
		public const uint32 LINECALLINFOSTATE_CONNECTEDID = 131072;
		public const uint32 LINECALLINFOSTATE_REDIRECTIONID = 262144;
		public const uint32 LINECALLINFOSTATE_REDIRECTINGID = 524288;
		public const uint32 LINECALLINFOSTATE_DISPLAY = 1048576;
		public const uint32 LINECALLINFOSTATE_USERUSERINFO = 2097152;
		public const uint32 LINECALLINFOSTATE_HIGHLEVELCOMP = 4194304;
		public const uint32 LINECALLINFOSTATE_LOWLEVELCOMP = 8388608;
		public const uint32 LINECALLINFOSTATE_CHARGINGINFO = 16777216;
		public const uint32 LINECALLINFOSTATE_TERMINAL = 33554432;
		public const uint32 LINECALLINFOSTATE_DIALPARAMS = 67108864;
		public const uint32 LINECALLINFOSTATE_MONITORMODES = 134217728;
		public const uint32 LINECALLINFOSTATE_TREATMENT = 268435456;
		public const uint32 LINECALLINFOSTATE_QOS = 536870912;
		public const uint32 LINECALLINFOSTATE_CALLDATA = 1073741824;
		public const uint32 LINECALLORIGIN_OUTBOUND = 1;
		public const uint32 LINECALLORIGIN_INTERNAL = 2;
		public const uint32 LINECALLORIGIN_EXTERNAL = 4;
		public const uint32 LINECALLORIGIN_UNKNOWN = 16;
		public const uint32 LINECALLORIGIN_UNAVAIL = 32;
		public const uint32 LINECALLORIGIN_CONFERENCE = 64;
		public const uint32 LINECALLORIGIN_INBOUND = 128;
		public const uint32 LINECALLPARAMFLAGS_SECURE = 1;
		public const uint32 LINECALLPARAMFLAGS_IDLE = 2;
		public const uint32 LINECALLPARAMFLAGS_BLOCKID = 4;
		public const uint32 LINECALLPARAMFLAGS_ORIGOFFHOOK = 8;
		public const uint32 LINECALLPARAMFLAGS_DESTOFFHOOK = 16;
		public const uint32 LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 32;
		public const uint32 LINECALLPARAMFLAGS_PREDICTIVEDIAL = 64;
		public const uint32 LINECALLPARAMFLAGS_ONESTEPTRANSFER = 128;
		public const uint32 LINECALLPARTYID_BLOCKED = 1;
		public const uint32 LINECALLPARTYID_OUTOFAREA = 2;
		public const uint32 LINECALLPARTYID_NAME = 4;
		public const uint32 LINECALLPARTYID_ADDRESS = 8;
		public const uint32 LINECALLPARTYID_PARTIAL = 16;
		public const uint32 LINECALLPARTYID_UNKNOWN = 32;
		public const uint32 LINECALLPARTYID_UNAVAIL = 64;
		public const uint32 LINECALLPRIVILEGE_NONE = 1;
		public const uint32 LINECALLPRIVILEGE_MONITOR = 2;
		public const uint32 LINECALLPRIVILEGE_OWNER = 4;
		public const uint32 LINECALLREASON_DIRECT = 1;
		public const uint32 LINECALLREASON_FWDBUSY = 2;
		public const uint32 LINECALLREASON_FWDNOANSWER = 4;
		public const uint32 LINECALLREASON_FWDUNCOND = 8;
		public const uint32 LINECALLREASON_PICKUP = 16;
		public const uint32 LINECALLREASON_UNPARK = 32;
		public const uint32 LINECALLREASON_REDIRECT = 64;
		public const uint32 LINECALLREASON_CALLCOMPLETION = 128;
		public const uint32 LINECALLREASON_TRANSFER = 256;
		public const uint32 LINECALLREASON_REMINDER = 512;
		public const uint32 LINECALLREASON_UNKNOWN = 1024;
		public const uint32 LINECALLREASON_UNAVAIL = 2048;
		public const uint32 LINECALLREASON_INTRUDE = 4096;
		public const uint32 LINECALLREASON_PARKED = 8192;
		public const uint32 LINECALLREASON_CAMPEDON = 16384;
		public const uint32 LINECALLREASON_ROUTEREQUEST = 32768;
		public const uint32 LINECALLSELECT_LINE = 1;
		public const uint32 LINECALLSELECT_ADDRESS = 2;
		public const uint32 LINECALLSELECT_CALL = 4;
		public const uint32 LINECALLSELECT_DEVICEID = 8;
		public const uint32 LINECALLSELECT_CALLID = 16;
		public const uint32 LINECALLSTATE_IDLE = 1;
		public const uint32 LINECALLSTATE_OFFERING = 2;
		public const uint32 LINECALLSTATE_ACCEPTED = 4;
		public const uint32 LINECALLSTATE_DIALTONE = 8;
		public const uint32 LINECALLSTATE_DIALING = 16;
		public const uint32 LINECALLSTATE_RINGBACK = 32;
		public const uint32 LINECALLSTATE_BUSY = 64;
		public const uint32 LINECALLSTATE_SPECIALINFO = 128;
		public const uint32 LINECALLSTATE_CONNECTED = 256;
		public const uint32 LINECALLSTATE_PROCEEDING = 512;
		public const uint32 LINECALLSTATE_ONHOLD = 1024;
		public const uint32 LINECALLSTATE_CONFERENCED = 2048;
		public const uint32 LINECALLSTATE_ONHOLDPENDCONF = 4096;
		public const uint32 LINECALLSTATE_ONHOLDPENDTRANSFER = 8192;
		public const uint32 LINECALLSTATE_DISCONNECTED = 16384;
		public const uint32 LINECALLSTATE_UNKNOWN = 32768;
		public const uint32 LINECALLTREATMENT_SILENCE = 1;
		public const uint32 LINECALLTREATMENT_RINGBACK = 2;
		public const uint32 LINECALLTREATMENT_BUSY = 3;
		public const uint32 LINECALLTREATMENT_MUSIC = 4;
		public const uint32 LINECARDOPTION_PREDEFINED = 1;
		public const uint32 LINECARDOPTION_HIDDEN = 2;
		public const uint32 LINECONNECTEDMODE_ACTIVE = 1;
		public const uint32 LINECONNECTEDMODE_INACTIVE = 2;
		public const uint32 LINECONNECTEDMODE_ACTIVEHELD = 4;
		public const uint32 LINECONNECTEDMODE_INACTIVEHELD = 8;
		public const uint32 LINECONNECTEDMODE_CONFIRMED = 16;
		public const uint32 LINEDEVCAPFLAGS_CROSSADDRCONF = 1;
		public const uint32 LINEDEVCAPFLAGS_HIGHLEVCOMP = 2;
		public const uint32 LINEDEVCAPFLAGS_LOWLEVCOMP = 4;
		public const uint32 LINEDEVCAPFLAGS_MEDIACONTROL = 8;
		public const uint32 LINEDEVCAPFLAGS_MULTIPLEADDR = 16;
		public const uint32 LINEDEVCAPFLAGS_CLOSEDROP = 32;
		public const uint32 LINEDEVCAPFLAGS_DIALBILLING = 64;
		public const uint32 LINEDEVCAPFLAGS_DIALQUIET = 128;
		public const uint32 LINEDEVCAPFLAGS_DIALDIALTONE = 256;
		public const uint32 LINEDEVCAPFLAGS_MSP = 512;
		public const uint32 LINEDEVCAPFLAGS_CALLHUB = 1024;
		public const uint32 LINEDEVCAPFLAGS_CALLHUBTRACKING = 2048;
		public const uint32 LINEDEVCAPFLAGS_PRIVATEOBJECTS = 4096;
		public const uint32 LINEDEVCAPFLAGS_LOCAL = 8192;
		public const uint32 LINEDEVSTATE_OTHER = 1;
		public const uint32 LINEDEVSTATE_RINGING = 2;
		public const uint32 LINEDEVSTATE_CONNECTED = 4;
		public const uint32 LINEDEVSTATE_DISCONNECTED = 8;
		public const uint32 LINEDEVSTATE_MSGWAITON = 16;
		public const uint32 LINEDEVSTATE_MSGWAITOFF = 32;
		public const uint32 LINEDEVSTATE_INSERVICE = 64;
		public const uint32 LINEDEVSTATE_OUTOFSERVICE = 128;
		public const uint32 LINEDEVSTATE_MAINTENANCE = 256;
		public const uint32 LINEDEVSTATE_OPEN = 512;
		public const uint32 LINEDEVSTATE_CLOSE = 1024;
		public const uint32 LINEDEVSTATE_NUMCALLS = 2048;
		public const uint32 LINEDEVSTATE_NUMCOMPLETIONS = 4096;
		public const uint32 LINEDEVSTATE_TERMINALS = 8192;
		public const uint32 LINEDEVSTATE_ROAMMODE = 16384;
		public const uint32 LINEDEVSTATE_BATTERY = 32768;
		public const uint32 LINEDEVSTATE_SIGNAL = 65536;
		public const uint32 LINEDEVSTATE_DEVSPECIFIC = 131072;
		public const uint32 LINEDEVSTATE_REINIT = 262144;
		public const uint32 LINEDEVSTATE_LOCK = 524288;
		public const uint32 LINEDEVSTATE_CAPSCHANGE = 1048576;
		public const uint32 LINEDEVSTATE_CONFIGCHANGE = 2097152;
		public const uint32 LINEDEVSTATE_TRANSLATECHANGE = 4194304;
		public const uint32 LINEDEVSTATE_COMPLCANCEL = 8388608;
		public const uint32 LINEDEVSTATE_REMOVED = 16777216;
		public const uint32 LINEDEVSTATUSFLAGS_CONNECTED = 1;
		public const uint32 LINEDEVSTATUSFLAGS_MSGWAIT = 2;
		public const uint32 LINEDEVSTATUSFLAGS_INSERVICE = 4;
		public const uint32 LINEDEVSTATUSFLAGS_LOCKED = 8;
		public const uint32 LINEDIALTONEMODE_NORMAL = 1;
		public const uint32 LINEDIALTONEMODE_SPECIAL = 2;
		public const uint32 LINEDIALTONEMODE_INTERNAL = 4;
		public const uint32 LINEDIALTONEMODE_EXTERNAL = 8;
		public const uint32 LINEDIALTONEMODE_UNKNOWN = 16;
		public const uint32 LINEDIALTONEMODE_UNAVAIL = 32;
		public const uint32 LINEDIGITMODE_PULSE = 1;
		public const uint32 LINEDIGITMODE_DTMF = 2;
		public const uint32 LINEDIGITMODE_DTMFEND = 4;
		public const uint32 LINEDISCONNECTMODE_NORMAL = 1;
		public const uint32 LINEDISCONNECTMODE_UNKNOWN = 2;
		public const uint32 LINEDISCONNECTMODE_REJECT = 4;
		public const uint32 LINEDISCONNECTMODE_PICKUP = 8;
		public const uint32 LINEDISCONNECTMODE_FORWARDED = 16;
		public const uint32 LINEDISCONNECTMODE_BUSY = 32;
		public const uint32 LINEDISCONNECTMODE_NOANSWER = 64;
		public const uint32 LINEDISCONNECTMODE_BADADDRESS = 128;
		public const uint32 LINEDISCONNECTMODE_UNREACHABLE = 256;
		public const uint32 LINEDISCONNECTMODE_CONGESTION = 512;
		public const uint32 LINEDISCONNECTMODE_INCOMPATIBLE = 1024;
		public const uint32 LINEDISCONNECTMODE_UNAVAIL = 2048;
		public const uint32 LINEDISCONNECTMODE_NODIALTONE = 4096;
		public const uint32 LINEDISCONNECTMODE_NUMBERCHANGED = 8192;
		public const uint32 LINEDISCONNECTMODE_OUTOFORDER = 16384;
		public const uint32 LINEDISCONNECTMODE_TEMPFAILURE = 32768;
		public const uint32 LINEDISCONNECTMODE_QOSUNAVAIL = 65536;
		public const uint32 LINEDISCONNECTMODE_BLOCKED = 131072;
		public const uint32 LINEDISCONNECTMODE_DONOTDISTURB = 262144;
		public const uint32 LINEDISCONNECTMODE_CANCELLED = 524288;
		public const uint32 LINEDISCONNECTMODE_DESTINATIONBARRED = 1048576;
		public const uint32 LINEDISCONNECTMODE_FDNRESTRICT = 2097152;
		public const uint32 LINEERR_ALLOCATED = 2147483649;
		public const uint32 LINEERR_BADDEVICEID = 2147483650;
		public const uint32 LINEERR_BEARERMODEUNAVAIL = 2147483651;
		public const uint32 LINEERR_CALLUNAVAIL = 2147483653;
		public const uint32 LINEERR_COMPLETIONOVERRUN = 2147483654;
		public const uint32 LINEERR_CONFERENCEFULL = 2147483655;
		public const uint32 LINEERR_DIALBILLING = 2147483656;
		public const uint32 LINEERR_DIALDIALTONE = 2147483657;
		public const uint32 LINEERR_DIALPROMPT = 2147483658;
		public const uint32 LINEERR_DIALQUIET = 2147483659;
		public const uint32 LINEERR_INCOMPATIBLEAPIVERSION = 2147483660;
		public const uint32 LINEERR_INCOMPATIBLEEXTVERSION = 2147483661;
		public const uint32 LINEERR_INIFILECORRUPT = 2147483662;
		public const uint32 LINEERR_INUSE = 2147483663;
		public const uint32 LINEERR_INVALADDRESS = 2147483664;
		public const uint32 LINEERR_INVALADDRESSID = 2147483665;
		public const uint32 LINEERR_INVALADDRESSMODE = 2147483666;
		public const uint32 LINEERR_INVALADDRESSSTATE = 2147483667;
		public const uint32 LINEERR_INVALAPPHANDLE = 2147483668;
		public const uint32 LINEERR_INVALAPPNAME = 2147483669;
		public const uint32 LINEERR_INVALBEARERMODE = 2147483670;
		public const uint32 LINEERR_INVALCALLCOMPLMODE = 2147483671;
		public const uint32 LINEERR_INVALCALLHANDLE = 2147483672;
		public const uint32 LINEERR_INVALCALLPARAMS = 2147483673;
		public const uint32 LINEERR_INVALCALLPRIVILEGE = 2147483674;
		public const uint32 LINEERR_INVALCALLSELECT = 2147483675;
		public const uint32 LINEERR_INVALCALLSTATE = 2147483676;
		public const uint32 LINEERR_INVALCALLSTATELIST = 2147483677;
		public const uint32 LINEERR_INVALCARD = 2147483678;
		public const uint32 LINEERR_INVALCOMPLETIONID = 2147483679;
		public const uint32 LINEERR_INVALCONFCALLHANDLE = 2147483680;
		public const uint32 LINEERR_INVALCONSULTCALLHANDLE = 2147483681;
		public const uint32 LINEERR_INVALCOUNTRYCODE = 2147483682;
		public const uint32 LINEERR_INVALDEVICECLASS = 2147483683;
		public const uint32 LINEERR_INVALDEVICEHANDLE = 2147483684;
		public const uint32 LINEERR_INVALDIALPARAMS = 2147483685;
		public const uint32 LINEERR_INVALDIGITLIST = 2147483686;
		public const uint32 LINEERR_INVALDIGITMODE = 2147483687;
		public const uint32 LINEERR_INVALDIGITS = 2147483688;
		public const uint32 LINEERR_INVALEXTVERSION = 2147483689;
		public const uint32 LINEERR_INVALGROUPID = 2147483690;
		public const uint32 LINEERR_INVALLINEHANDLE = 2147483691;
		public const uint32 LINEERR_INVALLINESTATE = 2147483692;
		public const uint32 LINEERR_INVALLOCATION = 2147483693;
		public const uint32 LINEERR_INVALMEDIALIST = 2147483694;
		public const uint32 LINEERR_INVALMEDIAMODE = 2147483695;
		public const uint32 LINEERR_INVALMESSAGEID = 2147483696;
		public const uint32 LINEERR_INVALPARAM = 2147483698;
		public const uint32 LINEERR_INVALPARKID = 2147483699;
		public const uint32 LINEERR_INVALPARKMODE = 2147483700;
		public const uint32 LINEERR_INVALPOINTER = 2147483701;
		public const uint32 LINEERR_INVALPRIVSELECT = 2147483702;
		public const uint32 LINEERR_INVALRATE = 2147483703;
		public const uint32 LINEERR_INVALREQUESTMODE = 2147483704;
		public const uint32 LINEERR_INVALTERMINALID = 2147483705;
		public const uint32 LINEERR_INVALTERMINALMODE = 2147483706;
		public const uint32 LINEERR_INVALTIMEOUT = 2147483707;
		public const uint32 LINEERR_INVALTONE = 2147483708;
		public const uint32 LINEERR_INVALTONELIST = 2147483709;
		public const uint32 LINEERR_INVALTONEMODE = 2147483710;
		public const uint32 LINEERR_INVALTRANSFERMODE = 2147483711;
		public const uint32 LINEERR_LINEMAPPERFAILED = 2147483712;
		public const uint32 LINEERR_NOCONFERENCE = 2147483713;
		public const uint32 LINEERR_NODEVICE = 2147483714;
		public const uint32 LINEERR_NODRIVER = 2147483715;
		public const uint32 LINEERR_NOMEM = 2147483716;
		public const uint32 LINEERR_NOREQUEST = 2147483717;
		public const uint32 LINEERR_NOTOWNER = 2147483718;
		public const uint32 LINEERR_NOTREGISTERED = 2147483719;
		public const uint32 LINEERR_OPERATIONFAILED = 2147483720;
		public const uint32 LINEERR_OPERATIONUNAVAIL = 2147483721;
		public const uint32 LINEERR_RATEUNAVAIL = 2147483722;
		public const uint32 LINEERR_RESOURCEUNAVAIL = 2147483723;
		public const uint32 LINEERR_REQUESTOVERRUN = 2147483724;
		public const uint32 LINEERR_STRUCTURETOOSMALL = 2147483725;
		public const uint32 LINEERR_TARGETNOTFOUND = 2147483726;
		public const uint32 LINEERR_TARGETSELF = 2147483727;
		public const uint32 LINEERR_UNINITIALIZED = 2147483728;
		public const uint32 LINEERR_USERUSERINFOTOOBIG = 2147483729;
		public const uint32 LINEERR_REINIT = 2147483730;
		public const uint32 LINEERR_ADDRESSBLOCKED = 2147483731;
		public const uint32 LINEERR_BILLINGREJECTED = 2147483732;
		public const uint32 LINEERR_INVALFEATURE = 2147483733;
		public const uint32 LINEERR_NOMULTIPLEINSTANCE = 2147483734;
		public const uint32 LINEERR_INVALAGENTID = 2147483735;
		public const uint32 LINEERR_INVALAGENTGROUP = 2147483736;
		public const uint32 LINEERR_INVALPASSWORD = 2147483737;
		public const uint32 LINEERR_INVALAGENTSTATE = 2147483738;
		public const uint32 LINEERR_INVALAGENTACTIVITY = 2147483739;
		public const uint32 LINEERR_DIALVOICEDETECT = 2147483740;
		public const uint32 LINEERR_USERCANCELLED = 2147483741;
		public const uint32 LINEERR_INVALADDRESSTYPE = 2147483742;
		public const uint32 LINEERR_INVALAGENTSESSIONSTATE = 2147483743;
		public const uint32 LINEERR_DISCONNECTED = 2147483744;
		public const uint32 LINEERR_SERVICE_NOT_RUNNING = 2147483745;
		public const uint32 LINEFEATURE_DEVSPECIFIC = 1;
		public const uint32 LINEFEATURE_DEVSPECIFICFEAT = 2;
		public const uint32 LINEFEATURE_FORWARD = 4;
		public const uint32 LINEFEATURE_MAKECALL = 8;
		public const uint32 LINEFEATURE_SETMEDIACONTROL = 16;
		public const uint32 LINEFEATURE_SETTERMINAL = 32;
		public const uint32 LINEFEATURE_SETDEVSTATUS = 64;
		public const uint32 LINEFEATURE_FORWARDFWD = 128;
		public const uint32 LINEFEATURE_FORWARDDND = 256;
		public const uint32 LINEFORWARDMODE_UNCOND = 1;
		public const uint32 LINEFORWARDMODE_UNCONDINTERNAL = 2;
		public const uint32 LINEFORWARDMODE_UNCONDEXTERNAL = 4;
		public const uint32 LINEFORWARDMODE_UNCONDSPECIFIC = 8;
		public const uint32 LINEFORWARDMODE_BUSY = 16;
		public const uint32 LINEFORWARDMODE_BUSYINTERNAL = 32;
		public const uint32 LINEFORWARDMODE_BUSYEXTERNAL = 64;
		public const uint32 LINEFORWARDMODE_BUSYSPECIFIC = 128;
		public const uint32 LINEFORWARDMODE_NOANSW = 256;
		public const uint32 LINEFORWARDMODE_NOANSWINTERNAL = 512;
		public const uint32 LINEFORWARDMODE_NOANSWEXTERNAL = 1024;
		public const uint32 LINEFORWARDMODE_NOANSWSPECIFIC = 2048;
		public const uint32 LINEFORWARDMODE_BUSYNA = 4096;
		public const uint32 LINEFORWARDMODE_BUSYNAINTERNAL = 8192;
		public const uint32 LINEFORWARDMODE_BUSYNAEXTERNAL = 16384;
		public const uint32 LINEFORWARDMODE_BUSYNASPECIFIC = 32768;
		public const uint32 LINEFORWARDMODE_UNKNOWN = 65536;
		public const uint32 LINEFORWARDMODE_UNAVAIL = 131072;
		public const uint32 LINEGATHERTERM_BUFFERFULL = 1;
		public const uint32 LINEGATHERTERM_TERMDIGIT = 2;
		public const uint32 LINEGATHERTERM_FIRSTTIMEOUT = 4;
		public const uint32 LINEGATHERTERM_INTERTIMEOUT = 8;
		public const uint32 LINEGATHERTERM_CANCEL = 16;
		public const uint32 LINEGENERATETERM_DONE = 1;
		public const uint32 LINEGENERATETERM_CANCEL = 2;
		public const uint32 LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1;
		public const uint32 LINEINITIALIZEEXOPTION_USEEVENT = 2;
		public const uint32 LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3;
		public const uint32 LINEINITIALIZEEXOPTION_CALLHUBTRACKING = 2147483648;
		public const uint32 LINELOCATIONOPTION_PULSEDIAL = 1;
		public const uint32 LINEMAPPER = 4294967295;
		public const uint32 LINEMEDIACONTROL_NONE = 1;
		public const uint32 LINEMEDIACONTROL_START = 2;
		public const uint32 LINEMEDIACONTROL_RESET = 4;
		public const uint32 LINEMEDIACONTROL_PAUSE = 8;
		public const uint32 LINEMEDIACONTROL_RESUME = 16;
		public const uint32 LINEMEDIACONTROL_RATEUP = 32;
		public const uint32 LINEMEDIACONTROL_RATEDOWN = 64;
		public const uint32 LINEMEDIACONTROL_RATENORMAL = 128;
		public const uint32 LINEMEDIACONTROL_VOLUMEUP = 256;
		public const uint32 LINEMEDIACONTROL_VOLUMEDOWN = 512;
		public const uint32 LINEMEDIACONTROL_VOLUMENORMAL = 1024;
		public const uint32 LINEMEDIAMODE_UNKNOWN = 2;
		public const uint32 LINEMEDIAMODE_INTERACTIVEVOICE = 4;
		public const uint32 LINEMEDIAMODE_AUTOMATEDVOICE = 8;
		public const uint32 LINEMEDIAMODE_DATAMODEM = 16;
		public const uint32 LINEMEDIAMODE_G3FAX = 32;
		public const uint32 LINEMEDIAMODE_TDD = 64;
		public const uint32 LINEMEDIAMODE_G4FAX = 128;
		public const uint32 LINEMEDIAMODE_DIGITALDATA = 256;
		public const uint32 LINEMEDIAMODE_TELETEX = 512;
		public const uint32 LINEMEDIAMODE_VIDEOTEX = 1024;
		public const uint32 LINEMEDIAMODE_TELEX = 2048;
		public const uint32 LINEMEDIAMODE_MIXED = 4096;
		public const uint32 LINEMEDIAMODE_ADSI = 8192;
		public const uint32 LINEMEDIAMODE_VOICEVIEW = 16384;
		public const uint32 LINEMEDIAMODE_VIDEO = 32768;
		public const uint32 LAST_LINEMEDIAMODE = 32768;
		public const uint32 LINEOFFERINGMODE_ACTIVE = 1;
		public const uint32 LINEOFFERINGMODE_INACTIVE = 2;
		public const uint32 LINEOPENOPTION_SINGLEADDRESS = 2147483648;
		public const uint32 LINEOPENOPTION_PROXY = 1073741824;
		public const uint32 LINEPARKMODE_DIRECTED = 1;
		public const uint32 LINEPARKMODE_NONDIRECTED = 2;
		public const uint32 LINEPROXYREQUEST_SETAGENTGROUP = 1;
		public const uint32 LINEPROXYREQUEST_SETAGENTSTATE = 2;
		public const uint32 LINEPROXYREQUEST_SETAGENTACTIVITY = 3;
		public const uint32 LINEPROXYREQUEST_GETAGENTCAPS = 4;
		public const uint32 LINEPROXYREQUEST_GETAGENTSTATUS = 5;
		public const uint32 LINEPROXYREQUEST_AGENTSPECIFIC = 6;
		public const uint32 LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 7;
		public const uint32 LINEPROXYREQUEST_GETAGENTGROUPLIST = 8;
		public const uint32 LINEPROXYREQUEST_CREATEAGENT = 9;
		public const uint32 LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD = 10;
		public const uint32 LINEPROXYREQUEST_GETAGENTINFO = 11;
		public const uint32 LINEPROXYREQUEST_CREATEAGENTSESSION = 12;
		public const uint32 LINEPROXYREQUEST_GETAGENTSESSIONLIST = 13;
		public const uint32 LINEPROXYREQUEST_SETAGENTSESSIONSTATE = 14;
		public const uint32 LINEPROXYREQUEST_GETAGENTSESSIONINFO = 15;
		public const uint32 LINEPROXYREQUEST_GETQUEUELIST = 16;
		public const uint32 LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD = 17;
		public const uint32 LINEPROXYREQUEST_GETQUEUEINFO = 18;
		public const uint32 LINEPROXYREQUEST_GETGROUPLIST = 19;
		public const uint32 LINEPROXYREQUEST_SETAGENTSTATEEX = 20;
		public const uint32 LINEREMOVEFROMCONF_NONE = 1;
		public const uint32 LINEREMOVEFROMCONF_LAST = 2;
		public const uint32 LINEREMOVEFROMCONF_ANY = 3;
		public const uint32 LINEREQUESTMODE_MAKECALL = 1;
		public const uint32 LINEREQUESTMODE_MEDIACALL = 2;
		public const uint32 LINEREQUESTMODE_DROP = 4;
		public const uint32 LAST_LINEREQUESTMODE = 2;
		public const uint32 LINEROAMMODE_UNKNOWN = 1;
		public const uint32 LINEROAMMODE_UNAVAIL = 2;
		public const uint32 LINEROAMMODE_HOME = 4;
		public const uint32 LINEROAMMODE_ROAMA = 8;
		public const uint32 LINEROAMMODE_ROAMB = 16;
		public const uint32 LINESPECIALINFO_NOCIRCUIT = 1;
		public const uint32 LINESPECIALINFO_CUSTIRREG = 2;
		public const uint32 LINESPECIALINFO_REORDER = 4;
		public const uint32 LINESPECIALINFO_UNKNOWN = 8;
		public const uint32 LINESPECIALINFO_UNAVAIL = 16;
		public const uint32 LINETERMDEV_PHONE = 1;
		public const uint32 LINETERMDEV_HEADSET = 2;
		public const uint32 LINETERMDEV_SPEAKER = 4;
		public const uint32 LINETERMMODE_BUTTONS = 1;
		public const uint32 LINETERMMODE_LAMPS = 2;
		public const uint32 LINETERMMODE_DISPLAY = 4;
		public const uint32 LINETERMMODE_RINGER = 8;
		public const uint32 LINETERMMODE_HOOKSWITCH = 16;
		public const uint32 LINETERMMODE_MEDIATOLINE = 32;
		public const uint32 LINETERMMODE_MEDIAFROMLINE = 64;
		public const uint32 LINETERMMODE_MEDIABIDIRECT = 128;
		public const uint32 LINETERMSHARING_PRIVATE = 1;
		public const uint32 LINETERMSHARING_SHAREDEXCL = 2;
		public const uint32 LINETERMSHARING_SHAREDCONF = 4;
		public const uint32 LINETOLLLISTOPTION_ADD = 1;
		public const uint32 LINETOLLLISTOPTION_REMOVE = 2;
		public const uint32 LINETONEMODE_CUSTOM = 1;
		public const uint32 LINETONEMODE_RINGBACK = 2;
		public const uint32 LINETONEMODE_BUSY = 4;
		public const uint32 LINETONEMODE_BEEP = 8;
		public const uint32 LINETONEMODE_BILLING = 16;
		public const uint32 LINETRANSFERMODE_TRANSFER = 1;
		public const uint32 LINETRANSFERMODE_CONFERENCE = 2;
		public const uint32 LINETRANSLATEOPTION_CARDOVERRIDE = 1;
		public const uint32 LINETRANSLATEOPTION_CANCELCALLWAITING = 2;
		public const uint32 LINETRANSLATEOPTION_FORCELOCAL = 4;
		public const uint32 LINETRANSLATEOPTION_FORCELD = 8;
		public const uint32 LINETRANSLATERESULT_CANONICAL = 1;
		public const uint32 LINETRANSLATERESULT_INTERNATIONAL = 2;
		public const uint32 LINETRANSLATERESULT_LONGDISTANCE = 4;
		public const uint32 LINETRANSLATERESULT_LOCAL = 8;
		public const uint32 LINETRANSLATERESULT_INTOLLLIST = 16;
		public const uint32 LINETRANSLATERESULT_NOTINTOLLLIST = 32;
		public const uint32 LINETRANSLATERESULT_DIALBILLING = 64;
		public const uint32 LINETRANSLATERESULT_DIALQUIET = 128;
		public const uint32 LINETRANSLATERESULT_DIALDIALTONE = 256;
		public const uint32 LINETRANSLATERESULT_DIALPROMPT = 512;
		public const uint32 LINETRANSLATERESULT_VOICEDETECT = 1024;
		public const uint32 LINETRANSLATERESULT_NOTRANSLATION = 2048;
		public const uint32 PHONEBUTTONFUNCTION_UNKNOWN = 0;
		public const uint32 PHONEBUTTONFUNCTION_CONFERENCE = 1;
		public const uint32 PHONEBUTTONFUNCTION_TRANSFER = 2;
		public const uint32 PHONEBUTTONFUNCTION_DROP = 3;
		public const uint32 PHONEBUTTONFUNCTION_HOLD = 4;
		public const uint32 PHONEBUTTONFUNCTION_RECALL = 5;
		public const uint32 PHONEBUTTONFUNCTION_DISCONNECT = 6;
		public const uint32 PHONEBUTTONFUNCTION_CONNECT = 7;
		public const uint32 PHONEBUTTONFUNCTION_MSGWAITON = 8;
		public const uint32 PHONEBUTTONFUNCTION_MSGWAITOFF = 9;
		public const uint32 PHONEBUTTONFUNCTION_SELECTRING = 10;
		public const uint32 PHONEBUTTONFUNCTION_ABBREVDIAL = 11;
		public const uint32 PHONEBUTTONFUNCTION_FORWARD = 12;
		public const uint32 PHONEBUTTONFUNCTION_PICKUP = 13;
		public const uint32 PHONEBUTTONFUNCTION_RINGAGAIN = 14;
		public const uint32 PHONEBUTTONFUNCTION_PARK = 15;
		public const uint32 PHONEBUTTONFUNCTION_REJECT = 16;
		public const uint32 PHONEBUTTONFUNCTION_REDIRECT = 17;
		public const uint32 PHONEBUTTONFUNCTION_MUTE = 18;
		public const uint32 PHONEBUTTONFUNCTION_VOLUMEUP = 19;
		public const uint32 PHONEBUTTONFUNCTION_VOLUMEDOWN = 20;
		public const uint32 PHONEBUTTONFUNCTION_SPEAKERON = 21;
		public const uint32 PHONEBUTTONFUNCTION_SPEAKEROFF = 22;
		public const uint32 PHONEBUTTONFUNCTION_FLASH = 23;
		public const uint32 PHONEBUTTONFUNCTION_DATAON = 24;
		public const uint32 PHONEBUTTONFUNCTION_DATAOFF = 25;
		public const uint32 PHONEBUTTONFUNCTION_DONOTDISTURB = 26;
		public const uint32 PHONEBUTTONFUNCTION_INTERCOM = 27;
		public const uint32 PHONEBUTTONFUNCTION_BRIDGEDAPP = 28;
		public const uint32 PHONEBUTTONFUNCTION_BUSY = 29;
		public const uint32 PHONEBUTTONFUNCTION_CALLAPP = 30;
		public const uint32 PHONEBUTTONFUNCTION_DATETIME = 31;
		public const uint32 PHONEBUTTONFUNCTION_DIRECTORY = 32;
		public const uint32 PHONEBUTTONFUNCTION_COVER = 33;
		public const uint32 PHONEBUTTONFUNCTION_CALLID = 34;
		public const uint32 PHONEBUTTONFUNCTION_LASTNUM = 35;
		public const uint32 PHONEBUTTONFUNCTION_NIGHTSRV = 36;
		public const uint32 PHONEBUTTONFUNCTION_SENDCALLS = 37;
		public const uint32 PHONEBUTTONFUNCTION_MSGINDICATOR = 38;
		public const uint32 PHONEBUTTONFUNCTION_REPDIAL = 39;
		public const uint32 PHONEBUTTONFUNCTION_SETREPDIAL = 40;
		public const uint32 PHONEBUTTONFUNCTION_SYSTEMSPEED = 41;
		public const uint32 PHONEBUTTONFUNCTION_STATIONSPEED = 42;
		public const uint32 PHONEBUTTONFUNCTION_CAMPON = 43;
		public const uint32 PHONEBUTTONFUNCTION_SAVEREPEAT = 44;
		public const uint32 PHONEBUTTONFUNCTION_QUEUECALL = 45;
		public const uint32 PHONEBUTTONFUNCTION_NONE = 46;
		public const uint32 PHONEBUTTONFUNCTION_SEND = 47;
		public const uint32 PHONEBUTTONMODE_DUMMY = 1;
		public const uint32 PHONEBUTTONMODE_CALL = 2;
		public const uint32 PHONEBUTTONMODE_FEATURE = 4;
		public const uint32 PHONEBUTTONMODE_KEYPAD = 8;
		public const uint32 PHONEBUTTONMODE_LOCAL = 16;
		public const uint32 PHONEBUTTONMODE_DISPLAY = 32;
		public const uint32 PHONEBUTTONSTATE_UP = 1;
		public const uint32 PHONEBUTTONSTATE_DOWN = 2;
		public const uint32 PHONEBUTTONSTATE_UNKNOWN = 4;
		public const uint32 PHONEBUTTONSTATE_UNAVAIL = 8;
		public const uint32 PHONEERR_ALLOCATED = 2415919105;
		public const uint32 PHONEERR_BADDEVICEID = 2415919106;
		public const uint32 PHONEERR_INCOMPATIBLEAPIVERSION = 2415919107;
		public const uint32 PHONEERR_INCOMPATIBLEEXTVERSION = 2415919108;
		public const uint32 PHONEERR_INIFILECORRUPT = 2415919109;
		public const uint32 PHONEERR_INUSE = 2415919110;
		public const uint32 PHONEERR_INVALAPPHANDLE = 2415919111;
		public const uint32 PHONEERR_INVALAPPNAME = 2415919112;
		public const uint32 PHONEERR_INVALBUTTONLAMPID = 2415919113;
		public const uint32 PHONEERR_INVALBUTTONMODE = 2415919114;
		public const uint32 PHONEERR_INVALBUTTONSTATE = 2415919115;
		public const uint32 PHONEERR_INVALDATAID = 2415919116;
		public const uint32 PHONEERR_INVALDEVICECLASS = 2415919117;
		public const uint32 PHONEERR_INVALEXTVERSION = 2415919118;
		public const uint32 PHONEERR_INVALHOOKSWITCHDEV = 2415919119;
		public const uint32 PHONEERR_INVALHOOKSWITCHMODE = 2415919120;
		public const uint32 PHONEERR_INVALLAMPMODE = 2415919121;
		public const uint32 PHONEERR_INVALPARAM = 2415919122;
		public const uint32 PHONEERR_INVALPHONEHANDLE = 2415919123;
		public const uint32 PHONEERR_INVALPHONESTATE = 2415919124;
		public const uint32 PHONEERR_INVALPOINTER = 2415919125;
		public const uint32 PHONEERR_INVALPRIVILEGE = 2415919126;
		public const uint32 PHONEERR_INVALRINGMODE = 2415919127;
		public const uint32 PHONEERR_NODEVICE = 2415919128;
		public const uint32 PHONEERR_NODRIVER = 2415919129;
		public const uint32 PHONEERR_NOMEM = 2415919130;
		public const uint32 PHONEERR_NOTOWNER = 2415919131;
		public const uint32 PHONEERR_OPERATIONFAILED = 2415919132;
		public const uint32 PHONEERR_OPERATIONUNAVAIL = 2415919133;
		public const uint32 PHONEERR_RESOURCEUNAVAIL = 2415919135;
		public const uint32 PHONEERR_REQUESTOVERRUN = 2415919136;
		public const uint32 PHONEERR_STRUCTURETOOSMALL = 2415919137;
		public const uint32 PHONEERR_UNINITIALIZED = 2415919138;
		public const uint32 PHONEERR_REINIT = 2415919139;
		public const uint32 PHONEERR_DISCONNECTED = 2415919140;
		public const uint32 PHONEERR_SERVICE_NOT_RUNNING = 2415919141;
		public const uint32 PHONEFEATURE_GETBUTTONINFO = 1;
		public const uint32 PHONEFEATURE_GETDATA = 2;
		public const uint32 PHONEFEATURE_GETDISPLAY = 4;
		public const uint32 PHONEFEATURE_GETGAINHANDSET = 8;
		public const uint32 PHONEFEATURE_GETGAINSPEAKER = 16;
		public const uint32 PHONEFEATURE_GETGAINHEADSET = 32;
		public const uint32 PHONEFEATURE_GETHOOKSWITCHHANDSET = 64;
		public const uint32 PHONEFEATURE_GETHOOKSWITCHSPEAKER = 128;
		public const uint32 PHONEFEATURE_GETHOOKSWITCHHEADSET = 256;
		public const uint32 PHONEFEATURE_GETLAMP = 512;
		public const uint32 PHONEFEATURE_GETRING = 1024;
		public const uint32 PHONEFEATURE_GETVOLUMEHANDSET = 2048;
		public const uint32 PHONEFEATURE_GETVOLUMESPEAKER = 4096;
		public const uint32 PHONEFEATURE_GETVOLUMEHEADSET = 8192;
		public const uint32 PHONEFEATURE_SETBUTTONINFO = 16384;
		public const uint32 PHONEFEATURE_SETDATA = 32768;
		public const uint32 PHONEFEATURE_SETDISPLAY = 65536;
		public const uint32 PHONEFEATURE_SETGAINHANDSET = 131072;
		public const uint32 PHONEFEATURE_SETGAINSPEAKER = 262144;
		public const uint32 PHONEFEATURE_SETGAINHEADSET = 524288;
		public const uint32 PHONEFEATURE_SETHOOKSWITCHHANDSET = 1048576;
		public const uint32 PHONEFEATURE_SETHOOKSWITCHSPEAKER = 2097152;
		public const uint32 PHONEFEATURE_SETHOOKSWITCHHEADSET = 4194304;
		public const uint32 PHONEFEATURE_SETLAMP = 8388608;
		public const uint32 PHONEFEATURE_SETRING = 16777216;
		public const uint32 PHONEFEATURE_SETVOLUMEHANDSET = 33554432;
		public const uint32 PHONEFEATURE_SETVOLUMESPEAKER = 67108864;
		public const uint32 PHONEFEATURE_SETVOLUMEHEADSET = 134217728;
		public const uint32 PHONEFEATURE_GENERICPHONE = 268435456;
		public const uint32 PHONEHOOKSWITCHDEV_HANDSET = 1;
		public const uint32 PHONEHOOKSWITCHDEV_SPEAKER = 2;
		public const uint32 PHONEHOOKSWITCHDEV_HEADSET = 4;
		public const uint32 PHONEHOOKSWITCHMODE_ONHOOK = 1;
		public const uint32 PHONEHOOKSWITCHMODE_MIC = 2;
		public const uint32 PHONEHOOKSWITCHMODE_SPEAKER = 4;
		public const uint32 PHONEHOOKSWITCHMODE_MICSPEAKER = 8;
		public const uint32 PHONEHOOKSWITCHMODE_UNKNOWN = 16;
		public const uint32 PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1;
		public const uint32 PHONEINITIALIZEEXOPTION_USEEVENT = 2;
		public const uint32 PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3;
		public const uint32 PHONELAMPMODE_DUMMY = 1;
		public const uint32 PHONELAMPMODE_OFF = 2;
		public const uint32 PHONELAMPMODE_STEADY = 4;
		public const uint32 PHONELAMPMODE_WINK = 8;
		public const uint32 PHONELAMPMODE_FLASH = 16;
		public const uint32 PHONELAMPMODE_FLUTTER = 32;
		public const uint32 PHONELAMPMODE_BROKENFLUTTER = 64;
		public const uint32 PHONELAMPMODE_UNKNOWN = 128;
		public const uint32 PHONEPRIVILEGE_MONITOR = 1;
		public const uint32 PHONEPRIVILEGE_OWNER = 2;
		public const uint32 PHONESTATE_OTHER = 1;
		public const uint32 PHONESTATE_CONNECTED = 2;
		public const uint32 PHONESTATE_DISCONNECTED = 4;
		public const uint32 PHONESTATE_OWNER = 8;
		public const uint32 PHONESTATE_MONITORS = 16;
		public const uint32 PHONESTATE_DISPLAY = 32;
		public const uint32 PHONESTATE_LAMP = 64;
		public const uint32 PHONESTATE_RINGMODE = 128;
		public const uint32 PHONESTATE_RINGVOLUME = 256;
		public const uint32 PHONESTATE_HANDSETHOOKSWITCH = 512;
		public const uint32 PHONESTATE_HANDSETVOLUME = 1024;
		public const uint32 PHONESTATE_HANDSETGAIN = 2048;
		public const uint32 PHONESTATE_SPEAKERHOOKSWITCH = 4096;
		public const uint32 PHONESTATE_SPEAKERVOLUME = 8192;
		public const uint32 PHONESTATE_SPEAKERGAIN = 16384;
		public const uint32 PHONESTATE_HEADSETHOOKSWITCH = 32768;
		public const uint32 PHONESTATE_HEADSETVOLUME = 65536;
		public const uint32 PHONESTATE_HEADSETGAIN = 131072;
		public const uint32 PHONESTATE_SUSPEND = 262144;
		public const uint32 PHONESTATE_RESUME = 524288;
		public const uint32 PHONESTATE_DEVSPECIFIC = 1048576;
		public const uint32 PHONESTATE_REINIT = 2097152;
		public const uint32 PHONESTATE_CAPSCHANGE = 4194304;
		public const uint32 PHONESTATE_REMOVED = 8388608;
		public const uint32 PHONESTATUSFLAGS_CONNECTED = 1;
		public const uint32 PHONESTATUSFLAGS_SUSPENDED = 2;
		public const uint32 STRINGFORMAT_ASCII = 1;
		public const uint32 STRINGFORMAT_DBCS = 2;
		public const uint32 STRINGFORMAT_UNICODE = 3;
		public const uint32 STRINGFORMAT_BINARY = 4;
		public const uint32 TAPI_REPLY = 1123;
		public const int32 TAPIERR_CONNECTED = 0;
		public const int32 TAPIERR_DROPPED = -1;
		public const int32 TAPIERR_NOREQUESTRECIPIENT = -2;
		public const int32 TAPIERR_REQUESTQUEUEFULL = -3;
		public const int32 TAPIERR_INVALDESTADDRESS = -4;
		public const int32 TAPIERR_INVALWINDOWHANDLE = -5;
		public const int32 TAPIERR_INVALDEVICECLASS = -6;
		public const int32 TAPIERR_INVALDEVICEID = -7;
		public const int32 TAPIERR_DEVICECLASSUNAVAIL = -8;
		public const int32 TAPIERR_DEVICEIDUNAVAIL = -9;
		public const int32 TAPIERR_DEVICEINUSE = -10;
		public const int32 TAPIERR_DESTBUSY = -11;
		public const int32 TAPIERR_DESTNOANSWER = -12;
		public const int32 TAPIERR_DESTUNAVAIL = -13;
		public const int32 TAPIERR_UNKNOWNWINHANDLE = -14;
		public const int32 TAPIERR_UNKNOWNREQUESTID = -15;
		public const int32 TAPIERR_REQUESTFAILED = -16;
		public const int32 TAPIERR_REQUESTCANCELLED = -17;
		public const int32 TAPIERR_INVALPOINTER = -18;
		public const int32 TAPIERR_NOTADMIN = -19;
		public const int32 TAPIERR_MMCWRITELOCKED = -20;
		public const int32 TAPIERR_PROVIDERALREADYINSTALLED = -21;
		public const int32 TAPIERR_SCP_ALREADY_EXISTS = -22;
		public const int32 TAPIERR_SCP_DOES_NOT_EXIST = -23;
		public const int32 TAPIMAXDESTADDRESSSIZE = 80;
		public const int32 TAPIMAXAPPNAMESIZE = 40;
		public const int32 TAPIMAXCALLEDPARTYSIZE = 40;
		public const int32 TAPIMAXCOMMENTSIZE = 80;
		public const int32 TAPIMAXDEVICECLASSSIZE = 40;
		public const int32 TAPIMAXDEVICEIDSIZE = 40;
		public const uint32 INTERFACEMASK = 16711680;
		public const uint32 DISPIDMASK = 65535;
		public const uint32 IDISPTAPI = 65536;
		public const uint32 IDISPTAPICALLCENTER = 131072;
		public const uint32 IDISPCALLINFO = 65536;
		public const uint32 IDISPBASICCALLCONTROL = 131072;
		public const uint32 IDISPLEGACYCALLMEDIACONTROL = 196608;
		public const uint32 IDISPAGGREGATEDMSPCALLOBJ = 262144;
		public const uint32 IDISPADDRESS = 65536;
		public const uint32 IDISPADDRESSCAPABILITIES = 131072;
		public const uint32 IDISPMEDIASUPPORT = 196608;
		public const uint32 IDISPADDRESSTRANSLATION = 262144;
		public const uint32 IDISPLEGACYADDRESSMEDIACONTROL = 327680;
		public const uint32 IDISPAGGREGATEDMSPADDRESSOBJ = 393216;
		public const uint32 IDISPPHONE = 65536;
		public const uint32 IDISPAPC = 131072;
		public const uint32 IDISPMULTITRACK = 65536;
		public const uint32 IDISPMEDIACONTROL = 131072;
		public const uint32 IDISPMEDIARECORD = 196608;
		public const uint32 IDISPMEDIAPLAYBACK = 262144;
		public const uint32 IDISPFILETRACK = 65536;
		public const uint32 TAPIMEDIATYPE_AUDIO = 8;
		public const uint32 TAPIMEDIATYPE_VIDEO = 32768;
		public const uint32 TAPIMEDIATYPE_DATAMODEM = 16;
		public const uint32 TAPIMEDIATYPE_G3FAX = 32;
		public const uint32 TAPIMEDIATYPE_MULTITRACK = 65536;
		public const uint32 TSPI_MESSAGE_BASE = 500;
		public const uint32 LINETSPIOPTION_NONREENTRANT = 1;
		public const int32 TUISPIDLL_OBJECT_LINEID = 1;
		public const int32 TUISPIDLL_OBJECT_PHONEID = 2;
		public const int32 TUISPIDLL_OBJECT_PROVIDERID = 3;
		public const int32 TUISPIDLL_OBJECT_DIALOGINSTANCE = 4;
		public const uint32 PRIVATEOBJECT_NONE = 1;
		public const uint32 PRIVATEOBJECT_CALLID = 2;
		public const uint32 PRIVATEOBJECT_LINE = 3;
		public const uint32 PRIVATEOBJECT_CALL = 4;
		public const uint32 PRIVATEOBJECT_PHONE = 5;
		public const uint32 PRIVATEOBJECT_ADDRESS = 6;
		public const uint32 LINEQOSREQUESTTYPE_SERVICELEVEL = 1;
		public const uint32 LINEQOSSERVICELEVEL_NEEDED = 1;
		public const uint32 LINEQOSSERVICELEVEL_IFAVAILABLE = 2;
		public const uint32 LINEQOSSERVICELEVEL_BESTEFFORT = 3;
		public const uint32 LINEEQOSINFO_NOQOS = 1;
		public const uint32 LINEEQOSINFO_ADMISSIONFAILURE = 2;
		public const uint32 LINEEQOSINFO_POLICYFAILURE = 3;
		public const uint32 LINEEQOSINFO_GENERICERROR = 4;
		public const uint32 TSPI_PROC_BASE = 500;
		public const uint32 TSPI_LINEACCEPT = 500;
		public const uint32 TSPI_LINEADDTOCONFERENCE = 501;
		public const uint32 TSPI_LINEANSWER = 502;
		public const uint32 TSPI_LINEBLINDTRANSFER = 503;
		public const uint32 TSPI_LINECLOSE = 504;
		public const uint32 TSPI_LINECLOSECALL = 505;
		public const uint32 TSPI_LINECOMPLETECALL = 506;
		public const uint32 TSPI_LINECOMPLETETRANSFER = 507;
		public const uint32 TSPI_LINECONDITIONALMEDIADETECTION = 508;
		public const uint32 TSPI_LINECONFIGDIALOG = 509;
		public const uint32 TSPI_LINEDEVSPECIFIC = 510;
		public const uint32 TSPI_LINEDEVSPECIFICFEATURE = 511;
		public const uint32 TSPI_LINEDIAL = 512;
		public const uint32 TSPI_LINEDROP = 513;
		public const uint32 TSPI_LINEFORWARD = 514;
		public const uint32 TSPI_LINEGATHERDIGITS = 515;
		public const uint32 TSPI_LINEGENERATEDIGITS = 516;
		public const uint32 TSPI_LINEGENERATETONE = 517;
		public const uint32 TSPI_LINEGETADDRESSCAPS = 518;
		public const uint32 TSPI_LINEGETADDRESSID = 519;
		public const uint32 TSPI_LINEGETADDRESSSTATUS = 520;
		public const uint32 TSPI_LINEGETCALLADDRESSID = 521;
		public const uint32 TSPI_LINEGETCALLINFO = 522;
		public const uint32 TSPI_LINEGETCALLSTATUS = 523;
		public const uint32 TSPI_LINEGETDEVCAPS = 524;
		public const uint32 TSPI_LINEGETDEVCONFIG = 525;
		public const uint32 TSPI_LINEGETEXTENSIONID = 526;
		public const uint32 TSPI_LINEGETICON = 527;
		public const uint32 TSPI_LINEGETID = 528;
		public const uint32 TSPI_LINEGETLINEDEVSTATUS = 529;
		public const uint32 TSPI_LINEGETNUMADDRESSIDS = 530;
		public const uint32 TSPI_LINEHOLD = 531;
		public const uint32 TSPI_LINEMAKECALL = 532;
		public const uint32 TSPI_LINEMONITORDIGITS = 533;
		public const uint32 TSPI_LINEMONITORMEDIA = 534;
		public const uint32 TSPI_LINEMONITORTONES = 535;
		public const uint32 TSPI_LINENEGOTIATEEXTVERSION = 536;
		public const uint32 TSPI_LINENEGOTIATETSPIVERSION = 537;
		public const uint32 TSPI_LINEOPEN = 538;
		public const uint32 TSPI_LINEPARK = 539;
		public const uint32 TSPI_LINEPICKUP = 540;
		public const uint32 TSPI_LINEPREPAREADDTOCONFERENCE = 541;
		public const uint32 TSPI_LINEREDIRECT = 542;
		public const uint32 TSPI_LINEREMOVEFROMCONFERENCE = 543;
		public const uint32 TSPI_LINESECURECALL = 544;
		public const uint32 TSPI_LINESELECTEXTVERSION = 545;
		public const uint32 TSPI_LINESENDUSERUSERINFO = 546;
		public const uint32 TSPI_LINESETAPPSPECIFIC = 547;
		public const uint32 TSPI_LINESETCALLPARAMS = 548;
		public const uint32 TSPI_LINESETDEFAULTMEDIADETECTION = 549;
		public const uint32 TSPI_LINESETDEVCONFIG = 550;
		public const uint32 TSPI_LINESETMEDIACONTROL = 551;
		public const uint32 TSPI_LINESETMEDIAMODE = 552;
		public const uint32 TSPI_LINESETSTATUSMESSAGES = 553;
		public const uint32 TSPI_LINESETTERMINAL = 554;
		public const uint32 TSPI_LINESETUPCONFERENCE = 555;
		public const uint32 TSPI_LINESETUPTRANSFER = 556;
		public const uint32 TSPI_LINESWAPHOLD = 557;
		public const uint32 TSPI_LINEUNCOMPLETECALL = 558;
		public const uint32 TSPI_LINEUNHOLD = 559;
		public const uint32 TSPI_LINEUNPARK = 560;
		public const uint32 TSPI_PHONECLOSE = 561;
		public const uint32 TSPI_PHONECONFIGDIALOG = 562;
		public const uint32 TSPI_PHONEDEVSPECIFIC = 563;
		public const uint32 TSPI_PHONEGETBUTTONINFO = 564;
		public const uint32 TSPI_PHONEGETDATA = 565;
		public const uint32 TSPI_PHONEGETDEVCAPS = 566;
		public const uint32 TSPI_PHONEGETDISPLAY = 567;
		public const uint32 TSPI_PHONEGETEXTENSIONID = 568;
		public const uint32 TSPI_PHONEGETGAIN = 569;
		public const uint32 TSPI_PHONEGETHOOKSWITCH = 570;
		public const uint32 TSPI_PHONEGETICON = 571;
		public const uint32 TSPI_PHONEGETID = 572;
		public const uint32 TSPI_PHONEGETLAMP = 573;
		public const uint32 TSPI_PHONEGETRING = 574;
		public const uint32 TSPI_PHONEGETSTATUS = 575;
		public const uint32 TSPI_PHONEGETVOLUME = 576;
		public const uint32 TSPI_PHONENEGOTIATEEXTVERSION = 577;
		public const uint32 TSPI_PHONENEGOTIATETSPIVERSION = 578;
		public const uint32 TSPI_PHONEOPEN = 579;
		public const uint32 TSPI_PHONESELECTEXTVERSION = 580;
		public const uint32 TSPI_PHONESETBUTTONINFO = 581;
		public const uint32 TSPI_PHONESETDATA = 582;
		public const uint32 TSPI_PHONESETDISPLAY = 583;
		public const uint32 TSPI_PHONESETGAIN = 584;
		public const uint32 TSPI_PHONESETHOOKSWITCH = 585;
		public const uint32 TSPI_PHONESETLAMP = 586;
		public const uint32 TSPI_PHONESETRING = 587;
		public const uint32 TSPI_PHONESETSTATUSMESSAGES = 588;
		public const uint32 TSPI_PHONESETVOLUME = 589;
		public const uint32 TSPI_PROVIDERCONFIG = 590;
		public const uint32 TSPI_PROVIDERINIT = 591;
		public const uint32 TSPI_PROVIDERINSTALL = 592;
		public const uint32 TSPI_PROVIDERREMOVE = 593;
		public const uint32 TSPI_PROVIDERSHUTDOWN = 594;
		public const uint32 TSPI_PROVIDERENUMDEVICES = 595;
		public const uint32 TSPI_LINEDROPONCLOSE = 596;
		public const uint32 TSPI_LINEDROPNOOWNER = 597;
		public const uint32 TSPI_PROVIDERCREATELINEDEVICE = 598;
		public const uint32 TSPI_PROVIDERCREATEPHONEDEVICE = 599;
		public const uint32 TSPI_LINESETCURRENTLOCATION = 600;
		public const uint32 TSPI_LINECONFIGDIALOGEDIT = 601;
		public const uint32 TSPI_LINERELEASEUSERUSERINFO = 602;
		public const uint32 TSPI_LINEGETCALLID = 603;
		public const uint32 TSPI_LINEGETCALLHUBTRACKING = 604;
		public const uint32 TSPI_LINESETCALLHUBTRACKING = 605;
		public const uint32 TSPI_LINERECEIVEMSPDATA = 606;
		public const uint32 TSPI_LINEMSPIDENTIFY = 607;
		public const uint32 TSPI_LINECREATEMSPINSTANCE = 608;
		public const uint32 TSPI_LINECLOSEMSPINSTANCE = 609;
		public const uint32 IDISPDIROBJECT = 65536;
		public const uint32 IDISPDIROBJCONFERENCE = 131072;
		public const uint32 IDISPDIROBJUSER = 196608;
		public const uint32 IDISPDIRECTORY = 65536;
		public const uint32 IDISPILSCONFIG = 131072;
		public const uint32 RENDBIND_AUTHENTICATE = 1;
		public const uint32 RENDBIND_DEFAULTDOMAINNAME = 2;
		public const uint32 RENDBIND_DEFAULTUSERNAME = 4;
		public const uint32 RENDBIND_DEFAULTPASSWORD = 8;
		public const uint32 RENDBIND_DEFAULTCREDENTIALS = 14;
		public const uint32 STRM_INITIAL = 0;
		public const uint32 STRM_TERMINALSELECTED = 1;
		public const uint32 STRM_CONFIGURED = 2;
		public const uint32 STRM_RUNNING = 4;
		public const uint32 STRM_PAUSED = 8;
		public const uint32 STRM_STOPPED = 16;
		public const HRESULT TAPI_E_NOTENOUGHMEMORY = -2147221503;
		public const HRESULT TAPI_E_NOITEMS = -2147221502;
		public const HRESULT TAPI_E_NOTSUPPORTED = -2147221501;
		public const HRESULT TAPI_E_INVALIDMEDIATYPE = -2147221500;
		public const HRESULT TAPI_E_OPERATIONFAILED = -2147221499;
		public const HRESULT TAPI_E_ALLOCATED = -2147221498;
		public const HRESULT TAPI_E_CALLUNAVAIL = -2147221497;
		public const HRESULT TAPI_E_COMPLETIONOVERRUN = -2147221496;
		public const HRESULT TAPI_E_CONFERENCEFULL = -2147221495;
		public const HRESULT TAPI_E_DIALMODIFIERNOTSUPPORTED = -2147221494;
		public const HRESULT TAPI_E_INUSE = -2147221493;
		public const HRESULT TAPI_E_INVALADDRESS = -2147221492;
		public const HRESULT TAPI_E_INVALADDRESSSTATE = -2147221491;
		public const HRESULT TAPI_E_INVALCALLPARAMS = -2147221490;
		public const HRESULT TAPI_E_INVALCALLPRIVILEGE = -2147221489;
		public const HRESULT TAPI_E_INVALCALLSTATE = -2147221488;
		public const HRESULT TAPI_E_INVALCARD = -2147221487;
		public const HRESULT TAPI_E_INVALCOMPLETIONID = -2147221486;
		public const HRESULT TAPI_E_INVALCOUNTRYCODE = -2147221485;
		public const HRESULT TAPI_E_INVALDEVICECLASS = -2147221484;
		public const HRESULT TAPI_E_INVALDIALPARAMS = -2147221483;
		public const HRESULT TAPI_E_INVALDIGITS = -2147221482;
		public const HRESULT TAPI_E_INVALGROUPID = -2147221481;
		public const HRESULT TAPI_E_INVALLOCATION = -2147221480;
		public const HRESULT TAPI_E_INVALMESSAGEID = -2147221479;
		public const HRESULT TAPI_E_INVALPARKID = -2147221478;
		public const HRESULT TAPI_E_INVALRATE = -2147221477;
		public const HRESULT TAPI_E_INVALTIMEOUT = -2147221476;
		public const HRESULT TAPI_E_INVALTONE = -2147221475;
		public const HRESULT TAPI_E_INVALLIST = -2147221474;
		public const HRESULT TAPI_E_INVALMODE = -2147221473;
		public const HRESULT TAPI_E_NOCONFERENCE = -2147221472;
		public const HRESULT TAPI_E_NODEVICE = -2147221471;
		public const HRESULT TAPI_E_NOREQUEST = -2147221470;
		public const HRESULT TAPI_E_NOTOWNER = -2147221469;
		public const HRESULT TAPI_E_NOTREGISTERED = -2147221468;
		public const HRESULT TAPI_E_REQUESTOVERRUN = -2147221467;
		public const HRESULT TAPI_E_TARGETNOTFOUND = -2147221466;
		public const HRESULT TAPI_E_TARGETSELF = -2147221465;
		public const HRESULT TAPI_E_USERUSERINFOTOOBIG = -2147221464;
		public const HRESULT TAPI_E_REINIT = -2147221463;
		public const HRESULT TAPI_E_ADDRESSBLOCKED = -2147221462;
		public const HRESULT TAPI_E_BILLINGREJECTED = -2147221461;
		public const HRESULT TAPI_E_INVALFEATURE = -2147221460;
		public const HRESULT TAPI_E_INVALBUTTONLAMPID = -2147221459;
		public const HRESULT TAPI_E_INVALBUTTONSTATE = -2147221458;
		public const HRESULT TAPI_E_INVALDATAID = -2147221457;
		public const HRESULT TAPI_E_INVALHOOKSWITCHDEV = -2147221456;
		public const HRESULT TAPI_E_DROPPED = -2147221455;
		public const HRESULT TAPI_E_NOREQUESTRECIPIENT = -2147221454;
		public const HRESULT TAPI_E_REQUESTQUEUEFULL = -2147221453;
		public const HRESULT TAPI_E_DESTBUSY = -2147221452;
		public const HRESULT TAPI_E_DESTNOANSWER = -2147221451;
		public const HRESULT TAPI_E_DESTUNAVAIL = -2147221450;
		public const HRESULT TAPI_E_REQUESTFAILED = -2147221449;
		public const HRESULT TAPI_E_REQUESTCANCELLED = -2147221448;
		public const HRESULT TAPI_E_INVALPRIVILEGE = -2147221447;
		public const HRESULT TAPI_E_INVALIDDIRECTION = -2147221446;
		public const HRESULT TAPI_E_INVALIDTERMINAL = -2147221445;
		public const HRESULT TAPI_E_INVALIDTERMINALCLASS = -2147221444;
		public const HRESULT TAPI_E_NODRIVER = -2147221443;
		public const HRESULT TAPI_E_MAXSTREAMS = -2147221442;
		public const HRESULT TAPI_E_NOTERMINALSELECTED = -2147221441;
		public const HRESULT TAPI_E_TERMINALINUSE = -2147221440;
		public const HRESULT TAPI_E_NOTSTOPPED = -2147221439;
		public const HRESULT TAPI_E_MAXTERMINALS = -2147221438;
		public const HRESULT TAPI_E_INVALIDSTREAM = -2147221437;
		public const HRESULT TAPI_E_TIMEOUT = -2147221436;
		public const HRESULT TAPI_E_CALLCENTER_GROUP_REMOVED = -2147221435;
		public const HRESULT TAPI_E_CALLCENTER_QUEUE_REMOVED = -2147221434;
		public const HRESULT TAPI_E_CALLCENTER_NO_AGENT_ID = -2147221433;
		public const HRESULT TAPI_E_CALLCENTER_INVALAGENTID = -2147221432;
		public const HRESULT TAPI_E_CALLCENTER_INVALAGENTGROUP = -2147221431;
		public const HRESULT TAPI_E_CALLCENTER_INVALPASSWORD = -2147221430;
		public const HRESULT TAPI_E_CALLCENTER_INVALAGENTSTATE = -2147221429;
		public const HRESULT TAPI_E_CALLCENTER_INVALAGENTACTIVITY = -2147221428;
		public const HRESULT TAPI_E_REGISTRY_SETTING_CORRUPT = -2147221427;
		public const HRESULT TAPI_E_TERMINAL_PEER = -2147221426;
		public const HRESULT TAPI_E_PEER_NOT_SET = -2147221425;
		public const HRESULT TAPI_E_NOEVENT = -2147221424;
		public const HRESULT TAPI_E_INVALADDRESSTYPE = -2147221423;
		public const HRESULT TAPI_E_RESOURCEUNAVAIL = -2147221422;
		public const HRESULT TAPI_E_PHONENOTOPEN = -2147221421;
		public const HRESULT TAPI_E_CALLNOTSELECTED = -2147221420;
		public const HRESULT TAPI_E_WRONGEVENT = -2147221419;
		public const HRESULT TAPI_E_NOFORMAT = -2147221418;
		public const HRESULT TAPI_E_INVALIDSTREAMSTATE = -2147221417;
		public const HRESULT TAPI_E_WRONG_STATE = -2147221416;
		public const HRESULT TAPI_E_NOT_INITIALIZED = -2147221415;
		public const HRESULT TAPI_E_SERVICE_NOT_RUNNING = -2147221414;
		public const int32 atypNull = 0;
		public const int32 atypFile = 1;
		public const int32 atypOle = 2;
		public const int32 atypPicture = 3;
		public const int32 atypMax = 4;
		
		// --- Enums ---
		
		[AllowDuplicates]
		public enum TAPI_TONEMODE : int32
		{
			TTM_RINGBACK = 2,
			TTM_BUSY = 4,
			TTM_BEEP = 8,
			TTM_BILLING = 16,
		}
		[AllowDuplicates]
		public enum TAPI_GATHERTERM : int32
		{
			TGT_BUFFERFULL = 1,
			TGT_TERMDIGIT = 2,
			TGT_FIRSTTIMEOUT = 4,
			TGT_INTERTIMEOUT = 8,
			TGT_CANCEL = 16,
		}
		[AllowDuplicates]
		public enum ADDRESS_EVENT : int32
		{
			AE_STATE = 0,
			AE_CAPSCHANGE = 1,
			AE_RINGING = 2,
			AE_CONFIGCHANGE = 3,
			AE_FORWARD = 4,
			AE_NEWTERMINAL = 5,
			AE_REMOVETERMINAL = 6,
			AE_MSGWAITON = 7,
			AE_MSGWAITOFF = 8,
			AE_LASTITEM = 8,
		}
		[AllowDuplicates]
		public enum ADDRESS_STATE : int32
		{
			AS_INSERVICE = 0,
			AS_OUTOFSERVICE = 1,
		}
		[AllowDuplicates]
		public enum CALL_STATE : int32
		{
			CS_IDLE = 0,
			CS_INPROGRESS = 1,
			CS_CONNECTED = 2,
			CS_DISCONNECTED = 3,
			CS_OFFERING = 4,
			CS_HOLD = 5,
			CS_QUEUED = 6,
			CS_LASTITEM = 6,
		}
		[AllowDuplicates]
		public enum CALL_STATE_EVENT_CAUSE : int32
		{
			CEC_NONE = 0,
			CEC_DISCONNECT_NORMAL = 1,
			CEC_DISCONNECT_BUSY = 2,
			CEC_DISCONNECT_BADADDRESS = 3,
			CEC_DISCONNECT_NOANSWER = 4,
			CEC_DISCONNECT_CANCELLED = 5,
			CEC_DISCONNECT_REJECTED = 6,
			CEC_DISCONNECT_FAILED = 7,
			CEC_DISCONNECT_BLOCKED = 8,
		}
		[AllowDuplicates]
		public enum CALL_MEDIA_EVENT : int32
		{
			CME_NEW_STREAM = 0,
			CME_STREAM_FAIL = 1,
			CME_TERMINAL_FAIL = 2,
			CME_STREAM_NOT_USED = 3,
			CME_STREAM_ACTIVE = 4,
			CME_STREAM_INACTIVE = 5,
			CME_LASTITEM = 5,
		}
		[AllowDuplicates]
		public enum CALL_MEDIA_EVENT_CAUSE : int32
		{
			CMC_UNKNOWN = 0,
			CMC_BAD_DEVICE = 1,
			CMC_CONNECT_FAIL = 2,
			CMC_LOCAL_REQUEST = 3,
			CMC_REMOTE_REQUEST = 4,
			CMC_MEDIA_TIMEOUT = 5,
			CMC_MEDIA_RECOVERED = 6,
			CMC_QUALITY_OF_SERVICE = 7,
		}
		[AllowDuplicates]
		public enum DISCONNECT_CODE : int32
		{
			DC_NORMAL = 0,
			DC_NOANSWER = 1,
			DC_REJECTED = 2,
		}
		[AllowDuplicates]
		public enum TERMINAL_STATE : int32
		{
			TS_INUSE = 0,
			TS_NOTINUSE = 1,
		}
		[AllowDuplicates]
		public enum TERMINAL_DIRECTION : int32
		{
			TD_CAPTURE = 0,
			TD_RENDER = 1,
			TD_BIDIRECTIONAL = 2,
			TD_MULTITRACK_MIXED = 3,
			TD_NONE = 4,
		}
		[AllowDuplicates]
		public enum TERMINAL_TYPE : int32
		{
			TT_STATIC = 0,
			TT_DYNAMIC = 1,
		}
		[AllowDuplicates]
		public enum CALL_PRIVILEGE : int32
		{
			CP_OWNER = 0,
			CP_MONITOR = 1,
		}
		[AllowDuplicates]
		public enum TAPI_EVENT : int32
		{
			TE_TAPIOBJECT = 1,
			TE_ADDRESS = 2,
			TE_CALLNOTIFICATION = 4,
			TE_CALLSTATE = 8,
			TE_CALLMEDIA = 16,
			TE_CALLHUB = 32,
			TE_CALLINFOCHANGE = 64,
			TE_PRIVATE = 128,
			TE_REQUEST = 256,
			TE_AGENT = 512,
			TE_AGENTSESSION = 1024,
			TE_QOSEVENT = 2048,
			TE_AGENTHANDLER = 4096,
			TE_ACDGROUP = 8192,
			TE_QUEUE = 16384,
			TE_DIGITEVENT = 32768,
			TE_GENERATEEVENT = 65536,
			TE_ASRTERMINAL = 131072,
			TE_TTSTERMINAL = 262144,
			TE_FILETERMINAL = 524288,
			TE_TONETERMINAL = 1048576,
			TE_PHONEEVENT = 2097152,
			TE_TONEEVENT = 4194304,
			TE_GATHERDIGITS = 8388608,
			TE_ADDRESSDEVSPECIFIC = 16777216,
			TE_PHONEDEVSPECIFIC = 33554432,
		}
		[AllowDuplicates]
		public enum CALL_NOTIFICATION_EVENT : int32
		{
			CNE_OWNER = 0,
			CNE_MONITOR = 1,
			CNE_LASTITEM = 1,
		}
		[AllowDuplicates]
		public enum CALLHUB_EVENT : int32
		{
			CHE_CALLJOIN = 0,
			CHE_CALLLEAVE = 1,
			CHE_CALLHUBNEW = 2,
			CHE_CALLHUBIDLE = 3,
			CHE_LASTITEM = 3,
		}
		[AllowDuplicates]
		public enum CALLHUB_STATE : int32
		{
			CHS_ACTIVE = 0,
			CHS_IDLE = 1,
		}
		[AllowDuplicates]
		public enum TAPIOBJECT_EVENT : int32
		{
			TE_ADDRESSCREATE = 0,
			TE_ADDRESSREMOVE = 1,
			TE_REINIT = 2,
			TE_TRANSLATECHANGE = 3,
			TE_ADDRESSCLOSE = 4,
			TE_PHONECREATE = 5,
			TE_PHONEREMOVE = 6,
		}
		[AllowDuplicates]
		public enum TAPI_OBJECT_TYPE : int32
		{
			TOT_NONE = 0,
			TOT_TAPI = 1,
			TOT_ADDRESS = 2,
			TOT_TERMINAL = 3,
			TOT_CALL = 4,
			TOT_CALLHUB = 5,
			TOT_PHONE = 6,
		}
		[AllowDuplicates]
		public enum QOS_SERVICE_LEVEL : int32
		{
			QSL_NEEDED = 1,
			QSL_IF_AVAILABLE = 2,
			QSL_BEST_EFFORT = 3,
		}
		[AllowDuplicates]
		public enum QOS_EVENT : int32
		{
			QE_NOQOS = 1,
			QE_ADMISSIONFAILURE = 2,
			QE_POLICYFAILURE = 3,
			QE_GENERICERROR = 4,
			QE_LASTITEM = 4,
		}
		[AllowDuplicates]
		public enum CALLINFOCHANGE_CAUSE : int32
		{
			CIC_OTHER = 0,
			CIC_DEVSPECIFIC = 1,
			CIC_BEARERMODE = 2,
			CIC_RATE = 3,
			CIC_APPSPECIFIC = 4,
			CIC_CALLID = 5,
			CIC_RELATEDCALLID = 6,
			CIC_ORIGIN = 7,
			CIC_REASON = 8,
			CIC_COMPLETIONID = 9,
			CIC_NUMOWNERINCR = 10,
			CIC_NUMOWNERDECR = 11,
			CIC_NUMMONITORS = 12,
			CIC_TRUNK = 13,
			CIC_CALLERID = 14,
			CIC_CALLEDID = 15,
			CIC_CONNECTEDID = 16,
			CIC_REDIRECTIONID = 17,
			CIC_REDIRECTINGID = 18,
			CIC_USERUSERINFO = 19,
			CIC_HIGHLEVELCOMP = 20,
			CIC_LOWLEVELCOMP = 21,
			CIC_CHARGINGINFO = 22,
			CIC_TREATMENT = 23,
			CIC_CALLDATA = 24,
			CIC_PRIVILEGE = 25,
			CIC_MEDIATYPE = 26,
			CIC_LASTITEM = 26,
		}
		[AllowDuplicates]
		public enum CALLINFO_LONG : int32
		{
			CIL_MEDIATYPESAVAILABLE = 0,
			CIL_BEARERMODE = 1,
			CIL_CALLERIDADDRESSTYPE = 2,
			CIL_CALLEDIDADDRESSTYPE = 3,
			CIL_CONNECTEDIDADDRESSTYPE = 4,
			CIL_REDIRECTIONIDADDRESSTYPE = 5,
			CIL_REDIRECTINGIDADDRESSTYPE = 6,
			CIL_ORIGIN = 7,
			CIL_REASON = 8,
			CIL_APPSPECIFIC = 9,
			CIL_CALLPARAMSFLAGS = 10,
			CIL_CALLTREATMENT = 11,
			CIL_MINRATE = 12,
			CIL_MAXRATE = 13,
			CIL_COUNTRYCODE = 14,
			CIL_CALLID = 15,
			CIL_RELATEDCALLID = 16,
			CIL_COMPLETIONID = 17,
			CIL_NUMBEROFOWNERS = 18,
			CIL_NUMBEROFMONITORS = 19,
			CIL_TRUNK = 20,
			CIL_RATE = 21,
			CIL_GENERATEDIGITDURATION = 22,
			CIL_MONITORDIGITMODES = 23,
			CIL_MONITORMEDIAMODES = 24,
		}
		[AllowDuplicates]
		public enum CALLINFO_STRING : int32
		{
			CIS_CALLERIDNAME = 0,
			CIS_CALLERIDNUMBER = 1,
			CIS_CALLEDIDNAME = 2,
			CIS_CALLEDIDNUMBER = 3,
			CIS_CONNECTEDIDNAME = 4,
			CIS_CONNECTEDIDNUMBER = 5,
			CIS_REDIRECTIONIDNAME = 6,
			CIS_REDIRECTIONIDNUMBER = 7,
			CIS_REDIRECTINGIDNAME = 8,
			CIS_REDIRECTINGIDNUMBER = 9,
			CIS_CALLEDPARTYFRIENDLYNAME = 10,
			CIS_COMMENT = 11,
			CIS_DISPLAYABLEADDRESS = 12,
			CIS_CALLINGPARTYID = 13,
		}
		[AllowDuplicates]
		public enum CALLINFO_BUFFER : int32
		{
			CIB_USERUSERINFO = 0,
			CIB_DEVSPECIFICBUFFER = 1,
			CIB_CALLDATABUFFER = 2,
			CIB_CHARGINGINFOBUFFER = 3,
			CIB_HIGHLEVELCOMPATIBILITYBUFFER = 4,
			CIB_LOWLEVELCOMPATIBILITYBUFFER = 5,
		}
		[AllowDuplicates]
		public enum ADDRESS_CAPABILITY : int32
		{
			AC_ADDRESSTYPES = 0,
			AC_BEARERMODES = 1,
			AC_MAXACTIVECALLS = 2,
			AC_MAXONHOLDCALLS = 3,
			AC_MAXONHOLDPENDINGCALLS = 4,
			AC_MAXNUMCONFERENCE = 5,
			AC_MAXNUMTRANSCONF = 6,
			AC_MONITORDIGITSUPPORT = 7,
			AC_GENERATEDIGITSUPPORT = 8,
			AC_GENERATETONEMODES = 9,
			AC_GENERATETONEMAXNUMFREQ = 10,
			AC_MONITORTONEMAXNUMFREQ = 11,
			AC_MONITORTONEMAXNUMENTRIES = 12,
			AC_DEVCAPFLAGS = 13,
			AC_ANSWERMODES = 14,
			AC_LINEFEATURES = 15,
			AC_SETTABLEDEVSTATUS = 16,
			AC_PARKSUPPORT = 17,
			AC_CALLERIDSUPPORT = 18,
			AC_CALLEDIDSUPPORT = 19,
			AC_CONNECTEDIDSUPPORT = 20,
			AC_REDIRECTIONIDSUPPORT = 21,
			AC_REDIRECTINGIDSUPPORT = 22,
			AC_ADDRESSCAPFLAGS = 23,
			AC_CALLFEATURES1 = 24,
			AC_CALLFEATURES2 = 25,
			AC_REMOVEFROMCONFCAPS = 26,
			AC_REMOVEFROMCONFSTATE = 27,
			AC_TRANSFERMODES = 28,
			AC_ADDRESSFEATURES = 29,
			AC_PREDICTIVEAUTOTRANSFERSTATES = 30,
			AC_MAXCALLDATASIZE = 31,
			AC_LINEID = 32,
			AC_ADDRESSID = 33,
			AC_FORWARDMODES = 34,
			AC_MAXFORWARDENTRIES = 35,
			AC_MAXSPECIFICENTRIES = 36,
			AC_MINFWDNUMRINGS = 37,
			AC_MAXFWDNUMRINGS = 38,
			AC_MAXCALLCOMPLETIONS = 39,
			AC_CALLCOMPLETIONCONDITIONS = 40,
			AC_CALLCOMPLETIONMODES = 41,
			AC_PERMANENTDEVICEID = 42,
			AC_GATHERDIGITSMINTIMEOUT = 43,
			AC_GATHERDIGITSMAXTIMEOUT = 44,
			AC_GENERATEDIGITMINDURATION = 45,
			AC_GENERATEDIGITMAXDURATION = 46,
			AC_GENERATEDIGITDEFAULTDURATION = 47,
		}
		[AllowDuplicates]
		public enum ADDRESS_CAPABILITY_STRING : int32
		{
			ACS_PROTOCOL = 0,
			ACS_ADDRESSDEVICESPECIFIC = 1,
			ACS_LINEDEVICESPECIFIC = 2,
			ACS_PROVIDERSPECIFIC = 3,
			ACS_SWITCHSPECIFIC = 4,
			ACS_PERMANENTDEVICEGUID = 5,
		}
		[AllowDuplicates]
		public enum FULLDUPLEX_SUPPORT : int32
		{
			FDS_SUPPORTED = 0,
			FDS_NOTSUPPORTED = 1,
			FDS_UNKNOWN = 2,
		}
		[AllowDuplicates]
		public enum FINISH_MODE : int32
		{
			FM_ASTRANSFER = 0,
			FM_ASCONFERENCE = 1,
		}
		[AllowDuplicates]
		public enum PHONE_PRIVILEGE : int32
		{
			PP_OWNER = 0,
			PP_MONITOR = 1,
		}
		[AllowDuplicates]
		public enum PHONE_HOOK_SWITCH_DEVICE : int32
		{
			PHSD_HANDSET = 1,
			PHSD_SPEAKERPHONE = 2,
			PHSD_HEADSET = 4,
		}
		[AllowDuplicates]
		public enum PHONE_HOOK_SWITCH_STATE : int32
		{
			PHSS_ONHOOK = 1,
			PHSS_OFFHOOK_MIC_ONLY = 2,
			PHSS_OFFHOOK_SPEAKER_ONLY = 4,
			PHSS_OFFHOOK = 8,
		}
		[AllowDuplicates]
		public enum PHONE_LAMP_MODE : int32
		{
			LM_DUMMY = 1,
			LM_OFF = 2,
			LM_STEADY = 4,
			LM_WINK = 8,
			LM_FLASH = 16,
			LM_FLUTTER = 32,
			LM_BROKENFLUTTER = 64,
			LM_UNKNOWN = 128,
		}
		[AllowDuplicates]
		public enum PHONECAPS_LONG : int32
		{
			PCL_HOOKSWITCHES = 0,
			PCL_HANDSETHOOKSWITCHMODES = 1,
			PCL_HEADSETHOOKSWITCHMODES = 2,
			PCL_SPEAKERPHONEHOOKSWITCHMODES = 3,
			PCL_DISPLAYNUMROWS = 4,
			PCL_DISPLAYNUMCOLUMNS = 5,
			PCL_NUMRINGMODES = 6,
			PCL_NUMBUTTONLAMPS = 7,
			PCL_GENERICPHONE = 8,
		}
		[AllowDuplicates]
		public enum PHONECAPS_STRING : int32
		{
			PCS_PHONENAME = 0,
			PCS_PHONEINFO = 1,
			PCS_PROVIDERINFO = 2,
		}
		[AllowDuplicates]
		public enum PHONECAPS_BUFFER : int32
		{
			PCB_DEVSPECIFICBUFFER = 0,
		}
		[AllowDuplicates]
		public enum PHONE_BUTTON_STATE : int32
		{
			PBS_UP = 1,
			PBS_DOWN = 2,
			PBS_UNKNOWN = 4,
			PBS_UNAVAIL = 8,
		}
		[AllowDuplicates]
		public enum PHONE_BUTTON_MODE : int32
		{
			PBM_DUMMY = 0,
			PBM_CALL = 1,
			PBM_FEATURE = 2,
			PBM_KEYPAD = 3,
			PBM_LOCAL = 4,
			PBM_DISPLAY = 5,
		}
		[AllowDuplicates]
		public enum PHONE_BUTTON_FUNCTION : int32
		{
			PBF_UNKNOWN = 0,
			PBF_CONFERENCE = 1,
			PBF_TRANSFER = 2,
			PBF_DROP = 3,
			PBF_HOLD = 4,
			PBF_RECALL = 5,
			PBF_DISCONNECT = 6,
			PBF_CONNECT = 7,
			PBF_MSGWAITON = 8,
			PBF_MSGWAITOFF = 9,
			PBF_SELECTRING = 10,
			PBF_ABBREVDIAL = 11,
			PBF_FORWARD = 12,
			PBF_PICKUP = 13,
			PBF_RINGAGAIN = 14,
			PBF_PARK = 15,
			PBF_REJECT = 16,
			PBF_REDIRECT = 17,
			PBF_MUTE = 18,
			PBF_VOLUMEUP = 19,
			PBF_VOLUMEDOWN = 20,
			PBF_SPEAKERON = 21,
			PBF_SPEAKEROFF = 22,
			PBF_FLASH = 23,
			PBF_DATAON = 24,
			PBF_DATAOFF = 25,
			PBF_DONOTDISTURB = 26,
			PBF_INTERCOM = 27,
			PBF_BRIDGEDAPP = 28,
			PBF_BUSY = 29,
			PBF_CALLAPP = 30,
			PBF_DATETIME = 31,
			PBF_DIRECTORY = 32,
			PBF_COVER = 33,
			PBF_CALLID = 34,
			PBF_LASTNUM = 35,
			PBF_NIGHTSRV = 36,
			PBF_SENDCALLS = 37,
			PBF_MSGINDICATOR = 38,
			PBF_REPDIAL = 39,
			PBF_SETREPDIAL = 40,
			PBF_SYSTEMSPEED = 41,
			PBF_STATIONSPEED = 42,
			PBF_CAMPON = 43,
			PBF_SAVEREPEAT = 44,
			PBF_QUEUECALL = 45,
			PBF_NONE = 46,
			PBF_SEND = 47,
		}
		[AllowDuplicates]
		public enum PHONE_TONE : int32
		{
			PT_KEYPADZERO = 0,
			PT_KEYPADONE = 1,
			PT_KEYPADTWO = 2,
			PT_KEYPADTHREE = 3,
			PT_KEYPADFOUR = 4,
			PT_KEYPADFIVE = 5,
			PT_KEYPADSIX = 6,
			PT_KEYPADSEVEN = 7,
			PT_KEYPADEIGHT = 8,
			PT_KEYPADNINE = 9,
			PT_KEYPADSTAR = 10,
			PT_KEYPADPOUND = 11,
			PT_KEYPADA = 12,
			PT_KEYPADB = 13,
			PT_KEYPADC = 14,
			PT_KEYPADD = 15,
			PT_NORMALDIALTONE = 16,
			PT_EXTERNALDIALTONE = 17,
			PT_BUSY = 18,
			PT_RINGBACK = 19,
			PT_ERRORTONE = 20,
			PT_SILENCE = 21,
		}
		[AllowDuplicates]
		public enum PHONE_EVENT : int32
		{
			PE_DISPLAY = 0,
			PE_LAMPMODE = 1,
			PE_RINGMODE = 2,
			PE_RINGVOLUME = 3,
			PE_HOOKSWITCH = 4,
			PE_CAPSCHANGE = 5,
			PE_BUTTON = 6,
			PE_CLOSE = 7,
			PE_NUMBERGATHERED = 8,
			PE_DIALING = 9,
			PE_ANSWER = 10,
			PE_DISCONNECT = 11,
			PE_LASTITEM = 11,
		}
		[AllowDuplicates]
		public enum TERMINAL_MEDIA_STATE : int32
		{
			TMS_IDLE = 0,
			TMS_ACTIVE = 1,
			TMS_PAUSED = 2,
			TMS_LASTITEM = 2,
		}
		[AllowDuplicates]
		public enum FT_STATE_EVENT_CAUSE : int32
		{
			FTEC_NORMAL = 0,
			FTEC_END_OF_FILE = 1,
			FTEC_READ_ERROR = 2,
			FTEC_WRITE_ERROR = 3,
		}
		[AllowDuplicates]
		public enum AGENT_EVENT : int32
		{
			AE_NOT_READY = 0,
			AE_READY = 1,
			AE_BUSY_ACD = 2,
			AE_BUSY_INCOMING = 3,
			AE_BUSY_OUTGOING = 4,
			AE_UNKNOWN = 5,
		}
		[AllowDuplicates]
		public enum AGENT_STATE : int32
		{
			AS_NOT_READY = 0,
			AS_READY = 1,
			AS_BUSY_ACD = 2,
			AS_BUSY_INCOMING = 3,
			AS_BUSY_OUTGOING = 4,
			AS_UNKNOWN = 5,
		}
		[AllowDuplicates]
		public enum AGENT_SESSION_EVENT : int32
		{
			ASE_NEW_SESSION = 0,
			ASE_NOT_READY = 1,
			ASE_READY = 2,
			ASE_BUSY = 3,
			ASE_WRAPUP = 4,
			ASE_END = 5,
		}
		[AllowDuplicates]
		public enum AGENT_SESSION_STATE : int32
		{
			ASST_NOT_READY = 0,
			ASST_READY = 1,
			ASST_BUSY_ON_CALL = 2,
			ASST_BUSY_WRAPUP = 3,
			ASST_SESSION_ENDED = 4,
		}
		[AllowDuplicates]
		public enum AGENTHANDLER_EVENT : int32
		{
			AHE_NEW_AGENTHANDLER = 0,
			AHE_AGENTHANDLER_REMOVED = 1,
		}
		[AllowDuplicates]
		public enum ACDGROUP_EVENT : int32
		{
			ACDGE_NEW_GROUP = 0,
			ACDGE_GROUP_REMOVED = 1,
		}
		[AllowDuplicates]
		public enum ACDQUEUE_EVENT : int32
		{
			ACDQE_NEW_QUEUE = 0,
			ACDQE_QUEUE_REMOVED = 1,
		}
		[AllowDuplicates]
		public enum MSP_ADDRESS_EVENT : int32
		{
			ADDRESS_TERMINAL_AVAILABLE = 0,
			ADDRESS_TERMINAL_UNAVAILABLE = 1,
		}
		[AllowDuplicates]
		public enum MSP_CALL_EVENT : int32
		{
			CALL_NEW_STREAM = 0,
			CALL_STREAM_FAIL = 1,
			CALL_TERMINAL_FAIL = 2,
			CALL_STREAM_NOT_USED = 3,
			CALL_STREAM_ACTIVE = 4,
			CALL_STREAM_INACTIVE = 5,
		}
		[AllowDuplicates]
		public enum MSP_CALL_EVENT_CAUSE : int32
		{
			CALL_CAUSE_UNKNOWN = 0,
			CALL_CAUSE_BAD_DEVICE = 1,
			CALL_CAUSE_CONNECT_FAIL = 2,
			CALL_CAUSE_LOCAL_REQUEST = 3,
			CALL_CAUSE_REMOTE_REQUEST = 4,
			CALL_CAUSE_MEDIA_TIMEOUT = 5,
			CALL_CAUSE_MEDIA_RECOVERED = 6,
			CALL_CAUSE_QUALITY_OF_SERVICE = 7,
		}
		[AllowDuplicates]
		public enum MSP_EVENT : int32
		{
			ME_ADDRESS_EVENT = 0,
			ME_CALL_EVENT = 1,
			ME_TSP_DATA = 2,
			ME_PRIVATE_EVENT = 3,
			ME_ASR_TERMINAL_EVENT = 4,
			ME_TTS_TERMINAL_EVENT = 5,
			ME_FILE_TERMINAL_EVENT = 6,
			ME_TONE_TERMINAL_EVENT = 7,
		}
		[AllowDuplicates]
		public enum DIRECTORY_TYPE : int32
		{
			DT_NTDS = 1,
			DT_ILS = 2,
		}
		[AllowDuplicates]
		public enum DIRECTORY_OBJECT_TYPE : int32
		{
			OT_CONFERENCE = 1,
			OT_USER = 2,
		}
		[AllowDuplicates]
		public enum RND_ADVERTISING_SCOPE : int32
		{
			RAS_LOCAL = 1,
			RAS_SITE = 2,
			RAS_REGION = 3,
			RAS_WORLD = 4,
		}
		
		// --- Function Pointers ---
		
		public function void LINECALLBACK(uint32 hDevice, uint32 dwMessage, uint dwInstance, uint dwParam1, uint dwParam2, uint dwParam3);
		public function void PHONECALLBACK(uint32 hDevice, uint32 dwMessage, uint dwInstance, uint dwParam1, uint dwParam2, uint dwParam3);
		public function void ASYNC_COMPLETION(uint32 dwRequestID, int32 lResult);
		public function void LINEEVENT(HTAPILINE__* htLine, HTAPICALL__* htCall, uint32 dwMsg, uint dwParam1, uint dwParam2, uint dwParam3);
		public function void PHONEEVENT(HTAPIPHONE__* htPhone, uint32 dwMsg, uint dwParam1, uint dwParam2, uint dwParam3);
		public function int32 TUISPIDLLCALLBACK(uint dwObjectID, uint32 dwObjectType, void* lpParams, uint32 dwSize);
		public function HRESULT LPOPENTNEFSTREAM(void* lpvSupport, IStream* lpStream, int8* lpszStreamName, uint32 ulFlags, IMessage* lpMessage, uint16 wKeyVal, ITnef** lppTNEF);
		public function HRESULT LPOPENTNEFSTREAMEX(void* lpvSupport, IStream* lpStream, int8* lpszStreamName, uint32 ulFlags, IMessage* lpMessage, uint16 wKeyVal, IAddrBook* lpAdressBook, ITnef** lppTNEF);
		public function HRESULT LPGETTNEFSTREAMCODEPAGE(IStream* lpStream, uint32* lpulCodepage, uint32* lpulSubCodepage);
		
		// --- Structs ---
		
		[CRepr]
		public struct LINEADDRESSCAPS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwLineDeviceID;
			public uint32 dwAddressSize;
			public uint32 dwAddressOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwAddressSharing;
			public uint32 dwAddressStates;
			public uint32 dwCallInfoStates;
			public uint32 dwCallerIDFlags;
			public uint32 dwCalledIDFlags;
			public uint32 dwConnectedIDFlags;
			public uint32 dwRedirectionIDFlags;
			public uint32 dwRedirectingIDFlags;
			public uint32 dwCallStates;
			public uint32 dwDialToneModes;
			public uint32 dwBusyModes;
			public uint32 dwSpecialInfo;
			public uint32 dwDisconnectModes;
			public uint32 dwMaxNumActiveCalls;
			public uint32 dwMaxNumOnHoldCalls;
			public uint32 dwMaxNumOnHoldPendingCalls;
			public uint32 dwMaxNumConference;
			public uint32 dwMaxNumTransConf;
			public uint32 dwAddrCapFlags;
			public uint32 dwCallFeatures;
			public uint32 dwRemoveFromConfCaps;
			public uint32 dwRemoveFromConfState;
			public uint32 dwTransferModes;
			public uint32 dwParkModes;
			public uint32 dwForwardModes;
			public uint32 dwMaxForwardEntries;
			public uint32 dwMaxSpecificEntries;
			public uint32 dwMinFwdNumRings;
			public uint32 dwMaxFwdNumRings;
			public uint32 dwMaxCallCompletions;
			public uint32 dwCallCompletionConds;
			public uint32 dwCallCompletionModes;
			public uint32 dwNumCompletionMessages;
			public uint32 dwCompletionMsgTextEntrySize;
			public uint32 dwCompletionMsgTextSize;
			public uint32 dwCompletionMsgTextOffset;
			public uint32 dwAddressFeatures;
			public uint32 dwPredictiveAutoTransferStates;
			public uint32 dwNumCallTreatments;
			public uint32 dwCallTreatmentListSize;
			public uint32 dwCallTreatmentListOffset;
			public uint32 dwDeviceClassesSize;
			public uint32 dwDeviceClassesOffset;
			public uint32 dwMaxCallDataSize;
			public uint32 dwCallFeatures2;
			public uint32 dwMaxNoAnswerTimeout;
			public uint32 dwConnectedModes;
			public uint32 dwOfferingModes;
			public uint32 dwAvailableMediaModes;
		}
		[CRepr]
		public struct LINEADDRESSSTATUS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumInUse;
			public uint32 dwNumActiveCalls;
			public uint32 dwNumOnHoldCalls;
			public uint32 dwNumOnHoldPendCalls;
			public uint32 dwAddressFeatures;
			public uint32 dwNumRingsNoAnswer;
			public uint32 dwForwardNumEntries;
			public uint32 dwForwardSize;
			public uint32 dwForwardOffset;
			public uint32 dwTerminalModesSize;
			public uint32 dwTerminalModesOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
		}
		[CRepr]
		public struct LINEAGENTACTIVITYENTRY
		{
			public uint32 dwID;
			public uint32 dwNameSize;
			public uint32 dwNameOffset;
		}
		[CRepr]
		public struct LINEAGENTACTIVITYLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwListSize;
			public uint32 dwListOffset;
		}
		[CRepr]
		public struct LINEAGENTCAPS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwAgentHandlerInfoSize;
			public uint32 dwAgentHandlerInfoOffset;
			public uint32 dwCapsVersion;
			public uint32 dwFeatures;
			public uint32 dwStates;
			public uint32 dwNextStates;
			public uint32 dwMaxNumGroupEntries;
			public uint32 dwAgentStatusMessages;
			public uint32 dwNumAgentExtensionIDs;
			public uint32 dwAgentExtensionIDListSize;
			public uint32 dwAgentExtensionIDListOffset;
			public Guid ProxyGUID;
		}
		[CRepr]
		public struct LINEAGENTGROUPENTRY
		{
			public _GroupID_e__Struct GroupID;
			public uint32 dwNameSize;
			public uint32 dwNameOffset;
			
			[CRepr]
			public struct _GroupID_e__Struct
			{
				public uint32 dwGroupID1;
				public uint32 dwGroupID2;
				public uint32 dwGroupID3;
				public uint32 dwGroupID4;
			}
		}
		[CRepr]
		public struct LINEAGENTGROUPLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwListSize;
			public uint32 dwListOffset;
		}
		[CRepr]
		public struct LINEAGENTSTATUS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwGroupListSize;
			public uint32 dwGroupListOffset;
			public uint32 dwState;
			public uint32 dwNextState;
			public uint32 dwActivityID;
			public uint32 dwActivitySize;
			public uint32 dwActivityOffset;
			public uint32 dwAgentFeatures;
			public uint32 dwValidStates;
			public uint32 dwValidNextStates;
		}
		[CRepr]
		public struct LINEAPPINFO
		{
			public uint32 dwMachineNameSize;
			public uint32 dwMachineNameOffset;
			public uint32 dwUserNameSize;
			public uint32 dwUserNameOffset;
			public uint32 dwModuleFilenameSize;
			public uint32 dwModuleFilenameOffset;
			public uint32 dwFriendlyNameSize;
			public uint32 dwFriendlyNameOffset;
			public uint32 dwMediaModes;
			public uint32 dwAddressID;
		}
		[CRepr]
		public struct LINEAGENTENTRY
		{
			public uint32 hAgent;
			public uint32 dwNameSize;
			public uint32 dwNameOffset;
			public uint32 dwIDSize;
			public uint32 dwIDOffset;
			public uint32 dwPINSize;
			public uint32 dwPINOffset;
		}
		[CRepr]
		public struct LINEAGENTLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwListSize;
			public uint32 dwListOffset;
		}
		[CRepr]
		public struct LINEAGENTINFO
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwAgentState;
			public uint32 dwNextAgentState;
			public uint32 dwMeasurementPeriod;
			public CY cyOverallCallRate;
			public uint32 dwNumberOfACDCalls;
			public uint32 dwNumberOfIncomingCalls;
			public uint32 dwNumberOfOutgoingCalls;
			public uint32 dwTotalACDTalkTime;
			public uint32 dwTotalACDCallTime;
			public uint32 dwTotalACDWrapUpTime;
		}
		[CRepr]
		public struct LINEAGENTSESSIONENTRY
		{
			public uint32 hAgentSession;
			public uint32 hAgent;
			public Guid GroupID;
			public uint32 dwWorkingAddressID;
		}
		[CRepr]
		public struct LINEAGENTSESSIONLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwListSize;
			public uint32 dwListOffset;
		}
		[CRepr]
		public struct LINEAGENTSESSIONINFO
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwAgentSessionState;
			public uint32 dwNextAgentSessionState;
			public double dateSessionStartTime;
			public uint32 dwSessionDuration;
			public uint32 dwNumberOfCalls;
			public uint32 dwTotalTalkTime;
			public uint32 dwAverageTalkTime;
			public uint32 dwTotalCallTime;
			public uint32 dwAverageCallTime;
			public uint32 dwTotalWrapUpTime;
			public uint32 dwAverageWrapUpTime;
			public CY cyACDCallRate;
			public uint32 dwLongestTimeToAnswer;
			public uint32 dwAverageTimeToAnswer;
		}
		[CRepr]
		public struct LINEQUEUEENTRY
		{
			public uint32 dwQueueID;
			public uint32 dwNameSize;
			public uint32 dwNameOffset;
		}
		[CRepr]
		public struct LINEQUEUELIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwListSize;
			public uint32 dwListOffset;
		}
		[CRepr]
		public struct LINEQUEUEINFO
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwMeasurementPeriod;
			public uint32 dwTotalCallsQueued;
			public uint32 dwCurrentCallsQueued;
			public uint32 dwTotalCallsAbandoned;
			public uint32 dwTotalCallsFlowedIn;
			public uint32 dwTotalCallsFlowedOut;
			public uint32 dwLongestEverWaitTime;
			public uint32 dwCurrentLongestWaitTime;
			public uint32 dwAverageWaitTime;
			public uint32 dwFinalDisposition;
		}
		[CRepr]
		public struct LINEPROXYREQUESTLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumEntries;
			public uint32 dwListSize;
			public uint32 dwListOffset;
		}
		[CRepr]
		public struct LINEDIALPARAMS
		{
			public uint32 dwDialPause;
			public uint32 dwDialSpeed;
			public uint32 dwDigitDuration;
			public uint32 dwWaitForDialtone;
		}
		[CRepr]
		public struct LINECALLINFO
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 hLine;
			public uint32 dwLineDeviceID;
			public uint32 dwAddressID;
			public uint32 dwBearerMode;
			public uint32 dwRate;
			public uint32 dwMediaMode;
			public uint32 dwAppSpecific;
			public uint32 dwCallID;
			public uint32 dwRelatedCallID;
			public uint32 dwCallParamFlags;
			public uint32 dwCallStates;
			public uint32 dwMonitorDigitModes;
			public uint32 dwMonitorMediaModes;
			public LINEDIALPARAMS DialParams;
			public uint32 dwOrigin;
			public uint32 dwReason;
			public uint32 dwCompletionID;
			public uint32 dwNumOwners;
			public uint32 dwNumMonitors;
			public uint32 dwCountryCode;
			public uint32 dwTrunk;
			public uint32 dwCallerIDFlags;
			public uint32 dwCallerIDSize;
			public uint32 dwCallerIDOffset;
			public uint32 dwCallerIDNameSize;
			public uint32 dwCallerIDNameOffset;
			public uint32 dwCalledIDFlags;
			public uint32 dwCalledIDSize;
			public uint32 dwCalledIDOffset;
			public uint32 dwCalledIDNameSize;
			public uint32 dwCalledIDNameOffset;
			public uint32 dwConnectedIDFlags;
			public uint32 dwConnectedIDSize;
			public uint32 dwConnectedIDOffset;
			public uint32 dwConnectedIDNameSize;
			public uint32 dwConnectedIDNameOffset;
			public uint32 dwRedirectionIDFlags;
			public uint32 dwRedirectionIDSize;
			public uint32 dwRedirectionIDOffset;
			public uint32 dwRedirectionIDNameSize;
			public uint32 dwRedirectionIDNameOffset;
			public uint32 dwRedirectingIDFlags;
			public uint32 dwRedirectingIDSize;
			public uint32 dwRedirectingIDOffset;
			public uint32 dwRedirectingIDNameSize;
			public uint32 dwRedirectingIDNameOffset;
			public uint32 dwAppNameSize;
			public uint32 dwAppNameOffset;
			public uint32 dwDisplayableAddressSize;
			public uint32 dwDisplayableAddressOffset;
			public uint32 dwCalledPartySize;
			public uint32 dwCalledPartyOffset;
			public uint32 dwCommentSize;
			public uint32 dwCommentOffset;
			public uint32 dwDisplaySize;
			public uint32 dwDisplayOffset;
			public uint32 dwUserUserInfoSize;
			public uint32 dwUserUserInfoOffset;
			public uint32 dwHighLevelCompSize;
			public uint32 dwHighLevelCompOffset;
			public uint32 dwLowLevelCompSize;
			public uint32 dwLowLevelCompOffset;
			public uint32 dwChargingInfoSize;
			public uint32 dwChargingInfoOffset;
			public uint32 dwTerminalModesSize;
			public uint32 dwTerminalModesOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwCallTreatment;
			public uint32 dwCallDataSize;
			public uint32 dwCallDataOffset;
			public uint32 dwSendingFlowspecSize;
			public uint32 dwSendingFlowspecOffset;
			public uint32 dwReceivingFlowspecSize;
			public uint32 dwReceivingFlowspecOffset;
		}
		[CRepr]
		public struct LINECALLLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwCallsNumEntries;
			public uint32 dwCallsSize;
			public uint32 dwCallsOffset;
		}
		[CRepr]
		public struct LINECALLPARAMS
		{
			public uint32 dwTotalSize;
			public uint32 dwBearerMode;
			public uint32 dwMinRate;
			public uint32 dwMaxRate;
			public uint32 dwMediaMode;
			public uint32 dwCallParamFlags;
			public uint32 dwAddressMode;
			public uint32 dwAddressID;
			public LINEDIALPARAMS DialParams;
			public uint32 dwOrigAddressSize;
			public uint32 dwOrigAddressOffset;
			public uint32 dwDisplayableAddressSize;
			public uint32 dwDisplayableAddressOffset;
			public uint32 dwCalledPartySize;
			public uint32 dwCalledPartyOffset;
			public uint32 dwCommentSize;
			public uint32 dwCommentOffset;
			public uint32 dwUserUserInfoSize;
			public uint32 dwUserUserInfoOffset;
			public uint32 dwHighLevelCompSize;
			public uint32 dwHighLevelCompOffset;
			public uint32 dwLowLevelCompSize;
			public uint32 dwLowLevelCompOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwPredictiveAutoTransferStates;
			public uint32 dwTargetAddressSize;
			public uint32 dwTargetAddressOffset;
			public uint32 dwSendingFlowspecSize;
			public uint32 dwSendingFlowspecOffset;
			public uint32 dwReceivingFlowspecSize;
			public uint32 dwReceivingFlowspecOffset;
			public uint32 dwDeviceClassSize;
			public uint32 dwDeviceClassOffset;
			public uint32 dwDeviceConfigSize;
			public uint32 dwDeviceConfigOffset;
			public uint32 dwCallDataSize;
			public uint32 dwCallDataOffset;
			public uint32 dwNoAnswerTimeout;
			public uint32 dwCallingPartyIDSize;
			public uint32 dwCallingPartyIDOffset;
		}
		[CRepr]
		public struct LINECALLSTATUS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwCallState;
			public uint32 dwCallStateMode;
			public uint32 dwCallPrivilege;
			public uint32 dwCallFeatures;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwCallFeatures2;
			public SYSTEMTIME tStateEntryTime;
		}
		[CRepr]
		public struct LINECALLTREATMENTENTRY
		{
			public uint32 dwCallTreatmentID;
			public uint32 dwCallTreatmentNameSize;
			public uint32 dwCallTreatmentNameOffset;
		}
		[CRepr]
		public struct LINECARDENTRY
		{
			public uint32 dwPermanentCardID;
			public uint32 dwCardNameSize;
			public uint32 dwCardNameOffset;
			public uint32 dwCardNumberDigits;
			public uint32 dwSameAreaRuleSize;
			public uint32 dwSameAreaRuleOffset;
			public uint32 dwLongDistanceRuleSize;
			public uint32 dwLongDistanceRuleOffset;
			public uint32 dwInternationalRuleSize;
			public uint32 dwInternationalRuleOffset;
			public uint32 dwOptions;
		}
		[CRepr]
		public struct LINECOUNTRYENTRY
		{
			public uint32 dwCountryID;
			public uint32 dwCountryCode;
			public uint32 dwNextCountryID;
			public uint32 dwCountryNameSize;
			public uint32 dwCountryNameOffset;
			public uint32 dwSameAreaRuleSize;
			public uint32 dwSameAreaRuleOffset;
			public uint32 dwLongDistanceRuleSize;
			public uint32 dwLongDistanceRuleOffset;
			public uint32 dwInternationalRuleSize;
			public uint32 dwInternationalRuleOffset;
		}
		[CRepr]
		public struct LINECOUNTRYLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumCountries;
			public uint32 dwCountryListSize;
			public uint32 dwCountryListOffset;
		}
		[CRepr]
		public struct LINEDEVCAPS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwProviderInfoSize;
			public uint32 dwProviderInfoOffset;
			public uint32 dwSwitchInfoSize;
			public uint32 dwSwitchInfoOffset;
			public uint32 dwPermanentLineID;
			public uint32 dwLineNameSize;
			public uint32 dwLineNameOffset;
			public uint32 dwStringFormat;
			public uint32 dwAddressModes;
			public uint32 dwNumAddresses;
			public uint32 dwBearerModes;
			public uint32 dwMaxRate;
			public uint32 dwMediaModes;
			public uint32 dwGenerateToneModes;
			public uint32 dwGenerateToneMaxNumFreq;
			public uint32 dwGenerateDigitModes;
			public uint32 dwMonitorToneMaxNumFreq;
			public uint32 dwMonitorToneMaxNumEntries;
			public uint32 dwMonitorDigitModes;
			public uint32 dwGatherDigitsMinTimeout;
			public uint32 dwGatherDigitsMaxTimeout;
			public uint32 dwMedCtlDigitMaxListSize;
			public uint32 dwMedCtlMediaMaxListSize;
			public uint32 dwMedCtlToneMaxListSize;
			public uint32 dwMedCtlCallStateMaxListSize;
			public uint32 dwDevCapFlags;
			public uint32 dwMaxNumActiveCalls;
			public uint32 dwAnswerMode;
			public uint32 dwRingModes;
			public uint32 dwLineStates;
			public uint32 dwUUIAcceptSize;
			public uint32 dwUUIAnswerSize;
			public uint32 dwUUIMakeCallSize;
			public uint32 dwUUIDropSize;
			public uint32 dwUUISendUserUserInfoSize;
			public uint32 dwUUICallInfoSize;
			public LINEDIALPARAMS MinDialParams;
			public LINEDIALPARAMS MaxDialParams;
			public LINEDIALPARAMS DefaultDialParams;
			public uint32 dwNumTerminals;
			public uint32 dwTerminalCapsSize;
			public uint32 dwTerminalCapsOffset;
			public uint32 dwTerminalTextEntrySize;
			public uint32 dwTerminalTextSize;
			public uint32 dwTerminalTextOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwLineFeatures;
			public uint32 dwSettableDevStatus;
			public uint32 dwDeviceClassesSize;
			public uint32 dwDeviceClassesOffset;
			public Guid PermanentLineGuid;
		}
		[CRepr]
		public struct LINEDEVSTATUS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumOpens;
			public uint32 dwOpenMediaModes;
			public uint32 dwNumActiveCalls;
			public uint32 dwNumOnHoldCalls;
			public uint32 dwNumOnHoldPendCalls;
			public uint32 dwLineFeatures;
			public uint32 dwNumCallCompletions;
			public uint32 dwRingMode;
			public uint32 dwSignalLevel;
			public uint32 dwBatteryLevel;
			public uint32 dwRoamMode;
			public uint32 dwDevStatusFlags;
			public uint32 dwTerminalModesSize;
			public uint32 dwTerminalModesOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwAvailableMediaModes;
			public uint32 dwAppInfoSize;
			public uint32 dwAppInfoOffset;
		}
		[CRepr]
		public struct LINEEXTENSIONID
		{
			public uint32 dwExtensionID0;
			public uint32 dwExtensionID1;
			public uint32 dwExtensionID2;
			public uint32 dwExtensionID3;
		}
		[CRepr]
		public struct LINEFORWARD
		{
			public uint32 dwForwardMode;
			public uint32 dwCallerAddressSize;
			public uint32 dwCallerAddressOffset;
			public uint32 dwDestCountryCode;
			public uint32 dwDestAddressSize;
			public uint32 dwDestAddressOffset;
		}
		[CRepr]
		public struct LINEFORWARDLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNumEntries;
			public LINEFORWARD[] ForwardList;
		}
		[CRepr]
		public struct LINEGENERATETONE
		{
			public uint32 dwFrequency;
			public uint32 dwCadenceOn;
			public uint32 dwCadenceOff;
			public uint32 dwVolume;
		}
		[CRepr]
		public struct LINEINITIALIZEEXPARAMS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwOptions;
			public _Handles_e__Union Handles;
			public uint32 dwCompletionKey;
			
			[CRepr, Union]
			public struct _Handles_e__Union
			{
				public HANDLE hEvent;
				public HANDLE hCompletionPort;
			}
		}
		[CRepr]
		public struct LINELOCATIONENTRY
		{
			public uint32 dwPermanentLocationID;
			public uint32 dwLocationNameSize;
			public uint32 dwLocationNameOffset;
			public uint32 dwCountryCode;
			public uint32 dwCityCodeSize;
			public uint32 dwCityCodeOffset;
			public uint32 dwPreferredCardID;
			public uint32 dwLocalAccessCodeSize;
			public uint32 dwLocalAccessCodeOffset;
			public uint32 dwLongDistanceAccessCodeSize;
			public uint32 dwLongDistanceAccessCodeOffset;
			public uint32 dwTollPrefixListSize;
			public uint32 dwTollPrefixListOffset;
			public uint32 dwCountryID;
			public uint32 dwOptions;
			public uint32 dwCancelCallWaitingSize;
			public uint32 dwCancelCallWaitingOffset;
		}
		[CRepr]
		public struct LINEMEDIACONTROLCALLSTATE
		{
			public uint32 dwCallStates;
			public uint32 dwMediaControl;
		}
		[CRepr]
		public struct LINEMEDIACONTROLDIGIT
		{
			public uint32 dwDigit;
			public uint32 dwDigitModes;
			public uint32 dwMediaControl;
		}
		[CRepr]
		public struct LINEMEDIACONTROLMEDIA
		{
			public uint32 dwMediaModes;
			public uint32 dwDuration;
			public uint32 dwMediaControl;
		}
		[CRepr]
		public struct LINEMEDIACONTROLTONE
		{
			public uint32 dwAppSpecific;
			public uint32 dwDuration;
			public uint32 dwFrequency1;
			public uint32 dwFrequency2;
			public uint32 dwFrequency3;
			public uint32 dwMediaControl;
		}
		[CRepr]
		public struct LINEMESSAGE
		{
			public uint32 hDevice;
			public uint32 dwMessageID;
			public uint dwCallbackInstance;
			public uint dwParam1;
			public uint dwParam2;
			public uint dwParam3;
		}
		[CRepr]
		public struct LINEMONITORTONE
		{
			public uint32 dwAppSpecific;
			public uint32 dwDuration;
			public uint32 dwFrequency1;
			public uint32 dwFrequency2;
			public uint32 dwFrequency3;
		}
		[CRepr]
		public struct LINEPROVIDERENTRY
		{
			public uint32 dwPermanentProviderID;
			public uint32 dwProviderFilenameSize;
			public uint32 dwProviderFilenameOffset;
		}
		[CRepr]
		public struct LINEPROVIDERLIST
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumProviders;
			public uint32 dwProviderListSize;
			public uint32 dwProviderListOffset;
		}
		[CRepr]
		public struct LINEPROXYREQUEST
		{
			public uint32 dwSize;
			public uint32 dwClientMachineNameSize;
			public uint32 dwClientMachineNameOffset;
			public uint32 dwClientUserNameSize;
			public uint32 dwClientUserNameOffset;
			public uint32 dwClientAppAPIVersion;
			public uint32 dwRequestType;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public _SetAgentGroup_e__Struct SetAgentGroup;
				public _SetAgentState_e__Struct SetAgentState;
				public _SetAgentActivity_e__Struct SetAgentActivity;
				public _GetAgentCaps_e__Struct GetAgentCaps;
				public _GetAgentStatus_e__Struct GetAgentStatus;
				public _AgentSpecific_e__Struct AgentSpecific;
				public _GetAgentActivityList_e__Struct GetAgentActivityList;
				public _GetAgentGroupList_e__Struct GetAgentGroupList;
				public _CreateAgent_e__Struct CreateAgent;
				public _SetAgentStateEx_e__Struct SetAgentStateEx;
				public _SetAgentMeasurementPeriod_e__Struct SetAgentMeasurementPeriod;
				public _GetAgentInfo_e__Struct GetAgentInfo;
				public _CreateAgentSession_e__Struct CreateAgentSession;
				public _GetAgentSessionList_e__Struct GetAgentSessionList;
				public _GetAgentSessionInfo_e__Struct GetAgentSessionInfo;
				public _SetAgentSessionState_e__Struct SetAgentSessionState;
				public _GetQueueList_e__Struct GetQueueList;
				public _SetQueueMeasurementPeriod_e__Struct SetQueueMeasurementPeriod;
				public _GetQueueInfo_e__Struct GetQueueInfo;
				public _GetGroupList_e__Struct GetGroupList;
				
				[CRepr]
				public struct _GetQueueInfo_e__Struct
				{
					public uint32 dwQueueID;
					public LINEQUEUEINFO QueueInfo;
				}
				[CRepr]
				public struct _GetQueueList_e__Struct
				{
					public Guid GroupID;
					public LINEQUEUELIST QueueList;
				}
				[CRepr]
				public struct _GetAgentSessionInfo_e__Struct
				{
					public uint32 hAgentSession;
					public LINEAGENTSESSIONINFO SessionInfo;
				}
				[CRepr]
				public struct _CreateAgentSession_e__Struct
				{
					public uint32 hAgentSession;
					public uint32 dwAgentPINSize;
					public uint32 dwAgentPINOffset;
					public uint32 hAgent;
					public Guid GroupID;
					public uint32 dwWorkingAddressID;
				}
				[CRepr]
				public struct _SetAgentMeasurementPeriod_e__Struct
				{
					public uint32 hAgent;
					public uint32 dwMeasurementPeriod;
				}
				[CRepr]
				public struct _CreateAgent_e__Struct
				{
					public uint32 hAgent;
					public uint32 dwAgentIDSize;
					public uint32 dwAgentIDOffset;
					public uint32 dwAgentPINSize;
					public uint32 dwAgentPINOffset;
				}
				[CRepr]
				public struct _GetAgentActivityList_e__Struct
				{
					public uint32 dwAddressID;
					public LINEAGENTACTIVITYLIST ActivityList;
				}
				[CRepr]
				public struct _GetAgentStatus_e__Struct
				{
					public uint32 dwAddressID;
					public LINEAGENTSTATUS AgentStatus;
				}
				[CRepr]
				public struct _SetAgentActivity_e__Struct
				{
					public uint32 dwAddressID;
					public uint32 dwActivityID;
				}
				[CRepr]
				public struct _SetAgentGroup_e__Struct
				{
					public uint32 dwAddressID;
					public LINEAGENTGROUPLIST GroupList;
				}
				[CRepr]
				public struct _SetQueueMeasurementPeriod_e__Struct
				{
					public uint32 dwQueueID;
					public uint32 dwMeasurementPeriod;
				}
				[CRepr]
				public struct _GetAgentSessionList_e__Struct
				{
					public uint32 hAgent;
					public LINEAGENTSESSIONLIST SessionList;
				}
				[CRepr]
				public struct _SetAgentStateEx_e__Struct
				{
					public uint32 hAgent;
					public uint32 dwAgentState;
					public uint32 dwNextAgentState;
				}
				[CRepr]
				public struct _AgentSpecific_e__Struct
				{
					public uint32 dwAddressID;
					public uint32 dwAgentExtensionIDIndex;
					public uint32 dwSize;
					public uint8[] Params;
				}
				[CRepr]
				public struct _SetAgentState_e__Struct
				{
					public uint32 dwAddressID;
					public uint32 dwAgentState;
					public uint32 dwNextAgentState;
				}
				[CRepr]
				public struct _SetAgentSessionState_e__Struct
				{
					public uint32 hAgentSession;
					public uint32 dwAgentSessionState;
					public uint32 dwNextAgentSessionState;
				}
				[CRepr]
				public struct _GetAgentGroupList_e__Struct
				{
					public uint32 dwAddressID;
					public LINEAGENTGROUPLIST GroupList;
				}
				[CRepr]
				public struct _GetGroupList_e__Struct
				{
					public LINEAGENTGROUPLIST GroupList;
				}
				[CRepr]
				public struct _GetAgentCaps_e__Struct
				{
					public uint32 dwAddressID;
					public LINEAGENTCAPS AgentCaps;
				}
				[CRepr]
				public struct _GetAgentInfo_e__Struct
				{
					public uint32 hAgent;
					public LINEAGENTINFO AgentInfo;
				}
			}
		}
		[CRepr]
		public struct LINEREQMAKECALL
		{
			public CHAR[80] szDestAddress;
			public CHAR[40] szAppName;
			public CHAR[40] szCalledParty;
			public CHAR[80] szComment;
		}
		[CRepr]
		public struct linereqmakecallW_tag
		{
			public char16[80] szDestAddress;
			public char16[40] szAppName;
			public char16[40] szCalledParty;
			public char16[80] szComment;
		}
		[CRepr]
		public struct LINEREQMEDIACALL
		{
			public HWND hWnd;
			public WPARAM wRequestID;
			public CHAR[40] szDeviceClass;
			public uint8[40] ucDeviceID;
			public uint32 dwSize;
			public uint32 dwSecure;
			public CHAR[80] szDestAddress;
			public CHAR[40] szAppName;
			public CHAR[40] szCalledParty;
			public CHAR[80] szComment;
		}
		[CRepr]
		public struct linereqmediacallW_tag
		{
			public HWND hWnd;
			public WPARAM wRequestID;
			public char16[40] szDeviceClass;
			public uint8[40] ucDeviceID;
			public uint32 dwSize;
			public uint32 dwSecure;
			public char16[80] szDestAddress;
			public char16[40] szAppName;
			public char16[40] szCalledParty;
			public char16[80] szComment;
		}
		[CRepr]
		public struct LINETERMCAPS
		{
			public uint32 dwTermDev;
			public uint32 dwTermModes;
			public uint32 dwTermSharing;
		}
		[CRepr]
		public struct LINETRANSLATECAPS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwNumLocations;
			public uint32 dwLocationListSize;
			public uint32 dwLocationListOffset;
			public uint32 dwCurrentLocationID;
			public uint32 dwNumCards;
			public uint32 dwCardListSize;
			public uint32 dwCardListOffset;
			public uint32 dwCurrentPreferredCardID;
		}
		[CRepr]
		public struct LINETRANSLATEOUTPUT
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwDialableStringSize;
			public uint32 dwDialableStringOffset;
			public uint32 dwDisplayableStringSize;
			public uint32 dwDisplayableStringOffset;
			public uint32 dwCurrentCountry;
			public uint32 dwDestCountry;
			public uint32 dwTranslateResults;
		}
		[CRepr]
		public struct PHONEBUTTONINFO
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwButtonMode;
			public uint32 dwButtonFunction;
			public uint32 dwButtonTextSize;
			public uint32 dwButtonTextOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwButtonState;
		}
		[CRepr]
		public struct PHONECAPS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwProviderInfoSize;
			public uint32 dwProviderInfoOffset;
			public uint32 dwPhoneInfoSize;
			public uint32 dwPhoneInfoOffset;
			public uint32 dwPermanentPhoneID;
			public uint32 dwPhoneNameSize;
			public uint32 dwPhoneNameOffset;
			public uint32 dwStringFormat;
			public uint32 dwPhoneStates;
			public uint32 dwHookSwitchDevs;
			public uint32 dwHandsetHookSwitchModes;
			public uint32 dwSpeakerHookSwitchModes;
			public uint32 dwHeadsetHookSwitchModes;
			public uint32 dwVolumeFlags;
			public uint32 dwGainFlags;
			public uint32 dwDisplayNumRows;
			public uint32 dwDisplayNumColumns;
			public uint32 dwNumRingModes;
			public uint32 dwNumButtonLamps;
			public uint32 dwButtonModesSize;
			public uint32 dwButtonModesOffset;
			public uint32 dwButtonFunctionsSize;
			public uint32 dwButtonFunctionsOffset;
			public uint32 dwLampModesSize;
			public uint32 dwLampModesOffset;
			public uint32 dwNumSetData;
			public uint32 dwSetDataSize;
			public uint32 dwSetDataOffset;
			public uint32 dwNumGetData;
			public uint32 dwGetDataSize;
			public uint32 dwGetDataOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwDeviceClassesSize;
			public uint32 dwDeviceClassesOffset;
			public uint32 dwPhoneFeatures;
			public uint32 dwSettableHandsetHookSwitchModes;
			public uint32 dwSettableSpeakerHookSwitchModes;
			public uint32 dwSettableHeadsetHookSwitchModes;
			public uint32 dwMonitoredHandsetHookSwitchModes;
			public uint32 dwMonitoredSpeakerHookSwitchModes;
			public uint32 dwMonitoredHeadsetHookSwitchModes;
			public Guid PermanentPhoneGuid;
		}
		[CRepr]
		public struct PHONEEXTENSIONID
		{
			public uint32 dwExtensionID0;
			public uint32 dwExtensionID1;
			public uint32 dwExtensionID2;
			public uint32 dwExtensionID3;
		}
		[CRepr]
		public struct PHONEINITIALIZEEXPARAMS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwOptions;
			public _Handles_e__Union Handles;
			public uint32 dwCompletionKey;
			
			[CRepr, Union]
			public struct _Handles_e__Union
			{
				public HANDLE hEvent;
				public HANDLE hCompletionPort;
			}
		}
		[CRepr]
		public struct PHONEMESSAGE
		{
			public uint32 hDevice;
			public uint32 dwMessageID;
			public uint dwCallbackInstance;
			public uint dwParam1;
			public uint dwParam2;
			public uint dwParam3;
		}
		[CRepr]
		public struct PHONESTATUS
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwStatusFlags;
			public uint32 dwNumOwners;
			public uint32 dwNumMonitors;
			public uint32 dwRingMode;
			public uint32 dwRingVolume;
			public uint32 dwHandsetHookSwitchMode;
			public uint32 dwHandsetVolume;
			public uint32 dwHandsetGain;
			public uint32 dwSpeakerHookSwitchMode;
			public uint32 dwSpeakerVolume;
			public uint32 dwSpeakerGain;
			public uint32 dwHeadsetHookSwitchMode;
			public uint32 dwHeadsetVolume;
			public uint32 dwHeadsetGain;
			public uint32 dwDisplaySize;
			public uint32 dwDisplayOffset;
			public uint32 dwLampModesSize;
			public uint32 dwLampModesOffset;
			public uint32 dwOwnerNameSize;
			public uint32 dwOwnerNameOffset;
			public uint32 dwDevSpecificSize;
			public uint32 dwDevSpecificOffset;
			public uint32 dwPhoneFeatures;
		}
		[CRepr]
		public struct VARSTRING
		{
			public uint32 dwTotalSize;
			public uint32 dwNeededSize;
			public uint32 dwUsedSize;
			public uint32 dwStringFormat;
			public uint32 dwStringSize;
			public uint32 dwStringOffset;
		}
		[CRepr]
		public struct HDRVCALL__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HDRVLINE__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HDRVPHONE__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HDRVMSPLINE__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HDRVDIALOGINSTANCE__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HTAPICALL__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HTAPILINE__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HTAPIPHONE__
		{
			public int32 unused;
		}
		[CRepr]
		public struct HPROVIDER__
		{
			public int32 unused;
		}
		[CRepr]
		public struct TUISPICREATEDIALOGINSTANCEPARAMS
		{
			public uint32 dwRequestID;
			public HDRVDIALOGINSTANCE__* hdDlgInst;
			public uint32 htDlgInst;
			public PWSTR lpszUIDLLName;
			public void* lpParams;
			public uint32 dwSize;
		}
		[CRepr]
		public struct TAPI_CUSTOMTONE
		{
			public uint32 dwFrequency;
			public uint32 dwCadenceOn;
			public uint32 dwCadenceOff;
			public uint32 dwVolume;
		}
		[CRepr]
		public struct TAPI_DETECTTONE
		{
			public uint32 dwAppSpecific;
			public uint32 dwDuration;
			public uint32 dwFrequency1;
			public uint32 dwFrequency2;
			public uint32 dwFrequency3;
		}
		[CRepr]
		public struct MSP_EVENT_INFO
		{
			public uint32 dwSize;
			public MSP_EVENT Event;
			public int32* hCall;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public _MSP_ADDRESS_EVENT_INFO_e__Struct MSP_ADDRESS_EVENT_INFO;
				public _MSP_CALL_EVENT_INFO_e__Struct MSP_CALL_EVENT_INFO;
				public _MSP_TSP_DATA_e__Struct MSP_TSP_DATA;
				public _MSP_PRIVATE_EVENT_INFO_e__Struct MSP_PRIVATE_EVENT_INFO;
				public _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct MSP_FILE_TERMINAL_EVENT_INFO;
				public _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct MSP_ASR_TERMINAL_EVENT_INFO;
				public _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct MSP_TTS_TERMINAL_EVENT_INFO;
				public _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct MSP_TONE_TERMINAL_EVENT_INFO;
				
				[CRepr]
				public struct _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
				{
					public ITTerminal* pToneTerminal;
					public HRESULT hrErrorCode;
				}
				[CRepr]
				public struct _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
				{
					public ITTerminal* pASRTerminal;
					public HRESULT hrErrorCode;
				}
				[CRepr]
				public struct _MSP_PRIVATE_EVENT_INFO_e__Struct
				{
					public IDispatch* pEvent;
					public int32 lEventCode;
				}
				[CRepr]
				public struct _MSP_CALL_EVENT_INFO_e__Struct
				{
					public MSP_CALL_EVENT Type;
					public MSP_CALL_EVENT_CAUSE Cause;
					public ITStream* pStream;
					public ITTerminal* pTerminal;
					public HRESULT hrError;
				}
				[CRepr]
				public struct _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
				{
					public ITTerminal* pParentFileTerminal;
					public ITFileTrack* pFileTrack;
					public TERMINAL_MEDIA_STATE TerminalMediaState;
					public FT_STATE_EVENT_CAUSE ftecEventCause;
					public HRESULT hrErrorCode;
				}
				[CRepr]
				public struct _MSP_ADDRESS_EVENT_INFO_e__Struct
				{
					public MSP_ADDRESS_EVENT Type;
					public ITTerminal* pTerminal;
				}
				[CRepr]
				public struct _MSP_TSP_DATA_e__Struct
				{
					public uint32 dwBufferSize;
					public uint8[] pBuffer;
				}
				[CRepr]
				public struct _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
				{
					public ITTerminal* pTTSTerminal;
					public HRESULT hrErrorCode;
				}
			}
		}
		[CRepr]
		public struct STnefProblem
		{
			public uint32 ulComponent;
			public uint32 ulAttribute;
			public uint32 ulPropTag;
			public int32 scode;
		}
		[CRepr]
		public struct STnefProblemArray
		{
			public uint32 cProblem;
			public STnefProblem[] aProblem;
		}
		[CRepr]
		public struct _renddata
		{
			public uint16 atyp;
			public uint32 ulPosition;
			public uint16 dxWidth;
			public uint16 dyHeight;
			public uint32 dwFlags;
		}
		[CRepr]
		public struct _dtr
		{
			public uint16 wYear;
			public uint16 wMonth;
			public uint16 wDay;
			public uint16 wHour;
			public uint16 wMinute;
			public uint16 wSecond;
			public uint16 wDayOfWeek;
		}
		[CRepr]
		public struct _trp
		{
			public uint16 trpid;
			public uint16 cbgrtrp;
			public uint16 cch;
			public uint16 cbRgb;
		}
		[CRepr]
		public struct _ADDR_ALIAS
		{
			public CHAR[41] rgchName;
			public CHAR[11] rgchEName;
			public CHAR[12] rgchSrvr;
			public uint32 dibDetail;
			public uint16 type;
		}
		[CRepr]
		public struct NSID
		{
			public uint32 dwSize;
			public uint8[16] uchType;
			public uint32 xtype;
			public int32 lTime;
			public _address_e__Union address;
			
			[CRepr, Union]
			public struct _address_e__Union
			{
				public _ADDR_ALIAS alias;
				public CHAR[] rgchInterNet;
			}
		}
		
		// --- COM Class IDs ---
		
		public const Guid CLSID_TAPI = .(0x21d6d48e, 0xa88b, 0x11d0, 0x83, 0xdd, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
		public const Guid CLSID_DispatchMapper = .(0xe9225296, 0xc759, 0x11d1, 0xa0, 0x2b, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
		public const Guid CLSID_RequestMakeCall = .(0xac48ffe0, 0xf8c4, 0x11d1, 0xa0, 0x30, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
		public const Guid CLSID_Rendezvous = .(0xf1029e5b, 0xcb5b, 0x11d0, 0x8d, 0x59, 0x00, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0);
		public const Guid CLSID_McastAddressAllocation = .(0xdf0daef2, 0xa289, 0x11d1, 0x86, 0x97, 0x00, 0x60, 0x08, 0xb0, 0xe5, 0xd2);
		
		// --- COM Interfaces ---
		
		[CRepr]
		public struct ITTAPI : IDispatch
		{
			public const new Guid IID = .(0xb1efc382, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITTAPI *self) Initialize;
			public function HRESULT(ITTAPI *self) Shutdown;
			public function HRESULT(ITTAPI *self, VARIANT* pVariant) get_Addresses;
			public function HRESULT(ITTAPI *self, IEnumAddress** ppEnumAddress) EnumerateAddresses;
			public function HRESULT(ITTAPI *self, ITAddress* pAddress, int16 fMonitor, int16 fOwner, int32 lMediaTypes, int32 lCallbackInstance, int32* plRegister) RegisterCallNotifications;
			public function HRESULT(ITTAPI *self, int32 lRegister) UnregisterNotifications;
			public function HRESULT(ITTAPI *self, VARIANT* pVariant) get_CallHubs;
			public function HRESULT(ITTAPI *self, IEnumCallHub** ppEnumCallHub) EnumerateCallHubs;
			public function HRESULT(ITTAPI *self, VARIANT pAddresses, int16 bTracking) SetCallHubTracking;
			public function HRESULT(ITTAPI *self, IEnumUnknown** ppEnumUnknown) EnumeratePrivateTAPIObjects;
			public function HRESULT(ITTAPI *self, VARIANT* pVariant) get_PrivateTAPIObjects;
			public function HRESULT(ITTAPI *self, int32 lRegistrationInstance, int32 lRequestMode, int16 fEnable) RegisterRequestRecipient;
			public function HRESULT(ITTAPI *self, BSTR pAppFilename, int16 fPriority) SetAssistedTelephonyPriority;
			public function HRESULT(ITTAPI *self, BSTR pAppFilename, int32 lMediaType, int16 fPriority) SetApplicationPriority;
			public function HRESULT(ITTAPI *self, int32 lFilterMask) put_EventFilter;
			public function HRESULT(ITTAPI *self, int32* plFilterMask) get_EventFilter;
		}
		[CRepr]
		public struct ITTAPI2 : ITTAPI
		{
			public const new Guid IID = .(0x54fbdc8c, 0xd90f, 0x4dad, 0x96, 0x95, 0xb3, 0x73, 0x09, 0x7f, 0x09, 0x4b);
			
			public function HRESULT(ITTAPI2 *self, VARIANT* pPhones) get_Phones;
			public function HRESULT(ITTAPI2 *self, IEnumPhone** ppEnumPhone) EnumeratePhones;
			public function HRESULT(ITTAPI2 *self, ITCollection2** ppCollection) CreateEmptyCollectionObject;
		}
		[CRepr]
		public struct ITMediaSupport : IDispatch
		{
			public const new Guid IID = .(0xb1efc384, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITMediaSupport *self, int32* plMediaTypes) get_MediaTypes;
			public function HRESULT(ITMediaSupport *self, int32 lMediaType, int16* pfSupport) QueryMediaType;
		}
		[CRepr]
		public struct ITPluggableTerminalClassInfo : IDispatch
		{
			public const new Guid IID = .(0x41757f4a, 0xcf09, 0x4b34, 0xbc, 0x96, 0x0a, 0x79, 0xd2, 0x39, 0x00, 0x76);
			
			public function HRESULT(ITPluggableTerminalClassInfo *self, BSTR* pName) get_Name;
			public function HRESULT(ITPluggableTerminalClassInfo *self, BSTR* pCompany) get_Company;
			public function HRESULT(ITPluggableTerminalClassInfo *self, BSTR* pVersion) get_Version;
			public function HRESULT(ITPluggableTerminalClassInfo *self, BSTR* pTerminalClass) get_TerminalClass;
			public function HRESULT(ITPluggableTerminalClassInfo *self, BSTR* pCLSID) get_CLSID;
			public function HRESULT(ITPluggableTerminalClassInfo *self, TERMINAL_DIRECTION* pDirection) get_Direction;
			public function HRESULT(ITPluggableTerminalClassInfo *self, int32* pMediaTypes) get_MediaTypes;
		}
		[CRepr]
		public struct ITPluggableTerminalSuperclassInfo : IDispatch
		{
			public const new Guid IID = .(0x6d54e42c, 0x4625, 0x4359, 0xa6, 0xf7, 0x63, 0x19, 0x99, 0x10, 0x7e, 0x05);
			
			public function HRESULT(ITPluggableTerminalSuperclassInfo *self, BSTR* pName) get_Name;
			public function HRESULT(ITPluggableTerminalSuperclassInfo *self, BSTR* pCLSID) get_CLSID;
		}
		[CRepr]
		public struct ITTerminalSupport : IDispatch
		{
			public const new Guid IID = .(0xb1efc385, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITTerminalSupport *self, VARIANT* pVariant) get_StaticTerminals;
			public function HRESULT(ITTerminalSupport *self, IEnumTerminal** ppTerminalEnumerator) EnumerateStaticTerminals;
			public function HRESULT(ITTerminalSupport *self, VARIANT* pVariant) get_DynamicTerminalClasses;
			public function HRESULT(ITTerminalSupport *self, IEnumTerminalClass** ppTerminalClassEnumerator) EnumerateDynamicTerminalClasses;
			public function HRESULT(ITTerminalSupport *self, BSTR pTerminalClass, int32 lMediaType, TERMINAL_DIRECTION Direction, ITTerminal** ppTerminal) CreateTerminal;
			public function HRESULT(ITTerminalSupport *self, int32 lMediaType, TERMINAL_DIRECTION Direction, ITTerminal** ppTerminal) GetDefaultStaticTerminal;
		}
		[CRepr]
		public struct ITTerminalSupport2 : ITTerminalSupport
		{
			public const new Guid IID = .(0xf3eb39bc, 0x1b1f, 0x4e99, 0xa0, 0xc0, 0x56, 0x30, 0x5c, 0x4d, 0xd5, 0x91);
			
			public function HRESULT(ITTerminalSupport2 *self, VARIANT* pVariant) get_PluggableSuperclasses;
			public function HRESULT(ITTerminalSupport2 *self, IEnumPluggableSuperclassInfo** ppSuperclassEnumerator) EnumeratePluggableSuperclasses;
			public function HRESULT(ITTerminalSupport2 *self, BSTR bstrTerminalSuperclass, int32 lMediaType, VARIANT* pVariant) get_PluggableTerminalClasses;
			public function HRESULT(ITTerminalSupport2 *self, Guid iidTerminalSuperclass, int32 lMediaType, IEnumPluggableTerminalClassInfo** ppClassEnumerator) EnumeratePluggableTerminalClasses;
		}
		[CRepr]
		public struct ITAddress : IDispatch
		{
			public const new Guid IID = .(0xb1efc386, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITAddress *self, ADDRESS_STATE* pAddressState) get_State;
			public function HRESULT(ITAddress *self, BSTR* ppName) get_AddressName;
			public function HRESULT(ITAddress *self, BSTR* ppName) get_ServiceProviderName;
			public function HRESULT(ITAddress *self, ITTAPI** ppTapiObject) get_TAPIObject;
			public function HRESULT(ITAddress *self, BSTR pDestAddress, int32 lAddressType, int32 lMediaTypes, ITBasicCallControl** ppCall) CreateCall;
			public function HRESULT(ITAddress *self, VARIANT* pVariant) get_Calls;
			public function HRESULT(ITAddress *self, IEnumCall** ppCallEnum) EnumerateCalls;
			public function HRESULT(ITAddress *self, BSTR* pDialableAddress) get_DialableAddress;
			public function HRESULT(ITAddress *self, ITForwardInformation** ppForwardInfo) CreateForwardInfoObject;
			public function HRESULT(ITAddress *self, ITForwardInformation* pForwardInfo, ITBasicCallControl* pCall) Forward;
			public function HRESULT(ITAddress *self, ITForwardInformation** ppForwardInfo) get_CurrentForwardInfo;
			public function HRESULT(ITAddress *self, int16 fMessageWaiting) put_MessageWaiting;
			public function HRESULT(ITAddress *self, int16* pfMessageWaiting) get_MessageWaiting;
			public function HRESULT(ITAddress *self, int16 fDoNotDisturb) put_DoNotDisturb;
			public function HRESULT(ITAddress *self, int16* pfDoNotDisturb) get_DoNotDisturb;
		}
		[CRepr]
		public struct ITAddress2 : ITAddress
		{
			public const new Guid IID = .(0xb0ae5d9b, 0xbe51, 0x46c9, 0xb0, 0xf7, 0xdf, 0xa8, 0xa2, 0x2a, 0x8b, 0xc4);
			
			public function HRESULT(ITAddress2 *self, VARIANT* pPhones) get_Phones;
			public function HRESULT(ITAddress2 *self, IEnumPhone** ppEnumPhone) EnumeratePhones;
			public function HRESULT(ITAddress2 *self, ITTerminal* pTerminal, ITPhone** ppPhone) GetPhoneFromTerminal;
			public function HRESULT(ITAddress2 *self, VARIANT* pPhones) get_PreferredPhones;
			public function HRESULT(ITAddress2 *self, IEnumPhone** ppEnumPhone) EnumeratePreferredPhones;
			public function HRESULT(ITAddress2 *self, TAPI_EVENT TapiEvent, int32 lSubEvent, int16* pEnable) get_EventFilter;
			public function HRESULT(ITAddress2 *self, TAPI_EVENT TapiEvent, int32 lSubEvent, int16 bEnable) put_EventFilter;
			public function HRESULT(ITAddress2 *self, ITCallInfo* pCall, uint8* pParams, uint32 dwSize) DeviceSpecific;
			public function HRESULT(ITAddress2 *self, ITCallInfo* pCall, VARIANT varDevSpecificByteArray) DeviceSpecificVariant;
			public function HRESULT(ITAddress2 *self, int32 lLowVersion, int32 lHighVersion, int32* plExtVersion) NegotiateExtVersion;
		}
		[CRepr]
		public struct ITAddressCapabilities : IDispatch
		{
			public const new Guid IID = .(0x8df232f5, 0x821b, 0x11d1, 0xbb, 0x5c, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITAddressCapabilities *self, ADDRESS_CAPABILITY AddressCap, int32* plCapability) get_AddressCapability;
			public function HRESULT(ITAddressCapabilities *self, ADDRESS_CAPABILITY_STRING AddressCapString, BSTR* ppCapabilityString) get_AddressCapabilityString;
			public function HRESULT(ITAddressCapabilities *self, VARIANT* pVariant) get_CallTreatments;
			public function HRESULT(ITAddressCapabilities *self, IEnumBstr** ppEnumCallTreatment) EnumerateCallTreatments;
			public function HRESULT(ITAddressCapabilities *self, VARIANT* pVariant) get_CompletionMessages;
			public function HRESULT(ITAddressCapabilities *self, IEnumBstr** ppEnumCompletionMessage) EnumerateCompletionMessages;
			public function HRESULT(ITAddressCapabilities *self, VARIANT* pVariant) get_DeviceClasses;
			public function HRESULT(ITAddressCapabilities *self, IEnumBstr** ppEnumDeviceClass) EnumerateDeviceClasses;
		}
		[CRepr]
		public struct ITPhone : IDispatch
		{
			public const new Guid IID = .(0x09d48db4, 0x10cc, 0x4388, 0x9d, 0xe7, 0xa8, 0x46, 0x56, 0x18, 0x97, 0x5a);
			
			public function HRESULT(ITPhone *self, PHONE_PRIVILEGE Privilege) Open;
			public function HRESULT(ITPhone *self) Close;
			public function HRESULT(ITPhone *self, VARIANT* pAddresses) get_Addresses;
			public function HRESULT(ITPhone *self, IEnumAddress** ppEnumAddress) EnumerateAddresses;
			public function HRESULT(ITPhone *self, PHONECAPS_LONG pclCap, int32* plCapability) get_PhoneCapsLong;
			public function HRESULT(ITPhone *self, PHONECAPS_STRING pcsCap, BSTR* ppCapability) get_PhoneCapsString;
			public function HRESULT(ITPhone *self, ITAddress* pAddress, VARIANT* pTerminals) get_Terminals;
			public function HRESULT(ITPhone *self, ITAddress* pAddress, IEnumTerminal** ppEnumTerminal) EnumerateTerminals;
			public function HRESULT(ITPhone *self, int32 lButtonID, PHONE_BUTTON_MODE* pButtonMode) get_ButtonMode;
			public function HRESULT(ITPhone *self, int32 lButtonID, PHONE_BUTTON_MODE ButtonMode) put_ButtonMode;
			public function HRESULT(ITPhone *self, int32 lButtonID, PHONE_BUTTON_FUNCTION* pButtonFunction) get_ButtonFunction;
			public function HRESULT(ITPhone *self, int32 lButtonID, PHONE_BUTTON_FUNCTION ButtonFunction) put_ButtonFunction;
			public function HRESULT(ITPhone *self, int32 lButtonID, BSTR* ppButtonText) get_ButtonText;
			public function HRESULT(ITPhone *self, int32 lButtonID, BSTR bstrButtonText) put_ButtonText;
			public function HRESULT(ITPhone *self, int32 lButtonID, PHONE_BUTTON_STATE* pButtonState) get_ButtonState;
			public function HRESULT(ITPhone *self, PHONE_HOOK_SWITCH_DEVICE HookSwitchDevice, PHONE_HOOK_SWITCH_STATE* pHookSwitchState) get_HookSwitchState;
			public function HRESULT(ITPhone *self, PHONE_HOOK_SWITCH_DEVICE HookSwitchDevice, PHONE_HOOK_SWITCH_STATE HookSwitchState) put_HookSwitchState;
			public function HRESULT(ITPhone *self, int32 lRingMode) put_RingMode;
			public function HRESULT(ITPhone *self, int32* plRingMode) get_RingMode;
			public function HRESULT(ITPhone *self, int32 lRingVolume) put_RingVolume;
			public function HRESULT(ITPhone *self, int32* plRingVolume) get_RingVolume;
			public function HRESULT(ITPhone *self, PHONE_PRIVILEGE* pPrivilege) get_Privilege;
			public function HRESULT(ITPhone *self, PHONECAPS_BUFFER pcbCaps, uint32* pdwSize, uint8** ppPhoneCapsBuffer) GetPhoneCapsBuffer;
			public function HRESULT(ITPhone *self, PHONECAPS_BUFFER pcbCaps, VARIANT* pVarBuffer) get_PhoneCapsBuffer;
			public function HRESULT(ITPhone *self, int32 lLampID, PHONE_LAMP_MODE* pLampMode) get_LampMode;
			public function HRESULT(ITPhone *self, int32 lLampID, PHONE_LAMP_MODE LampMode) put_LampMode;
			public function HRESULT(ITPhone *self, BSTR* pbstrDisplay) get_Display;
			public function HRESULT(ITPhone *self, int32 lRow, int32 lColumn, BSTR bstrDisplay) SetDisplay;
			public function HRESULT(ITPhone *self, VARIANT* pAddresses) get_PreferredAddresses;
			public function HRESULT(ITPhone *self, IEnumAddress** ppEnumAddress) EnumeratePreferredAddresses;
			public function HRESULT(ITPhone *self, uint8* pParams, uint32 dwSize) DeviceSpecific;
			public function HRESULT(ITPhone *self, VARIANT varDevSpecificByteArray) DeviceSpecificVariant;
			public function HRESULT(ITPhone *self, int32 lLowVersion, int32 lHighVersion, int32* plExtVersion) NegotiateExtVersion;
		}
		[CRepr]
		public struct ITAutomatedPhoneControl : IDispatch
		{
			public const new Guid IID = .(0x1ee1af0e, 0x6159, 0x4a61, 0xb7, 0x9b, 0x6a, 0x4b, 0xa3, 0xfc, 0x9d, 0xfc);
			
			public function HRESULT(ITAutomatedPhoneControl *self, PHONE_TONE Tone, int32 lDuration) StartTone;
			public function HRESULT(ITAutomatedPhoneControl *self) StopTone;
			public function HRESULT(ITAutomatedPhoneControl *self, PHONE_TONE* pTone) get_Tone;
			public function HRESULT(ITAutomatedPhoneControl *self, int32 lRingMode, int32 lDuration) StartRinger;
			public function HRESULT(ITAutomatedPhoneControl *self) StopRinger;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* pfRinging) get_Ringer;
			public function HRESULT(ITAutomatedPhoneControl *self, int16 fEnabled) put_PhoneHandlingEnabled;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* pfEnabled) get_PhoneHandlingEnabled;
			public function HRESULT(ITAutomatedPhoneControl *self, int32 lTimeout) put_AutoEndOfNumberTimeout;
			public function HRESULT(ITAutomatedPhoneControl *self, int32* plTimeout) get_AutoEndOfNumberTimeout;
			public function HRESULT(ITAutomatedPhoneControl *self, int16 fEnabled) put_AutoDialtone;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* pfEnabled) get_AutoDialtone;
			public function HRESULT(ITAutomatedPhoneControl *self, int16 fEnabled) put_AutoStopTonesOnOnHook;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* pfEnabled) get_AutoStopTonesOnOnHook;
			public function HRESULT(ITAutomatedPhoneControl *self, int16 fEnabled) put_AutoStopRingOnOffHook;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* pfEnabled) get_AutoStopRingOnOffHook;
			public function HRESULT(ITAutomatedPhoneControl *self, int16 fEnabled) put_AutoKeypadTones;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* pfEnabled) get_AutoKeypadTones;
			public function HRESULT(ITAutomatedPhoneControl *self, int32 lDuration) put_AutoKeypadTonesMinimumDuration;
			public function HRESULT(ITAutomatedPhoneControl *self, int32* plDuration) get_AutoKeypadTonesMinimumDuration;
			public function HRESULT(ITAutomatedPhoneControl *self, int16 fEnabled) put_AutoVolumeControl;
			public function HRESULT(ITAutomatedPhoneControl *self, int16* fEnabled) get_AutoVolumeControl;
			public function HRESULT(ITAutomatedPhoneControl *self, int32 lStepSize) put_AutoVolumeControlStep;
			public function HRESULT(ITAutomatedPhoneControl *self, int32* plStepSize) get_AutoVolumeControlStep;
			public function HRESULT(ITAutomatedPhoneControl *self, int32 lDelay) put_AutoVolumeControlRepeatDelay;
			public function HRESULT(ITAutomatedPhoneControl *self, int32* plDelay) get_AutoVolumeControlRepeatDelay;
			public function HRESULT(ITAutomatedPhoneControl *self, int32 lPeriod) put_AutoVolumeControlRepeatPeriod;
			public function HRESULT(ITAutomatedPhoneControl *self, int32* plPeriod) get_AutoVolumeControlRepeatPeriod;
			public function HRESULT(ITAutomatedPhoneControl *self, ITCallInfo* pCall, int16 fSelectDefaultTerminals) SelectCall;
			public function HRESULT(ITAutomatedPhoneControl *self, ITCallInfo* pCall) UnselectCall;
			public function HRESULT(ITAutomatedPhoneControl *self, IEnumCall** ppCallEnum) EnumerateSelectedCalls;
			public function HRESULT(ITAutomatedPhoneControl *self, VARIANT* pVariant) get_SelectedCalls;
		}
		[CRepr]
		public struct ITBasicCallControl : IDispatch
		{
			public const new Guid IID = .(0xb1efc389, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITBasicCallControl *self, int16 fSync) Connect;
			public function HRESULT(ITBasicCallControl *self) Answer;
			public function HRESULT(ITBasicCallControl *self, DISCONNECT_CODE code) Disconnect;
			public function HRESULT(ITBasicCallControl *self, int16 fHold) Hold;
			public function HRESULT(ITBasicCallControl *self, BSTR pApplicationName) HandoffDirect;
			public function HRESULT(ITBasicCallControl *self, int32 lMediaType) HandoffIndirect;
			public function HRESULT(ITBasicCallControl *self, ITBasicCallControl* pCall, int16 fSync) Conference;
			public function HRESULT(ITBasicCallControl *self, ITBasicCallControl* pCall, int16 fSync) Transfer;
			public function HRESULT(ITBasicCallControl *self, BSTR pDestAddress) BlindTransfer;
			public function HRESULT(ITBasicCallControl *self, ITBasicCallControl* pCall) SwapHold;
			public function HRESULT(ITBasicCallControl *self, BSTR pParkAddress) ParkDirect;
			public function HRESULT(ITBasicCallControl *self, BSTR* ppNonDirAddress) ParkIndirect;
			public function HRESULT(ITBasicCallControl *self) Unpark;
			public function HRESULT(ITBasicCallControl *self, int32 lMediaType, QOS_SERVICE_LEVEL ServiceLevel) SetQOS;
			public function HRESULT(ITBasicCallControl *self, BSTR pGroupID) Pickup;
			public function HRESULT(ITBasicCallControl *self, BSTR pDestAddress) Dial;
			public function HRESULT(ITBasicCallControl *self, FINISH_MODE finishMode) Finish;
			public function HRESULT(ITBasicCallControl *self) RemoveFromConference;
		}
		[CRepr]
		public struct ITCallInfo : IDispatch
		{
			public const new Guid IID = .(0x350f85d1, 0x1227, 0x11d3, 0x83, 0xd4, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITCallInfo *self, ITAddress** ppAddress) get_Address;
			public function HRESULT(ITCallInfo *self, CALL_STATE* pCallState) get_CallState;
			public function HRESULT(ITCallInfo *self, CALL_PRIVILEGE* pPrivilege) get_Privilege;
			public function HRESULT(ITCallInfo *self, ITCallHub** ppCallHub) get_CallHub;
			public function HRESULT(ITCallInfo *self, CALLINFO_LONG CallInfoLong, int32* plCallInfoLongVal) get_CallInfoLong;
			public function HRESULT(ITCallInfo *self, CALLINFO_LONG CallInfoLong, int32 lCallInfoLongVal) put_CallInfoLong;
			public function HRESULT(ITCallInfo *self, CALLINFO_STRING CallInfoString, BSTR* ppCallInfoString) get_CallInfoString;
			public function HRESULT(ITCallInfo *self, CALLINFO_STRING CallInfoString, BSTR pCallInfoString) put_CallInfoString;
			public function HRESULT(ITCallInfo *self, CALLINFO_BUFFER CallInfoBuffer, VARIANT* ppCallInfoBuffer) get_CallInfoBuffer;
			public function HRESULT(ITCallInfo *self, CALLINFO_BUFFER CallInfoBuffer, VARIANT pCallInfoBuffer) put_CallInfoBuffer;
			public function HRESULT(ITCallInfo *self, CALLINFO_BUFFER CallInfoBuffer, uint32* pdwSize, uint8** ppCallInfoBuffer) GetCallInfoBuffer;
			public function HRESULT(ITCallInfo *self, CALLINFO_BUFFER CallInfoBuffer, uint32 dwSize, uint8* pCallInfoBuffer) SetCallInfoBuffer;
			public function HRESULT(ITCallInfo *self) ReleaseUserUserInfo;
		}
		[CRepr]
		public struct ITCallInfo2 : ITCallInfo
		{
			public const new Guid IID = .(0x94d70ca6, 0x7ab0, 0x4daa, 0x81, 0xca, 0xb8, 0xf8, 0x64, 0x3f, 0xae, 0xc1);
			
			public function HRESULT(ITCallInfo2 *self, TAPI_EVENT TapiEvent, int32 lSubEvent, int16* pEnable) get_EventFilter;
			public function HRESULT(ITCallInfo2 *self, TAPI_EVENT TapiEvent, int32 lSubEvent, int16 bEnable) put_EventFilter;
		}
		[CRepr]
		public struct ITTerminal : IDispatch
		{
			public const new Guid IID = .(0xb1efc38a, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITTerminal *self, BSTR* ppName) get_Name;
			public function HRESULT(ITTerminal *self, TERMINAL_STATE* pTerminalState) get_State;
			public function HRESULT(ITTerminal *self, TERMINAL_TYPE* pType) get_TerminalType;
			public function HRESULT(ITTerminal *self, BSTR* ppTerminalClass) get_TerminalClass;
			public function HRESULT(ITTerminal *self, int32* plMediaType) get_MediaType;
			public function HRESULT(ITTerminal *self, TERMINAL_DIRECTION* pDirection) get_Direction;
		}
		[CRepr]
		public struct ITMultiTrackTerminal : IDispatch
		{
			public const new Guid IID = .(0xfe040091, 0xade8, 0x4072, 0x95, 0xc9, 0xbf, 0x7d, 0xe8, 0xc5, 0x4b, 0x44);
			
			public function HRESULT(ITMultiTrackTerminal *self, VARIANT* pVariant) get_TrackTerminals;
			public function HRESULT(ITMultiTrackTerminal *self, IEnumTerminal** ppEnumTerminal) EnumerateTrackTerminals;
			public function HRESULT(ITMultiTrackTerminal *self, int32 MediaType, TERMINAL_DIRECTION TerminalDirection, ITTerminal** ppTerminal) CreateTrackTerminal;
			public function HRESULT(ITMultiTrackTerminal *self, int32* plMediaTypesInUse) get_MediaTypesInUse;
			public function HRESULT(ITMultiTrackTerminal *self, TERMINAL_DIRECTION* plDirectionsInUsed) get_DirectionsInUse;
			public function HRESULT(ITMultiTrackTerminal *self, ITTerminal* pTrackTerminalToRemove) RemoveTrackTerminal;
		}
		[CRepr]
		public struct ITFileTrack : IDispatch
		{
			public const new Guid IID = .(0x31ca6ea9, 0xc08a, 0x4bea, 0x88, 0x11, 0x8e, 0x9c, 0x1b, 0xa3, 0xea, 0x3a);
			
			public function HRESULT(ITFileTrack *self, AM_MEDIA_TYPE** ppmt) get_Format;
			public function HRESULT(ITFileTrack *self, AM_MEDIA_TYPE* pmt) put_Format;
			public function HRESULT(ITFileTrack *self, ITTerminal** ppControllingTerminal) get_ControllingTerminal;
			public function HRESULT(ITFileTrack *self, ITScriptableAudioFormat** ppAudioFormat) get_AudioFormatForScripting;
			public function HRESULT(ITFileTrack *self, ITScriptableAudioFormat* pAudioFormat) put_AudioFormatForScripting;
			public function HRESULT(ITFileTrack *self, ITScriptableAudioFormat** ppAudioFormat) get_EmptyAudioFormatForScripting;
		}
		[CRepr]
		public struct ITMediaPlayback : IDispatch
		{
			public const new Guid IID = .(0x627e8ae6, 0xae4c, 0x4a69, 0xbb, 0x63, 0x2a, 0xd6, 0x25, 0x40, 0x4b, 0x77);
			
			public function HRESULT(ITMediaPlayback *self, VARIANT PlayListVariant) put_PlayList;
			public function HRESULT(ITMediaPlayback *self, VARIANT* pPlayListVariant) get_PlayList;
		}
		[CRepr]
		public struct ITMediaRecord : IDispatch
		{
			public const new Guid IID = .(0xf5dd4592, 0x5476, 0x4cc1, 0x9d, 0x4d, 0xfa, 0xd3, 0xee, 0xfe, 0x7d, 0xb2);
			
			public function HRESULT(ITMediaRecord *self, BSTR bstrFileName) put_FileName;
			public function HRESULT(ITMediaRecord *self, BSTR* pbstrFileName) get_FileName;
		}
		[CRepr]
		public struct ITMediaControl : IDispatch
		{
			public const new Guid IID = .(0xc445dde8, 0x5199, 0x4bc7, 0x98, 0x07, 0x5f, 0xfb, 0x92, 0xe4, 0x2e, 0x09);
			
			public function HRESULT(ITMediaControl *self) Start;
			public function HRESULT(ITMediaControl *self) Stop;
			public function HRESULT(ITMediaControl *self) Pause;
			public function HRESULT(ITMediaControl *self, TERMINAL_MEDIA_STATE* pTerminalMediaState) get_MediaState;
		}
		[CRepr]
		public struct ITBasicAudioTerminal : IDispatch
		{
			public const new Guid IID = .(0xb1efc38d, 0x9355, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITBasicAudioTerminal *self, int32 lVolume) put_Volume;
			public function HRESULT(ITBasicAudioTerminal *self, int32* plVolume) get_Volume;
			public function HRESULT(ITBasicAudioTerminal *self, int32 lBalance) put_Balance;
			public function HRESULT(ITBasicAudioTerminal *self, int32* plBalance) get_Balance;
		}
		[CRepr]
		public struct ITStaticAudioTerminal : IDispatch
		{
			public const new Guid IID = .(0xa86b7871, 0xd14c, 0x48e6, 0x92, 0x2e, 0xa8, 0xd1, 0x5f, 0x98, 0x48, 0x00);
			
			public function HRESULT(ITStaticAudioTerminal *self, int32* plWaveId) get_WaveId;
		}
		[CRepr]
		public struct ITCallHub : IDispatch
		{
			public const new Guid IID = .(0xa3c1544e, 0x5b92, 0x11d1, 0x8f, 0x4e, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITCallHub *self) Clear;
			public function HRESULT(ITCallHub *self, IEnumCall** ppEnumCall) EnumerateCalls;
			public function HRESULT(ITCallHub *self, VARIANT* pCalls) get_Calls;
			public function HRESULT(ITCallHub *self, int32* plCalls) get_NumCalls;
			public function HRESULT(ITCallHub *self, CALLHUB_STATE* pState) get_State;
		}
		[CRepr]
		public struct ITLegacyAddressMediaControl : IUnknown
		{
			public const new Guid IID = .(0xab493640, 0x4c0b, 0x11d2, 0xa0, 0x46, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITLegacyAddressMediaControl *self, BSTR pDeviceClass, uint32* pdwSize, uint8** ppDeviceID) GetID;
			public function HRESULT(ITLegacyAddressMediaControl *self, BSTR pDeviceClass, uint32* pdwSize, uint8** ppDeviceConfig) GetDevConfig;
			public function HRESULT(ITLegacyAddressMediaControl *self, BSTR pDeviceClass, uint32 dwSize, uint8* pDeviceConfig) SetDevConfig;
		}
		[CRepr]
		public struct ITPrivateEvent : IDispatch
		{
			public const new Guid IID = .(0x0e269cd0, 0x10d4, 0x4121, 0x9c, 0x22, 0x9c, 0x85, 0xd6, 0x25, 0x65, 0x0d);
			
			public function HRESULT(ITPrivateEvent *self, ITAddress** ppAddress) get_Address;
			public function HRESULT(ITPrivateEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITPrivateEvent *self, ITCallHub** ppCallHub) get_CallHub;
			public function HRESULT(ITPrivateEvent *self, int32* plEventCode) get_EventCode;
			public function HRESULT(ITPrivateEvent *self, IDispatch** pEventInterface) get_EventInterface;
		}
		[CRepr]
		public struct ITLegacyAddressMediaControl2 : ITLegacyAddressMediaControl
		{
			public const new Guid IID = .(0xb0ee512b, 0xa531, 0x409e, 0x9d, 0xd9, 0x40, 0x99, 0xfe, 0x86, 0xc7, 0x38);
			
			public function HRESULT(ITLegacyAddressMediaControl2 *self, HWND hwndOwner, BSTR pDeviceClass) ConfigDialog;
			public function HRESULT(ITLegacyAddressMediaControl2 *self, HWND hwndOwner, BSTR pDeviceClass, uint32 dwSizeIn, uint8* pDeviceConfigIn, uint32* pdwSizeOut, uint8** ppDeviceConfigOut) ConfigDialogEdit;
		}
		[CRepr]
		public struct ITLegacyCallMediaControl : IDispatch
		{
			public const new Guid IID = .(0xd624582f, 0xcc23, 0x4436, 0xb8, 0xa5, 0x47, 0xc6, 0x25, 0xc8, 0x04, 0x5d);
			
			public function HRESULT(ITLegacyCallMediaControl *self, int32 DigitMode) DetectDigits;
			public function HRESULT(ITLegacyCallMediaControl *self, BSTR pDigits, int32 DigitMode) GenerateDigits;
			public function HRESULT(ITLegacyCallMediaControl *self, BSTR pDeviceClass, uint32* pdwSize, uint8** ppDeviceID) GetID;
			public function HRESULT(ITLegacyCallMediaControl *self, int32 lMediaType) SetMediaType;
			public function HRESULT(ITLegacyCallMediaControl *self, int32 lMediaType) MonitorMedia;
		}
		[CRepr]
		public struct ITLegacyCallMediaControl2 : ITLegacyCallMediaControl
		{
			public const new Guid IID = .(0x57ca332d, 0x7bc2, 0x44f1, 0xa6, 0x0c, 0x93, 0x6f, 0xe8, 0xd7, 0xce, 0x73);
			
			public function HRESULT(ITLegacyCallMediaControl2 *self, BSTR pDigits, int32 DigitMode, int32 lDuration) GenerateDigits2;
			public function HRESULT(ITLegacyCallMediaControl2 *self, int32 DigitMode, int32 lNumDigits, BSTR pTerminationDigits, int32 lFirstDigitTimeout, int32 lInterDigitTimeout) GatherDigits;
			public function HRESULT(ITLegacyCallMediaControl2 *self, TAPI_DETECTTONE* pToneList, int32 lNumTones) DetectTones;
			public function HRESULT(ITLegacyCallMediaControl2 *self, ITCollection2* pDetectToneCollection) DetectTonesByCollection;
			public function HRESULT(ITLegacyCallMediaControl2 *self, TAPI_TONEMODE ToneMode, int32 lDuration) GenerateTone;
			public function HRESULT(ITLegacyCallMediaControl2 *self, TAPI_CUSTOMTONE* pToneList, int32 lNumTones, int32 lDuration) GenerateCustomTones;
			public function HRESULT(ITLegacyCallMediaControl2 *self, ITCollection2* pCustomToneCollection, int32 lDuration) GenerateCustomTonesByCollection;
			public function HRESULT(ITLegacyCallMediaControl2 *self, ITDetectTone** ppDetectTone) CreateDetectToneObject;
			public function HRESULT(ITLegacyCallMediaControl2 *self, ITCustomTone** ppCustomTone) CreateCustomToneObject;
			public function HRESULT(ITLegacyCallMediaControl2 *self, BSTR bstrDeviceClass, VARIANT* pVarDeviceID) GetIDAsVariant;
		}
		[CRepr]
		public struct ITDetectTone : IDispatch
		{
			public const new Guid IID = .(0x961f79bd, 0x3097, 0x49df, 0xa1, 0xd6, 0x90, 0x9b, 0x77, 0xe8, 0x9c, 0xa0);
			
			public function HRESULT(ITDetectTone *self, int32* plAppSpecific) get_AppSpecific;
			public function HRESULT(ITDetectTone *self, int32 lAppSpecific) put_AppSpecific;
			public function HRESULT(ITDetectTone *self, int32* plDuration) get_Duration;
			public function HRESULT(ITDetectTone *self, int32 lDuration) put_Duration;
			public function HRESULT(ITDetectTone *self, int32 Index, int32* plFrequency) get_Frequency;
			public function HRESULT(ITDetectTone *self, int32 Index, int32 lFrequency) put_Frequency;
		}
		[CRepr]
		public struct ITCustomTone : IDispatch
		{
			public const new Guid IID = .(0x357ad764, 0xb3c6, 0x4b2a, 0x8f, 0xa5, 0x07, 0x22, 0x82, 0x7a, 0x92, 0x54);
			
			public function HRESULT(ITCustomTone *self, int32* plFrequency) get_Frequency;
			public function HRESULT(ITCustomTone *self, int32 lFrequency) put_Frequency;
			public function HRESULT(ITCustomTone *self, int32* plCadenceOn) get_CadenceOn;
			public function HRESULT(ITCustomTone *self, int32 CadenceOn) put_CadenceOn;
			public function HRESULT(ITCustomTone *self, int32* plCadenceOff) get_CadenceOff;
			public function HRESULT(ITCustomTone *self, int32 lCadenceOff) put_CadenceOff;
			public function HRESULT(ITCustomTone *self, int32* plVolume) get_Volume;
			public function HRESULT(ITCustomTone *self, int32 lVolume) put_Volume;
		}
		[CRepr]
		public struct IEnumPhone : IUnknown
		{
			public const new Guid IID = .(0xf15b7669, 0x4780, 0x4595, 0x8c, 0x89, 0xfb, 0x36, 0x9c, 0x8c, 0xf7, 0xaa);
			
			public function HRESULT(IEnumPhone *self, uint32 celt, ITPhone** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumPhone *self) Reset;
			public function HRESULT(IEnumPhone *self, uint32 celt) Skip;
			public function HRESULT(IEnumPhone *self, IEnumPhone** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumTerminal : IUnknown
		{
			public const new Guid IID = .(0xae269cf4, 0x935e, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(IEnumTerminal *self, uint32 celt, ITTerminal** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumTerminal *self) Reset;
			public function HRESULT(IEnumTerminal *self, uint32 celt) Skip;
			public function HRESULT(IEnumTerminal *self, IEnumTerminal** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumTerminalClass : IUnknown
		{
			public const new Guid IID = .(0xae269cf5, 0x935e, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(IEnumTerminalClass *self, uint32 celt, Guid* pElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumTerminalClass *self) Reset;
			public function HRESULT(IEnumTerminalClass *self, uint32 celt) Skip;
			public function HRESULT(IEnumTerminalClass *self, IEnumTerminalClass** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumCall : IUnknown
		{
			public const new Guid IID = .(0xae269cf6, 0x935e, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(IEnumCall *self, uint32 celt, ITCallInfo** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumCall *self) Reset;
			public function HRESULT(IEnumCall *self, uint32 celt) Skip;
			public function HRESULT(IEnumCall *self, IEnumCall** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumAddress : IUnknown
		{
			public const new Guid IID = .(0x1666fca1, 0x9363, 0x11d0, 0x83, 0x5c, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(IEnumAddress *self, uint32 celt, ITAddress** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumAddress *self) Reset;
			public function HRESULT(IEnumAddress *self, uint32 celt) Skip;
			public function HRESULT(IEnumAddress *self, IEnumAddress** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumCallHub : IUnknown
		{
			public const new Guid IID = .(0xa3c15450, 0x5b92, 0x11d1, 0x8f, 0x4e, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(IEnumCallHub *self, uint32 celt, ITCallHub** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumCallHub *self) Reset;
			public function HRESULT(IEnumCallHub *self, uint32 celt) Skip;
			public function HRESULT(IEnumCallHub *self, IEnumCallHub** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumBstr : IUnknown
		{
			public const new Guid IID = .(0x35372049, 0x0bc6, 0x11d2, 0xa0, 0x33, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(IEnumBstr *self, uint32 celt, BSTR* ppStrings, uint32* pceltFetched) Next;
			public function HRESULT(IEnumBstr *self) Reset;
			public function HRESULT(IEnumBstr *self, uint32 celt) Skip;
			public function HRESULT(IEnumBstr *self, IEnumBstr** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumPluggableTerminalClassInfo : IUnknown
		{
			public const new Guid IID = .(0x4567450c, 0xdbee, 0x4e3f, 0xaa, 0xf5, 0x37, 0xbf, 0x9e, 0xbf, 0x5e, 0x29);
			
			public function HRESULT(IEnumPluggableTerminalClassInfo *self, uint32 celt, ITPluggableTerminalClassInfo** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumPluggableTerminalClassInfo *self) Reset;
			public function HRESULT(IEnumPluggableTerminalClassInfo *self, uint32 celt) Skip;
			public function HRESULT(IEnumPluggableTerminalClassInfo *self, IEnumPluggableTerminalClassInfo** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumPluggableSuperclassInfo : IUnknown
		{
			public const new Guid IID = .(0xe9586a80, 0x89e6, 0x4cff, 0x93, 0x1d, 0x47, 0x8d, 0x57, 0x51, 0xf4, 0xc0);
			
			public function HRESULT(IEnumPluggableSuperclassInfo *self, uint32 celt, ITPluggableTerminalSuperclassInfo** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumPluggableSuperclassInfo *self) Reset;
			public function HRESULT(IEnumPluggableSuperclassInfo *self, uint32 celt) Skip;
			public function HRESULT(IEnumPluggableSuperclassInfo *self, IEnumPluggableSuperclassInfo** ppEnum) Clone;
		}
		[CRepr]
		public struct ITPhoneEvent : IDispatch
		{
			public const new Guid IID = .(0x8f942dd8, 0x64ed, 0x4aaf, 0xa7, 0x7d, 0xb2, 0x3d, 0xb0, 0x83, 0x7e, 0xad);
			
			public function HRESULT(ITPhoneEvent *self, ITPhone** ppPhone) get_Phone;
			public function HRESULT(ITPhoneEvent *self, PHONE_EVENT* pEvent) get_Event;
			public function HRESULT(ITPhoneEvent *self, PHONE_BUTTON_STATE* pState) get_ButtonState;
			public function HRESULT(ITPhoneEvent *self, PHONE_HOOK_SWITCH_STATE* pState) get_HookSwitchState;
			public function HRESULT(ITPhoneEvent *self, PHONE_HOOK_SWITCH_DEVICE* pDevice) get_HookSwitchDevice;
			public function HRESULT(ITPhoneEvent *self, int32* plRingMode) get_RingMode;
			public function HRESULT(ITPhoneEvent *self, int32* plButtonLampId) get_ButtonLampId;
			public function HRESULT(ITPhoneEvent *self, BSTR* ppNumber) get_NumberGathered;
			public function HRESULT(ITPhoneEvent *self, ITCallInfo** ppCallInfo) get_Call;
		}
		[CRepr]
		public struct ITCallStateEvent : IDispatch
		{
			public const new Guid IID = .(0x62f47097, 0x95c9, 0x11d0, 0x83, 0x5d, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITCallStateEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITCallStateEvent *self, CALL_STATE* pCallState) get_State;
			public function HRESULT(ITCallStateEvent *self, CALL_STATE_EVENT_CAUSE* pCEC) get_Cause;
			public function HRESULT(ITCallStateEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITPhoneDeviceSpecificEvent : IDispatch
		{
			public const new Guid IID = .(0x63ffb2a6, 0x872b, 0x4cd3, 0xa5, 0x01, 0x32, 0x6e, 0x8f, 0xb4, 0x0a, 0xf7);
			
			public function HRESULT(ITPhoneDeviceSpecificEvent *self, ITPhone** ppPhone) get_Phone;
			public function HRESULT(ITPhoneDeviceSpecificEvent *self, int32* pParam1) get_lParam1;
			public function HRESULT(ITPhoneDeviceSpecificEvent *self, int32* pParam2) get_lParam2;
			public function HRESULT(ITPhoneDeviceSpecificEvent *self, int32* pParam3) get_lParam3;
		}
		[CRepr]
		public struct ITCallMediaEvent : IDispatch
		{
			public const new Guid IID = .(0xff36b87f, 0xec3a, 0x11d0, 0x8e, 0xe4, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITCallMediaEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITCallMediaEvent *self, CALL_MEDIA_EVENT* pCallMediaEvent) get_Event;
			public function HRESULT(ITCallMediaEvent *self, HRESULT* phrError) get_Error;
			public function HRESULT(ITCallMediaEvent *self, ITTerminal** ppTerminal) get_Terminal;
			public function HRESULT(ITCallMediaEvent *self, ITStream** ppStream) get_Stream;
			public function HRESULT(ITCallMediaEvent *self, CALL_MEDIA_EVENT_CAUSE* pCause) get_Cause;
		}
		[CRepr]
		public struct ITDigitDetectionEvent : IDispatch
		{
			public const new Guid IID = .(0x80d3bfac, 0x57d9, 0x11d2, 0xa0, 0x4a, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITDigitDetectionEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITDigitDetectionEvent *self, uint8* pucDigit) get_Digit;
			public function HRESULT(ITDigitDetectionEvent *self, int32* pDigitMode) get_DigitMode;
			public function HRESULT(ITDigitDetectionEvent *self, int32* plTickCount) get_TickCount;
			public function HRESULT(ITDigitDetectionEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITDigitGenerationEvent : IDispatch
		{
			public const new Guid IID = .(0x80d3bfad, 0x57d9, 0x11d2, 0xa0, 0x4a, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITDigitGenerationEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITDigitGenerationEvent *self, int32* plGenerationTermination) get_GenerationTermination;
			public function HRESULT(ITDigitGenerationEvent *self, int32* plTickCount) get_TickCount;
			public function HRESULT(ITDigitGenerationEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITDigitsGatheredEvent : IDispatch
		{
			public const new Guid IID = .(0xe52ec4c1, 0xcba3, 0x441a, 0x9e, 0x6a, 0x93, 0xcb, 0x90, 0x9e, 0x97, 0x24);
			
			public function HRESULT(ITDigitsGatheredEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITDigitsGatheredEvent *self, BSTR* ppDigits) get_Digits;
			public function HRESULT(ITDigitsGatheredEvent *self, TAPI_GATHERTERM* pGatherTermination) get_GatherTermination;
			public function HRESULT(ITDigitsGatheredEvent *self, int32* plTickCount) get_TickCount;
			public function HRESULT(ITDigitsGatheredEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITToneDetectionEvent : IDispatch
		{
			public const new Guid IID = .(0x407e0faf, 0xd047, 0x4753, 0xb0, 0xc6, 0x8e, 0x06, 0x03, 0x73, 0xfe, 0xcd);
			
			public function HRESULT(ITToneDetectionEvent *self, ITCallInfo** ppCallInfo) get_Call;
			public function HRESULT(ITToneDetectionEvent *self, int32* plAppSpecific) get_AppSpecific;
			public function HRESULT(ITToneDetectionEvent *self, int32* plTickCount) get_TickCount;
			public function HRESULT(ITToneDetectionEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITTAPIObjectEvent : IDispatch
		{
			public const new Guid IID = .(0xf4854d48, 0x937a, 0x11d1, 0xbb, 0x58, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITTAPIObjectEvent *self, ITTAPI** ppTAPIObject) get_TAPIObject;
			public function HRESULT(ITTAPIObjectEvent *self, TAPIOBJECT_EVENT* pEvent) get_Event;
			public function HRESULT(ITTAPIObjectEvent *self, ITAddress** ppAddress) get_Address;
			public function HRESULT(ITTAPIObjectEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITTAPIObjectEvent2 : ITTAPIObjectEvent
		{
			public const new Guid IID = .(0x359dda6e, 0x68ce, 0x4383, 0xbf, 0x0b, 0x16, 0x91, 0x33, 0xc4, 0x1b, 0x46);
			
			public function HRESULT(ITTAPIObjectEvent2 *self, ITPhone** ppPhone) get_Phone;
		}
		[CRepr]
		public struct ITTAPIEventNotification : IUnknown
		{
			public const new Guid IID = .(0xeddb9426, 0x3b91, 0x11d1, 0x8f, 0x30, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITTAPIEventNotification *self, TAPI_EVENT TapiEvent, IDispatch* pEvent) Event;
		}
		[CRepr]
		public struct ITCallHubEvent : IDispatch
		{
			public const new Guid IID = .(0xa3c15451, 0x5b92, 0x11d1, 0x8f, 0x4e, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITCallHubEvent *self, CALLHUB_EVENT* pEvent) get_Event;
			public function HRESULT(ITCallHubEvent *self, ITCallHub** ppCallHub) get_CallHub;
			public function HRESULT(ITCallHubEvent *self, ITCallInfo** ppCall) get_Call;
		}
		[CRepr]
		public struct ITAddressEvent : IDispatch
		{
			public const new Guid IID = .(0x831ce2d1, 0x83b5, 0x11d1, 0xbb, 0x5c, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITAddressEvent *self, ITAddress** ppAddress) get_Address;
			public function HRESULT(ITAddressEvent *self, ADDRESS_EVENT* pEvent) get_Event;
			public function HRESULT(ITAddressEvent *self, ITTerminal** ppTerminal) get_Terminal;
		}
		[CRepr]
		public struct ITAddressDeviceSpecificEvent : IDispatch
		{
			public const new Guid IID = .(0x3acb216b, 0x40bd, 0x487a, 0x86, 0x72, 0x5c, 0xe7, 0x7b, 0xd7, 0xe3, 0xa3);
			
			public function HRESULT(ITAddressDeviceSpecificEvent *self, ITAddress** ppAddress) get_Address;
			public function HRESULT(ITAddressDeviceSpecificEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITAddressDeviceSpecificEvent *self, int32* pParam1) get_lParam1;
			public function HRESULT(ITAddressDeviceSpecificEvent *self, int32* pParam2) get_lParam2;
			public function HRESULT(ITAddressDeviceSpecificEvent *self, int32* pParam3) get_lParam3;
		}
		[CRepr]
		public struct ITFileTerminalEvent : IDispatch
		{
			public const new Guid IID = .(0xe4a7fbac, 0x8c17, 0x4427, 0x9f, 0x55, 0x9f, 0x58, 0x9a, 0xc8, 0xaf, 0x00);
			
			public function HRESULT(ITFileTerminalEvent *self, ITTerminal** ppTerminal) get_Terminal;
			public function HRESULT(ITFileTerminalEvent *self, ITFileTrack** ppTrackTerminal) get_Track;
			public function HRESULT(ITFileTerminalEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITFileTerminalEvent *self, TERMINAL_MEDIA_STATE* pState) get_State;
			public function HRESULT(ITFileTerminalEvent *self, FT_STATE_EVENT_CAUSE* pCause) get_Cause;
			public function HRESULT(ITFileTerminalEvent *self, HRESULT* phrErrorCode) get_Error;
		}
		[CRepr]
		public struct ITTTSTerminalEvent : IDispatch
		{
			public const new Guid IID = .(0xd964788f, 0x95a5, 0x461d, 0xab, 0x0c, 0xb9, 0x90, 0x0a, 0x6c, 0x27, 0x13);
			
			public function HRESULT(ITTTSTerminalEvent *self, ITTerminal** ppTerminal) get_Terminal;
			public function HRESULT(ITTTSTerminalEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITTTSTerminalEvent *self, HRESULT* phrErrorCode) get_Error;
		}
		[CRepr]
		public struct ITASRTerminalEvent : IDispatch
		{
			public const new Guid IID = .(0xee016a02, 0x4fa9, 0x467c, 0x93, 0x3f, 0x5a, 0x15, 0xb1, 0x23, 0x77, 0xd7);
			
			public function HRESULT(ITASRTerminalEvent *self, ITTerminal** ppTerminal) get_Terminal;
			public function HRESULT(ITASRTerminalEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITASRTerminalEvent *self, HRESULT* phrErrorCode) get_Error;
		}
		[CRepr]
		public struct ITToneTerminalEvent : IDispatch
		{
			public const new Guid IID = .(0xe6f56009, 0x611f, 0x4945, 0xbb, 0xd2, 0x2d, 0x0c, 0xe5, 0x61, 0x20, 0x56);
			
			public function HRESULT(ITToneTerminalEvent *self, ITTerminal** ppTerminal) get_Terminal;
			public function HRESULT(ITToneTerminalEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITToneTerminalEvent *self, HRESULT* phrErrorCode) get_Error;
		}
		[CRepr]
		public struct ITQOSEvent : IDispatch
		{
			public const new Guid IID = .(0xcfa3357c, 0xad77, 0x11d1, 0xbb, 0x68, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITQOSEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITQOSEvent *self, QOS_EVENT* pQosEvent) get_Event;
			public function HRESULT(ITQOSEvent *self, int32* plMediaType) get_MediaType;
		}
		[CRepr]
		public struct ITCallInfoChangeEvent : IDispatch
		{
			public const new Guid IID = .(0x5d4b65f9, 0xe51c, 0x11d1, 0xa0, 0x2f, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITCallInfoChangeEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITCallInfoChangeEvent *self, CALLINFOCHANGE_CAUSE* pCIC) get_Cause;
			public function HRESULT(ITCallInfoChangeEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITRequest : IDispatch
		{
			public const new Guid IID = .(0xac48ffdf, 0xf8c4, 0x11d1, 0xa0, 0x30, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITRequest *self, BSTR pDestAddress, BSTR pAppName, BSTR pCalledParty, BSTR pComment) MakeCall;
		}
		[CRepr]
		public struct ITRequestEvent : IDispatch
		{
			public const new Guid IID = .(0xac48ffde, 0xf8c4, 0x11d1, 0xa0, 0x30, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITRequestEvent *self, int32* plRegistrationInstance) get_RegistrationInstance;
			public function HRESULT(ITRequestEvent *self, int32* plRequestMode) get_RequestMode;
			public function HRESULT(ITRequestEvent *self, BSTR* ppDestAddress) get_DestAddress;
			public function HRESULT(ITRequestEvent *self, BSTR* ppAppName) get_AppName;
			public function HRESULT(ITRequestEvent *self, BSTR* ppCalledParty) get_CalledParty;
			public function HRESULT(ITRequestEvent *self, BSTR* ppComment) get_Comment;
		}
		[CRepr]
		public struct ITCollection : IDispatch
		{
			public const new Guid IID = .(0x5ec5acf2, 0x9c02, 0x11d0, 0x83, 0x62, 0x00, 0xaa, 0x00, 0x3c, 0xca, 0xbd);
			
			public function HRESULT(ITCollection *self, int32* lCount) get_Count;
			public function HRESULT(ITCollection *self, int32 Index, VARIANT* pVariant) get_Item;
			public function HRESULT(ITCollection *self, IUnknown** ppNewEnum) get__NewEnum;
		}
		[CRepr]
		public struct ITCollection2 : ITCollection
		{
			public const new Guid IID = .(0xe6dddda5, 0xa6d3, 0x48ff, 0x87, 0x37, 0xd3, 0x2f, 0xc4, 0xd9, 0x54, 0x77);
			
			public function HRESULT(ITCollection2 *self, int32 Index, VARIANT* pVariant) Add;
			public function HRESULT(ITCollection2 *self, int32 Index) Remove;
		}
		[CRepr]
		public struct ITForwardInformation : IDispatch
		{
			public const new Guid IID = .(0x449f659e, 0x88a3, 0x11d1, 0xbb, 0x5d, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITForwardInformation *self, int32 lNumRings) put_NumRingsNoAnswer;
			public function HRESULT(ITForwardInformation *self, int32* plNumRings) get_NumRingsNoAnswer;
			public function HRESULT(ITForwardInformation *self, int32 ForwardType, BSTR pDestAddress, BSTR pCallerAddress) SetForwardType;
			public function HRESULT(ITForwardInformation *self, int32 ForwardType, BSTR* ppDestAddress) get_ForwardTypeDestination;
			public function HRESULT(ITForwardInformation *self, int32 Forwardtype, BSTR* ppCallerAddress) get_ForwardTypeCaller;
			public function HRESULT(ITForwardInformation *self, int32 ForwardType, BSTR* ppDestinationAddress, BSTR* ppCallerAddress) GetForwardType;
			public function HRESULT(ITForwardInformation *self) Clear;
		}
		[CRepr]
		public struct ITForwardInformation2 : ITForwardInformation
		{
			public const new Guid IID = .(0x5229b4ed, 0xb260, 0x4382, 0x8e, 0x1a, 0x5d, 0xf3, 0xa8, 0xa4, 0xcc, 0xc0);
			
			public function HRESULT(ITForwardInformation2 *self, int32 ForwardType, BSTR pDestAddress, int32 DestAddressType, BSTR pCallerAddress, int32 CallerAddressType) SetForwardType2;
			public function HRESULT(ITForwardInformation2 *self, int32 ForwardType, BSTR* ppDestinationAddress, int32* pDestAddressType, BSTR* ppCallerAddress, int32* pCallerAddressType) GetForwardType2;
			public function HRESULT(ITForwardInformation2 *self, int32 ForwardType, int32* pDestAddressType) get_ForwardTypeDestinationAddressType;
			public function HRESULT(ITForwardInformation2 *self, int32 Forwardtype, int32* pCallerAddressType) get_ForwardTypeCallerAddressType;
		}
		[CRepr]
		public struct ITAddressTranslation : IDispatch
		{
			public const new Guid IID = .(0x0c4d8f03, 0x8ddb, 0x11d1, 0xa0, 0x9e, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAddressTranslation *self, BSTR pAddressToTranslate, int32 lCard, int32 lTranslateOptions, ITAddressTranslationInfo** ppTranslated) TranslateAddress;
			public function HRESULT(ITAddressTranslation *self, int hwndOwner, BSTR pAddressIn) TranslateDialog;
			public function HRESULT(ITAddressTranslation *self, IEnumLocation** ppEnumLocation) EnumerateLocations;
			public function HRESULT(ITAddressTranslation *self, VARIANT* pVariant) get_Locations;
			public function HRESULT(ITAddressTranslation *self, IEnumCallingCard** ppEnumCallingCard) EnumerateCallingCards;
			public function HRESULT(ITAddressTranslation *self, VARIANT* pVariant) get_CallingCards;
		}
		[CRepr]
		public struct ITAddressTranslationInfo : IDispatch
		{
			public const new Guid IID = .(0xafc15945, 0x8d40, 0x11d1, 0xa0, 0x9e, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAddressTranslationInfo *self, BSTR* ppDialableString) get_DialableString;
			public function HRESULT(ITAddressTranslationInfo *self, BSTR* ppDisplayableString) get_DisplayableString;
			public function HRESULT(ITAddressTranslationInfo *self, int32* CountryCode) get_CurrentCountryCode;
			public function HRESULT(ITAddressTranslationInfo *self, int32* CountryCode) get_DestinationCountryCode;
			public function HRESULT(ITAddressTranslationInfo *self, int32* plResults) get_TranslationResults;
		}
		[CRepr]
		public struct ITLocationInfo : IDispatch
		{
			public const new Guid IID = .(0x0c4d8eff, 0x8ddb, 0x11d1, 0xa0, 0x9e, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITLocationInfo *self, int32* plLocationID) get_PermanentLocationID;
			public function HRESULT(ITLocationInfo *self, int32* plCountryCode) get_CountryCode;
			public function HRESULT(ITLocationInfo *self, int32* plCountryID) get_CountryID;
			public function HRESULT(ITLocationInfo *self, int32* plOptions) get_Options;
			public function HRESULT(ITLocationInfo *self, int32* plCardID) get_PreferredCardID;
			public function HRESULT(ITLocationInfo *self, BSTR* ppLocationName) get_LocationName;
			public function HRESULT(ITLocationInfo *self, BSTR* ppCode) get_CityCode;
			public function HRESULT(ITLocationInfo *self, BSTR* ppCode) get_LocalAccessCode;
			public function HRESULT(ITLocationInfo *self, BSTR* ppCode) get_LongDistanceAccessCode;
			public function HRESULT(ITLocationInfo *self, BSTR* ppTollList) get_TollPrefixList;
			public function HRESULT(ITLocationInfo *self, BSTR* ppCode) get_CancelCallWaitingCode;
		}
		[CRepr]
		public struct IEnumLocation : IUnknown
		{
			public const new Guid IID = .(0x0c4d8f01, 0x8ddb, 0x11d1, 0xa0, 0x9e, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumLocation *self, uint32 celt, ITLocationInfo** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumLocation *self) Reset;
			public function HRESULT(IEnumLocation *self, uint32 celt) Skip;
			public function HRESULT(IEnumLocation *self, IEnumLocation** ppEnum) Clone;
		}
		[CRepr]
		public struct ITCallingCard : IDispatch
		{
			public const new Guid IID = .(0x0c4d8f00, 0x8ddb, 0x11d1, 0xa0, 0x9e, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITCallingCard *self, int32* plCardID) get_PermanentCardID;
			public function HRESULT(ITCallingCard *self, int32* plDigits) get_NumberOfDigits;
			public function HRESULT(ITCallingCard *self, int32* plOptions) get_Options;
			public function HRESULT(ITCallingCard *self, BSTR* ppCardName) get_CardName;
			public function HRESULT(ITCallingCard *self, BSTR* ppRule) get_SameAreaDialingRule;
			public function HRESULT(ITCallingCard *self, BSTR* ppRule) get_LongDistanceDialingRule;
			public function HRESULT(ITCallingCard *self, BSTR* ppRule) get_InternationalDialingRule;
		}
		[CRepr]
		public struct IEnumCallingCard : IUnknown
		{
			public const new Guid IID = .(0x0c4d8f02, 0x8ddb, 0x11d1, 0xa0, 0x9e, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumCallingCard *self, uint32 celt, ITCallingCard** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumCallingCard *self) Reset;
			public function HRESULT(IEnumCallingCard *self, uint32 celt) Skip;
			public function HRESULT(IEnumCallingCard *self, IEnumCallingCard** ppEnum) Clone;
		}
		[CRepr]
		public struct ITCallNotificationEvent : IDispatch
		{
			public const new Guid IID = .(0x895801df, 0x3dd6, 0x11d1, 0x8f, 0x30, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITCallNotificationEvent *self, ITCallInfo** ppCall) get_Call;
			public function HRESULT(ITCallNotificationEvent *self, CALL_NOTIFICATION_EVENT* pCallNotificationEvent) get_Event;
			public function HRESULT(ITCallNotificationEvent *self, int32* plCallbackInstance) get_CallbackInstance;
		}
		[CRepr]
		public struct ITDispatchMapper : IDispatch
		{
			public const new Guid IID = .(0xe9225295, 0xc759, 0x11d1, 0xa0, 0x2b, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITDispatchMapper *self, BSTR pIID, IDispatch* pInterfaceToMap, IDispatch** ppReturnedInterface) QueryDispatchInterface;
		}
		[CRepr]
		public struct ITStreamControl : IDispatch
		{
			public const new Guid IID = .(0xee3bd604, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITStreamControl *self, int32 lMediaType, TERMINAL_DIRECTION td, ITStream** ppStream) CreateStream;
			public function HRESULT(ITStreamControl *self, ITStream* pStream) RemoveStream;
			public function HRESULT(ITStreamControl *self, IEnumStream** ppEnumStream) EnumerateStreams;
			public function HRESULT(ITStreamControl *self, VARIANT* pVariant) get_Streams;
		}
		[CRepr]
		public struct ITStream : IDispatch
		{
			public const new Guid IID = .(0xee3bd605, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITStream *self, int32* plMediaType) get_MediaType;
			public function HRESULT(ITStream *self, TERMINAL_DIRECTION* pTD) get_Direction;
			public function HRESULT(ITStream *self, BSTR* ppName) get_Name;
			public function HRESULT(ITStream *self) StartStream;
			public function HRESULT(ITStream *self) PauseStream;
			public function HRESULT(ITStream *self) StopStream;
			public function HRESULT(ITStream *self, ITTerminal* pTerminal) SelectTerminal;
			public function HRESULT(ITStream *self, ITTerminal* pTerminal) UnselectTerminal;
			public function HRESULT(ITStream *self, IEnumTerminal** ppEnumTerminal) EnumerateTerminals;
			public function HRESULT(ITStream *self, VARIANT* pTerminals) get_Terminals;
		}
		[CRepr]
		public struct IEnumStream : IUnknown
		{
			public const new Guid IID = .(0xee3bd606, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(IEnumStream *self, uint32 celt, ITStream** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumStream *self) Reset;
			public function HRESULT(IEnumStream *self, uint32 celt) Skip;
			public function HRESULT(IEnumStream *self, IEnumStream** ppEnum) Clone;
		}
		[CRepr]
		public struct ITSubStreamControl : IDispatch
		{
			public const new Guid IID = .(0xee3bd607, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITSubStreamControl *self, ITSubStream** ppSubStream) CreateSubStream;
			public function HRESULT(ITSubStreamControl *self, ITSubStream* pSubStream) RemoveSubStream;
			public function HRESULT(ITSubStreamControl *self, IEnumSubStream** ppEnumSubStream) EnumerateSubStreams;
			public function HRESULT(ITSubStreamControl *self, VARIANT* pVariant) get_SubStreams;
		}
		[CRepr]
		public struct ITSubStream : IDispatch
		{
			public const new Guid IID = .(0xee3bd608, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITSubStream *self) StartSubStream;
			public function HRESULT(ITSubStream *self) PauseSubStream;
			public function HRESULT(ITSubStream *self) StopSubStream;
			public function HRESULT(ITSubStream *self, ITTerminal* pTerminal) SelectTerminal;
			public function HRESULT(ITSubStream *self, ITTerminal* pTerminal) UnselectTerminal;
			public function HRESULT(ITSubStream *self, IEnumTerminal** ppEnumTerminal) EnumerateTerminals;
			public function HRESULT(ITSubStream *self, VARIANT* pTerminals) get_Terminals;
			public function HRESULT(ITSubStream *self, ITStream** ppITStream) get_Stream;
		}
		[CRepr]
		public struct IEnumSubStream : IUnknown
		{
			public const new Guid IID = .(0xee3bd609, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(IEnumSubStream *self, uint32 celt, ITSubStream** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumSubStream *self) Reset;
			public function HRESULT(IEnumSubStream *self, uint32 celt) Skip;
			public function HRESULT(IEnumSubStream *self, IEnumSubStream** ppEnum) Clone;
		}
		[CRepr]
		public struct ITLegacyWaveSupport : IDispatch
		{
			public const new Guid IID = .(0x207823ea, 0xe252, 0x11d2, 0xb7, 0x7e, 0x00, 0x80, 0xc7, 0x13, 0x53, 0x81);
			
			public function HRESULT(ITLegacyWaveSupport *self, FULLDUPLEX_SUPPORT* pSupport) IsFullDuplex;
		}
		[CRepr]
		public struct ITBasicCallControl2 : ITBasicCallControl
		{
			public const new Guid IID = .(0x161a4a56, 0x1e99, 0x4b3f, 0xa4, 0x6a, 0x16, 0x8f, 0x38, 0xa5, 0xee, 0x4c);
			
			public function HRESULT(ITBasicCallControl2 *self, BSTR bstrTerminalClassGUID, int32 lMediaType, TERMINAL_DIRECTION Direction, ITTerminal** ppTerminal) RequestTerminal;
			public function HRESULT(ITBasicCallControl2 *self, ITTerminal* pTerminal) SelectTerminalOnCall;
			public function HRESULT(ITBasicCallControl2 *self, ITTerminal* pTerminal) UnselectTerminalOnCall;
		}
		[CRepr]
		public struct ITScriptableAudioFormat : IDispatch
		{
			public const new Guid IID = .(0xb87658bd, 0x3c59, 0x4f64, 0xbe, 0x74, 0xae, 0xde, 0x3e, 0x86, 0xa8, 0x1e);
			
			public function HRESULT(ITScriptableAudioFormat *self, int32* pVal) get_Channels;
			public function HRESULT(ITScriptableAudioFormat *self, int32 nNewVal) put_Channels;
			public function HRESULT(ITScriptableAudioFormat *self, int32* pVal) get_SamplesPerSec;
			public function HRESULT(ITScriptableAudioFormat *self, int32 nNewVal) put_SamplesPerSec;
			public function HRESULT(ITScriptableAudioFormat *self, int32* pVal) get_AvgBytesPerSec;
			public function HRESULT(ITScriptableAudioFormat *self, int32 nNewVal) put_AvgBytesPerSec;
			public function HRESULT(ITScriptableAudioFormat *self, int32* pVal) get_BlockAlign;
			public function HRESULT(ITScriptableAudioFormat *self, int32 nNewVal) put_BlockAlign;
			public function HRESULT(ITScriptableAudioFormat *self, int32* pVal) get_BitsPerSample;
			public function HRESULT(ITScriptableAudioFormat *self, int32 nNewVal) put_BitsPerSample;
			public function HRESULT(ITScriptableAudioFormat *self, int32* pVal) get_FormatTag;
			public function HRESULT(ITScriptableAudioFormat *self, int32 nNewVal) put_FormatTag;
		}
		[CRepr]
		public struct ITAgent : IDispatch
		{
			public const new Guid IID = .(0x5770ece5, 0x4b27, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAgent *self, IEnumAgentSession** ppEnumAgentSession) EnumerateAgentSessions;
			public function HRESULT(ITAgent *self, ITACDGroup* pACDGroup, ITAddress* pAddress, ITAgentSession** ppAgentSession) CreateSession;
			public function HRESULT(ITAgent *self, ITACDGroup* pACDGroup, ITAddress* pAddress, BSTR pPIN, ITAgentSession** ppAgentSession) CreateSessionWithPIN;
			public function HRESULT(ITAgent *self, BSTR* ppID) get_ID;
			public function HRESULT(ITAgent *self, BSTR* ppUser) get_User;
			public function HRESULT(ITAgent *self, AGENT_STATE AgentState) put_State;
			public function HRESULT(ITAgent *self, AGENT_STATE* pAgentState) get_State;
			public function HRESULT(ITAgent *self, int32 lPeriod) put_MeasurementPeriod;
			public function HRESULT(ITAgent *self, int32* plPeriod) get_MeasurementPeriod;
			public function HRESULT(ITAgent *self, CY* pcyCallrate) get_OverallCallRate;
			public function HRESULT(ITAgent *self, int32* plCalls) get_NumberOfACDCalls;
			public function HRESULT(ITAgent *self, int32* plCalls) get_NumberOfIncomingCalls;
			public function HRESULT(ITAgent *self, int32* plCalls) get_NumberOfOutgoingCalls;
			public function HRESULT(ITAgent *self, int32* plTalkTime) get_TotalACDTalkTime;
			public function HRESULT(ITAgent *self, int32* plCallTime) get_TotalACDCallTime;
			public function HRESULT(ITAgent *self, int32* plWrapUpTime) get_TotalWrapUpTime;
			public function HRESULT(ITAgent *self, VARIANT* pVariant) get_AgentSessions;
		}
		[CRepr]
		public struct ITAgentSession : IDispatch
		{
			public const new Guid IID = .(0x5afc3147, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAgentSession *self, ITAgent** ppAgent) get_Agent;
			public function HRESULT(ITAgentSession *self, ITAddress** ppAddress) get_Address;
			public function HRESULT(ITAgentSession *self, ITACDGroup** ppACDGroup) get_ACDGroup;
			public function HRESULT(ITAgentSession *self, AGENT_SESSION_STATE SessionState) put_State;
			public function HRESULT(ITAgentSession *self, AGENT_SESSION_STATE* pSessionState) get_State;
			public function HRESULT(ITAgentSession *self, double* pdateSessionStart) get_SessionStartTime;
			public function HRESULT(ITAgentSession *self, int32* plDuration) get_SessionDuration;
			public function HRESULT(ITAgentSession *self, int32* plCalls) get_NumberOfCalls;
			public function HRESULT(ITAgentSession *self, int32* plTalkTime) get_TotalTalkTime;
			public function HRESULT(ITAgentSession *self, int32* plTalkTime) get_AverageTalkTime;
			public function HRESULT(ITAgentSession *self, int32* plCallTime) get_TotalCallTime;
			public function HRESULT(ITAgentSession *self, int32* plCallTime) get_AverageCallTime;
			public function HRESULT(ITAgentSession *self, int32* plWrapUpTime) get_TotalWrapUpTime;
			public function HRESULT(ITAgentSession *self, int32* plWrapUpTime) get_AverageWrapUpTime;
			public function HRESULT(ITAgentSession *self, CY* pcyCallrate) get_ACDCallRate;
			public function HRESULT(ITAgentSession *self, int32* plAnswerTime) get_LongestTimeToAnswer;
			public function HRESULT(ITAgentSession *self, int32* plAnswerTime) get_AverageTimeToAnswer;
		}
		[CRepr]
		public struct ITACDGroup : IDispatch
		{
			public const new Guid IID = .(0x5afc3148, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITACDGroup *self, BSTR* ppName) get_Name;
			public function HRESULT(ITACDGroup *self, IEnumQueue** ppEnumQueue) EnumerateQueues;
			public function HRESULT(ITACDGroup *self, VARIANT* pVariant) get_Queues;
		}
		[CRepr]
		public struct ITQueue : IDispatch
		{
			public const new Guid IID = .(0x5afc3149, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITQueue *self, int32 lPeriod) put_MeasurementPeriod;
			public function HRESULT(ITQueue *self, int32* plPeriod) get_MeasurementPeriod;
			public function HRESULT(ITQueue *self, int32* plCalls) get_TotalCallsQueued;
			public function HRESULT(ITQueue *self, int32* plCalls) get_CurrentCallsQueued;
			public function HRESULT(ITQueue *self, int32* plCalls) get_TotalCallsAbandoned;
			public function HRESULT(ITQueue *self, int32* plCalls) get_TotalCallsFlowedIn;
			public function HRESULT(ITQueue *self, int32* plCalls) get_TotalCallsFlowedOut;
			public function HRESULT(ITQueue *self, int32* plWaitTime) get_LongestEverWaitTime;
			public function HRESULT(ITQueue *self, int32* plWaitTime) get_CurrentLongestWaitTime;
			public function HRESULT(ITQueue *self, int32* plWaitTime) get_AverageWaitTime;
			public function HRESULT(ITQueue *self, int32* plCalls) get_FinalDisposition;
			public function HRESULT(ITQueue *self, BSTR* ppName) get_Name;
		}
		[CRepr]
		public struct ITAgentEvent : IDispatch
		{
			public const new Guid IID = .(0x5afc314a, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAgentEvent *self, ITAgent** ppAgent) get_Agent;
			public function HRESULT(ITAgentEvent *self, AGENT_EVENT* pEvent) get_Event;
		}
		[CRepr]
		public struct ITAgentSessionEvent : IDispatch
		{
			public const new Guid IID = .(0x5afc314b, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAgentSessionEvent *self, ITAgentSession** ppSession) get_Session;
			public function HRESULT(ITAgentSessionEvent *self, AGENT_SESSION_EVENT* pEvent) get_Event;
		}
		[CRepr]
		public struct ITACDGroupEvent : IDispatch
		{
			public const new Guid IID = .(0x297f3032, 0xbd11, 0x11d1, 0xa0, 0xa7, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITACDGroupEvent *self, ITACDGroup** ppGroup) get_Group;
			public function HRESULT(ITACDGroupEvent *self, ACDGROUP_EVENT* pEvent) get_Event;
		}
		[CRepr]
		public struct ITQueueEvent : IDispatch
		{
			public const new Guid IID = .(0x297f3033, 0xbd11, 0x11d1, 0xa0, 0xa7, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITQueueEvent *self, ITQueue** ppQueue) get_Queue;
			public function HRESULT(ITQueueEvent *self, ACDQUEUE_EVENT* pEvent) get_Event;
		}
		[CRepr]
		public struct ITAgentHandlerEvent : IDispatch
		{
			public const new Guid IID = .(0x297f3034, 0xbd11, 0x11d1, 0xa0, 0xa7, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAgentHandlerEvent *self, ITAgentHandler** ppAgentHandler) get_AgentHandler;
			public function HRESULT(ITAgentHandlerEvent *self, AGENTHANDLER_EVENT* pEvent) get_Event;
		}
		[CRepr]
		public struct ITTAPICallCenter : IDispatch
		{
			public const new Guid IID = .(0x5afc3154, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITTAPICallCenter *self, IEnumAgentHandler** ppEnumHandler) EnumerateAgentHandlers;
			public function HRESULT(ITTAPICallCenter *self, VARIANT* pVariant) get_AgentHandlers;
		}
		[CRepr]
		public struct ITAgentHandler : IDispatch
		{
			public const new Guid IID = .(0x587e8c22, 0x9802, 0x11d1, 0xa0, 0xa4, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(ITAgentHandler *self, BSTR* ppName) get_Name;
			public function HRESULT(ITAgentHandler *self, ITAgent** ppAgent) CreateAgent;
			public function HRESULT(ITAgentHandler *self, BSTR pID, BSTR pPIN, ITAgent** ppAgent) CreateAgentWithID;
			public function HRESULT(ITAgentHandler *self, IEnumACDGroup** ppEnumACDGroup) EnumerateACDGroups;
			public function HRESULT(ITAgentHandler *self, IEnumAddress** ppEnumAddress) EnumerateUsableAddresses;
			public function HRESULT(ITAgentHandler *self, VARIANT* pVariant) get_ACDGroups;
			public function HRESULT(ITAgentHandler *self, VARIANT* pVariant) get_UsableAddresses;
		}
		[CRepr]
		public struct IEnumAgent : IUnknown
		{
			public const new Guid IID = .(0x5afc314d, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumAgent *self, uint32 celt, ITAgent** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumAgent *self) Reset;
			public function HRESULT(IEnumAgent *self, uint32 celt) Skip;
			public function HRESULT(IEnumAgent *self, IEnumAgent** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumAgentSession : IUnknown
		{
			public const new Guid IID = .(0x5afc314e, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumAgentSession *self, uint32 celt, ITAgentSession** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumAgentSession *self) Reset;
			public function HRESULT(IEnumAgentSession *self, uint32 celt) Skip;
			public function HRESULT(IEnumAgentSession *self, IEnumAgentSession** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumQueue : IUnknown
		{
			public const new Guid IID = .(0x5afc3158, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumQueue *self, uint32 celt, ITQueue** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumQueue *self) Reset;
			public function HRESULT(IEnumQueue *self, uint32 celt) Skip;
			public function HRESULT(IEnumQueue *self, IEnumQueue** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumACDGroup : IUnknown
		{
			public const new Guid IID = .(0x5afc3157, 0x4bcc, 0x11d1, 0xbf, 0x80, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumACDGroup *self, uint32 celt, ITACDGroup** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumACDGroup *self) Reset;
			public function HRESULT(IEnumACDGroup *self, uint32 celt) Skip;
			public function HRESULT(IEnumACDGroup *self, IEnumACDGroup** ppEnum) Clone;
		}
		[CRepr]
		public struct IEnumAgentHandler : IUnknown
		{
			public const new Guid IID = .(0x587e8c28, 0x9802, 0x11d1, 0xa0, 0xa4, 0x00, 0x80, 0x5f, 0xc1, 0x47, 0xd3);
			
			public function HRESULT(IEnumAgentHandler *self, uint32 celt, ITAgentHandler** ppElements, uint32* pceltFetched) Next;
			public function HRESULT(IEnumAgentHandler *self) Reset;
			public function HRESULT(IEnumAgentHandler *self, uint32 celt) Skip;
			public function HRESULT(IEnumAgentHandler *self, IEnumAgentHandler** ppEnum) Clone;
		}
		[CRepr]
		public struct ITAMMediaFormat : IUnknown
		{
			public const new Guid IID = .(0x0364eb00, 0x4a77, 0x11d1, 0xa6, 0x71, 0x00, 0x60, 0x97, 0xc9, 0xa2, 0xe8);
			
			public function HRESULT(ITAMMediaFormat *self, AM_MEDIA_TYPE** ppmt) get_MediaFormat;
			public function HRESULT(ITAMMediaFormat *self, AM_MEDIA_TYPE* pmt) put_MediaFormat;
		}
		[CRepr]
		public struct ITAllocatorProperties : IUnknown
		{
			public const new Guid IID = .(0xc1bc3c90, 0xbcfe, 0x11d1, 0x97, 0x45, 0x00, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0);
			
			public function HRESULT(ITAllocatorProperties *self, ALLOCATOR_PROPERTIES* pAllocProperties) SetAllocatorProperties;
			public function HRESULT(ITAllocatorProperties *self, ALLOCATOR_PROPERTIES* pAllocProperties) GetAllocatorProperties;
			public function HRESULT(ITAllocatorProperties *self, BOOL bAllocBuffers) SetAllocateBuffers;
			public function HRESULT(ITAllocatorProperties *self, BOOL* pbAllocBuffers) GetAllocateBuffers;
			public function HRESULT(ITAllocatorProperties *self, uint32 BufferSize) SetBufferSize;
			public function HRESULT(ITAllocatorProperties *self, uint32* pBufferSize) GetBufferSize;
		}
		[CRepr]
		public struct ITPluggableTerminalEventSink : IUnknown
		{
			public const new Guid IID = .(0x6e0887be, 0xba1a, 0x492e, 0xbd, 0x10, 0x40, 0x20, 0xec, 0x5e, 0x33, 0xe0);
			
			public function HRESULT(ITPluggableTerminalEventSink *self, MSP_EVENT_INFO* pMspEventInfo) FireEvent;
		}
		[CRepr]
		public struct ITPluggableTerminalEventSinkRegistration : IUnknown
		{
			public const new Guid IID = .(0xf7115709, 0xa216, 0x4957, 0xa7, 0x59, 0x06, 0x0a, 0xb3, 0x2a, 0x90, 0xd1);
			
			public function HRESULT(ITPluggableTerminalEventSinkRegistration *self, ITPluggableTerminalEventSink* pEventSink) RegisterSink;
			public function HRESULT(ITPluggableTerminalEventSinkRegistration *self) UnregisterSink;
		}
		[CRepr]
		public struct ITMSPAddress : IUnknown
		{
			public const new Guid IID = .(0xee3bd600, 0x3868, 0x11d2, 0xa0, 0x45, 0x00, 0xc0, 0x4f, 0xb6, 0x80, 0x9f);
			
			public function HRESULT(ITMSPAddress *self, int32* hEvent) Initialize;
			public function HRESULT(ITMSPAddress *self) Shutdown;
			public function HRESULT(ITMSPAddress *self, int32* hCall, uint32 dwReserved, uint32 dwMediaType, IUnknown* pOuterUnknown, IUnknown** ppStreamControl) CreateMSPCall;
			public function HRESULT(ITMSPAddress *self, IUnknown* pStreamControl) ShutdownMSPCall;
			public function HRESULT(ITMSPAddress *self, IUnknown* pMSPCall, uint8* pBuffer, uint32 dwSize) ReceiveTSPData;
			public function HRESULT(ITMSPAddress *self, uint32* pdwSize, uint8* pEventBuffer) GetEvent;
		}
		[CRepr]
		public struct ITTAPIDispatchEventNotification : IDispatch
		{
			public const new Guid IID = .(0x9f34325b, 0x7e62, 0x11d2, 0x94, 0x57, 0x00, 0xc0, 0x4f, 0x8e, 0xc8, 0x88);
			
		}
		[CRepr]
		public struct ITDirectoryObjectConference : IDispatch
		{
			public const new Guid IID = .(0xf1029e5d, 0xcb5b, 0x11d0, 0x8d, 0x59, 0x00, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0);
			
			public function HRESULT(ITDirectoryObjectConference *self, BSTR* ppProtocol) get_Protocol;
			public function HRESULT(ITDirectoryObjectConference *self, BSTR* ppOriginator) get_Originator;
			public function HRESULT(ITDirectoryObjectConference *self, BSTR pOriginator) put_Originator;
			public function HRESULT(ITDirectoryObjectConference *self, RND_ADVERTISING_SCOPE* pAdvertisingScope) get_AdvertisingScope;
			public function HRESULT(ITDirectoryObjectConference *self, RND_ADVERTISING_SCOPE AdvertisingScope) put_AdvertisingScope;
			public function HRESULT(ITDirectoryObjectConference *self, BSTR* ppUrl) get_Url;
			public function HRESULT(ITDirectoryObjectConference *self, BSTR pUrl) put_Url;
			public function HRESULT(ITDirectoryObjectConference *self, BSTR* ppDescription) get_Description;
			public function HRESULT(ITDirectoryObjectConference *self, BSTR pDescription) put_Description;
			public function HRESULT(ITDirectoryObjectConference *self, int16* pfEncrypted) get_IsEncrypted;
			public function HRESULT(ITDirectoryObjectConference *self, int16 fEncrypted) put_IsEncrypted;
			public function HRESULT(ITDirectoryObjectConference *self, double* pDate) get_StartTime;
			public function HRESULT(ITDirectoryObjectConference *self, double Date) put_StartTime;
			public function HRESULT(ITDirectoryObjectConference *self, double* pDate) get_StopTime;
			public function HRESULT(ITDirectoryObjectConference *self, double Date) put_StopTime;
		}
		[CRepr]
		public struct ITDirectoryObjectUser : IDispatch
		{
			public const new Guid IID = .(0x34621d6f, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(ITDirectoryObjectUser *self, BSTR* ppName) get_IPPhonePrimary;
			public function HRESULT(ITDirectoryObjectUser *self, BSTR pName) put_IPPhonePrimary;
		}
		[CRepr]
		public struct IEnumDialableAddrs : IUnknown
		{
			public const new Guid IID = .(0x34621d70, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(IEnumDialableAddrs *self, uint32 celt, BSTR* ppElements, uint32* pcFetched) Next;
			public function HRESULT(IEnumDialableAddrs *self) Reset;
			public function HRESULT(IEnumDialableAddrs *self, uint32 celt) Skip;
			public function HRESULT(IEnumDialableAddrs *self, IEnumDialableAddrs** ppEnum) Clone;
		}
		[CRepr]
		public struct ITDirectoryObject : IDispatch
		{
			public const new Guid IID = .(0x34621d6e, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(ITDirectoryObject *self, DIRECTORY_OBJECT_TYPE* pObjectType) get_ObjectType;
			public function HRESULT(ITDirectoryObject *self, BSTR* ppName) get_Name;
			public function HRESULT(ITDirectoryObject *self, BSTR pName) put_Name;
			public function HRESULT(ITDirectoryObject *self, int32 dwAddressType, VARIANT* pVariant) get_DialableAddrs;
			public function HRESULT(ITDirectoryObject *self, uint32 dwAddressType, IEnumDialableAddrs** ppEnumDialableAddrs) EnumerateDialableAddrs;
			public function HRESULT(ITDirectoryObject *self, IDispatch** ppSecDes) get_SecurityDescriptor;
			public function HRESULT(ITDirectoryObject *self, IDispatch* pSecDes) put_SecurityDescriptor;
		}
		[CRepr]
		public struct IEnumDirectoryObject : IUnknown
		{
			public const new Guid IID = .(0x06c9b64a, 0x306d, 0x11d1, 0x97, 0x74, 0x00, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0);
			
			public function HRESULT(IEnumDirectoryObject *self, uint32 celt, ITDirectoryObject** pVal, uint32* pcFetched) Next;
			public function HRESULT(IEnumDirectoryObject *self) Reset;
			public function HRESULT(IEnumDirectoryObject *self, uint32 celt) Skip;
			public function HRESULT(IEnumDirectoryObject *self, IEnumDirectoryObject** ppEnum) Clone;
		}
		[CRepr]
		public struct ITILSConfig : IDispatch
		{
			public const new Guid IID = .(0x34621d72, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(ITILSConfig *self, int32* pPort) get_Port;
			public function HRESULT(ITILSConfig *self, int32 Port) put_Port;
		}
		[CRepr]
		public struct ITDirectory : IDispatch
		{
			public const new Guid IID = .(0x34621d6c, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(ITDirectory *self, DIRECTORY_TYPE* pDirectoryType) get_DirectoryType;
			public function HRESULT(ITDirectory *self, BSTR* pName) get_DisplayName;
			public function HRESULT(ITDirectory *self, int16* pfDynamic) get_IsDynamic;
			public function HRESULT(ITDirectory *self, int32* pTTL) get_DefaultObjectTTL;
			public function HRESULT(ITDirectory *self, int32 TTL) put_DefaultObjectTTL;
			public function HRESULT(ITDirectory *self, int16 fEnable) EnableAutoRefresh;
			public function HRESULT(ITDirectory *self, int16 fSecure) Connect;
			public function HRESULT(ITDirectory *self, BSTR pDomainName, BSTR pUserName, BSTR pPassword, int32 lFlags) Bind;
			public function HRESULT(ITDirectory *self, ITDirectoryObject* pDirectoryObject) AddDirectoryObject;
			public function HRESULT(ITDirectory *self, ITDirectoryObject* pDirectoryObject) ModifyDirectoryObject;
			public function HRESULT(ITDirectory *self, ITDirectoryObject* pDirectoryObject) RefreshDirectoryObject;
			public function HRESULT(ITDirectory *self, ITDirectoryObject* pDirectoryObject) DeleteDirectoryObject;
			public function HRESULT(ITDirectory *self, DIRECTORY_OBJECT_TYPE DirectoryObjectType, BSTR pName, VARIANT* pVariant) get_DirectoryObjects;
			public function HRESULT(ITDirectory *self, DIRECTORY_OBJECT_TYPE DirectoryObjectType, BSTR pName, IEnumDirectoryObject** ppEnumObject) EnumerateDirectoryObjects;
		}
		[CRepr]
		public struct IEnumDirectory : IUnknown
		{
			public const new Guid IID = .(0x34621d6d, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(IEnumDirectory *self, uint32 celt, ITDirectory** ppElements, uint32* pcFetched) Next;
			public function HRESULT(IEnumDirectory *self) Reset;
			public function HRESULT(IEnumDirectory *self, uint32 celt) Skip;
			public function HRESULT(IEnumDirectory *self, IEnumDirectory** ppEnum) Clone;
		}
		[CRepr]
		public struct ITRendezvous : IDispatch
		{
			public const new Guid IID = .(0x34621d6b, 0x6cff, 0x11d1, 0xaf, 0xf7, 0x00, 0xc0, 0x4f, 0xc3, 0x1f, 0xee);
			
			public function HRESULT(ITRendezvous *self, VARIANT* pVariant) get_DefaultDirectories;
			public function HRESULT(ITRendezvous *self, IEnumDirectory** ppEnumDirectory) EnumerateDefaultDirectories;
			public function HRESULT(ITRendezvous *self, DIRECTORY_TYPE DirectoryType, BSTR pName, ITDirectory** ppDir) CreateDirectory;
			public function HRESULT(ITRendezvous *self, DIRECTORY_OBJECT_TYPE DirectoryObjectType, BSTR pName, ITDirectoryObject** ppDirectoryObject) CreateDirectoryObject;
		}
		[CRepr]
		public struct IMcastScope : IDispatch
		{
			public const new Guid IID = .(0xdf0daef4, 0xa289, 0x11d1, 0x86, 0x97, 0x00, 0x60, 0x08, 0xb0, 0xe5, 0xd2);
			
			public function HRESULT(IMcastScope *self, int32* pID) get_ScopeID;
			public function HRESULT(IMcastScope *self, int32* pID) get_ServerID;
			public function HRESULT(IMcastScope *self, int32* pID) get_InterfaceID;
			public function HRESULT(IMcastScope *self, BSTR* ppDescription) get_ScopeDescription;
			public function HRESULT(IMcastScope *self, int32* pTTL) get_TTL;
		}
		[CRepr]
		public struct IMcastLeaseInfo : IDispatch
		{
			public const new Guid IID = .(0xdf0daefd, 0xa289, 0x11d1, 0x86, 0x97, 0x00, 0x60, 0x08, 0xb0, 0xe5, 0xd2);
			
			public function HRESULT(IMcastLeaseInfo *self, BSTR* ppRequestID) get_RequestID;
			public function HRESULT(IMcastLeaseInfo *self, double* pTime) get_LeaseStartTime;
			public function HRESULT(IMcastLeaseInfo *self, double time) put_LeaseStartTime;
			public function HRESULT(IMcastLeaseInfo *self, double* pTime) get_LeaseStopTime;
			public function HRESULT(IMcastLeaseInfo *self, double time) put_LeaseStopTime;
			public function HRESULT(IMcastLeaseInfo *self, int32* pCount) get_AddressCount;
			public function HRESULT(IMcastLeaseInfo *self, BSTR* ppAddress) get_ServerAddress;
			public function HRESULT(IMcastLeaseInfo *self, int32* pTTL) get_TTL;
			public function HRESULT(IMcastLeaseInfo *self, VARIANT* pVariant) get_Addresses;
			public function HRESULT(IMcastLeaseInfo *self, IEnumBstr** ppEnumAddresses) EnumerateAddresses;
		}
		[CRepr]
		public struct IEnumMcastScope : IUnknown
		{
			public const new Guid IID = .(0xdf0daf09, 0xa289, 0x11d1, 0x86, 0x97, 0x00, 0x60, 0x08, 0xb0, 0xe5, 0xd2);
			
			public function HRESULT(IEnumMcastScope *self, uint32 celt, IMcastScope** ppScopes, uint32* pceltFetched) Next;
			public function HRESULT(IEnumMcastScope *self) Reset;
			public function HRESULT(IEnumMcastScope *self, uint32 celt) Skip;
			public function HRESULT(IEnumMcastScope *self, IEnumMcastScope** ppEnum) Clone;
		}
		[CRepr]
		public struct IMcastAddressAllocation : IDispatch
		{
			public const new Guid IID = .(0xdf0daef1, 0xa289, 0x11d1, 0x86, 0x97, 0x00, 0x60, 0x08, 0xb0, 0xe5, 0xd2);
			
			public function HRESULT(IMcastAddressAllocation *self, VARIANT* pVariant) get_Scopes;
			public function HRESULT(IMcastAddressAllocation *self, IEnumMcastScope** ppEnumMcastScope) EnumerateScopes;
			public function HRESULT(IMcastAddressAllocation *self, IMcastScope* pScope, double LeaseStartTime, double LeaseStopTime, int32 NumAddresses, IMcastLeaseInfo** ppLeaseResponse) RequestAddress;
			public function HRESULT(IMcastAddressAllocation *self, int32 lReserved, IMcastLeaseInfo* pRenewRequest, IMcastLeaseInfo** ppRenewResponse) RenewAddress;
			public function HRESULT(IMcastAddressAllocation *self, IMcastLeaseInfo* pReleaseRequest) ReleaseAddress;
			public function HRESULT(IMcastAddressAllocation *self, double LeaseStartTime, double LeaseStopTime, uint32 dwNumAddresses, PWSTR* ppAddresses, PWSTR pRequestID, PWSTR pServerAddress, IMcastLeaseInfo** ppReleaseRequest) CreateLeaseInfo;
			public function HRESULT(IMcastAddressAllocation *self, double LeaseStartTime, double LeaseStopTime, VARIANT vAddresses, BSTR pRequestID, BSTR pServerAddress, IMcastLeaseInfo** ppReleaseRequest) CreateLeaseInfoFromVariant;
		}
		[CRepr]
		public struct ITnef : IUnknown
		{
			public function HRESULT(ITnef *self, uint32 ulFlags, uint32 ulElemID, void* lpvData, SPropTagArray* lpPropList) AddProps;
			public function HRESULT(ITnef *self, uint32 ulFlags, SPropTagArray* lpPropList, STnefProblemArray** lpProblems) ExtractProps;
			public function HRESULT(ITnef *self, uint32 ulFlags, uint16* lpKey, STnefProblemArray** lpProblems) Finish;
			public function HRESULT(ITnef *self, IMessage* lpMessage, uint32 ulFlags, IStream** lppStream) OpenTaggedBody;
			public function HRESULT(ITnef *self, uint32 ulFlags, uint32 ulElemID, uint32 cValues, SPropValue* lpProps) SetProps;
			public function HRESULT(ITnef *self, uint32 ulFlags, IMAPITable* lpRecipientTable) EncodeRecips;
			public function HRESULT(ITnef *self, uint32 ulFlags, uint32 ulComponentID, SPropTagArray* lpCustomPropList, SPropValue* lpCustomProps, SPropTagArray* lpPropList, STnefProblemArray** lpProblems) FinishComponent;
		}
		
		// --- Functions ---
		
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAccept(uint32 hCall, PSTR lpsUserUserInfo, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAddProvider(PSTR lpszProviderFilename, HWND hwndOwner, uint32* lpdwPermanentProviderID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAddProviderA(PSTR lpszProviderFilename, HWND hwndOwner, uint32* lpdwPermanentProviderID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAddProviderW(PWSTR lpszProviderFilename, HWND hwndOwner, uint32* lpdwPermanentProviderID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAddToConference(uint32 hConfCall, uint32 hConsultCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAgentSpecific(uint32 hLine, uint32 dwAddressID, uint32 dwAgentExtensionIDIndex, void* lpParams, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineAnswer(uint32 hCall, PSTR lpsUserUserInfo, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineBlindTransfer(uint32 hCall, PSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineBlindTransferA(uint32 hCall, PSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineBlindTransferW(uint32 hCall, PWSTR lpszDestAddressW, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineClose(uint32 hLine);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineCompleteCall(uint32 hCall, uint32* lpdwCompletionID, uint32 dwCompletionMode, uint32 dwMessageID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineCompleteTransfer(uint32 hCall, uint32 hConsultCall, uint32* lphConfCall, uint32 dwTransferMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigDialog(uint32 dwDeviceID, HWND hwndOwner, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigDialogA(uint32 dwDeviceID, HWND hwndOwner, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigDialogW(uint32 dwDeviceID, HWND hwndOwner, PWSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigDialogEdit(uint32 dwDeviceID, HWND hwndOwner, PSTR lpszDeviceClass, void* lpDeviceConfigIn, uint32 dwSize, VARSTRING* lpDeviceConfigOut);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigDialogEditA(uint32 dwDeviceID, HWND hwndOwner, PSTR lpszDeviceClass, void* lpDeviceConfigIn, uint32 dwSize, VARSTRING* lpDeviceConfigOut);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigDialogEditW(uint32 dwDeviceID, HWND hwndOwner, PWSTR lpszDeviceClass, void* lpDeviceConfigIn, uint32 dwSize, VARSTRING* lpDeviceConfigOut);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineConfigProvider(HWND hwndOwner, uint32 dwPermanentProviderID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineCreateAgentW(uint32 hLine, PWSTR lpszAgentID, PWSTR lpszAgentPIN, uint32* lphAgent);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineCreateAgentA(uint32 hLine, PSTR lpszAgentID, PSTR lpszAgentPIN, uint32* lphAgent);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineCreateAgentSessionW(uint32 hLine, uint32 hAgent, PWSTR lpszAgentPIN, uint32 dwWorkingAddressID, Guid* lpGroupID, uint32* lphAgentSession);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineCreateAgentSessionA(uint32 hLine, uint32 hAgent, PSTR lpszAgentPIN, uint32 dwWorkingAddressID, Guid* lpGroupID, uint32* lphAgentSession);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDeallocateCall(uint32 hCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDevSpecific(uint32 hLine, uint32 dwAddressID, uint32 hCall, void* lpParams, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDevSpecificFeature(uint32 hLine, uint32 dwFeature, void* lpParams, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDial(uint32 hCall, PSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDialA(uint32 hCall, PSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDialW(uint32 hCall, PWSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineDrop(uint32 hCall, PSTR lpsUserUserInfo, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineForward(uint32 hLine, uint32 bAllAddresses, uint32 dwAddressID, LINEFORWARDLIST* lpForwardList, uint32 dwNumRingsNoAnswer, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineForwardA(uint32 hLine, uint32 bAllAddresses, uint32 dwAddressID, LINEFORWARDLIST* lpForwardList, uint32 dwNumRingsNoAnswer, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineForwardW(uint32 hLine, uint32 bAllAddresses, uint32 dwAddressID, LINEFORWARDLIST* lpForwardList, uint32 dwNumRingsNoAnswer, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGatherDigits(uint32 hCall, uint32 dwDigitModes, uint8* lpsDigits, uint32 dwNumDigits, PSTR lpszTerminationDigits, uint32 dwFirstDigitTimeout, uint32 dwInterDigitTimeout);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGatherDigitsA(uint32 hCall, uint32 dwDigitModes, uint8* lpsDigits, uint32 dwNumDigits, PSTR lpszTerminationDigits, uint32 dwFirstDigitTimeout, uint32 dwInterDigitTimeout);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGatherDigitsW(uint32 hCall, uint32 dwDigitModes, char16* lpsDigits, uint32 dwNumDigits, PWSTR lpszTerminationDigits, uint32 dwFirstDigitTimeout, uint32 dwInterDigitTimeout);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGenerateDigits(uint32 hCall, uint32 dwDigitMode, PSTR lpszDigits, uint32 dwDuration);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGenerateDigitsA(uint32 hCall, uint32 dwDigitMode, PSTR lpszDigits, uint32 dwDuration);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGenerateDigitsW(uint32 hCall, uint32 dwDigitMode, PWSTR lpszDigits, uint32 dwDuration);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGenerateTone(uint32 hCall, uint32 dwToneMode, uint32 dwDuration, uint32 dwNumTones, LINEGENERATETONE* lpTones);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressCaps(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAddressID, uint32 dwAPIVersion, uint32 dwExtVersion, LINEADDRESSCAPS* lpAddressCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressCapsA(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAddressID, uint32 dwAPIVersion, uint32 dwExtVersion, LINEADDRESSCAPS* lpAddressCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressCapsW(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAddressID, uint32 dwAPIVersion, uint32 dwExtVersion, LINEADDRESSCAPS* lpAddressCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressID(uint32 hLine, uint32* lpdwAddressID, uint32 dwAddressMode, PSTR lpsAddress, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressIDA(uint32 hLine, uint32* lpdwAddressID, uint32 dwAddressMode, PSTR lpsAddress, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressIDW(uint32 hLine, uint32* lpdwAddressID, uint32 dwAddressMode, PWSTR lpsAddress, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressStatus(uint32 hLine, uint32 dwAddressID, LINEADDRESSSTATUS* lpAddressStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressStatusA(uint32 hLine, uint32 dwAddressID, LINEADDRESSSTATUS* lpAddressStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAddressStatusW(uint32 hLine, uint32 dwAddressID, LINEADDRESSSTATUS* lpAddressStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentActivityListA(uint32 hLine, uint32 dwAddressID, LINEAGENTACTIVITYLIST* lpAgentActivityList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentActivityListW(uint32 hLine, uint32 dwAddressID, LINEAGENTACTIVITYLIST* lpAgentActivityList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentCapsA(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAddressID, uint32 dwAppAPIVersion, LINEAGENTCAPS* lpAgentCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentCapsW(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAddressID, uint32 dwAppAPIVersion, LINEAGENTCAPS* lpAgentCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentGroupListA(uint32 hLine, uint32 dwAddressID, LINEAGENTGROUPLIST* lpAgentGroupList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentGroupListW(uint32 hLine, uint32 dwAddressID, LINEAGENTGROUPLIST* lpAgentGroupList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentInfo(uint32 hLine, uint32 hAgent, LINEAGENTINFO* lpAgentInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentSessionInfo(uint32 hLine, uint32 hAgentSession, LINEAGENTSESSIONINFO* lpAgentSessionInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentSessionList(uint32 hLine, uint32 hAgent, LINEAGENTSESSIONLIST* lpAgentSessionList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentStatusA(uint32 hLine, uint32 dwAddressID, LINEAGENTSTATUS* lpAgentStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAgentStatusW(uint32 hLine, uint32 dwAddressID, LINEAGENTSTATUS* lpAgentStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAppPriority(PSTR lpszAppFilename, uint32 dwMediaMode, LINEEXTENSIONID* lpExtensionID, uint32 dwRequestMode, VARSTRING* lpExtensionName, uint32* lpdwPriority);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAppPriorityA(PSTR lpszAppFilename, uint32 dwMediaMode, LINEEXTENSIONID* lpExtensionID, uint32 dwRequestMode, VARSTRING* lpExtensionName, uint32* lpdwPriority);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetAppPriorityW(PWSTR lpszAppFilename, uint32 dwMediaMode, LINEEXTENSIONID* lpExtensionID, uint32 dwRequestMode, VARSTRING* lpExtensionName, uint32* lpdwPriority);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCallInfo(uint32 hCall, LINECALLINFO* lpCallInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCallInfoA(uint32 hCall, LINECALLINFO* lpCallInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCallInfoW(uint32 hCall, LINECALLINFO* lpCallInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCallStatus(uint32 hCall, LINECALLSTATUS* lpCallStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetConfRelatedCalls(uint32 hCall, LINECALLLIST* lpCallList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCountry(uint32 dwCountryID, uint32 dwAPIVersion, LINECOUNTRYLIST* lpLineCountryList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCountryA(uint32 dwCountryID, uint32 dwAPIVersion, LINECOUNTRYLIST* lpLineCountryList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetCountryW(uint32 dwCountryID, uint32 dwAPIVersion, LINECOUNTRYLIST* lpLineCountryList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetDevCaps(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtVersion, LINEDEVCAPS* lpLineDevCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetDevCapsA(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtVersion, LINEDEVCAPS* lpLineDevCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetDevCapsW(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtVersion, LINEDEVCAPS* lpLineDevCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetDevConfig(uint32 dwDeviceID, VARSTRING* lpDeviceConfig, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetDevConfigA(uint32 dwDeviceID, VARSTRING* lpDeviceConfig, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetDevConfigW(uint32 dwDeviceID, VARSTRING* lpDeviceConfig, PWSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetGroupListA(uint32 hLine, LINEAGENTGROUPLIST* lpGroupList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetGroupListW(uint32 hLine, LINEAGENTGROUPLIST* lpGroupList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetIcon(uint32 dwDeviceID, PSTR lpszDeviceClass, int* lphIcon);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetIconA(uint32 dwDeviceID, PSTR lpszDeviceClass, int* lphIcon);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetIconW(uint32 dwDeviceID, PWSTR lpszDeviceClass, int* lphIcon);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetID(uint32 hLine, uint32 dwAddressID, uint32 hCall, uint32 dwSelect, VARSTRING* lpDeviceID, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetIDA(uint32 hLine, uint32 dwAddressID, uint32 hCall, uint32 dwSelect, VARSTRING* lpDeviceID, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetIDW(uint32 hLine, uint32 dwAddressID, uint32 hCall, uint32 dwSelect, VARSTRING* lpDeviceID, PWSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetLineDevStatus(uint32 hLine, LINEDEVSTATUS* lpLineDevStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetLineDevStatusA(uint32 hLine, LINEDEVSTATUS* lpLineDevStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetLineDevStatusW(uint32 hLine, LINEDEVSTATUS* lpLineDevStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetMessage(uint32 hLineApp, LINEMESSAGE* lpMessage, uint32 dwTimeout);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetNewCalls(uint32 hLine, uint32 dwAddressID, uint32 dwSelect, LINECALLLIST* lpCallList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetNumRings(uint32 hLine, uint32 dwAddressID, uint32* lpdwNumRings);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetProviderList(uint32 dwAPIVersion, LINEPROVIDERLIST* lpProviderList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetProviderListA(uint32 dwAPIVersion, LINEPROVIDERLIST* lpProviderList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetProviderListW(uint32 dwAPIVersion, LINEPROVIDERLIST* lpProviderList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetProxyStatus(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAppAPIVersion, LINEPROXYREQUESTLIST* lpLineProxyReqestList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetQueueInfo(uint32 hLine, uint32 dwQueueID, LINEQUEUEINFO* lpLineQueueInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetQueueListA(uint32 hLine, Guid* lpGroupID, LINEQUEUELIST* lpQueueList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetQueueListW(uint32 hLine, Guid* lpGroupID, LINEQUEUELIST* lpQueueList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetRequest(uint32 hLineApp, uint32 dwRequestMode, void* lpRequestBuffer);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetRequestA(uint32 hLineApp, uint32 dwRequestMode, void* lpRequestBuffer);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetRequestW(uint32 hLineApp, uint32 dwRequestMode, void* lpRequestBuffer);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetStatusMessages(uint32 hLine, uint32* lpdwLineStates, uint32* lpdwAddressStates);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetTranslateCaps(uint32 hLineApp, uint32 dwAPIVersion, LINETRANSLATECAPS* lpTranslateCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetTranslateCapsA(uint32 hLineApp, uint32 dwAPIVersion, LINETRANSLATECAPS* lpTranslateCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineGetTranslateCapsW(uint32 hLineApp, uint32 dwAPIVersion, LINETRANSLATECAPS* lpTranslateCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineHandoff(uint32 hCall, PSTR lpszFileName, uint32 dwMediaMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineHandoffA(uint32 hCall, PSTR lpszFileName, uint32 dwMediaMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineHandoffW(uint32 hCall, PWSTR lpszFileName, uint32 dwMediaMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineHold(uint32 hCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineInitialize(uint32* lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, PSTR lpszAppName, uint32* lpdwNumDevs);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineInitializeExA(uint32* lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, PSTR lpszFriendlyAppName, uint32* lpdwNumDevs, uint32* lpdwAPIVersion, LINEINITIALIZEEXPARAMS* lpLineInitializeExParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineInitializeExW(uint32* lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, PWSTR lpszFriendlyAppName, uint32* lpdwNumDevs, uint32* lpdwAPIVersion, LINEINITIALIZEEXPARAMS* lpLineInitializeExParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineMakeCall(uint32 hLine, uint32* lphCall, PSTR lpszDestAddress, uint32 dwCountryCode, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineMakeCallA(uint32 hLine, uint32* lphCall, PSTR lpszDestAddress, uint32 dwCountryCode, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineMakeCallW(uint32 hLine, uint32* lphCall, PWSTR lpszDestAddress, uint32 dwCountryCode, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineMonitorDigits(uint32 hCall, uint32 dwDigitModes);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineMonitorMedia(uint32 hCall, uint32 dwMediaModes);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineMonitorTones(uint32 hCall, LINEMONITORTONE* lpToneList, uint32 dwNumEntries);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineNegotiateAPIVersion(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPILowVersion, uint32 dwAPIHighVersion, uint32* lpdwAPIVersion, LINEEXTENSIONID* lpExtensionID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineNegotiateExtVersion(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtLowVersion, uint32 dwExtHighVersion, uint32* lpdwExtVersion);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineOpen(uint32 hLineApp, uint32 dwDeviceID, uint32* lphLine, uint32 dwAPIVersion, uint32 dwExtVersion, uint dwCallbackInstance, uint32 dwPrivileges, uint32 dwMediaModes, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineOpenA(uint32 hLineApp, uint32 dwDeviceID, uint32* lphLine, uint32 dwAPIVersion, uint32 dwExtVersion, uint dwCallbackInstance, uint32 dwPrivileges, uint32 dwMediaModes, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineOpenW(uint32 hLineApp, uint32 dwDeviceID, uint32* lphLine, uint32 dwAPIVersion, uint32 dwExtVersion, uint dwCallbackInstance, uint32 dwPrivileges, uint32 dwMediaModes, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePark(uint32 hCall, uint32 dwParkMode, PSTR lpszDirAddress, VARSTRING* lpNonDirAddress);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineParkA(uint32 hCall, uint32 dwParkMode, PSTR lpszDirAddress, VARSTRING* lpNonDirAddress);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineParkW(uint32 hCall, uint32 dwParkMode, PWSTR lpszDirAddress, VARSTRING* lpNonDirAddress);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePickup(uint32 hLine, uint32 dwAddressID, uint32* lphCall, PSTR lpszDestAddress, PSTR lpszGroupID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePickupA(uint32 hLine, uint32 dwAddressID, uint32* lphCall, PSTR lpszDestAddress, PSTR lpszGroupID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePickupW(uint32 hLine, uint32 dwAddressID, uint32* lphCall, PWSTR lpszDestAddress, PWSTR lpszGroupID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePrepareAddToConference(uint32 hConfCall, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePrepareAddToConferenceA(uint32 hConfCall, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 linePrepareAddToConferenceW(uint32 hConfCall, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineProxyMessage(uint32 hLine, uint32 hCall, uint32 dwMsg, uint32 dwParam1, uint32 dwParam2, uint32 dwParam3);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineProxyResponse(uint32 hLine, LINEPROXYREQUEST* lpProxyRequest, uint32 dwResult);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineRedirect(uint32 hCall, PSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineRedirectA(uint32 hCall, PSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineRedirectW(uint32 hCall, PWSTR lpszDestAddress, uint32 dwCountryCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineRegisterRequestRecipient(uint32 hLineApp, uint32 dwRegistrationInstance, uint32 dwRequestMode, uint32 bEnable);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineReleaseUserUserInfo(uint32 hCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineRemoveFromConference(uint32 hCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineRemoveProvider(uint32 dwPermanentProviderID, HWND hwndOwner);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSecureCall(uint32 hCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSendUserUserInfo(uint32 hCall, PSTR lpsUserUserInfo, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAgentActivity(uint32 hLine, uint32 dwAddressID, uint32 dwActivityID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAgentGroup(uint32 hLine, uint32 dwAddressID, LINEAGENTGROUPLIST* lpAgentGroupList);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAgentMeasurementPeriod(uint32 hLine, uint32 hAgent, uint32 dwMeasurementPeriod);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAgentSessionState(uint32 hLine, uint32 hAgentSession, uint32 dwAgentSessionState, uint32 dwNextAgentSessionState);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAgentStateEx(uint32 hLine, uint32 hAgent, uint32 dwAgentState, uint32 dwNextAgentState);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAgentState(uint32 hLine, uint32 dwAddressID, uint32 dwAgentState, uint32 dwNextAgentState);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAppPriority(PSTR lpszAppFilename, uint32 dwMediaMode, LINEEXTENSIONID* lpExtensionID, uint32 dwRequestMode, PSTR lpszExtensionName, uint32 dwPriority);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAppPriorityA(PSTR lpszAppFilename, uint32 dwMediaMode, LINEEXTENSIONID* lpExtensionID, uint32 dwRequestMode, PSTR lpszExtensionName, uint32 dwPriority);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAppPriorityW(PWSTR lpszAppFilename, uint32 dwMediaMode, LINEEXTENSIONID* lpExtensionID, uint32 dwRequestMode, PWSTR lpszExtensionName, uint32 dwPriority);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetAppSpecific(uint32 hCall, uint32 dwAppSpecific);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetCallData(uint32 hCall, void* lpCallData, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetCallParams(uint32 hCall, uint32 dwBearerMode, uint32 dwMinRate, uint32 dwMaxRate, LINEDIALPARAMS* lpDialParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetCallPrivilege(uint32 hCall, uint32 dwCallPrivilege);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetCallQualityOfService(uint32 hCall, void* lpSendingFlowspec, uint32 dwSendingFlowspecSize, void* lpReceivingFlowspec, uint32 dwReceivingFlowspecSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetCallTreatment(uint32 hCall, uint32 dwTreatment);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetCurrentLocation(uint32 hLineApp, uint32 dwLocation);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetDevConfig(uint32 dwDeviceID, void* lpDeviceConfig, uint32 dwSize, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetDevConfigA(uint32 dwDeviceID, void* lpDeviceConfig, uint32 dwSize, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetDevConfigW(uint32 dwDeviceID, void* lpDeviceConfig, uint32 dwSize, PWSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetLineDevStatus(uint32 hLine, uint32 dwStatusToChange, uint32 fStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetMediaControl(uint32 hLine, uint32 dwAddressID, uint32 hCall, uint32 dwSelect, LINEMEDIACONTROLDIGIT* lpDigitList, uint32 dwDigitNumEntries, LINEMEDIACONTROLMEDIA* lpMediaList, uint32 dwMediaNumEntries, LINEMEDIACONTROLTONE* lpToneList, uint32 dwToneNumEntries, LINEMEDIACONTROLCALLSTATE* lpCallStateList, uint32 dwCallStateNumEntries);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetMediaMode(uint32 hCall, uint32 dwMediaModes);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetQueueMeasurementPeriod(uint32 hLine, uint32 dwQueueID, uint32 dwMeasurementPeriod);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetNumRings(uint32 hLine, uint32 dwAddressID, uint32 dwNumRings);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetStatusMessages(uint32 hLine, uint32 dwLineStates, uint32 dwAddressStates);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetTerminal(uint32 hLine, uint32 dwAddressID, uint32 hCall, uint32 dwSelect, uint32 dwTerminalModes, uint32 dwTerminalID, uint32 bEnable);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetTollList(uint32 hLineApp, uint32 dwDeviceID, PSTR lpszAddressIn, uint32 dwTollListOption);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetTollListA(uint32 hLineApp, uint32 dwDeviceID, PSTR lpszAddressIn, uint32 dwTollListOption);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetTollListW(uint32 hLineApp, uint32 dwDeviceID, PWSTR lpszAddressInW, uint32 dwTollListOption);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetupConference(uint32 hCall, uint32 hLine, uint32* lphConfCall, uint32* lphConsultCall, uint32 dwNumParties, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetupConferenceA(uint32 hCall, uint32 hLine, uint32* lphConfCall, uint32* lphConsultCall, uint32 dwNumParties, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetupConferenceW(uint32 hCall, uint32 hLine, uint32* lphConfCall, uint32* lphConsultCall, uint32 dwNumParties, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetupTransfer(uint32 hCall, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetupTransferA(uint32 hCall, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSetupTransferW(uint32 hCall, uint32* lphConsultCall, LINECALLPARAMS* lpCallParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineShutdown(uint32 hLineApp);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineSwapHold(uint32 hActiveCall, uint32 hHeldCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineTranslateAddress(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, PSTR lpszAddressIn, uint32 dwCard, uint32 dwTranslateOptions, LINETRANSLATEOUTPUT* lpTranslateOutput);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineTranslateAddressA(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, PSTR lpszAddressIn, uint32 dwCard, uint32 dwTranslateOptions, LINETRANSLATEOUTPUT* lpTranslateOutput);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineTranslateAddressW(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, PWSTR lpszAddressIn, uint32 dwCard, uint32 dwTranslateOptions, LINETRANSLATEOUTPUT* lpTranslateOutput);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineTranslateDialog(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, HWND hwndOwner, PSTR lpszAddressIn);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineTranslateDialogA(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, HWND hwndOwner, PSTR lpszAddressIn);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineTranslateDialogW(uint32 hLineApp, uint32 dwDeviceID, uint32 dwAPIVersion, HWND hwndOwner, PWSTR lpszAddressIn);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineUncompleteCall(uint32 hLine, uint32 dwCompletionID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineUnhold(uint32 hCall);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineUnpark(uint32 hLine, uint32 dwAddressID, uint32* lphCall, PSTR lpszDestAddress);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineUnparkA(uint32 hLine, uint32 dwAddressID, uint32* lphCall, PSTR lpszDestAddress);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 lineUnparkW(uint32 hLine, uint32 dwAddressID, uint32* lphCall, PWSTR lpszDestAddress);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneClose(uint32 hPhone);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneConfigDialog(uint32 dwDeviceID, HWND hwndOwner, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneConfigDialogA(uint32 dwDeviceID, HWND hwndOwner, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneConfigDialogW(uint32 dwDeviceID, HWND hwndOwner, PWSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneDevSpecific(uint32 hPhone, void* lpParams, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetButtonInfo(uint32 hPhone, uint32 dwButtonLampID, PHONEBUTTONINFO* lpButtonInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetButtonInfoA(uint32 hPhone, uint32 dwButtonLampID, PHONEBUTTONINFO* lpButtonInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetButtonInfoW(uint32 hPhone, uint32 dwButtonLampID, PHONEBUTTONINFO* lpButtonInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetData(uint32 hPhone, uint32 dwDataID, void* lpData, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetDevCaps(uint32 hPhoneApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtVersion, PHONECAPS* lpPhoneCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetDevCapsA(uint32 hPhoneApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtVersion, PHONECAPS* lpPhoneCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetDevCapsW(uint32 hPhoneApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtVersion, PHONECAPS* lpPhoneCaps);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetDisplay(uint32 hPhone, VARSTRING* lpDisplay);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetGain(uint32 hPhone, uint32 dwHookSwitchDev, uint32* lpdwGain);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetHookSwitch(uint32 hPhone, uint32* lpdwHookSwitchDevs);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetIcon(uint32 dwDeviceID, PSTR lpszDeviceClass, int* lphIcon);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetIconA(uint32 dwDeviceID, PSTR lpszDeviceClass, int* lphIcon);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetIconW(uint32 dwDeviceID, PWSTR lpszDeviceClass, int* lphIcon);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetID(uint32 hPhone, VARSTRING* lpDeviceID, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetIDA(uint32 hPhone, VARSTRING* lpDeviceID, PSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetIDW(uint32 hPhone, VARSTRING* lpDeviceID, PWSTR lpszDeviceClass);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetLamp(uint32 hPhone, uint32 dwButtonLampID, uint32* lpdwLampMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetMessage(uint32 hPhoneApp, PHONEMESSAGE* lpMessage, uint32 dwTimeout);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetRing(uint32 hPhone, uint32* lpdwRingMode, uint32* lpdwVolume);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetStatus(uint32 hPhone, PHONESTATUS* lpPhoneStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetStatusA(uint32 hPhone, PHONESTATUS* lpPhoneStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetStatusW(uint32 hPhone, PHONESTATUS* lpPhoneStatus);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetStatusMessages(uint32 hPhone, uint32* lpdwPhoneStates, uint32* lpdwButtonModes, uint32* lpdwButtonStates);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneGetVolume(uint32 hPhone, uint32 dwHookSwitchDev, uint32* lpdwVolume);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneInitialize(uint32* lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, PSTR lpszAppName, uint32* lpdwNumDevs);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneInitializeExA(uint32* lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, PSTR lpszFriendlyAppName, uint32* lpdwNumDevs, uint32* lpdwAPIVersion, PHONEINITIALIZEEXPARAMS* lpPhoneInitializeExParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneInitializeExW(uint32* lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, PWSTR lpszFriendlyAppName, uint32* lpdwNumDevs, uint32* lpdwAPIVersion, PHONEINITIALIZEEXPARAMS* lpPhoneInitializeExParams);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneNegotiateAPIVersion(uint32 hPhoneApp, uint32 dwDeviceID, uint32 dwAPILowVersion, uint32 dwAPIHighVersion, uint32* lpdwAPIVersion, PHONEEXTENSIONID* lpExtensionID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneNegotiateExtVersion(uint32 hPhoneApp, uint32 dwDeviceID, uint32 dwAPIVersion, uint32 dwExtLowVersion, uint32 dwExtHighVersion, uint32* lpdwExtVersion);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneOpen(uint32 hPhoneApp, uint32 dwDeviceID, uint32* lphPhone, uint32 dwAPIVersion, uint32 dwExtVersion, uint dwCallbackInstance, uint32 dwPrivilege);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetButtonInfo(uint32 hPhone, uint32 dwButtonLampID, PHONEBUTTONINFO* lpButtonInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetButtonInfoA(uint32 hPhone, uint32 dwButtonLampID, PHONEBUTTONINFO* lpButtonInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetButtonInfoW(uint32 hPhone, uint32 dwButtonLampID, PHONEBUTTONINFO* lpButtonInfo);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetData(uint32 hPhone, uint32 dwDataID, void* lpData, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetDisplay(uint32 hPhone, uint32 dwRow, uint32 dwColumn, PSTR lpsDisplay, uint32 dwSize);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetGain(uint32 hPhone, uint32 dwHookSwitchDev, uint32 dwGain);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetHookSwitch(uint32 hPhone, uint32 dwHookSwitchDevs, uint32 dwHookSwitchMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetLamp(uint32 hPhone, uint32 dwButtonLampID, uint32 dwLampMode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetRing(uint32 hPhone, uint32 dwRingMode, uint32 dwVolume);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetStatusMessages(uint32 hPhone, uint32 dwPhoneStates, uint32 dwButtonModes, uint32 dwButtonStates);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneSetVolume(uint32 hPhone, uint32 dwHookSwitchDev, uint32 dwVolume);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 phoneShutdown(uint32 hPhoneApp);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiGetLocationInfo(uint8* lpszCountryCode, uint8* lpszCityCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiGetLocationInfoA(uint8* lpszCountryCode, uint8* lpszCityCode);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiGetLocationInfoW(char16* lpszCountryCodeW, char16* lpszCityCodeW);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestDrop(HWND hwnd, WPARAM wRequestID);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestMakeCall(PSTR lpszDestAddress, PSTR lpszAppName, PSTR lpszCalledParty, PSTR lpszComment);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestMakeCallA(PSTR lpszDestAddress, PSTR lpszAppName, PSTR lpszCalledParty, PSTR lpszComment);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestMakeCallW(PWSTR lpszDestAddress, PWSTR lpszAppName, PWSTR lpszCalledParty, PWSTR lpszComment);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestMediaCall(HWND hwnd, WPARAM wRequestID, PSTR lpszDeviceClass, PSTR lpDeviceID, uint32 dwSize, uint32 dwSecure, PSTR lpszDestAddress, PSTR lpszAppName, PSTR lpszCalledParty, PSTR lpszComment);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestMediaCallA(HWND hwnd, WPARAM wRequestID, PSTR lpszDeviceClass, PSTR lpDeviceID, uint32 dwSize, uint32 dwSecure, PSTR lpszDestAddress, PSTR lpszAppName, PSTR lpszCalledParty, PSTR lpszComment);
		[Import("tapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern int32 tapiRequestMediaCallW(HWND hwnd, WPARAM wRequestID, PWSTR lpszDeviceClass, PWSTR lpDeviceID, uint32 dwSize, uint32 dwSecure, PWSTR lpszDestAddress, PWSTR lpszAppName, PWSTR lpszCalledParty, PWSTR lpszComment);
		[Import("mapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT OpenTnefStream(void* lpvSupport, IStream* lpStream, int8* lpszStreamName, uint32 ulFlags, IMessage* lpMessage, uint16 wKeyVal, ITnef** lppTNEF);
		[Import("mapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT OpenTnefStreamEx(void* lpvSupport, IStream* lpStream, int8* lpszStreamName, uint32 ulFlags, IMessage* lpMessage, uint16 wKeyVal, IAddrBook* lpAdressBook, ITnef** lppTNEF);
		[Import("mapi32.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT GetTnefStreamCodepage(IStream* lpStream, uint32* lpulCodepage, uint32* lpulSubCodepage);
		
	}
}
