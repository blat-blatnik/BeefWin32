using System;

// namespace Graphics.Direct3D12
namespace Win32
{
	extension Win32
	{
		// --- Constants ---
		
		public const uint32 D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = 4096;
		public const uint32 D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = 5768;
		public const uint32 D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
		public const uint32 D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
		public const uint32 D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 255;
		public const uint32 D3D12_APPEND_ALIGNED_ELEMENT = 4294967295;
		public const uint32 D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
		public const uint32 D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
		public const uint32 D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
		public const uint32 D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
		public const uint32 D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
		public const uint32 D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
		public const uint32 D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
		public const uint32 D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
		public const uint32 D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
		public const uint32 D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
		public const uint32 D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
		public const uint32 D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
		public const uint32 D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
		public const uint32 D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
		public const uint32 D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
		public const uint32 D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
		public const uint32 D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
		public const int32 D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
		public const int32 D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
		public const uint32 D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
		public const uint32 D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
		public const uint32 D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
		public const uint32 D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
		public const uint32 D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
		public const uint32 D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
		public const uint32 D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
		public const uint32 D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
		public const uint32 D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
		public const uint32 D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
		public const uint32 D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
		public const uint32 D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
		public const uint32 D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
		public const uint32 D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
		public const uint32 D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
		public const uint32 D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
		public const uint32 D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
		public const uint32 D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
		public const uint32 D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
		public const uint32 D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
		public const uint32 D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
		public const uint32 D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
		public const uint32 D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
		public const uint32 D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
		public const uint32 D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
		public const uint32 D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
		public const uint32 D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
		public const uint32 D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
		public const uint32 D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
		public const uint32 D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
		public const uint32 D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
		public const uint32 D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
		public const uint32 D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
		public const uint32 D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
		public const uint32 D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
		public const uint32 D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
		public const uint32 D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
		public const uint32 D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
		public const uint32 D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
		public const uint32 D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
		public const uint32 D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
		public const uint32 D3D12_CS_TGSM_REGISTER_COUNT = 8192;
		public const uint32 D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
		public const uint32 D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
		public const uint32 D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
		public const uint32 D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
		public const uint32 D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
		public const uint32 D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
		public const uint32 D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
		public const uint32 D3D12_CS_THREADID_REGISTER_COUNT = 1;
		public const uint32 D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
		public const uint32 D3D12_CS_THREAD_GROUP_MAX_X = 1024;
		public const uint32 D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
		public const uint32 D3D12_CS_THREAD_GROUP_MAX_Z = 64;
		public const uint32 D3D12_CS_THREAD_GROUP_MIN_X = 1;
		public const uint32 D3D12_CS_THREAD_GROUP_MIN_Y = 1;
		public const uint32 D3D12_CS_THREAD_GROUP_MIN_Z = 1;
		public const uint32 D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
		public const float D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1f;
		public const float D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1f;
		public const float D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1f;
		public const float D3D12_DEFAULT_BLEND_FACTOR_RED = 1f;
		public const float D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0f;
		public const int32 D3D12_DEFAULT_DEPTH_BIAS = 0;
		public const float D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0f;
		public const uint32 D3D12_DEFAULT_MAX_ANISOTROPY = 16;
		public const float D3D12_DEFAULT_MIP_LOD_BIAS = 0f;
		public const uint32 D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
		public const uint32 D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
		public const uint32 D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
		public const uint32 D3D12_DEFAULT_SAMPLE_MASK = 4294967295;
		public const uint32 D3D12_DEFAULT_SCISSOR_ENDX = 0;
		public const uint32 D3D12_DEFAULT_SCISSOR_ENDY = 0;
		public const uint32 D3D12_DEFAULT_SCISSOR_STARTX = 0;
		public const uint32 D3D12_DEFAULT_SCISSOR_STARTY = 0;
		public const float D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0f;
		public const uint32 D3D12_DEFAULT_STENCIL_READ_MASK = 255;
		public const uint32 D3D12_DEFAULT_STENCIL_REFERENCE = 0;
		public const uint32 D3D12_DEFAULT_STENCIL_WRITE_MASK = 255;
		public const uint32 D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
		public const uint32 D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
		public const float D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0f;
		public const float D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0f;
		public const uint32 D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
		public const uint32 D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
		public const uint32 D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
		public const uint32 D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 4294967295;
		public const uint32 D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 4294967287;
		public const uint32 D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
		public const uint32 D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
		public const uint32 D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
		public const uint32 D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
		public const uint32 D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
		public const uint32 D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
		public const uint32 D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
		public const uint32 D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
		public const double D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6;
		public const float D3D12_FLOAT32_MAX = 3.4028235e+38f;
		public const float D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6f;
		public const float D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4f;
		public const float D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1f;
		public const float D3D12_FLOAT_TO_SRGB_OFFSET = 0.055f;
		public const float D3D12_FLOAT_TO_SRGB_SCALE_1 = 12.92f;
		public const float D3D12_FLOAT_TO_SRGB_SCALE_2 = 1.055f;
		public const float D3D12_FLOAT_TO_SRGB_THRESHOLD = 0.0031308f;
		public const float D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483600.0f;
		public const float D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2147483600.0f;
		public const float D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967300.0f;
		public const float D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0f;
		public const uint32 D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
		public const uint32 D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
		public const uint32 D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
		public const uint32 D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
		public const uint32 D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_GS_INPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_GS_INPUT_REGISTER_VERTICES = 32;
		public const uint32 D3D12_GS_MAX_INSTANCE_COUNT = 32;
		public const uint32 D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
		public const uint32 D3D12_GS_OUTPUT_ELEMENTS = 32;
		public const uint32 D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
		public const uint32 D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
		public const uint32 D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
		public const uint32 D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
		public const uint32 D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
		public const float D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1f;
		public const float D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64f;
		public const uint32 D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
		public const uint32 D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
		public const uint32 D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
		public const uint32 D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
		public const uint32 D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
		public const uint32 D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
		public const uint32 D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
		public const uint32 D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
		public const uint32 D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
		public const uint32 D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
		public const uint32 D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
		public const uint32 D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
		public const uint32 D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
		public const uint32 D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
		public const uint32 D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
		public const uint32 D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
		public const uint32 D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
		public const uint32 D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
		public const uint32 D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295;
		public const uint32 D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295;
		public const float D3D12_LINEAR_GAMMA = 1f;
		public const uint32 D3D12_MAJOR_VERSION = 12;
		public const float D3D12_MAX_BORDER_COLOR_COMPONENT = 1f;
		public const float D3D12_MAX_DEPTH = 1f;
		public const uint32 D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
		public const uint32 D3D12_MAX_MAXANISOTROPY = 16;
		public const uint32 D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
		public const float D3D12_MAX_POSITION_VALUE = 3.4028236e+34f;
		public const uint32 D3D12_MAX_ROOT_COST = 64;
		public const uint32 D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
		public const uint32 D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
		public const uint32 D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
		public const uint32 D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
		public const uint32 D3D12_MAX_VIEW_INSTANCE_COUNT = 4;
		public const uint32 D3D12_MINOR_VERSION = 0;
		public const float D3D12_MIN_BORDER_COLOR_COMPONENT = 0f;
		public const float D3D12_MIN_DEPTH = 0f;
		public const uint32 D3D12_MIN_MAXANISOTROPY = 0;
		public const float D3D12_MIP_LOD_BIAS_MAX = 15.99f;
		public const float D3D12_MIP_LOD_BIAS_MIN = -16f;
		public const uint32 D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
		public const uint32 D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
		public const float D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4f;
		public const uint32 D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
		public const uint32 D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
		public const uint32 D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 4294967288;
		public const uint32 D3D12_PACKED_TILE = 4294967295;
		public const uint32 D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
		public const uint32 D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
		public const uint32 D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
		public const uint32 D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
		public const uint32 D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
		public const uint32 D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
		public const uint32 D3D12_PS_FRONTFACING_TRUE_VALUE = 4294967295;
		public const uint32 D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_PS_INPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
		public const float D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0f;
		public const uint32 D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
		public const uint32 D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
		public const uint32 D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
		public const uint32 D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
		public const float D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5f;
		public const uint32 D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
		public const uint32 D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = 8;
		public const uint32 D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = 256;
		public const uint32 D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = 16;
		public const uint32 D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = 32;
		public const uint32 D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = 31;
		public const uint32 D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 16777216;
		public const uint32 D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = 16777216;
		public const uint32 D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 536870912;
		public const uint32 D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = 1073741824;
		public const uint32 D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = 4096;
		public const uint32 D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = 32;
		public const uint32 D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = 64;
		public const uint32 D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = 16;
		public const uint32 D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
		public const uint32 D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
		public const uint32 D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
		public const uint32 D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
		public const uint32 D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
		public const uint32 D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
		public const uint32 D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
		public const uint32 D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
		public const uint32 D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
		public const uint32 D3D12_REQ_MAXANISOTROPY = 16;
		public const uint32 D3D12_REQ_MIP_LEVELS = 15;
		public const uint32 D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
		public const uint32 D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
		public const uint32 D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
		public const uint32 D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
		public const float D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25f;
		public const uint32 D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
		public const uint32 D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
		public const uint32 D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
		public const uint32 D3D12_REQ_SUBRESOURCES = 30720;
		public const uint32 D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
		public const uint32 D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
		public const uint32 D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
		public const uint32 D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
		public const uint32 D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
		public const uint32 D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
		public const uint32 D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
		public const uint32 D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 4294967295;
		public const uint32 D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2;
		public const uint32 D3D12_SDK_VERSION = 5;
		public const uint32 D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32;
		public const uint32 D3D12_SHADER_MAJOR_VERSION = 5;
		public const uint32 D3D12_SHADER_MAX_INSTANCES = 65535;
		public const uint32 D3D12_SHADER_MAX_INTERFACES = 253;
		public const uint32 D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
		public const uint32 D3D12_SHADER_MAX_TYPES = 65535;
		public const uint32 D3D12_SHADER_MINOR_VERSION = 1;
		public const uint32 D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
		public const uint32 D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
		public const uint32 D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
		public const uint32 D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
		public const uint32 D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
		public const uint32 D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
		public const uint32 D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
		public const uint32 D3D12_SO_BUFFER_SLOT_COUNT = 4;
		public const uint32 D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
		public const uint32 D3D12_SO_NO_RASTERIZED_STREAM = 4294967295;
		public const uint32 D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
		public const uint32 D3D12_SO_STREAM_COUNT = 4;
		public const uint32 D3D12_SPEC_DATE_DAY = 14;
		public const uint32 D3D12_SPEC_DATE_MONTH = 11;
		public const uint32 D3D12_SPEC_DATE_YEAR = 2014;
		public const double D3D12_SPEC_VERSION = 1.16;
		public const float D3D12_SRGB_GAMMA = 2.2f;
		public const float D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92f;
		public const float D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055f;
		public const float D3D12_SRGB_TO_FLOAT_EXPONENT = 2.4f;
		public const float D3D12_SRGB_TO_FLOAT_OFFSET = 0.055f;
		public const float D3D12_SRGB_TO_FLOAT_THRESHOLD = 0.04045f;
		public const float D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5f;
		public const uint32 D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
		public const uint32 D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
		public const uint32 D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
		public const uint32 D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
		public const uint32 D3D12_STANDARD_VECTOR_SIZE = 4;
		public const uint32 D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
		public const uint32 D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
		public const uint32 D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
		public const uint32 D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
		public const uint32 D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
		public const uint32 D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
		public const uint32 D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
		public const uint32 D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
		public const uint32 D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
		public const uint32 D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
		public const uint32 D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
		public const uint32 D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
		public const uint32 D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
		public const uint32 D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
		public const uint32 D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
		public const uint32 D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
		public const uint32 D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
		public const uint32 D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32;
		public const uint32 D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
		public const uint32 D3D12_UAV_SLOT_COUNT = 64;
		public const uint32 D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
		public const uint32 D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10;
		public const uint32 D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4;
		public const uint32 D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256;
		public const uint32 D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256;
		public const uint32 D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 4294967295;
		public const uint32 D3D12_VIDEO_PROCESS_MAX_FILTERS = 32;
		public const uint32 D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2;
		public const uint32 D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
		public const uint32 D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
		public const uint32 D3D12_VIEWPORT_BOUNDS_MAX = 32767;
		public const int32 D3D12_VIEWPORT_BOUNDS_MIN = -32768;
		public const uint32 D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_VS_INPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
		public const uint32 D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
		public const uint32 D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
		public const uint32 D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
		public const uint32 D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
		public const uint32 D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
		public const uint32 D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
		public const uint32 D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
		public const uint32 D3D12_SHADER_COMPONENT_MAPPING_MASK = 7;
		public const uint32 D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
		public const uint32 D3D12_FILTER_REDUCTION_TYPE_MASK = 3;
		public const uint32 D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
		public const uint32 D3D12_FILTER_TYPE_MASK = 3;
		public const uint32 D3D12_MIN_FILTER_SHIFT = 4;
		public const uint32 D3D12_MAG_FILTER_SHIFT = 2;
		public const uint32 D3D12_MIP_FILTER_SHIFT = 0;
		public const uint32 D3D12_ANISOTROPIC_FILTERING_BIT = 64;
		public const uint32 LUID_DEFINED = 1;
		public const Guid D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED = .(0x62b0084e, 0xc70e, 0x4daa, 0xa1, 0x09, 0x30, 0xff, 0x8d, 0x5a, 0x04, 0x82);
		public const Guid CLSID_D3D12Debug = .(0xf2352aeb, 0xdd84, 0x49fe, 0xb9, 0x7b, 0xa9, 0xdc, 0xfd, 0xcc, 0x1b, 0x4f);
		public const Guid CLSID_D3D12Tools = .(0xe38216b1, 0x3c8c, 0x4833, 0xaa, 0x09, 0x0a, 0x06, 0xb6, 0x5d, 0x96, 0xc8);
		public const Guid CLSID_D3D12DeviceRemovedExtendedData = .(0x4a75bbc4, 0x9ff4, 0x4ad8, 0x9f, 0x18, 0xab, 0xae, 0x84, 0xdc, 0x5f, 0xf2);
		public const Guid CLSID_D3D12SDKConfiguration = .(0x7cda6aca, 0xa03e, 0x49c8, 0x94, 0x58, 0x03, 0x34, 0xd2, 0x0e, 0x07, 0xce);
		public const uint32 D3D12_SHADING_RATE_X_AXIS_SHIFT = 2;
		public const uint32 D3D12_SHADING_RATE_VALID_MASK = 3;
		public const Guid WKPDID_D3DAutoDebugObjectNameW = .(0xd4902e36, 0x757a, 0x4942, 0x95, 0x94, 0xb6, 0x76, 0x9a, 0xfa, 0x43, 0xcd);
		public const Guid DXGI_DEBUG_D3D12 = .(0xcf59a98c, 0xa950, 0x4326, 0x91, 0xef, 0x9b, 0xba, 0xa1, 0x7b, 0xfd, 0x95);
		public const uint32 D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
		public const uint32 D3D_SHADER_REQUIRES_STENCIL_REF = 512;
		public const uint32 D3D_SHADER_REQUIRES_INNER_COVERAGE = 1024;
		public const uint32 D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048;
		public const uint32 D3D_SHADER_REQUIRES_ROVS = 4096;
		public const uint32 D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192;
		public const uint32 D3D_SHADER_REQUIRES_WAVE_OPS = 16384;
		public const uint32 D3D_SHADER_REQUIRES_INT64_OPS = 32768;
		public const uint32 D3D_SHADER_REQUIRES_VIEW_ID = 65536;
		public const uint32 D3D_SHADER_REQUIRES_BARYCENTRICS = 131072;
		public const uint32 D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS = 262144;
		public const uint32 D3D_SHADER_REQUIRES_SHADING_RATE = 524288;
		public const uint32 D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1 = 1048576;
		public const uint32 D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK = 2097152;
		public const uint32 D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304;
		public const uint32 D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED = 8388608;
		public const uint32 D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216;
		public const uint32 D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432;
		public const uint32 D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864;
		public const uint32 D3D_SHADER_REQUIRES_WAVE_MMA = 134217728;
		public const uint32 D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456;
		public const Guid D3D12ExperimentalShaderModels = .(0x76f5573e, 0xf13a, 0x40f5, 0xb2, 0x97, 0x81, 0xce, 0x9e, 0x18, 0x93, 0x3f);
		public const Guid D3D12TiledResourceTier4 = .(0xc9c4725f, 0xa81a, 0x4f56, 0x8c, 0x5b, 0xc5, 0x10, 0x39, 0xd6, 0x94, 0xfb);
		public const Guid D3D12MetaCommand = .(0xc734c97e, 0x8077, 0x48c8, 0x9f, 0xdc, 0xd9, 0xd1, 0xdd, 0x31, 0xdd, 0x77);
		
		// --- Enums ---
		
		[AllowDuplicates]
		public enum D3D12_COMMAND_LIST_TYPE : int32
		{
			D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
			D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
			D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
			D3D12_COMMAND_LIST_TYPE_COPY = 3,
			D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
			D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5,
			D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6,
		}
		[AllowDuplicates]
		public enum D3D12_COMMAND_QUEUE_FLAGS : uint32
		{
			D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
			D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1,
		}
		[AllowDuplicates]
		public enum D3D12_COMMAND_QUEUE_PRIORITY : int32
		{
			D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
			D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100,
			D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000,
		}
		[AllowDuplicates]
		public enum D3D12_PRIMITIVE_TOPOLOGY_TYPE : int32
		{
			D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
			D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
			D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
			D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
			D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4,
		}
		[AllowDuplicates]
		public enum D3D12_INPUT_CLASSIFICATION : int32
		{
			D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
			D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1,
		}
		[AllowDuplicates]
		public enum D3D12_FILL_MODE : int32
		{
			D3D12_FILL_MODE_WIREFRAME = 2,
			D3D12_FILL_MODE_SOLID = 3,
		}
		[AllowDuplicates]
		public enum D3D12_CULL_MODE : int32
		{
			D3D12_CULL_MODE_NONE = 1,
			D3D12_CULL_MODE_FRONT = 2,
			D3D12_CULL_MODE_BACK = 3,
		}
		[AllowDuplicates]
		public enum D3D12_COMPARISON_FUNC : int32
		{
			D3D12_COMPARISON_FUNC_NEVER = 1,
			D3D12_COMPARISON_FUNC_LESS = 2,
			D3D12_COMPARISON_FUNC_EQUAL = 3,
			D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
			D3D12_COMPARISON_FUNC_GREATER = 5,
			D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
			D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
			D3D12_COMPARISON_FUNC_ALWAYS = 8,
		}
		[AllowDuplicates]
		public enum D3D12_DEPTH_WRITE_MASK : int32
		{
			D3D12_DEPTH_WRITE_MASK_ZERO = 0,
			D3D12_DEPTH_WRITE_MASK_ALL = 1,
		}
		[AllowDuplicates]
		public enum D3D12_STENCIL_OP : int32
		{
			D3D12_STENCIL_OP_KEEP = 1,
			D3D12_STENCIL_OP_ZERO = 2,
			D3D12_STENCIL_OP_REPLACE = 3,
			D3D12_STENCIL_OP_INCR_SAT = 4,
			D3D12_STENCIL_OP_DECR_SAT = 5,
			D3D12_STENCIL_OP_INVERT = 6,
			D3D12_STENCIL_OP_INCR = 7,
			D3D12_STENCIL_OP_DECR = 8,
		}
		[AllowDuplicates]
		public enum D3D12_BLEND : int32
		{
			D3D12_BLEND_ZERO = 1,
			D3D12_BLEND_ONE = 2,
			D3D12_BLEND_SRC_COLOR = 3,
			D3D12_BLEND_INV_SRC_COLOR = 4,
			D3D12_BLEND_SRC_ALPHA = 5,
			D3D12_BLEND_INV_SRC_ALPHA = 6,
			D3D12_BLEND_DEST_ALPHA = 7,
			D3D12_BLEND_INV_DEST_ALPHA = 8,
			D3D12_BLEND_DEST_COLOR = 9,
			D3D12_BLEND_INV_DEST_COLOR = 10,
			D3D12_BLEND_SRC_ALPHA_SAT = 11,
			D3D12_BLEND_BLEND_FACTOR = 14,
			D3D12_BLEND_INV_BLEND_FACTOR = 15,
			D3D12_BLEND_SRC1_COLOR = 16,
			D3D12_BLEND_INV_SRC1_COLOR = 17,
			D3D12_BLEND_SRC1_ALPHA = 18,
			D3D12_BLEND_INV_SRC1_ALPHA = 19,
		}
		[AllowDuplicates]
		public enum D3D12_BLEND_OP : int32
		{
			D3D12_BLEND_OP_ADD = 1,
			D3D12_BLEND_OP_SUBTRACT = 2,
			D3D12_BLEND_OP_REV_SUBTRACT = 3,
			D3D12_BLEND_OP_MIN = 4,
			D3D12_BLEND_OP_MAX = 5,
		}
		[AllowDuplicates]
		public enum D3D12_COLOR_WRITE_ENABLE : int32
		{
			D3D12_COLOR_WRITE_ENABLE_RED = 1,
			D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
			D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
			D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
			D3D12_COLOR_WRITE_ENABLE_ALL = 15,
		}
		[AllowDuplicates]
		public enum D3D12_LOGIC_OP : int32
		{
			D3D12_LOGIC_OP_CLEAR = 0,
			D3D12_LOGIC_OP_SET = 1,
			D3D12_LOGIC_OP_COPY = 2,
			D3D12_LOGIC_OP_COPY_INVERTED = 3,
			D3D12_LOGIC_OP_NOOP = 4,
			D3D12_LOGIC_OP_INVERT = 5,
			D3D12_LOGIC_OP_AND = 6,
			D3D12_LOGIC_OP_NAND = 7,
			D3D12_LOGIC_OP_OR = 8,
			D3D12_LOGIC_OP_NOR = 9,
			D3D12_LOGIC_OP_XOR = 10,
			D3D12_LOGIC_OP_EQUIV = 11,
			D3D12_LOGIC_OP_AND_REVERSE = 12,
			D3D12_LOGIC_OP_AND_INVERTED = 13,
			D3D12_LOGIC_OP_OR_REVERSE = 14,
			D3D12_LOGIC_OP_OR_INVERTED = 15,
		}
		[AllowDuplicates]
		public enum D3D12_CONSERVATIVE_RASTERIZATION_MODE : int32
		{
			D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
			D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1,
		}
		[AllowDuplicates]
		public enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE : int32
		{
			D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
			D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
			D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2,
		}
		[AllowDuplicates]
		public enum D3D12_PIPELINE_STATE_FLAGS : uint32
		{
			D3D12_PIPELINE_STATE_FLAG_NONE = 0,
			D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1,
		}
		[AllowDuplicates]
		public enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE : int32
		{
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25,
			D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 26,
		}
		[AllowDuplicates]
		public enum D3D12_FEATURE : int32
		{
			D3D12_FEATURE_D3D12_OPTIONS = 0,
			D3D12_FEATURE_ARCHITECTURE = 1,
			D3D12_FEATURE_FEATURE_LEVELS = 2,
			D3D12_FEATURE_FORMAT_SUPPORT = 3,
			D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
			D3D12_FEATURE_FORMAT_INFO = 5,
			D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
			D3D12_FEATURE_SHADER_MODEL = 7,
			D3D12_FEATURE_D3D12_OPTIONS1 = 8,
			D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10,
			D3D12_FEATURE_ROOT_SIGNATURE = 12,
			D3D12_FEATURE_ARCHITECTURE1 = 16,
			D3D12_FEATURE_D3D12_OPTIONS2 = 18,
			D3D12_FEATURE_SHADER_CACHE = 19,
			D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20,
			D3D12_FEATURE_D3D12_OPTIONS3 = 21,
			D3D12_FEATURE_EXISTING_HEAPS = 22,
			D3D12_FEATURE_D3D12_OPTIONS4 = 23,
			D3D12_FEATURE_SERIALIZATION = 24,
			D3D12_FEATURE_CROSS_NODE = 25,
			D3D12_FEATURE_D3D12_OPTIONS5 = 27,
			D3D12_FEATURE_DISPLAYABLE = 28,
			D3D12_FEATURE_D3D12_OPTIONS6 = 30,
			D3D12_FEATURE_QUERY_META_COMMAND = 31,
			D3D12_FEATURE_D3D12_OPTIONS7 = 32,
			D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33,
			D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34,
			D3D12_FEATURE_D3D12_OPTIONS8 = 36,
			D3D12_FEATURE_D3D12_OPTIONS9 = 37,
			D3D12_FEATURE_D3D12_OPTIONS10 = 39,
			D3D12_FEATURE_D3D12_OPTIONS11 = 40,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_MIN_PRECISION_SUPPORT : uint32
		{
			D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
			D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1,
			D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2,
		}
		[AllowDuplicates]
		public enum D3D12_TILED_RESOURCES_TIER : int32
		{
			D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
			D3D12_TILED_RESOURCES_TIER_1 = 1,
			D3D12_TILED_RESOURCES_TIER_2 = 2,
			D3D12_TILED_RESOURCES_TIER_3 = 3,
			D3D12_TILED_RESOURCES_TIER_4 = 4,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_BINDING_TIER : int32
		{
			D3D12_RESOURCE_BINDING_TIER_1 = 1,
			D3D12_RESOURCE_BINDING_TIER_2 = 2,
			D3D12_RESOURCE_BINDING_TIER_3 = 3,
		}
		[AllowDuplicates]
		public enum D3D12_CONSERVATIVE_RASTERIZATION_TIER : int32
		{
			D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
			D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
			D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
			D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3,
		}
		[AllowDuplicates]
		public enum D3D12_FORMAT_SUPPORT1 : uint32
		{
			D3D12_FORMAT_SUPPORT1_NONE = 0,
			D3D12_FORMAT_SUPPORT1_BUFFER = 1,
			D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2,
			D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4,
			D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8,
			D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16,
			D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32,
			D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64,
			D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128,
			D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256,
			D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512,
			D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024,
			D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048,
			D3D12_FORMAT_SUPPORT1_MIP = 4096,
			D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384,
			D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768,
			D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536,
			D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144,
			D3D12_FORMAT_SUPPORT1_DISPLAY = 524288,
			D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576,
			D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152,
			D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304,
			D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608,
			D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216,
			D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432,
			D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864,
			D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728,
			D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456,
			D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912,
			D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824,
		}
		[AllowDuplicates]
		public enum D3D12_FORMAT_SUPPORT2 : uint32
		{
			D3D12_FORMAT_SUPPORT2_NONE = 0,
			D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1,
			D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2,
			D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4,
			D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8,
			D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16,
			D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32,
			D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64,
			D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128,
			D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256,
			D3D12_FORMAT_SUPPORT2_TILED = 512,
			D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384,
			D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 32768,
		}
		[AllowDuplicates]
		public enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS : uint32
		{
			D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
			D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1,
		}
		[AllowDuplicates]
		public enum D3D12_CROSS_NODE_SHARING_TIER : int32
		{
			D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
			D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
			D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
			D3D12_CROSS_NODE_SHARING_TIER_2 = 3,
			D3D12_CROSS_NODE_SHARING_TIER_3 = 4,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_HEAP_TIER : int32
		{
			D3D12_RESOURCE_HEAP_TIER_1 = 1,
			D3D12_RESOURCE_HEAP_TIER_2 = 2,
		}
		[AllowDuplicates]
		public enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER : int32
		{
			D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0,
			D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1,
			D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2,
		}
		[AllowDuplicates]
		public enum D3D12_VIEW_INSTANCING_TIER : int32
		{
			D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0,
			D3D12_VIEW_INSTANCING_TIER_1 = 1,
			D3D12_VIEW_INSTANCING_TIER_2 = 2,
			D3D12_VIEW_INSTANCING_TIER_3 = 3,
		}
		[AllowDuplicates]
		public enum D3D_ROOT_SIGNATURE_VERSION : int32
		{
			D3D_ROOT_SIGNATURE_VERSION_1 = 1,
			D3D_ROOT_SIGNATURE_VERSION_1_0 = 1,
			D3D_ROOT_SIGNATURE_VERSION_1_1 = 2,
		}
		[AllowDuplicates]
		public enum D3D_SHADER_MODEL : int32
		{
			D3D_SHADER_MODEL_5_1 = 81,
			D3D_SHADER_MODEL_6_0 = 96,
			D3D_SHADER_MODEL_6_1 = 97,
			D3D_SHADER_MODEL_6_2 = 98,
			D3D_SHADER_MODEL_6_3 = 99,
			D3D_SHADER_MODEL_6_4 = 100,
			D3D_SHADER_MODEL_6_5 = 101,
			D3D_SHADER_MODEL_6_6 = 102,
			D3D_SHADER_MODEL_6_7 = 103,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_CACHE_SUPPORT_FLAGS : uint32
		{
			D3D12_SHADER_CACHE_SUPPORT_NONE = 0,
			D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1,
			D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2,
			D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4,
			D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8,
			D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE = 16,
			D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR = 32,
			D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE = 64,
		}
		[AllowDuplicates]
		public enum D3D12_COMMAND_LIST_SUPPORT_FLAGS : uint32
		{
			D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32,
			D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64,
		}
		[AllowDuplicates]
		public enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER : int32
		{
			D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0,
			D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1,
			D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = 2,
		}
		[AllowDuplicates]
		public enum D3D12_HEAP_SERIALIZATION_TIER : int32
		{
			D3D12_HEAP_SERIALIZATION_TIER_0 = 0,
			D3D12_HEAP_SERIALIZATION_TIER_10 = 10,
		}
		[AllowDuplicates]
		public enum D3D12_RENDER_PASS_TIER : int32
		{
			D3D12_RENDER_PASS_TIER_0 = 0,
			D3D12_RENDER_PASS_TIER_1 = 1,
			D3D12_RENDER_PASS_TIER_2 = 2,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_TIER : int32
		{
			D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0,
			D3D12_RAYTRACING_TIER_1_0 = 10,
			D3D12_RAYTRACING_TIER_1_1 = 11,
		}
		[AllowDuplicates]
		public enum D3D12_VARIABLE_SHADING_RATE_TIER : int32
		{
			D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0,
			D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1,
			D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2,
		}
		[AllowDuplicates]
		public enum D3D12_MESH_SHADER_TIER : int32
		{
			D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0,
			D3D12_MESH_SHADER_TIER_1 = 10,
		}
		[AllowDuplicates]
		public enum D3D12_SAMPLER_FEEDBACK_TIER : int32
		{
			D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0,
			D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90,
			D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100,
		}
		[AllowDuplicates]
		public enum D3D12_WAVE_MMA_TIER : int32
		{
			D3D12_WAVE_MMA_TIER_NOT_SUPPORTED = 0,
			D3D12_WAVE_MMA_TIER_1_0 = 10,
		}
		[AllowDuplicates]
		public enum D3D12_HEAP_TYPE : int32
		{
			D3D12_HEAP_TYPE_DEFAULT = 1,
			D3D12_HEAP_TYPE_UPLOAD = 2,
			D3D12_HEAP_TYPE_READBACK = 3,
			D3D12_HEAP_TYPE_CUSTOM = 4,
		}
		[AllowDuplicates]
		public enum D3D12_CPU_PAGE_PROPERTY : int32
		{
			D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
			D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
			D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
			D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3,
		}
		[AllowDuplicates]
		public enum D3D12_MEMORY_POOL : int32
		{
			D3D12_MEMORY_POOL_UNKNOWN = 0,
			D3D12_MEMORY_POOL_L0 = 1,
			D3D12_MEMORY_POOL_L1 = 2,
		}
		[AllowDuplicates]
		public enum D3D12_HEAP_FLAGS : uint32
		{
			D3D12_HEAP_FLAG_NONE = 0,
			D3D12_HEAP_FLAG_SHARED = 1,
			D3D12_HEAP_FLAG_DENY_BUFFERS = 4,
			D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8,
			D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32,
			D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64,
			D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128,
			D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256,
			D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512,
			D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024,
			D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048,
			D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096,
			D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
			D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192,
			D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68,
			D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_DIMENSION : int32
		{
			D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
			D3D12_RESOURCE_DIMENSION_BUFFER = 1,
			D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
			D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
			D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4,
		}
		[AllowDuplicates]
		public enum D3D12_TEXTURE_LAYOUT : int32
		{
			D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
			D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
			D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
			D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_FLAGS : uint32
		{
			D3D12_RESOURCE_FLAG_NONE = 0,
			D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1,
			D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2,
			D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4,
			D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8,
			D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16,
			D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32,
			D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64,
			D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY = 128,
		}
		[AllowDuplicates]
		public enum D3D12_TILE_RANGE_FLAGS : int32
		{
			D3D12_TILE_RANGE_FLAG_NONE = 0,
			D3D12_TILE_RANGE_FLAG_NULL = 1,
			D3D12_TILE_RANGE_FLAG_SKIP = 2,
			D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4,
		}
		[AllowDuplicates]
		public enum D3D12_TILE_MAPPING_FLAGS : uint32
		{
			D3D12_TILE_MAPPING_FLAG_NONE = 0,
			D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1,
		}
		[AllowDuplicates]
		public enum D3D12_TILE_COPY_FLAGS : uint32
		{
			D3D12_TILE_COPY_FLAG_NONE = 0,
			D3D12_TILE_COPY_FLAG_NO_HAZARD = 1,
			D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2,
			D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_STATES : uint32
		{
			D3D12_RESOURCE_STATE_COMMON = 0,
			D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1,
			D3D12_RESOURCE_STATE_INDEX_BUFFER = 2,
			D3D12_RESOURCE_STATE_RENDER_TARGET = 4,
			D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8,
			D3D12_RESOURCE_STATE_DEPTH_WRITE = 16,
			D3D12_RESOURCE_STATE_DEPTH_READ = 32,
			D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64,
			D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128,
			D3D12_RESOURCE_STATE_STREAM_OUT = 256,
			D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512,
			D3D12_RESOURCE_STATE_COPY_DEST = 1024,
			D3D12_RESOURCE_STATE_COPY_SOURCE = 2048,
			D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096,
			D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192,
			D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304,
			D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216,
			D3D12_RESOURCE_STATE_GENERIC_READ = 2755,
			D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE = 192,
			D3D12_RESOURCE_STATE_PRESENT = 0,
			D3D12_RESOURCE_STATE_PREDICATION = 512,
			D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536,
			D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072,
			D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144,
			D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288,
			D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152,
			D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_BARRIER_TYPE : int32
		{
			D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
			D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1,
			D3D12_RESOURCE_BARRIER_TYPE_UAV = 2,
		}
		[AllowDuplicates]
		public enum D3D12_RESOURCE_BARRIER_FLAGS : uint32
		{
			D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
			D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1,
			D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2,
		}
		[AllowDuplicates]
		public enum D3D12_TEXTURE_COPY_TYPE : int32
		{
			D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
			D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1,
		}
		[AllowDuplicates]
		public enum D3D12_RESOLVE_MODE : int32
		{
			D3D12_RESOLVE_MODE_DECOMPRESS = 0,
			D3D12_RESOLVE_MODE_MIN = 1,
			D3D12_RESOLVE_MODE_MAX = 2,
			D3D12_RESOLVE_MODE_AVERAGE = 3,
			D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4,
			D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5,
		}
		[AllowDuplicates]
		public enum D3D12_VIEW_INSTANCING_FLAGS : uint32
		{
			D3D12_VIEW_INSTANCING_FLAG_NONE = 0,
			D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_COMPONENT_MAPPING : int32
		{
			D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
			D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
			D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
			D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
			D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
			D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5,
		}
		[AllowDuplicates]
		public enum D3D12_BUFFER_SRV_FLAGS : uint32
		{
			D3D12_BUFFER_SRV_FLAG_NONE = 0,
			D3D12_BUFFER_SRV_FLAG_RAW = 1,
		}
		[AllowDuplicates]
		public enum D3D12_SRV_DIMENSION : int32
		{
			D3D12_SRV_DIMENSION_UNKNOWN = 0,
			D3D12_SRV_DIMENSION_BUFFER = 1,
			D3D12_SRV_DIMENSION_TEXTURE1D = 2,
			D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
			D3D12_SRV_DIMENSION_TEXTURE2D = 4,
			D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
			D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
			D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
			D3D12_SRV_DIMENSION_TEXTURE3D = 8,
			D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
			D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
			D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11,
		}
		[AllowDuplicates]
		public enum D3D12_FILTER : int32
		{
			D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
			D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
			D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
			D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
			D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
			D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
			D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
			D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21,
			D3D12_FILTER_ANISOTROPIC = 85,
			D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
			D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
			D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
			D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
			D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
			D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
			D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
			D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
			D3D12_FILTER_COMPARISON_ANISOTROPIC = 213,
			D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256,
			D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257,
			D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260,
			D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261,
			D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272,
			D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273,
			D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276,
			D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277,
			D3D12_FILTER_MINIMUM_ANISOTROPIC = 341,
			D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384,
			D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385,
			D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388,
			D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389,
			D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400,
			D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401,
			D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404,
			D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405,
			D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469,
		}
		[AllowDuplicates]
		public enum D3D12_FILTER_TYPE : int32
		{
			D3D12_FILTER_TYPE_POINT = 0,
			D3D12_FILTER_TYPE_LINEAR = 1,
		}
		[AllowDuplicates]
		public enum D3D12_FILTER_REDUCTION_TYPE : int32
		{
			D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
			D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
			D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
			D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3,
		}
		[AllowDuplicates]
		public enum D3D12_TEXTURE_ADDRESS_MODE : int32
		{
			D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
			D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
			D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
			D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
			D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5,
		}
		[AllowDuplicates]
		public enum D3D12_BUFFER_UAV_FLAGS : uint32
		{
			D3D12_BUFFER_UAV_FLAG_NONE = 0,
			D3D12_BUFFER_UAV_FLAG_RAW = 1,
		}
		[AllowDuplicates]
		public enum D3D12_UAV_DIMENSION : int32
		{
			D3D12_UAV_DIMENSION_UNKNOWN = 0,
			D3D12_UAV_DIMENSION_BUFFER = 1,
			D3D12_UAV_DIMENSION_TEXTURE1D = 2,
			D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
			D3D12_UAV_DIMENSION_TEXTURE2D = 4,
			D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
			D3D12_UAV_DIMENSION_TEXTURE3D = 8,
		}
		[AllowDuplicates]
		public enum D3D12_RTV_DIMENSION : int32
		{
			D3D12_RTV_DIMENSION_UNKNOWN = 0,
			D3D12_RTV_DIMENSION_BUFFER = 1,
			D3D12_RTV_DIMENSION_TEXTURE1D = 2,
			D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
			D3D12_RTV_DIMENSION_TEXTURE2D = 4,
			D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
			D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
			D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
			D3D12_RTV_DIMENSION_TEXTURE3D = 8,
		}
		[AllowDuplicates]
		public enum D3D12_DSV_FLAGS : uint32
		{
			D3D12_DSV_FLAG_NONE = 0,
			D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1,
			D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2,
		}
		[AllowDuplicates]
		public enum D3D12_DSV_DIMENSION : int32
		{
			D3D12_DSV_DIMENSION_UNKNOWN = 0,
			D3D12_DSV_DIMENSION_TEXTURE1D = 1,
			D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
			D3D12_DSV_DIMENSION_TEXTURE2D = 3,
			D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
			D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
			D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
		}
		[AllowDuplicates]
		public enum D3D12_CLEAR_FLAGS : uint32
		{
			D3D12_CLEAR_FLAG_DEPTH = 1,
			D3D12_CLEAR_FLAG_STENCIL = 2,
		}
		[AllowDuplicates]
		public enum D3D12_FENCE_FLAGS : uint32
		{
			D3D12_FENCE_FLAG_NONE = 0,
			D3D12_FENCE_FLAG_SHARED = 1,
			D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2,
			D3D12_FENCE_FLAG_NON_MONITORED = 4,
		}
		[AllowDuplicates]
		public enum D3D12_DESCRIPTOR_HEAP_TYPE : int32
		{
			D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
			D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1,
			D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2,
			D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3,
			D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4,
		}
		[AllowDuplicates]
		public enum D3D12_DESCRIPTOR_HEAP_FLAGS : uint32
		{
			D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
			D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1,
		}
		[AllowDuplicates]
		public enum D3D12_DESCRIPTOR_RANGE_TYPE : int32
		{
			D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0,
			D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1,
			D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2,
			D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_VISIBILITY : int32
		{
			D3D12_SHADER_VISIBILITY_ALL = 0,
			D3D12_SHADER_VISIBILITY_VERTEX = 1,
			D3D12_SHADER_VISIBILITY_HULL = 2,
			D3D12_SHADER_VISIBILITY_DOMAIN = 3,
			D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
			D3D12_SHADER_VISIBILITY_PIXEL = 5,
			D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6,
			D3D12_SHADER_VISIBILITY_MESH = 7,
		}
		[AllowDuplicates]
		public enum D3D12_ROOT_PARAMETER_TYPE : int32
		{
			D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
			D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1,
			D3D12_ROOT_PARAMETER_TYPE_CBV = 2,
			D3D12_ROOT_PARAMETER_TYPE_SRV = 3,
			D3D12_ROOT_PARAMETER_TYPE_UAV = 4,
		}
		[AllowDuplicates]
		public enum D3D12_ROOT_SIGNATURE_FLAGS : uint32
		{
			D3D12_ROOT_SIGNATURE_FLAG_NONE = 0,
			D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32,
			D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64,
			D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 256,
			D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 512,
			D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED = 1024,
			D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED = 2048,
		}
		[AllowDuplicates]
		public enum D3D12_STATIC_BORDER_COLOR : int32
		{
			D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
			D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1,
			D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2,
		}
		[AllowDuplicates]
		public enum D3D12_DESCRIPTOR_RANGE_FLAGS : uint32
		{
			D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0,
			D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1,
			D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2,
			D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4,
			D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8,
			D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536,
		}
		[AllowDuplicates]
		public enum D3D12_ROOT_DESCRIPTOR_FLAGS : uint32
		{
			D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0,
			D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2,
			D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4,
			D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8,
		}
		[AllowDuplicates]
		public enum D3D12_QUERY_HEAP_TYPE : int32
		{
			D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
			D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
			D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
			D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3,
			D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4,
			D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5,
			D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 = 7,
		}
		[AllowDuplicates]
		public enum D3D12_QUERY_TYPE : int32
		{
			D3D12_QUERY_TYPE_OCCLUSION = 0,
			D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
			D3D12_QUERY_TYPE_TIMESTAMP = 2,
			D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
			D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
			D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
			D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
			D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7,
			D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8,
			D3D12_QUERY_TYPE_PIPELINE_STATISTICS1 = 10,
		}
		[AllowDuplicates]
		public enum D3D12_PREDICATION_OP : int32
		{
			D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
			D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1,
		}
		[AllowDuplicates]
		public enum D3D12_INDIRECT_ARGUMENT_TYPE : int32
		{
			D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
			D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1,
			D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2,
			D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3,
			D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4,
			D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5,
			D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6,
			D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7,
			D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8,
			D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = 9,
			D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = 10,
		}
		[AllowDuplicates]
		public enum D3D12_WRITEBUFFERIMMEDIATE_MODE : int32
		{
			D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0,
			D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1,
			D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2,
		}
		[AllowDuplicates]
		public enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS : uint32
		{
			D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0,
			D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1,
			D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0,
		}
		[AllowDuplicates]
		public enum D3D12_RESIDENCY_PRIORITY : int32
		{
			D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640,
			D3D12_RESIDENCY_PRIORITY_LOW = 1342177280,
			D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920,
			D3D12_RESIDENCY_PRIORITY_HIGH = -1610547200,
			D3D12_RESIDENCY_PRIORITY_MAXIMUM = -939524096,
		}
		[AllowDuplicates]
		public enum D3D12_RESIDENCY_FLAGS : uint32
		{
			D3D12_RESIDENCY_FLAG_NONE = 0,
			D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1,
		}
		[AllowDuplicates]
		public enum D3D12_COMMAND_LIST_FLAGS : uint32
		{
			D3D12_COMMAND_LIST_FLAG_NONE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_COMMAND_POOL_FLAGS : uint32
		{
			D3D12_COMMAND_POOL_FLAG_NONE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_COMMAND_RECORDER_FLAGS : uint32
		{
			D3D12_COMMAND_RECORDER_FLAG_NONE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_PROTECTED_SESSION_STATUS : int32
		{
			D3D12_PROTECTED_SESSION_STATUS_OK = 0,
			D3D12_PROTECTED_SESSION_STATUS_INVALID = 1,
		}
		[AllowDuplicates]
		public enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS : uint32
		{
			D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0,
			D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1,
		}
		[AllowDuplicates]
		public enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS : uint32
		{
			D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_LIFETIME_STATE : int32
		{
			D3D12_LIFETIME_STATE_IN_USE = 0,
			D3D12_LIFETIME_STATE_NOT_IN_USE = 1,
		}
		[AllowDuplicates]
		public enum D3D12_META_COMMAND_PARAMETER_TYPE : int32
		{
			D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0,
			D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1,
			D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2,
			D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3,
			D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4,
		}
		[AllowDuplicates]
		public enum D3D12_META_COMMAND_PARAMETER_FLAGS : uint32
		{
			D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1,
			D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2,
		}
		[AllowDuplicates]
		public enum D3D12_META_COMMAND_PARAMETER_STAGE : int32
		{
			D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0,
			D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
			D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2,
		}
		[AllowDuplicates]
		public enum D3D12_GRAPHICS_STATES : uint32
		{
			D3D12_GRAPHICS_STATE_NONE = 0,
			D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1,
			D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2,
			D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4,
			D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8,
			D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16,
			D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32,
			D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64,
			D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128,
			D3D12_GRAPHICS_STATE_PREDICATION = 256,
			D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512,
			D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024,
			D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048,
			D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096,
			D3D12_GRAPHICS_STATE_SO_TARGETS = 8192,
			D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384,
			D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768,
			D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536,
		}
		[AllowDuplicates]
		public enum D3D12_STATE_SUBOBJECT_TYPE : int32
		{
			D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0,
			D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1,
			D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2,
			D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3,
			D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5,
			D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6,
			D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7,
			D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8,
			D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9,
			D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10,
			D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11,
			D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12,
			D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 13,
		}
		[AllowDuplicates]
		public enum D3D12_STATE_OBJECT_FLAGS : uint32
		{
			D3D12_STATE_OBJECT_FLAG_NONE = 0,
			D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1,
			D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2,
			D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 4,
		}
		[AllowDuplicates]
		public enum D3D12_EXPORT_FLAGS : uint32
		{
			D3D12_EXPORT_FLAG_NONE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_HIT_GROUP_TYPE : int32
		{
			D3D12_HIT_GROUP_TYPE_TRIANGLES = 0,
			D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_PIPELINE_FLAGS : uint32
		{
			D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0,
			D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 256,
			D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512,
		}
		[AllowDuplicates]
		public enum D3D12_STATE_OBJECT_TYPE : int32
		{
			D3D12_STATE_OBJECT_TYPE_COLLECTION = 0,
			D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_GEOMETRY_FLAGS : uint32
		{
			D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0,
			D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1,
			D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_GEOMETRY_TYPE : int32
		{
			D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0,
			D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_INSTANCE_FLAGS : uint32
		{
			D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0,
			D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1,
			D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2,
			D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4,
			D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS : uint32
		{
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE : int32
		{
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE : int32
		{
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1,
		}
		[AllowDuplicates]
		public enum D3D12_ELEMENTS_LAYOUT : int32
		{
			D3D12_ELEMENTS_LAYOUT_ARRAY = 0,
			D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1,
		}
		[AllowDuplicates]
		public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE : int32
		{
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2,
			D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3,
		}
		[AllowDuplicates]
		public enum D3D12_SERIALIZED_DATA_TYPE : int32
		{
			D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS : int32
		{
			D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
			D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1,
			D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2,
			D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3,
			D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4,
		}
		[AllowDuplicates]
		public enum D3D12_RAY_FLAGS : uint32
		{
			D3D12_RAY_FLAG_NONE = 0,
			D3D12_RAY_FLAG_FORCE_OPAQUE = 1,
			D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2,
			D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4,
			D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8,
			D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16,
			D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32,
			D3D12_RAY_FLAG_CULL_OPAQUE = 64,
			D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128,
			D3D12_RAY_FLAG_SKIP_TRIANGLES = 256,
			D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512,
		}
		[AllowDuplicates]
		public enum D3D12_HIT_KIND : int32
		{
			D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254,
			D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255,
		}
		[AllowDuplicates]
		public enum D3D12_AUTO_BREADCRUMB_OP : int32
		{
			D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0,
			D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1,
			D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2,
			D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3,
			D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4,
			D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5,
			D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6,
			D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7,
			D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8,
			D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9,
			D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10,
			D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11,
			D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12,
			D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13,
			D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14,
			D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15,
			D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16,
			D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17,
			D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18,
			D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19,
			D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20,
			D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21,
			D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22,
			D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23,
			D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24,
			D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25,
			D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26,
			D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27,
			D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28,
			D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29,
			D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30,
			D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31,
			D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32,
			D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33,
			D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34,
			D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35,
			D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36,
			D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37,
			D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38,
			D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39,
			D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40,
			D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41,
			D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42,
			D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME = 43,
			D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA = 44,
		}
		[AllowDuplicates]
		public enum D3D12_DRED_VERSION : int32
		{
			D3D12_DRED_VERSION_1_0 = 1,
			D3D12_DRED_VERSION_1_1 = 2,
			D3D12_DRED_VERSION_1_2 = 3,
			D3D12_DRED_VERSION_1_3 = 4,
		}
		[AllowDuplicates]
		public enum D3D12_DRED_FLAGS : uint32
		{
			D3D12_DRED_FLAG_NONE = 0,
			D3D12_DRED_FLAG_FORCE_ENABLE = 1,
			D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2,
		}
		[AllowDuplicates]
		public enum D3D12_DRED_ENABLEMENT : int32
		{
			D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0,
			D3D12_DRED_ENABLEMENT_FORCED_OFF = 1,
			D3D12_DRED_ENABLEMENT_FORCED_ON = 2,
		}
		[AllowDuplicates]
		public enum D3D12_DRED_ALLOCATION_TYPE : int32
		{
			D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19,
			D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20,
			D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21,
			D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22,
			D3D12_DRED_ALLOCATION_TYPE_FENCE = 23,
			D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24,
			D3D12_DRED_ALLOCATION_TYPE_HEAP = 25,
			D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27,
			D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28,
			D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32,
			D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34,
			D3D12_DRED_ALLOCATION_TYPE_PASS = 35,
			D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36,
			D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37,
			D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39,
			D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40,
			D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41,
			D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42,
			D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43,
			D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER = 48,
			D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP = 49,
			D3D12_DRED_ALLOCATION_TYPE_INVALID = -1,
		}
		[AllowDuplicates]
		public enum D3D12_DRED_PAGE_FAULT_FLAGS : uint32
		{
			D3D12_DRED_PAGE_FAULT_FLAGS_NONE = 0,
		}
		[AllowDuplicates]
		public enum D3D12_DRED_DEVICE_STATE : int32
		{
			D3D12_DRED_DEVICE_STATE_UNKNOWN = 0,
			D3D12_DRED_DEVICE_STATE_HUNG = 3,
			D3D12_DRED_DEVICE_STATE_FAULT = 6,
			D3D12_DRED_DEVICE_STATE_PAGEFAULT = 7,
		}
		[AllowDuplicates]
		public enum D3D12_BACKGROUND_PROCESSING_MODE : int32
		{
			D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0,
			D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = 1,
			D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = 2,
			D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = 3,
		}
		[AllowDuplicates]
		public enum D3D12_MEASUREMENTS_ACTION : int32
		{
			D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0,
			D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = 1,
			D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = 2,
			D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = 3,
		}
		[AllowDuplicates]
		public enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE : int32
		{
			D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0,
			D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1,
			D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2,
			D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3,
		}
		[AllowDuplicates]
		public enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE : int32
		{
			D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0,
			D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1,
			D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2,
			D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3,
		}
		[AllowDuplicates]
		public enum D3D12_RENDER_PASS_FLAGS : uint32
		{
			D3D12_RENDER_PASS_FLAG_NONE = 0,
			D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1,
			D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2,
			D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_CACHE_MODE : int32
		{
			D3D12_SHADER_CACHE_MODE_MEMORY = 0,
			D3D12_SHADER_CACHE_MODE_DISK = 1,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_CACHE_FLAGS : uint32
		{
			D3D12_SHADER_CACHE_FLAG_NONE = 0,
			D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED = 1,
			D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR = 2,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_CACHE_KIND_FLAGS : uint32
		{
			D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER = 1,
			D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS = 2,
			D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED = 4,
			D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED = 8,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_CACHE_CONTROL_FLAGS : uint32
		{
			D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE = 1,
			D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE = 2,
			D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR = 4,
		}
		[AllowDuplicates]
		public enum D3D12_GPU_BASED_VALIDATION_FLAGS : int32
		{
			D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0,
			D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 1,
		}
		[AllowDuplicates]
		public enum D3D12_RLDO_FLAGS : int32
		{
			D3D12_RLDO_NONE = 0,
			D3D12_RLDO_SUMMARY = 1,
			D3D12_RLDO_DETAIL = 2,
			D3D12_RLDO_IGNORE_INTERNAL = 4,
		}
		[AllowDuplicates]
		public enum D3D12_DEBUG_DEVICE_PARAMETER_TYPE : int32
		{
			D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0,
			D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1,
			D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2,
		}
		[AllowDuplicates]
		public enum D3D12_DEBUG_FEATURE : int32
		{
			D3D12_DEBUG_FEATURE_NONE = 0,
			D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 1,
			D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 2,
			D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 4,
			D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 8,
		}
		[AllowDuplicates]
		public enum D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE : int32
		{
			D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0,
			D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = 1,
			D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = 2,
			D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = 3,
			NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4,
		}
		[AllowDuplicates]
		public enum D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS : int32
		{
			D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0,
			D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 1,
			D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 2,
			D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 4,
			D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 7,
		}
		[AllowDuplicates]
		public enum D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE : int32
		{
			D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0,
		}
		[AllowDuplicates]
		public enum D3D12_MESSAGE_CATEGORY : int32
		{
			D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
			D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = 1,
			D3D12_MESSAGE_CATEGORY_INITIALIZATION = 2,
			D3D12_MESSAGE_CATEGORY_CLEANUP = 3,
			D3D12_MESSAGE_CATEGORY_COMPILATION = 4,
			D3D12_MESSAGE_CATEGORY_STATE_CREATION = 5,
			D3D12_MESSAGE_CATEGORY_STATE_SETTING = 6,
			D3D12_MESSAGE_CATEGORY_STATE_GETTING = 7,
			D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
			D3D12_MESSAGE_CATEGORY_EXECUTION = 9,
			D3D12_MESSAGE_CATEGORY_SHADER = 10,
		}
		[AllowDuplicates]
		public enum D3D12_MESSAGE_SEVERITY : int32
		{
			D3D12_MESSAGE_SEVERITY_CORRUPTION = 0,
			D3D12_MESSAGE_SEVERITY_ERROR = 1,
			D3D12_MESSAGE_SEVERITY_WARNING = 2,
			D3D12_MESSAGE_SEVERITY_INFO = 3,
			D3D12_MESSAGE_SEVERITY_MESSAGE = 4,
		}
		[AllowDuplicates]
		public enum D3D12_MESSAGE_ID : int32
		{
			D3D12_MESSAGE_ID_UNKNOWN = 0,
			D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1,
			D3D12_MESSAGE_ID_CORRUPTED_THIS = 2,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16,
			D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17,
			D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18,
			D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19,
			D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20,
			D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21,
			D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24,
			D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31,
			D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41,
			D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65,
			D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66,
			D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67,
			D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91,
			D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92,
			D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93,
			D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94,
			D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95,
			D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96,
			D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97,
			D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117,
			D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222,
			D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232,
			D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233,
			D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245,
			D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253,
			D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255,
			D3D12_MESSAGE_ID_LIVE_DEVICE = 274,
			D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276,
			D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280,
			D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286,
			D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287,
			D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289,
			D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290,
			D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291,
			D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292,
			D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294,
			D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295,
			D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296,
			D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297,
			D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310,
			D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318,
			D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321,
			D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322,
			D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323,
			D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331,
			D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332,
			D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333,
			D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334,
			D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335,
			D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336,
			D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346,
			D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354,
			D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403,
			D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410,
			D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412,
			D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414,
			D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416,
			D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418,
			D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420,
			D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422,
			D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425,
			D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426,
			D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427,
			D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428,
			D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429,
			D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430,
			D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431,
			D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447,
			D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448,
			D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493,
			D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494,
			D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506,
			D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537,
			D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538,
			D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540,
			D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541,
			D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542,
			D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543,
			D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544,
			D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546,
			D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547,
			D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549,
			D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552,
			D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553,
			D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554,
			D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557,
			D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558,
			D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559,
			D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560,
			D3D12_MESSAGE_ID_CREATE_RESOURCE = 562,
			D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563,
			D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564,
			D3D12_MESSAGE_ID_CREATE_LIBRARY = 565,
			D3D12_MESSAGE_ID_CREATE_HEAP = 566,
			D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567,
			D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568,
			D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569,
			D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570,
			D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571,
			D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572,
			D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573,
			D3D12_MESSAGE_ID_LIVE_RESOURCE = 575,
			D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576,
			D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577,
			D3D12_MESSAGE_ID_LIVE_LIBRARY = 578,
			D3D12_MESSAGE_ID_LIVE_HEAP = 579,
			D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580,
			D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581,
			D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582,
			D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583,
			D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584,
			D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585,
			D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586,
			D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588,
			D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589,
			D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590,
			D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591,
			D3D12_MESSAGE_ID_DESTROY_HEAP = 592,
			D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593,
			D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594,
			D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602,
			D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604,
			D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607,
			D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608,
			D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609,
			D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610,
			D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611,
			D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613,
			D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614,
			D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615,
			D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616,
			D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622,
			D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623,
			D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624,
			D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625,
			D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626,
			D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627,
			D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628,
			D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629,
			D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630,
			D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631,
			D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632,
			D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642,
			D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643,
			D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644,
			D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645,
			D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646,
			D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647,
			D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649,
			D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650,
			D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652,
			D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653,
			D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691,
			D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692,
			D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693,
			D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694,
			D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695,
			D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696,
			D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697,
			D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698,
			D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700,
			D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701,
			D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702,
			D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703,
			D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705,
			D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708,
			D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709,
			D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710,
			D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711,
			D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712,
			D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713,
			D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715,
			D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717,
			D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718,
			D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724,
			D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725,
			D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726,
			D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727,
			D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728,
			D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729,
			D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731,
			D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732,
			D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733,
			D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734,
			D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735,
			D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738,
			D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739,
			D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740,
			D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739,
			D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741,
			D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742,
			D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743,
			D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744,
			D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815,
			D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816,
			D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817,
			D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818,
			D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820,
			D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821,
			D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822,
			D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823,
			D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824,
			D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825,
			D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826,
			D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827,
			D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828,
			D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829,
			D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832,
			D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833,
			D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834,
			D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835,
			D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836,
			D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837,
			D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880,
			D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881,
			D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882,
			D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888,
			D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889,
			D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890,
			D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891,
			D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892,
			D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893,
			D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894,
			D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895,
			D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896,
			D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897,
			D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898,
			D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899,
			D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900,
			D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901,
			D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902,
			D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903,
			D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904,
			D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905,
			D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906,
			D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907,
			D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908,
			D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909,
			D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910,
			D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911,
			D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912,
			D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913,
			D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914,
			D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915,
			D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916,
			D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917,
			D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918,
			D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919,
			D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920,
			D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922,
			D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923,
			D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925,
			D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926,
			D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927,
			D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929,
			D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930,
			D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931,
			D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932,
			D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942,
			D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943,
			D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944,
			D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945,
			D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950,
			D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951,
			D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952,
			D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954,
			D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958,
			D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959,
			D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961,
			D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962,
			D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963,
			D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964,
			D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965,
			D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966,
			D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967,
			D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968,
			D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969,
			D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970,
			D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971,
			D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972,
			D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974,
			D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975,
			D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976,
			D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977,
			D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978,
			D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979,
			D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980,
			D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981,
			D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982,
			D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983,
			D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984,
			D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985,
			D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986,
			D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987,
			D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988,
			D3D12_MESSAGE_ID_DEPRECATED_API = 989,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990,
			D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991,
			D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992,
			D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993,
			D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994,
			D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995,
			D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996,
			D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997,
			D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998,
			D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000,
			D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001,
			D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002,
			D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003,
			D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006,
			D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007,
			D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008,
			D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009,
			D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013,
			D3D12_MESSAGE_ID_BEGIN_EVENT = 1014,
			D3D12_MESSAGE_ID_END_EVENT = 1015,
			D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016,
			D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022,
			D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023,
			D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024,
			D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040,
			D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041,
			D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042,
			D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043,
			D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044,
			D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046,
			D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047,
			D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048,
			D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050,
			D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051,
			D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052,
			D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053,
			D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054,
			D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055,
			D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056,
			D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057,
			D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058,
			D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059,
			D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060,
			D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061,
			D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062,
			D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063,
			D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064,
			D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065,
			D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066,
			D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067,
			D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068,
			D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069,
			D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070,
			D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071,
			D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072,
			D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073,
			D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074,
			D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075,
			D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076,
			D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077,
			D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078,
			D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079,
			D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080,
			D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081,
			D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082,
			D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083,
			D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084,
			D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085,
			D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086,
			D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087,
			D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088,
			D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089,
			D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090,
			D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091,
			D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092,
			D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093,
			D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094,
			D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095,
			D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097,
			D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098,
			D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099,
			D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100,
			D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101,
			D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105,
			D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106,
			D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107,
			D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108,
			D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109,
			D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110,
			D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111,
			D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112,
			D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113,
			D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114,
			D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115,
			D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116,
			D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117,
			D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118,
			D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119,
			D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120,
			D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121,
			D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122,
			D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123,
			D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124,
			D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125,
			D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126,
			D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127,
			D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128,
			D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129,
			D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130,
			D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131,
			D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132,
			D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133,
			D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134,
			D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135,
			D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136,
			D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137,
			D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138,
			D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140,
			D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142,
			D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151,
			D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152,
			D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153,
			D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154,
			D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155,
			D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156,
			D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157,
			D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158,
			D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159,
			D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160,
			D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161,
			D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162,
			D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163,
			D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164,
			D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165,
			D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166,
			D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167,
			D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168,
			D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169,
			D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170,
			D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171,
			D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172,
			D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173,
			D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174,
			D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175,
			D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176,
			D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177,
			D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178,
			D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179,
			D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180,
			D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181,
			D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182,
			D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183,
			D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184,
			D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185,
			D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186,
			D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187,
			D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188,
			D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189,
			D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190,
			D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191,
			D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192,
			D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193,
			D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194,
			D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195,
			D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196,
			D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197,
			D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198,
			D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199,
			D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200,
			D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201,
			D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202,
			D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203,
			D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204,
			D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205,
			D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206,
			D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207,
			D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208,
			D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209,
			D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210,
			D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211,
			D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212,
			D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213,
			D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214,
			D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215,
			D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216,
			D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217,
			D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218,
			D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219,
			D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220,
			D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221,
			D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222,
			D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223,
			D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224,
			D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225,
			D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226,
			D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227,
			D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228,
			D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229,
			D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230,
			D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231,
			D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232,
			D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233,
			D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234,
			D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235,
			D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236,
			D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237,
			D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238,
			D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239,
			D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240,
			D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241,
			D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242,
			D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245,
			D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246,
			D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248,
			D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251,
			D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252,
			D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253,
			D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254,
			D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264,
			D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265,
			D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266,
			D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269,
			D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270,
			D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271,
			D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272,
			D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273,
			D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274,
			D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275,
			D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276,
			D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277,
			D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278,
			D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279,
			D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION = 1280,
			D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION = 1281,
			D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION = 1282,
			D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS = 1283,
			D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED = 1284,
			D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN = 1285,
			D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE = 1286,
			D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS = 1287,
			D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET = 1288,
			D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG = 1289,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT = 1290,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION = 1291,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL = 1292,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND = 1293,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT = 1294,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED = 1295,
			D3D12_MESSAGE_ID_OVERSIZED_DISPATCH = 1296,
			D3D12_MESSAGE_ID_CREATE_VIDEOENCODER = 1297,
			D3D12_MESSAGE_ID_LIVE_VIDEOENCODER = 1298,
			D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER = 1299,
			D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP = 1300,
			D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP = 1301,
			D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP = 1302,
			D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1303,
			D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1304,
			D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS = 1305,
			D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS = 1306,
			D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS = 1307,
			D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS = 1308,
			D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS = 1309,
			D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS = 1310,
			D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS = 1311,
			D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS = 1312,
			D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR = 1313,
			D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE = 1314,
			D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE = 1315,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING = 1316,
			D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING = 1317,
			D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING = 1318,
			D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE = 1319,
			D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS = 1320,
			D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH = 1321,
			D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH = 1322,
			D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH = 1323,
			D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY = 1324,
			D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY = 1325,
			D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED = 1326,
			D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED = 1327,
			D3D12_MESSAGE_ID_D3D12_MESSAGES_END = 1328,
		}
		[AllowDuplicates]
		public enum D3D12_MESSAGE_CALLBACK_FLAGS : int32
		{
			D3D12_MESSAGE_CALLBACK_FLAG_NONE = 0,
			D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS = 1,
		}
		[AllowDuplicates]
		public enum D3D12_AXIS_SHADING_RATE : int32
		{
			D3D12_AXIS_SHADING_RATE_1X = 0,
			D3D12_AXIS_SHADING_RATE_2X = 1,
			D3D12_AXIS_SHADING_RATE_4X = 2,
		}
		[AllowDuplicates]
		public enum D3D12_SHADING_RATE : int32
		{
			D3D12_SHADING_RATE_1X1 = 0,
			D3D12_SHADING_RATE_1X2 = 1,
			D3D12_SHADING_RATE_2X1 = 4,
			D3D12_SHADING_RATE_2X2 = 5,
			D3D12_SHADING_RATE_2X4 = 6,
			D3D12_SHADING_RATE_4X2 = 9,
			D3D12_SHADING_RATE_4X4 = 10,
		}
		[AllowDuplicates]
		public enum D3D12_SHADING_RATE_COMBINER : int32
		{
			D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0,
			D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1,
			D3D12_SHADING_RATE_COMBINER_MIN = 2,
			D3D12_SHADING_RATE_COMBINER_MAX = 3,
			D3D12_SHADING_RATE_COMBINER_SUM = 4,
		}
		[AllowDuplicates]
		public enum D3D12_SHADER_VERSION_TYPE : int32
		{
			D3D12_SHVER_PIXEL_SHADER = 0,
			D3D12_SHVER_VERTEX_SHADER = 1,
			D3D12_SHVER_GEOMETRY_SHADER = 2,
			D3D12_SHVER_HULL_SHADER = 3,
			D3D12_SHVER_DOMAIN_SHADER = 4,
			D3D12_SHVER_COMPUTE_SHADER = 5,
			D3D12_SHVER_RESERVED0 = 65520,
		}
		
		// --- Function Pointers ---
		
		public function HRESULT PFN_D3D12_SERIALIZE_ROOT_SIGNATURE(D3D12_ROOT_SIGNATURE_DESC* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob** ppBlob, ID3DBlob** ppErrorBlob);
		public function HRESULT PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER(void* pSrcData, uint SrcDataSizeInBytes, Guid* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
		public function HRESULT PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE(D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignature, ID3DBlob** ppBlob, ID3DBlob** ppErrorBlob);
		public function HRESULT PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER(void* pSrcData, uint SrcDataSizeInBytes, Guid* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
		public function void D3D12MessageFunc(D3D12_MESSAGE_CATEGORY Category, D3D12_MESSAGE_SEVERITY Severity, D3D12_MESSAGE_ID ID, PSTR pDescription, void* pContext);
		public function HRESULT PFN_D3D12_CREATE_DEVICE(IUnknown* param0, D3D_FEATURE_LEVEL param1, Guid* param2, void** param3);
		public function HRESULT PFN_D3D12_GET_DEBUG_INTERFACE(Guid* param0, void** param1);
		public function HRESULT PFN_D3D12_GET_INTERFACE(Guid* param0, Guid* param1, void** param2);
		
		// --- Structs ---
		
		[CRepr]
		public struct D3D12_COMMAND_QUEUE_DESC
		{
			public D3D12_COMMAND_LIST_TYPE Type;
			public int32 Priority;
			public D3D12_COMMAND_QUEUE_FLAGS Flags;
			public uint32 NodeMask;
		}
		[CRepr]
		public struct D3D12_INPUT_ELEMENT_DESC
		{
			public PSTR SemanticName;
			public uint32 SemanticIndex;
			public DXGI_FORMAT Format;
			public uint32 InputSlot;
			public uint32 AlignedByteOffset;
			public D3D12_INPUT_CLASSIFICATION InputSlotClass;
			public uint32 InstanceDataStepRate;
		}
		[CRepr]
		public struct D3D12_SO_DECLARATION_ENTRY
		{
			public uint32 Stream;
			public PSTR SemanticName;
			public uint32 SemanticIndex;
			public uint8 StartComponent;
			public uint8 ComponentCount;
			public uint8 OutputSlot;
		}
		[CRepr]
		public struct D3D12_VIEWPORT
		{
			public float TopLeftX;
			public float TopLeftY;
			public float Width;
			public float Height;
			public float MinDepth;
			public float MaxDepth;
		}
		[CRepr]
		public struct D3D12_BOX
		{
			public uint32 left;
			public uint32 top;
			public uint32 front;
			public uint32 right;
			public uint32 bottom;
			public uint32 back;
		}
		[CRepr]
		public struct D3D12_DEPTH_STENCILOP_DESC
		{
			public D3D12_STENCIL_OP StencilFailOp;
			public D3D12_STENCIL_OP StencilDepthFailOp;
			public D3D12_STENCIL_OP StencilPassOp;
			public D3D12_COMPARISON_FUNC StencilFunc;
		}
		[CRepr]
		public struct D3D12_DEPTH_STENCIL_DESC
		{
			public BOOL DepthEnable;
			public D3D12_DEPTH_WRITE_MASK DepthWriteMask;
			public D3D12_COMPARISON_FUNC DepthFunc;
			public BOOL StencilEnable;
			public uint8 StencilReadMask;
			public uint8 StencilWriteMask;
			public D3D12_DEPTH_STENCILOP_DESC FrontFace;
			public D3D12_DEPTH_STENCILOP_DESC BackFace;
		}
		[CRepr]
		public struct D3D12_DEPTH_STENCIL_DESC1
		{
			public BOOL DepthEnable;
			public D3D12_DEPTH_WRITE_MASK DepthWriteMask;
			public D3D12_COMPARISON_FUNC DepthFunc;
			public BOOL StencilEnable;
			public uint8 StencilReadMask;
			public uint8 StencilWriteMask;
			public D3D12_DEPTH_STENCILOP_DESC FrontFace;
			public D3D12_DEPTH_STENCILOP_DESC BackFace;
			public BOOL DepthBoundsTestEnable;
		}
		[CRepr]
		public struct D3D12_RENDER_TARGET_BLEND_DESC
		{
			public BOOL BlendEnable;
			public BOOL LogicOpEnable;
			public D3D12_BLEND SrcBlend;
			public D3D12_BLEND DestBlend;
			public D3D12_BLEND_OP BlendOp;
			public D3D12_BLEND SrcBlendAlpha;
			public D3D12_BLEND DestBlendAlpha;
			public D3D12_BLEND_OP BlendOpAlpha;
			public D3D12_LOGIC_OP LogicOp;
			public uint8 RenderTargetWriteMask;
		}
		[CRepr]
		public struct D3D12_BLEND_DESC
		{
			public BOOL AlphaToCoverageEnable;
			public BOOL IndependentBlendEnable;
			public D3D12_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
		}
		[CRepr]
		public struct D3D12_RASTERIZER_DESC
		{
			public D3D12_FILL_MODE FillMode;
			public D3D12_CULL_MODE CullMode;
			public BOOL FrontCounterClockwise;
			public int32 DepthBias;
			public float DepthBiasClamp;
			public float SlopeScaledDepthBias;
			public BOOL DepthClipEnable;
			public BOOL MultisampleEnable;
			public BOOL AntialiasedLineEnable;
			public uint32 ForcedSampleCount;
			public D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
		}
		[CRepr]
		public struct D3D12_SHADER_BYTECODE
		{
			public void* pShaderBytecode;
			public uint BytecodeLength;
		}
		[CRepr]
		public struct D3D12_STREAM_OUTPUT_DESC
		{
			public D3D12_SO_DECLARATION_ENTRY* pSODeclaration;
			public uint32 NumEntries;
			public uint32* pBufferStrides;
			public uint32 NumStrides;
			public uint32 RasterizedStream;
		}
		[CRepr]
		public struct D3D12_INPUT_LAYOUT_DESC
		{
			public D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;
			public uint32 NumElements;
		}
		[CRepr]
		public struct D3D12_CACHED_PIPELINE_STATE
		{
			public void* pCachedBlob;
			public uint CachedBlobSizeInBytes;
		}
		[CRepr]
		public struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
		{
			public ID3D12RootSignature* pRootSignature;
			public D3D12_SHADER_BYTECODE VS;
			public D3D12_SHADER_BYTECODE PS;
			public D3D12_SHADER_BYTECODE DS;
			public D3D12_SHADER_BYTECODE HS;
			public D3D12_SHADER_BYTECODE GS;
			public D3D12_STREAM_OUTPUT_DESC StreamOutput;
			public D3D12_BLEND_DESC BlendState;
			public uint32 SampleMask;
			public D3D12_RASTERIZER_DESC RasterizerState;
			public D3D12_DEPTH_STENCIL_DESC DepthStencilState;
			public D3D12_INPUT_LAYOUT_DESC InputLayout;
			public D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
			public D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
			public uint32 NumRenderTargets;
			public DXGI_FORMAT[8] RTVFormats;
			public DXGI_FORMAT DSVFormat;
			public DXGI_SAMPLE_DESC SampleDesc;
			public uint32 NodeMask;
			public D3D12_CACHED_PIPELINE_STATE CachedPSO;
			public D3D12_PIPELINE_STATE_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_COMPUTE_PIPELINE_STATE_DESC
		{
			public ID3D12RootSignature* pRootSignature;
			public D3D12_SHADER_BYTECODE CS;
			public uint32 NodeMask;
			public D3D12_CACHED_PIPELINE_STATE CachedPSO;
			public D3D12_PIPELINE_STATE_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_RT_FORMAT_ARRAY
		{
			public DXGI_FORMAT[8] RTFormats;
			public uint32 NumRenderTargets;
		}
		[CRepr]
		public struct D3D12_PIPELINE_STATE_STREAM_DESC
		{
			public uint SizeInBytes;
			public void* pPipelineStateSubobjectStream;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS
		{
			public BOOL DoublePrecisionFloatShaderOps;
			public BOOL OutputMergerLogicOp;
			public D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
			public D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
			public D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
			public BOOL PSSpecifiedStencilRefSupported;
			public BOOL TypedUAVLoadAdditionalFormats;
			public BOOL ROVsSupported;
			public D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
			public uint32 MaxGPUVirtualAddressBitsPerResource;
			public BOOL StandardSwizzle64KBSupported;
			public D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
			public BOOL CrossAdapterRowMajorTextureSupported;
			public BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
			public D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
		{
			public BOOL WaveOps;
			public uint32 WaveLaneCountMin;
			public uint32 WaveLaneCountMax;
			public uint32 TotalLaneCount;
			public BOOL ExpandedComputeResourceStates;
			public BOOL Int64ShaderOps;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
		{
			public BOOL DepthBoundsTestSupported;
			public D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
		{
			public D3D_ROOT_SIGNATURE_VERSION HighestVersion;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_ARCHITECTURE
		{
			public uint32 NodeIndex;
			public BOOL TileBasedRenderer;
			public BOOL UMA;
			public BOOL CacheCoherentUMA;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_ARCHITECTURE1
		{
			public uint32 NodeIndex;
			public BOOL TileBasedRenderer;
			public BOOL UMA;
			public BOOL CacheCoherentUMA;
			public BOOL IsolatedMMU;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_FEATURE_LEVELS
		{
			public uint32 NumFeatureLevels;
			public D3D_FEATURE_LEVEL* pFeatureLevelsRequested;
			public D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_SHADER_MODEL
		{
			public D3D_SHADER_MODEL HighestShaderModel;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
		{
			public DXGI_FORMAT Format;
			public D3D12_FORMAT_SUPPORT1 Support1;
			public D3D12_FORMAT_SUPPORT2 Support2;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
		{
			public DXGI_FORMAT Format;
			public uint32 SampleCount;
			public D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
			public uint32 NumQualityLevels;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_FORMAT_INFO
		{
			public DXGI_FORMAT Format;
			public uint8 PlaneCount;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
		{
			public uint32 MaxGPUVirtualAddressBitsPerResource;
			public uint32 MaxGPUVirtualAddressBitsPerProcess;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_SHADER_CACHE
		{
			public D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
		{
			public D3D12_COMMAND_LIST_TYPE CommandListType;
			public uint32 Priority;
			public BOOL PriorityForTypeIsSupported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
		{
			public BOOL CopyQueueTimestampQueriesSupported;
			public BOOL CastingFullyTypedFormatSupported;
			public D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
			public D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
			public BOOL BarycentricsSupported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_EXISTING_HEAPS
		{
			public BOOL Supported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_DISPLAYABLE
		{
			public BOOL DisplayableTexture;
			public D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
		{
			public BOOL MSAA64KBAlignedTextureSupported;
			public D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
			public BOOL Native16BitShaderOpsSupported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_SERIALIZATION
		{
			public uint32 NodeIndex;
			public D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_CROSS_NODE
		{
			public D3D12_CROSS_NODE_SHARING_TIER SharingTier;
			public BOOL AtomicShaderInstructions;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
		{
			public BOOL SRVOnlyTiledResourceTier3;
			public D3D12_RENDER_PASS_TIER RenderPassesTier;
			public D3D12_RAYTRACING_TIER RaytracingTier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
		{
			public BOOL AdditionalShadingRatesSupported;
			public BOOL PerPrimitiveShadingRateSupportedWithViewportIndexing;
			public D3D12_VARIABLE_SHADING_RATE_TIER VariableShadingRateTier;
			public uint32 ShadingRateImageTileSize;
			public BOOL BackgroundProcessingSupported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS7
		{
			public D3D12_MESH_SHADER_TIER MeshShaderTier;
			public D3D12_SAMPLER_FEEDBACK_TIER SamplerFeedbackTier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
		{
			public Guid CommandId;
			public uint32 NodeMask;
			public void* pQueryInputData;
			public uint QueryInputDataSizeInBytes;
			public void* pQueryOutputData;
			public uint QueryOutputDataSizeInBytes;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS8
		{
			public BOOL UnalignedBlockTexturesSupported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS9
		{
			public BOOL MeshShaderPipelineStatsSupported;
			public BOOL MeshShaderSupportsFullRangeRenderTargetArrayIndex;
			public BOOL AtomicInt64OnTypedResourceSupported;
			public BOOL AtomicInt64OnGroupSharedSupported;
			public BOOL DerivativesInMeshAndAmplificationShadersSupported;
			public D3D12_WAVE_MMA_TIER WaveMMATier;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS10
		{
			public BOOL VariableRateShadingSumCombinerSupported;
			public BOOL MeshShaderPerPrimitiveShadingRateSupported;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_D3D12_OPTIONS11
		{
			public BOOL AtomicInt64OnDescriptorHeapResourceSupported;
		}
		[CRepr]
		public struct D3D12_RESOURCE_ALLOCATION_INFO
		{
			public uint64 SizeInBytes;
			public uint64 Alignment;
		}
		[CRepr]
		public struct D3D12_RESOURCE_ALLOCATION_INFO1
		{
			public uint64 Offset;
			public uint64 Alignment;
			public uint64 SizeInBytes;
		}
		[CRepr]
		public struct D3D12_HEAP_PROPERTIES
		{
			public D3D12_HEAP_TYPE Type;
			public D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
			public D3D12_MEMORY_POOL MemoryPoolPreference;
			public uint32 CreationNodeMask;
			public uint32 VisibleNodeMask;
		}
		[CRepr]
		public struct D3D12_HEAP_DESC
		{
			public uint64 SizeInBytes;
			public D3D12_HEAP_PROPERTIES Properties;
			public uint64 Alignment;
			public D3D12_HEAP_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_MIP_REGION
		{
			public uint32 Width;
			public uint32 Height;
			public uint32 Depth;
		}
		[CRepr]
		public struct D3D12_RESOURCE_DESC
		{
			public D3D12_RESOURCE_DIMENSION Dimension;
			public uint64 Alignment;
			public uint64 Width;
			public uint32 Height;
			public uint16 DepthOrArraySize;
			public uint16 MipLevels;
			public DXGI_FORMAT Format;
			public DXGI_SAMPLE_DESC SampleDesc;
			public D3D12_TEXTURE_LAYOUT Layout;
			public D3D12_RESOURCE_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_RESOURCE_DESC1
		{
			public D3D12_RESOURCE_DIMENSION Dimension;
			public uint64 Alignment;
			public uint64 Width;
			public uint32 Height;
			public uint16 DepthOrArraySize;
			public uint16 MipLevels;
			public DXGI_FORMAT Format;
			public DXGI_SAMPLE_DESC SampleDesc;
			public D3D12_TEXTURE_LAYOUT Layout;
			public D3D12_RESOURCE_FLAGS Flags;
			public D3D12_MIP_REGION SamplerFeedbackMipRegion;
		}
		[CRepr]
		public struct D3D12_DEPTH_STENCIL_VALUE
		{
			public float Depth;
			public uint8 Stencil;
		}
		[CRepr]
		public struct D3D12_CLEAR_VALUE
		{
			public DXGI_FORMAT Format;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public float[4] Color;
				public D3D12_DEPTH_STENCIL_VALUE DepthStencil;
			}
		}
		[CRepr]
		public struct D3D12_RANGE
		{
			public uint Begin;
			public uint End;
		}
		[CRepr]
		public struct D3D12_RANGE_UINT64
		{
			public uint64 Begin;
			public uint64 End;
		}
		[CRepr]
		public struct D3D12_SUBRESOURCE_RANGE_UINT64
		{
			public uint32 Subresource;
			public D3D12_RANGE_UINT64 Range;
		}
		[CRepr]
		public struct D3D12_SUBRESOURCE_INFO
		{
			public uint64 Offset;
			public uint32 RowPitch;
			public uint32 DepthPitch;
		}
		[CRepr]
		public struct D3D12_TILED_RESOURCE_COORDINATE
		{
			public uint32 X;
			public uint32 Y;
			public uint32 Z;
			public uint32 Subresource;
		}
		[CRepr]
		public struct D3D12_TILE_REGION_SIZE
		{
			public uint32 NumTiles;
			public BOOL UseBox;
			public uint32 Width;
			public uint16 Height;
			public uint16 Depth;
		}
		[CRepr]
		public struct D3D12_SUBRESOURCE_TILING
		{
			public uint32 WidthInTiles;
			public uint16 HeightInTiles;
			public uint16 DepthInTiles;
			public uint32 StartTileIndexInOverallResource;
		}
		[CRepr]
		public struct D3D12_TILE_SHAPE
		{
			public uint32 WidthInTexels;
			public uint32 HeightInTexels;
			public uint32 DepthInTexels;
		}
		[CRepr]
		public struct D3D12_PACKED_MIP_INFO
		{
			public uint8 NumStandardMips;
			public uint8 NumPackedMips;
			public uint32 NumTilesForPackedMips;
			public uint32 StartTileIndexInOverallResource;
		}
		[CRepr]
		public struct D3D12_RESOURCE_TRANSITION_BARRIER
		{
			public ID3D12Resource* pResource;
			public uint32 Subresource;
			public D3D12_RESOURCE_STATES StateBefore;
			public D3D12_RESOURCE_STATES StateAfter;
		}
		[CRepr]
		public struct D3D12_RESOURCE_ALIASING_BARRIER
		{
			public ID3D12Resource* pResourceBefore;
			public ID3D12Resource* pResourceAfter;
		}
		[CRepr]
		public struct D3D12_RESOURCE_UAV_BARRIER
		{
			public ID3D12Resource* pResource;
		}
		[CRepr]
		public struct D3D12_RESOURCE_BARRIER
		{
			public D3D12_RESOURCE_BARRIER_TYPE Type;
			public D3D12_RESOURCE_BARRIER_FLAGS Flags;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_RESOURCE_TRANSITION_BARRIER Transition;
				public D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
				public D3D12_RESOURCE_UAV_BARRIER UAV;
			}
		}
		[CRepr]
		public struct D3D12_SUBRESOURCE_FOOTPRINT
		{
			public DXGI_FORMAT Format;
			public uint32 Width;
			public uint32 Height;
			public uint32 Depth;
			public uint32 RowPitch;
		}
		[CRepr]
		public struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
		{
			public uint64 Offset;
			public D3D12_SUBRESOURCE_FOOTPRINT Footprint;
		}
		[CRepr]
		public struct D3D12_TEXTURE_COPY_LOCATION
		{
			public ID3D12Resource* pResource;
			public D3D12_TEXTURE_COPY_TYPE Type;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
				public uint32 SubresourceIndex;
			}
		}
		[CRepr]
		public struct D3D12_SAMPLE_POSITION
		{
			public int8 X;
			public int8 Y;
		}
		[CRepr]
		public struct D3D12_VIEW_INSTANCE_LOCATION
		{
			public uint32 ViewportArrayIndex;
			public uint32 RenderTargetArrayIndex;
		}
		[CRepr]
		public struct D3D12_VIEW_INSTANCING_DESC
		{
			public uint32 ViewInstanceCount;
			public D3D12_VIEW_INSTANCE_LOCATION* pViewInstanceLocations;
			public D3D12_VIEW_INSTANCING_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_BUFFER_SRV
		{
			public uint64 FirstElement;
			public uint32 NumElements;
			public uint32 StructureByteStride;
			public D3D12_BUFFER_SRV_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_TEX1D_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEX1D_ARRAY_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEX2D_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public uint32 PlaneSlice;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEX2D_ARRAY_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
			public uint32 PlaneSlice;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEX3D_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEXCUBE_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEXCUBE_ARRAY_SRV
		{
			public uint32 MostDetailedMip;
			public uint32 MipLevels;
			public uint32 First2DArrayFace;
			public uint32 NumCubes;
			public float ResourceMinLODClamp;
		}
		[CRepr]
		public struct D3D12_TEX2DMS_SRV
		{
			public uint32 UnusedField_NothingToDefine;
		}
		[CRepr]
		public struct D3D12_TEX2DMS_ARRAY_SRV
		{
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
		{
			public uint64 Location;
		}
		[CRepr]
		public struct D3D12_SHADER_RESOURCE_VIEW_DESC
		{
			public DXGI_FORMAT Format;
			public D3D12_SRV_DIMENSION ViewDimension;
			public uint32 Shader4ComponentMapping;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_BUFFER_SRV Buffer;
				public D3D12_TEX1D_SRV Texture1D;
				public D3D12_TEX1D_ARRAY_SRV Texture1DArray;
				public D3D12_TEX2D_SRV Texture2D;
				public D3D12_TEX2D_ARRAY_SRV Texture2DArray;
				public D3D12_TEX2DMS_SRV Texture2DMS;
				public D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
				public D3D12_TEX3D_SRV Texture3D;
				public D3D12_TEXCUBE_SRV TextureCube;
				public D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
				public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV RaytracingAccelerationStructure;
			}
		}
		[CRepr]
		public struct D3D12_CONSTANT_BUFFER_VIEW_DESC
		{
			public uint64 BufferLocation;
			public uint32 SizeInBytes;
		}
		[CRepr]
		public struct D3D12_SAMPLER_DESC
		{
			public D3D12_FILTER Filter;
			public D3D12_TEXTURE_ADDRESS_MODE AddressU;
			public D3D12_TEXTURE_ADDRESS_MODE AddressV;
			public D3D12_TEXTURE_ADDRESS_MODE AddressW;
			public float MipLODBias;
			public uint32 MaxAnisotropy;
			public D3D12_COMPARISON_FUNC ComparisonFunc;
			public float[4] BorderColor;
			public float MinLOD;
			public float MaxLOD;
		}
		[CRepr]
		public struct D3D12_BUFFER_UAV
		{
			public uint64 FirstElement;
			public uint32 NumElements;
			public uint32 StructureByteStride;
			public uint64 CounterOffsetInBytes;
			public D3D12_BUFFER_UAV_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_TEX1D_UAV
		{
			public uint32 MipSlice;
		}
		[CRepr]
		public struct D3D12_TEX1D_ARRAY_UAV
		{
			public uint32 MipSlice;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_TEX2D_UAV
		{
			public uint32 MipSlice;
			public uint32 PlaneSlice;
		}
		[CRepr]
		public struct D3D12_TEX2D_ARRAY_UAV
		{
			public uint32 MipSlice;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
			public uint32 PlaneSlice;
		}
		[CRepr]
		public struct D3D12_TEX3D_UAV
		{
			public uint32 MipSlice;
			public uint32 FirstWSlice;
			public uint32 WSize;
		}
		[CRepr]
		public struct D3D12_UNORDERED_ACCESS_VIEW_DESC
		{
			public DXGI_FORMAT Format;
			public D3D12_UAV_DIMENSION ViewDimension;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_BUFFER_UAV Buffer;
				public D3D12_TEX1D_UAV Texture1D;
				public D3D12_TEX1D_ARRAY_UAV Texture1DArray;
				public D3D12_TEX2D_UAV Texture2D;
				public D3D12_TEX2D_ARRAY_UAV Texture2DArray;
				public D3D12_TEX3D_UAV Texture3D;
			}
		}
		[CRepr]
		public struct D3D12_BUFFER_RTV
		{
			public uint64 FirstElement;
			public uint32 NumElements;
		}
		[CRepr]
		public struct D3D12_TEX1D_RTV
		{
			public uint32 MipSlice;
		}
		[CRepr]
		public struct D3D12_TEX1D_ARRAY_RTV
		{
			public uint32 MipSlice;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_TEX2D_RTV
		{
			public uint32 MipSlice;
			public uint32 PlaneSlice;
		}
		[CRepr]
		public struct D3D12_TEX2DMS_RTV
		{
			public uint32 UnusedField_NothingToDefine;
		}
		[CRepr]
		public struct D3D12_TEX2D_ARRAY_RTV
		{
			public uint32 MipSlice;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
			public uint32 PlaneSlice;
		}
		[CRepr]
		public struct D3D12_TEX2DMS_ARRAY_RTV
		{
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_TEX3D_RTV
		{
			public uint32 MipSlice;
			public uint32 FirstWSlice;
			public uint32 WSize;
		}
		[CRepr]
		public struct D3D12_RENDER_TARGET_VIEW_DESC
		{
			public DXGI_FORMAT Format;
			public D3D12_RTV_DIMENSION ViewDimension;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_BUFFER_RTV Buffer;
				public D3D12_TEX1D_RTV Texture1D;
				public D3D12_TEX1D_ARRAY_RTV Texture1DArray;
				public D3D12_TEX2D_RTV Texture2D;
				public D3D12_TEX2D_ARRAY_RTV Texture2DArray;
				public D3D12_TEX2DMS_RTV Texture2DMS;
				public D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
				public D3D12_TEX3D_RTV Texture3D;
			}
		}
		[CRepr]
		public struct D3D12_TEX1D_DSV
		{
			public uint32 MipSlice;
		}
		[CRepr]
		public struct D3D12_TEX1D_ARRAY_DSV
		{
			public uint32 MipSlice;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_TEX2D_DSV
		{
			public uint32 MipSlice;
		}
		[CRepr]
		public struct D3D12_TEX2D_ARRAY_DSV
		{
			public uint32 MipSlice;
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_TEX2DMS_DSV
		{
			public uint32 UnusedField_NothingToDefine;
		}
		[CRepr]
		public struct D3D12_TEX2DMS_ARRAY_DSV
		{
			public uint32 FirstArraySlice;
			public uint32 ArraySize;
		}
		[CRepr]
		public struct D3D12_DEPTH_STENCIL_VIEW_DESC
		{
			public DXGI_FORMAT Format;
			public D3D12_DSV_DIMENSION ViewDimension;
			public D3D12_DSV_FLAGS Flags;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_TEX1D_DSV Texture1D;
				public D3D12_TEX1D_ARRAY_DSV Texture1DArray;
				public D3D12_TEX2D_DSV Texture2D;
				public D3D12_TEX2D_ARRAY_DSV Texture2DArray;
				public D3D12_TEX2DMS_DSV Texture2DMS;
				public D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
			}
		}
		[CRepr]
		public struct D3D12_DESCRIPTOR_HEAP_DESC
		{
			public D3D12_DESCRIPTOR_HEAP_TYPE Type;
			public uint32 NumDescriptors;
			public D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
			public uint32 NodeMask;
		}
		[CRepr]
		public struct D3D12_DESCRIPTOR_RANGE
		{
			public D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
			public uint32 NumDescriptors;
			public uint32 BaseShaderRegister;
			public uint32 RegisterSpace;
			public uint32 OffsetInDescriptorsFromTableStart;
		}
		[CRepr]
		public struct D3D12_ROOT_DESCRIPTOR_TABLE
		{
			public uint32 NumDescriptorRanges;
			public D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;
		}
		[CRepr]
		public struct D3D12_ROOT_CONSTANTS
		{
			public uint32 ShaderRegister;
			public uint32 RegisterSpace;
			public uint32 Num32BitValues;
		}
		[CRepr]
		public struct D3D12_ROOT_DESCRIPTOR
		{
			public uint32 ShaderRegister;
			public uint32 RegisterSpace;
		}
		[CRepr]
		public struct D3D12_ROOT_PARAMETER
		{
			public D3D12_ROOT_PARAMETER_TYPE ParameterType;
			public _Anonymous_e__Union Anonymous;
			public D3D12_SHADER_VISIBILITY ShaderVisibility;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
				public D3D12_ROOT_CONSTANTS Constants;
				public D3D12_ROOT_DESCRIPTOR Descriptor;
			}
		}
		[CRepr]
		public struct D3D12_STATIC_SAMPLER_DESC
		{
			public D3D12_FILTER Filter;
			public D3D12_TEXTURE_ADDRESS_MODE AddressU;
			public D3D12_TEXTURE_ADDRESS_MODE AddressV;
			public D3D12_TEXTURE_ADDRESS_MODE AddressW;
			public float MipLODBias;
			public uint32 MaxAnisotropy;
			public D3D12_COMPARISON_FUNC ComparisonFunc;
			public D3D12_STATIC_BORDER_COLOR BorderColor;
			public float MinLOD;
			public float MaxLOD;
			public uint32 ShaderRegister;
			public uint32 RegisterSpace;
			public D3D12_SHADER_VISIBILITY ShaderVisibility;
		}
		[CRepr]
		public struct D3D12_ROOT_SIGNATURE_DESC
		{
			public uint32 NumParameters;
			public D3D12_ROOT_PARAMETER* pParameters;
			public uint32 NumStaticSamplers;
			public D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
			public D3D12_ROOT_SIGNATURE_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_DESCRIPTOR_RANGE1
		{
			public D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
			public uint32 NumDescriptors;
			public uint32 BaseShaderRegister;
			public uint32 RegisterSpace;
			public D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
			public uint32 OffsetInDescriptorsFromTableStart;
		}
		[CRepr]
		public struct D3D12_ROOT_DESCRIPTOR_TABLE1
		{
			public uint32 NumDescriptorRanges;
			public D3D12_DESCRIPTOR_RANGE1* pDescriptorRanges;
		}
		[CRepr]
		public struct D3D12_ROOT_DESCRIPTOR1
		{
			public uint32 ShaderRegister;
			public uint32 RegisterSpace;
			public D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_ROOT_PARAMETER1
		{
			public D3D12_ROOT_PARAMETER_TYPE ParameterType;
			public _Anonymous_e__Union Anonymous;
			public D3D12_SHADER_VISIBILITY ShaderVisibility;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
				public D3D12_ROOT_CONSTANTS Constants;
				public D3D12_ROOT_DESCRIPTOR1 Descriptor;
			}
		}
		[CRepr]
		public struct D3D12_ROOT_SIGNATURE_DESC1
		{
			public uint32 NumParameters;
			public D3D12_ROOT_PARAMETER1* pParameters;
			public uint32 NumStaticSamplers;
			public D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;
			public D3D12_ROOT_SIGNATURE_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
		{
			public D3D_ROOT_SIGNATURE_VERSION Version;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
				public D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
			}
		}
		[CRepr]
		public struct D3D12_CPU_DESCRIPTOR_HANDLE
		{
			public uint ptr;
		}
		[CRepr]
		public struct D3D12_GPU_DESCRIPTOR_HANDLE
		{
			public uint64 ptr;
		}
		[CRepr]
		public struct D3D12_DISCARD_REGION
		{
			public uint32 NumRects;
			public RECT* pRects;
			public uint32 FirstSubresource;
			public uint32 NumSubresources;
		}
		[CRepr]
		public struct D3D12_QUERY_HEAP_DESC
		{
			public D3D12_QUERY_HEAP_TYPE Type;
			public uint32 Count;
			public uint32 NodeMask;
		}
		[CRepr]
		public struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
		{
			public uint64 IAVertices;
			public uint64 IAPrimitives;
			public uint64 VSInvocations;
			public uint64 GSInvocations;
			public uint64 GSPrimitives;
			public uint64 CInvocations;
			public uint64 CPrimitives;
			public uint64 PSInvocations;
			public uint64 HSInvocations;
			public uint64 DSInvocations;
			public uint64 CSInvocations;
		}
		[CRepr]
		public struct D3D12_QUERY_DATA_PIPELINE_STATISTICS1
		{
			public uint64 IAVertices;
			public uint64 IAPrimitives;
			public uint64 VSInvocations;
			public uint64 GSInvocations;
			public uint64 GSPrimitives;
			public uint64 CInvocations;
			public uint64 CPrimitives;
			public uint64 PSInvocations;
			public uint64 HSInvocations;
			public uint64 DSInvocations;
			public uint64 CSInvocations;
			public uint64 ASInvocations;
			public uint64 MSInvocations;
			public uint64 MSPrimitives;
		}
		[CRepr]
		public struct D3D12_QUERY_DATA_SO_STATISTICS
		{
			public uint64 NumPrimitivesWritten;
			public uint64 PrimitivesStorageNeeded;
		}
		[CRepr]
		public struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
		{
			public uint64 BufferLocation;
			public uint64 SizeInBytes;
			public uint64 BufferFilledSizeLocation;
		}
		[CRepr]
		public struct D3D12_DRAW_ARGUMENTS
		{
			public uint32 VertexCountPerInstance;
			public uint32 InstanceCount;
			public uint32 StartVertexLocation;
			public uint32 StartInstanceLocation;
		}
		[CRepr]
		public struct D3D12_DRAW_INDEXED_ARGUMENTS
		{
			public uint32 IndexCountPerInstance;
			public uint32 InstanceCount;
			public uint32 StartIndexLocation;
			public int32 BaseVertexLocation;
			public uint32 StartInstanceLocation;
		}
		[CRepr]
		public struct D3D12_DISPATCH_ARGUMENTS
		{
			public uint32 ThreadGroupCountX;
			public uint32 ThreadGroupCountY;
			public uint32 ThreadGroupCountZ;
		}
		[CRepr]
		public struct D3D12_VERTEX_BUFFER_VIEW
		{
			public uint64 BufferLocation;
			public uint32 SizeInBytes;
			public uint32 StrideInBytes;
		}
		[CRepr]
		public struct D3D12_INDEX_BUFFER_VIEW
		{
			public uint64 BufferLocation;
			public uint32 SizeInBytes;
			public DXGI_FORMAT Format;
		}
		[CRepr]
		public struct D3D12_INDIRECT_ARGUMENT_DESC
		{
			public D3D12_INDIRECT_ARGUMENT_TYPE Type;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public _VertexBuffer_e__Struct VertexBuffer;
				public _Constant_e__Struct Constant;
				public _ConstantBufferView_e__Struct ConstantBufferView;
				public _ShaderResourceView_e__Struct ShaderResourceView;
				public _UnorderedAccessView_e__Struct UnorderedAccessView;
				
				[CRepr]
				public struct _ShaderResourceView_e__Struct
				{
					public uint32 RootParameterIndex;
				}
				[CRepr]
				public struct _Constant_e__Struct
				{
					public uint32 RootParameterIndex;
					public uint32 DestOffsetIn32BitValues;
					public uint32 Num32BitValuesToSet;
				}
				[CRepr]
				public struct _UnorderedAccessView_e__Struct
				{
					public uint32 RootParameterIndex;
				}
				[CRepr]
				public struct _VertexBuffer_e__Struct
				{
					public uint32 Slot;
				}
				[CRepr]
				public struct _ConstantBufferView_e__Struct
				{
					public uint32 RootParameterIndex;
				}
			}
		}
		[CRepr]
		public struct D3D12_COMMAND_SIGNATURE_DESC
		{
			public uint32 ByteStride;
			public uint32 NumArgumentDescs;
			public D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs;
			public uint32 NodeMask;
		}
		[CRepr]
		public struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
		{
			public uint64 Dest;
			public uint32 Value;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
		{
			public uint32 NodeIndex;
			public D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
		}
		[CRepr]
		public struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
		{
			public uint32 NodeMask;
			public D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_META_COMMAND_PARAMETER_DESC
		{
			public PWSTR Name;
			public D3D12_META_COMMAND_PARAMETER_TYPE Type;
			public D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
			public D3D12_RESOURCE_STATES RequiredResourceState;
			public uint32 StructureOffset;
		}
		[CRepr]
		public struct D3D12_META_COMMAND_DESC
		{
			public Guid Id;
			public PWSTR Name;
			public D3D12_GRAPHICS_STATES InitializationDirtyState;
			public D3D12_GRAPHICS_STATES ExecutionDirtyState;
		}
		[CRepr]
		public struct D3D12_STATE_SUBOBJECT
		{
			public D3D12_STATE_SUBOBJECT_TYPE Type;
			public void* pDesc;
		}
		[CRepr]
		public struct D3D12_STATE_OBJECT_CONFIG
		{
			public D3D12_STATE_OBJECT_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_GLOBAL_ROOT_SIGNATURE
		{
			public ID3D12RootSignature* pGlobalRootSignature;
		}
		[CRepr]
		public struct D3D12_LOCAL_ROOT_SIGNATURE
		{
			public ID3D12RootSignature* pLocalRootSignature;
		}
		[CRepr]
		public struct D3D12_NODE_MASK
		{
			public uint32 NodeMask;
		}
		[CRepr]
		public struct D3D12_EXPORT_DESC
		{
			public PWSTR Name;
			public PWSTR ExportToRename;
			public D3D12_EXPORT_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_DXIL_LIBRARY_DESC
		{
			public D3D12_SHADER_BYTECODE DXILLibrary;
			public uint32 NumExports;
			public D3D12_EXPORT_DESC* pExports;
		}
		[CRepr]
		public struct D3D12_EXISTING_COLLECTION_DESC
		{
			public ID3D12StateObject* pExistingCollection;
			public uint32 NumExports;
			public D3D12_EXPORT_DESC* pExports;
		}
		[CRepr]
		public struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
		{
			public D3D12_STATE_SUBOBJECT* pSubobjectToAssociate;
			public uint32 NumExports;
			public PWSTR* pExports;
		}
		[CRepr]
		public struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
		{
			public PWSTR SubobjectToAssociate;
			public uint32 NumExports;
			public PWSTR* pExports;
		}
		[CRepr]
		public struct D3D12_HIT_GROUP_DESC
		{
			public PWSTR HitGroupExport;
			public D3D12_HIT_GROUP_TYPE Type;
			public PWSTR AnyHitShaderImport;
			public PWSTR ClosestHitShaderImport;
			public PWSTR IntersectionShaderImport;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_SHADER_CONFIG
		{
			public uint32 MaxPayloadSizeInBytes;
			public uint32 MaxAttributeSizeInBytes;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_PIPELINE_CONFIG
		{
			public uint32 MaxTraceRecursionDepth;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_PIPELINE_CONFIG1
		{
			public uint32 MaxTraceRecursionDepth;
			public D3D12_RAYTRACING_PIPELINE_FLAGS Flags;
		}
		[CRepr]
		public struct D3D12_STATE_OBJECT_DESC
		{
			public D3D12_STATE_OBJECT_TYPE Type;
			public uint32 NumSubobjects;
			public D3D12_STATE_SUBOBJECT* pSubobjects;
		}
		[CRepr]
		public struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
		{
			public uint64 StartAddress;
			public uint64 StrideInBytes;
		}
		[CRepr]
		public struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
		{
			public uint64 StartAddress;
			public uint64 SizeInBytes;
		}
		[CRepr]
		public struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
		{
			public uint64 StartAddress;
			public uint64 SizeInBytes;
			public uint64 StrideInBytes;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
		{
			public uint64 Transform3x4;
			public DXGI_FORMAT IndexFormat;
			public DXGI_FORMAT VertexFormat;
			public uint32 IndexCount;
			public uint32 VertexCount;
			public uint64 IndexBuffer;
			public D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_AABB
		{
			public float MinX;
			public float MinY;
			public float MinZ;
			public float MaxX;
			public float MaxY;
			public float MaxZ;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
		{
			public uint64 AABBCount;
			public D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
		{
			public uint64 DestBuffer;
			public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
		{
			public uint64 CompactedSizeInBytes;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
		{
			public uint64 DecodedSizeInBytes;
		}
		[CRepr]
		public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
		{
			public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
			public uint32 NumDescs;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
		{
			public uint64 SerializedSizeInBytes;
			public uint64 NumBottomLevelAccelerationStructurePointers;
		}
		[CRepr]
		public struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
		{
			public Guid DriverOpaqueGUID;
			public uint8[16] DriverOpaqueVersioningData;
		}
		[CRepr]
		public struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
		{
			public D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
			public uint64 SerializedSizeInBytesIncludingHeader;
			public uint64 DeserializedSizeInBytes;
			public uint64 NumBottomLevelAccelerationStructurePointersAfterHeader;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
		{
			public uint64 CurrentSizeInBytes;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_INSTANCE_DESC
		{
			public float[12] Transform;
			public uint32 _bitfield1;
			public uint32 _bitfield2;
			public uint64 AccelerationStructure;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_GEOMETRY_DESC
		{
			public D3D12_RAYTRACING_GEOMETRY_TYPE Type;
			public D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
				public D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
			}
		}
		[CRepr]
		public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
		{
			public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
			public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
			public uint32 NumDescs;
			public D3D12_ELEMENTS_LAYOUT DescsLayout;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public uint64 InstanceDescs;
				public D3D12_RAYTRACING_GEOMETRY_DESC* pGeometryDescs;
				public D3D12_RAYTRACING_GEOMETRY_DESC** ppGeometryDescs;
			}
		}
		[CRepr]
		public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
		{
			public uint64 DestAccelerationStructureData;
			public D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
			public uint64 SourceAccelerationStructureData;
			public uint64 ScratchAccelerationStructureData;
		}
		[CRepr]
		public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
		{
			public uint64 ResultDataMaxSizeInBytes;
			public uint64 ScratchDataSizeInBytes;
			public uint64 UpdateScratchDataSizeInBytes;
		}
		[CRepr]
		public struct D3D12_AUTO_BREADCRUMB_NODE
		{
			public uint8* pCommandListDebugNameA;
			public PWSTR pCommandListDebugNameW;
			public uint8* pCommandQueueDebugNameA;
			public PWSTR pCommandQueueDebugNameW;
			public ID3D12GraphicsCommandList* pCommandList;
			public ID3D12CommandQueue* pCommandQueue;
			public uint32 BreadcrumbCount;
			public uint32* pLastBreadcrumbValue;
			public D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;
			public D3D12_AUTO_BREADCRUMB_NODE* pNext;
		}
		[CRepr]
		public struct D3D12_DRED_BREADCRUMB_CONTEXT
		{
			public uint32 BreadcrumbIndex;
			public PWSTR pContextString;
		}
		[CRepr]
		public struct D3D12_AUTO_BREADCRUMB_NODE1
		{
			public uint8* pCommandListDebugNameA;
			public PWSTR pCommandListDebugNameW;
			public uint8* pCommandQueueDebugNameA;
			public PWSTR pCommandQueueDebugNameW;
			public ID3D12GraphicsCommandList* pCommandList;
			public ID3D12CommandQueue* pCommandQueue;
			public uint32 BreadcrumbCount;
			public uint32* pLastBreadcrumbValue;
			public D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;
			public D3D12_AUTO_BREADCRUMB_NODE1* pNext;
			public uint32 BreadcrumbContextsCount;
			public D3D12_DRED_BREADCRUMB_CONTEXT* pBreadcrumbContexts;
		}
		[CRepr]
		public struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
		{
			public D3D12_DRED_FLAGS Flags;
			public D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
		}
		[CRepr]
		public struct D3D12_DRED_ALLOCATION_NODE
		{
			public uint8* ObjectNameA;
			public PWSTR ObjectNameW;
			public D3D12_DRED_ALLOCATION_TYPE AllocationType;
			public D3D12_DRED_ALLOCATION_NODE* pNext;
		}
		[CRepr]
		public struct D3D12_DRED_ALLOCATION_NODE1
		{
			public uint8* ObjectNameA;
			public PWSTR ObjectNameW;
			public D3D12_DRED_ALLOCATION_TYPE AllocationType;
			public D3D12_DRED_ALLOCATION_NODE1* pNext;
			public IUnknown* pObject;
		}
		[CRepr]
		public struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
		{
			public D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
		}
		[CRepr]
		public struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
		{
			public D3D12_AUTO_BREADCRUMB_NODE1* pHeadAutoBreadcrumbNode;
		}
		[CRepr]
		public struct D3D12_DRED_PAGE_FAULT_OUTPUT
		{
			public uint64 PageFaultVA;
			public D3D12_DRED_ALLOCATION_NODE* pHeadExistingAllocationNode;
			public D3D12_DRED_ALLOCATION_NODE* pHeadRecentFreedAllocationNode;
		}
		[CRepr]
		public struct D3D12_DRED_PAGE_FAULT_OUTPUT1
		{
			public uint64 PageFaultVA;
			public D3D12_DRED_ALLOCATION_NODE1* pHeadExistingAllocationNode;
			public D3D12_DRED_ALLOCATION_NODE1* pHeadRecentFreedAllocationNode;
		}
		[CRepr]
		public struct D3D12_DRED_PAGE_FAULT_OUTPUT2
		{
			public uint64 PageFaultVA;
			public D3D12_DRED_ALLOCATION_NODE1* pHeadExistingAllocationNode;
			public D3D12_DRED_ALLOCATION_NODE1* pHeadRecentFreedAllocationNode;
			public D3D12_DRED_PAGE_FAULT_FLAGS PageFaultFlags;
		}
		[CRepr]
		public struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
		{
			public HRESULT DeviceRemovedReason;
			public D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT AutoBreadcrumbsOutput;
			public D3D12_DRED_PAGE_FAULT_OUTPUT PageFaultOutput;
		}
		[CRepr]
		public struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2
		{
			public HRESULT DeviceRemovedReason;
			public D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 AutoBreadcrumbsOutput;
			public D3D12_DRED_PAGE_FAULT_OUTPUT1 PageFaultOutput;
		}
		[CRepr]
		public struct D3D12_DEVICE_REMOVED_EXTENDED_DATA3
		{
			public HRESULT DeviceRemovedReason;
			public D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 AutoBreadcrumbsOutput;
			public D3D12_DRED_PAGE_FAULT_OUTPUT2 PageFaultOutput;
			public D3D12_DRED_DEVICE_STATE DeviceState;
		}
		[CRepr]
		public struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
		{
			public D3D12_DRED_VERSION Version;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;
				public D3D12_DEVICE_REMOVED_EXTENDED_DATA1 Dred_1_1;
				public D3D12_DEVICE_REMOVED_EXTENDED_DATA2 Dred_1_2;
				public D3D12_DEVICE_REMOVED_EXTENDED_DATA3 Dred_1_3;
			}
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
		{
			public uint32 NodeIndex;
			public uint32 Count;
		}
		[CRepr]
		public struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
		{
			public uint32 NodeIndex;
			public uint32 Count;
			public Guid* pTypes;
		}
		[CRepr]
		public struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1
		{
			public uint32 NodeMask;
			public D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
			public Guid ProtectionType;
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
		{
			public D3D12_CLEAR_VALUE ClearValue;
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_BEGINNING_ACCESS
		{
			public D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
			}
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
		{
			public uint32 SrcSubresource;
			public uint32 DstSubresource;
			public uint32 DstX;
			public uint32 DstY;
			public RECT SrcRect;
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
		{
			public ID3D12Resource* pSrcResource;
			public ID3D12Resource* pDstResource;
			public uint32 SubresourceCount;
			public D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS* pSubresourceParameters;
			public DXGI_FORMAT Format;
			public D3D12_RESOLVE_MODE ResolveMode;
			public BOOL PreserveResolveSource;
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_ENDING_ACCESS
		{
			public D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
			public _Anonymous_e__Union Anonymous;
			
			[CRepr, Union]
			public struct _Anonymous_e__Union
			{
				public D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
			}
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
		{
			public D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
			public D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
			public D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
		}
		[CRepr]
		public struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
		{
			public D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
			public D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
			public D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
			public D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
			public D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
		}
		[CRepr]
		public struct D3D12_DISPATCH_RAYS_DESC
		{
			public D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
			public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
			public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
			public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
			public uint32 Width;
			public uint32 Height;
			public uint32 Depth;
		}
		[CRepr]
		public struct D3D12_SHADER_CACHE_SESSION_DESC
		{
			public Guid Identifier;
			public D3D12_SHADER_CACHE_MODE Mode;
			public D3D12_SHADER_CACHE_FLAGS Flags;
			public uint32 MaximumInMemoryCacheSizeBytes;
			public uint32 MaximumInMemoryCacheEntries;
			public uint32 MaximumValueFileSizeBytes;
			public uint64 Version;
		}
		[CRepr]
		public struct D3D12_SUBRESOURCE_DATA
		{
			public void* pData;
			public int RowPitch;
			public int SlicePitch;
		}
		[CRepr]
		public struct D3D12_MEMCPY_DEST
		{
			public void* pData;
			public uint RowPitch;
			public uint SlicePitch;
		}
		[CRepr]
		public struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
		{
			public uint32 MaxMessagesPerCommandList;
			public D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE DefaultShaderPatchMode;
			public D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS PipelineStateCreateFlags;
		}
		[CRepr]
		public struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
		{
			public float SlowdownFactor;
		}
		[CRepr]
		public struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
		{
			public D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE ShaderPatchMode;
		}
		[CRepr]
		public struct D3D12_MESSAGE
		{
			public D3D12_MESSAGE_CATEGORY Category;
			public D3D12_MESSAGE_SEVERITY Severity;
			public D3D12_MESSAGE_ID ID;
			public uint8* pDescription;
			public uint DescriptionByteLength;
		}
		[CRepr]
		public struct D3D12_INFO_QUEUE_FILTER_DESC
		{
			public uint32 NumCategories;
			public D3D12_MESSAGE_CATEGORY* pCategoryList;
			public uint32 NumSeverities;
			public D3D12_MESSAGE_SEVERITY* pSeverityList;
			public uint32 NumIDs;
			public D3D12_MESSAGE_ID* pIDList;
		}
		[CRepr]
		public struct D3D12_INFO_QUEUE_FILTER
		{
			public D3D12_INFO_QUEUE_FILTER_DESC AllowList;
			public D3D12_INFO_QUEUE_FILTER_DESC DenyList;
		}
		[CRepr]
		public struct D3D12_DISPATCH_MESH_ARGUMENTS
		{
			public uint32 ThreadGroupCountX;
			public uint32 ThreadGroupCountY;
			public uint32 ThreadGroupCountZ;
		}
		[CRepr]
		public struct D3D12_SIGNATURE_PARAMETER_DESC
		{
			public PSTR SemanticName;
			public uint32 SemanticIndex;
			public uint32 Register;
			public D3D_NAME SystemValueType;
			public D3D_REGISTER_COMPONENT_TYPE ComponentType;
			public uint8 Mask;
			public uint8 ReadWriteMask;
			public uint32 Stream;
			public D3D_MIN_PRECISION MinPrecision;
		}
		[CRepr]
		public struct D3D12_SHADER_BUFFER_DESC
		{
			public PSTR Name;
			public D3D_CBUFFER_TYPE Type;
			public uint32 Variables;
			public uint32 Size;
			public uint32 uFlags;
		}
		[CRepr]
		public struct D3D12_SHADER_VARIABLE_DESC
		{
			public PSTR Name;
			public uint32 StartOffset;
			public uint32 Size;
			public uint32 uFlags;
			public void* DefaultValue;
			public uint32 StartTexture;
			public uint32 TextureSize;
			public uint32 StartSampler;
			public uint32 SamplerSize;
		}
		[CRepr]
		public struct D3D12_SHADER_TYPE_DESC
		{
			public D3D_SHADER_VARIABLE_CLASS Class;
			public D3D_SHADER_VARIABLE_TYPE Type;
			public uint32 Rows;
			public uint32 Columns;
			public uint32 Elements;
			public uint32 Members;
			public uint32 Offset;
			public PSTR Name;
		}
		[CRepr]
		public struct D3D12_SHADER_DESC
		{
			public uint32 Version;
			public PSTR Creator;
			public uint32 Flags;
			public uint32 ConstantBuffers;
			public uint32 BoundResources;
			public uint32 InputParameters;
			public uint32 OutputParameters;
			public uint32 InstructionCount;
			public uint32 TempRegisterCount;
			public uint32 TempArrayCount;
			public uint32 DefCount;
			public uint32 DclCount;
			public uint32 TextureNormalInstructions;
			public uint32 TextureLoadInstructions;
			public uint32 TextureCompInstructions;
			public uint32 TextureBiasInstructions;
			public uint32 TextureGradientInstructions;
			public uint32 FloatInstructionCount;
			public uint32 IntInstructionCount;
			public uint32 UintInstructionCount;
			public uint32 StaticFlowControlCount;
			public uint32 DynamicFlowControlCount;
			public uint32 MacroInstructionCount;
			public uint32 ArrayInstructionCount;
			public uint32 CutInstructionCount;
			public uint32 EmitInstructionCount;
			public D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
			public uint32 GSMaxOutputVertexCount;
			public D3D_PRIMITIVE InputPrimitive;
			public uint32 PatchConstantParameters;
			public uint32 cGSInstanceCount;
			public uint32 cControlPoints;
			public D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
			public D3D_TESSELLATOR_PARTITIONING HSPartitioning;
			public D3D_TESSELLATOR_DOMAIN TessellatorDomain;
			public uint32 cBarrierInstructions;
			public uint32 cInterlockedInstructions;
			public uint32 cTextureStoreInstructions;
		}
		[CRepr]
		public struct D3D12_SHADER_INPUT_BIND_DESC
		{
			public PSTR Name;
			public D3D_SHADER_INPUT_TYPE Type;
			public uint32 BindPoint;
			public uint32 BindCount;
			public uint32 uFlags;
			public D3D_RESOURCE_RETURN_TYPE ReturnType;
			public D3D_SRV_DIMENSION Dimension;
			public uint32 NumSamples;
			public uint32 Space;
			public uint32 uID;
		}
		[CRepr]
		public struct D3D12_LIBRARY_DESC
		{
			public PSTR Creator;
			public uint32 Flags;
			public uint32 FunctionCount;
		}
		[CRepr]
		public struct D3D12_FUNCTION_DESC
		{
			public uint32 Version;
			public PSTR Creator;
			public uint32 Flags;
			public uint32 ConstantBuffers;
			public uint32 BoundResources;
			public uint32 InstructionCount;
			public uint32 TempRegisterCount;
			public uint32 TempArrayCount;
			public uint32 DefCount;
			public uint32 DclCount;
			public uint32 TextureNormalInstructions;
			public uint32 TextureLoadInstructions;
			public uint32 TextureCompInstructions;
			public uint32 TextureBiasInstructions;
			public uint32 TextureGradientInstructions;
			public uint32 FloatInstructionCount;
			public uint32 IntInstructionCount;
			public uint32 UintInstructionCount;
			public uint32 StaticFlowControlCount;
			public uint32 DynamicFlowControlCount;
			public uint32 MacroInstructionCount;
			public uint32 ArrayInstructionCount;
			public uint32 MovInstructionCount;
			public uint32 MovcInstructionCount;
			public uint32 ConversionInstructionCount;
			public uint32 BitwiseInstructionCount;
			public D3D_FEATURE_LEVEL MinFeatureLevel;
			public uint64 RequiredFeatureFlags;
			public PSTR Name;
			public int32 FunctionParameterCount;
			public BOOL HasReturn;
			public BOOL Has10Level9VertexShader;
			public BOOL Has10Level9PixelShader;
		}
		[CRepr]
		public struct D3D12_PARAMETER_DESC
		{
			public PSTR Name;
			public PSTR SemanticName;
			public D3D_SHADER_VARIABLE_TYPE Type;
			public D3D_SHADER_VARIABLE_CLASS Class;
			public uint32 Rows;
			public uint32 Columns;
			public D3D_INTERPOLATION_MODE InterpolationMode;
			public D3D_PARAMETER_FLAGS Flags;
			public uint32 FirstInRegister;
			public uint32 FirstInComponent;
			public uint32 FirstOutRegister;
			public uint32 FirstOutComponent;
		}
		
		// --- COM Interfaces ---
		
		[CRepr]
		public struct ID3D12Object : IUnknown
		{
			public const new Guid IID = .(0xc4fec28f, 0x7966, 0x4e95, 0x9f, 0x94, 0xf4, 0x31, 0xcb, 0x56, 0xc3, 0xb8);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12Object *self, Guid* guid, uint32* pDataSize, void* pData) GetPrivateData;
				public function HRESULT(ID3D12Object *self, Guid* guid, uint32 DataSize, void* pData) SetPrivateData;
				public function HRESULT(ID3D12Object *self, Guid* guid, IUnknown* pData) SetPrivateDataInterface;
				public function HRESULT(ID3D12Object *self, PWSTR Name) SetName;
			}
		}
		[CRepr]
		public struct ID3D12DeviceChild : ID3D12Object
		{
			public const new Guid IID = .(0x905db94b, 0xa00c, 0x4140, 0x9d, 0xf5, 0x2b, 0x64, 0xca, 0x9e, 0xa3, 0x57);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Object.VTable
			{
				public function HRESULT(ID3D12DeviceChild *self, Guid* riid, void** ppvDevice) GetDevice;
			}
		}
		[CRepr]
		public struct ID3D12RootSignature : ID3D12DeviceChild
		{
			public const new Guid IID = .(0xc54a6b66, 0x72df, 0x4ee8, 0x8b, 0xe5, 0xa9, 0x46, 0xa1, 0x42, 0x92, 0x14);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
			}
		}
		[CRepr]
		public struct ID3D12RootSignatureDeserializer : IUnknown
		{
			public const new Guid IID = .(0x34ab647b, 0x3cc8, 0x46ac, 0x84, 0x1b, 0xc0, 0x96, 0x56, 0x45, 0xc0, 0x46);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function D3D12_ROOT_SIGNATURE_DESC*(ID3D12RootSignatureDeserializer *self) GetRootSignatureDesc;
			}
		}
		[CRepr]
		public struct ID3D12VersionedRootSignatureDeserializer : IUnknown
		{
			public const new Guid IID = .(0x7f91ce67, 0x090c, 0x4bb7, 0xb7, 0x8e, 0xed, 0x8f, 0xf2, 0xe3, 0x1d, 0xa0);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12VersionedRootSignatureDeserializer *self, D3D_ROOT_SIGNATURE_VERSION convertToVersion, D3D12_VERSIONED_ROOT_SIGNATURE_DESC** ppDesc) GetRootSignatureDescAtVersion;
				public function D3D12_VERSIONED_ROOT_SIGNATURE_DESC*(ID3D12VersionedRootSignatureDeserializer *self) GetUnconvertedRootSignatureDesc;
			}
		}
		[CRepr]
		public struct ID3D12Pageable : ID3D12DeviceChild
		{
			public const new Guid IID = .(0x63ee58fb, 0x1268, 0x4835, 0x86, 0xda, 0xf0, 0x08, 0xce, 0x62, 0xf0, 0xd6);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
			}
		}
		[CRepr]
		public struct ID3D12Heap : ID3D12Pageable
		{
			public const new Guid IID = .(0x6b3b2502, 0x6e51, 0x45b3, 0x90, 0xee, 0x98, 0x84, 0x26, 0x5e, 0x8d, 0xf3);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function D3D12_HEAP_DESC(ID3D12Heap *self) GetDesc;
			}
		}
		[CRepr]
		public struct ID3D12Resource : ID3D12Pageable
		{
			public const new Guid IID = .(0x696442be, 0xa72e, 0x4059, 0xbc, 0x79, 0x5b, 0x5c, 0x98, 0x04, 0x0f, 0xad);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function HRESULT(ID3D12Resource *self, uint32 Subresource, D3D12_RANGE* pReadRange, void** ppData) Map;
				public function void(ID3D12Resource *self, uint32 Subresource, D3D12_RANGE* pWrittenRange) Unmap;
				public function D3D12_RESOURCE_DESC(ID3D12Resource *self) GetDesc;
				public function uint64(ID3D12Resource *self) GetGPUVirtualAddress;
				public function HRESULT(ID3D12Resource *self, uint32 DstSubresource, D3D12_BOX* pDstBox, void* pSrcData, uint32 SrcRowPitch, uint32 SrcDepthPitch) WriteToSubresource;
				public function HRESULT(ID3D12Resource *self, void* pDstData, uint32 DstRowPitch, uint32 DstDepthPitch, uint32 SrcSubresource, D3D12_BOX* pSrcBox) ReadFromSubresource;
				public function HRESULT(ID3D12Resource *self, D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS* pHeapFlags) GetHeapProperties;
			}
		}
		[CRepr]
		public struct ID3D12CommandAllocator : ID3D12Pageable
		{
			public const new Guid IID = .(0x6102dee4, 0xaf59, 0x4b09, 0xb9, 0x99, 0xb4, 0x4d, 0x73, 0xf0, 0x9b, 0x24);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function HRESULT(ID3D12CommandAllocator *self) Reset;
			}
		}
		[CRepr]
		public struct ID3D12Fence : ID3D12Pageable
		{
			public const new Guid IID = .(0x0a753dcf, 0xc4d8, 0x4b91, 0xad, 0xf6, 0xbe, 0x5a, 0x60, 0xd9, 0x5a, 0x76);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function uint64(ID3D12Fence *self) GetCompletedValue;
				public function HRESULT(ID3D12Fence *self, uint64 Value, HANDLE hEvent) SetEventOnCompletion;
				public function HRESULT(ID3D12Fence *self, uint64 Value) Signal;
			}
		}
		[CRepr]
		public struct ID3D12Fence1 : ID3D12Fence
		{
			public const new Guid IID = .(0x433685fe, 0xe22b, 0x4ca0, 0xa8, 0xdb, 0xb5, 0xb4, 0xf4, 0xdd, 0x0e, 0x4a);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Fence.VTable
			{
				public function D3D12_FENCE_FLAGS(ID3D12Fence1 *self) GetCreationFlags;
			}
		}
		[CRepr]
		public struct ID3D12PipelineState : ID3D12Pageable
		{
			public const new Guid IID = .(0x765a30f3, 0xf624, 0x4c6f, 0xa8, 0x28, 0xac, 0xe9, 0x48, 0x62, 0x24, 0x45);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function HRESULT(ID3D12PipelineState *self, ID3DBlob** ppBlob) GetCachedBlob;
			}
		}
		[CRepr]
		public struct ID3D12DescriptorHeap : ID3D12Pageable
		{
			public const new Guid IID = .(0x8efb471d, 0x616c, 0x4f49, 0x90, 0xf7, 0x12, 0x7b, 0xb7, 0x63, 0xfa, 0x51);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function D3D12_DESCRIPTOR_HEAP_DESC(ID3D12DescriptorHeap *self) GetDesc;
				public function D3D12_CPU_DESCRIPTOR_HANDLE(ID3D12DescriptorHeap *self) GetCPUDescriptorHandleForHeapStart;
				public function D3D12_GPU_DESCRIPTOR_HANDLE(ID3D12DescriptorHeap *self) GetGPUDescriptorHandleForHeapStart;
			}
		}
		[CRepr]
		public struct ID3D12QueryHeap : ID3D12Pageable
		{
			public const new Guid IID = .(0x0d9658ae, 0xed45, 0x469e, 0xa6, 0x1d, 0x97, 0x0e, 0xc5, 0x83, 0xca, 0xb4);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
			}
		}
		[CRepr]
		public struct ID3D12CommandSignature : ID3D12Pageable
		{
			public const new Guid IID = .(0xc36a797c, 0xec80, 0x4f0a, 0x89, 0x85, 0xa7, 0xb2, 0x47, 0x50, 0x82, 0xd1);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
			}
		}
		[CRepr]
		public struct ID3D12CommandList : ID3D12DeviceChild
		{
			public const new Guid IID = .(0x7116d91c, 0xe7e4, 0x47ce, 0xb8, 0xc6, 0xec, 0x81, 0x68, 0xf4, 0x37, 0xe5);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
				public function D3D12_COMMAND_LIST_TYPE(ID3D12CommandList *self) GetType;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList : ID3D12CommandList
		{
			public const new Guid IID = .(0x5b160d0f, 0xac1b, 0x4185, 0x8b, 0xa8, 0xb3, 0xae, 0x42, 0xa5, 0xa4, 0x55);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12CommandList.VTable
			{
				public function HRESULT(ID3D12GraphicsCommandList *self) Close;
				public function HRESULT(ID3D12GraphicsCommandList *self, ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState) Reset;
				public function void(ID3D12GraphicsCommandList *self, ID3D12PipelineState* pPipelineState) ClearState;
				public function void(ID3D12GraphicsCommandList *self, uint32 VertexCountPerInstance, uint32 InstanceCount, uint32 StartVertexLocation, uint32 StartInstanceLocation) DrawInstanced;
				public function void(ID3D12GraphicsCommandList *self, uint32 IndexCountPerInstance, uint32 InstanceCount, uint32 StartIndexLocation, int32 BaseVertexLocation, uint32 StartInstanceLocation) DrawIndexedInstanced;
				public function void(ID3D12GraphicsCommandList *self, uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ) Dispatch;
				public function void(ID3D12GraphicsCommandList *self, ID3D12Resource* pDstBuffer, uint64 DstOffset, ID3D12Resource* pSrcBuffer, uint64 SrcOffset, uint64 NumBytes) CopyBufferRegion;
				public function void(ID3D12GraphicsCommandList *self, D3D12_TEXTURE_COPY_LOCATION* pDst, uint32 DstX, uint32 DstY, uint32 DstZ, D3D12_TEXTURE_COPY_LOCATION* pSrc, D3D12_BOX* pSrcBox) CopyTextureRegion;
				public function void(ID3D12GraphicsCommandList *self, ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource) CopyResource;
				public function void(ID3D12GraphicsCommandList *self, ID3D12Resource* pTiledResource, D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, D3D12_TILE_REGION_SIZE* pTileRegionSize, ID3D12Resource* pBuffer, uint64 BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags) CopyTiles;
				public function void(ID3D12GraphicsCommandList *self, ID3D12Resource* pDstResource, uint32 DstSubresource, ID3D12Resource* pSrcResource, uint32 SrcSubresource, DXGI_FORMAT Format) ResolveSubresource;
				public function void(ID3D12GraphicsCommandList *self, D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology) IASetPrimitiveTopology;
				public function void(ID3D12GraphicsCommandList *self, uint32 NumViewports, D3D12_VIEWPORT* pViewports) RSSetViewports;
				public function void(ID3D12GraphicsCommandList *self, uint32 NumRects, RECT* pRects) RSSetScissorRects;
				public function void(ID3D12GraphicsCommandList *self, float* BlendFactor) OMSetBlendFactor;
				public function void(ID3D12GraphicsCommandList *self, uint32 StencilRef) OMSetStencilRef;
				public function void(ID3D12GraphicsCommandList *self, ID3D12PipelineState* pPipelineState) SetPipelineState;
				public function void(ID3D12GraphicsCommandList *self, uint32 NumBarriers, D3D12_RESOURCE_BARRIER* pBarriers) ResourceBarrier;
				public function void(ID3D12GraphicsCommandList *self, ID3D12GraphicsCommandList* pCommandList) ExecuteBundle;
				public function void(ID3D12GraphicsCommandList *self, uint32 NumDescriptorHeaps, ID3D12DescriptorHeap** ppDescriptorHeaps) SetDescriptorHeaps;
				public function void(ID3D12GraphicsCommandList *self, ID3D12RootSignature* pRootSignature) SetComputeRootSignature;
				public function void(ID3D12GraphicsCommandList *self, ID3D12RootSignature* pRootSignature) SetGraphicsRootSignature;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor) SetComputeRootDescriptorTable;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor) SetGraphicsRootDescriptorTable;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint32 SrcData, uint32 DestOffsetIn32BitValues) SetComputeRoot32BitConstant;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint32 SrcData, uint32 DestOffsetIn32BitValues) SetGraphicsRoot32BitConstant;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint32 Num32BitValuesToSet, void* pSrcData, uint32 DestOffsetIn32BitValues) SetComputeRoot32BitConstants;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint32 Num32BitValuesToSet, void* pSrcData, uint32 DestOffsetIn32BitValues) SetGraphicsRoot32BitConstants;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint64 BufferLocation) SetComputeRootConstantBufferView;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint64 BufferLocation) SetGraphicsRootConstantBufferView;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint64 BufferLocation) SetComputeRootShaderResourceView;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint64 BufferLocation) SetGraphicsRootShaderResourceView;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint64 BufferLocation) SetComputeRootUnorderedAccessView;
				public function void(ID3D12GraphicsCommandList *self, uint32 RootParameterIndex, uint64 BufferLocation) SetGraphicsRootUnorderedAccessView;
				public function void(ID3D12GraphicsCommandList *self, D3D12_INDEX_BUFFER_VIEW* pView) IASetIndexBuffer;
				public function void(ID3D12GraphicsCommandList *self, uint32 StartSlot, uint32 NumViews, D3D12_VERTEX_BUFFER_VIEW* pViews) IASetVertexBuffers;
				public function void(ID3D12GraphicsCommandList *self, uint32 StartSlot, uint32 NumViews, D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews) SOSetTargets;
				public function void(ID3D12GraphicsCommandList *self, uint32 NumRenderTargetDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, BOOL RTsSingleHandleToDescriptorRange, D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor) OMSetRenderTargets;
				public function void(ID3D12GraphicsCommandList *self, D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, float Depth, uint8 Stencil, uint32 NumRects, RECT* pRects) ClearDepthStencilView;
				public function void(ID3D12GraphicsCommandList *self, D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, float* ColorRGBA, uint32 NumRects, RECT* pRects) ClearRenderTargetView;
				public function void(ID3D12GraphicsCommandList *self, D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource* pResource, uint32* Values, uint32 NumRects, RECT* pRects) ClearUnorderedAccessViewUint;
				public function void(ID3D12GraphicsCommandList *self, D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource* pResource, float* Values, uint32 NumRects, RECT* pRects) ClearUnorderedAccessViewFloat;
				public function void(ID3D12GraphicsCommandList *self, ID3D12Resource* pResource, D3D12_DISCARD_REGION* pRegion) DiscardResource;
				public function void(ID3D12GraphicsCommandList *self, ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, uint32 Index) BeginQuery;
				public function void(ID3D12GraphicsCommandList *self, ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, uint32 Index) EndQuery;
				public function void(ID3D12GraphicsCommandList *self, ID3D12QueryHeap* pQueryHeap, D3D12_QUERY_TYPE Type, uint32 StartIndex, uint32 NumQueries, ID3D12Resource* pDestinationBuffer, uint64 AlignedDestinationBufferOffset) ResolveQueryData;
				public function void(ID3D12GraphicsCommandList *self, ID3D12Resource* pBuffer, uint64 AlignedBufferOffset, D3D12_PREDICATION_OP Operation) SetPredication;
				public function void(ID3D12GraphicsCommandList *self, uint32 Metadata, void* pData, uint32 Size) SetMarker;
				public function void(ID3D12GraphicsCommandList *self, uint32 Metadata, void* pData, uint32 Size) BeginEvent;
				public function void(ID3D12GraphicsCommandList *self) EndEvent;
				public function void(ID3D12GraphicsCommandList *self, ID3D12CommandSignature* pCommandSignature, uint32 MaxCommandCount, ID3D12Resource* pArgumentBuffer, uint64 ArgumentBufferOffset, ID3D12Resource* pCountBuffer, uint64 CountBufferOffset) ExecuteIndirect;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList1 : ID3D12GraphicsCommandList
		{
			public const new Guid IID = .(0x553103fb, 0x1fe7, 0x4557, 0xbb, 0x38, 0x94, 0x6d, 0x7d, 0x0e, 0x7c, 0xa7);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12GraphicsCommandList.VTable
			{
				public function void(ID3D12GraphicsCommandList1 *self, ID3D12Resource* pDstBuffer, uint64 DstOffset, ID3D12Resource* pSrcBuffer, uint64 SrcOffset, uint32 Dependencies, ID3D12Resource** ppDependentResources, D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges) AtomicCopyBufferUINT;
				public function void(ID3D12GraphicsCommandList1 *self, ID3D12Resource* pDstBuffer, uint64 DstOffset, ID3D12Resource* pSrcBuffer, uint64 SrcOffset, uint32 Dependencies, ID3D12Resource** ppDependentResources, D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges) AtomicCopyBufferUINT64;
				public function void(ID3D12GraphicsCommandList1 *self, float Min, float Max) OMSetDepthBounds;
				public function void(ID3D12GraphicsCommandList1 *self, uint32 NumSamplesPerPixel, uint32 NumPixels, D3D12_SAMPLE_POSITION* pSamplePositions) SetSamplePositions;
				public function void(ID3D12GraphicsCommandList1 *self, ID3D12Resource* pDstResource, uint32 DstSubresource, uint32 DstX, uint32 DstY, ID3D12Resource* pSrcResource, uint32 SrcSubresource, RECT* pSrcRect, DXGI_FORMAT Format, D3D12_RESOLVE_MODE ResolveMode) ResolveSubresourceRegion;
				public function void(ID3D12GraphicsCommandList1 *self, uint32 Mask) SetViewInstanceMask;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList2 : ID3D12GraphicsCommandList1
		{
			public const new Guid IID = .(0x38c3e585, 0xff17, 0x412c, 0x91, 0x50, 0x4f, 0xc6, 0xf9, 0xd7, 0x2a, 0x28);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12GraphicsCommandList1.VTable
			{
				public function void(ID3D12GraphicsCommandList2 *self, uint32 Count, D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes) WriteBufferImmediate;
			}
		}
		[CRepr]
		public struct ID3D12CommandQueue : ID3D12Pageable
		{
			public const new Guid IID = .(0x0ec870a6, 0x5d7e, 0x4c22, 0x8c, 0xfc, 0x5b, 0xaa, 0xe0, 0x76, 0x16, 0xed);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function void(ID3D12CommandQueue *self, ID3D12Resource* pResource, uint32 NumResourceRegions, D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates, D3D12_TILE_REGION_SIZE* pResourceRegionSizes, ID3D12Heap* pHeap, uint32 NumRanges, D3D12_TILE_RANGE_FLAGS* pRangeFlags, uint32* pHeapRangeStartOffsets, uint32* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags) UpdateTileMappings;
				public function void(ID3D12CommandQueue *self, ID3D12Resource* pDstResource, D3D12_TILED_RESOURCE_COORDINATE* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12_TILED_RESOURCE_COORDINATE* pSrcRegionStartCoordinate, D3D12_TILE_REGION_SIZE* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags) CopyTileMappings;
				public function void(ID3D12CommandQueue *self, uint32 NumCommandLists, ID3D12CommandList** ppCommandLists) ExecuteCommandLists;
				public function void(ID3D12CommandQueue *self, uint32 Metadata, void* pData, uint32 Size) SetMarker;
				public function void(ID3D12CommandQueue *self, uint32 Metadata, void* pData, uint32 Size) BeginEvent;
				public function void(ID3D12CommandQueue *self) EndEvent;
				public function HRESULT(ID3D12CommandQueue *self, ID3D12Fence* pFence, uint64 Value) Signal;
				public function HRESULT(ID3D12CommandQueue *self, ID3D12Fence* pFence, uint64 Value) Wait;
				public function HRESULT(ID3D12CommandQueue *self, uint64* pFrequency) GetTimestampFrequency;
				public function HRESULT(ID3D12CommandQueue *self, uint64* pGpuTimestamp, uint64* pCpuTimestamp) GetClockCalibration;
				public function D3D12_COMMAND_QUEUE_DESC(ID3D12CommandQueue *self) GetDesc;
			}
		}
		[CRepr]
		public struct ID3D12Device : ID3D12Object
		{
			public const new Guid IID = .(0x189819f1, 0x1db6, 0x4b57, 0xbe, 0x54, 0x18, 0x21, 0x33, 0x9b, 0x85, 0xf7);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Object.VTable
			{
				public function uint32(ID3D12Device *self) GetNodeCount;
				public function HRESULT(ID3D12Device *self, D3D12_COMMAND_QUEUE_DESC* pDesc, Guid* riid, void** ppCommandQueue) CreateCommandQueue;
				public function HRESULT(ID3D12Device *self, D3D12_COMMAND_LIST_TYPE type, Guid* riid, void** ppCommandAllocator) CreateCommandAllocator;
				public function HRESULT(ID3D12Device *self, D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, Guid* riid, void** ppPipelineState) CreateGraphicsPipelineState;
				public function HRESULT(ID3D12Device *self, D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, Guid* riid, void** ppPipelineState) CreateComputePipelineState;
				public function HRESULT(ID3D12Device *self, uint32 nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList) CreateCommandList;
				public function HRESULT(ID3D12Device *self, D3D12_FEATURE Feature, void* pFeatureSupportData, uint32 FeatureSupportDataSize) CheckFeatureSupport;
				public function HRESULT(ID3D12Device *self, D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, Guid* riid, void** ppvHeap) CreateDescriptorHeap;
				public function uint32(ID3D12Device *self, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType) GetDescriptorHandleIncrementSize;
				public function HRESULT(ID3D12Device *self, uint32 nodeMask, void* pBlobWithRootSignature, uint blobLengthInBytes, Guid* riid, void** ppvRootSignature) CreateRootSignature;
				public function void(ID3D12Device *self, D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateConstantBufferView;
				public function void(ID3D12Device *self, ID3D12Resource* pResource, D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateShaderResourceView;
				public function void(ID3D12Device *self, ID3D12Resource* pResource, ID3D12Resource* pCounterResource, D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateUnorderedAccessView;
				public function void(ID3D12Device *self, ID3D12Resource* pResource, D3D12_RENDER_TARGET_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateRenderTargetView;
				public function void(ID3D12Device *self, ID3D12Resource* pResource, D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateDepthStencilView;
				public function void(ID3D12Device *self, D3D12_SAMPLER_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateSampler;
				public function void(ID3D12Device *self, uint32 NumDestDescriptorRanges, D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, uint32* pDestDescriptorRangeSizes, uint32 NumSrcDescriptorRanges, D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, uint32* pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType) CopyDescriptors;
				public function void(ID3D12Device *self, uint32 NumDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType) CopyDescriptorsSimple;
				public function D3D12_RESOURCE_ALLOCATION_INFO(ID3D12Device *self, uint32 visibleMask, uint32 numResourceDescs, D3D12_RESOURCE_DESC* pResourceDescs) GetResourceAllocationInfo;
				public function D3D12_HEAP_PROPERTIES(ID3D12Device *self, uint32 nodeMask, D3D12_HEAP_TYPE heapType) GetCustomHeapProperties;
				public function HRESULT(ID3D12Device *self, D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, D3D12_CLEAR_VALUE* pOptimizedClearValue, Guid* riidResource, void** ppvResource) CreateCommittedResource;
				public function HRESULT(ID3D12Device *self, D3D12_HEAP_DESC* pDesc, Guid* riid, void** ppvHeap) CreateHeap;
				public function HRESULT(ID3D12Device *self, ID3D12Heap* pHeap, uint64 HeapOffset, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, D3D12_CLEAR_VALUE* pOptimizedClearValue, Guid* riid, void** ppvResource) CreatePlacedResource;
				public function HRESULT(ID3D12Device *self, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, D3D12_CLEAR_VALUE* pOptimizedClearValue, Guid* riid, void** ppvResource) CreateReservedResource;
				public function HRESULT(ID3D12Device *self, ID3D12DeviceChild* pObject, SECURITY_ATTRIBUTES* pAttributes, uint32 Access, PWSTR Name, HANDLE* pHandle) CreateSharedHandle;
				public function HRESULT(ID3D12Device *self, HANDLE NTHandle, Guid* riid, void** ppvObj) OpenSharedHandle;
				public function HRESULT(ID3D12Device *self, PWSTR Name, uint32 Access, HANDLE* pNTHandle) OpenSharedHandleByName;
				public function HRESULT(ID3D12Device *self, uint32 NumObjects, ID3D12Pageable** ppObjects) MakeResident;
				public function HRESULT(ID3D12Device *self, uint32 NumObjects, ID3D12Pageable** ppObjects) Evict;
				public function HRESULT(ID3D12Device *self, uint64 InitialValue, D3D12_FENCE_FLAGS Flags, Guid* riid, void** ppFence) CreateFence;
				public function HRESULT(ID3D12Device *self) GetDeviceRemovedReason;
				public function void(ID3D12Device *self, D3D12_RESOURCE_DESC* pResourceDesc, uint32 FirstSubresource, uint32 NumSubresources, uint64 BaseOffset, D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, uint32* pNumRows, uint64* pRowSizeInBytes, uint64* pTotalBytes) GetCopyableFootprints;
				public function HRESULT(ID3D12Device *self, D3D12_QUERY_HEAP_DESC* pDesc, Guid* riid, void** ppvHeap) CreateQueryHeap;
				public function HRESULT(ID3D12Device *self, BOOL Enable) SetStablePowerState;
				public function HRESULT(ID3D12Device *self, D3D12_COMMAND_SIGNATURE_DESC* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature) CreateCommandSignature;
				public function void(ID3D12Device *self, ID3D12Resource* pTiledResource, uint32* pNumTilesForEntireResource, D3D12_PACKED_MIP_INFO* pPackedMipDesc, D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, uint32* pNumSubresourceTilings, uint32 FirstSubresourceTilingToGet, D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips) GetResourceTiling;
				public function LUID(ID3D12Device *self) GetAdapterLuid;
			}
		}
		[CRepr]
		public struct ID3D12PipelineLibrary : ID3D12DeviceChild
		{
			public const new Guid IID = .(0xc64226a8, 0x9201, 0x46af, 0xb4, 0xcc, 0x53, 0xfb, 0x9f, 0xf7, 0x41, 0x4f);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
				public function HRESULT(ID3D12PipelineLibrary *self, PWSTR pName, ID3D12PipelineState* pPipeline) StorePipeline;
				public function HRESULT(ID3D12PipelineLibrary *self, PWSTR pName, D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, Guid* riid, void** ppPipelineState) LoadGraphicsPipeline;
				public function HRESULT(ID3D12PipelineLibrary *self, PWSTR pName, D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, Guid* riid, void** ppPipelineState) LoadComputePipeline;
				public function uint(ID3D12PipelineLibrary *self) GetSerializedSize;
				public function HRESULT(ID3D12PipelineLibrary *self, void* pData, uint DataSizeInBytes) Serialize;
			}
		}
		[CRepr]
		public struct ID3D12PipelineLibrary1 : ID3D12PipelineLibrary
		{
			public const new Guid IID = .(0x80eabf42, 0x2568, 0x4e5e, 0xbd, 0x82, 0xc3, 0x7f, 0x86, 0x96, 0x1d, 0xc3);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12PipelineLibrary.VTable
			{
				public function HRESULT(ID3D12PipelineLibrary1 *self, PWSTR pName, D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, Guid* riid, void** ppPipelineState) LoadPipeline;
			}
		}
		[CRepr]
		public struct ID3D12Device1 : ID3D12Device
		{
			public const new Guid IID = .(0x77acce80, 0x638e, 0x4e65, 0x88, 0x95, 0xc1, 0xf2, 0x33, 0x86, 0x86, 0x3e);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device.VTable
			{
				public function HRESULT(ID3D12Device1 *self, void* pLibraryBlob, uint BlobLength, Guid* riid, void** ppPipelineLibrary) CreatePipelineLibrary;
				public function HRESULT(ID3D12Device1 *self, ID3D12Fence** ppFences, uint64* pFenceValues, uint32 NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, HANDLE hEvent) SetEventOnMultipleFenceCompletion;
				public function HRESULT(ID3D12Device1 *self, uint32 NumObjects, ID3D12Pageable** ppObjects, D3D12_RESIDENCY_PRIORITY* pPriorities) SetResidencyPriority;
			}
		}
		[CRepr]
		public struct ID3D12Device2 : ID3D12Device1
		{
			public const new Guid IID = .(0x30baa41e, 0xb15b, 0x475c, 0xa0, 0xbb, 0x1a, 0xf5, 0xc5, 0xb6, 0x43, 0x28);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device1.VTable
			{
				public function HRESULT(ID3D12Device2 *self, D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, Guid* riid, void** ppPipelineState) CreatePipelineState;
			}
		}
		[CRepr]
		public struct ID3D12Device3 : ID3D12Device2
		{
			public const new Guid IID = .(0x81dadc15, 0x2bad, 0x4392, 0x93, 0xc5, 0x10, 0x13, 0x45, 0xc4, 0xaa, 0x98);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device2.VTable
			{
				public function HRESULT(ID3D12Device3 *self, void* pAddress, Guid* riid, void** ppvHeap) OpenExistingHeapFromAddress;
				public function HRESULT(ID3D12Device3 *self, HANDLE hFileMapping, Guid* riid, void** ppvHeap) OpenExistingHeapFromFileMapping;
				public function HRESULT(ID3D12Device3 *self, D3D12_RESIDENCY_FLAGS Flags, uint32 NumObjects, ID3D12Pageable** ppObjects, ID3D12Fence* pFenceToSignal, uint64 FenceValueToSignal) EnqueueMakeResident;
			}
		}
		[CRepr]
		public struct ID3D12ProtectedSession : ID3D12DeviceChild
		{
			public const new Guid IID = .(0xa1533d18, 0x0ac1, 0x4084, 0x85, 0xb9, 0x89, 0xa9, 0x61, 0x16, 0x80, 0x6b);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
				public function HRESULT(ID3D12ProtectedSession *self, Guid* riid, void** ppFence) GetStatusFence;
				public function D3D12_PROTECTED_SESSION_STATUS(ID3D12ProtectedSession *self) GetSessionStatus;
			}
		}
		[CRepr]
		public struct ID3D12ProtectedResourceSession : ID3D12ProtectedSession
		{
			public const new Guid IID = .(0x6cd696f4, 0xf289, 0x40cc, 0x80, 0x91, 0x5a, 0x6c, 0x0a, 0x09, 0x9c, 0x3d);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12ProtectedSession.VTable
			{
				public function D3D12_PROTECTED_RESOURCE_SESSION_DESC(ID3D12ProtectedResourceSession *self) GetDesc;
			}
		}
		[CRepr]
		public struct ID3D12Device4 : ID3D12Device3
		{
			public const new Guid IID = .(0xe865df17, 0xa9ee, 0x46f9, 0xa4, 0x63, 0x30, 0x98, 0x31, 0x5a, 0xa2, 0xe5);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device3.VTable
			{
				public function HRESULT(ID3D12Device4 *self, uint32 nodeMask, D3D12_COMMAND_LIST_TYPE type, D3D12_COMMAND_LIST_FLAGS flags, Guid* riid, void** ppCommandList) CreateCommandList1;
				public function HRESULT(ID3D12Device4 *self, D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, Guid* riid, void** ppSession) CreateProtectedResourceSession;
				public function HRESULT(ID3D12Device4 *self, D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, D3D12_CLEAR_VALUE* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource) CreateCommittedResource1;
				public function HRESULT(ID3D12Device4 *self, D3D12_HEAP_DESC* pDesc, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvHeap) CreateHeap1;
				public function HRESULT(ID3D12Device4 *self, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, D3D12_CLEAR_VALUE* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riid, void** ppvResource) CreateReservedResource1;
				public function D3D12_RESOURCE_ALLOCATION_INFO(ID3D12Device4 *self, uint32 visibleMask, uint32 numResourceDescs, D3D12_RESOURCE_DESC* pResourceDescs, D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1) GetResourceAllocationInfo1;
			}
		}
		[CRepr]
		public struct ID3D12LifetimeOwner : IUnknown
		{
			public const new Guid IID = .(0xe667af9f, 0xcd56, 0x4f46, 0x83, 0xce, 0x03, 0x2e, 0x59, 0x5d, 0x70, 0xa8);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12LifetimeOwner *self, D3D12_LIFETIME_STATE NewState) LifetimeStateUpdated;
			}
		}
		[CRepr]
		public struct ID3D12SwapChainAssistant : IUnknown
		{
			public const new Guid IID = .(0xf1df64b6, 0x57fd, 0x49cd, 0x88, 0x07, 0xc0, 0xeb, 0x88, 0xb4, 0x5c, 0x8f);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function LUID(ID3D12SwapChainAssistant *self) GetLUID;
				public function HRESULT(ID3D12SwapChainAssistant *self, Guid* riid, void** ppv) GetSwapChainObject;
				public function HRESULT(ID3D12SwapChainAssistant *self, Guid* riidResource, void** ppvResource, Guid* riidQueue, void** ppvQueue) GetCurrentResourceAndCommandQueue;
				public function HRESULT(ID3D12SwapChainAssistant *self) InsertImplicitSync;
			}
		}
		[CRepr]
		public struct ID3D12LifetimeTracker : ID3D12DeviceChild
		{
			public const new Guid IID = .(0x3fd03d36, 0x4eb1, 0x424a, 0xa5, 0x82, 0x49, 0x4e, 0xcb, 0x8b, 0xa8, 0x13);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
				public function HRESULT(ID3D12LifetimeTracker *self, ID3D12DeviceChild* pObject) DestroyOwnedObject;
			}
		}
		[CRepr]
		public struct ID3D12StateObject : ID3D12Pageable
		{
			public const new Guid IID = .(0x47016943, 0xfca8, 0x4594, 0x93, 0xea, 0xaf, 0x25, 0x8b, 0x55, 0x34, 0x6d);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
			}
		}
		[CRepr]
		public struct ID3D12StateObjectProperties : IUnknown
		{
			public const new Guid IID = .(0xde5fa827, 0x9bf9, 0x4f26, 0x89, 0xff, 0xd7, 0xf5, 0x6f, 0xde, 0x38, 0x60);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void*(ID3D12StateObjectProperties *self, PWSTR pExportName) GetShaderIdentifier;
				public function uint64(ID3D12StateObjectProperties *self, PWSTR pExportName) GetShaderStackSize;
				public function uint64(ID3D12StateObjectProperties *self) GetPipelineStackSize;
				public function void(ID3D12StateObjectProperties *self, uint64 PipelineStackSizeInBytes) SetPipelineStackSize;
			}
		}
		[CRepr]
		public struct ID3D12Device5 : ID3D12Device4
		{
			public const new Guid IID = .(0x8b4f173b, 0x2fea, 0x4b80, 0x8f, 0x58, 0x43, 0x07, 0x19, 0x1a, 0xb9, 0x5d);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device4.VTable
			{
				public function HRESULT(ID3D12Device5 *self, ID3D12LifetimeOwner* pOwner, Guid* riid, void** ppvTracker) CreateLifetimeTracker;
				public function void(ID3D12Device5 *self) RemoveDevice;
				public function HRESULT(ID3D12Device5 *self, uint32* pNumMetaCommands, D3D12_META_COMMAND_DESC* pDescs) EnumerateMetaCommands;
				public function HRESULT(ID3D12Device5 *self, Guid* CommandId, D3D12_META_COMMAND_PARAMETER_STAGE Stage, uint32* pTotalStructureSizeInBytes, uint32* pParameterCount, D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs) EnumerateMetaCommandParameters;
				public function HRESULT(ID3D12Device5 *self, Guid* CommandId, uint32 NodeMask, void* pCreationParametersData, uint CreationParametersDataSizeInBytes, Guid* riid, void** ppMetaCommand) CreateMetaCommand;
				public function HRESULT(ID3D12Device5 *self, D3D12_STATE_OBJECT_DESC* pDesc, Guid* riid, void** ppStateObject) CreateStateObject;
				public function void(ID3D12Device5 *self, D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo) GetRaytracingAccelerationStructurePrebuildInfo;
				public function D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS(ID3D12Device5 *self, D3D12_SERIALIZED_DATA_TYPE SerializedDataType, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck) CheckDriverMatchingIdentifier;
			}
		}
		[CRepr]
		public struct ID3D12DeviceRemovedExtendedDataSettings : IUnknown
		{
			public const new Guid IID = .(0x82bc481c, 0x6b9b, 0x4030, 0xae, 0xdb, 0x7e, 0xe3, 0xd1, 0xdf, 0x1e, 0x63);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12DeviceRemovedExtendedDataSettings *self, D3D12_DRED_ENABLEMENT Enablement) SetAutoBreadcrumbsEnablement;
				public function void(ID3D12DeviceRemovedExtendedDataSettings *self, D3D12_DRED_ENABLEMENT Enablement) SetPageFaultEnablement;
				public function void(ID3D12DeviceRemovedExtendedDataSettings *self, D3D12_DRED_ENABLEMENT Enablement) SetWatsonDumpEnablement;
			}
		}
		[CRepr]
		public struct ID3D12DeviceRemovedExtendedDataSettings1 : ID3D12DeviceRemovedExtendedDataSettings
		{
			public const new Guid IID = .(0xdbd5ae51, 0x3317, 0x4f0a, 0xad, 0xf9, 0x1d, 0x7c, 0xed, 0xca, 0xae, 0x0b);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceRemovedExtendedDataSettings.VTable
			{
				public function void(ID3D12DeviceRemovedExtendedDataSettings1 *self, D3D12_DRED_ENABLEMENT Enablement) SetBreadcrumbContextEnablement;
			}
		}
		[CRepr]
		public struct ID3D12DeviceRemovedExtendedData : IUnknown
		{
			public const new Guid IID = .(0x98931d33, 0x5ae8, 0x4791, 0xaa, 0x3c, 0x1a, 0x73, 0xa2, 0x93, 0x4e, 0x71);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12DeviceRemovedExtendedData *self, D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput) GetAutoBreadcrumbsOutput;
				public function HRESULT(ID3D12DeviceRemovedExtendedData *self, D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput) GetPageFaultAllocationOutput;
			}
		}
		[CRepr]
		public struct ID3D12DeviceRemovedExtendedData1 : ID3D12DeviceRemovedExtendedData
		{
			public const new Guid IID = .(0x9727a022, 0xcf1d, 0x4dda, 0x9e, 0xba, 0xef, 0xfa, 0x65, 0x3f, 0xc5, 0x06);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceRemovedExtendedData.VTable
			{
				public function HRESULT(ID3D12DeviceRemovedExtendedData1 *self, D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1* pOutput) GetAutoBreadcrumbsOutput1;
				public function HRESULT(ID3D12DeviceRemovedExtendedData1 *self, D3D12_DRED_PAGE_FAULT_OUTPUT1* pOutput) GetPageFaultAllocationOutput1;
			}
		}
		[CRepr]
		public struct ID3D12DeviceRemovedExtendedData2 : ID3D12DeviceRemovedExtendedData1
		{
			public const new Guid IID = .(0x67fc5816, 0xe4ca, 0x4915, 0xbf, 0x18, 0x42, 0x54, 0x12, 0x72, 0xda, 0x54);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceRemovedExtendedData1.VTable
			{
				public function HRESULT(ID3D12DeviceRemovedExtendedData2 *self, D3D12_DRED_PAGE_FAULT_OUTPUT2* pOutput) GetPageFaultAllocationOutput2;
				public function D3D12_DRED_DEVICE_STATE(ID3D12DeviceRemovedExtendedData2 *self) GetDeviceState;
			}
		}
		[CRepr]
		public struct ID3D12Device6 : ID3D12Device5
		{
			public const new Guid IID = .(0xc70b221b, 0x40e4, 0x4a17, 0x89, 0xaf, 0x02, 0x5a, 0x07, 0x27, 0xa6, 0xdc);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device5.VTable
			{
				public function HRESULT(ID3D12Device6 *self, D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, HANDLE hEventToSignalUponCompletion, BOOL* pbFurtherMeasurementsDesired) SetBackgroundProcessingMode;
			}
		}
		[CRepr]
		public struct ID3D12ProtectedResourceSession1 : ID3D12ProtectedResourceSession
		{
			public const new Guid IID = .(0xd6f12dd6, 0x76fb, 0x406e, 0x89, 0x61, 0x42, 0x96, 0xee, 0xfc, 0x04, 0x09);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12ProtectedResourceSession.VTable
			{
				public function D3D12_PROTECTED_RESOURCE_SESSION_DESC1(ID3D12ProtectedResourceSession1 *self) GetDesc1;
			}
		}
		[CRepr]
		public struct ID3D12Device7 : ID3D12Device6
		{
			public const new Guid IID = .(0x5c014b53, 0x68a1, 0x4b9b, 0x8b, 0xd1, 0xdd, 0x60, 0x46, 0xb9, 0x35, 0x8b);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device6.VTable
			{
				public function HRESULT(ID3D12Device7 *self, D3D12_STATE_OBJECT_DESC* pAddition, ID3D12StateObject* pStateObjectToGrowFrom, Guid* riid, void** ppNewStateObject) AddToStateObject;
				public function HRESULT(ID3D12Device7 *self, D3D12_PROTECTED_RESOURCE_SESSION_DESC1* pDesc, Guid* riid, void** ppSession) CreateProtectedResourceSession1;
			}
		}
		[CRepr]
		public struct ID3D12Device8 : ID3D12Device7
		{
			public const new Guid IID = .(0x9218e6bb, 0xf944, 0x4f7e, 0xa7, 0x5c, 0xb1, 0xb2, 0xc7, 0xb7, 0x01, 0xf3);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device7.VTable
			{
				public function D3D12_RESOURCE_ALLOCATION_INFO(ID3D12Device8 *self, uint32 visibleMask, uint32 numResourceDescs, D3D12_RESOURCE_DESC1* pResourceDescs, D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1) GetResourceAllocationInfo2;
				public function HRESULT(ID3D12Device8 *self, D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, D3D12_RESOURCE_DESC1* pDesc, D3D12_RESOURCE_STATES InitialResourceState, D3D12_CLEAR_VALUE* pOptimizedClearValue, ID3D12ProtectedResourceSession* pProtectedSession, Guid* riidResource, void** ppvResource) CreateCommittedResource2;
				public function HRESULT(ID3D12Device8 *self, ID3D12Heap* pHeap, uint64 HeapOffset, D3D12_RESOURCE_DESC1* pDesc, D3D12_RESOURCE_STATES InitialState, D3D12_CLEAR_VALUE* pOptimizedClearValue, Guid* riid, void** ppvResource) CreatePlacedResource1;
				public function void(ID3D12Device8 *self, ID3D12Resource* pTargetedResource, ID3D12Resource* pFeedbackResource, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor) CreateSamplerFeedbackUnorderedAccessView;
				public function void(ID3D12Device8 *self, D3D12_RESOURCE_DESC1* pResourceDesc, uint32 FirstSubresource, uint32 NumSubresources, uint64 BaseOffset, D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, uint32* pNumRows, uint64* pRowSizeInBytes, uint64* pTotalBytes) GetCopyableFootprints1;
			}
		}
		[CRepr]
		public struct ID3D12Resource1 : ID3D12Resource
		{
			public const new Guid IID = .(0x9d5e227a, 0x4430, 0x4161, 0x88, 0xb3, 0x3e, 0xca, 0x6b, 0xb1, 0x6e, 0x19);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Resource.VTable
			{
				public function HRESULT(ID3D12Resource1 *self, Guid* riid, void** ppProtectedSession) GetProtectedResourceSession;
			}
		}
		[CRepr]
		public struct ID3D12Resource2 : ID3D12Resource1
		{
			public const new Guid IID = .(0xbe36ec3b, 0xea85, 0x4aeb, 0xa4, 0x5a, 0xe9, 0xd7, 0x64, 0x04, 0xa4, 0x95);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Resource1.VTable
			{
				public function D3D12_RESOURCE_DESC1(ID3D12Resource2 *self) GetDesc1;
			}
		}
		[CRepr]
		public struct ID3D12Heap1 : ID3D12Heap
		{
			public const new Guid IID = .(0x572f7389, 0x2168, 0x49e3, 0x96, 0x93, 0xd6, 0xdf, 0x58, 0x71, 0xbf, 0x6d);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Heap.VTable
			{
				public function HRESULT(ID3D12Heap1 *self, Guid* riid, void** ppProtectedSession) GetProtectedResourceSession;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList3 : ID3D12GraphicsCommandList2
		{
			public const new Guid IID = .(0x6fda83a7, 0xb84c, 0x4e38, 0x9a, 0xc8, 0xc7, 0xbd, 0x22, 0x01, 0x6b, 0x3d);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12GraphicsCommandList2.VTable
			{
				public function void(ID3D12GraphicsCommandList3 *self, ID3D12ProtectedResourceSession* pProtectedResourceSession) SetProtectedResourceSession;
			}
		}
		[CRepr]
		public struct ID3D12MetaCommand : ID3D12Pageable
		{
			public const new Guid IID = .(0xdbb84c27, 0x36ce, 0x4fc9, 0xb8, 0x01, 0xf0, 0x48, 0xc4, 0x6a, 0xc5, 0x70);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Pageable.VTable
			{
				public function uint64(ID3D12MetaCommand *self, D3D12_META_COMMAND_PARAMETER_STAGE Stage, uint32 ParameterIndex) GetRequiredParameterResourceSize;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList4 : ID3D12GraphicsCommandList3
		{
			public const new Guid IID = .(0x8754318e, 0xd3a9, 0x4541, 0x98, 0xcf, 0x64, 0x5b, 0x50, 0xdc, 0x48, 0x74);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12GraphicsCommandList3.VTable
			{
				public function void(ID3D12GraphicsCommandList4 *self, uint32 NumRenderTargets, D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags) BeginRenderPass;
				public function void(ID3D12GraphicsCommandList4 *self) EndRenderPass;
				public function void(ID3D12GraphicsCommandList4 *self, ID3D12MetaCommand* pMetaCommand, void* pInitializationParametersData, uint InitializationParametersDataSizeInBytes) InitializeMetaCommand;
				public function void(ID3D12GraphicsCommandList4 *self, ID3D12MetaCommand* pMetaCommand, void* pExecutionParametersData, uint ExecutionParametersDataSizeInBytes) ExecuteMetaCommand;
				public function void(ID3D12GraphicsCommandList4 *self, D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, uint32 NumPostbuildInfoDescs, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs) BuildRaytracingAccelerationStructure;
				public function void(ID3D12GraphicsCommandList4 *self, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, uint32 NumSourceAccelerationStructures, uint64* pSourceAccelerationStructureData) EmitRaytracingAccelerationStructurePostbuildInfo;
				public function void(ID3D12GraphicsCommandList4 *self, uint64 DestAccelerationStructureData, uint64 SourceAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode) CopyRaytracingAccelerationStructure;
				public function void(ID3D12GraphicsCommandList4 *self, ID3D12StateObject* pStateObject) SetPipelineState1;
				public function void(ID3D12GraphicsCommandList4 *self, D3D12_DISPATCH_RAYS_DESC* pDesc) DispatchRays;
			}
		}
		[CRepr]
		public struct ID3D12ShaderCacheSession : ID3D12DeviceChild
		{
			public const new Guid IID = .(0x28e2495d, 0x0f64, 0x4ae4, 0xa6, 0xec, 0x12, 0x92, 0x55, 0xdc, 0x49, 0xa8);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DeviceChild.VTable
			{
				public function HRESULT(ID3D12ShaderCacheSession *self, void* pKey, uint32 KeySize, void* pValue, uint32* pValueSize) FindValue;
				public function HRESULT(ID3D12ShaderCacheSession *self, void* pKey, uint32 KeySize, void* pValue, uint32 ValueSize) StoreValue;
				public function void(ID3D12ShaderCacheSession *self) SetDeleteOnDestroy;
				public function D3D12_SHADER_CACHE_SESSION_DESC(ID3D12ShaderCacheSession *self) GetDesc;
			}
		}
		[CRepr]
		public struct ID3D12Device9 : ID3D12Device8
		{
			public const new Guid IID = .(0x4c80e962, 0xf032, 0x4f60, 0xbc, 0x9e, 0xeb, 0xc2, 0xcf, 0xa1, 0xd8, 0x3c);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Device8.VTable
			{
				public function HRESULT(ID3D12Device9 *self, D3D12_SHADER_CACHE_SESSION_DESC* pDesc, Guid* riid, void** ppvSession) CreateShaderCacheSession;
				public function HRESULT(ID3D12Device9 *self, D3D12_SHADER_CACHE_KIND_FLAGS Kinds, D3D12_SHADER_CACHE_CONTROL_FLAGS Control) ShaderCacheControl;
				public function HRESULT(ID3D12Device9 *self, D3D12_COMMAND_QUEUE_DESC* pDesc, Guid* CreatorID, Guid* riid, void** ppCommandQueue) CreateCommandQueue1;
			}
		}
		[CRepr]
		public struct ID3D12Tools : IUnknown
		{
			public const new Guid IID = .(0x7071e1f0, 0xe84b, 0x4b33, 0x97, 0x4f, 0x12, 0xfa, 0x49, 0xde, 0x65, 0xc5);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12Tools *self, BOOL bEnable) EnableShaderInstrumentation;
				public function BOOL(ID3D12Tools *self) ShaderInstrumentationEnabled;
			}
		}
		[CRepr]
		public struct ID3D12Debug : IUnknown
		{
			public const new Guid IID = .(0x344488b7, 0x6846, 0x474b, 0xb9, 0x89, 0xf0, 0x27, 0x44, 0x82, 0x45, 0xe0);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12Debug *self) EnableDebugLayer;
			}
		}
		[CRepr]
		public struct ID3D12Debug1 : IUnknown
		{
			public const new Guid IID = .(0xaffaa4ca, 0x63fe, 0x4d8e, 0xb8, 0xad, 0x15, 0x90, 0x00, 0xaf, 0x43, 0x04);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12Debug1 *self) EnableDebugLayer;
				public function void(ID3D12Debug1 *self, BOOL Enable) SetEnableGPUBasedValidation;
				public function void(ID3D12Debug1 *self, BOOL Enable) SetEnableSynchronizedCommandQueueValidation;
			}
		}
		[CRepr]
		public struct ID3D12Debug2 : IUnknown
		{
			public const new Guid IID = .(0x93a665c4, 0xa3b2, 0x4e5d, 0xb6, 0x92, 0xa2, 0x6a, 0xe1, 0x4e, 0x33, 0x74);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12Debug2 *self, D3D12_GPU_BASED_VALIDATION_FLAGS Flags) SetGPUBasedValidationFlags;
			}
		}
		[CRepr]
		public struct ID3D12Debug3 : ID3D12Debug
		{
			public const new Guid IID = .(0x5cf4e58f, 0xf671, 0x4ff1, 0xa5, 0x42, 0x36, 0x86, 0xe3, 0xd1, 0x53, 0xd1);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Debug.VTable
			{
				public function void(ID3D12Debug3 *self, BOOL Enable) SetEnableGPUBasedValidation;
				public function void(ID3D12Debug3 *self, BOOL Enable) SetEnableSynchronizedCommandQueueValidation;
				public function void(ID3D12Debug3 *self, D3D12_GPU_BASED_VALIDATION_FLAGS Flags) SetGPUBasedValidationFlags;
			}
		}
		[CRepr]
		public struct ID3D12Debug4 : ID3D12Debug3
		{
			public const new Guid IID = .(0x014b816e, 0x9ec5, 0x4a2f, 0xa8, 0x45, 0xff, 0xbe, 0x44, 0x1c, 0xe1, 0x3a);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Debug3.VTable
			{
				public function void(ID3D12Debug4 *self) DisableDebugLayer;
			}
		}
		[CRepr]
		public struct ID3D12Debug5 : ID3D12Debug4
		{
			public const new Guid IID = .(0x548d6b12, 0x09fa, 0x40e0, 0x90, 0x69, 0x5d, 0xcd, 0x58, 0x9a, 0x52, 0xc9);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12Debug4.VTable
			{
				public function void(ID3D12Debug5 *self, BOOL Enable) SetEnableAutoName;
			}
		}
		[CRepr]
		public struct ID3D12DebugDevice1 : IUnknown
		{
			public const new Guid IID = .(0xa9b71770, 0xd099, 0x4a65, 0xa6, 0x98, 0x3d, 0xee, 0x10, 0x02, 0x0f, 0x88);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12DebugDevice1 *self, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, void* pData, uint32 DataSize) SetDebugParameter;
				public function HRESULT(ID3D12DebugDevice1 *self, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, void* pData, uint32 DataSize) GetDebugParameter;
				public function HRESULT(ID3D12DebugDevice1 *self, D3D12_RLDO_FLAGS Flags) ReportLiveDeviceObjects;
			}
		}
		[CRepr]
		public struct ID3D12DebugDevice : IUnknown
		{
			public const new Guid IID = .(0x3febd6dd, 0x4973, 0x4787, 0x81, 0x94, 0xe4, 0x5f, 0x9e, 0x28, 0x92, 0x3e);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12DebugDevice *self, D3D12_DEBUG_FEATURE Mask) SetFeatureMask;
				public function D3D12_DEBUG_FEATURE(ID3D12DebugDevice *self) GetFeatureMask;
				public function HRESULT(ID3D12DebugDevice *self, D3D12_RLDO_FLAGS Flags) ReportLiveDeviceObjects;
			}
		}
		[CRepr]
		public struct ID3D12DebugDevice2 : ID3D12DebugDevice
		{
			public const new Guid IID = .(0x60eccbc1, 0x378d, 0x4df1, 0x89, 0x4c, 0xf8, 0xac, 0x5c, 0xe4, 0xd7, 0xdd);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DebugDevice.VTable
			{
				public function HRESULT(ID3D12DebugDevice2 *self, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, void* pData, uint32 DataSize) SetDebugParameter;
				public function HRESULT(ID3D12DebugDevice2 *self, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, void* pData, uint32 DataSize) GetDebugParameter;
			}
		}
		[CRepr]
		public struct ID3D12DebugCommandQueue : IUnknown
		{
			public const new Guid IID = .(0x09e0bf36, 0x54ac, 0x484f, 0x88, 0x47, 0x4b, 0xae, 0xea, 0xb6, 0x05, 0x3a);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function BOOL(ID3D12DebugCommandQueue *self, ID3D12Resource* pResource, uint32 Subresource, uint32 State) AssertResourceState;
			}
		}
		[CRepr]
		public struct ID3D12DebugCommandList1 : IUnknown
		{
			public const new Guid IID = .(0x102ca951, 0x311b, 0x4b01, 0xb1, 0x1f, 0xec, 0xb8, 0x3e, 0x06, 0x1b, 0x37);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function BOOL(ID3D12DebugCommandList1 *self, ID3D12Resource* pResource, uint32 Subresource, uint32 State) AssertResourceState;
				public function HRESULT(ID3D12DebugCommandList1 *self, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, void* pData, uint32 DataSize) SetDebugParameter;
				public function HRESULT(ID3D12DebugCommandList1 *self, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, void* pData, uint32 DataSize) GetDebugParameter;
			}
		}
		[CRepr]
		public struct ID3D12DebugCommandList : IUnknown
		{
			public const new Guid IID = .(0x09e0bf36, 0x54ac, 0x484f, 0x88, 0x47, 0x4b, 0xae, 0xea, 0xb6, 0x05, 0x3f);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function BOOL(ID3D12DebugCommandList *self, ID3D12Resource* pResource, uint32 Subresource, uint32 State) AssertResourceState;
				public function HRESULT(ID3D12DebugCommandList *self, D3D12_DEBUG_FEATURE Mask) SetFeatureMask;
				public function D3D12_DEBUG_FEATURE(ID3D12DebugCommandList *self) GetFeatureMask;
			}
		}
		[CRepr]
		public struct ID3D12DebugCommandList2 : ID3D12DebugCommandList
		{
			public const new Guid IID = .(0xaeb575cf, 0x4e06, 0x48be, 0xba, 0x3b, 0xc4, 0x50, 0xfc, 0x96, 0x65, 0x2e);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12DebugCommandList.VTable
			{
				public function HRESULT(ID3D12DebugCommandList2 *self, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, void* pData, uint32 DataSize) SetDebugParameter;
				public function HRESULT(ID3D12DebugCommandList2 *self, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, void* pData, uint32 DataSize) GetDebugParameter;
			}
		}
		[CRepr]
		public struct ID3D12SharingContract : IUnknown
		{
			public const new Guid IID = .(0x0adf7d52, 0x929c, 0x4e61, 0xad, 0xdb, 0xff, 0xed, 0x30, 0xde, 0x66, 0xef);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function void(ID3D12SharingContract *self, ID3D12Resource* pResource, uint32 Subresource, HWND window) Present;
				public function void(ID3D12SharingContract *self, ID3D12Fence* pFence, uint64 FenceValue) SharedFenceSignal;
				public function void(ID3D12SharingContract *self, Guid* guid) BeginCapturableWork;
				public function void(ID3D12SharingContract *self, Guid* guid) EndCapturableWork;
			}
		}
		[CRepr]
		public struct ID3D12InfoQueue : IUnknown
		{
			public const new Guid IID = .(0x0742a90b, 0xc387, 0x483f, 0xb9, 0x46, 0x30, 0xa7, 0xe4, 0xe6, 0x14, 0x58);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12InfoQueue *self, uint64 MessageCountLimit) SetMessageCountLimit;
				public function void(ID3D12InfoQueue *self) ClearStoredMessages;
				public function HRESULT(ID3D12InfoQueue *self, uint64 MessageIndex, D3D12_MESSAGE* pMessage, uint* pMessageByteLength) GetMessage;
				public function uint64(ID3D12InfoQueue *self) GetNumMessagesAllowedByStorageFilter;
				public function uint64(ID3D12InfoQueue *self) GetNumMessagesDeniedByStorageFilter;
				public function uint64(ID3D12InfoQueue *self) GetNumStoredMessages;
				public function uint64(ID3D12InfoQueue *self) GetNumStoredMessagesAllowedByRetrievalFilter;
				public function uint64(ID3D12InfoQueue *self) GetNumMessagesDiscardedByMessageCountLimit;
				public function uint64(ID3D12InfoQueue *self) GetMessageCountLimit;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_INFO_QUEUE_FILTER* pFilter) AddStorageFilterEntries;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_INFO_QUEUE_FILTER* pFilter, uint* pFilterByteLength) GetStorageFilter;
				public function void(ID3D12InfoQueue *self) ClearStorageFilter;
				public function HRESULT(ID3D12InfoQueue *self) PushEmptyStorageFilter;
				public function HRESULT(ID3D12InfoQueue *self) PushCopyOfStorageFilter;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_INFO_QUEUE_FILTER* pFilter) PushStorageFilter;
				public function void(ID3D12InfoQueue *self) PopStorageFilter;
				public function uint32(ID3D12InfoQueue *self) GetStorageFilterStackSize;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_INFO_QUEUE_FILTER* pFilter) AddRetrievalFilterEntries;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_INFO_QUEUE_FILTER* pFilter, uint* pFilterByteLength) GetRetrievalFilter;
				public function void(ID3D12InfoQueue *self) ClearRetrievalFilter;
				public function HRESULT(ID3D12InfoQueue *self) PushEmptyRetrievalFilter;
				public function HRESULT(ID3D12InfoQueue *self) PushCopyOfRetrievalFilter;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_INFO_QUEUE_FILTER* pFilter) PushRetrievalFilter;
				public function void(ID3D12InfoQueue *self) PopRetrievalFilter;
				public function uint32(ID3D12InfoQueue *self) GetRetrievalFilterStackSize;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_MESSAGE_CATEGORY Category, D3D12_MESSAGE_SEVERITY Severity, D3D12_MESSAGE_ID ID, PSTR pDescription) AddMessage;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_MESSAGE_SEVERITY Severity, PSTR pDescription) AddApplicationMessage;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_MESSAGE_CATEGORY Category, BOOL bEnable) SetBreakOnCategory;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_MESSAGE_SEVERITY Severity, BOOL bEnable) SetBreakOnSeverity;
				public function HRESULT(ID3D12InfoQueue *self, D3D12_MESSAGE_ID ID, BOOL bEnable) SetBreakOnID;
				public function BOOL(ID3D12InfoQueue *self, D3D12_MESSAGE_CATEGORY Category) GetBreakOnCategory;
				public function BOOL(ID3D12InfoQueue *self, D3D12_MESSAGE_SEVERITY Severity) GetBreakOnSeverity;
				public function BOOL(ID3D12InfoQueue *self, D3D12_MESSAGE_ID ID) GetBreakOnID;
				public function void(ID3D12InfoQueue *self, BOOL bMute) SetMuteDebugOutput;
				public function BOOL(ID3D12InfoQueue *self) GetMuteDebugOutput;
			}
		}
		[CRepr]
		public struct ID3D12InfoQueue1 : ID3D12InfoQueue
		{
			public const new Guid IID = .(0x2852dd88, 0xb484, 0x4c0c, 0xb6, 0xb1, 0x67, 0x16, 0x85, 0x00, 0xe6, 0x00);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12InfoQueue.VTable
			{
				public function HRESULT(ID3D12InfoQueue1 *self, D3D12MessageFunc CallbackFunc, D3D12_MESSAGE_CALLBACK_FLAGS CallbackFilterFlags, void* pContext, uint32* pCallbackCookie) RegisterMessageCallback;
				public function HRESULT(ID3D12InfoQueue1 *self, uint32 CallbackCookie) UnregisterMessageCallback;
			}
		}
		[CRepr]
		public struct ID3D12SDKConfiguration : IUnknown
		{
			public const new Guid IID = .(0xe9eb5314, 0x33aa, 0x42b2, 0xa7, 0x18, 0xd7, 0x7f, 0x58, 0xb1, 0xf1, 0xc7);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12SDKConfiguration *self, uint32 SDKVersion, PSTR SDKPath) SetSDKVersion;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList5 : ID3D12GraphicsCommandList4
		{
			public const new Guid IID = .(0x55050859, 0x4024, 0x474c, 0x87, 0xf5, 0x64, 0x72, 0xea, 0xee, 0x44, 0xea);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12GraphicsCommandList4.VTable
			{
				public function void(ID3D12GraphicsCommandList5 *self, D3D12_SHADING_RATE baseShadingRate, D3D12_SHADING_RATE_COMBINER* combiners) RSSetShadingRate;
				public function void(ID3D12GraphicsCommandList5 *self, ID3D12Resource* shadingRateImage) RSSetShadingRateImage;
			}
		}
		[CRepr]
		public struct ID3D12GraphicsCommandList6 : ID3D12GraphicsCommandList5
		{
			public const new Guid IID = .(0xc3827890, 0xe548, 0x4cfa, 0x96, 0xcf, 0x56, 0x89, 0xa9, 0x37, 0x0f, 0x80);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : ID3D12GraphicsCommandList5.VTable
			{
				public function void(ID3D12GraphicsCommandList6 *self, uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ) DispatchMesh;
			}
		}
		[CRepr]
		public struct ID3D12ShaderReflectionType
		{
			public const new Guid IID = .(0xe913c351, 0x783d, 0x48ca, 0xa1, 0xd1, 0x4f, 0x30, 0x62, 0x84, 0xad, 0x56);
			
			protected VTable* vt;
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable
			{
				public function HRESULT(ID3D12ShaderReflectionType *self, D3D12_SHADER_TYPE_DESC* pDesc) GetDesc;
				public function ID3D12ShaderReflectionType*(ID3D12ShaderReflectionType *self, uint32 Index) GetMemberTypeByIndex;
				public function ID3D12ShaderReflectionType*(ID3D12ShaderReflectionType *self, PSTR Name) GetMemberTypeByName;
				public function PSTR(ID3D12ShaderReflectionType *self, uint32 Index) GetMemberTypeName;
				public function HRESULT(ID3D12ShaderReflectionType *self, ID3D12ShaderReflectionType* pType) IsEqual;
				public function ID3D12ShaderReflectionType*(ID3D12ShaderReflectionType *self) GetSubType;
				public function ID3D12ShaderReflectionType*(ID3D12ShaderReflectionType *self) GetBaseClass;
				public function uint32(ID3D12ShaderReflectionType *self) GetNumInterfaces;
				public function ID3D12ShaderReflectionType*(ID3D12ShaderReflectionType *self, uint32 uIndex) GetInterfaceByIndex;
				public function HRESULT(ID3D12ShaderReflectionType *self, ID3D12ShaderReflectionType* pType) IsOfType;
				public function HRESULT(ID3D12ShaderReflectionType *self, ID3D12ShaderReflectionType* pBase) ImplementsInterface;
			}
		}
		[CRepr]
		public struct ID3D12ShaderReflectionVariable
		{
			public const new Guid IID = .(0x8337a8a6, 0xa216, 0x444a, 0xb2, 0xf4, 0x31, 0x47, 0x33, 0xa7, 0x3a, 0xea);
			
			protected VTable* vt;
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable
			{
				public function HRESULT(ID3D12ShaderReflectionVariable *self, D3D12_SHADER_VARIABLE_DESC* pDesc) GetDesc;
				public function ID3D12ShaderReflectionType*(ID3D12ShaderReflectionVariable *self) GetType;
				public function ID3D12ShaderReflectionConstantBuffer*(ID3D12ShaderReflectionVariable *self) GetBuffer;
				public function uint32(ID3D12ShaderReflectionVariable *self, uint32 uArrayIndex) GetInterfaceSlot;
			}
		}
		[CRepr]
		public struct ID3D12ShaderReflectionConstantBuffer
		{
			public const new Guid IID = .(0xc59598b4, 0x48b3, 0x4869, 0xb9, 0xb1, 0xb1, 0x61, 0x8b, 0x14, 0xa8, 0xb7);
			
			protected VTable* vt;
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable
			{
				public function HRESULT(ID3D12ShaderReflectionConstantBuffer *self, D3D12_SHADER_BUFFER_DESC* pDesc) GetDesc;
				public function ID3D12ShaderReflectionVariable*(ID3D12ShaderReflectionConstantBuffer *self, uint32 Index) GetVariableByIndex;
				public function ID3D12ShaderReflectionVariable*(ID3D12ShaderReflectionConstantBuffer *self, PSTR Name) GetVariableByName;
			}
		}
		[CRepr]
		public struct ID3D12ShaderReflection : IUnknown
		{
			public const new Guid IID = .(0x5a58797d, 0xa72c, 0x478d, 0x8b, 0xa2, 0xef, 0xc6, 0xb0, 0xef, 0xe8, 0x8e);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12ShaderReflection *self, D3D12_SHADER_DESC* pDesc) GetDesc;
				public function ID3D12ShaderReflectionConstantBuffer*(ID3D12ShaderReflection *self, uint32 Index) GetConstantBufferByIndex;
				public function ID3D12ShaderReflectionConstantBuffer*(ID3D12ShaderReflection *self, PSTR Name) GetConstantBufferByName;
				public function HRESULT(ID3D12ShaderReflection *self, uint32 ResourceIndex, D3D12_SHADER_INPUT_BIND_DESC* pDesc) GetResourceBindingDesc;
				public function HRESULT(ID3D12ShaderReflection *self, uint32 ParameterIndex, D3D12_SIGNATURE_PARAMETER_DESC* pDesc) GetInputParameterDesc;
				public function HRESULT(ID3D12ShaderReflection *self, uint32 ParameterIndex, D3D12_SIGNATURE_PARAMETER_DESC* pDesc) GetOutputParameterDesc;
				public function HRESULT(ID3D12ShaderReflection *self, uint32 ParameterIndex, D3D12_SIGNATURE_PARAMETER_DESC* pDesc) GetPatchConstantParameterDesc;
				public function ID3D12ShaderReflectionVariable*(ID3D12ShaderReflection *self, PSTR Name) GetVariableByName;
				public function HRESULT(ID3D12ShaderReflection *self, PSTR Name, D3D12_SHADER_INPUT_BIND_DESC* pDesc) GetResourceBindingDescByName;
				public function uint32(ID3D12ShaderReflection *self) GetMovInstructionCount;
				public function uint32(ID3D12ShaderReflection *self) GetMovcInstructionCount;
				public function uint32(ID3D12ShaderReflection *self) GetConversionInstructionCount;
				public function uint32(ID3D12ShaderReflection *self) GetBitwiseInstructionCount;
				public function D3D_PRIMITIVE(ID3D12ShaderReflection *self) GetGSInputPrimitive;
				public function BOOL(ID3D12ShaderReflection *self) IsSampleFrequencyShader;
				public function uint32(ID3D12ShaderReflection *self) GetNumInterfaceSlots;
				public function HRESULT(ID3D12ShaderReflection *self, D3D_FEATURE_LEVEL* pLevel) GetMinFeatureLevel;
				public function uint32(ID3D12ShaderReflection *self, uint32* pSizeX, uint32* pSizeY, uint32* pSizeZ) GetThreadGroupSize;
				public function uint64(ID3D12ShaderReflection *self) GetRequiresFlags;
			}
		}
		[CRepr]
		public struct ID3D12LibraryReflection : IUnknown
		{
			public const new Guid IID = .(0x8e349d19, 0x54db, 0x4a56, 0x9d, 0xc9, 0x11, 0x9d, 0x87, 0xbd, 0xb8, 0x04);
			
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public function HRESULT(ID3D12LibraryReflection *self, D3D12_LIBRARY_DESC* pDesc) GetDesc;
				public function ID3D12FunctionReflection*(ID3D12LibraryReflection *self, int32 FunctionIndex) GetFunctionByIndex;
			}
		}
		[CRepr]
		public struct ID3D12FunctionReflection
		{
			public const new Guid IID = .(0x1108795c, 0x2772, 0x4ba9, 0xb2, 0xa8, 0xd4, 0x64, 0xdc, 0x7e, 0x27, 0x99);
			
			protected VTable* vt;
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable
			{
				public function HRESULT(ID3D12FunctionReflection *self, D3D12_FUNCTION_DESC* pDesc) GetDesc;
				public function ID3D12ShaderReflectionConstantBuffer*(ID3D12FunctionReflection *self, uint32 BufferIndex) GetConstantBufferByIndex;
				public function ID3D12ShaderReflectionConstantBuffer*(ID3D12FunctionReflection *self, PSTR Name) GetConstantBufferByName;
				public function HRESULT(ID3D12FunctionReflection *self, uint32 ResourceIndex, D3D12_SHADER_INPUT_BIND_DESC* pDesc) GetResourceBindingDesc;
				public function ID3D12ShaderReflectionVariable*(ID3D12FunctionReflection *self, PSTR Name) GetVariableByName;
				public function HRESULT(ID3D12FunctionReflection *self, PSTR Name, D3D12_SHADER_INPUT_BIND_DESC* pDesc) GetResourceBindingDescByName;
				public function ID3D12FunctionParameterReflection*(ID3D12FunctionReflection *self, int32 ParameterIndex) GetFunctionParameter;
			}
		}
		[CRepr]
		public struct ID3D12FunctionParameterReflection
		{
			public const new Guid IID = .(0xec25f42d, 0x7006, 0x4f2b, 0xb3, 0x3e, 0x02, 0xcc, 0x33, 0x75, 0x73, 0x3f);
			
			protected VTable* vt;
			public VTable* VT { get => (.)vt; }			
			[CRepr]
			public struct VTable
			{
				public function HRESULT(ID3D12FunctionParameterReflection *self, D3D12_PARAMETER_DESC* pDesc) GetDesc;
			}
		}
		
		// --- Functions ---
		
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12SerializeRootSignature(D3D12_ROOT_SIGNATURE_DESC* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob** ppBlob, ID3DBlob** ppErrorBlob);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12CreateRootSignatureDeserializer(void* pSrcData, uint SrcDataSizeInBytes, Guid* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12SerializeVersionedRootSignature(D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignature, ID3DBlob** ppBlob, ID3DBlob** ppErrorBlob);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12CreateVersionedRootSignatureDeserializer(void* pSrcData, uint SrcDataSizeInBytes, Guid* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12CreateDevice(IUnknown* pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, Guid* riid, void** ppDevice);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12GetDebugInterface(Guid* riid, void** ppvDebug);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12EnableExperimentalFeatures(uint32 NumFeatures, Guid* pIIDs, void* pConfigurationStructs, uint32* pConfigurationStructSizes);
		[Import("d3d12.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT D3D12GetInterface(Guid* rclsid, Guid* riid, void** ppvDebug);
		
	}
}
