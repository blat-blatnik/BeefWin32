using System;

// namespace Web.MsHtml
namespace Win32
{
	extension Win32
	{
		// --- Constants ---
		
		public const uint32 DISPID_STYLESHEETSCOLLECTION_NAMED_MAX = 1999999;
		public const int32 DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = -5501;
		public const int32 DISPID_AMBIENT_SILENT = -5502;
		public const Guid SID_SEditCommandTarget = .(0x3050f4b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CGID_EditStateCommands = .(0x3050f4b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid SID_SHTMLEditHost = .(0x3050f6a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid SID_SHTMLEditServices = .(0x3050f7f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const uint32 COOKIEACTION_NONE = 0;
		public const uint32 COOKIEACTION_ACCEPT = 1;
		public const uint32 COOKIEACTION_REJECT = 2;
		public const uint32 COOKIEACTION_DOWNGRADE = 4;
		public const uint32 COOKIEACTION_LEASH = 8;
		public const uint32 COOKIEACTION_SUPPRESS = 16;
		public const uint32 COOKIEACTION_READ = 32;
		public const uint32 PRIVACY_URLISTOPLEVEL = 65536;
		public const uint32 PRIVACY_URLHASCOMPACTPOLICY = 131072;
		public const uint32 PRIVACY_URLHASPOSTDATA = 524288;
		public const uint32 PRIVACY_URLHASPOLICYREFLINK = 1048576;
		public const uint32 PRIVACY_URLHASPOLICYREFHEADER = 2097152;
		public const uint32 PRIVACY_URLHASP3PHEADER = 4194304;
		public const uint32 DEBUGCALLBACKNOTIFICATION_TIMEOUT = 1;
		public const uint32 DEBUGCALLBACKNOTIFICATION_INTERVAL = 2;
		public const uint32 DEBUGCALLBACKNOTIFICATION_IMMEDIATE = 4;
		public const uint32 DEBUGCALLBACKNOTIFICATION_ANIMATIONFRAME = 8;
		public const uint32 DEBUGCALLBACKNOTIFICATION_DOMEVENT = 16;
		public const uint32 DEBUGDOMEVENTPROPAGATIONSTATUS_DEFAULTCANCELED = 1;
		public const uint32 DEBUGDOMEVENTPROPAGATIONSTATUS_STOPIMMEDIATEPROPAGATION = 2;
		public const uint32 DEBUGDOMEVENTPROPAGATIONSTATUS_STOPPROPAGATION = 4;
		public const uint32 DISPID_BEFORENAVIGATE = 100;
		public const uint32 DISPID_NAVIGATECOMPLETE = 101;
		public const uint32 DISPID_STATUSTEXTCHANGE = 102;
		public const uint32 DISPID_QUIT = 103;
		public const uint32 DISPID_DOWNLOADCOMPLETE = 104;
		public const uint32 DISPID_COMMANDSTATECHANGE = 105;
		public const uint32 DISPID_DOWNLOADBEGIN = 106;
		public const uint32 DISPID_NEWWINDOW = 107;
		public const uint32 DISPID_PROGRESSCHANGE = 108;
		public const uint32 DISPID_WINDOWMOVE = 109;
		public const uint32 DISPID_WINDOWRESIZE = 110;
		public const uint32 DISPID_WINDOWACTIVATE = 111;
		public const uint32 DISPID_PROPERTYCHANGE = 112;
		public const uint32 DISPID_TITLECHANGE = 113;
		public const uint32 DISPID_TITLEICONCHANGE = 114;
		public const uint32 DISPID_FRAMEBEFORENAVIGATE = 200;
		public const uint32 DISPID_FRAMENAVIGATECOMPLETE = 201;
		public const uint32 DISPID_FRAMENEWWINDOW = 204;
		public const uint32 DISPID_BEFORENAVIGATE2 = 250;
		public const uint32 DISPID_NEWWINDOW2 = 251;
		public const uint32 DISPID_NAVIGATECOMPLETE2 = 252;
		public const uint32 DISPID_ONQUIT = 253;
		public const uint32 DISPID_ONVISIBLE = 254;
		public const uint32 DISPID_ONTOOLBAR = 255;
		public const uint32 DISPID_ONMENUBAR = 256;
		public const uint32 DISPID_ONSTATUSBAR = 257;
		public const uint32 DISPID_ONFULLSCREEN = 258;
		public const uint32 DISPID_DOCUMENTCOMPLETE = 259;
		public const uint32 DISPID_ONTHEATERMODE = 260;
		public const uint32 DISPID_ONADDRESSBAR = 261;
		public const uint32 DISPID_WINDOWSETRESIZABLE = 262;
		public const uint32 DISPID_WINDOWCLOSING = 263;
		public const uint32 DISPID_WINDOWSETLEFT = 264;
		public const uint32 DISPID_WINDOWSETTOP = 265;
		public const uint32 DISPID_WINDOWSETWIDTH = 266;
		public const uint32 DISPID_WINDOWSETHEIGHT = 267;
		public const uint32 DISPID_CLIENTTOHOSTWINDOW = 268;
		public const uint32 DISPID_SETSECURELOCKICON = 269;
		public const uint32 DISPID_FILEDOWNLOAD = 270;
		public const uint32 DISPID_NAVIGATEERROR = 271;
		public const uint32 DISPID_PRIVACYIMPACTEDSTATECHANGE = 272;
		public const uint32 DISPID_NEWWINDOW3 = 273;
		public const uint32 DISPID_VIEWUPDATE = 281;
		public const uint32 DISPID_SETPHISHINGFILTERSTATUS = 282;
		public const uint32 DISPID_WINDOWSTATECHANGED = 283;
		public const uint32 DISPID_NEWPROCESS = 284;
		public const uint32 DISPID_THIRDPARTYURLBLOCKED = 285;
		public const uint32 DISPID_REDIRECTXDOMAINBLOCKED = 286;
		public const uint32 DISPID_WEBWORKERSTARTED = 288;
		public const uint32 DISPID_WEBWORKERFINISHED = 289;
		public const uint32 DISPID_BEFORESCRIPTEXECUTE = 290;
		public const uint32 DISPID_PRINTTEMPLATEINSTANTIATION = 225;
		public const uint32 DISPID_PRINTTEMPLATETEARDOWN = 226;
		public const uint32 DISPID_UPDATEPAGESTATUS = 227;
		public const uint32 DISPID_WINDOWREGISTERED = 200;
		public const uint32 DISPID_WINDOWREVOKED = 201;
		public const uint32 DISPID_RESETFIRSTBOOTMODE = 1;
		public const uint32 DISPID_RESETSAFEMODE = 2;
		public const uint32 DISPID_REFRESHOFFLINEDESKTOP = 3;
		public const uint32 DISPID_ADDFAVORITE = 4;
		public const uint32 DISPID_ADDCHANNEL = 5;
		public const uint32 DISPID_ADDDESKTOPCOMPONENT = 6;
		public const uint32 DISPID_ISSUBSCRIBED = 7;
		public const uint32 DISPID_NAVIGATEANDFIND = 8;
		public const uint32 DISPID_IMPORTEXPORTFAVORITES = 9;
		public const uint32 DISPID_AUTOCOMPLETESAVEFORM = 10;
		public const uint32 DISPID_AUTOSCAN = 11;
		public const uint32 DISPID_AUTOCOMPLETEATTACH = 12;
		public const uint32 DISPID_SHOWBROWSERUI = 13;
		public const uint32 DISPID_ADDSEARCHPROVIDER = 14;
		public const uint32 DISPID_RUNONCESHOWN = 15;
		public const uint32 DISPID_SKIPRUNONCE = 16;
		public const uint32 DISPID_CUSTOMIZESETTINGS = 17;
		public const uint32 DISPID_SQMENABLED = 18;
		public const uint32 DISPID_PHISHINGENABLED = 19;
		public const uint32 DISPID_BRANDIMAGEURI = 20;
		public const uint32 DISPID_SKIPTABSWELCOME = 21;
		public const uint32 DISPID_DIAGNOSECONNECTION = 22;
		public const uint32 DISPID_CUSTOMIZECLEARTYPE = 23;
		public const uint32 DISPID_ISSEARCHPROVIDERINSTALLED = 24;
		public const uint32 DISPID_ISSEARCHMIGRATED = 25;
		public const uint32 DISPID_DEFAULTSEARCHPROVIDER = 26;
		public const uint32 DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE = 27;
		public const uint32 DISPID_RUNONCEHASSHOWN = 28;
		public const uint32 DISPID_SEARCHGUIDEURL = 29;
		public const uint32 DISPID_ADDSERVICE = 30;
		public const uint32 DISPID_ISSERVICEINSTALLED = 31;
		public const uint32 DISPID_ADDTOFAVORITESBAR = 32;
		public const uint32 DISPID_BUILDNEWTABPAGE = 33;
		public const uint32 DISPID_SETRECENTLYCLOSEDVISIBLE = 34;
		public const uint32 DISPID_SETACTIVITIESVISIBLE = 35;
		public const uint32 DISPID_CONTENTDISCOVERYRESET = 36;
		public const uint32 DISPID_INPRIVATEFILTERINGENABLED = 37;
		public const uint32 DISPID_SUGGESTEDSITESENABLED = 38;
		public const uint32 DISPID_ENABLESUGGESTEDSITES = 39;
		public const uint32 DISPID_NAVIGATETOSUGGESTEDSITES = 40;
		public const uint32 DISPID_SHOWTABSHELP = 41;
		public const uint32 DISPID_SHOWINPRIVATEHELP = 42;
		public const uint32 DISPID_ISSITEMODE = 43;
		public const uint32 DISPID_SETSITEMODEICONOVERLAY = 44;
		public const uint32 DISPID_CLEARSITEMODEICONOVERLAY = 45;
		public const uint32 DISPID_UPDATETHUMBNAILBUTTON = 46;
		public const uint32 DISPID_SETTHUMBNAILBUTTONS = 47;
		public const uint32 DISPID_ADDTHUMBNAILBUTTONS = 48;
		public const uint32 DISPID_ADDSITEMODE = 49;
		public const uint32 DISPID_SETSITEMODEPROPERTIES = 50;
		public const uint32 DISPID_SITEMODECREATEJUMPLIST = 51;
		public const uint32 DISPID_SITEMODEADDJUMPLISTITEM = 52;
		public const uint32 DISPID_SITEMODECLEARJUMPLIST = 53;
		public const uint32 DISPID_SITEMODEADDBUTTONSTYLE = 54;
		public const uint32 DISPID_SITEMODESHOWBUTTONSTYLE = 55;
		public const uint32 DISPID_SITEMODESHOWJUMPLIST = 56;
		public const uint32 DISPID_ADDTRACKINGPROTECTIONLIST = 57;
		public const uint32 DISPID_SITEMODEACTIVATE = 58;
		public const uint32 DISPID_ISSITEMODEFIRSTRUN = 59;
		public const uint32 DISPID_TRACKINGPROTECTIONENABLED = 60;
		public const uint32 DISPID_ACTIVEXFILTERINGENABLED = 61;
		public const uint32 DISPID_PROVISIONNETWORKS = 62;
		public const uint32 DISPID_REPORTSAFEURL = 63;
		public const uint32 DISPID_SITEMODEREFRESHBADGE = 64;
		public const uint32 DISPID_SITEMODECLEARBADGE = 65;
		public const uint32 DISPID_DIAGNOSECONNECTIONUILESS = 66;
		public const uint32 DISPID_LAUNCHNETWORKCLIENTHELP = 67;
		public const uint32 DISPID_CHANGEDEFAULTBROWSER = 68;
		public const uint32 DISPID_STOPPERIODICUPDATE = 69;
		public const uint32 DISPID_STARTPERIODICUPDATE = 70;
		public const uint32 DISPID_CLEARNOTIFICATION = 71;
		public const uint32 DISPID_ENABLENOTIFICATIONQUEUE = 72;
		public const uint32 DISPID_PINNEDSITESTATE = 73;
		public const uint32 DISPID_LAUNCHINTERNETOPTIONS = 74;
		public const uint32 DISPID_STARTPERIODICUPDATEBATCH = 75;
		public const uint32 DISPID_ENABLENOTIFICATIONQUEUESQUARE = 76;
		public const uint32 DISPID_ENABLENOTIFICATIONQUEUEWIDE = 77;
		public const uint32 DISPID_ENABLENOTIFICATIONQUEUELARGE = 78;
		public const uint32 DISPID_SCHEDULEDTILENOTIFICATION = 79;
		public const uint32 DISPID_REMOVESCHEDULEDTILENOTIFICATION = 80;
		public const uint32 DISPID_STARTBADGEUPDATE = 81;
		public const uint32 DISPID_STOPBADGEUPDATE = 82;
		public const uint32 DISPID_ISMETAREFERRERAVAILABLE = 83;
		public const uint32 DISPID_SETEXPERIMENTALFLAG = 84;
		public const uint32 DISPID_GETEXPERIMENTALFLAG = 85;
		public const uint32 DISPID_SETEXPERIMENTALVALUE = 86;
		public const uint32 DISPID_GETEXPERIMENTALVALUE = 87;
		public const uint32 DISPID_HASNEEDIEAUTOLAUNCHFLAG = 88;
		public const uint32 DISPID_GETNEEDIEAUTOLAUNCHFLAG = 89;
		public const uint32 DISPID_SETNEEDIEAUTOLAUNCHFLAG = 90;
		public const uint32 DISPID_LAUNCHIE = 91;
		public const uint32 DISPID_RESETEXPERIMENTALFLAGS = 92;
		public const uint32 DISPID_GETCVLISTDATA = 93;
		public const uint32 DISPID_GETCVLISTLOCALDATA = 94;
		public const uint32 DISPID_GETEMIELISTDATA = 95;
		public const uint32 DISPID_GETEMIELISTLOCALDATA = 96;
		public const uint32 DISPID_OPENFAVORITESPANE = 97;
		public const uint32 DISPID_OPENFAVORITESSETTINGS = 98;
		public const uint32 DISPID_LAUNCHINHVSI = 99;
		public const uint32 DISPID_GETNEEDHVSIAUTOLAUNCHFLAG = 100;
		public const uint32 DISPID_SETNEEDHVSIAUTOLAUNCHFLAG = 101;
		public const uint32 DISPID_HASNEEDHVSIAUTOLAUNCHFLAG = 102;
		public const uint32 DISPID_GETOSSKU = 103;
		public const uint32 DISPID_SETMSDEFAULTS = 104;
		public const uint32 DISPID_SHELLUIHELPERLAST = 105;
		public const uint32 DISPID_ADVANCEERROR = 10;
		public const uint32 DISPID_RETREATERROR = 11;
		public const uint32 DISPID_CANADVANCEERROR = 12;
		public const uint32 DISPID_CANRETREATERROR = 13;
		public const uint32 DISPID_GETERRORLINE = 14;
		public const uint32 DISPID_GETERRORCHAR = 15;
		public const uint32 DISPID_GETERRORCODE = 16;
		public const uint32 DISPID_GETERRORMSG = 17;
		public const uint32 DISPID_GETERRORURL = 18;
		public const uint32 DISPID_GETDETAILSSTATE = 19;
		public const uint32 DISPID_SETDETAILSSTATE = 20;
		public const uint32 DISPID_GETPERERRSTATE = 21;
		public const uint32 DISPID_SETPERERRSTATE = 22;
		public const uint32 DISPID_GETALWAYSSHOWLOCKSTATE = 23;
		public const uint32 DISPID_FAVSELECTIONCHANGE = 1;
		public const uint32 DISPID_SELECTIONCHANGE = 2;
		public const uint32 DISPID_DOUBLECLICK = 3;
		public const uint32 DISPID_INITIALIZED = 4;
		public const uint32 DISPID_MOVESELECTIONUP = 1;
		public const uint32 DISPID_MOVESELECTIONDOWN = 2;
		public const uint32 DISPID_RESETSORT = 3;
		public const uint32 DISPID_NEWFOLDER = 4;
		public const uint32 DISPID_SYNCHRONIZE = 5;
		public const uint32 DISPID_IMPORT = 6;
		public const uint32 DISPID_EXPORT = 7;
		public const uint32 DISPID_INVOKECONTEXTMENU = 8;
		public const uint32 DISPID_MOVESELECTIONTO = 9;
		public const uint32 DISPID_SUBSCRIPTIONSENABLED = 10;
		public const uint32 DISPID_CREATESUBSCRIPTION = 11;
		public const uint32 DISPID_DELETESUBSCRIPTION = 12;
		public const uint32 DISPID_SETROOT = 13;
		public const uint32 DISPID_ENUMOPTIONS = 14;
		public const uint32 DISPID_SELECTEDITEM = 15;
		public const uint32 DISPID_ROOT = 16;
		public const uint32 DISPID_DEPTH = 17;
		public const uint32 DISPID_MODE = 18;
		public const uint32 DISPID_FLAGS = 19;
		public const uint32 DISPID_TVFLAGS = 20;
		public const uint32 DISPID_NSCOLUMNS = 21;
		public const uint32 DISPID_COUNTVIEWTYPES = 22;
		public const uint32 DISPID_SETVIEWTYPE = 23;
		public const uint32 DISPID_SELECTEDITEMS = 24;
		public const uint32 DISPID_EXPAND = 25;
		public const uint32 DISPID_UNSELECTALL = 26;
		public const uint32 TF_NAVIGATE = 2142153644;
		public const uint32 REGSTR_VAL_SMOOTHSCROLL_DEF = 1;
		public const uint32 REGSTR_VAL_USEICM_DEF = 0;
		public const uint32 MAX_SEARCH_FORMAT_STRING = 255;
		public const uint32 REGSTR_VAL_SECURITYWARNONSEND_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYWARNONVIEW_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = 0;
		public const uint32 REGSTR_VAL_SECURITYACTIVEX_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = 1;
		public const uint32 REGSTR_VAL_SECURITYJAVA_DEF = 1;
		public const uint32 REGSTR_VAL_JAVAJIT_DEF = 0;
		public const uint32 REGSTR_VAL_JAVALOGGING_DEF = 0;
		public const uint32 REGSTR_VAL_VISIBLEBANDS_DEF = 7;
		public const uint32 TOOLSBAND = 1;
		public const uint32 ADDRESSBAND = 2;
		public const uint32 LINKSBAND = 4;
		public const uint32 REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = 1;
		public const int32 IE_USE_OE_PRESENT_HKEY = -2147483646;
		public const int32 IE_USE_OE_MAIL_HKEY = -2147483647;
		public const int32 IE_USE_OE_NEWS_HKEY = -2147483647;
		public const uint32 REGSTR_VAL_FONT_SIZE_DEF = 2;
		public const uint32 IDM_UNKNOWN = 0;
		public const uint32 IDM_ALIGNBOTTOM = 1;
		public const uint32 IDM_ALIGNHORIZONTALCENTERS = 2;
		public const uint32 IDM_ALIGNLEFT = 3;
		public const uint32 IDM_ALIGNRIGHT = 4;
		public const uint32 IDM_ALIGNTOGRID = 5;
		public const uint32 IDM_ALIGNTOP = 6;
		public const uint32 IDM_ALIGNVERTICALCENTERS = 7;
		public const uint32 IDM_ARRANGEBOTTOM = 8;
		public const uint32 IDM_ARRANGERIGHT = 9;
		public const uint32 IDM_BRINGFORWARD = 10;
		public const uint32 IDM_BRINGTOFRONT = 11;
		public const uint32 IDM_CENTERHORIZONTALLY = 12;
		public const uint32 IDM_CENTERVERTICALLY = 13;
		public const uint32 IDM_CODE = 14;
		public const uint32 IDM_DELETE = 17;
		public const uint32 IDM_FONTNAME = 18;
		public const uint32 IDM_FONTSIZE = 19;
		public const uint32 IDM_GROUP = 20;
		public const uint32 IDM_HORIZSPACECONCATENATE = 21;
		public const uint32 IDM_HORIZSPACEDECREASE = 22;
		public const uint32 IDM_HORIZSPACEINCREASE = 23;
		public const uint32 IDM_HORIZSPACEMAKEEQUAL = 24;
		public const uint32 IDM_INSERTOBJECT = 25;
		public const uint32 IDM_MULTILEVELREDO = 30;
		public const uint32 IDM_SENDBACKWARD = 32;
		public const uint32 IDM_SENDTOBACK = 33;
		public const uint32 IDM_SHOWTABLE = 34;
		public const uint32 IDM_SIZETOCONTROL = 35;
		public const uint32 IDM_SIZETOCONTROLHEIGHT = 36;
		public const uint32 IDM_SIZETOCONTROLWIDTH = 37;
		public const uint32 IDM_SIZETOFIT = 38;
		public const uint32 IDM_SIZETOGRID = 39;
		public const uint32 IDM_SNAPTOGRID = 40;
		public const uint32 IDM_TABORDER = 41;
		public const uint32 IDM_TOOLBOX = 42;
		public const uint32 IDM_MULTILEVELUNDO = 44;
		public const uint32 IDM_UNGROUP = 45;
		public const uint32 IDM_VERTSPACECONCATENATE = 46;
		public const uint32 IDM_VERTSPACEDECREASE = 47;
		public const uint32 IDM_VERTSPACEINCREASE = 48;
		public const uint32 IDM_VERTSPACEMAKEEQUAL = 49;
		public const uint32 IDM_JUSTIFYFULL = 50;
		public const uint32 IDM_BACKCOLOR = 51;
		public const uint32 IDM_BOLD = 52;
		public const uint32 IDM_BORDERCOLOR = 53;
		public const uint32 IDM_FLAT = 54;
		public const uint32 IDM_FORECOLOR = 55;
		public const uint32 IDM_ITALIC = 56;
		public const uint32 IDM_JUSTIFYCENTER = 57;
		public const uint32 IDM_JUSTIFYGENERAL = 58;
		public const uint32 IDM_JUSTIFYLEFT = 59;
		public const uint32 IDM_JUSTIFYRIGHT = 60;
		public const uint32 IDM_RAISED = 61;
		public const uint32 IDM_SUNKEN = 62;
		public const uint32 IDM_UNDERLINE = 63;
		public const uint32 IDM_CHISELED = 64;
		public const uint32 IDM_ETCHED = 65;
		public const uint32 IDM_SHADOWED = 66;
		public const uint32 IDM_FIND = 67;
		public const uint32 IDM_SHOWGRID = 69;
		public const uint32 IDM_OBJECTVERBLIST0 = 72;
		public const uint32 IDM_OBJECTVERBLIST1 = 73;
		public const uint32 IDM_OBJECTVERBLIST2 = 74;
		public const uint32 IDM_OBJECTVERBLIST3 = 75;
		public const uint32 IDM_OBJECTVERBLIST4 = 76;
		public const uint32 IDM_OBJECTVERBLIST5 = 77;
		public const uint32 IDM_OBJECTVERBLIST6 = 78;
		public const uint32 IDM_OBJECTVERBLIST7 = 79;
		public const uint32 IDM_OBJECTVERBLIST8 = 80;
		public const uint32 IDM_OBJECTVERBLIST9 = 81;
		public const uint32 IDM_OBJECTVERBLISTLAST = 81;
		public const uint32 IDM_CONVERTOBJECT = 82;
		public const uint32 IDM_CUSTOMCONTROL = 83;
		public const uint32 IDM_CUSTOMIZEITEM = 84;
		public const uint32 IDM_RENAME = 85;
		public const uint32 IDM_IMPORT = 86;
		public const uint32 IDM_NEWPAGE = 87;
		public const uint32 IDM_MOVE = 88;
		public const uint32 IDM_CANCEL = 89;
		public const uint32 IDM_FONT = 90;
		public const uint32 IDM_STRIKETHROUGH = 91;
		public const uint32 IDM_DELETEWORD = 92;
		public const uint32 IDM_EXECPRINT = 93;
		public const uint32 IDM_JUSTIFYNONE = 94;
		public const uint32 IDM_TRISTATEBOLD = 95;
		public const uint32 IDM_TRISTATEITALIC = 96;
		public const uint32 IDM_TRISTATEUNDERLINE = 97;
		public const uint32 IDM_FORWARDDELETE = 98;
		public const uint32 IDM_FOLLOW_ANCHOR = 2008;
		public const uint32 IDM_INSINPUTIMAGE = 2114;
		public const uint32 IDM_INSINPUTBUTTON = 2115;
		public const uint32 IDM_INSINPUTRESET = 2116;
		public const uint32 IDM_INSINPUTSUBMIT = 2117;
		public const uint32 IDM_INSINPUTUPLOAD = 2118;
		public const uint32 IDM_INSFIELDSET = 2119;
		public const uint32 IDM_PASTEINSERT = 2120;
		public const uint32 IDM_REPLACE = 2121;
		public const uint32 IDM_EDITSOURCE = 2122;
		public const uint32 IDM_BOOKMARK = 2123;
		public const uint32 IDM_HYPERLINK = 2124;
		public const uint32 IDM_UNLINK = 2125;
		public const uint32 IDM_BROWSEMODE = 2126;
		public const uint32 IDM_EDITMODE = 2127;
		public const uint32 IDM_UNBOOKMARK = 2128;
		public const uint32 IDM_TOOLBARS = 2130;
		public const uint32 IDM_STATUSBAR = 2131;
		public const uint32 IDM_FORMATMARK = 2132;
		public const uint32 IDM_TEXTONLY = 2133;
		public const uint32 IDM_OPTIONS = 2135;
		public const uint32 IDM_FOLLOWLINKC = 2136;
		public const uint32 IDM_FOLLOWLINKN = 2137;
		public const uint32 IDM_VIEWSOURCE = 2139;
		public const uint32 IDM_ZOOMPOPUP = 2140;
		public const uint32 IDM_BASELINEFONT1 = 2141;
		public const uint32 IDM_BASELINEFONT2 = 2142;
		public const uint32 IDM_BASELINEFONT3 = 2143;
		public const uint32 IDM_BASELINEFONT4 = 2144;
		public const uint32 IDM_BASELINEFONT5 = 2145;
		public const uint32 IDM_HORIZONTALLINE = 2150;
		public const uint32 IDM_LINEBREAKNORMAL = 2151;
		public const uint32 IDM_LINEBREAKLEFT = 2152;
		public const uint32 IDM_LINEBREAKRIGHT = 2153;
		public const uint32 IDM_LINEBREAKBOTH = 2154;
		public const uint32 IDM_NONBREAK = 2155;
		public const uint32 IDM_SPECIALCHAR = 2156;
		public const uint32 IDM_HTMLSOURCE = 2157;
		public const uint32 IDM_IFRAME = 2158;
		public const uint32 IDM_HTMLCONTAIN = 2159;
		public const uint32 IDM_TEXTBOX = 2161;
		public const uint32 IDM_TEXTAREA = 2162;
		public const uint32 IDM_CHECKBOX = 2163;
		public const uint32 IDM_RADIOBUTTON = 2164;
		public const uint32 IDM_DROPDOWNBOX = 2165;
		public const uint32 IDM_LISTBOX = 2166;
		public const uint32 IDM_BUTTON = 2167;
		public const uint32 IDM_IMAGE = 2168;
		public const uint32 IDM_OBJECT = 2169;
		public const uint32 IDM_1D = 2170;
		public const uint32 IDM_IMAGEMAP = 2171;
		public const uint32 IDM_FILE = 2172;
		public const uint32 IDM_COMMENT = 2173;
		public const uint32 IDM_SCRIPT = 2174;
		public const uint32 IDM_JAVAAPPLET = 2175;
		public const uint32 IDM_PLUGIN = 2176;
		public const uint32 IDM_PAGEBREAK = 2177;
		public const uint32 IDM_HTMLAREA = 2178;
		public const uint32 IDM_PARAGRAPH = 2180;
		public const uint32 IDM_FORM = 2181;
		public const uint32 IDM_MARQUEE = 2182;
		public const uint32 IDM_LIST = 2183;
		public const uint32 IDM_ORDERLIST = 2184;
		public const uint32 IDM_UNORDERLIST = 2185;
		public const uint32 IDM_INDENT = 2186;
		public const uint32 IDM_OUTDENT = 2187;
		public const uint32 IDM_PREFORMATTED = 2188;
		public const uint32 IDM_ADDRESS = 2189;
		public const uint32 IDM_BLINK = 2190;
		public const uint32 IDM_DIV = 2191;
		public const uint32 IDM_TABLEINSERT = 2200;
		public const uint32 IDM_RCINSERT = 2201;
		public const uint32 IDM_CELLINSERT = 2202;
		public const uint32 IDM_CAPTIONINSERT = 2203;
		public const uint32 IDM_CELLMERGE = 2204;
		public const uint32 IDM_CELLSPLIT = 2205;
		public const uint32 IDM_CELLSELECT = 2206;
		public const uint32 IDM_ROWSELECT = 2207;
		public const uint32 IDM_COLUMNSELECT = 2208;
		public const uint32 IDM_TABLESELECT = 2209;
		public const uint32 IDM_TABLEPROPERTIES = 2210;
		public const uint32 IDM_CELLPROPERTIES = 2211;
		public const uint32 IDM_ROWINSERT = 2212;
		public const uint32 IDM_COLUMNINSERT = 2213;
		public const uint32 IDM_HELP_CONTENT = 2220;
		public const uint32 IDM_HELP_ABOUT = 2221;
		public const uint32 IDM_HELP_README = 2222;
		public const uint32 IDM_REMOVEFORMAT = 2230;
		public const uint32 IDM_PAGEINFO = 2231;
		public const uint32 IDM_TELETYPE = 2232;
		public const uint32 IDM_GETBLOCKFMTS = 2233;
		public const uint32 IDM_BLOCKFMT = 2234;
		public const uint32 IDM_SHOWHIDE_CODE = 2235;
		public const uint32 IDM_TABLE = 2236;
		public const uint32 IDM_COPYFORMAT = 2237;
		public const uint32 IDM_PASTEFORMAT = 2238;
		public const uint32 IDM_GOTO = 2239;
		public const uint32 IDM_CHANGEFONT = 2240;
		public const uint32 IDM_CHANGEFONTSIZE = 2241;
		public const uint32 IDM_CHANGECASE = 2246;
		public const uint32 IDM_SHOWSPECIALCHAR = 2249;
		public const uint32 IDM_SUBSCRIPT = 2247;
		public const uint32 IDM_SUPERSCRIPT = 2248;
		public const uint32 IDM_CENTERALIGNPARA = 2250;
		public const uint32 IDM_LEFTALIGNPARA = 2251;
		public const uint32 IDM_RIGHTALIGNPARA = 2252;
		public const uint32 IDM_REMOVEPARAFORMAT = 2253;
		public const uint32 IDM_APPLYNORMAL = 2254;
		public const uint32 IDM_APPLYHEADING1 = 2255;
		public const uint32 IDM_APPLYHEADING2 = 2256;
		public const uint32 IDM_APPLYHEADING3 = 2257;
		public const uint32 IDM_DOCPROPERTIES = 2260;
		public const uint32 IDM_ADDFAVORITES = 2261;
		public const uint32 IDM_COPYSHORTCUT = 2262;
		public const uint32 IDM_SAVEBACKGROUND = 2263;
		public const uint32 IDM_SETWALLPAPER = 2264;
		public const uint32 IDM_COPYBACKGROUND = 2265;
		public const uint32 IDM_CREATESHORTCUT = 2266;
		public const uint32 IDM_PAGE = 2267;
		public const uint32 IDM_SAVETARGET = 2268;
		public const uint32 IDM_SHOWPICTURE = 2269;
		public const uint32 IDM_SAVEPICTURE = 2270;
		public const uint32 IDM_DYNSRCPLAY = 2271;
		public const uint32 IDM_DYNSRCSTOP = 2272;
		public const uint32 IDM_PRINTTARGET = 2273;
		public const uint32 IDM_IMGARTPLAY = 2274;
		public const uint32 IDM_IMGARTSTOP = 2275;
		public const uint32 IDM_IMGARTREWIND = 2276;
		public const uint32 IDM_PRINTQUERYJOBSPENDING = 2277;
		public const uint32 IDM_SETDESKTOPITEM = 2278;
		public const uint32 IDM_CONTEXTMENU = 2280;
		public const uint32 IDM_GOBACKWARD = 2282;
		public const uint32 IDM_GOFORWARD = 2283;
		public const uint32 IDM_PRESTOP = 2284;
		public const uint32 IDM_GOTOCLIPBOARDADDRESS = 2285;
		public const uint32 IDM_GOTOCLIPBOARDTEXT = 2286;
		public const uint32 IDM_MP_MYPICS = 2287;
		public const uint32 IDM_MP_EMAILPICTURE = 2288;
		public const uint32 IDM_MP_PRINTPICTURE = 2289;
		public const uint32 IDM_CREATELINK = 2290;
		public const uint32 IDM_COPYCONTENT = 2291;
		public const uint32 IDM_LANGUAGE = 2292;
		public const uint32 IDM_GETPRINTTEMPLATE = 2295;
		public const uint32 IDM_SETPRINTTEMPLATE = 2296;
		public const uint32 IDM_TEMPLATE_PAGESETUP = 2298;
		public const uint32 IDM_REFRESH = 2300;
		public const uint32 IDM_STOPDOWNLOAD = 2301;
		public const uint32 IDM_ENABLE_INTERACTION = 2302;
		public const uint32 IDM_LAUNCHDEBUGGER = 2310;
		public const uint32 IDM_BREAKATNEXT = 2311;
		public const uint32 IDM_INSINPUTHIDDEN = 2312;
		public const uint32 IDM_INSINPUTPASSWORD = 2313;
		public const uint32 IDM_OVERWRITE = 2314;
		public const uint32 IDM_PARSECOMPLETE = 2315;
		public const uint32 IDM_HTMLEDITMODE = 2316;
		public const uint32 IDM_REGISTRYREFRESH = 2317;
		public const uint32 IDM_COMPOSESETTINGS = 2318;
		public const uint32 IDM_SHOWALLTAGS = 2327;
		public const uint32 IDM_SHOWALIGNEDSITETAGS = 2321;
		public const uint32 IDM_SHOWSCRIPTTAGS = 2322;
		public const uint32 IDM_SHOWSTYLETAGS = 2323;
		public const uint32 IDM_SHOWCOMMENTTAGS = 2324;
		public const uint32 IDM_SHOWAREATAGS = 2325;
		public const uint32 IDM_SHOWUNKNOWNTAGS = 2326;
		public const uint32 IDM_SHOWMISCTAGS = 2320;
		public const uint32 IDM_SHOWZEROBORDERATDESIGNTIME = 2328;
		public const uint32 IDM_AUTODETECT = 2329;
		public const uint32 IDM_SCRIPTDEBUGGER = 2330;
		public const uint32 IDM_GETBYTESDOWNLOADED = 2331;
		public const uint32 IDM_NOACTIVATENORMALOLECONTROLS = 2332;
		public const uint32 IDM_NOACTIVATEDESIGNTIMECONTROLS = 2333;
		public const uint32 IDM_NOACTIVATEJAVAAPPLETS = 2334;
		public const uint32 IDM_NOFIXUPURLSONPASTE = 2335;
		public const uint32 IDM_EMPTYGLYPHTABLE = 2336;
		public const uint32 IDM_ADDTOGLYPHTABLE = 2337;
		public const uint32 IDM_REMOVEFROMGLYPHTABLE = 2338;
		public const uint32 IDM_REPLACEGLYPHCONTENTS = 2339;
		public const uint32 IDM_SHOWWBRTAGS = 2340;
		public const uint32 IDM_PERSISTSTREAMSYNC = 2341;
		public const uint32 IDM_SETDIRTY = 2342;
		public const uint32 IDM_RUNURLSCRIPT = 2343;
		public const uint32 IDM_ZOOMRATIO = 2344;
		public const uint32 IDM_GETZOOMNUMERATOR = 2345;
		public const uint32 IDM_GETZOOMDENOMINATOR = 2346;
		public const uint32 IDM_DIRLTR = 2350;
		public const uint32 IDM_DIRRTL = 2351;
		public const uint32 IDM_BLOCKDIRLTR = 2352;
		public const uint32 IDM_BLOCKDIRRTL = 2353;
		public const uint32 IDM_INLINEDIRLTR = 2354;
		public const uint32 IDM_INLINEDIRRTL = 2355;
		public const uint32 IDM_ISTRUSTEDDLG = 2356;
		public const uint32 IDM_INSERTSPAN = 2357;
		public const uint32 IDM_LOCALIZEEDITOR = 2358;
		public const uint32 IDM_SAVEPRETRANSFORMSOURCE = 2370;
		public const uint32 IDM_VIEWPRETRANSFORMSOURCE = 2371;
		public const uint32 IDM_SCROLL_HERE = 2380;
		public const uint32 IDM_SCROLL_TOP = 2381;
		public const uint32 IDM_SCROLL_BOTTOM = 2382;
		public const uint32 IDM_SCROLL_PAGEUP = 2383;
		public const uint32 IDM_SCROLL_PAGEDOWN = 2384;
		public const uint32 IDM_SCROLL_UP = 2385;
		public const uint32 IDM_SCROLL_DOWN = 2386;
		public const uint32 IDM_SCROLL_LEFTEDGE = 2387;
		public const uint32 IDM_SCROLL_RIGHTEDGE = 2388;
		public const uint32 IDM_SCROLL_PAGELEFT = 2389;
		public const uint32 IDM_SCROLL_PAGERIGHT = 2390;
		public const uint32 IDM_SCROLL_LEFT = 2391;
		public const uint32 IDM_SCROLL_RIGHT = 2392;
		public const uint32 IDM_MULTIPLESELECTION = 2393;
		public const uint32 IDM_2D_POSITION = 2394;
		public const uint32 IDM_2D_ELEMENT = 2395;
		public const uint32 IDM_1D_ELEMENT = 2396;
		public const uint32 IDM_ABSOLUTE_POSITION = 2397;
		public const uint32 IDM_LIVERESIZE = 2398;
		public const uint32 IDM_ATOMICSELECTION = 2399;
		public const uint32 IDM_AUTOURLDETECT_MODE = 2400;
		public const uint32 IDM_IE50_PASTE = 2401;
		public const uint32 IDM_IE50_PASTE_MODE = 2402;
		public const uint32 IDM_GETIPRINT = 2403;
		public const uint32 IDM_DISABLE_EDITFOCUS_UI = 2404;
		public const uint32 IDM_RESPECTVISIBILITY_INDESIGN = 2405;
		public const uint32 IDM_CSSEDITING_LEVEL = 2406;
		public const uint32 IDM_UI_OUTDENT = 2407;
		public const uint32 IDM_UPDATEPAGESTATUS = 2408;
		public const uint32 IDM_IME_ENABLE_RECONVERSION = 2409;
		public const uint32 IDM_KEEPSELECTION = 2410;
		public const uint32 IDM_UNLOADDOCUMENT = 2411;
		public const uint32 IDM_OVERRIDE_CURSOR = 2420;
		public const uint32 IDM_PEERHITTESTSAMEINEDIT = 2423;
		public const uint32 IDM_TRUSTAPPCACHE = 2425;
		public const uint32 IDM_BACKGROUNDIMAGECACHE = 2430;
		public const uint32 IDM_GETUSERACTIONTIME = 2431;
		public const uint32 IDM_BEGINUSERACTION = 2432;
		public const uint32 IDM_ENDUSERACTION = 2433;
		public const uint32 IDM_SETCUSTOMCURSOR = 2434;
		public const uint32 IDM_FOLLOWLINKT = 2435;
		public const uint32 IDM_CARETBROWSINGMODE = 2436;
		public const uint32 IDM_STYLEMENU_SETNOSTYLE = 2437;
		public const uint32 IDM_STYLEMENU_GETNOSTYLE = 2438;
		public const uint32 IDM_STYLEMENU_GETPREFSTYLE = 2439;
		public const uint32 IDM_STYLEMENU_CHANGESELECTEDSTYLE = 2440;
		public const uint32 IDM_MEDIA_PLAYPAUSE = 2441;
		public const uint32 IDM_MEDIA_MUTEUNMUTE = 2442;
		public const uint32 IDM_MEDIA_PLAY = 2443;
		public const uint32 IDM_MEDIA_PAUSE = 2444;
		public const uint32 IDM_MEDIA_STOP = 2445;
		public const uint32 IDM_MEDIA_FULLSCREEN_TOGGLE = 2446;
		public const uint32 IDM_MEDIA_FULLSCREEN_EXIT = 2447;
		public const uint32 IDM_MEDIA_VOLUME_UP = 2448;
		public const uint32 IDM_MEDIA_VOLUME_DOWN = 2449;
		public const uint32 IDM_MEDIA_SEEK_TO_START = 2450;
		public const uint32 IDM_MEDIA_SEEK_TO_END = 2451;
		public const uint32 IDM_MEDIA_SEEK_FWD_SMALL = 2452;
		public const uint32 IDM_MEDIA_SEEK_BACK_SMALL = 2453;
		public const uint32 IDM_MEDIA_SEEK_FWD_LARGE = 2454;
		public const uint32 IDM_MEDIA_SEEK_BACK_LARGE = 2455;
		public const uint32 IDM_MEDIA_RATE_FASTER = 2456;
		public const uint32 IDM_MEDIA_RATE_SLOWER = 2457;
		public const uint32 IDM_MEDIA_SHOWCONTROLS_TOGGLE = 2458;
		public const uint32 IDM_MEDIA_ZOOMMODE_TOGGLE = 2459;
		public const uint32 IDM_MEDIA_FRAMESTEP_FWD = 2460;
		public const uint32 IDM_MEDIA_FRAMESTEP_BACK = 2461;
		public const uint32 IDM_MEDIA_MUTE = 2462;
		public const uint32 IDM_MEDIA_UNMUTE = 2463;
		public const uint32 IDM_MEDIA_SHOW_AUDIO_ACCESS = 2464;
		public const uint32 IDM_MEDIA_SHOW_SUBTITLE_ACCESS = 2465;
		public const uint32 IDM_MEDIA_PLAYRATE0 = 2480;
		public const uint32 IDM_MEDIA_PLAYRATE1 = 2481;
		public const uint32 IDM_MEDIA_PLAYRATE2 = 2482;
		public const uint32 IDM_MEDIA_PLAYRATE3 = 2483;
		public const uint32 IDM_MEDIA_PLAYRATE4 = 2484;
		public const uint32 IDM_MEDIA_PLAYRATE5 = 2485;
		public const uint32 IDM_MEDIA_PLAYRATE6 = 2486;
		public const uint32 IDM_MEDIA_PLAYRATE7 = 2487;
		public const uint32 IDM_MEDIA_PLAYRATE8 = 2488;
		public const uint32 IDM_MEDIA_PLAYRATE9 = 2489;
		public const uint32 IDM_PASTECONTENTONLY = 2500;
		public const uint32 IDM_PASTETEXTONLY = 2501;
		public const uint32 IDM_INSERTHTML = 2502;
		public const uint32 IDM_DEFAULTBLOCK = 6046;
		public const uint32 IDM_MIMECSET__FIRST__ = 3609;
		public const uint32 IDM_MIMECSET__LAST__ = 3699;
		public const uint32 IDM_MENUEXT_FIRST__ = 3700;
		public const uint32 IDM_MENUEXT_LAST__ = 3732;
		public const uint32 IDM_MENUEXT_COUNT = 3733;
		public const uint32 IDM_ADDCONSOLEMESSAGERECEIVER = 3800;
		public const uint32 IDM_REMOVECONSOLEMESSAGERECEIVER = 3801;
		public const uint32 IDM_STARTDIAGNOSTICSMODE = 3802;
		public const uint32 IDM_GETSCRIPTENGINE = 3803;
		public const uint32 IDM_ADDDEBUGCALLBACKRECEIVER = 3804;
		public const uint32 IDM_REMOVEDEBUGCALLBACKRECEIVER = 3805;
		public const uint32 IDM_DEFAULTPARAGRAPHSEPARATOR = 3900;
		public const uint32 IDM_BEGINUNDOUNIT = 3901;
		public const uint32 IDM_ENDUNDOUNIT = 3902;
		public const uint32 IDM_CLEARUNDO = 3903;
		public const uint32 IDM_INSPECTELEMENT = 3904;
		public const uint32 IDM_SHAREPICTURE = 3905;
		public const uint32 IDM_ENABLE_OBJECT_RESIZING = 3906;
		public const uint32 IDM_INSERTTEXT = 3907;
		public const uint32 IDM_LAUNCHURICALLBACK = 3908;
		public const uint32 IDM_FOLLOWLINKN_INPRIVATE = 3909;
		public const uint32 IDM_FOLLOWLINKT_INPRIVATE = 3910;
		public const uint32 IDM_FOLLOWLINKEDGE = 3911;
		public const uint32 IDM_OPEN = 2000;
		public const uint32 IDM_NEW = 2001;
		public const uint32 IDM_SAVE = 70;
		public const uint32 IDM_SAVEAS = 71;
		public const uint32 IDM_SAVECOPYAS = 2002;
		public const uint32 IDM_PRINTPREVIEW = 2003;
		public const uint32 IDM_SHOWPRINT = 2010;
		public const uint32 IDM_SHOWPAGESETUP = 2011;
		public const uint32 IDM_PRINT = 27;
		public const uint32 IDM_PAGESETUP = 2004;
		public const uint32 IDM_SPELL = 2005;
		public const uint32 IDM_PASTESPECIAL = 2006;
		public const uint32 IDM_CLEARSELECTION = 2007;
		public const uint32 IDM_PROPERTIES = 28;
		public const uint32 IDM_REDO = 29;
		public const uint32 IDM_UNDO = 43;
		public const uint32 IDM_SELECTALL = 31;
		public const uint32 IDM_ZOOMPERCENT = 50;
		public const uint32 IDM_GETZOOM = 68;
		public const uint32 IDM_STOP = 2138;
		public const uint32 IDM_COPY = 15;
		public const uint32 IDM_CUT = 16;
		public const uint32 IDM_PASTE = 26;
		public const uint32 IDM_SAVEPDF = 99;
		public const uint32 IDM_TOGGLEREADINGBAR = 15209;
		public const uint32 IDM_ADDPDFHIGHLIGHT = 15210;
		public const uint32 IDM_DELETEPDFHIGHLIGHT = 15211;
		public const uint32 IDM_ADDPDFNOTE = 15212;
		public const uint32 IDM_OPENPDFNOTE = 15213;
		public const uint32 IDM_EDITPDFHIGHLIGHT = 15214;
		public const uint32 IDM_PINKHIGHLIGHT = 15215;
		public const uint32 IDM_BLUEHIGHLIGHT = 15216;
		public const uint32 IDM_GREENHIGHLIGHT = 15217;
		public const uint32 IDM_YELLOWHIGHLIGHT = 15218;
		public const uint32 IDM_NONEHIGHLIGHT = 15219;
		public const uint32 IDM_PDFREADALOUD = 15220;
		public const uint32 IDM_SHAREPDF = 15221;
		public const uint32 IDM_PDFDEFINE = 15222;
		public const int32 CMD_ZOOM_PAGEWIDTH = -1;
		public const int32 CMD_ZOOM_ONEPAGE = -2;
		public const int32 CMD_ZOOM_TWOPAGES = -3;
		public const int32 CMD_ZOOM_SELECTION = -4;
		public const int32 CMD_ZOOM_FIT = -5;
		public const uint32 IDM_CONTEXT = 1;
		public const uint32 IDM_HWND = 2;
		public const uint32 IDM_NEW_TOPLEVELWINDOW = 7050;
		public const uint32 IDM_PRESERVEUNDOALWAYS = 6049;
		public const uint32 IDM_PERSISTDEFAULTVALUES = 7100;
		public const uint32 IDM_PROTECTMETATAGS = 7101;
		public const uint32 IDM_GETFRAMEZONE = 6037;
		public const uint32 IDM_REFRESH_THIS = 6042;
		public const uint32 IDM_MENUEXT_PLACEHOLDER = 6047;
		public const uint32 IDM_FIRE_PRINTTEMPLATEUP = 15000;
		public const uint32 IDM_FIRE_PRINTTEMPLATEDOWN = 15001;
		public const uint32 IDM_SETPRINTHANDLES = 15002;
		public const uint32 IDM_CLEARAUTHENTICATIONCACHE = 15003;
		public const uint32 IDM_GETUSERINITFLAGS = 15004;
		public const uint32 IDM_GETDOCDLGFLAGS = 15005;
		public const uint32 IDM_OLEWINDOWSTATECHANGED = 15006;
		public const uint32 IDM_ACTIVEXINSTALLSCOPE = 15007;
		public const uint32 IDM_SETSESSIONDOCUMENTMODE = 15008;
		public const uint32 IDM_GETSESSIONDOCUMENTMODE = 15009;
		public const uint32 IDM_SETPROFILINGONSTART = 15010;
		public const uint32 IDM_GETPROFILINGONSTART = 15011;
		public const uint32 IDM_SETSCRIPTCONSOLE = 15012;
		public const uint32 IDM_SETNAVIGATEEVENTSINK = 15013;
		public const uint32 IDM_SETDEVTOOLBARCONSOLE = 15016;
		public const uint32 IDM_POPSTATEEVENT = 15017;
		public const uint32 IDM_SETPARTIALLAYOUTSTATUS = 15021;
		public const uint32 IDM_GETPARTIALLAYOUTSTATUS = 15022;
		public const uint32 IDM_ADDPARTIALTESTSTEPCOUNT = 15023;
		public const uint32 IDM_SETL9QUIRKSEMULATIONENABLED = 15024;
		public const uint32 IDM_GETL9QUIRKSEMULATIONENABLED = 15025;
		public const uint32 IDM_SETPOINTERLOCKCONSENT = 15026;
		public const uint32 IDM_GETDEFAULTZOOMLEVEL = 15027;
		public const uint32 IDM_GETELEMENTBOUNDINGBOX = 15028;
		public const uint32 IDM_SETGEOLOCATIONCONSENT = 15029;
		public const uint32 IDM_ACTIVEXFILTERINGENABLED = 15030;
		public const uint32 IDM_SHARE = 15031;
		public const uint32 IDM_SHAREAPPCACHEEVENT = 15033;
		public const uint32 IDM_GETPRINTMANAGERDOCSOURCE = 15038;
		public const uint32 IDM_SETEXTRAHEADERS = 15039;
		public const uint32 IDM_SETACCESSIBILITYNAME = 15040;
		public const uint32 IDM_UPDATESETTINGSFROMREGISTRY = 15041;
		public const uint32 IDM_PERFORMEDITACTIVATION = 15042;
		public const uint32 IDM_SETDEFAULTBACKGROUNDCOLOR = 15043;
		public const uint32 IDM_GETDEFAULTBACKGROUNDCOLOR = 15044;
		public const uint32 IDM_NOTIFYZOOMANDSCROLLANIMATIONEND = 15045;
		public const uint32 IDM_NOTIFYCONTEXTMENUDISMISSED = 15046;
		public const uint32 IDM_GETPRINTMANAGERDOCSOURCEASYNC = 15047;
		public const uint32 IDM_SETPAGEACTIONALLOWEDFLAGS = 15100;
		public const uint32 IDM_INVOKEFLIPAHEADTARGET = 15200;
		public const uint32 IDM_ENABLEFLIPAHEADTARGET = 15201;
		public const uint32 IDM_DEBUGGERDYNAMICATTACH = 15202;
		public const uint32 IDM_DEBUGGERDYNAMICDETACH = 15203;
		public const uint32 IDM_DEBUGGERDYNAMICATTACHSOURCERUNDOWN = 15204;
		public const uint32 IDM_GETDEBUGGERSTATE = 15205;
		public const uint32 IDM_SELECTIONSEARCH = 15206;
		public const uint32 IDM_SHOWSHAREUI = 15207;
		public const uint32 IDM_RUNFLASH = 15208;
		public const uint32 DISPID_INTERNAL_CELEMENTCLASSCACHE = 2147483648;
		public const uint32 DISPID_HTMLOBJECT = 66036;
		public const uint32 DISPID_ELEMENT = 66536;
		public const uint32 DISPID_SITE = 67536;
		public const uint32 DISPID_OBJECT = 68536;
		public const uint32 DISPID_STYLE = 69536;
		public const uint32 DISPID_BASE_STYLE = 70036;
		public const uint32 DISPID_ATTRS = 70536;
		public const uint32 DISPID_EVENTS = 71536;
		public const uint32 DISPID_XOBJ_EXPANDO = 72536;
		public const uint32 DISPID_XOBJ_ORDINAL = 73536;
		public const uint32 DISPID_ACTIVEX_EXPANDO_BASE = 72536;
		public const uint32 DISPID_ACTIVEX_EXPANDO_MAX = 73535;
		public const uint32 DISPID_OBJECT_ORDINAL_BASE = 73536;
		public const uint32 DISPID_OBJECT_ORDINAL_MAX = 74535;
		public const uint32 DISPID_COLLECTION_MIN = 1000000;
		public const uint32 DISPID_COLLECTION_MAX = 2999999;
		public const uint32 DISPID_STYLESHEETSCOLLECTION_NAMED_BASE = 1000000;
		public const uint32 DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE = 2000000;
		public const uint32 DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX = 2999999;
		public const uint32 DISPID_EXPANDO_BASE = 3000000;
		public const uint32 DISPID_EXPANDO_MAX = 3999999;
		public const uint32 DISPID_EVENTHOOK_SENSITIVE_BASE = 4000000;
		public const uint32 DISPID_EVENTHOOK_SENSITIVE_MAX = 4499999;
		public const uint32 DISPID_EVENTHOOK_INSENSITIVE_BASE = 4500000;
		public const uint32 DISPID_EVENTHOOK_INSENSITIVE_MAX = 4999999;
		public const uint32 DISPID_PEER_HOLDER_BASE = 5000000;
		public const uint32 DISPID_CANVASPIXELARRAY_BASE = 5000000;
		public const uint32 DISPID_CANVASPIXELARRAY_MAX = 2000000000;
		public const uint32 DISPID_CommonCtrl_FONTNAME = 1;
		public const uint32 DISPID_CommonCtrl_FONTSIZE = 2;
		public const uint32 DISPID_CommonCtrl_FONTBOLD = 3;
		public const uint32 DISPID_CommonCtrl_FONTITAL = 4;
		public const uint32 DISPID_CommonCtrl_FONTUNDER = 5;
		public const uint32 DISPID_CommonCtrl_FONTSTRIKE = 6;
		public const uint32 DISPID_CommonCtrl_FONTWEIGHT = 7;
		public const uint32 DISPID_CommonCtrl_FONTCHARSET = 8;
		public const uint32 DISPID_CommonCtrl_FONTSUPERSCRIPT = 9;
		public const uint32 DISPID_CommonCtrl_FONTSUBSCRIPT = 10;
		public const int32 DISPID_MSDATASRCINTERFACE = -3900;
		public const int32 DISPID_ADVISEDATASRCCHANGEEVENT = -3901;
		public const uint32 DISPID_HTMLDLG = 25000;
		public const uint32 DISPID_HTMLDLGMODEL = 26000;
		public const uint32 DISPID_HTMLPOPUP = 27000;
		public const uint32 DISPID_HTMLAPP = 5000;
		public const uint32 STDPROPID_XOBJ_NAME = 65536;
		public const uint32 STDPROPID_XOBJ_INDEX = 65537;
		public const uint32 STDPROPID_IE3XOBJ_OBJECTALIGN = 65537;
		public const uint32 STDPROPID_XOBJ_BASEHREF = 65538;
		public const uint32 STDPROPID_XOBJ_LEFT = 65539;
		public const uint32 STDPROPID_XOBJ_TOP = 65540;
		public const uint32 STDPROPID_XOBJ_WIDTH = 65541;
		public const uint32 STDPROPID_XOBJ_HEIGHT = 65542;
		public const uint32 STDPROPID_XOBJ_VISIBLE = 65543;
		public const uint32 STDPROPID_XOBJ_PARENT = 65544;
		public const uint32 STDPROPID_XOBJ_DRAGMODE = 65545;
		public const uint32 STDPROPID_XOBJ_DRAGICON = 65546;
		public const uint32 STDPROPID_XOBJ_TAG = 65547;
		public const uint32 STDPROPID_XOBJ_TABSTOP = 65550;
		public const uint32 STDPROPID_XOBJ_TABINDEX = 65551;
		public const uint32 STDPROPID_XOBJ_HELPCONTEXTID = 65586;
		public const uint32 STDPROPID_XOBJ_DEFAULT = 65591;
		public const uint32 STDPROPID_XOBJ_CANCEL = 65592;
		public const uint32 STDPROPID_XOBJ_LEFTNORUN = 65593;
		public const uint32 STDPROPID_XOBJ_TOPNORUN = 65594;
		public const uint32 STDPROPID_XOBJ_ALIGNPERSIST = 65596;
		public const uint32 STDPROPID_XOBJ_LINKTIMEOUT = 65597;
		public const uint32 STDPROPID_XOBJ_LINKTOPIC = 65598;
		public const uint32 STDPROPID_XOBJ_LINKITEM = 65599;
		public const uint32 STDPROPID_XOBJ_LINKMODE = 65600;
		public const uint32 STDPROPID_XOBJ_DATACHANGED = 65601;
		public const uint32 STDPROPID_XOBJ_DATAFIELD = 65602;
		public const uint32 STDPROPID_XOBJ_DATASOURCE = 65603;
		public const uint32 STDPROPID_XOBJ_WHATSTHISHELPID = 65604;
		public const uint32 STDPROPID_XOBJ_CONTROLTIPTEXT = 65605;
		public const uint32 STDPROPID_XOBJ_STATUSBARTEXT = 65606;
		public const uint32 STDPROPID_XOBJ_APPLICATION = 65607;
		public const uint32 STDPROPID_XOBJ_BLOCKALIGN = 65608;
		public const uint32 STDPROPID_XOBJ_CONTROLALIGN = 65609;
		public const uint32 STDPROPID_XOBJ_STYLE = 65610;
		public const uint32 STDPROPID_XOBJ_COUNT = 65611;
		public const uint32 STDPROPID_XOBJ_DISABLED = 65612;
		public const uint32 STDPROPID_XOBJ_RIGHT = 65613;
		public const uint32 STDPROPID_XOBJ_BOTTOM = 65614;
		public const uint32 STDPROPID_XOBJ_GETSVGDOCUMENT = 65615;
		public const uint32 STDDISPID_XOBJ_ONFOCUS = 65537;
		public const uint32 STDDISPID_XOBJ_BEFOREUPDATE = 65540;
		public const uint32 STDDISPID_XOBJ_AFTERUPDATE = 65541;
		public const uint32 STDDISPID_XOBJ_ONROWEXIT = 65542;
		public const uint32 STDDISPID_XOBJ_ONROWENTER = 65543;
		public const uint32 STDDISPID_XOBJ_ONMOUSEOVER = 65544;
		public const uint32 STDDISPID_XOBJ_ONMOUSEOUT = 65545;
		public const uint32 STDDISPID_XOBJ_ONHELP = 65546;
		public const uint32 STDDISPID_XOBJ_ONDRAGSTART = 65547;
		public const uint32 STDDISPID_XOBJ_ONSELECTSTART = 65548;
		public const uint32 STDDISPID_XOBJ_ERRORUPDATE = 65549;
		public const uint32 STDDISPID_XOBJ_ONDATASETCHANGED = 65550;
		public const uint32 STDDISPID_XOBJ_ONDATAAVAILABLE = 65551;
		public const uint32 STDDISPID_XOBJ_ONDATASETCOMPLETE = 65552;
		public const uint32 STDDISPID_XOBJ_ONFILTER = 65553;
		public const uint32 STDDISPID_XOBJ_ONLOSECAPTURE = 65554;
		public const uint32 STDDISPID_XOBJ_ONPROPERTYCHANGE = 65555;
		public const uint32 STDDISPID_XOBJ_ONDRAG = 65556;
		public const uint32 STDDISPID_XOBJ_ONDRAGEND = 65557;
		public const uint32 STDDISPID_XOBJ_ONDRAGENTER = 65558;
		public const uint32 STDDISPID_XOBJ_ONDRAGOVER = 65559;
		public const uint32 STDDISPID_XOBJ_ONDRAGLEAVE = 65560;
		public const uint32 STDDISPID_XOBJ_ONDROP = 65561;
		public const uint32 STDDISPID_XOBJ_ONCUT = 65562;
		public const uint32 STDDISPID_XOBJ_ONCOPY = 65563;
		public const uint32 STDDISPID_XOBJ_ONPASTE = 65564;
		public const uint32 STDDISPID_XOBJ_ONBEFORECUT = 65565;
		public const uint32 STDDISPID_XOBJ_ONBEFORECOPY = 65566;
		public const uint32 STDDISPID_XOBJ_ONBEFOREPASTE = 65567;
		public const uint32 STDDISPID_XOBJ_ONROWSDELETE = 65568;
		public const uint32 STDDISPID_XOBJ_ONROWSINSERTED = 65569;
		public const uint32 STDDISPID_XOBJ_ONCELLCHANGE = 65570;
		public const uint32 DISPID_NORMAL_FIRST = 1000;
		public const uint32 DISPID_IE8_NORMAL_FIRST = 1150;
		public const uint32 DISPID_ANCHOR = 1000;
		public const uint32 DISPID_BLOCK = 1000;
		public const uint32 DISPID_BODY = 2000;
		public const uint32 DISPID_BR = 1000;
		public const uint32 DISPID_BGSOUND = 1000;
		public const uint32 DISPID_DD = 1000;
		public const uint32 DISPID_DIR = 1000;
		public const uint32 DISPID_DIV = 1000;
		public const uint32 DISPID_DL = 1000;
		public const uint32 DISPID_DT = 1000;
		public const uint32 DISPID_EFONT = 1000;
		public const uint32 DISPID_FORM = 1000;
		public const uint32 DISPID_HEADER = 1000;
		public const uint32 DISPID_HEDELEMS = 1000;
		public const uint32 DISPID_HR = 1000;
		public const uint32 DISPID_LABEL = 1000;
		public const uint32 DISPID_LI = 1000;
		public const uint32 DISPID_IMGBASE = 1000;
		public const uint32 DISPID_IMG = 2000;
		public const uint32 DISPID_INPUTIMAGE = 2000;
		public const uint32 DISPID_INPUT = 2000;
		public const uint32 DISPID_INPUTTEXTBASE = 3000;
		public const uint32 DISPID_INPUTTEXT = 4000;
		public const uint32 DISPID_MENU = 1000;
		public const uint32 DISPID_OL = 1000;
		public const uint32 DISPID_PARA = 1000;
		public const uint32 DISPID_SELECT = 1000;
		public const uint32 DISPID_SELECTOBJ = 1000;
		public const uint32 DISPID_TABLE = 1000;
		public const uint32 DISPID_TEXTSITE = 1000;
		public const uint32 DISPID_TEXTAREA = 5000;
		public const uint32 DISPID_MARQUEE = 6000;
		public const uint32 DISPID_RICHTEXT = 7000;
		public const uint32 DISPID_BUTTON = 8000;
		public const uint32 DISPID_UL = 1000;
		public const uint32 DISPID_PHRASE = 1000;
		public const uint32 DISPID_UNKNOWNPDL = 1000;
		public const uint32 DISPID_COMMENTPDL = 1000;
		public const uint32 DISPID_TABLECELL = 2000;
		public const uint32 DISPID_RANGE = 1000;
		public const uint32 DISPID_SELECTION = 1000;
		public const uint32 DISPID_OPTION = 1000;
		public const uint32 DISPID_1D = 2000;
		public const uint32 DISPID_MAP = 1000;
		public const uint32 DISPID_AREA = 1000;
		public const uint32 DISPID_PARAM = 1000;
		public const uint32 DISPID_TABLESECTION = 1000;
		public const uint32 DISPID_TABLEROW = 1000;
		public const uint32 DISPID_TABLECOL = 1000;
		public const uint32 DISPID_SCRIPT = 1000;
		public const uint32 DISPID_STYLESHEET = 1000;
		public const uint32 DISPID_STYLERULE = 1000;
		public const uint32 DISPID_BASE_STYLERULE = 1100;
		public const uint32 DISPID_STYLEPAGE = 1000;
		public const uint32 DISPID_STYLESHEETS_COL = 1000;
		public const uint32 DISPID_STYLERULES_COL = 1000;
		public const uint32 DISPID_STYLEPAGES_COL = 1000;
		public const uint32 DISPID_MEDIALIST = 1000;
		public const uint32 DISPID_MIMETYPES_COL = 1000;
		public const uint32 DISPID_PLUGINS_COL = 1000;
		public const uint32 DISPID_2D = 1000;
		public const uint32 DISPID_OMWINDOW = 1000;
		public const uint32 DISPID_EVENTOBJ = 1000;
		public const uint32 DISPID_PERSISTDATA = 1000;
		public const uint32 DISPID_OLESITE = 1000;
		public const uint32 DISPID_FRAMESET = 1000;
		public const uint32 DISPID_LINK = 1000;
		public const uint32 DISPID_STYLEELEMENT = 1000;
		public const uint32 DISPID_FILTERS = 1000;
		public const uint32 DISPID_OMRECT = 1000;
		public const uint32 DISPID_DOMATTRIBUTE = 1000;
		public const uint32 DISPID_DOMTEXTNODE = 1000;
		public const uint32 DISPID_GENERIC = 1000;
		public const uint32 DISPID_URN_COLL = 1000;
		public const uint32 DISPID_NAMESPACE_COLLECTION = 1000;
		public const uint32 DISPID_NAMESPACE = 1000;
		public const uint32 DISPID_TAGNAMES_COLLECTION = 1000;
		public const uint32 DISPID_XMLHTTPREQUEST = 1000;
		public const uint32 DISPID_XMLSERIALIZER = 1000;
		public const uint32 DISPID_DOMPARSER = 1000;
		public const uint32 DISPID_DOCUMENTCOMPATIBLEINFO_COLLECTION = 1000;
		public const uint32 DISPID_DOCUMENTCOMPATIBLEINFO = 1000;
		public const uint32 DISPID_XDOMAINREQUEST = 1000;
		public const uint32 DISPID_DOMSTORAGEITEM = 1000;
		public const uint32 DISPID_DOMSTORAGE = 1000;
		public const uint32 DISPID_DOMSTORAGELIST = 1000;
		public const uint32 DISPID_RULESAPPLIED = 1000;
		public const uint32 DISPID_RULESAPPLIED_COLLECTION = 1000;
		public const uint32 DISPID_STYLESHEETRULESAPPLIED_COLLECTION = 1000;
		public const uint32 DISPID_PROCESSINGINSTRUCTION = 1000;
		public const uint32 DISPID_MSPOINTERPOINT = 1000;
		public const uint32 DISPID_WEBSOCKET = 1000;
		public const uint32 DISPID_APPLICATIONCACHE = 1000;
		public const uint32 DISPID_DOMEVENT = 1000;
		public const uint32 DISPID_DOMUIEVENT = 1025;
		public const uint32 DISPID_DOMMOUSEEVENT = 1050;
		public const uint32 DISPID_DOMMOUSEWHEELEVENT = 1075;
		public const uint32 DISPID_DOMWHEELEVENT = 1100;
		public const uint32 DISPID_DOMTEXTEVENT = 1125;
		public const uint32 DISPID_DOMKEYBOARDEVENT = 1150;
		public const uint32 DISPID_DOMCOMPOSITIONEVENT = 1175;
		public const uint32 DISPID_DOMCUSTOMEVENT = 1200;
		public const uint32 DISPID_DOMMUTATIONEVENT = 1225;
		public const uint32 DISPID_DOMFOCUSEVENT = 1250;
		public const uint32 DISPID_SVGZOOMEVENT = 1275;
		public const uint32 DISPID_DOMSITEMODEEVENT = 1300;
		public const uint32 DISPID_DOMMESSAGEEVENT = 1325;
		public const uint32 DISPID_DOMSTORAGEEVENT = 1350;
		public const uint32 DISPID_DOMBEFOREUNLOADEVENT = 1375;
		public const uint32 DISPID_DOMDRAGEVENT = 1400;
		public const uint32 DISPID_DOMMSPOINTEREVENT = 1425;
		public const uint32 DISPID_DOMMSGESTUREEVENT = 1450;
		public const uint32 DISPID_DOMMSTRANSITIONEVENT = 1475;
		public const uint32 DISPID_DOMMSANIMATIONEVENT = 1500;
		public const uint32 DISPID_DOMMSMANIPULATIONEVENT = 1525;
		public const uint32 DISPID_DOMPROGRESSEVENT = 1550;
		public const uint32 DISPID_DOMCLOSEEVENT = 1525;
		public const uint32 DISPID_HTMLDOCUMENT = 1000;
		public const uint32 DISPID_OMDOCUMENT = 1000;
		public const uint32 DISPID_DATATRANSFER = 1000;
		public const uint32 DISPID_XMLDECL = 1000;
		public const uint32 DISPID_DOCFRAG = 1000;
		public const uint32 DISPID_ILINEINFO = 1000;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE = 1000;
		public const uint32 DISPID_DOMRANGE = 1000;
		public const uint32 DISPID_HTMLSELECTION = 1000;
		public const uint32 DISPID_DOMTRAVERSAL = 1000;
		public const uint32 DISPID_DOMEXCEPTION = 1000;
		public const uint32 DISPID_SVGEXCEPTION = 1000;
		public const uint32 DISPID_RANGEEXCEPTION = 1000;
		public const uint32 DISPID_EVENTEXCEPTION = 1000;
		public const uint32 DISPID_DOCUMENTTYPE = 1000;
		public const uint32 DISPID_MEDIA = 1000;
		public const uint32 DISPID_MEDIAERROR = 1000;
		public const uint32 DISPID_TIMERANGES = 1000;
		public const uint32 DISPID_SOURCE = 1000;
		public const uint32 DISPID_TRACK = 1000;
		public const uint32 DISPID_AUDIO = 1050;
		public const uint32 DISPID_VIDEO = 1050;
		public const uint32 DISPID_STYLEMEDIA = 1000;
		public const uint32 DISPID_PROGRESS = 1000;
		public const uint32 DISPID_PLAYTO = 1000;
		public const uint32 DISPID_PLAYTODEVICE = 1000;
		public const uint32 DISPID_WINDOW = 1;
		public const uint32 DISPID_SCREEN = 1000;
		public const uint32 DISPID_FRAMESCOLLECTION = 1000;
		public const uint32 DISPID_HISTORY = 1;
		public const uint32 DISPID_LOCATION = 1;
		public const uint32 DISPID_NAVIGATOR = 1;
		public const uint32 DISPID_CLIENTCAPS = 1;
		public const uint32 DISPID_TEMPLATE_PRINTER = 1;
		public const uint32 DISPID_PRINTMANAGER_TEMPLATE_PRINTER = 501;
		public const uint32 DISPID_COLLECTION = 1500;
		public const uint32 DISPID_OPTIONS_COL = 1500;
		public const uint32 DISPID_CHECKBOX = 1000;
		public const uint32 DISPID_RADIO = 2000;
		public const uint32 DISPID_FRAMESITE = 68536;
		public const uint32 DISPID_FRAME = 69536;
		public const uint32 DISPID_IFRAME = 69536;
		public const uint32 WEBOC_DISPIDBASE = 70536;
		public const uint32 WEBOC_DISPIDMAX = 70636;
		public const uint32 DISPID_PROTECTEDELEMENT = 1000;
		public const uint32 DISPID_DEFAULTS = 1000;
		public const uint32 DISPID_MARKUP = 1000;
		public const uint32 DISPID_DOMIMPLEMENTATION = 1000;
		public const uint32 DISPID_MEDIAQUERY = 1000;
		public const uint32 DISPID_HTML5ATTRIBUTESELECTORCI = 1000;
		public const uint32 DISPID_SVGMIXINS = 1000;
		public const uint32 DISPID_SVGELEMENT = 1030;
		public const uint32 DISPID_SVGELEMENT_BASE = 1050;
		public const uint32 DISPID_SVGAELEMENT = 1050;
		public const uint32 DISPID_SVGALTGLYPHDEFELEMENT = 1050;
		public const uint32 DISPID_SVGALTGLYPHELEMENT = 1050;
		public const uint32 DISPID_SVGALTGLYPHITEMELEMENT = 1050;
		public const uint32 DISPID_SVGANGLE = 1000;
		public const uint32 DISPID_SVGANIMATECOLORELEMENT = 1050;
		public const uint32 DISPID_SVGANIMATEDANGLE = 1000;
		public const uint32 DISPID_SVGANIMATEDBOOLEAN = 1000;
		public const uint32 DISPID_SVGANIMATEDENUMERATION = 1000;
		public const uint32 DISPID_SVGANIMATEDINTEGER = 1000;
		public const uint32 DISPID_SVGANIMATEDLENGTH = 1000;
		public const uint32 DISPID_SVGANIMATEDLENGTHLIST = 1000;
		public const uint32 DISPID_SVGANIMATEDNUMBER = 1000;
		public const uint32 DISPID_SVGANIMATEDNUMBERLIST = 1000;
		public const uint32 DISPID_SVGANIMATEDPOINTS = 1000;
		public const uint32 DISPID_SVGANIMATEDRECT = 1000;
		public const uint32 DISPID_SVGANIMATEDSTRING = 1000;
		public const uint32 DISPID_SVGANIMATEELEMENT = 1050;
		public const uint32 DISPID_SVGANIMATEMOTIONELEMENT = 1050;
		public const uint32 DISPID_SVGANIMATETRANSFORMELEMENT = 1050;
		public const uint32 DISPID_SVGCIRCLEELEMENT = 1050;
		public const uint32 DISPID_SVGCLIPPATHELEMENT = 1050;
		public const uint32 DISPID_SVGCOLOR_PROFILEELEMENT = 1050;
		public const uint32 DISPID_SVGCURSORELEMENT = 1050;
		public const uint32 DISPID_SVGDEFINITION_SRCELEMENT = 1050;
		public const uint32 DISPID_SVGDEFSELEMENT = 1050;
		public const uint32 DISPID_SVGDESCELEMENT = 1050;
		public const uint32 DISPID_SVGELEMENTINSTANCE = 1000;
		public const uint32 DISPID_SVGELEMENTINSTANCELIST = 1000;
		public const uint32 DISPID_SVGELLIPSEELEMENT = 1050;
		public const uint32 DISPID_SVGFEBLENDELEMENT = 1050;
		public const uint32 DISPID_SVGFECOLORMATRIXELEMENT = 1050;
		public const uint32 DISPID_SVGFECOMPONENTTRANSFERELEMENT = 1050;
		public const uint32 DISPID_SVGCOMPONENTTRANSFERFUNCTIONELEMENT = 1050;
		public const uint32 DISPID_SVGFECOMPOSITEELEMENT = 1050;
		public const uint32 DISPID_SVGFECONVOLVEMATRIXELEMENT = 1050;
		public const uint32 DISPID_SVGFEDIFFUSELIGHTINGELEMENT = 1050;
		public const uint32 DISPID_SVGFEDISPLACEMENTMAPELEMENT = 1050;
		public const uint32 DISPID_SVGFEDISTANTLIGHTELEMENT = 1050;
		public const uint32 DISPID_SVGFEFLOODELEMENT = 1050;
		public const uint32 DISPID_SVGFEFUNCAELEMENT = 1050;
		public const uint32 DISPID_SVGFEFUNCBELEMENT = 1050;
		public const uint32 DISPID_SVGFEFUNCGELEMENT = 1050;
		public const uint32 DISPID_SVGFEFUNCRELEMENT = 1050;
		public const uint32 DISPID_SVGFEGAUSSIANBLURELEMENT = 1050;
		public const uint32 DISPID_SVGFEIMAGEELEMENT = 1050;
		public const uint32 DISPID_SVGFEMERGEELEMENT = 1050;
		public const uint32 DISPID_SVGFEMERGENODEELEMENT = 1050;
		public const uint32 DISPID_SVGFEMORPHOLOGYELEMENT = 1050;
		public const uint32 DISPID_SVGFEOFFSETELEMENT = 1050;
		public const uint32 DISPID_SVGFEPOINTLIGHTELEMENT = 1050;
		public const uint32 DISPID_SVGFESPECULARLIGHTINGELEMENT = 1050;
		public const uint32 DISPID_SVGFESPOTLIGHTELEMENT = 1050;
		public const uint32 DISPID_SVGFETILEELEMENT = 1050;
		public const uint32 DISPID_SVGFETURBULENCEELEMENT = 1050;
		public const uint32 DISPID_SVGFILTERELEMENT = 1050;
		public const uint32 DISPID_SVGFONT_FACE_FORMATELEMENT = 1050;
		public const uint32 DISPID_SVGFONT_FACE_NAMEELEMENT = 1050;
		public const uint32 DISPID_SVGFONT_FACE_SRCELEMENT = 1050;
		public const uint32 DISPID_SVGFONT_FACE_URIELEMENT = 1050;
		public const uint32 DISPID_SVGFONT_FACEELEMENT = 1050;
		public const uint32 DISPID_SVGFONTELEMENT = 1050;
		public const uint32 DISPID_SVGFOREIGNOBJECTELEMENT = 1050;
		public const uint32 DISPID_SVGGELEMENT = 1050;
		public const uint32 DISPID_SVGGLYPHELEMENT = 1050;
		public const uint32 DISPID_SVGGLYPHREFELEMENT = 1050;
		public const uint32 DISPID_SVGGRADIENTELEMENT = 1050;
		public const uint32 DISPID_SVGHKERNELEMENT = 1050;
		public const uint32 DISPID_SVGIMAGEELEMENT = 1050;
		public const uint32 DISPID_SVGLENGTH = 1000;
		public const uint32 DISPID_SVGLENGTHLIST = 1000;
		public const uint32 DISPID_SVGPRESERVEASPECTRATIO = 1000;
		public const uint32 DISPID_SVGANIMATEDPRESERVEASPECTRATIO = 1000;
		public const uint32 DISPID_SVGPOINT = 1000;
		public const uint32 DISPID_SVGPOINTLIST = 1000;
		public const uint32 DISPID_SVGLINEARGRADIENTELEMENT = 1070;
		public const uint32 DISPID_SVGLINEELEMENT = 1050;
		public const uint32 DISPID_SVGMARKERELEMENT = 1050;
		public const uint32 DISPID_SVGMASKELEMENT = 1050;
		public const uint32 DISPID_SVGMETADATAELEMENT = 1050;
		public const uint32 DISPID_SVGMISSING_GLYPHELEMENT = 1050;
		public const uint32 DISPID_SVGMPATHELEMENT = 1050;
		public const uint32 DISPID_SVGNUMBER = 1000;
		public const uint32 DISPID_SVGNUMBERLIST = 1000;
		public const uint32 DISPID_SVGPATHELEMENT = 1050;
		public const uint32 DISPID_SVGPATTERNELEMENT = 1050;
		public const uint32 DISPID_SVGPOLYGONELEMENT = 1050;
		public const uint32 DISPID_SVGPOLYLINEELEMENT = 1050;
		public const uint32 DISPID_SVGRADIALGRADIENTELEMENT = 1070;
		public const uint32 DISPID_SVGRECT = 1000;
		public const uint32 DISPID_SVGRECTELEMENT = 1050;
		public const uint32 DISPID_SVGSCRIPTELEMENT = 1050;
		public const uint32 DISPID_SVGSETELEMENT = 1050;
		public const uint32 DISPID_SVGSTOPELEMENT = 1050;
		public const uint32 DISPID_SVGSTRINGLIST = 1000;
		public const uint32 DISPID_SVGSTYLEELEMENT = 1050;
		public const uint32 DISPID_SVGSVGELEMENT = 1050;
		public const uint32 DISPID_SVGSWITCHELEMENT = 1050;
		public const uint32 DISPID_SVGSYMBOLELEMENT = 1050;
		public const uint32 DISPID_SVGTITLEELEMENT = 1050;
		public const uint32 DISPID_SVGTREFELEMENT = 1050;
		public const uint32 DISPID_SVGTEXTCONTENTELEMENT = 1050;
		public const uint32 DISPID_SVGTEXTCONTENTELEMENT_BASE = 1070;
		public const uint32 DISPID_SVGTEXTPOSITIONINGELEMENT = 1070;
		public const uint32 DISPID_SVGTEXTPOSITIONINGELEMENT_BASE = 1090;
		public const uint32 DISPID_SVGTEXTELEMENT = 1090;
		public const uint32 DISPID_SVGTSPANELEMENT = 1090;
		public const uint32 DISPID_SVGTEXTPATHELEMENT = 1070;
		public const uint32 DISPID_SVGUSEELEMENT = 1050;
		public const uint32 DISPID_SVGVIEWELEMENT = 1050;
		public const uint32 DISPID_SVGVKERNELEMENT = 1050;
		public const uint32 DISPID_SVGMATRIX = 1000;
		public const uint32 DISPID_SVGTRANSFORM = 1000;
		public const uint32 DISPID_SVGTRANSFORMLIST = 1000;
		public const uint32 DISPID_SVGANIMATEDTRANSFORMLIST = 1000;
		public const uint32 DISPID_SVGPATHSEG = 1000;
		public const uint32 DISPID_SVGPATHSEG_BASE = 1020;
		public const uint32 DISPID_SVGPATHSEGLIST = 1000;
		public const uint32 DISPID_SVGPATHSEGARCABS = 1020;
		public const uint32 DISPID_SVGPATHSEGARCREL = 1020;
		public const uint32 DISPID_SVGPATHSEGCLOSEPATH = 1020;
		public const uint32 DISPID_SVGPATHSEGMOVETOABS = 1020;
		public const uint32 DISPID_SVGPATHSEGMOVETOREL = 1020;
		public const uint32 DISPID_SVGPATHSEGLINETOABS = 1020;
		public const uint32 DISPID_SVGPATHSEGLINETOREL = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOCUBICABS = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOCUBICREL = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOCUBICSMOOTHABS = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOCUBICSMOOTHREL = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICABS = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICREL = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHABS = 1020;
		public const uint32 DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHREL = 1020;
		public const uint32 DISPID_SVGPATHSEGLINETOHORIZONTALABS = 1020;
		public const uint32 DISPID_SVGPATHSEGLINETOHORIZONTALREL = 1020;
		public const uint32 DISPID_SVGPATHSEGLINETOVERTICALABS = 1020;
		public const uint32 DISPID_SVGPATHSEGLINETOVERTICALREL = 1020;
		public const uint32 DISPID_CANVASELEMENT = 1000;
		public const uint32 DISPID_CANVASRENDERCONTEXT2D = 1000;
		public const uint32 DISPID_CANVASGRADIENT = 1000;
		public const uint32 DISPID_CANVASTEXTMETRICS = 1000;
		public const uint32 DISPID_CANVASIMAGEDATA = 1000;
		public const uint32 DISPID_CANVASPIXELARRAY = 1000;
		public const uint32 DISPID_PERFORMANCE = 1000;
		public const uint32 DISPID_PERFORMANCENAVIGATION = 1000;
		public const uint32 DISPID_PERFORMANCETIMING = 1000;
		public const uint32 DISPID_MSHTMLWEBVIEWELEMENT = 1000;
		public const uint32 DISPID_WEBGEOLOCATION = 1000;
		public const uint32 DISPID_WEBGEOPOSITION = 1000;
		public const uint32 DISPID_WEBGEOCOORDINATES = 1000;
		public const uint32 DISPID_WEBGEOPOSITION_ERROR = 1000;
		public const uint32 DISPID_DATALIST = 1000;
		public const uint32 DISPID_IE8_ANCHOR = 1150;
		public const uint32 DISPID_IE8_AREA = 1150;
		public const uint32 DISPID_IE8_BASE = 1150;
		public const uint32 DISPID_IE8_BODY = 1150;
		public const uint32 DISPID_IE8_FORM = 1150;
		public const uint32 DISPID_IE8_HEAD = 1150;
		public const uint32 DISPID_IE8_IMG = 1150;
		public const uint32 DISPID_IE8_INPUT = 1150;
		public const uint32 DISPID_IE8_LINK = 1150;
		public const uint32 DISPID_IE8_MOD = 1150;
		public const uint32 DISPID_IE8_SCRIPT = 1150;
		public const uint32 DISPID_IE8_ATTR = 1150;
		public const uint32 DISPID_IE8_NAMEDNODEMAP = 1150;
		public const uint32 DISPID_IE8_COLLECTION = 1150;
		public const uint32 DISPID_IE8_PARAM = 1150;
		public const uint32 DISPID_IE8_EMBED = 1150;
		public const uint32 DISPID_IE8_BLOCK = 1150;
		public const uint32 DISPID_IE8_META = 1150;
		public const uint32 DISPID_IE8_STYLE = 1150;
		public const uint32 DISPID_IE8_SELECT = 1150;
		public const uint32 DISPID_IE8_ELEMENTBASE = 66736;
		public const uint32 DISPID_IE8_ELEMENTMAX = 66776;
		public const uint32 DISPID_IE8_ELEMENT = 66736;
		public const uint32 DISPID_IE8_FRAMESITEBASE = 69656;
		public const uint32 DISPID_IE8_FRAME = 69656;
		public const uint32 DISPID_IE8_IFRAME = 69656;
		public const uint32 DISPID_IE8_OBJECTBASE = 68566;
		public const uint32 DISPID_IE8_OBJECT = 68566;
		public const uint32 DISPID_IE9_ELEMENTBASE = 66786;
		public const uint32 DISPID_IE9_ELEMENTMAX = 66821;
		public const uint32 DISPID_IE9_ELEMENT = 66786;
		public const uint32 DISPID_IE10_ELEMENTBASE = 66822;
		public const uint32 DISPID_IE10_ELEMENT = 66822;
		public const uint32 DISP10_IE10_XMSARIAFLOWFROM = 66835;
		public const int32 DISPID_WINDOWOBJECT = -5500;
		public const int32 DISPID_PERFORMANCEOBJECT = -5505;
		public const int32 DISPID_LOCATIONOBJECT = -5506;
		public const int32 DISPID_HISTORYOBJECT = -5507;
		public const int32 DISPID_NAVIGATOROBJECT = -5508;
		public const int32 DISPID_SECURITYCTX = -5511;
		public const int32 DISPID_AMBIENT_DLCONTROL = -5512;
		public const int32 DISPID_AMBIENT_USERAGENT = -5513;
		public const int32 DISPID_SECURITYDOMAIN = -5514;
		public const int32 DISPID_DEBUG_ISSECUREPROXY = -5515;
		public const int32 DISPID_DEBUG_TRUSTEDPROXY = -5516;
		public const int32 DISPID_DEBUG_INTERNALWINDOW = -5517;
		public const int32 DISPID_DEBUG_ENABLESECUREPROXYASSERTS = -5518;
		public const uint32 DLCTL_DLIMAGES = 16;
		public const uint32 DLCTL_VIDEOS = 32;
		public const uint32 DLCTL_BGSOUNDS = 64;
		public const uint32 DLCTL_NO_SCRIPTS = 128;
		public const uint32 DLCTL_NO_JAVA = 256;
		public const uint32 DLCTL_NO_RUNACTIVEXCTLS = 512;
		public const uint32 DLCTL_NO_DLACTIVEXCTLS = 1024;
		public const uint32 DLCTL_DOWNLOADONLY = 2048;
		public const uint32 DLCTL_NO_FRAMEDOWNLOAD = 4096;
		public const uint32 DLCTL_RESYNCHRONIZE = 8192;
		public const uint32 DLCTL_PRAGMA_NO_CACHE = 16384;
		public const uint32 DLCTL_NO_BEHAVIORS = 32768;
		public const uint32 DLCTL_NO_METACHARSET = 65536;
		public const uint32 DLCTL_URL_ENCODING_DISABLE_UTF8 = 131072;
		public const uint32 DLCTL_URL_ENCODING_ENABLE_UTF8 = 262144;
		public const uint32 DLCTL_NOFRAMES = 524288;
		public const uint32 DLCTL_FORCEOFFLINE = 268435456;
		public const uint32 DLCTL_NO_CLIENTPULL = 536870912;
		public const uint32 DLCTL_SILENT = 1073741824;
		public const uint32 DLCTL_OFFLINEIFNOTCONNECTED = 2147483648;
		public const uint32 DLCTL_OFFLINE = 2147483648;
		public const uint32 DISPID_ONABORT = 1000;
		public const uint32 DISPID_ONCHANGE = 1001;
		public const uint32 DISPID_ONERROR = 1002;
		public const uint32 DISPID_ONLOAD = 1003;
		public const uint32 DISPID_ONSELECT = 1006;
		public const uint32 DISPID_ONSUBMIT = 1007;
		public const uint32 DISPID_ONUNLOAD = 1008;
		public const uint32 DISPID_ONBOUNCE = 1009;
		public const uint32 DISPID_ONFINISH = 1010;
		public const uint32 DISPID_ONSTART = 1011;
		public const uint32 DISPID_ONLAYOUT = 1013;
		public const uint32 DISPID_ONSCROLL = 1014;
		public const uint32 DISPID_ONRESET = 1015;
		public const uint32 DISPID_ONRESIZE = 1016;
		public const uint32 DISPID_ONBEFOREUNLOAD = 1017;
		public const uint32 DISPID_ONCHANGEFOCUS = 1018;
		public const uint32 DISPID_ONCHANGEBLUR = 1019;
		public const uint32 DISPID_ONPERSIST = 1020;
		public const uint32 DISPID_ONPERSISTSAVE = 1021;
		public const uint32 DISPID_ONPERSISTLOAD = 1022;
		public const uint32 DISPID_ONCONTEXTMENU = 1023;
		public const uint32 DISPID_ONBEFOREPRINT = 1024;
		public const uint32 DISPID_ONAFTERPRINT = 1025;
		public const uint32 DISPID_ONSTOP = 1026;
		public const uint32 DISPID_ONBEFOREEDITFOCUS = 1027;
		public const uint32 DISPID_ONMOUSEHOVER = 1028;
		public const uint32 DISPID_ONCONTENTREADY = 1029;
		public const uint32 DISPID_ONLAYOUTCOMPLETE = 1030;
		public const uint32 DISPID_ONPAGE = 1031;
		public const uint32 DISPID_ONLINKEDOVERFLOW = 1032;
		public const uint32 DISPID_ONMOUSEWHEEL = 1033;
		public const uint32 DISPID_ONBEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_ONMOVE = 1035;
		public const uint32 DISPID_ONCONTROLSELECT = 1036;
		public const uint32 DISPID_ONSELECTIONCHANGE = 1037;
		public const uint32 DISPID_ONMOVESTART = 1038;
		public const uint32 DISPID_ONMOVEEND = 1039;
		public const uint32 DISPID_ONRESIZESTART = 1040;
		public const uint32 DISPID_ONRESIZEEND = 1041;
		public const uint32 DISPID_ONMOUSEENTER = 1042;
		public const uint32 DISPID_ONMOUSELEAVE = 1043;
		public const uint32 DISPID_ONACTIVATE = 1044;
		public const uint32 DISPID_ONDEACTIVATE = 1045;
		public const uint32 DISPID_ONMULTILAYOUTCLEANUP = 1046;
		public const uint32 DISPID_ONBEFOREACTIVATE = 1047;
		public const uint32 DISPID_ONFOCUSIN = 1048;
		public const uint32 DISPID_ONFOCUSOUT = 1049;
		public const uint32 DISPID_ONVALUECHANGE = 1050;
		public const uint32 DISPID_ONSELECTADD = 1051;
		public const uint32 DISPID_ONSELECTREMOVE = 1052;
		public const uint32 DISPID_ONSELECTWITHIN = 1053;
		public const uint32 DISPID_ONSYSTEMSCROLLINGSTART = 1054;
		public const uint32 DISPID_ONSYSTEMSCROLLINGEND = 1055;
		public const uint32 DISPID_ONOBJECTCONTENTSCROLLED = 1056;
		public const uint32 DISPID_ONSTORAGE = 1057;
		public const uint32 DISPID_ONSTORAGECOMMIT = 1058;
		public const uint32 DISPID_ONSHOW = 1059;
		public const uint32 DISPID_ONHIDE = 1060;
		public const uint32 DISPID_ONALERT = 1061;
		public const uint32 DISPID_ONPOPUPMENUSTART = 1062;
		public const uint32 DISPID_ONPOPUPMENUEND = 1063;
		public const uint32 DISPID_ONONLINE = 1064;
		public const uint32 DISPID_ONOFFLINE = 1065;
		public const uint32 DISPID_ONHASHCHANGE = 1066;
		public const uint32 DISPID_ONMESSAGE = 1067;
		public const uint32 DISPID_ONDOMMUTATION = 1068;
		public const uint32 DISPID_SVGLOAD = 1069;
		public const uint32 DISPID_SVGUNLOAD = 1070;
		public const uint32 DISPID_SVGABORT = 1071;
		public const uint32 DISPID_SVGERROR = 1072;
		public const uint32 DISPID_SVGRESIZE = 1073;
		public const uint32 DISPID_SVGSCROLL = 1074;
		public const uint32 DISPID_SVGZOOM = 1075;
		public const uint32 DISPID_MSPOINTERDOWN = 1076;
		public const uint32 DISPID_MSPOINTERMOVE = 1077;
		public const uint32 DISPID_MSPOINTERUP = 1078;
		public const uint32 DISPID_MSPOINTEROVER = 1079;
		public const uint32 DISPID_MSPOINTEROUT = 1080;
		public const uint32 DISPID_MSPOINTERCANCEL = 1081;
		public const uint32 DISPID_MSPOINTERHOVER = 1082;
		public const uint32 DISPID_MSGESTURESTART = 1083;
		public const uint32 DISPID_MSGESTURECHANGE = 1084;
		public const uint32 DISPID_MSGESTUREEND = 1085;
		public const uint32 DISPID_MSGESTUREHOLD = 1086;
		public const uint32 DISPID_MSGESTURETAP = 1087;
		public const uint32 DISPID_MSGESTUREDOUBLETAP = 1088;
		public const uint32 DISPID_MSINERTIASTART = 1089;
		public const uint32 DISPID_MSLOSTPOINTERCAPTURE = 1090;
		public const uint32 DISPID_MSGOTPOINTERCAPTURE = 1091;
		public const uint32 DISPID_MSTRANSITIONSTART = 1092;
		public const uint32 DISPID_MSTRANSITIONEND = 1093;
		public const uint32 DISPID_MSANIMATIONSTART = 1094;
		public const uint32 DISPID_MSANIMATIONEND = 1095;
		public const uint32 DISPID_MSANIMATIONITERATION = 1096;
		public const uint32 DISPID_MSGESTUREINIT = 1097;
		public const uint32 DISPID_MSMANIPULATIONSTATECHANGED = 1098;
		public const uint32 DISPID_ONOPEN = 1099;
		public const uint32 DISPID_ONCLOSE = 1100;
		public const uint32 DISPID_MSPOINTERENTER = 1101;
		public const uint32 DISPID_MSPOINTERLEAVE = 1102;
		public const uint32 DISPID_MSORIENTATIONCHANGE = 1103;
		public const uint32 DISPID_ONDEVICEORIENTATION = 1104;
		public const uint32 DISPID_ONDEVICEMOTION = 1105;
		public const uint32 DISPID_ONPAGESHOW = 1106;
		public const uint32 DISPID_ONPAGEHIDE = 1107;
		public const uint32 DISPID_ONCOMPASSNEEDSCALIBRATION = 1108;
		public const uint32 DISPID_A_FIRST = 70536;
		public const uint32 DISPID_A_MIN = 70536;
		public const uint32 DISPID_A_MAX = 71535;
		public const uint32 DISPID_A_BACKGROUNDIMAGE = 70537;
		public const uint32 DISPID_A_COLOR = 70538;
		public const uint32 DISPID_A_TEXTTRANSFORM = 70540;
		public const uint32 DISPID_A_NOWRAP = 70541;
		public const uint32 DISPID_A_LINEHEIGHT = 70542;
		public const uint32 DISPID_A_TEXTINDENT = 70543;
		public const uint32 DISPID_A_LETTERSPACING = 70544;
		public const uint32 DISPID_A_LANG = 70545;
		public const uint32 DISPID_A_OVERFLOW = 70546;
		public const uint32 DISPID_A_PADDING = 70547;
		public const uint32 DISPID_A_PADDINGTOP = 70548;
		public const uint32 DISPID_A_PADDINGRIGHT = 70549;
		public const uint32 DISPID_A_PADDINGBOTTOM = 70550;
		public const uint32 DISPID_A_PADDINGLEFT = 70551;
		public const uint32 DISPID_A_CLEAR = 70552;
		public const uint32 DISPID_A_LISTTYPE = 70553;
		public const uint32 DISPID_A_FONTFACE = 70554;
		public const uint32 DISPID_A_FONTSIZE = 70555;
		public const uint32 DISPID_A_TEXTDECORATIONLINETHROUGH = 70556;
		public const uint32 DISPID_A_TEXTDECORATIONUNDERLINE = 70557;
		public const uint32 DISPID_A_TEXTDECORATIONBLINK = 70558;
		public const uint32 DISPID_A_TEXTDECORATIONNONE = 70559;
		public const uint32 DISPID_A_FONTSTYLE = 70560;
		public const uint32 DISPID_A_FONTVARIANT = 70561;
		public const uint32 DISPID_A_BASEFONT = 70562;
		public const uint32 DISPID_A_FONTWEIGHT = 70563;
		public const uint32 DISPID_A_TABLEBORDERCOLOR = 70564;
		public const uint32 DISPID_A_TABLEBORDERCOLORLIGHT = 70565;
		public const uint32 DISPID_A_TABLEBORDERCOLORDARK = 70566;
		public const uint32 DISPID_A_TABLEVALIGN = 70567;
		public const uint32 DISPID_A_BACKGROUND = 70568;
		public const uint32 DISPID_A_BACKGROUNDPOSX = 70569;
		public const uint32 DISPID_A_BACKGROUNDPOSY = 70570;
		public const uint32 DISPID_A_TEXTDECORATION = 70571;
		public const uint32 DISPID_A_MARGIN = 70572;
		public const uint32 DISPID_A_MARGINTOP = 70573;
		public const uint32 DISPID_A_MARGINRIGHT = 70574;
		public const uint32 DISPID_A_MARGINBOTTOM = 70575;
		public const uint32 DISPID_A_MARGINLEFT = 70576;
		public const uint32 DISPID_A_FONT = 70577;
		public const uint32 DISPID_A_FONTSIZEKEYWORD = 70578;
		public const uint32 DISPID_A_FONTSIZECOMBINE = 70579;
		public const uint32 DISPID_A_BACKGROUNDREPEAT = 70580;
		public const uint32 DISPID_A_BACKGROUNDATTACHMENT = 70581;
		public const uint32 DISPID_A_BACKGROUNDPOSITION = 70582;
		public const uint32 DISPID_A_WORDSPACING = 70583;
		public const uint32 DISPID_A_VERTICALALIGN = 70584;
		public const uint32 DISPID_A_BORDER = 70585;
		public const uint32 DISPID_A_BORDERTOP = 70586;
		public const uint32 DISPID_A_BORDERRIGHT = 70587;
		public const uint32 DISPID_A_BORDERBOTTOM = 70588;
		public const uint32 DISPID_A_BORDERLEFT = 70589;
		public const uint32 DISPID_A_BORDERCOLOR = 70590;
		public const uint32 DISPID_A_BORDERTOPCOLOR = 70591;
		public const uint32 DISPID_A_BORDERRIGHTCOLOR = 70592;
		public const uint32 DISPID_A_BORDERBOTTOMCOLOR = 70593;
		public const uint32 DISPID_A_BORDERLEFTCOLOR = 70594;
		public const uint32 DISPID_A_BORDERWIDTH = 70595;
		public const uint32 DISPID_A_BORDERTOPWIDTH = 70596;
		public const uint32 DISPID_A_BORDERRIGHTWIDTH = 70597;
		public const uint32 DISPID_A_BORDERBOTTOMWIDTH = 70598;
		public const uint32 DISPID_A_BORDERLEFTWIDTH = 70599;
		public const uint32 DISPID_A_BORDERSTYLE = 70600;
		public const uint32 DISPID_A_BORDERTOPSTYLE = 70601;
		public const uint32 DISPID_A_BORDERRIGHTSTYLE = 70602;
		public const uint32 DISPID_A_BORDERBOTTOMSTYLE = 70603;
		public const uint32 DISPID_A_BORDERLEFTSTYLE = 70604;
		public const uint32 DISPID_A_TEXTDECORATIONOVERLINE = 70605;
		public const uint32 DISPID_A_FLOAT = 70606;
		public const uint32 DISPID_A_DISPLAY = 70607;
		public const uint32 DISPID_A_LISTSTYLETYPE = 70608;
		public const uint32 DISPID_A_LISTSTYLEPOSITION = 70609;
		public const uint32 DISPID_A_LISTSTYLEIMAGE = 70610;
		public const uint32 DISPID_A_LISTSTYLE = 70611;
		public const uint32 DISPID_A_WHITESPACE = 70612;
		public const uint32 DISPID_A_PAGEBREAKBEFORE = 70613;
		public const uint32 DISPID_A_PAGEBREAKAFTER = 70614;
		public const uint32 DISPID_A_SCROLL = 70615;
		public const uint32 DISPID_A_VISIBILITY = 70616;
		public const uint32 DISPID_A_HIDDEN = 70617;
		public const uint32 DISPID_A_FILTER = 70618;
		public const uint32 DISPID_DEFAULTVALUE = 70619;
		public const uint32 DISPID_A_BORDERCOLLAPSE = 70620;
		public const uint32 DISPID_A_POSITION = 70626;
		public const uint32 DISPID_A_ZINDEX = 70627;
		public const uint32 DISPID_A_CLIP = 70628;
		public const uint32 DISPID_A_CLIPRECTTOP = 70629;
		public const uint32 DISPID_A_CLIPRECTRIGHT = 70630;
		public const uint32 DISPID_A_CLIPRECTBOTTOM = 70631;
		public const uint32 DISPID_A_CLIPRECTLEFT = 70632;
		public const uint32 DISPID_A_FONTFACESRC = 70633;
		public const uint32 DISPID_A_TABLELAYOUT = 70634;
		public const uint32 DISPID_A_STYLETEXT = 70635;
		public const uint32 DISPID_A_LANGUAGE = 70636;
		public const uint32 DISPID_A_VALUE = 70637;
		public const uint32 DISPID_A_CURSOR = 70638;
		public const uint32 DISPID_A_EVENTSINK = 70639;
		public const uint32 DISPID_A_PROPNOTIFYSINK = 70640;
		public const uint32 DISPID_A_ROWSETNOTIFYSINK = 70641;
		public const uint32 DISPID_INTERNAL_INLINESTYLEAA = 70642;
		public const uint32 DISPID_INTERNAL_CSTYLEPTRCACHE = 70643;
		public const uint32 DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE = 70644;
		public const uint32 DISPID_INTERNAL_INVOKECONTEXT = 70645;
		public const uint32 DISPID_A_BGURLIMGCTXCACHEINDEX = 70646;
		public const uint32 DISPID_A_LIURLIMGCTXCACHEINDEX = 70647;
		public const uint32 DISPID_A_ROWSETASYNCHNOTIFYSINK = 70648;
		public const uint32 DISPID_INTERNAL_FILTERPTRCACHE = 70649;
		public const uint32 DISPID_A_ROWPOSITIONCHANGESINK = 70650;
		public const uint32 DISPID_A_BEHAVIOR = 70651;
		public const uint32 DISPID_A_READYSTATE = 70652;
		public const uint32 DISPID_A_DIR = 70653;
		public const uint32 DISPID_A_UNICODEBIDI = 70654;
		public const uint32 DISPID_A_DIRECTION = 70655;
		public const uint32 DISPID_A_IMEMODE = 70656;
		public const uint32 DISPID_A_RUBYALIGN = 70657;
		public const uint32 DISPID_A_RUBYPOSITION = 70658;
		public const uint32 DISPID_A_RUBYOVERHANG = 70659;
		public const uint32 DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY = 70660;
		public const uint32 DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY = 70661;
		public const uint32 DISPID_INTERNAL_CDOMCHILDRENPTRCACHE = 70662;
		public const uint32 DISPID_A_LAYOUTGRIDCHAR = 70663;
		public const uint32 DISPID_A_LAYOUTGRIDLINE = 70664;
		public const uint32 DISPID_A_LAYOUTGRIDMODE = 70665;
		public const uint32 DISPID_A_LAYOUTGRIDTYPE = 70666;
		public const uint32 DISPID_A_LAYOUTGRID = 70667;
		public const uint32 DISPID_A_TEXTAUTOSPACE = 70668;
		public const uint32 DISPID_A_LINEBREAK = 70669;
		public const uint32 DISPID_A_WORDBREAK = 70670;
		public const uint32 DISPID_A_TEXTJUSTIFY = 70671;
		public const uint32 DISPID_A_TEXTJUSTIFYTRIM = 70672;
		public const uint32 DISPID_A_TEXTKASHIDA = 70673;
		public const uint32 DISPID_A_OVERFLOWX = 70675;
		public const uint32 DISPID_A_OVERFLOWY = 70676;
		public const uint32 DISPID_A_HTCDISPATCHITEM_VALUE = 70677;
		public const uint32 DISPID_A_DOCFRAGMENT = 70678;
		public const uint32 DISPID_A_HTCDD_ELEMENT = 70679;
		public const uint32 DISPID_A_HTCDD_CREATEEVENTOBJECT = 70680;
		public const uint32 DISPID_A_URNATOM = 70681;
		public const uint32 DISPID_A_UNIQUEPEERNUMBER = 70682;
		public const uint32 DISPID_A_ACCELERATOR = 70683;
		public const uint32 DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE = 70684;
		public const uint32 DISPID_INTERNAL_RUNTIMESTYLEAA = 70685;
		public const uint32 DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY = 70686;
		public const uint32 DISPID_A_EXTENDEDTAGDESC = 70687;
		public const uint32 DISPID_A_ROTATE = 70688;
		public const uint32 DISPID_A_ZOOM = 70689;
		public const uint32 DISPID_A_HTCDD_PROTECTEDELEMENT = 70690;
		public const uint32 DISPID_A_LAYOUTFLOW = 70691;
		public const uint32 DISPID_INTERNAL_FILTERNATIVEINFOPTRCACHE = 70692;
		public const uint32 DISPID_A_HTCDD_ISMARKUPSHARED = 70693;
		public const uint32 DISPID_A_WORDWRAP = 70694;
		public const uint32 DISPID_A_TEXTUNDERLINEPOSITION = 70695;
		public const uint32 DISPID_A_HASLAYOUT = 70696;
		public const uint32 DISPID_A_MEDIA = 70697;
		public const uint32 DISPID_A_EDITABLE = 70698;
		public const uint32 DISPID_A_HIDEFOCUS = 70699;
		public const uint32 DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE = 70700;
		public const uint32 DISPID_A_HTCDD_DEFAULTS = 70701;
		public const uint32 DISPID_A_TEXTLINETHROUGHSTYLE = 70702;
		public const uint32 DISPID_A_TEXTUNDERLINESTYLE = 70703;
		public const uint32 DISPID_A_TEXTEFFECT = 70704;
		public const uint32 DISPID_A_TEXTBACKGROUNDCOLOR = 70705;
		public const uint32 DISPID_A_RENDERINGPRIORITY = 70706;
		public const uint32 DISPID_INTERNAL_DWNPOSTPTRCACHE = 70707;
		public const uint32 DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE = 70708;
		public const uint32 DISPID_INTERNAL_DWNDOCPTRCACHE = 70709;
		public const uint32 DISPID_INTERNAL_DATABINDTASKPTRCACHE = 70710;
		public const uint32 DISPID_INTERNAL_URLLOCATIONCACHE = 70711;
		public const uint32 DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE = 70712;
		public const uint32 DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE = 70713;
		public const uint32 DISPID_INTERNAL_STMDIRTYPTRCACHE = 70714;
		public const uint32 DISPID_INTERNAL_COMPUTEFORMATSTATECACHE = 70715;
		public const uint32 DISPID_A_SCROLLBARBASECOLOR = 70716;
		public const uint32 DISPID_A_SCROLLBARFACECOLOR = 70717;
		public const uint32 DISPID_A_SCROLLBAR3DLIGHTCOLOR = 70718;
		public const uint32 DISPID_A_SCROLLBARSHADOWCOLOR = 70719;
		public const uint32 DISPID_A_SCROLLBARHIGHLIGHTCOLOR = 70720;
		public const uint32 DISPID_A_SCROLLBARDARKSHADOWCOLOR = 70721;
		public const uint32 DISPID_A_SCROLLBARARROWCOLOR = 70722;
		public const uint32 DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE = 70723;
		public const uint32 DISPID_A_DEFAULTTEXTSELECTION = 70724;
		public const uint32 DISPID_A_TEXTDECORATIONCOLOR = 70725;
		public const uint32 DISPID_A_TEXTCOLOR = 70726;
		public const uint32 DISPID_A_STYLETEXTDECORATION = 70727;
		public const uint32 DISPID_A_WRITINGMODE = 70728;
		public const uint32 DISPID_INTERNAL_MEDIA_REFERENCE = 70729;
		public const uint32 DISPID_INTERNAL_GENERICCOMPLUSREF = 70730;
		public const uint32 DISPID_INTERNAL_FOCUSITEMS = 70731;
		public const uint32 DISPID_A_SCROLLBARTRACKCOLOR = 70732;
		public const uint32 DISPID_INTERNAL_DWNHEADERCACHE = 70733;
		public const uint32 DISPID_A_FROZEN = 70734;
		public const uint32 DISPID_A_VIEWINHERITSTYLE = 70735;
		public const uint32 DISPID_INTERNAL_FRAMESCOLLECTION = 70736;
		public const uint32 DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE = 70737;
		public const uint32 DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER = 70738;
		public const uint32 DISPID_A_TEXTALIGNLAST = 70739;
		public const uint32 DISPID_A_TEXTKASHIDASPACE = 70740;
		public const uint32 DISPID_INTERNAL_FONTHISTORYINDEX = 70741;
		public const uint32 DISPID_A_ALLOWTRANSPARENCY = 70742;
		public const uint32 DISPID_INTERNAL_URLSEARCHCACHE = 70743;
		public const uint32 DISPID_A_ISBLOCK = 70744;
		public const uint32 DISPID_A_TEXTOVERFLOW = 70745;
		public const uint32 DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE = 70746;
		public const uint32 DISPID_A_MINHEIGHT = 70747;
		public const uint32 DISPID_INTERNAL_INVOKECONTEXTDOCUMENT = 70748;
		public const uint32 DISPID_A_INTERPOLATION = 70749;
		public const uint32 DISPID_A_MAXHEIGHT = 70750;
		public const uint32 DISPID_A_MINWIDTH = 70751;
		public const uint32 DISPID_A_MAXWIDTH = 70752;
		public const uint32 DISPID_INTERNAL_ARYOBJECTRELEASECLEANUPPTRCACHE = 70753;
		public const uint32 DISPID_A_CONTENT = 70754;
		public const uint32 DISPID_A_CAPTIONSIDE = 70755;
		public const uint32 DISPID_A_COUNTERINCREMENT = 70756;
		public const uint32 DISPID_A_COUNTERRESET = 70757;
		public const uint32 DISPID_A_OUTLINE = 70758;
		public const uint32 DISPID_A_OUTLINEWIDTH = 70759;
		public const uint32 DISPID_A_OUTLINESTYLE = 70760;
		public const uint32 DISPID_A_OUTLINECOLOR = 70761;
		public const uint32 DISPID_A_BOXSIZING = 70762;
		public const uint32 DISPID_A_BORDERSPACING = 70763;
		public const uint32 DISPID_A_ORPHANS = 70764;
		public const uint32 DISPID_A_WIDOWS = 70765;
		public const uint32 DISPID_A_PAGEBREAKINSIDE = 70766;
		public const uint32 DISPID_A_MS_BEHAVIOR = 70767;
		public const uint32 DISPID_A_MS_SCROLLBARBASECOLOR = 70768;
		public const uint32 DISPID_A_MS_SCROLLBARFACECOLOR = 70769;
		public const uint32 DISPID_A_MS_SCROLLBAR3DLIGHTCOLOR = 70770;
		public const uint32 DISPID_A_MS_SCROLLBARSHADOWCOLOR = 70771;
		public const uint32 DISPID_A_MS_SCROLLBARHIGHLIGHTCOLOR = 70772;
		public const uint32 DISPID_A_MS_SCROLLBARDARKSHADOWCOLOR = 70773;
		public const uint32 DISPID_A_MS_SCROLLBARARROWCOLOR = 70774;
		public const uint32 DISPID_A_MS_SCROLLBARTRACKCOLOR = 70775;
		public const uint32 DISPID_A_MS_TEXTALIGNLAST = 70776;
		public const uint32 DISPID_A_MS_TEXTOVERFLOW = 70777;
		public const uint32 DISPID_A_MS_TEXTUNDERLINEPOSITION = 70778;
		public const uint32 DISPID_A_MS_WRITINGMODE = 70779;
		public const uint32 DISPID_A_MS_IMEMODE = 70780;
		public const uint32 DISPID_A_MS_BACKGROUNDPOSX = 70781;
		public const uint32 DISPID_A_MS_BACKGROUNDPOSY = 70782;
		public const uint32 DISPID_A_MS_ACCELERATOR = 70783;
		public const uint32 DISPID_A_MS_LAYOUTFLOW = 70784;
		public const uint32 DISPID_A_MS_ZOOM = 70785;
		public const uint32 DISPID_A_EMPTYCELLS = 70786;
		public const uint32 DISPID_A_MS_BLOCKPROGRESSION = 70787;
		public const uint32 DISPID_A_QUOTES = 70788;
		public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCBEFORE = 70789;
		public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCAFTER = 70790;
		public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLBEFORE = 70791;
		public const uint32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLAFTER = 70792;
		public const uint32 DISPID_AAHEADER = 70793;
		public const uint32 DISPID_INTERNAL_GETTERSETTERCOLLECTION = 70794;
		public const uint32 DISPID_A_MS_LAYOUTGRIDCHAR = 70795;
		public const uint32 DISPID_A_MS_LAYOUTGRIDLINE = 70796;
		public const uint32 DISPID_A_MS_LAYOUTGRIDMODE = 70797;
		public const uint32 DISPID_A_MS_LAYOUTGRIDTYPE = 70798;
		public const uint32 DISPID_A_MS_LAYOUTGRID = 70799;
		public const uint32 DISPID_A_MS_LINEBREAK = 70800;
		public const uint32 DISPID_A_MS_FILTER = 70801;
		public const uint32 DISPID_A_MS_OVERFLOWX = 70802;
		public const uint32 DISPID_A_MS_OVERFLOWY = 70803;
		public const uint32 DISPID_A_MS_TEXTAUTOSPACE = 70804;
		public const uint32 DISPID_A_MS_TEXTJUSTIFY = 70805;
		public const uint32 DISPID_A_MS_TEXTKASHIDASPACE = 70806;
		public const uint32 DISPID_A_MS_WORDBREAK = 70807;
		public const uint32 DISPID_A_MS_WORDWRAP = 70808;
		public const uint32 DISPID_INTERNAL_URIBEFOREREDIRECT = 70809;
		public const uint32 DISPID_A_ALIGNMENTBASELINE = 70814;
		public const uint32 DISPID_A_BASELINESHIFT = 70815;
		public const uint32 DISPID_A_DOMINANTBASELINE = 70816;
		public const uint32 DISPID_A_FONTSIZEADJUST = 70817;
		public const uint32 DISPID_A_FONTSTRETCH = 70818;
		public const uint32 DISPID_A_OPACITY = 70819;
		public const uint32 DISPID_A_CLIPPATH = 70820;
		public const uint32 DISPID_A_CLIPRULE = 70821;
		public const uint32 DISPID_A_FILL = 70822;
		public const uint32 DISPID_A_FILLOPACITY = 70823;
		public const uint32 DISPID_A_FILLRULE = 70824;
		public const uint32 DISPID_A_KERNING = 70825;
		public const uint32 DISPID_A_MARKER = 70826;
		public const uint32 DISPID_A_MARKEREND = 70827;
		public const uint32 DISPID_A_MARKERMID = 70828;
		public const uint32 DISPID_A_MARKERSTART = 70829;
		public const uint32 DISPID_A_MASK = 70830;
		public const uint32 DISPID_A_POINTEREVENTS = 70831;
		public const uint32 DISPID_A_STOPCOLOR = 70832;
		public const uint32 DISPID_A_STOPOPACITY = 70833;
		public const uint32 DISPID_A_STROKE = 70834;
		public const uint32 DISPID_A_STROKEDASHARRAY = 70835;
		public const uint32 DISPID_A_STROKEDASHOFFSET = 70836;
		public const uint32 DISPID_A_STROKELINECAP = 70837;
		public const uint32 DISPID_A_STROKELINEJOIN = 70838;
		public const uint32 DISPID_A_STROKEMITERLIMIT = 70839;
		public const uint32 DISPID_A_STROKEOPACITY = 70840;
		public const uint32 DISPID_A_STROKEWIDTH = 70841;
		public const uint32 DISPID_A_TEXTANCHOR = 70842;
		public const uint32 DISPID_A_GLYPHORIENTATIONHORIZONTAL = 70843;
		public const uint32 DISPID_A_GLYPHORIENTATIONVERTICAL = 70844;
		public const uint32 DISPID_A_CSSFLOAT = 70845;
		public const uint32 DISPID_A_BORDERRADIUS = 70846;
		public const uint32 DISPID_A_BORDERTOPLEFTRADIUS = 70847;
		public const uint32 DISPID_A_BORDERTOPRIGHTRADIUS = 70848;
		public const uint32 DISPID_A_BORDERBOTTOMRIGHTRADIUS = 70849;
		public const uint32 DISPID_A_BORDERBOTTOMLEFTRADIUS = 70850;
		public const uint32 DISPID_A_MS_TRANSFORM = 70851;
		public const uint32 DISPID_A_IE9_BACKGROUNDCLIP = 70852;
		public const uint32 DISPID_A_IE9_BACKGROUNDORIGIN = 70853;
		public const uint32 DISPID_A_IE9_BACKGROUNDSIZE = 70854;
		public const uint32 DISPID_A_IE9_BOXSHADOW = 70855;
		public const uint32 DISPID_A_MS_TRANSFORMORIGIN = 70861;
		public const uint32 DISPID_A_MS_TRANSFORMORIGINX = 70862;
		public const uint32 DISPID_A_MS_TRANSFORMORIGINY = 70863;
		public const uint32 DISPID_A_MS_TEXTSIZEADJUST = 70864;
		public const uint32 DISPID_A_MS_TRANSITIONPROPERTY = 70866;
		public const uint32 DISPID_A_MS_TRANSITIONDURATION = 70867;
		public const uint32 DISPID_A_MS_TRANSITIONTIMINGFUNCTION = 70868;
		public const uint32 DISPID_A_MS_TRANSITIONDELAY = 70869;
		public const uint32 DISPID_A_MS_TRANSITION = 70870;
		public const uint32 DISPID_A_COLUMNS = 70871;
		public const uint32 DISPID_A_COLUMNCOUNT = 70872;
		public const uint32 DISPID_A_COLUMNWIDTH = 70873;
		public const uint32 DISPID_A_COLUMNGAP = 70874;
		public const uint32 DISPID_A_COLUMNFILL = 70875;
		public const uint32 DISPID_A_COLUMNSPAN = 70876;
		public const uint32 DISPID_A_COLUMNRULE = 70877;
		public const uint32 DISPID_A_COLUMNRULESTYLE = 70878;
		public const uint32 DISPID_A_COLUMNRULEWIDTH = 70879;
		public const uint32 DISPID_A_COLUMNRULECOLOR = 70880;
		public const uint32 DISPID_A_BREAKBEFORE = 70881;
		public const uint32 DISPID_A_BREAKAFTER = 70882;
		public const uint32 DISPID_A_BREAKINSIDE = 70883;
		public const uint32 DISPID_A_MS_TRANSFORMORIGINZ = 70884;
		public const uint32 DISPID_A_MS_PERSPECTIVE = 70885;
		public const uint32 DISPID_A_MS_PERSPECTIVEORIGIN = 70886;
		public const uint32 DISPID_A_MS_PERSPECTIVEORIGINX = 70887;
		public const uint32 DISPID_A_MS_PERSPECTIVEORIGINY = 70888;
		public const uint32 DISPID_A_MS_TRANSFORMSTYLE = 70889;
		public const uint32 DISPID_A_MS_BACKFACEVISIBILITY = 70890;
		public const uint32 DISPID_A_MS_SCROLLCHAINING = 70891;
		public const uint32 DISPID_A_MS_CONTENTZOOMING = 70892;
		public const uint32 DISPID_A_MS_CONTENTZOOMSNAPTYPE = 70893;
		public const uint32 DISPID_A_MS_SCROLLRAILS = 70894;
		public const uint32 DISPID_A_MS_CONTENTZOOMCHAINING = 70895;
		public const uint32 DISPID_A_MS_SCROLLSNAPTYPE = 70896;
		public const uint32 DISPID_A_MS_CONTENTZOOMLIMIT = 70897;
		public const uint32 DISPID_A_MS_CONTENTZOOMSNAP = 70898;
		public const uint32 DISPID_A_MS_CONTENTZOOMSNAPPOINTS = 70899;
		public const uint32 DISPID_A_MS_CONTENTZOOMFACTOR = 70900;
		public const uint32 DISPID_A_MS_CONTENTZOOMLIMITMIN = 70901;
		public const uint32 DISPID_A_MS_CONTENTZOOMLIMITMAX = 70902;
		public const uint32 DISPID_A_MS_SCROLLSNAPX = 70903;
		public const uint32 DISPID_A_MS_SCROLLSNAPY = 70904;
		public const uint32 DISPID_A_MS_SCROLLSNAPPOINTSX = 70905;
		public const uint32 DISPID_A_MS_SCROLLSNAPPOINTSY = 70906;
		public const uint32 DISPID_A_SPELLCHECK = 70907;
		public const uint32 DISPID_A_MS_GRIDCOLUMN = 70908;
		public const uint32 DISPID_A_MS_GRIDCOLUMNALIGN = 70909;
		public const uint32 DISPID_A_MS_GRIDCOLUMNS = 70910;
		public const uint32 DISPID_A_MS_GRIDCOLUMNSPAN = 70911;
		public const uint32 DISPID_A_MS_GRIDROW = 70913;
		public const uint32 DISPID_A_MS_GRIDROWALIGN = 70914;
		public const uint32 DISPID_A_MS_GRIDROWS = 70915;
		public const uint32 DISPID_A_MS_GRIDROWSPAN = 70916;
		public const uint32 DISPID_A_MS_ANIMATIONNAME = 70917;
		public const uint32 DISPID_A_MS_ANIMATIONDURATION = 70918;
		public const uint32 DISPID_A_MS_ANIMATIONTIMINGFUNCTION = 70919;
		public const uint32 DISPID_A_MS_ANIMATIONDELAY = 70920;
		public const uint32 DISPID_A_MS_ANIMATIONDIRECTION = 70921;
		public const uint32 DISPID_A_MS_ANIMATIONPLAYSTATE = 70922;
		public const uint32 DISPID_A_MS_ANIMATIONITERATIONCOUNT = 70923;
		public const uint32 DISPID_A_MS_ANIMATION = 70924;
		public const uint32 DISPID_A_MS_ANIMATIONFILLMODE = 70925;
		public const uint32 DISPID_A_FLOODCOLOR = 70926;
		public const uint32 DISPID_A_FLOODOPACITY = 70927;
		public const uint32 DISPID_A_COLORINTERPOLATIONFILTERS = 70928;
		public const uint32 DISPID_A_LIGHTINGCOLOR = 70929;
		public const uint32 DISPID_A_MS_SCROLLLIMITXMIN = 70930;
		public const uint32 DISPID_A_MS_SCROLLLIMITYMIN = 70931;
		public const uint32 DISPID_A_MS_SCROLLLIMITXMAX = 70932;
		public const uint32 DISPID_A_MS_SCROLLLIMITYMAX = 70933;
		public const uint32 DISPID_A_MS_SCROLLLIMIT = 70934;
		public const uint32 DISPID_A_MS_OVERFLOWSTYLE = 70935;
		public const uint32 DISPID_A_TEXTSHADOW = 70936;
		public const uint32 DISPID_A_MS_WRAPTHROUGH = 70937;
		public const uint32 DISPID_A_MS_FLOWFROM = 70938;
		public const uint32 DISPID_A_MS_FLOWINTO = 70939;
		public const uint32 DISPID_A_MS_HYPHENS = 70940;
		public const uint32 DISPID_A_MS_HYPHENATE_LIMIT_ZONE = 70941;
		public const uint32 DISPID_A_MS_HYPHENATE_LIMIT_CHARS = 70942;
		public const uint32 DISPID_A_MS_HYPHENATE_LIMIT_LINES = 70943;
		public const uint32 DISPID_A_DRAGGABLE = 70944;
		public const uint32 DISPID_A_MS_HIGHCONTRASTADJUST = 70945;
		public const uint32 DISPID_A_ENABLEBACKGROUND = 70946;
		public const uint32 DISPID_A_MS_WRAPMARGIN = 70947;
		public const uint32 DISPID_A_MS_WRAPFLOW = 70949;
		public const uint32 DISPID_A_MS_FONTFEATURESETTINGS = 70950;
		public const uint32 DISPID_A_MS_USERSELECT = 70951;
		public const uint32 DISPID_A_MS_TOUCHACTION = 70952;
		public const uint32 DISPID_A_CLASSLIST = 70953;
		public const uint32 DISPID_A_MS_SCROLLTRANSLATION = 70954;
		public const uint32 DISPID_A_MS_FLEX = 70955;
		public const uint32 DISPID_A_MS_FLEXPOSITIVE = 70956;
		public const uint32 DISPID_A_MS_FLEXNEGATIVE = 70957;
		public const uint32 DISPID_A_MS_FLEXPREFERREDSIZE = 70958;
		public const uint32 DISPID_A_MS_FLEXFLOW = 70959;
		public const uint32 DISPID_A_MS_FLEXDIRECTION = 70960;
		public const uint32 DISPID_A_MS_FLEXWRAP = 70961;
		public const uint32 DISPID_A_MS_FLEXALIGN = 70962;
		public const uint32 DISPID_A_MS_FLEXITEMALIGN = 70963;
		public const uint32 DISPID_A_MS_FLEXPACK = 70964;
		public const uint32 DISPID_A_MS_FLEXLINEPACK = 70965;
		public const uint32 DISPID_A_MS_FLEXORDER = 70966;
		public const uint32 DISPID_A_TRANSFORM = 70967;
		public const uint32 DISPID_A_TRANSFORMORIGIN = 70968;
		public const uint32 DISPID_A_TRANSITIONPROPERTY = 70969;
		public const uint32 DISPID_A_TRANSITIONDURATION = 70970;
		public const uint32 DISPID_A_TRANSITIONTIMINGFUNCTION = 70971;
		public const uint32 DISPID_A_TRANSITIONDELAY = 70972;
		public const uint32 DISPID_A_TRANSITION = 70973;
		public const uint32 DISPID_A_PERSPECTIVE = 70974;
		public const uint32 DISPID_A_PERSPECTIVEORIGIN = 70975;
		public const uint32 DISPID_A_TRANSFORMSTYLE = 70976;
		public const uint32 DISPID_A_BACKFACEVISIBILITY = 70977;
		public const uint32 DISPID_A_ANIMATIONNAME = 70978;
		public const uint32 DISPID_A_ANIMATIONDURATION = 70979;
		public const uint32 DISPID_A_ANIMATIONTIMINGFUNCTION = 70980;
		public const uint32 DISPID_A_ANIMATIONDELAY = 70981;
		public const uint32 DISPID_A_ANIMATIONDIRECTION = 70982;
		public const uint32 DISPID_A_ANIMATIONPLAYSTATE = 70983;
		public const uint32 DISPID_A_ANIMATIONITERATIONCOUNT = 70984;
		public const uint32 DISPID_A_ANIMATION = 70985;
		public const uint32 DISPID_A_ANIMATIONFILLMODE = 70986;
		public const uint32 DISPID_A_FONTFEATURESETTINGS = 70987;
		public const uint32 DISPID_A_TRANSFORMORIGINX = 70988;
		public const uint32 DISPID_A_TRANSFORMORIGINY = 70989;
		public const uint32 DISPID_A_TRANSFORMORIGINZ = 70990;
		public const uint32 DISPID_A_PERSPECTIVEORIGINX = 70992;
		public const uint32 DISPID_A_PERSPECTIVEORIGINY = 70993;
		public const uint32 DISPID_A_MS_TOUCHSELECT = 70994;
		public const uint32 DISPID_INTERNAL_ERRORPAGEREFRESHURL = 70995;
		public const uint32 DISPID_INTERNAL_ERRORPAGEREASON = 70996;
		public const uint32 DISPID_INTERNAL_ERRORPAGEDWNPOST = 70997;
		public const uint32 DISPID_A_FLEXDIRECTION = 70998;
		public const uint32 DISPID_A_FLEXWRAP = 70999;
		public const uint32 DISPID_A_FLEXFLOW = 71000;
		public const uint32 DISPID_A_ORDER = 71001;
		public const uint32 DISPID_A_FLEX = 71002;
		public const uint32 DISPID_A_FLEXGROW = 71003;
		public const uint32 DISPID_A_FLEXSHRINK = 71004;
		public const uint32 DISPID_A_FLEXBASIS = 71005;
		public const uint32 DISPID_A_JUSTIFYCONTENT = 71006;
		public const uint32 DISPID_A_ALIGNITEMS = 71007;
		public const uint32 DISPID_A_ALIGNSELF = 71008;
		public const uint32 DISPID_A_ALIGNCONTENT = 71009;
		public const uint32 DISPID_A_BORDERIMAGE = 71010;
		public const uint32 DISPID_A_BORDERIMAGESOURCE = 71011;
		public const uint32 DISPID_A_BORDERIMAGESLICE = 71012;
		public const uint32 DISPID_A_BORDERIMAGEWIDTH = 71013;
		public const uint32 DISPID_A_BORDERIMAGEOUTSET = 71014;
		public const uint32 DISPID_A_BORDERIMAGEREPEAT = 71015;
		public const uint32 DISPID_A_DATASET = 71016;
		public const uint32 DISPID_A_MS_IMEALIGN = 71017;
		public const uint32 DISPID_A_MS_TEXTCOMBINEHORIZONTAL = 71018;
		public const uint32 DISPID_A_TOUCHACTION = 71019;
		public const uint32 DISPID_A_WEBKIT_APPEARANCE = 71020;
		public const uint32 DISPID_A_WEBKIT_BOXALIGN = 71021;
		public const uint32 DISPID_A_WEBKIT_BOXORDINALGROUP = 71022;
		public const uint32 DISPID_A_WEBKIT_BOXPACK = 71023;
		public const uint32 DISPID_A_WEBKIT_BOXFLEX = 71024;
		public const uint32 DISPID_A_WEBKIT_BOXORIENT = 71025;
		public const uint32 DISPID_A_WEBKIT_BOXDIRECTION = 71026;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONFILLMODE = 71027;
		public const uint32 DISPID_A_WEBKIT_TRANSFORM = 71028;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDSIZE = 71029;
		public const uint32 DISPID_A_WEBKIT_BACKFACEVISIBILITY = 71030;
		public const uint32 DISPID_A_WEBKIT_BOXSIZING = 71031;
		public const uint32 DISPID_A_WEBKIT_USERSELECT = 71032;
		public const uint32 DISPID_A_WEBKIT_ANIMATION = 71033;
		public const uint32 DISPID_A_WEBKIT_TRANSITION = 71034;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONNAME = 71035;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONDURATION = 71036;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONTIMINGFUNCTION = 71037;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONDELAY = 71038;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONITERATIONCOUNT = 71039;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONDIRECTION = 71040;
		public const uint32 DISPID_A_WEBKIT_ANIMATIONPLAYSTATE = 71041;
		public const uint32 DISPID_A_WEBKIT_TRANSITIONPROPERTY = 71042;
		public const uint32 DISPID_A_WEBKIT_TRANSITIONDURATION = 71043;
		public const uint32 DISPID_A_WEBKIT_TRANSITIONTIMINGFUNCTION = 71044;
		public const uint32 DISPID_A_WEBKIT_TRANSITIONDELAY = 71045;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDATTACHMENT = 71046;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDCOLOR = 71047;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDCLIP = 71048;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDIMAGE = 71049;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDREPEAT = 71050;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDORIGIN = 71051;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDPOSITION = 71052;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDPOSITIONX = 71053;
		public const uint32 DISPID_A_WEBKIT_BACKGROUNDPOSITIONY = 71054;
		public const uint32 DISPID_A_WEBKIT_BACKGROUND = 71055;
		public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGIN = 71056;
		public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGINX = 71057;
		public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGINY = 71058;
		public const uint32 DISPID_A_WEBKIT_TRANSFORMORIGINZ = 71059;
		public const uint32 DISPID_A_WEBKIT_TEXTSIZEADJUST = 71060;
		public const uint32 DISPID_A_WEBKIT_BORDERIMAGE = 71061;
		public const uint32 DISPID_A_WEBKIT_BORDERIMAGESOURCE = 71062;
		public const uint32 DISPID_A_WEBKIT_BORDERIMAGESLICE = 71063;
		public const uint32 DISPID_A_WEBKIT_BORDERIMAGEWIDTH = 71064;
		public const uint32 DISPID_A_WEBKIT_BORDERIMAGEOUTSET = 71065;
		public const uint32 DISPID_A_WEBKIT_BORDERIMAGEREPEAT = 71066;
		public const uint32 DISPID_INTERNAL_FIRST = 71136;
		public const uint32 DISPID_INTERNAL_BACKGROUNDDEFINITION = 71137;
		public const uint32 DISPID_A_MEDIAORIENTATION = 71138;
		public const uint32 DISPID_A_MEDIAMAXWIDTH = 71139;
		public const uint32 DISPID_A_MEDIAMINWIDTH = 71140;
		public const uint32 DISPID_A_MEDIAWIDTH = 71141;
		public const uint32 DISPID_A_MEDIAMAXHEIGHT = 71142;
		public const uint32 DISPID_A_MEDIAMINHEIGHT = 71143;
		public const uint32 DISPID_A_MEDIAHEIGHT = 71144;
		public const uint32 DISPID_A_MEDIAMAXDEVICEWIDTH = 71145;
		public const uint32 DISPID_A_MEDIAMINDEVICEWIDTH = 71146;
		public const uint32 DISPID_A_MEDIADEVICEWIDTH = 71147;
		public const uint32 DISPID_A_MEDIAMAXDEVICEHEIGHT = 71148;
		public const uint32 DISPID_A_MEDIAMINDEVICEHEIGHT = 71149;
		public const uint32 DISPID_A_MEDIADEVICEHEIGHT = 71150;
		public const uint32 DISPID_A_MEDIAMAXASPECTRATIO = 71151;
		public const uint32 DISPID_A_MEDIAMINASPECTRATIO = 71152;
		public const uint32 DISPID_A_MEDIAASPECTRATIO = 71153;
		public const uint32 DISPID_A_MEDIAMAXDEVICEASPECTRATIO = 71154;
		public const uint32 DISPID_A_MEDIAMINDEVICEASPECTRATIO = 71155;
		public const uint32 DISPID_A_MEDIADEVICEASPECTRATIO = 71156;
		public const uint32 DISPID_A_MEDIAMAXCOLOR = 71157;
		public const uint32 DISPID_A_MEDIAMINCOLOR = 71158;
		public const uint32 DISPID_A_MEDIACOLOR = 71159;
		public const uint32 DISPID_A_MEDIAMAXCOLORINDEX = 71160;
		public const uint32 DISPID_A_MEDIAMINCOLORINDEX = 71161;
		public const uint32 DISPID_A_MEDIACOLORINDEX = 71162;
		public const uint32 DISPID_A_MEDIAMAXMONOCHROME = 71163;
		public const uint32 DISPID_A_MEDIAMINMONOCHROME = 71164;
		public const uint32 DISPID_A_MEDIAMONOCHROME = 71165;
		public const uint32 DISPID_A_MEDIAMAXRESOLUTION = 71166;
		public const uint32 DISPID_A_MEDIAMINRESOLUTION = 71167;
		public const uint32 DISPID_A_MEDIARESOLUTION = 71168;
		public const uint32 DISPID_INTERNAL_CATTRIBUTEPTRCACHE = 71169;
		public const uint32 DISPID_INTERNAL_FONTFACEUNICODERANGE = 71170;
		public const uint32 DISPID_INTERNAL_TOUCHTARGETHANDLER = 71171;
		public const uint32 DISPID_INTERNAL_PAGEFLOWCOLLECTION = 71172;
		public const uint32 DISPID_INTERNAL_NAMEDFLOWCOLLECTION = 71173;
		public const uint32 DISPID_A_MEDIAMSHIGHCONTRAST = 71174;
		public const uint32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_WORDS = 71175;
		public const uint32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_BEFORE = 71176;
		public const uint32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_AFTER = 71177;
		public const uint32 DISPID_A_MEDIAMSVIEWSTATE = 71178;
		public const uint32 DISPID_INTERNAL_ARIAATOMIC = 71179;
		public const uint32 DISPID_INTERNAL_ARIAAUTOCOMPLETE = 71180;
		public const uint32 DISPID_INTERNAL_ARIADROPEFFECT = 71181;
		public const uint32 DISPID_INTERNAL_ARIAGRABBED = 71182;
		public const uint32 DISPID_INTERNAL_ARIALABEL = 71183;
		public const uint32 DISPID_INTERNAL_ARIAMULTILINE = 71184;
		public const uint32 DISPID_INTERNAL_ARIAORIENTATION = 71185;
		public const uint32 DISPID_INTERNAL_ARIASORT = 71186;
		public const uint32 DISPID_INTERNAL_ARIAVALUETEXT = 71187;
		public const uint32 DISPID_A_MEDIAGRID = 71188;
		public const uint32 DISPID_A_MEDIASCAN = 71189;
		public const uint32 DISPID_A_ACCEVENTRECORDID_START = 71190;
		public const uint32 DISPID_A_ACCEVENTRECORDID_END = 71209;
		public const uint32 DISPID_INTERNAL_REQUIRED = 71210;
		public const uint32 DISPID_INTERNAL_CSS_PARSEDARY = 71211;
		public const uint32 DISPID_INTERNAL_SOURCELOCATION = 71212;
		public const uint32 DISPID_INTERNAL_CSS_TRACEDSTYLES = 71213;
		public const uint32 DISPID_A_BDURLIMGCTXCACHEINDEX = 71214;
		public const uint32 DISPID_A_MEDIAWEBKITDEVICEPIXELRATIO = 71215;
		public const uint32 DISPID_A_MEDIAWEBKITMAXDEVICEPIXELRATIO = 71216;
		public const uint32 DISPID_A_MEDIAWEBKITMINDEVICEPIXELRATIO = 71217;
		public const uint32 DISPID_SVGSTYLABLE_CLASSNAME_PROP = 1001;
		public const uint32 DISPID_SVGLOCATABLE_NEARESTVIEWPORTELEMENT = 1002;
		public const uint32 DISPID_SVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 1003;
		public const uint32 DISPID_SVGLOCATABLE_GETBBOX = 1004;
		public const uint32 DISPID_SVGLOCATABLE_GETCTM = 1005;
		public const uint32 DISPID_SVGLOCATABLE_GETSCREENCTM = 1006;
		public const uint32 DISPID_SVGLOCATABLE_GETTRANSFORMTOELEMENT = 1007;
		public const uint32 DISPID_SVGTRANSFORMABLE_TRANSFORM_ATTR = 1008;
		public const uint32 DISPID_SVGTRANSFORMABLE_TRANSFORM_PROP = 1009;
		public const uint32 DISPID_SVGTESTS_REQUIREDFEATURES_ATTR = 1010;
		public const uint32 DISPID_SVGTESTS_REQUIREDFEATURES_PROP = 1011;
		public const uint32 DISPID_SVGTESTS_REQUIREDEXTENSIONS_ATTR = 1012;
		public const uint32 DISPID_SVGTESTS_REQUIREDEXTENSIONS_PROP = 1013;
		public const uint32 DISPID_SVGTESTS_SYSTEMLANGUAGE_ATTR = 1014;
		public const uint32 DISPID_SVGTESTS_SYSTEMLANGUAGE_PROP = 1015;
		public const uint32 DISPID_SVGTESTS_HASEXTENSION = 1016;
		public const uint32 DISPID_SVGLANGSPACE_XMLLANG = 1017;
		public const uint32 DISPID_SVGLANGSPACE_XMLSPACE = 1018;
		public const uint32 DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_ATTR = 1019;
		public const uint32 DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_PROP = 1020;
		public const uint32 DISPID_SVGFITTOVIEWBOX_VIEWBOX_ATTR = 1021;
		public const uint32 DISPID_SVGFITTOVIEWBOX_VIEWBOX_PROP = 1022;
		public const uint32 DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_ATTR = 1023;
		public const uint32 DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_PROP = 1024;
		public const uint32 DISPID_SVGZOOMANDPAN_ZOOMANDPAN = 1025;
		public const uint32 DISPID_SVGURIREFERENCE_HREF = 1026;
		public const uint32 DISPID_EVPROP_ONMOUSEOVER = 71536;
		public const uint32 DISPID_EVMETH_ONMOUSEOVER = 65544;
		public const uint32 DISPID_EVPROP_ONMOUSEOUT = 71537;
		public const uint32 DISPID_EVMETH_ONMOUSEOUT = 65545;
		public const uint32 DISPID_EVPROP_ONMOUSEDOWN = 71538;
		public const int32 DISPID_EVMETH_ONMOUSEDOWN = -605;
		public const uint32 DISPID_EVPROP_ONMOUSEUP = 71539;
		public const int32 DISPID_EVMETH_ONMOUSEUP = -607;
		public const uint32 DISPID_EVPROP_ONMOUSEMOVE = 71540;
		public const int32 DISPID_EVMETH_ONMOUSEMOVE = -606;
		public const uint32 DISPID_EVPROP_ONKEYDOWN = 71541;
		public const int32 DISPID_EVMETH_ONKEYDOWN = -602;
		public const uint32 DISPID_EVPROP_ONKEYUP = 71542;
		public const int32 DISPID_EVMETH_ONKEYUP = -604;
		public const uint32 DISPID_EVPROP_ONKEYPRESS = 71543;
		public const int32 DISPID_EVMETH_ONKEYPRESS = -603;
		public const uint32 DISPID_EVPROP_ONCLICK = 71544;
		public const int32 DISPID_EVMETH_ONCLICK = -600;
		public const uint32 DISPID_EVPROP_ONDBLCLICK = 71545;
		public const int32 DISPID_EVMETH_ONDBLCLICK = -601;
		public const uint32 DISPID_EVPROP_ONSELECT = 71546;
		public const uint32 DISPID_EVMETH_ONSELECT = 1006;
		public const uint32 DISPID_EVPROP_ONSUBMIT = 71547;
		public const uint32 DISPID_EVMETH_ONSUBMIT = 1007;
		public const uint32 DISPID_EVPROP_ONRESET = 71548;
		public const uint32 DISPID_EVMETH_ONRESET = 1015;
		public const uint32 DISPID_EVPROP_ONHELP = 71549;
		public const uint32 DISPID_EVMETH_ONHELP = 65546;
		public const uint32 DISPID_EVPROP_ONFOCUS = 71550;
		public const uint32 DISPID_EVMETH_ONFOCUS = 65537;
		public const uint32 DISPID_EVPROP_ONBLUR = 71551;
		public const uint32 DISPID_EVPROP_ONROWEXIT = 71554;
		public const uint32 DISPID_EVMETH_ONROWEXIT = 65542;
		public const uint32 DISPID_EVPROP_ONROWENTER = 71555;
		public const uint32 DISPID_EVMETH_ONROWENTER = 65543;
		public const uint32 DISPID_EVPROP_ONBOUNCE = 71556;
		public const uint32 DISPID_EVMETH_ONBOUNCE = 1009;
		public const uint32 DISPID_EVPROP_ONBEFOREUPDATE = 71557;
		public const uint32 DISPID_EVMETH_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_EVPROP_ONAFTERUPDATE = 71558;
		public const uint32 DISPID_EVMETH_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_EVPROP_ONBEFOREDRAGOVER = 71559;
		public const uint32 DISPID_EVPROP_ONBEFOREDROPORPASTE = 71560;
		public const uint32 DISPID_EVPROP_ONREADYSTATECHANGE = 71561;
		public const int32 DISPID_EVMETH_ONREADYSTATECHANGE = -609;
		public const uint32 DISPID_EVPROP_ONFINISH = 71562;
		public const uint32 DISPID_EVMETH_ONFINISH = 1010;
		public const uint32 DISPID_EVPROP_ONSTART = 71563;
		public const uint32 DISPID_EVMETH_ONSTART = 1011;
		public const uint32 DISPID_EVPROP_ONABORT = 71564;
		public const uint32 DISPID_EVMETH_ONABORT = 1000;
		public const uint32 DISPID_EVPROP_ONERROR = 71565;
		public const uint32 DISPID_EVMETH_ONERROR = 1002;
		public const uint32 DISPID_EVPROP_ONCHANGE = 71566;
		public const uint32 DISPID_EVMETH_ONCHANGE = 1001;
		public const uint32 DISPID_EVPROP_ONSCROLL = 71567;
		public const uint32 DISPID_EVMETH_ONSCROLL = 1014;
		public const uint32 DISPID_EVPROP_ONLOAD = 71568;
		public const uint32 DISPID_EVMETH_ONLOAD = 1003;
		public const uint32 DISPID_EVPROP_ONUNLOAD = 71569;
		public const uint32 DISPID_EVMETH_ONUNLOAD = 1008;
		public const uint32 DISPID_EVPROP_ONLAYOUT = 71570;
		public const uint32 DISPID_EVMETH_ONLAYOUT = 1013;
		public const uint32 DISPID_EVPROP_ONDRAGSTART = 71571;
		public const uint32 DISPID_EVMETH_ONDRAGSTART = 65547;
		public const uint32 DISPID_EVPROP_ONRESIZE = 71572;
		public const uint32 DISPID_EVMETH_ONRESIZE = 1016;
		public const uint32 DISPID_EVPROP_ONSELECTSTART = 71573;
		public const uint32 DISPID_EVMETH_ONSELECTSTART = 65548;
		public const uint32 DISPID_EVPROP_ONERRORUPDATE = 71574;
		public const uint32 DISPID_EVMETH_ONERRORUPDATE = 65549;
		public const uint32 DISPID_EVPROP_ONBEFOREUNLOAD = 71575;
		public const uint32 DISPID_EVMETH_ONBEFOREUNLOAD = 1017;
		public const uint32 DISPID_EVPROP_ONDATASETCHANGED = 71576;
		public const uint32 DISPID_EVMETH_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_EVPROP_ONDATAAVAILABLE = 71577;
		public const uint32 DISPID_EVMETH_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_EVPROP_ONDATASETCOMPLETE = 71578;
		public const uint32 DISPID_EVMETH_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_EVPROP_ONFILTER = 71579;
		public const uint32 DISPID_EVMETH_ONFILTER = 65553;
		public const uint32 DISPID_EVPROP_ONCHANGEFOCUS = 71580;
		public const uint32 DISPID_EVMETH_ONCHANGEFOCUS = 1018;
		public const uint32 DISPID_EVPROP_ONCHANGEBLUR = 71581;
		public const uint32 DISPID_EVMETH_ONCHANGEBLUR = 1019;
		public const uint32 DISPID_EVPROP_ONLOSECAPTURE = 71582;
		public const uint32 DISPID_EVMETH_ONLOSECAPTURE = 65554;
		public const uint32 DISPID_EVPROP_ONPROPERTYCHANGE = 71583;
		public const uint32 DISPID_EVMETH_ONPROPERTYCHANGE = 65555;
		public const uint32 DISPID_EVPROP_ONPERSISTSAVE = 71584;
		public const uint32 DISPID_EVMETH_ONPERSISTSAVE = 1021;
		public const uint32 DISPID_EVPROP_ONDRAG = 71585;
		public const uint32 DISPID_EVMETH_ONDRAG = 65556;
		public const uint32 DISPID_EVPROP_ONDRAGEND = 71586;
		public const uint32 DISPID_EVMETH_ONDRAGEND = 65557;
		public const uint32 DISPID_EVPROP_ONDRAGENTER = 71587;
		public const uint32 DISPID_EVMETH_ONDRAGENTER = 65558;
		public const uint32 DISPID_EVPROP_ONDRAGOVER = 71588;
		public const uint32 DISPID_EVMETH_ONDRAGOVER = 65559;
		public const uint32 DISPID_EVPROP_ONDRAGLEAVE = 71589;
		public const uint32 DISPID_EVMETH_ONDRAGLEAVE = 65560;
		public const uint32 DISPID_EVPROP_ONDROP = 71590;
		public const uint32 DISPID_EVMETH_ONDROP = 65561;
		public const uint32 DISPID_EVPROP_ONCUT = 71591;
		public const uint32 DISPID_EVMETH_ONCUT = 65562;
		public const uint32 DISPID_EVPROP_ONCOPY = 71592;
		public const uint32 DISPID_EVMETH_ONCOPY = 65563;
		public const uint32 DISPID_EVPROP_ONPASTE = 71593;
		public const uint32 DISPID_EVMETH_ONPASTE = 65564;
		public const uint32 DISPID_EVPROP_ONBEFORECUT = 71594;
		public const uint32 DISPID_EVMETH_ONBEFORECUT = 65565;
		public const uint32 DISPID_EVPROP_ONBEFORECOPY = 71595;
		public const uint32 DISPID_EVMETH_ONBEFORECOPY = 65566;
		public const uint32 DISPID_EVPROP_ONBEFOREPASTE = 71596;
		public const uint32 DISPID_EVMETH_ONBEFOREPASTE = 65567;
		public const uint32 DISPID_EVPROP_ONPERSISTLOAD = 71597;
		public const uint32 DISPID_EVMETH_ONPERSISTLOAD = 1022;
		public const uint32 DISPID_EVPROP_ONROWSDELETE = 71598;
		public const uint32 DISPID_EVMETH_ONROWSDELETE = 65568;
		public const uint32 DISPID_EVPROP_ONROWSINSERTED = 71599;
		public const uint32 DISPID_EVMETH_ONROWSINSERTED = 65569;
		public const uint32 DISPID_EVPROP_ONCELLCHANGE = 71600;
		public const uint32 DISPID_EVMETH_ONCELLCHANGE = 65570;
		public const uint32 DISPID_EVPROP_ONCONTEXTMENU = 71601;
		public const uint32 DISPID_EVMETH_ONCONTEXTMENU = 1023;
		public const uint32 DISPID_EVPROP_ONBEFOREPRINT = 71602;
		public const uint32 DISPID_EVMETH_ONBEFOREPRINT = 1024;
		public const uint32 DISPID_EVPROP_ONAFTERPRINT = 71603;
		public const uint32 DISPID_EVMETH_ONAFTERPRINT = 1025;
		public const uint32 DISPID_EVPROP_ONSTOP = 71604;
		public const uint32 DISPID_EVMETH_ONSTOP = 1026;
		public const uint32 DISPID_EVPROP_ONBEFOREEDITFOCUS = 71605;
		public const uint32 DISPID_EVMETH_ONBEFOREEDITFOCUS = 1027;
		public const uint32 DISPID_EVPROP_ONATTACHEVENT = 71606;
		public const uint32 DISPID_EVPROP_ONMOUSEHOVER = 71607;
		public const uint32 DISPID_EVMETH_ONMOUSEHOVER = 1028;
		public const uint32 DISPID_EVPROP_ONCONTENTREADY = 71608;
		public const uint32 DISPID_EVMETH_ONCONTENTREADY = 1029;
		public const uint32 DISPID_EVPROP_ONLAYOUTCOMPLETE = 71609;
		public const uint32 DISPID_EVMETH_ONLAYOUTCOMPLETE = 1030;
		public const uint32 DISPID_EVPROP_ONPAGE = 71610;
		public const uint32 DISPID_EVMETH_ONPAGE = 1031;
		public const uint32 DISPID_EVPROP_ONLINKEDOVERFLOW = 71611;
		public const uint32 DISPID_EVMETH_ONLINKEDOVERFLOW = 1032;
		public const uint32 DISPID_EVPROP_ONMOUSEWHEEL = 71612;
		public const uint32 DISPID_EVMETH_ONMOUSEWHEEL = 1033;
		public const uint32 DISPID_EVPROP_ONBEFOREDEACTIVATE = 71613;
		public const uint32 DISPID_EVMETH_ONBEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_EVPROP_ONMOVE = 71614;
		public const uint32 DISPID_EVMETH_ONMOVE = 1035;
		public const uint32 DISPID_EVPROP_ONCONTROLSELECT = 71615;
		public const uint32 DISPID_EVMETH_ONCONTROLSELECT = 1036;
		public const uint32 DISPID_EVPROP_ONSELECTIONCHANGE = 71616;
		public const uint32 DISPID_EVMETH_ONSELECTIONCHANGE = 1037;
		public const uint32 DISPID_EVPROP_ONMOVESTART = 71617;
		public const uint32 DISPID_EVMETH_ONMOVESTART = 1038;
		public const uint32 DISPID_EVPROP_ONMOVEEND = 71618;
		public const uint32 DISPID_EVMETH_ONMOVEEND = 1039;
		public const uint32 DISPID_EVPROP_ONRESIZESTART = 71619;
		public const uint32 DISPID_EVMETH_ONRESIZESTART = 1040;
		public const uint32 DISPID_EVPROP_ONRESIZEEND = 71620;
		public const uint32 DISPID_EVMETH_ONRESIZEEND = 1041;
		public const uint32 DISPID_EVPROP_ONMOUSEENTER = 71621;
		public const uint32 DISPID_EVMETH_ONMOUSEENTER = 1042;
		public const uint32 DISPID_EVPROP_ONMOUSELEAVE = 71622;
		public const uint32 DISPID_EVMETH_ONMOUSELEAVE = 1043;
		public const uint32 DISPID_EVPROP_ONACTIVATE = 71623;
		public const uint32 DISPID_EVMETH_ONACTIVATE = 1044;
		public const uint32 DISPID_EVPROP_ONDEACTIVATE = 71624;
		public const uint32 DISPID_EVMETH_ONDEACTIVATE = 1045;
		public const uint32 DISPID_EVPROP_ONMULTILAYOUTCLEANUP = 71625;
		public const uint32 DISPID_EVMETH_ONMULTILAYOUTCLEANUP = 1046;
		public const uint32 DISPID_EVPROP_ONBEFOREACTIVATE = 71626;
		public const uint32 DISPID_EVMETH_ONBEFOREACTIVATE = 1047;
		public const uint32 DISPID_EVPROP_ONFOCUSIN = 71627;
		public const uint32 DISPID_EVMETH_ONFOCUSIN = 1048;
		public const uint32 DISPID_EVPROP_ONFOCUSOUT = 71628;
		public const uint32 DISPID_EVMETH_ONFOCUSOUT = 1049;
		public const uint32 DISPID_EVPROP_ONVALUECHANGE = 71629;
		public const uint32 DISPID_EVMETH_ONVALUECHANGE = 1050;
		public const uint32 DISPID_EVPROP_ONSELECTADD = 71630;
		public const uint32 DISPID_EVMETH_ONSELECTADD = 1051;
		public const uint32 DISPID_EVPROP_ONSELECTREMOVE = 71631;
		public const uint32 DISPID_EVMETH_ONSELECTREMOVE = 1052;
		public const uint32 DISPID_EVPROP_ONSELECTWITHIN = 71632;
		public const uint32 DISPID_EVMETH_ONSELECTWITHIN = 1053;
		public const uint32 DISPID_EVPROP_ONSYSTEMSCROLLINGSTART = 71633;
		public const uint32 DISPID_EVMETH_ONSYSTEMSCROLLINGSTART = 1054;
		public const uint32 DISPID_EVPROP_ONSYSTEMSCROLLINGEND = 71634;
		public const uint32 DISPID_EVMETH_ONSYSTEMSCROLLINGEND = 1055;
		public const uint32 DISPID_EVPROP_ONOBJECTCONTENTSCROLLED = 71635;
		public const uint32 DISPID_EVMETH_ONOBJECTCONTENTSCROLLED = 1056;
		public const uint32 DISPID_EVPROP_ONSTORAGE = 71636;
		public const uint32 DISPID_EVMETH_ONSTORAGE = 1057;
		public const uint32 DISPID_EVPROP_ONSTORAGECOMMIT = 71637;
		public const uint32 DISPID_EVMETH_ONSTORAGECOMMIT = 1058;
		public const uint32 DISPID_EVPROP_ONSHOW = 71638;
		public const uint32 DISPID_EVMETH_ONSHOW = 1059;
		public const uint32 DISPID_EVPROP_ONHIDE = 71639;
		public const uint32 DISPID_EVMETH_ONHIDE = 1060;
		public const uint32 DISPID_EVPROP_ONALERT = 71640;
		public const uint32 DISPID_EVMETH_ONALERT = 1061;
		public const uint32 DISPID_EVPROP_ONPOPUPMENUSTART = 71641;
		public const uint32 DISPID_EVMETH_ONPOPUPMENUSTART = 1062;
		public const uint32 DISPID_EVPROP_ONPOPUPMENUEND = 71642;
		public const uint32 DISPID_EVMETH_ONPOPUPMENUEND = 1063;
		public const uint32 DISPID_EVPROP_ONONLINE = 71643;
		public const uint32 DISPID_EVMETH_ONONLINE = 1064;
		public const uint32 DISPID_EVPROP_ONOFFLINE = 71644;
		public const uint32 DISPID_EVMETH_ONOFFLINE = 1065;
		public const uint32 DISPID_EVPROP_ONHASHCHANGE = 71645;
		public const uint32 DISPID_EVMETH_ONHASHCHANGE = 1066;
		public const uint32 DISPID_EVPROP_ONMESSAGE = 71646;
		public const uint32 DISPID_EVMETH_ONMESSAGE = 1067;
		public const uint32 DISPID_EVPROP_ONDOMMUTATION = 71647;
		public const uint32 DISPID_EVMETH_ONDOMMUTATION = 1068;
		public const uint32 DISPID_EVPROP_SINKLIMIT = 71647;
		public const uint32 DISPID_EVPROP_TIMEOUT = 71648;
		public const uint32 DISPID_EVPROP_WHEEL = 71649;
		public const uint32 DISPID_EVPROP_SVGLOAD = 71650;
		public const uint32 DISPID_EVPROP_SVGUNLOAD = 71651;
		public const uint32 DISPID_EVPROP_SVGABORT = 71652;
		public const uint32 DISPID_EVPROP_SVGERROR = 71653;
		public const uint32 DISPID_EVPROP_SVGRESIZE = 71654;
		public const uint32 DISPID_EVPROP_SVGSCROLL = 71655;
		public const uint32 DISPID_EVPROP_SVGZOOM = 71656;
		public const uint32 DISPID_EVPROP_ONMSTHUMBNAILCLICK = 71657;
		public const uint32 DISPID_EVPROP_COMPOSITIONSTART = 71658;
		public const uint32 DISPID_EVPROP_COMPOSITIONUPDATE = 71659;
		public const uint32 DISPID_EVPROP_COMPOSITIONEND = 71660;
		public const uint32 DISPID_EVPROP_DOMATTRMODIFIED = 71661;
		public const uint32 DISPID_EVPROP_DOMCONTENTLOADED = 71662;
		public const uint32 DISPID_EVPROP_INPUT = 71663;
		public const uint32 DISPID_EVPROP_DOMCHARDATAMODIFIED = 71664;
		public const uint32 DISPID_EVPROP_TEXTINPUT = 71665;
		public const uint32 DISPID_EVPROP_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666;
		public const uint32 DISPID_EVPROP_DOMNODEINSERTED = 71667;
		public const uint32 DISPID_EVPROP_DOMNODEREMOVED = 71668;
		public const uint32 DISPID_EVPROP_DOMSUBTREEMODIFIED = 71669;
		public const uint32 DISPID_EVPROP_CANPLAY = 71670;
		public const uint32 DISPID_EVPROP_CANPLAYTHROUGH = 71671;
		public const uint32 DISPID_EVPROP_DURATIONCHANGE = 71672;
		public const uint32 DISPID_EVPROP_EMPTIED = 71673;
		public const uint32 DISPID_EVPROP_ENDED = 71674;
		public const uint32 DISPID_EVPROP_LOADEDDATA = 71675;
		public const uint32 DISPID_EVPROP_LOADEDMETADATA = 71676;
		public const uint32 DISPID_EVPROP_LOADSTART = 71677;
		public const uint32 DISPID_EVPROP_PAUSE = 71678;
		public const uint32 DISPID_EVPROP_PLAY = 71679;
		public const uint32 DISPID_EVPROP_PLAYING = 71680;
		public const uint32 DISPID_EVPROP_PROGRESS = 71681;
		public const uint32 DISPID_EVPROP_RATECHANGE = 71682;
		public const uint32 DISPID_EVPROP_SEEKED = 71683;
		public const uint32 DISPID_EVPROP_SEEKING = 71684;
		public const uint32 DISPID_EVPROP_STALLED = 71685;
		public const uint32 DISPID_EVPROP_SUSPEND = 71686;
		public const uint32 DISPID_EVPROP_TIMEUPDATE = 71687;
		public const uint32 DISPID_EVPROP_VOLUMECHANGE = 71688;
		public const uint32 DISPID_EVPROP_WAITING = 71689;
		public const uint32 DISPID_EVPROP_ONMSPOINTERDOWN = 71690;
		public const uint32 DISPID_EVPROP_ONMSPOINTERMOVE = 71691;
		public const uint32 DISPID_EVPROP_ONMSPOINTERUP = 71692;
		public const uint32 DISPID_EVPROP_ONMSPOINTEROVER = 71693;
		public const uint32 DISPID_EVPROP_ONMSPOINTEROUT = 71694;
		public const uint32 DISPID_EVPROP_ONMSPOINTERCANCEL = 71695;
		public const uint32 DISPID_EVPROP_ONMSPOINTERHOVER = 71696;
		public const uint32 DISPID_EVPROP_MSCONNECT = 71697;
		public const uint32 DISPID_EVPROP_MSDISCONNECT = 71698;
		public const uint32 DISPID_EVPROP_ONMSGESTURESTART = 71699;
		public const uint32 DISPID_EVPROP_ONMSGESTURECHANGE = 71700;
		public const uint32 DISPID_EVPROP_ONMSGESTUREEND = 71701;
		public const uint32 DISPID_EVPROP_ONMSGESTUREHOLD = 71702;
		public const uint32 DISPID_EVPROP_ONMSGESTURETAP = 71703;
		public const uint32 DISPID_EVPROP_ONMSGESTUREDOUBLETAP = 71704;
		public const uint32 DISPID_EVPROP_ONMSINERTIASTART = 71705;
		public const uint32 DISPID_EVPROP_ONMSLOSTPOINTERCAPTURE = 71706;
		public const uint32 DISPID_EVPROP_ONMSGOTPOINTERCAPTURE = 71707;
		public const uint32 DISPID_EVPROP_ONMSCONTENTZOOM = 71708;
		public const uint32 DISPID_EVPROP_ONTRANSITIONSTART = 71709;
		public const uint32 DISPID_EVPROP_ONTRANSITIONEND = 71710;
		public const uint32 DISPID_EVPROP_ONANIMATIONSTART = 71711;
		public const uint32 DISPID_EVPROP_ONANIMATIONEND = 71712;
		public const uint32 DISPID_EVPROP_ONANIMATIONITERATION = 71713;
		public const uint32 DISPID_EVPROP_ONMSMANIPULATIONSTATECHANGED = 71714;
		public const uint32 DISPID_EVPROP_ONOPEN = 71715;
		public const uint32 DISPID_EVPROP_ONCLOSE = 71716;
		public const uint32 DISPID_EVPROP_CHECKING = 71717;
		public const uint32 DISPID_EVPROP_NOUPDATE = 71718;
		public const uint32 DISPID_EVPROP_DOWNLOADING = 71719;
		public const uint32 DISPID_EVPROP_UPDATEREADY = 71720;
		public const uint32 DISPID_EVPROP_CACHED = 71721;
		public const uint32 DISPID_EVPROP_OBSOLETE = 71722;
		public const uint32 DISPID_EVPROP_LOADEND = 71723;
		public const uint32 DISPID_EVPROP_INVALID = 71724;
		public const uint32 DISPID_EVPROP_ONSUCCESS = 71725;
		public const uint32 DISPID_EVPROP_ONBLOCKED = 71726;
		public const uint32 DISPID_EVPROP_ONCOMPLETE = 71727;
		public const uint32 DISPID_EVPROP_ONPOPSTATE = 71728;
		public const uint32 DISPID_EVPROP_ONCUECHANGE = 71729;
		public const uint32 DISPID_EVPROP_ONENTER = 71730;
		public const uint32 DISPID_EVPROP_ONEXIT = 71731;
		public const uint32 DISPID_EVPROP_VISIBILITYCHANGE = 71732;
		public const uint32 DISPID_EVPROP_ONMSREGIONUPDATE = 71733;
		public const uint32 DISPID_EVPROP_ONUPGRADENEEDED = 71734;
		public const uint32 DISPID_EVPROP_ONMSVIDEOFORMATCHANGED = 71735;
		public const uint32 DISPID_EVPROP_ADDTRACK = 71736;
		public const uint32 DISPID_EVPROP_ONMSVIDEOFRAMESTEPCOMPLETED = 71737;
		public const uint32 DISPID_EVPROP_ONMSHOLDVISUAL = 71738;
		public const uint32 DISPID_EVPROP_ONMSVIDEOOPTIMALLAYOUTCHANGED = 71739;
		public const uint32 DISPID_EVPROP_ONMSFULLSCREENCHANGE = 71740;
		public const uint32 DISPID_EVPROP_ONMSFULLSCREENERROR = 71741;
		public const uint32 DISPID_EVPROP_MSELEMENTRESIZE = 71742;
		public const uint32 DISPID_EVPROP_ONSOURCEOPEN = 71743;
		public const uint32 DISPID_EVPROP_ONSOURCECLOSE = 71744;
		public const uint32 DISPID_EVPROP_ONSOURCEENDED = 71745;
		public const uint32 DISPID_EVPROP_ONADDSOURCEBUFFER = 71746;
		public const uint32 DISPID_EVPROP_ONREMOVESOURCEBUFFER = 71747;
		public const uint32 DISPID_EVPROP_ONMSNEEDKEY = 71748;
		public const uint32 DISPID_EVPROP_ONMSKEYMESSAGE = 71749;
		public const uint32 DISPID_EVPROP_ONMSKEYERROR = 71750;
		public const uint32 DISPID_EVPROP_ONMSKEYADDED = 71751;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONDOMCONTENTLOADED = 71752;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTENTLOADING = 71753;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONSTARTING = 71754;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONCOMPLETED = 71755;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMEDOMCONTENTLOADED = 71756;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMECONTENTLOADING = 71757;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONSTARTING = 71758;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONCOMPLETED = 71759;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONSCRIPTNOTIFY = 71760;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONUNVIEWABLECONTENT = 71761;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONUNSAFECONTENTWARNINGDISPLAYING = 71762;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONLONGRUNNINGSCRIPTDETECTED = 71763;
		public const uint32 DISPID_EVPROP_WEBGLCONTEXTLOST = 71764;
		public const uint32 DISPID_EVPROP_WEBGLCONTEXTRESTORED = 71765;
		public const uint32 DISPID_EVPROP_ONUPDATESTART = 71766;
		public const uint32 DISPID_EVPROP_ONUPDATE = 71767;
		public const uint32 DISPID_EVPROP_ONUPDATEEND = 71768;
		public const uint32 DISPID_EVPROP_ONMSPOINTERENTER = 71769;
		public const uint32 DISPID_EVPROP_ONMSPOINTERLEAVE = 71770;
		public const uint32 DISPID_EVPROP_ONMSSITEPINNED = 71771;
		public const uint32 DISPID_EVPROP_MSORIENTATIONCHANGE = 71772;
		public const uint32 DISPID_EVPROP_ONDEVICEORIENTATION = 71773;
		public const uint32 DISPID_EVPROP_ONDEVICEMOTION = 71774;
		public const uint32 DISPID_EVPROP_ONPAGESHOW = 71775;
		public const uint32 DISPID_EVPROP_ONPAGEHIDE = 71776;
		public const uint32 DISPID_EVPROP_ONMSCANDIDATEWINDOWSHOW = 71777;
		public const uint32 DISPID_EVPROP_ONMSCANDIDATEWINDOWUPDATE = 71778;
		public const uint32 DISPID_EVPROP_ONMSCANDIDATEWINDOWHIDE = 71779;
		public const uint32 DISPID_EVPROP_HTML5ONREADYSTATECHANGE = 71780;
		public const uint32 DISPID_EVPROP_REMOVETRACK = 71781;
		public const uint32 DISPID_EVPROP_ONCOMPASSNEEDSCALIBRATION = 71782;
		public const uint32 DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTAINSFULLSCREENELEMENTCHANGED = 71783;
		public const uint32 DISPID_EVPROP_ONTOUCHSTART = 71784;
		public const uint32 DISPID_EVPROP_ONTOUCHEND = 71785;
		public const uint32 DISPID_EVPROP_ONTOUCHMOVE = 71786;
		public const uint32 DISPID_EVPROP_ONTOUCHCANCEL = 71787;
		public const uint32 DISPID_EVPROP_ONWEBKITTRANSITIONEND = 71788;
		public const uint32 DISPID_EVPROP_ONWEBKITANIMATIONSTART = 71789;
		public const uint32 DISPID_EVPROP_ONWEBKITANIMATIONEND = 71790;
		public const uint32 DISPID_EVPROP_ONWEBKITANIMATIONITERATION = 71791;
		public const uint32 DISPID_EVPROP_WEBGLCONTEXTCREATIONERROR = 71792;
		public const uint32 DISPID_EVPROP_ONDOMFOCUSIN = 71793;
		public const uint32 DISPID_EVPROP_ONDOMFOCUSOUT = 71794;
		public const uint32 DISPID_EVPROP_ORIENTATIONCHANGE = 71795;
		public const uint32 DISPID_EVPROPS_COUNT = 260;
		public const uint32 DISPID_IHTMLFILTERSCOLLECTION_LENGTH = 1001;
		public const int32 DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLFILTERSCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDOMCONSTRUCTOR_CONSTRUCTOR = 66045;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LENGTH = 70037;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PARENTRULE = 70038;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYVALUE = 70039;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYPRIORITY = 70040;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_REMOVEPROPERTY = 70041;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SETPROPERTY = 70042;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ITEM = 0;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTFAMILY = 70554;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTYLE = 70560;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTVARIANT = 70561;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTWEIGHT = 70563;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZE = 70555;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONT = 70577;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_COLOR = 70538;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUND = 70568;
		public const int32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCOLOR = -501;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDIMAGE = 70537;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDREPEAT = 70580;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDATTACHMENT = 70581;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITION = 70582;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONX = 70569;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONY = 70570;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDSPACING = 70583;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LETTERSPACING = 70544;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTDECORATION = 70571;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_VERTICALALIGN = 70584;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTTRANSFORM = 70540;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGN = 65608;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTINDENT = 70543;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LINEHEIGHT = 70542;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINTOP = 70573;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINRIGHT = 70574;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINBOTTOM = 70575;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINLEFT = 70576;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGIN = 70572;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGTOP = 70548;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGRIGHT = 70549;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGBOTTOM = 70550;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGLEFT = 70551;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDING = 70547;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDER = 70585;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOP = 70586;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHT = 70587;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOM = 70588;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFT = 70589;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLOR = 70590;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPCOLOR = 70591;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTCOLOR = 70592;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMCOLOR = 70593;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTCOLOR = 70594;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERWIDTH = 70595;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPWIDTH = 70596;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTWIDTH = 70597;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMWIDTH = 70598;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTWIDTH = 70599;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSTYLE = 70600;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPSTYLE = 70601;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTSTYLE = 70602;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMSTYLE = 70603;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTSTYLE = 70604;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WIDTH = 65541;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STYLEFLOAT = 70606;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLEAR = 70552;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_DISPLAY = 70607;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_VISIBILITY = 70616;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLETYPE = 70608;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEPOSITION = 70609;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEIMAGE = 70610;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLE = 70611;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WHITESPACE = 70612;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TOP = 65540;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LEFT = 65539;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ZINDEX = 70627;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOW = 70546;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKBEFORE = 70613;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKAFTER = 70614;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CSSTEXT = 70635;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CURSOR = 70638;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIP = 70628;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILTER = 70618;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TABLELAYOUT = 70634;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLLAPSE = 70620;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_DIRECTION = 70655;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BEHAVIOR = 70651;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_POSITION = 70626;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_UNICODEBIDI = 70654;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BOTTOM = 65614;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RIGHT = 65613;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_IMEMODE = 70656;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYALIGN = 70657;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYPOSITION = 70658;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYOVERHANG = 70659;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDCHAR = 70663;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDLINE = 70664;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDMODE = 70665;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDTYPE = 70666;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRID = 70667;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTAUTOSPACE = 70668;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDBREAK = 70670;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LINEBREAK = 70669;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFY = 70671;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFYTRIM = 70672;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDA = 70673;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWX = 70675;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWY = 70676;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ACCELERATOR = 70683;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTFLOW = 70691;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ZOOM = 70689;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDWRAP = 70694;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTUNDERLINEPOSITION = 70695;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARBASECOLOR = 70716;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARFACECOLOR = 70717;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBAR3DLIGHTCOLOR = 70718;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARSHADOWCOLOR = 70719;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARHIGHLIGHTCOLOR = 70720;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARDARKSHADOWCOLOR = 70721;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARARROWCOLOR = 70722;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARTRACKCOLOR = 70732;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WRITINGMODE = 70728;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGNLAST = 70739;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDASPACE = 70740;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTOVERFLOW = 70745;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MINHEIGHT = 70747;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSINTERPOLATIONMODE = 70749;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MAXHEIGHT = 70750;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MINWIDTH = 70751;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MAXWIDTH = 70752;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CONTENT = 70754;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CAPTIONSIDE = 70755;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERINCREMENT = 70756;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERRESET = 70757;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINE = 70758;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINEWIDTH = 70759;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINESTYLE = 70760;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINECOLOR = 70761;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BOXSIZING = 70762;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSPACING = 70763;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ORPHANS = 70764;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_WIDOWS = 70765;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKINSIDE = 70766;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_EMPTYCELLS = 70786;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSBLOCKPROGRESSION = 70787;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_QUOTES = 70788;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_ALIGNMENTBASELINE = 70814;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BASELINESHIFT = 70815;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_DOMINANTBASELINE = 70816;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZEADJUST = 70817;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTRETCH = 70818;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_OPACITY = 70819;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPPATH = 70820;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRULE = 70821;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILL = 70822;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILLOPACITY = 70823;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_FILLRULE = 70824;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_KERNING = 70825;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKER = 70826;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKEREND = 70827;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKERMID = 70828;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKERSTART = 70829;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MASK = 70830;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_POINTEREVENTS = 70831;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STOPCOLOR = 70832;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STOPOPACITY = 70833;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKE = 70834;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHARRAY = 70835;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHOFFSET = 70836;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINECAP = 70837;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINEJOIN = 70838;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEMITERLIMIT = 70839;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEOPACITY = 70840;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEWIDTH = 70841;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTANCHOR = 70842;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONHORIZONTAL = 70843;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONVERTICAL = 70844;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRADIUS = 70846;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPLEFTRADIUS = 70847;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPRIGHTRADIUS = 70848;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMRIGHTRADIUS = 70849;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMLEFTRADIUS = 70850;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPTOP = 70629;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRIGHT = 70630;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPBOTTOM = 70631;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPLEFT = 70632;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_CSSFLOAT = 70845;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCLIP = 70852;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDORIGIN = 70853;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDSIZE = 70854;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_BOXSHADOW = 70855;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORM = 70851;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORMORIGIN = 70861;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLCHAINING = 70891;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMING = 70892;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPTYPE = 70893;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLRAILS = 70894;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMCHAINING = 70895;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPTYPE = 70896;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMIT = 70897;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAP = 70898;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPPOINTS = 70899;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMIN = 70901;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMAX = 70902;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPX = 70903;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPY = 70904;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSX = 70905;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSY = 70906;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMN = 70908;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNALIGN = 70909;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNS = 70910;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNSPAN = 70911;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROW = 70913;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWALIGN = 70914;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWS = 70915;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWSPAN = 70916;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPTHROUGH = 70937;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPMARGIN = 70947;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPFLOW = 70949;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONNAME = 70917;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDURATION = 70918;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONTIMINGFUNCTION = 70919;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDELAY = 70920;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDIRECTION = 70921;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONPLAYSTATE = 70922;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONITERATIONCOUNT = 70923;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATION = 70924;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONFILLMODE = 70925;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLORINTERPOLATIONFILTERS = 70928;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNCOUNT = 70872;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNWIDTH = 70873;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNGAP = 70874;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNFILL = 70875;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNSPAN = 70876;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNS = 70871;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULE = 70877;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULECOLOR = 70880;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULESTYLE = 70878;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULEWIDTH = 70879;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKBEFORE = 70881;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKAFTER = 70882;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKINSIDE = 70883;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODCOLOR = 70926;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODOPACITY = 70927;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_LIGHTINGCOLOR = 70929;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMIN = 70930;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMIN = 70931;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMAX = 70932;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMAX = 70933;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMIT = 70934;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TEXTSHADOW = 70936;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWFROM = 70938;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWINTO = 70939;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENS = 70940;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITZONE = 70941;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITCHARS = 70942;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITLINES = 70943;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHIGHCONTRASTADJUST = 70945;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ENABLEBACKGROUND = 70946;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFONTFEATURESETTINGS = 70950;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSUSERSELECT = 70951;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSOVERFLOWSTYLE = 70935;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSFORMSTYLE = 70889;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSBACKFACEVISIBILITY = 70890;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVE = 70885;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVEORIGIN = 70886;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONPROPERTY = 70866;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDURATION = 70867;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONTIMINGFUNCTION = 70868;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDELAY = 70869;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITION = 70870;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHACTION = 70952;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLTRANSLATION = 70954;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEX = 70955;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPOSITIVE = 70956;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXNEGATIVE = 70957;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPREFERREDSIZE = 70958;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXFLOW = 70959;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXDIRECTION = 70960;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXWRAP = 70961;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXALIGN = 70962;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXITEMALIGN = 70963;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPACK = 70964;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXLINEPACK = 70965;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXORDER = 70966;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHSELECT = 70994;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORM = 70967;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMORIGIN = 70968;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMSTYLE = 70976;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_BACKFACEVISIBILITY = 70977;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVE = 70974;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVEORIGIN = 70975;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONPROPERTY = 70969;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDURATION = 70970;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONTIMINGFUNCTION = 70971;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDELAY = 70972;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITION = 70973;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_FONTFEATURESETTINGS = 70987;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONNAME = 70978;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDURATION = 70979;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONTIMINGFUNCTION = 70980;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDELAY = 70981;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDIRECTION = 70982;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONPLAYSTATE = 70983;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONITERATIONCOUNT = 70984;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATION = 70985;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONFILLMODE = 70986;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEX = 71002;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXDIRECTION = 70998;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXWRAP = 70999;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXFLOW = 71000;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXGROW = 71003;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXSHRINK = 71004;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXBASIS = 71005;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_JUSTIFYCONTENT = 71006;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNITEMS = 71007;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNSELF = 71008;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNCONTENT = 71009;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGE = 71010;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESOURCE = 71011;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESLICE = 71012;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEWIDTH = 71013;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEOUTSET = 71014;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEREPEAT = 71015;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_MSIMEALIGN = 71017;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_MSTEXTCOMBINEHORIZONTAL = 71018;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION3_TOUCHACTION = 71019;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITAPPEARANCE = 71020;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITUSERSELECT = 71032;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXALIGN = 71021;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORDINALGROUP = 71022;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXPACK = 71023;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXFLEX = 71024;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORIENT = 71025;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXDIRECTION = 71026;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORM = 71028;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDSIZE = 71029;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKFACEVISIBILITY = 71030;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATION = 71033;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITION = 71034;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONNAME = 71035;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDURATION = 71036;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONTIMINGFUNCTION = 71037;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDELAY = 71038;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONITERATIONCOUNT = 71039;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDIRECTION = 71040;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONPLAYSTATE = 71041;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONPROPERTY = 71042;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDURATION = 71043;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONTIMINGFUNCTION = 71044;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDELAY = 71045;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDATTACHMENT = 71046;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCOLOR = 71047;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCLIP = 71048;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDIMAGE = 71049;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDREPEAT = 71050;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDORIGIN = 71051;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITION = 71052;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONX = 71053;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONY = 71054;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUND = 71055;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORMORIGIN = 71056;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_MSTEXTSIZEADJUST = 70864;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTEXTSIZEADJUST = 71060;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGE = 71061;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESOURCE = 71062;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESLICE = 71063;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEWIDTH = 71064;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEOUTSET = 71065;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEREPEAT = 71066;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXSIZING = 71031;
		public const uint32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONFILLMODE = 71027;
		public const uint32 DISPID_IHTMLSTYLEENABLED_MSGETPROPERTYENABLED = 70043;
		public const uint32 DISPID_IHTMLSTYLEENABLED_MSPUTPROPERTYENABLED = 70044;
		public const uint32 DISPID_IHTMLSTYLE_FONTFAMILY = 70554;
		public const uint32 DISPID_IHTMLSTYLE_FONTSTYLE = 70560;
		public const uint32 DISPID_IHTMLSTYLE_FONTVARIANT = 70561;
		public const uint32 DISPID_IHTMLSTYLE_FONTWEIGHT = 70563;
		public const uint32 DISPID_IHTMLSTYLE_FONTSIZE = 70555;
		public const uint32 DISPID_IHTMLSTYLE_FONT = 70577;
		public const uint32 DISPID_IHTMLSTYLE_COLOR = 70538;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUND = 70568;
		public const int32 DISPID_IHTMLSTYLE_BACKGROUNDCOLOR = -501;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDIMAGE = 70537;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDREPEAT = 70580;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT = 70581;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITION = 70582;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX = 70569;
		public const uint32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY = 70570;
		public const uint32 DISPID_IHTMLSTYLE_WORDSPACING = 70583;
		public const uint32 DISPID_IHTMLSTYLE_LETTERSPACING = 70544;
		public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATION = 70571;
		public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONNONE = 70559;
		public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE = 70557;
		public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE = 70605;
		public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH = 70556;
		public const uint32 DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK = 70558;
		public const uint32 DISPID_IHTMLSTYLE_VERTICALALIGN = 70584;
		public const uint32 DISPID_IHTMLSTYLE_TEXTTRANSFORM = 70540;
		public const uint32 DISPID_IHTMLSTYLE_TEXTALIGN = 65608;
		public const uint32 DISPID_IHTMLSTYLE_TEXTINDENT = 70543;
		public const uint32 DISPID_IHTMLSTYLE_LINEHEIGHT = 70542;
		public const uint32 DISPID_IHTMLSTYLE_MARGINTOP = 70573;
		public const uint32 DISPID_IHTMLSTYLE_MARGINRIGHT = 70574;
		public const uint32 DISPID_IHTMLSTYLE_MARGINBOTTOM = 70575;
		public const uint32 DISPID_IHTMLSTYLE_MARGINLEFT = 70576;
		public const uint32 DISPID_IHTMLSTYLE_MARGIN = 70572;
		public const uint32 DISPID_IHTMLSTYLE_PADDINGTOP = 70548;
		public const uint32 DISPID_IHTMLSTYLE_PADDINGRIGHT = 70549;
		public const uint32 DISPID_IHTMLSTYLE_PADDINGBOTTOM = 70550;
		public const uint32 DISPID_IHTMLSTYLE_PADDINGLEFT = 70551;
		public const uint32 DISPID_IHTMLSTYLE_PADDING = 70547;
		public const uint32 DISPID_IHTMLSTYLE_BORDER = 70585;
		public const uint32 DISPID_IHTMLSTYLE_BORDERTOP = 70586;
		public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHT = 70587;
		public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOM = 70588;
		public const uint32 DISPID_IHTMLSTYLE_BORDERLEFT = 70589;
		public const uint32 DISPID_IHTMLSTYLE_BORDERCOLOR = 70590;
		public const uint32 DISPID_IHTMLSTYLE_BORDERTOPCOLOR = 70591;
		public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR = 70592;
		public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR = 70593;
		public const uint32 DISPID_IHTMLSTYLE_BORDERLEFTCOLOR = 70594;
		public const uint32 DISPID_IHTMLSTYLE_BORDERWIDTH = 70595;
		public const uint32 DISPID_IHTMLSTYLE_BORDERTOPWIDTH = 70596;
		public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH = 70597;
		public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH = 70598;
		public const uint32 DISPID_IHTMLSTYLE_BORDERLEFTWIDTH = 70599;
		public const uint32 DISPID_IHTMLSTYLE_BORDERSTYLE = 70600;
		public const uint32 DISPID_IHTMLSTYLE_BORDERTOPSTYLE = 70601;
		public const uint32 DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE = 70602;
		public const uint32 DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE = 70603;
		public const uint32 DISPID_IHTMLSTYLE_BORDERLEFTSTYLE = 70604;
		public const uint32 DISPID_IHTMLSTYLE_WIDTH = 65541;
		public const uint32 DISPID_IHTMLSTYLE_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLSTYLE_STYLEFLOAT = 70606;
		public const uint32 DISPID_IHTMLSTYLE_CLEAR = 70552;
		public const uint32 DISPID_IHTMLSTYLE_DISPLAY = 70607;
		public const uint32 DISPID_IHTMLSTYLE_VISIBILITY = 70616;
		public const uint32 DISPID_IHTMLSTYLE_LISTSTYLETYPE = 70608;
		public const uint32 DISPID_IHTMLSTYLE_LISTSTYLEPOSITION = 70609;
		public const uint32 DISPID_IHTMLSTYLE_LISTSTYLEIMAGE = 70610;
		public const uint32 DISPID_IHTMLSTYLE_LISTSTYLE = 70611;
		public const uint32 DISPID_IHTMLSTYLE_WHITESPACE = 70612;
		public const uint32 DISPID_IHTMLSTYLE_TOP = 65540;
		public const uint32 DISPID_IHTMLSTYLE_LEFT = 65539;
		public const uint32 DISPID_IHTMLSTYLE_POSITION = 70626;
		public const uint32 DISPID_IHTMLSTYLE_ZINDEX = 70627;
		public const uint32 DISPID_IHTMLSTYLE_OVERFLOW = 70546;
		public const uint32 DISPID_IHTMLSTYLE_PAGEBREAKBEFORE = 70613;
		public const uint32 DISPID_IHTMLSTYLE_PAGEBREAKAFTER = 70614;
		public const uint32 DISPID_IHTMLSTYLE_CSSTEXT = 70635;
		public const uint32 DISPID_IHTMLSTYLE_PIXELTOP = 69536;
		public const uint32 DISPID_IHTMLSTYLE_PIXELLEFT = 69537;
		public const uint32 DISPID_IHTMLSTYLE_PIXELWIDTH = 69538;
		public const uint32 DISPID_IHTMLSTYLE_PIXELHEIGHT = 69539;
		public const uint32 DISPID_IHTMLSTYLE_POSTOP = 69540;
		public const uint32 DISPID_IHTMLSTYLE_POSLEFT = 69541;
		public const uint32 DISPID_IHTMLSTYLE_POSWIDTH = 69542;
		public const uint32 DISPID_IHTMLSTYLE_POSHEIGHT = 69543;
		public const uint32 DISPID_IHTMLSTYLE_CURSOR = 70638;
		public const uint32 DISPID_IHTMLSTYLE_CLIP = 70628;
		public const uint32 DISPID_IHTMLSTYLE_FILTER = 70618;
		public const uint32 DISPID_IHTMLSTYLE_SETATTRIBUTE = 66037;
		public const uint32 DISPID_IHTMLSTYLE_GETATTRIBUTE = 66038;
		public const uint32 DISPID_IHTMLSTYLE_REMOVEATTRIBUTE = 66039;
		public const uint32 DISPID_IHTMLSTYLE_TOSTRING = 69544;
		public const uint32 DISPID_IHTMLSTYLE2_TABLELAYOUT = 70634;
		public const uint32 DISPID_IHTMLSTYLE2_BORDERCOLLAPSE = 70620;
		public const uint32 DISPID_IHTMLSTYLE2_DIRECTION = 70655;
		public const uint32 DISPID_IHTMLSTYLE2_BEHAVIOR = 70651;
		public const uint32 DISPID_IHTMLSTYLE2_SETEXPRESSION = 66040;
		public const uint32 DISPID_IHTMLSTYLE2_GETEXPRESSION = 66041;
		public const uint32 DISPID_IHTMLSTYLE2_REMOVEEXPRESSION = 66042;
		public const uint32 DISPID_IHTMLSTYLE2_POSITION = 70626;
		public const uint32 DISPID_IHTMLSTYLE2_UNICODEBIDI = 70654;
		public const uint32 DISPID_IHTMLSTYLE2_BOTTOM = 65614;
		public const uint32 DISPID_IHTMLSTYLE2_RIGHT = 65613;
		public const uint32 DISPID_IHTMLSTYLE2_PIXELBOTTOM = 69545;
		public const uint32 DISPID_IHTMLSTYLE2_PIXELRIGHT = 69546;
		public const uint32 DISPID_IHTMLSTYLE2_POSBOTTOM = 69547;
		public const uint32 DISPID_IHTMLSTYLE2_POSRIGHT = 69548;
		public const uint32 DISPID_IHTMLSTYLE2_IMEMODE = 70656;
		public const uint32 DISPID_IHTMLSTYLE2_RUBYALIGN = 70657;
		public const uint32 DISPID_IHTMLSTYLE2_RUBYPOSITION = 70658;
		public const uint32 DISPID_IHTMLSTYLE2_RUBYOVERHANG = 70659;
		public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDCHAR = 70663;
		public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDLINE = 70664;
		public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDMODE = 70665;
		public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRIDTYPE = 70666;
		public const uint32 DISPID_IHTMLSTYLE2_LAYOUTGRID = 70667;
		public const uint32 DISPID_IHTMLSTYLE2_WORDBREAK = 70670;
		public const uint32 DISPID_IHTMLSTYLE2_LINEBREAK = 70669;
		public const uint32 DISPID_IHTMLSTYLE2_TEXTJUSTIFY = 70671;
		public const uint32 DISPID_IHTMLSTYLE2_TEXTJUSTIFYTRIM = 70672;
		public const uint32 DISPID_IHTMLSTYLE2_TEXTKASHIDA = 70673;
		public const uint32 DISPID_IHTMLSTYLE2_TEXTAUTOSPACE = 70668;
		public const uint32 DISPID_IHTMLSTYLE2_OVERFLOWX = 70675;
		public const uint32 DISPID_IHTMLSTYLE2_OVERFLOWY = 70676;
		public const uint32 DISPID_IHTMLSTYLE2_ACCELERATOR = 70683;
		public const uint32 DISPID_IHTMLSTYLE3_LAYOUTFLOW = 70691;
		public const uint32 DISPID_IHTMLSTYLE3_ZOOM = 70689;
		public const uint32 DISPID_IHTMLSTYLE3_WORDWRAP = 70694;
		public const uint32 DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION = 70695;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR = 70716;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR = 70717;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR = 70718;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR = 70719;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR = 70720;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR = 70721;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR = 70722;
		public const uint32 DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR = 70732;
		public const uint32 DISPID_IHTMLSTYLE3_WRITINGMODE = 70728;
		public const uint32 DISPID_IHTMLSTYLE3_TEXTALIGNLAST = 70739;
		public const uint32 DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE = 70740;
		public const uint32 DISPID_IHTMLSTYLE4_TEXTOVERFLOW = 70745;
		public const uint32 DISPID_IHTMLSTYLE4_MINHEIGHT = 70747;
		public const uint32 DISPID_IHTMLSTYLE5_MSINTERPOLATIONMODE = 70749;
		public const uint32 DISPID_IHTMLSTYLE5_MAXHEIGHT = 70750;
		public const uint32 DISPID_IHTMLSTYLE5_MINWIDTH = 70751;
		public const uint32 DISPID_IHTMLSTYLE5_MAXWIDTH = 70752;
		public const uint32 DISPID_IHTMLSTYLE6_CONTENT = 70754;
		public const uint32 DISPID_IHTMLSTYLE6_CAPTIONSIDE = 70755;
		public const uint32 DISPID_IHTMLSTYLE6_COUNTERINCREMENT = 70756;
		public const uint32 DISPID_IHTMLSTYLE6_COUNTERRESET = 70757;
		public const uint32 DISPID_IHTMLSTYLE6_OUTLINE = 70758;
		public const uint32 DISPID_IHTMLSTYLE6_OUTLINEWIDTH = 70759;
		public const uint32 DISPID_IHTMLSTYLE6_OUTLINESTYLE = 70760;
		public const uint32 DISPID_IHTMLSTYLE6_OUTLINECOLOR = 70761;
		public const uint32 DISPID_IHTMLSTYLE6_BOXSIZING = 70762;
		public const uint32 DISPID_IHTMLSTYLE6_BORDERSPACING = 70763;
		public const uint32 DISPID_IHTMLSTYLE6_ORPHANS = 70764;
		public const uint32 DISPID_IHTMLSTYLE6_WIDOWS = 70765;
		public const uint32 DISPID_IHTMLSTYLE6_PAGEBREAKINSIDE = 70766;
		public const uint32 DISPID_IHTMLSTYLE6_EMPTYCELLS = 70786;
		public const uint32 DISPID_IHTMLSTYLE6_MSBLOCKPROGRESSION = 70787;
		public const uint32 DISPID_IHTMLSTYLE6_QUOTES = 70788;
		public const uint32 DISPID_IHTMLRULESTYLE_FONTFAMILY = 70554;
		public const uint32 DISPID_IHTMLRULESTYLE_FONTSTYLE = 70560;
		public const uint32 DISPID_IHTMLRULESTYLE_FONTVARIANT = 70561;
		public const uint32 DISPID_IHTMLRULESTYLE_FONTWEIGHT = 70563;
		public const uint32 DISPID_IHTMLRULESTYLE_FONTSIZE = 70555;
		public const uint32 DISPID_IHTMLRULESTYLE_FONT = 70577;
		public const uint32 DISPID_IHTMLRULESTYLE_COLOR = 70538;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUND = 70568;
		public const int32 DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR = -501;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE = 70537;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT = 70580;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT = 70581;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION = 70582;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX = 70569;
		public const uint32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY = 70570;
		public const uint32 DISPID_IHTMLRULESTYLE_WORDSPACING = 70583;
		public const uint32 DISPID_IHTMLRULESTYLE_LETTERSPACING = 70544;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATION = 70571;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE = 70559;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE = 70557;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE = 70605;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH = 70556;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK = 70558;
		public const uint32 DISPID_IHTMLRULESTYLE_VERTICALALIGN = 70584;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTTRANSFORM = 70540;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTALIGN = 65608;
		public const uint32 DISPID_IHTMLRULESTYLE_TEXTINDENT = 70543;
		public const uint32 DISPID_IHTMLRULESTYLE_LINEHEIGHT = 70542;
		public const uint32 DISPID_IHTMLRULESTYLE_MARGINTOP = 70573;
		public const uint32 DISPID_IHTMLRULESTYLE_MARGINRIGHT = 70574;
		public const uint32 DISPID_IHTMLRULESTYLE_MARGINBOTTOM = 70575;
		public const uint32 DISPID_IHTMLRULESTYLE_MARGINLEFT = 70576;
		public const uint32 DISPID_IHTMLRULESTYLE_MARGIN = 70572;
		public const uint32 DISPID_IHTMLRULESTYLE_PADDINGTOP = 70548;
		public const uint32 DISPID_IHTMLRULESTYLE_PADDINGRIGHT = 70549;
		public const uint32 DISPID_IHTMLRULESTYLE_PADDINGBOTTOM = 70550;
		public const uint32 DISPID_IHTMLRULESTYLE_PADDINGLEFT = 70551;
		public const uint32 DISPID_IHTMLRULESTYLE_PADDING = 70547;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDER = 70585;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOP = 70586;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHT = 70587;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOM = 70588;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFT = 70589;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERCOLOR = 70590;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR = 70591;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR = 70592;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR = 70593;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR = 70594;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERWIDTH = 70595;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH = 70596;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH = 70597;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH = 70598;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH = 70599;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERSTYLE = 70600;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE = 70601;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE = 70602;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE = 70603;
		public const uint32 DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE = 70604;
		public const uint32 DISPID_IHTMLRULESTYLE_WIDTH = 65541;
		public const uint32 DISPID_IHTMLRULESTYLE_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLRULESTYLE_STYLEFLOAT = 70606;
		public const uint32 DISPID_IHTMLRULESTYLE_CLEAR = 70552;
		public const uint32 DISPID_IHTMLRULESTYLE_DISPLAY = 70607;
		public const uint32 DISPID_IHTMLRULESTYLE_VISIBILITY = 70616;
		public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLETYPE = 70608;
		public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION = 70609;
		public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE = 70610;
		public const uint32 DISPID_IHTMLRULESTYLE_LISTSTYLE = 70611;
		public const uint32 DISPID_IHTMLRULESTYLE_WHITESPACE = 70612;
		public const uint32 DISPID_IHTMLRULESTYLE_TOP = 65540;
		public const uint32 DISPID_IHTMLRULESTYLE_LEFT = 65539;
		public const uint32 DISPID_IHTMLRULESTYLE_POSITION = 70626;
		public const uint32 DISPID_IHTMLRULESTYLE_ZINDEX = 70627;
		public const uint32 DISPID_IHTMLRULESTYLE_OVERFLOW = 70546;
		public const uint32 DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE = 70613;
		public const uint32 DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER = 70614;
		public const uint32 DISPID_IHTMLRULESTYLE_CSSTEXT = 70635;
		public const uint32 DISPID_IHTMLRULESTYLE_CURSOR = 70638;
		public const uint32 DISPID_IHTMLRULESTYLE_CLIP = 70628;
		public const uint32 DISPID_IHTMLRULESTYLE_FILTER = 70618;
		public const uint32 DISPID_IHTMLRULESTYLE_SETATTRIBUTE = 66037;
		public const uint32 DISPID_IHTMLRULESTYLE_GETATTRIBUTE = 66038;
		public const uint32 DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE = 66039;
		public const uint32 DISPID_IHTMLRULESTYLE2_TABLELAYOUT = 70634;
		public const uint32 DISPID_IHTMLRULESTYLE2_BORDERCOLLAPSE = 70620;
		public const uint32 DISPID_IHTMLRULESTYLE2_DIRECTION = 70655;
		public const uint32 DISPID_IHTMLRULESTYLE2_BEHAVIOR = 70651;
		public const uint32 DISPID_IHTMLRULESTYLE2_POSITION = 70626;
		public const uint32 DISPID_IHTMLRULESTYLE2_UNICODEBIDI = 70654;
		public const uint32 DISPID_IHTMLRULESTYLE2_BOTTOM = 65614;
		public const uint32 DISPID_IHTMLRULESTYLE2_RIGHT = 65613;
		public const uint32 DISPID_IHTMLRULESTYLE2_PIXELBOTTOM = 69545;
		public const uint32 DISPID_IHTMLRULESTYLE2_PIXELRIGHT = 69546;
		public const uint32 DISPID_IHTMLRULESTYLE2_POSBOTTOM = 69547;
		public const uint32 DISPID_IHTMLRULESTYLE2_POSRIGHT = 69548;
		public const uint32 DISPID_IHTMLRULESTYLE2_IMEMODE = 70656;
		public const uint32 DISPID_IHTMLRULESTYLE2_RUBYALIGN = 70657;
		public const uint32 DISPID_IHTMLRULESTYLE2_RUBYPOSITION = 70658;
		public const uint32 DISPID_IHTMLRULESTYLE2_RUBYOVERHANG = 70659;
		public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDCHAR = 70663;
		public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDLINE = 70664;
		public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDMODE = 70665;
		public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDTYPE = 70666;
		public const uint32 DISPID_IHTMLRULESTYLE2_LAYOUTGRID = 70667;
		public const uint32 DISPID_IHTMLRULESTYLE2_TEXTAUTOSPACE = 70668;
		public const uint32 DISPID_IHTMLRULESTYLE2_WORDBREAK = 70670;
		public const uint32 DISPID_IHTMLRULESTYLE2_LINEBREAK = 70669;
		public const uint32 DISPID_IHTMLRULESTYLE2_TEXTJUSTIFY = 70671;
		public const uint32 DISPID_IHTMLRULESTYLE2_TEXTJUSTIFYTRIM = 70672;
		public const uint32 DISPID_IHTMLRULESTYLE2_TEXTKASHIDA = 70673;
		public const uint32 DISPID_IHTMLRULESTYLE2_OVERFLOWX = 70675;
		public const uint32 DISPID_IHTMLRULESTYLE2_OVERFLOWY = 70676;
		public const uint32 DISPID_IHTMLRULESTYLE2_ACCELERATOR = 70683;
		public const uint32 DISPID_IHTMLRULESTYLE3_LAYOUTFLOW = 70691;
		public const uint32 DISPID_IHTMLRULESTYLE3_ZOOM = 70689;
		public const uint32 DISPID_IHTMLRULESTYLE3_WORDWRAP = 70694;
		public const uint32 DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION = 70695;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR = 70716;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR = 70717;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR = 70718;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR = 70719;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR = 70720;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR = 70721;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR = 70722;
		public const uint32 DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR = 70732;
		public const uint32 DISPID_IHTMLRULESTYLE3_WRITINGMODE = 70728;
		public const uint32 DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST = 70739;
		public const uint32 DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE = 70740;
		public const uint32 DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW = 70745;
		public const uint32 DISPID_IHTMLRULESTYLE4_MINHEIGHT = 70747;
		public const uint32 DISPID_IHTMLRULESTYLE5_MSINTERPOLATIONMODE = 70749;
		public const uint32 DISPID_IHTMLRULESTYLE5_MAXHEIGHT = 70750;
		public const uint32 DISPID_IHTMLRULESTYLE5_MINWIDTH = 70751;
		public const uint32 DISPID_IHTMLRULESTYLE5_MAXWIDTH = 70752;
		public const uint32 DISPID_IHTMLRULESTYLE6_CONTENT = 70754;
		public const uint32 DISPID_IHTMLRULESTYLE6_CAPTIONSIDE = 70755;
		public const uint32 DISPID_IHTMLRULESTYLE6_COUNTERINCREMENT = 70756;
		public const uint32 DISPID_IHTMLRULESTYLE6_COUNTERRESET = 70757;
		public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINE = 70758;
		public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINEWIDTH = 70759;
		public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINESTYLE = 70760;
		public const uint32 DISPID_IHTMLRULESTYLE6_OUTLINECOLOR = 70761;
		public const uint32 DISPID_IHTMLRULESTYLE6_BOXSIZING = 70762;
		public const uint32 DISPID_IHTMLRULESTYLE6_BORDERSPACING = 70763;
		public const uint32 DISPID_IHTMLRULESTYLE6_ORPHANS = 70764;
		public const uint32 DISPID_IHTMLRULESTYLE6_WIDOWS = 70765;
		public const uint32 DISPID_IHTMLRULESTYLE6_PAGEBREAKINSIDE = 70766;
		public const uint32 DISPID_IHTMLRULESTYLE6_EMPTYCELLS = 70786;
		public const uint32 DISPID_IHTMLRULESTYLE6_MSBLOCKPROGRESSION = 70787;
		public const uint32 DISPID_IHTMLRULESTYLE6_QUOTES = 70788;
		public const uint32 DISPID_IHTMLCSSRULE_TYPE = 1101;
		public const uint32 DISPID_IHTMLCSSRULE_CSSTEXT = 1102;
		public const uint32 DISPID_IHTMLCSSRULE_PARENTRULE = 1103;
		public const uint32 DISPID_IHTMLCSSRULE_PARENTSTYLESHEET = 1104;
		public const uint32 DISPID_IHTMLCSSIMPORTRULE_HREF = 1001;
		public const uint32 DISPID_IHTMLCSSIMPORTRULE_MEDIA = 1002;
		public const uint32 DISPID_IHTMLCSSIMPORTRULE_STYLESHEET = 1003;
		public const uint32 DISPID_IHTMLCSSMEDIARULE_MEDIA = 1001;
		public const uint32 DISPID_IHTMLCSSMEDIARULE_CSSRULES = 1002;
		public const uint32 DISPID_IHTMLCSSMEDIARULE_INSERTRULE = 1003;
		public const uint32 DISPID_IHTMLCSSMEDIARULE_DELETERULE = 1004;
		public const uint32 DISPID_IHTMLCSSMEDIALIST_MEDIATEXT = 1001;
		public const uint32 DISPID_IHTMLCSSMEDIALIST_LENGTH = 1002;
		public const uint32 DISPID_IHTMLCSSMEDIALIST_ITEM = 1003;
		public const uint32 DISPID_IHTMLCSSMEDIALIST_APPENDMEDIUM = 1004;
		public const uint32 DISPID_IHTMLCSSMEDIALIST_DELETEMEDIUM = 1005;
		public const uint32 DISPID_IHTMLCSSNAMESPACERULE_NAMESPACEURI = 1001;
		public const uint32 DISPID_IHTMLCSSNAMESPACERULE_PREFIX = 1002;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMERULE_KEYTEXT = 1001;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMERULE_STYLE = 1002;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_NAME = 1001;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_CSSRULES = 1002;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_APPENDRULE = 1003;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_DELETERULE = 1004;
		public const uint32 DISPID_IHTMLMSCSSKEYFRAMESRULE_FINDRULE = 1005;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE = 70702;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE = 70703;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTEFFECT = 70704;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTCOLOR = 70726;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR = 70705;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR = 70725;
		public const uint32 DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY = 70706;
		public const uint32 DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION = 70724;
		public const uint32 DISPID_IHTMLRENDERSTYLE_TEXTDECORATION = 70727;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_POSITION = 70626;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_STYLEFLOAT = 70606;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_COLOR = 70538;
		public const int32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR = -501;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTFAMILY = 70554;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTSTYLE = 70560;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTVARIANT = 70561;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTWEIGHT = 70563;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_FONTSIZE = 70555;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDIMAGE = 70537;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONX = 70569;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONY = 70570;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDREPEAT = 70580;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTCOLOR = 70594;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPCOLOR = 70591;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTCOLOR = 70592;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMCOLOR = 70593;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPSTYLE = 70601;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTSTYLE = 70602;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMSTYLE = 70603;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTSTYLE = 70604;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPWIDTH = 70596;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTWIDTH = 70597;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMWIDTH = 70598;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTWIDTH = 70599;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LEFT = 65539;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TOP = 65540;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_WIDTH = 65541;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGLEFT = 70551;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGTOP = 70548;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGRIGHT = 70549;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDINGBOTTOM = 70550;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTALIGN = 65608;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTDECORATION = 70571;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_DISPLAY = 70607;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_VISIBILITY = 70616;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_ZINDEX = 70627;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LETTERSPACING = 70544;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LINEHEIGHT = 70542;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTINDENT = 70543;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_VERTICALALIGN = 70584;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDATTACHMENT = 70581;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINTOP = 70573;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINRIGHT = 70574;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINBOTTOM = 70575;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGINLEFT = 70576;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_CLEAR = 70552;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLETYPE = 70608;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLEPOSITION = 70609;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLEIMAGE = 70610;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPTOP = 70629;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPRIGHT = 70630;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPBOTTOM = 70631;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_CLIPLEFT = 70632;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_OVERFLOW = 70546;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PAGEBREAKBEFORE = 70613;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PAGEBREAKAFTER = 70614;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_CURSOR = 70638;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TABLELAYOUT = 70634;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERCOLLAPSE = 70620;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_DIRECTION = 70655;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BEHAVIOR = 70651;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_GETATTRIBUTE = 66038;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_UNICODEBIDI = 70654;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_RIGHT = 65613;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BOTTOM = 65614;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_IMEMODE = 70656;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_RUBYALIGN = 70657;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_RUBYPOSITION = 70658;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_RUBYOVERHANG = 70659;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTAUTOSPACE = 70668;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LINEBREAK = 70669;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_WORDBREAK = 70670;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFY = 70671;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFYTRIM = 70672;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTKASHIDA = 70673;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BLOCKDIRECTION = 70653;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDCHAR = 70663;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDLINE = 70664;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDMODE = 70665;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDTYPE = 70666;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERSTYLE = 70600;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERCOLOR = 70590;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_BORDERWIDTH = 70595;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_PADDING = 70547;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_MARGIN = 70572;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_ACCELERATOR = 70683;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_OVERFLOWX = 70675;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_OVERFLOWY = 70676;
		public const uint32 DISPID_IHTMLCURRENTSTYLE_TEXTTRANSFORM = 70540;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW = 70691;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_WORDWRAP = 70694;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION = 70695;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT = 70696;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR = 70716;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR = 70717;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR = 70718;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR = 70719;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR = 70720;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR = 70721;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR = 70722;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR = 70732;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE = 70728;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_ZOOM = 70689;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_FILTER = 70618;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST = 70739;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE = 70740;
		public const uint32 DISPID_IHTMLCURRENTSTYLE2_ISBLOCK = 70744;
		public const uint32 DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW = 70745;
		public const uint32 DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT = 70747;
		public const uint32 DISPID_IHTMLCURRENTSTYLE3_WORDSPACING = 70583;
		public const uint32 DISPID_IHTMLCURRENTSTYLE3_WHITESPACE = 70612;
		public const uint32 DISPID_IHTMLCURRENTSTYLE4_MSINTERPOLATIONMODE = 70749;
		public const uint32 DISPID_IHTMLCURRENTSTYLE4_MAXHEIGHT = 70750;
		public const uint32 DISPID_IHTMLCURRENTSTYLE4_MINWIDTH = 70751;
		public const uint32 DISPID_IHTMLCURRENTSTYLE4_MAXWIDTH = 70752;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_CAPTIONSIDE = 70755;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINE = 70758;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINEWIDTH = 70759;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINESTYLE = 70760;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_OUTLINECOLOR = 70761;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_BOXSIZING = 70762;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_BORDERSPACING = 70763;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_ORPHANS = 70764;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_WIDOWS = 70765;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_PAGEBREAKINSIDE = 70766;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_EMPTYCELLS = 70786;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_MSBLOCKPROGRESSION = 70787;
		public const uint32 DISPID_IHTMLCURRENTSTYLE5_QUOTES = 70788;
		public const uint32 DISPID_IHTMLRECT_LEFT = 1001;
		public const uint32 DISPID_IHTMLRECT_TOP = 1002;
		public const uint32 DISPID_IHTMLRECT_RIGHT = 1003;
		public const uint32 DISPID_IHTMLRECT_BOTTOM = 1004;
		public const uint32 DISPID_IHTMLRECT2_WIDTH = 1005;
		public const uint32 DISPID_IHTMLRECT2_HEIGHT = 1006;
		public const uint32 DISPID_IHTMLRECTCOLLECTION_LENGTH = 1500;
		public const int32 DISPID_IHTMLRECTCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLRECTCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDOMNODE_NODETYPE = 66582;
		public const uint32 DISPID_IHTMLDOMNODE_PARENTNODE = 66583;
		public const uint32 DISPID_IHTMLDOMNODE_HASCHILDNODES = 66584;
		public const uint32 DISPID_IHTMLDOMNODE_CHILDNODES = 66585;
		public const uint32 DISPID_IHTMLDOMNODE_ATTRIBUTES = 66586;
		public const uint32 DISPID_IHTMLDOMNODE_INSERTBEFORE = 66587;
		public const uint32 DISPID_IHTMLDOMNODE_REMOVECHILD = 66588;
		public const uint32 DISPID_IHTMLDOMNODE_REPLACECHILD = 66589;
		public const uint32 DISPID_IHTMLDOMNODE_CLONENODE = 66597;
		public const uint32 DISPID_IHTMLDOMNODE_REMOVENODE = 66602;
		public const uint32 DISPID_IHTMLDOMNODE_SWAPNODE = 66604;
		public const uint32 DISPID_IHTMLDOMNODE_REPLACENODE = 66603;
		public const uint32 DISPID_IHTMLDOMNODE_APPENDCHILD = 66609;
		public const uint32 DISPID_IHTMLDOMNODE_NODENAME = 66610;
		public const uint32 DISPID_IHTMLDOMNODE_NODEVALUE = 66611;
		public const uint32 DISPID_IHTMLDOMNODE_FIRSTCHILD = 66612;
		public const uint32 DISPID_IHTMLDOMNODE_LASTCHILD = 66613;
		public const uint32 DISPID_IHTMLDOMNODE_PREVIOUSSIBLING = 66614;
		public const uint32 DISPID_IHTMLDOMNODE_NEXTSIBLING = 66615;
		public const uint32 DISPID_IHTMLDOMNODE2_OWNERDOCUMENT = 66649;
		public const uint32 DISPID_IHTMLDOMNODE3_PREFIX = 66656;
		public const uint32 DISPID_IHTMLDOMNODE3_LOCALNAME = 66654;
		public const uint32 DISPID_IHTMLDOMNODE3_NAMESPACEURI = 66655;
		public const uint32 DISPID_IHTMLDOMNODE3_TEXTCONTENT = 66663;
		public const uint32 DISPID_IHTMLDOMNODE3_ISEQUALNODE = 66657;
		public const uint32 DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI = 66658;
		public const uint32 DISPID_IHTMLDOMNODE3_LOOKUPPREFIX = 66659;
		public const uint32 DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE = 66660;
		public const uint32 DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD = 66804;
		public const uint32 DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE = 66805;
		public const uint32 DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD = 66806;
		public const uint32 DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD = 66807;
		public const uint32 DISPID_IHTMLDOMNODE3_ISSAMENODE = 66661;
		public const uint32 DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION = 66662;
		public const uint32 DISPID_IHTMLDOMNODE3_ISSUPPORTED = 66813;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE_NODENAME = 1000;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE_NODEVALUE = 1002;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE_SPECIFIED = 1001;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_NAME = 1003;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_VALUE = 1004;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_EXPANDO = 1005;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_NODETYPE = 1006;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE = 1007;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES = 1008;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD = 1009;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD = 1010;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING = 1011;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING = 1012;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES = 1013;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT = 1014;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE = 1015;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD = 1016;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD = 1017;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD = 1018;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES = 1019;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE2_CLONENODE = 1020;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE3_IE8_NODEVALUE = 1153;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE3_IE8_VALUE = 1154;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE3_IE8_SPECIFIED = 1150;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE3_OWNERELEMENT = 1151;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NODEVALUE = 1159;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NODENAME = 1160;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NAME = 1161;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_VALUE = 1162;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_FIRSTCHILD = 1163;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_LASTCHILD = 1164;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_CHILDNODES = 1165;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_HASATTRIBUTES = 1166;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_HASCHILDNODES = 1167;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_NORMALIZE = 1170;
		public const uint32 DISPID_IHTMLDOMATTRIBUTE4_IE9_SPECIFIED = 1171;
		public const uint32 DISPID_IHTMLDOMTEXTNODE_DATA = 1000;
		public const uint32 DISPID_IHTMLDOMTEXTNODE_TOSTRING = 1001;
		public const uint32 DISPID_IHTMLDOMTEXTNODE_LENGTH = 1002;
		public const uint32 DISPID_IHTMLDOMTEXTNODE_SPLITTEXT = 1003;
		public const uint32 DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA = 1004;
		public const uint32 DISPID_IHTMLDOMTEXTNODE2_APPENDDATA = 1005;
		public const uint32 DISPID_IHTMLDOMTEXTNODE2_INSERTDATA = 1006;
		public const uint32 DISPID_IHTMLDOMTEXTNODE2_DELETEDATA = 1007;
		public const uint32 DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA = 1008;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_SUBSTRINGDATA = 1010;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_INSERTDATA = 1011;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_DELETEDATA = 1012;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_REPLACEDATA = 1013;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_IE9_SPLITTEXT = 1009;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_WHOLETEXT = 1014;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_REPLACEWHOLETEXT = 1015;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_HASATTRIBUTES = 1017;
		public const uint32 DISPID_IHTMLDOMTEXTNODE3_NORMALIZE = 1019;
		public const uint32 DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE = 1000;
		public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENTTYPE = 1001;
		public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENT = 1002;
		public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEHTMLDOCUMENT = 1003;
		public const uint32 DISPID_IHTMLDOMIMPLEMENTATION2_IE9_HASFEATURE = 1004;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH = 1500;
		public const int32 DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM = 1501;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM = 1502;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM = 1503;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_GETNAMEDITEM = 1150;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_SETNAMEDITEM = 1151;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_REMOVENAMEDITEM = 1152;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_ITEM = 1154;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_LENGTH = 1153;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_GETNAMEDITEMNS = 1155;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_SETNAMEDITEMNS = 1156;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_REMOVENAMEDITEMNS = 1157;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_GETNAMEDITEM = 1158;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_SETNAMEDITEM = 1159;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_REMOVENAMEDITEM = 1160;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_ITEM = 1161;
		public const uint32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_LENGTH = 1162;
		public const uint32 DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH = 1500;
		public const int32 DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDOMCHILDRENCOLLECTION2_IE9_ITEM = 1;
		public const uint32 DISPID_IHTMLELEMENT_SETATTRIBUTE = 66037;
		public const uint32 DISPID_IHTMLELEMENT_GETATTRIBUTE = 66038;
		public const uint32 DISPID_IHTMLELEMENT_REMOVEATTRIBUTE = 66039;
		public const uint32 DISPID_IHTMLELEMENT_CLASSNAME = 66537;
		public const uint32 DISPID_IHTMLELEMENT_ID = 66538;
		public const uint32 DISPID_IHTMLELEMENT_TAGNAME = 66540;
		public const uint32 DISPID_IHTMLELEMENT_PARENTELEMENT = 65544;
		public const uint32 DISPID_IHTMLELEMENT_STYLE = 65610;
		public const uint32 DISPID_IHTMLELEMENT_ONHELP = 71549;
		public const uint32 DISPID_IHTMLELEMENT_ONCLICK = 71544;
		public const uint32 DISPID_IHTMLELEMENT_ONDBLCLICK = 71545;
		public const uint32 DISPID_IHTMLELEMENT_ONKEYDOWN = 71541;
		public const uint32 DISPID_IHTMLELEMENT_ONKEYUP = 71542;
		public const uint32 DISPID_IHTMLELEMENT_ONKEYPRESS = 71543;
		public const uint32 DISPID_IHTMLELEMENT_ONMOUSEOUT = 71537;
		public const uint32 DISPID_IHTMLELEMENT_ONMOUSEOVER = 71536;
		public const uint32 DISPID_IHTMLELEMENT_ONMOUSEMOVE = 71540;
		public const uint32 DISPID_IHTMLELEMENT_ONMOUSEDOWN = 71538;
		public const uint32 DISPID_IHTMLELEMENT_ONMOUSEUP = 71539;
		public const uint32 DISPID_IHTMLELEMENT_DOCUMENT = 66554;
		public const uint32 DISPID_IHTMLELEMENT_TITLE = 65605;
		public const uint32 DISPID_IHTMLELEMENT_LANGUAGE = 70636;
		public const uint32 DISPID_IHTMLELEMENT_ONSELECTSTART = 71573;
		public const uint32 DISPID_IHTMLELEMENT_SCROLLINTOVIEW = 66555;
		public const uint32 DISPID_IHTMLELEMENT_CONTAINS = 66556;
		public const uint32 DISPID_IHTMLELEMENT_SOURCEINDEX = 66560;
		public const uint32 DISPID_IHTMLELEMENT_RECORDNUMBER = 66561;
		public const uint32 DISPID_IHTMLELEMENT_LANG = 70545;
		public const uint32 DISPID_IHTMLELEMENT_OFFSETLEFT = 66544;
		public const uint32 DISPID_IHTMLELEMENT_OFFSETTOP = 66545;
		public const uint32 DISPID_IHTMLELEMENT_OFFSETWIDTH = 66546;
		public const uint32 DISPID_IHTMLELEMENT_OFFSETHEIGHT = 66547;
		public const uint32 DISPID_IHTMLELEMENT_OFFSETPARENT = 66548;
		public const uint32 DISPID_IHTMLELEMENT_INNERHTML = 66562;
		public const uint32 DISPID_IHTMLELEMENT_INNERTEXT = 66563;
		public const uint32 DISPID_IHTMLELEMENT_OUTERHTML = 66564;
		public const uint32 DISPID_IHTMLELEMENT_OUTERTEXT = 66565;
		public const uint32 DISPID_IHTMLELEMENT_INSERTADJACENTHTML = 66566;
		public const uint32 DISPID_IHTMLELEMENT_INSERTADJACENTTEXT = 66567;
		public const uint32 DISPID_IHTMLELEMENT_PARENTTEXTEDIT = 66568;
		public const uint32 DISPID_IHTMLELEMENT_ISTEXTEDIT = 66570;
		public const uint32 DISPID_IHTMLELEMENT_CLICK = 66569;
		public const uint32 DISPID_IHTMLELEMENT_FILTERS = 66571;
		public const uint32 DISPID_IHTMLELEMENT_ONDRAGSTART = 71571;
		public const uint32 DISPID_IHTMLELEMENT_TOSTRING = 66572;
		public const uint32 DISPID_IHTMLELEMENT_ONBEFOREUPDATE = 71557;
		public const uint32 DISPID_IHTMLELEMENT_ONAFTERUPDATE = 71558;
		public const uint32 DISPID_IHTMLELEMENT_ONERRORUPDATE = 71574;
		public const uint32 DISPID_IHTMLELEMENT_ONROWEXIT = 71554;
		public const uint32 DISPID_IHTMLELEMENT_ONROWENTER = 71555;
		public const uint32 DISPID_IHTMLELEMENT_ONDATASETCHANGED = 71576;
		public const uint32 DISPID_IHTMLELEMENT_ONDATAAVAILABLE = 71577;
		public const uint32 DISPID_IHTMLELEMENT_ONDATASETCOMPLETE = 71578;
		public const uint32 DISPID_IHTMLELEMENT_ONFILTERCHANGE = 71579;
		public const uint32 DISPID_IHTMLELEMENT_CHILDREN = 66573;
		public const uint32 DISPID_IHTMLELEMENT_ALL = 66574;
		public const uint32 DISPID_IHTMLELEMENT2_SCOPENAME = 66575;
		public const uint32 DISPID_IHTMLELEMENT2_SETCAPTURE = 66576;
		public const uint32 DISPID_IHTMLELEMENT2_RELEASECAPTURE = 66577;
		public const uint32 DISPID_IHTMLELEMENT2_ONLOSECAPTURE = 71582;
		public const uint32 DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT = 66578;
		public const uint32 DISPID_IHTMLELEMENT2_DOSCROLL = 66579;
		public const uint32 DISPID_IHTMLELEMENT2_ONSCROLL = 71567;
		public const uint32 DISPID_IHTMLELEMENT2_ONDRAG = 71585;
		public const uint32 DISPID_IHTMLELEMENT2_ONDRAGEND = 71586;
		public const uint32 DISPID_IHTMLELEMENT2_ONDRAGENTER = 71587;
		public const uint32 DISPID_IHTMLELEMENT2_ONDRAGOVER = 71588;
		public const uint32 DISPID_IHTMLELEMENT2_ONDRAGLEAVE = 71589;
		public const uint32 DISPID_IHTMLELEMENT2_ONDROP = 71590;
		public const uint32 DISPID_IHTMLELEMENT2_ONBEFORECUT = 71594;
		public const uint32 DISPID_IHTMLELEMENT2_ONCUT = 71591;
		public const uint32 DISPID_IHTMLELEMENT2_ONBEFORECOPY = 71595;
		public const uint32 DISPID_IHTMLELEMENT2_ONCOPY = 71592;
		public const uint32 DISPID_IHTMLELEMENT2_ONBEFOREPASTE = 71596;
		public const uint32 DISPID_IHTMLELEMENT2_ONPASTE = 71593;
		public const uint32 DISPID_IHTMLELEMENT2_CURRENTSTYLE = 66543;
		public const uint32 DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE = 71583;
		public const uint32 DISPID_IHTMLELEMENT2_GETCLIENTRECTS = 66580;
		public const uint32 DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT = 66581;
		public const uint32 DISPID_IHTMLELEMENT2_SETEXPRESSION = 66040;
		public const uint32 DISPID_IHTMLELEMENT2_GETEXPRESSION = 66041;
		public const uint32 DISPID_IHTMLELEMENT2_REMOVEEXPRESSION = 66042;
		public const uint32 DISPID_IHTMLELEMENT2_TABINDEX = 65551;
		public const uint32 DISPID_IHTMLELEMENT2_FOCUS = 67536;
		public const uint32 DISPID_IHTMLELEMENT2_ACCESSKEY = 67541;
		public const uint32 DISPID_IHTMLELEMENT2_ONBLUR = 71551;
		public const uint32 DISPID_IHTMLELEMENT2_ONFOCUS = 71550;
		public const uint32 DISPID_IHTMLELEMENT2_ONRESIZE = 71572;
		public const uint32 DISPID_IHTMLELEMENT2_BLUR = 67538;
		public const uint32 DISPID_IHTMLELEMENT2_ADDFILTER = 67553;
		public const uint32 DISPID_IHTMLELEMENT2_REMOVEFILTER = 67554;
		public const uint32 DISPID_IHTMLELEMENT2_CLIENTHEIGHT = 67555;
		public const uint32 DISPID_IHTMLELEMENT2_CLIENTWIDTH = 67556;
		public const uint32 DISPID_IHTMLELEMENT2_CLIENTTOP = 67557;
		public const uint32 DISPID_IHTMLELEMENT2_CLIENTLEFT = 67558;
		public const uint32 DISPID_IHTMLELEMENT2_ATTACHEVENT = 66043;
		public const uint32 DISPID_IHTMLELEMENT2_DETACHEVENT = 66044;
		public const uint32 DISPID_IHTMLELEMENT2_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLELEMENT2_ONROWSDELETE = 71598;
		public const uint32 DISPID_IHTMLELEMENT2_ONROWSINSERTED = 71599;
		public const uint32 DISPID_IHTMLELEMENT2_ONCELLCHANGE = 71600;
		public const uint32 DISPID_IHTMLELEMENT2_DIR = 70653;
		public const uint32 DISPID_IHTMLELEMENT2_CREATECONTROLRANGE = 66592;
		public const uint32 DISPID_IHTMLELEMENT2_SCROLLHEIGHT = 66593;
		public const uint32 DISPID_IHTMLELEMENT2_SCROLLWIDTH = 66594;
		public const uint32 DISPID_IHTMLELEMENT2_SCROLLTOP = 66595;
		public const uint32 DISPID_IHTMLELEMENT2_SCROLLLEFT = 66596;
		public const uint32 DISPID_IHTMLELEMENT2_CLEARATTRIBUTES = 66598;
		public const uint32 DISPID_IHTMLELEMENT2_MERGEATTRIBUTES = 66599;
		public const uint32 DISPID_IHTMLELEMENT2_ONCONTEXTMENU = 71601;
		public const uint32 DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT = 66605;
		public const uint32 DISPID_IHTMLELEMENT2_APPLYELEMENT = 66601;
		public const uint32 DISPID_IHTMLELEMENT2_GETADJACENTTEXT = 66606;
		public const uint32 DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT = 66607;
		public const uint32 DISPID_IHTMLELEMENT2_CANHAVECHILDREN = 66608;
		public const uint32 DISPID_IHTMLELEMENT2_ADDBEHAVIOR = 66616;
		public const uint32 DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR = 66617;
		public const uint32 DISPID_IHTMLELEMENT2_RUNTIMESTYLE = 66600;
		public const uint32 DISPID_IHTMLELEMENT2_BEHAVIORURNS = 66618;
		public const uint32 DISPID_IHTMLELEMENT2_TAGURN = 66619;
		public const uint32 DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS = 71605;
		public const uint32 DISPID_IHTMLELEMENT2_READYSTATEVALUE = 66620;
		public const uint32 DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME = 66621;
		public const uint32 DISPID_IHTMLELEMENT3_MERGEATTRIBUTES = 66632;
		public const uint32 DISPID_IHTMLELEMENT3_ISMULTILINE = 66633;
		public const uint32 DISPID_IHTMLELEMENT3_CANHAVEHTML = 66634;
		public const uint32 DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE = 71609;
		public const uint32 DISPID_IHTMLELEMENT3_ONPAGE = 71610;
		public const uint32 DISPID_IHTMLELEMENT3_INFLATEBLOCK = 66636;
		public const uint32 DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE = 71613;
		public const uint32 DISPID_IHTMLELEMENT3_SETACTIVE = 66637;
		public const uint32 DISPID_IHTMLELEMENT3_CONTENTEDITABLE = 70698;
		public const uint32 DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE = 66638;
		public const uint32 DISPID_IHTMLELEMENT3_HIDEFOCUS = 70699;
		public const uint32 DISPID_IHTMLELEMENT3_DISABLED = 65612;
		public const uint32 DISPID_IHTMLELEMENT3_ISDISABLED = 66641;
		public const uint32 DISPID_IHTMLELEMENT3_ONMOVE = 71614;
		public const uint32 DISPID_IHTMLELEMENT3_ONCONTROLSELECT = 71615;
		public const uint32 DISPID_IHTMLELEMENT3_FIREEVENT = 66642;
		public const uint32 DISPID_IHTMLELEMENT3_ONRESIZESTART = 71619;
		public const uint32 DISPID_IHTMLELEMENT3_ONRESIZEEND = 71620;
		public const uint32 DISPID_IHTMLELEMENT3_ONMOVESTART = 71617;
		public const uint32 DISPID_IHTMLELEMENT3_ONMOVEEND = 71618;
		public const uint32 DISPID_IHTMLELEMENT3_ONMOUSEENTER = 71621;
		public const uint32 DISPID_IHTMLELEMENT3_ONMOUSELEAVE = 71622;
		public const uint32 DISPID_IHTMLELEMENT3_ONACTIVATE = 71623;
		public const uint32 DISPID_IHTMLELEMENT3_ONDEACTIVATE = 71624;
		public const uint32 DISPID_IHTMLELEMENT3_DRAGDROP = 66643;
		public const uint32 DISPID_IHTMLELEMENT3_GLYPHMODE = 66644;
		public const uint32 DISPID_IHTMLELEMENT4_ONMOUSEWHEEL = 71612;
		public const uint32 DISPID_IHTMLELEMENT4_NORMALIZE = 66648;
		public const uint32 DISPID_IHTMLELEMENT4_GETATTRIBUTENODE = 66645;
		public const uint32 DISPID_IHTMLELEMENT4_SETATTRIBUTENODE = 66646;
		public const uint32 DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE = 66647;
		public const uint32 DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE = 71626;
		public const uint32 DISPID_IHTMLELEMENT4_ONFOCUSIN = 71627;
		public const uint32 DISPID_IHTMLELEMENT4_ONFOCUSOUT = 71628;
		public const uint32 DISPID_IELEMENTSELECTOR_QUERYSELECTOR = 66650;
		public const uint32 DISPID_IELEMENTSELECTOR_QUERYSELECTORALL = 66651;
		public const uint32 DISPID_IHTMLUNIQUENAME_UNIQUENUMBER = 66590;
		public const uint32 DISPID_IHTMLUNIQUENAME_UNIQUEID = 66591;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE = 66736;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE = 66737;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE = 66738;
		public const uint32 DISPID_IHTMLELEMENT5_HASATTRIBUTE = 66739;
		public const uint32 DISPID_IHTMLELEMENT5_ROLE = 66740;
		public const uint32 DISPID_IHTMLELEMENT5_ARIABUSY = 66741;
		public const uint32 DISPID_IHTMLELEMENT5_ARIACHECKED = 66742;
		public const uint32 DISPID_IHTMLELEMENT5_ARIADISABLED = 66743;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAEXPANDED = 66744;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAHASPOPUP = 66745;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAHIDDEN = 66746;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAINVALID = 66747;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE = 66748;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAPRESSED = 66749;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAREADONLY = 66750;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAREQUIRED = 66751;
		public const uint32 DISPID_IHTMLELEMENT5_ARIASECRET = 66752;
		public const uint32 DISPID_IHTMLELEMENT5_ARIASELECTED = 66753;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE = 66754;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE = 66755;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE = 66756;
		public const uint32 DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES = 66757;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAVALUENOW = 66758;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAPOSINSET = 66759;
		public const uint32 DISPID_IHTMLELEMENT5_ARIASETSIZE = 66760;
		public const uint32 DISPID_IHTMLELEMENT5_ARIALEVEL = 66761;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAVALUEMIN = 66762;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAVALUEMAX = 66763;
		public const uint32 DISPID_IHTMLELEMENT5_ARIACONTROLS = 66764;
		public const uint32 DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY = 66765;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAFLOWTO = 66766;
		public const uint32 DISPID_IHTMLELEMENT5_ARIALABELLEDBY = 66767;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT = 66768;
		public const uint32 DISPID_IHTMLELEMENT5_ARIAOWNS = 66769;
		public const uint32 DISPID_IHTMLELEMENT5_HASATTRIBUTES = 66770;
		public const uint32 DISPID_IHTMLELEMENT5_ARIALIVE = 66771;
		public const uint32 DISPID_IHTMLELEMENT5_ARIARELEVANT = 66772;
		public const uint32 DISPID_IHTMLELEMENT6_GETATTRIBUTENS = 66789;
		public const uint32 DISPID_IHTMLELEMENT6_SETATTRIBUTENS = 66790;
		public const uint32 DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS = 66791;
		public const uint32 DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS = 66786;
		public const uint32 DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS = 66787;
		public const uint32 DISPID_IHTMLELEMENT6_HASATTRIBUTENS = 66788;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE = 66796;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE = 66797;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE = 66798;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE = 66792;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE = 66793;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE = 66794;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE = 66795;
		public const uint32 DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS = 66799;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_TAGNAME = 66801;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_NODENAME = 66802;
		public const uint32 DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME = 66803;
		public const uint32 DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR = 66814;
		public const uint32 DISPID_IHTMLELEMENT6_ONABORT = 71564;
		public const uint32 DISPID_IHTMLELEMENT6_ONCANPLAY = 71670;
		public const uint32 DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH = 71671;
		public const uint32 DISPID_IHTMLELEMENT6_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLELEMENT6_ONDURATIONCHANGE = 71672;
		public const uint32 DISPID_IHTMLELEMENT6_ONEMPTIED = 71673;
		public const uint32 DISPID_IHTMLELEMENT6_ONENDED = 71674;
		public const uint32 DISPID_IHTMLELEMENT6_ONERROR = 71565;
		public const uint32 DISPID_IHTMLELEMENT6_ONINPUT = 71663;
		public const uint32 DISPID_IHTMLELEMENT6_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLELEMENT6_ONLOADEDDATA = 71675;
		public const uint32 DISPID_IHTMLELEMENT6_ONLOADEDMETADATA = 71676;
		public const uint32 DISPID_IHTMLELEMENT6_ONLOADSTART = 71677;
		public const uint32 DISPID_IHTMLELEMENT6_ONPAUSE = 71678;
		public const uint32 DISPID_IHTMLELEMENT6_ONPLAY = 71679;
		public const uint32 DISPID_IHTMLELEMENT6_ONPLAYING = 71680;
		public const uint32 DISPID_IHTMLELEMENT6_ONPROGRESS = 71681;
		public const uint32 DISPID_IHTMLELEMENT6_ONRATECHANGE = 71682;
		public const uint32 DISPID_IHTMLELEMENT6_ONRESET = 71548;
		public const uint32 DISPID_IHTMLELEMENT6_ONSEEKED = 71683;
		public const uint32 DISPID_IHTMLELEMENT6_ONSEEKING = 71684;
		public const uint32 DISPID_IHTMLELEMENT6_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLELEMENT6_ONSTALLED = 71685;
		public const uint32 DISPID_IHTMLELEMENT6_ONSUBMIT = 71547;
		public const uint32 DISPID_IHTMLELEMENT6_ONSUSPEND = 71686;
		public const uint32 DISPID_IHTMLELEMENT6_ONTIMEUPDATE = 71687;
		public const uint32 DISPID_IHTMLELEMENT6_ONVOLUMECHANGE = 71688;
		public const uint32 DISPID_IHTMLELEMENT6_ONWAITING = 71689;
		public const uint32 DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTES = 66815;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERDOWN = 71690;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERMOVE = 71691;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERUP = 71692;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTEROVER = 71693;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTEROUT = 71694;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERCANCEL = 71695;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSPOINTERHOVER = 71696;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSLOSTPOINTERCAPTURE = 71706;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGOTPOINTERCAPTURE = 71707;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTURESTART = 71699;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTURECHANGE = 71700;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTUREEND = 71701;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTUREHOLD = 71702;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTURETAP = 71703;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSGESTUREDOUBLETAP = 71704;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSINERTIASTART = 71705;
		public const uint32 DISPID_IHTMLELEMENT7_MSSETPOINTERCAPTURE = 66822;
		public const uint32 DISPID_IHTMLELEMENT7_MSRELEASEPOINTERCAPTURE = 66823;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSTRANSITIONSTART = 71709;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSTRANSITIONEND = 71710;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSANIMATIONSTART = 71711;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSANIMATIONEND = 71712;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSANIMATIONITERATION = 71713;
		public const uint32 DISPID_IHTMLELEMENT7_ONINVALID = 71724;
		public const uint32 DISPID_IHTMLELEMENT7_XMSACCELERATORKEY = 66834;
		public const uint32 DISPID_IHTMLELEMENT7_SPELLCHECK = 70907;
		public const uint32 DISPID_IHTMLELEMENT7_ONMSMANIPULATIONSTATECHANGED = 71714;
		public const uint32 DISPID_IHTMLELEMENT7_ONCUECHANGE = 71729;
		public const uint32 DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIED = 66652;
		public const uint32 DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIEDWITHANCESTOR = 66653;
		public const uint32 DISPID_IELEMENTTRAVERSAL_FIRSTELEMENTCHILD = 66808;
		public const uint32 DISPID_IELEMENTTRAVERSAL_LASTELEMENTCHILD = 66809;
		public const uint32 DISPID_IELEMENTTRAVERSAL_PREVIOUSELEMENTSIBLING = 66810;
		public const uint32 DISPID_IELEMENTTRAVERSAL_NEXTELEMENTSIBLING = 66811;
		public const uint32 DISPID_IELEMENTTRAVERSAL_CHILDELEMENTCOUNT = 66812;
		public const uint32 DISPID_IHTMLDATABINDING_DATAFLD = 66557;
		public const uint32 DISPID_IHTMLDATABINDING_DATASRC = 66558;
		public const uint32 DISPID_IHTMLDATABINDING_DATAFORMATAS = 66559;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONABORT = 1000;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONCHANGE = 1001;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONERROR = 1002;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONLOAD = 1003;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONRESET = 1015;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONSELECT = 1006;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONSUBMIT = 1007;
		public const uint32 DISPID_HTMLELEMENTEVENTS4_ONMSCONTENTZOOM = 71708;
		public const uint32 DISPID_HTMLELEMENTEVENTS3_ONONLINE = 1064;
		public const uint32 DISPID_HTMLELEMENTEVENTS3_ONOFFLINE = 1065;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONHELP = 65546;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONCLICK = -600;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK = -601;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS = -603;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN = -602;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONKEYUP = -604;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEOUT = 65545;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEOVER = 65544;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE = -606;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN = -605;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP = -607;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONSELECTSTART = 65548;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFILTERCHANGE = 65553;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGSTART = 65547;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONERRORUPDATE = 65549;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWEXIT = 65542;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWENTER = 65543;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONLOSECAPTURE = 65554;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONPROPERTYCHANGE = 65555;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONSCROLL = 1014;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFOCUS = 65537;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONRESIZE = 1016;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAG = 65556;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGEND = 65557;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGENTER = 65558;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGOVER = 65559;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDRAGLEAVE = 65560;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDROP = 65561;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFORECUT = 65565;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCUT = 65562;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFORECOPY = 65566;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCOPY = 65563;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREPASTE = 65567;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONPASTE = 65564;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU = 1023;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWSDELETE = 65568;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONROWSINSERTED = 65569;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCELLCHANGE = 65570;
		public const int32 DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE = -609;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE = 1030;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONPAGE = 1031;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER = 1042;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE = 1043;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONACTIVATE = 1044;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE = 1045;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE = 1047;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN = 1048;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT = 1049;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOVE = 1035;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT = 1036;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOVESTART = 1038;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOVEEND = 1039;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART = 1040;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND = 1041;
		public const uint32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL = 1033;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONHELP = 65546;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONCLICK = -600;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONDBLCLICK = -601;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONKEYPRESS = -603;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONKEYDOWN = -602;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONKEYUP = -604;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT = 65545;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER = 65544;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE = -606;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN = -605;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONMOUSEUP = -607;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONSELECTSTART = 65548;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE = 65553;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGSTART = 65547;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE = 65549;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWEXIT = 65542;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWENTER = 65543;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONLOSECAPTURE = 65554;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONPROPERTYCHANGE = 65555;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONSCROLL = 1014;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONFOCUS = 65537;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONRESIZE = 1016;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAG = 65556;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGEND = 65557;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGENTER = 65558;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGOVER = 65559;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDRAGLEAVE = 65560;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDROP = 65561;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFORECUT = 65565;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONCUT = 65562;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFORECOPY = 65566;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONCOPY = 65563;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREPASTE = 65567;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONPASTE = 65564;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU = 1023;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWSDELETE = 65568;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONROWSINSERTED = 65569;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONCELLCHANGE = 65570;
		public const int32 DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE = -609;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS = 1027;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE = 1030;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONPAGE = 1031;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE = 1047;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOVE = 1035;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT = 1036;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOVESTART = 1038;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOVEEND = 1039;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONRESIZESTART = 1040;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONRESIZEEND = 1041;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER = 1042;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE = 1043;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL = 1033;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONACTIVATE = 1044;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE = 1045;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONFOCUSIN = 1048;
		public const uint32 DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT = 1049;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_STYLE = 1001;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_TABSTOP = 1002;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE = 70735;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB = 1006;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX = 1003;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY = 1004;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE = 1008;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE = 70698;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML = 1009;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK = 1011;
		public const uint32 DISPID_IHTMLELEMENTDEFAULTS_FROZEN = 70734;
		public const uint32 DISPID_IHTCDEFAULTDISPATCH_ELEMENT = 70679;
		public const uint32 DISPID_IHTCDEFAULTDISPATCH_CREATEEVENTOBJECT = 70680;
		public const uint32 DISPID_IHTCDEFAULTDISPATCH_DEFAULTS = 70701;
		public const uint32 DISPID_IHTCDEFAULTDISPATCH_DOCUMENT = 70678;
		public const uint32 DISPID_IHTCPROPERTYBEHAVIOR_FIRECHANGE = 66036;
		public const uint32 DISPID_IHTCPROPERTYBEHAVIOR_VALUE = 70677;
		public const uint32 DISPID_IHTCEVENTBEHAVIOR_FIRE = 66036;
		public const uint32 DISPID_IHTCATTACHBEHAVIOR_FIREEVENT = 0;
		public const uint32 DISPID_IHTCATTACHBEHAVIOR_DETACHEVENT = 66036;
		public const uint32 DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT = 0;
		public const uint32 DISPID_IHTCDESCBEHAVIOR_URN = 66036;
		public const uint32 DISPID_IHTCDESCBEHAVIOR_NAME = 66037;
		public const uint32 DISPID_IHTMLURNCOLLECTION_LENGTH = 1001;
		public const uint32 DISPID_IHTMLURNCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLGENERICELEMENT_RECORDSET = 1001;
		public const uint32 DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET = 1002;
		public const uint32 DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = 1001;
		public const uint32 DISPID_IHTMLSTYLESHEETRULE_STYLE = 65610;
		public const uint32 DISPID_IHTMLSTYLESHEETRULE_READONLY = 1002;
		public const uint32 DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSSPECIFICITY = 1003;
		public const uint32 DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSGETSPECIFICITY = 1004;
		public const uint32 DISPID_IHTMLSTYLESHEETRULE2_IE9_SELECTORTEXT = 1005;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = 1001;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_LENGTH = 1003;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_ITEM = 1002;
		public const uint32 DISPID_IHTMLSTYLESHEETPAGE_SELECTOR = 1001;
		public const uint32 DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS = 1002;
		public const uint32 DISPID_IHTMLSTYLESHEETPAGE2_SELECTORTEXT = 1003;
		public const uint32 DISPID_IHTMLSTYLESHEETPAGE2_STYLE = 65610;
		public const uint32 DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH = 1001;
		public const uint32 DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLSTYLESHEET_TITLE = 1001;
		public const uint32 DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = 1002;
		public const uint32 DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = 1003;
		public const uint32 DISPID_IHTMLSTYLESHEET_DISABLED = 65612;
		public const uint32 DISPID_IHTMLSTYLESHEET_READONLY = 1004;
		public const uint32 DISPID_IHTMLSTYLESHEET_IMPORTS = 1005;
		public const uint32 DISPID_IHTMLSTYLESHEET_HREF = 1006;
		public const uint32 DISPID_IHTMLSTYLESHEET_TYPE = 1007;
		public const uint32 DISPID_IHTMLSTYLESHEET_ID = 1008;
		public const uint32 DISPID_IHTMLSTYLESHEET_ADDIMPORT = 1009;
		public const uint32 DISPID_IHTMLSTYLESHEET_ADDRULE = 1010;
		public const uint32 DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = 1011;
		public const uint32 DISPID_IHTMLSTYLESHEET_REMOVERULE = 1012;
		public const uint32 DISPID_IHTMLSTYLESHEET_MEDIA = 1013;
		public const uint32 DISPID_IHTMLSTYLESHEET_CSSTEXT = 1014;
		public const uint32 DISPID_IHTMLSTYLESHEET_RULES = 1015;
		public const uint32 DISPID_IHTMLSTYLESHEET2_PAGES = 1016;
		public const uint32 DISPID_IHTMLSTYLESHEET2_ADDPAGERULE = 1017;
		public const uint32 DISPID_IHTMLSTYLESHEET3_IE8_HREF = 1150;
		public const uint32 DISPID_IHTMLSTYLESHEET3_ISALTERNATE = 1151;
		public const uint32 DISPID_IHTMLSTYLESHEET3_ISPREFALTERNATE = 1152;
		public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_TYPE = 1153;
		public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_HREF = 1154;
		public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_TITLE = 1155;
		public const uint32 DISPID_IHTMLSTYLESHEET4_OWNERNODE = 1156;
		public const uint32 DISPID_IHTMLSTYLESHEET4_OWNERRULE = 1157;
		public const uint32 DISPID_IHTMLSTYLESHEET4_CSSRULES = 1158;
		public const uint32 DISPID_IHTMLSTYLESHEET4_IE9_MEDIA = 1159;
		public const uint32 DISPID_IHTMLSTYLESHEET4_INSERTRULE = 1160;
		public const uint32 DISPID_IHTMLSTYLESHEET4_DELETERULE = 1161;
		public const uint32 DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = 1001;
		public const int32 DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLSTYLESHEETSCOLLECTION2_IE9_ITEM = 1002;
		public const uint32 DISPID_IHTMLLINKELEMENT_HREF = 1005;
		public const uint32 DISPID_IHTMLLINKELEMENT_REL = 1006;
		public const uint32 DISPID_IHTMLLINKELEMENT_REV = 1007;
		public const uint32 DISPID_IHTMLLINKELEMENT_TYPE = 1008;
		public const uint32 DISPID_IHTMLLINKELEMENT_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLLINKELEMENT_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLLINKELEMENT_ONERROR = 71565;
		public const uint32 DISPID_IHTMLLINKELEMENT_STYLESHEET = 1014;
		public const uint32 DISPID_IHTMLLINKELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLLINKELEMENT_MEDIA = 1016;
		public const uint32 DISPID_IHTMLLINKELEMENT2_TARGET = 1017;
		public const uint32 DISPID_IHTMLLINKELEMENT3_CHARSET = 1018;
		public const uint32 DISPID_IHTMLLINKELEMENT3_HREFLANG = 1019;
		public const uint32 DISPID_IHTMLLINKELEMENT4_IE8_HREF = 1150;
		public const uint32 DISPID_IHTMLLINKELEMENT5_SHEET = 1020;
		public const uint32 DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLLINKELEMENTEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_HTMLLINKELEMENTEVENTS_ONERROR = 1002;
		public const uint32 DISPID_IHTMLTXTRANGE_HTMLTEXT = 1003;
		public const uint32 DISPID_IHTMLTXTRANGE_TEXT = 1004;
		public const uint32 DISPID_IHTMLTXTRANGE_PARENTELEMENT = 1006;
		public const uint32 DISPID_IHTMLTXTRANGE_DUPLICATE = 1008;
		public const uint32 DISPID_IHTMLTXTRANGE_INRANGE = 1010;
		public const uint32 DISPID_IHTMLTXTRANGE_ISEQUAL = 1011;
		public const uint32 DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = 1012;
		public const uint32 DISPID_IHTMLTXTRANGE_COLLAPSE = 1013;
		public const uint32 DISPID_IHTMLTXTRANGE_EXPAND = 1014;
		public const uint32 DISPID_IHTMLTXTRANGE_MOVE = 1015;
		public const uint32 DISPID_IHTMLTXTRANGE_MOVESTART = 1016;
		public const uint32 DISPID_IHTMLTXTRANGE_MOVEEND = 1017;
		public const uint32 DISPID_IHTMLTXTRANGE_SELECT = 1024;
		public const uint32 DISPID_IHTMLTXTRANGE_PASTEHTML = 1026;
		public const uint32 DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = 1001;
		public const uint32 DISPID_IHTMLTXTRANGE_SETENDPOINT = 1025;
		public const uint32 DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = 1018;
		public const uint32 DISPID_IHTMLTXTRANGE_FINDTEXT = 1019;
		public const uint32 DISPID_IHTMLTXTRANGE_MOVETOPOINT = 1020;
		public const uint32 DISPID_IHTMLTXTRANGE_GETBOOKMARK = 1021;
		public const uint32 DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = 1009;
		public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = 1027;
		public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = 1028;
		public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = 1029;
		public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = 1030;
		public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = 1031;
		public const uint32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = 1032;
		public const uint32 DISPID_IHTMLTXTRANGE_EXECCOMMAND = 1033;
		public const uint32 DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = 1034;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = 1035;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = 1036;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = 1037;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = 1038;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = 1039;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = 1040;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS = 1041;
		public const uint32 DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT = 1042;
		public const uint32 DISPID_IHTMLTXTRANGECOLLECTION_LENGTH = 1500;
		public const int32 DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLTXTRANGECOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDOMRANGE_STARTCONTAINER = 1001;
		public const uint32 DISPID_IHTMLDOMRANGE_STARTOFFSET = 1002;
		public const uint32 DISPID_IHTMLDOMRANGE_ENDCONTAINER = 1003;
		public const uint32 DISPID_IHTMLDOMRANGE_ENDOFFSET = 1004;
		public const uint32 DISPID_IHTMLDOMRANGE_COLLAPSED = 1005;
		public const uint32 DISPID_IHTMLDOMRANGE_COMMONANCESTORCONTAINER = 1006;
		public const uint32 DISPID_IHTMLDOMRANGE_SETSTART = 1007;
		public const uint32 DISPID_IHTMLDOMRANGE_SETEND = 1008;
		public const uint32 DISPID_IHTMLDOMRANGE_SETSTARTBEFORE = 1009;
		public const uint32 DISPID_IHTMLDOMRANGE_SETSTARTAFTER = 1010;
		public const uint32 DISPID_IHTMLDOMRANGE_SETENDBEFORE = 1011;
		public const uint32 DISPID_IHTMLDOMRANGE_SETENDAFTER = 1012;
		public const uint32 DISPID_IHTMLDOMRANGE_COLLAPSE = 1013;
		public const uint32 DISPID_IHTMLDOMRANGE_SELECTNODE = 1014;
		public const uint32 DISPID_IHTMLDOMRANGE_SELECTNODECONTENTS = 1015;
		public const uint32 DISPID_IHTMLDOMRANGE_COMPAREBOUNDARYPOINTS = 1016;
		public const uint32 DISPID_IHTMLDOMRANGE_DELETECONTENTS = 1017;
		public const uint32 DISPID_IHTMLDOMRANGE_EXTRACTCONTENTS = 1018;
		public const uint32 DISPID_IHTMLDOMRANGE_CLONECONTENTS = 1019;
		public const uint32 DISPID_IHTMLDOMRANGE_INSERTNODE = 1020;
		public const uint32 DISPID_IHTMLDOMRANGE_SURROUNDCONTENTS = 1021;
		public const uint32 DISPID_IHTMLDOMRANGE_CLONERANGE = 1022;
		public const uint32 DISPID_IHTMLDOMRANGE_TOSTRING = 1023;
		public const uint32 DISPID_IHTMLDOMRANGE_DETACH = 1024;
		public const uint32 DISPID_IHTMLDOMRANGE_GETCLIENTRECTS = 1025;
		public const uint32 DISPID_IHTMLDOMRANGE_GETBOUNDINGCLIENTRECT = 1026;
		public const uint32 DISPID_IHTMLFORMELEMENT_ACTION = 1001;
		public const uint32 DISPID_IHTMLFORMELEMENT_DIR = 70653;
		public const uint32 DISPID_IHTMLFORMELEMENT_ENCODING = 1003;
		public const uint32 DISPID_IHTMLFORMELEMENT_METHOD = 1004;
		public const uint32 DISPID_IHTMLFORMELEMENT_ELEMENTS = 1005;
		public const uint32 DISPID_IHTMLFORMELEMENT_TARGET = 1006;
		public const uint32 DISPID_IHTMLFORMELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLFORMELEMENT_ONSUBMIT = 71547;
		public const uint32 DISPID_IHTMLFORMELEMENT_ONRESET = 71548;
		public const uint32 DISPID_IHTMLFORMELEMENT_SUBMIT = 1009;
		public const uint32 DISPID_IHTMLFORMELEMENT_RESET = 1010;
		public const uint32 DISPID_IHTMLFORMELEMENT_LENGTH = 1500;
		public const int32 DISPID_IHTMLFORMELEMENT__NEWENUM = -4;
		public const uint32 DISPID_IHTMLFORMELEMENT_ITEM = 0;
		public const uint32 DISPID_IHTMLFORMELEMENT_TAGS = 1502;
		public const uint32 DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET = 1011;
		public const uint32 DISPID_IHTMLFORMELEMENT2_URNS = 1505;
		public const uint32 DISPID_IHTMLFORMELEMENT3_NAMEDITEM = 1506;
		public const uint32 DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR = 1012;
		public const uint32 DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR = 1013;
		public const uint32 DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR = 1014;
		public const uint32 DISPID_IHTMLFORMELEMENT4_IE8_ACTION = 1150;
		public const uint32 DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT = 1007;
		public const uint32 DISPID_HTMLFORMELEMENTEVENTS2_ONRESET = 1015;
		public const uint32 DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = 1007;
		public const uint32 DISPID_HTMLFORMELEMENTEVENTS_ONRESET = 1015;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_TABINDEX = 65551;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_FOCUS = 67536;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_ACCESSKEY = 67541;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_ONBLUR = 71551;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_ONFOCUS = 71550;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_ONRESIZE = 71572;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_BLUR = 67538;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_ADDFILTER = 67553;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER = 67554;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT = 67555;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH = 67556;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTTOP = 67557;
		public const uint32 DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT = 67558;
		public const uint32 DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = 1001;
		public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = 1002;
		public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = 1003;
		public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = 1004;
		public const uint32 DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = 1005;
		public const uint32 DISPID_IHTMLTEXTCONTAINER_ONSCROLL = 71567;
		public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE = 1001;
		public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT = 1006;
		public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = 1001;
		public const uint32 DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = 1006;
		public const uint32 DISPID_IHTMLCONTROLRANGE_SELECT = 1002;
		public const uint32 DISPID_IHTMLCONTROLRANGE_ADD = 1003;
		public const uint32 DISPID_IHTMLCONTROLRANGE_REMOVE = 1004;
		public const uint32 DISPID_IHTMLCONTROLRANGE_ITEM = 0;
		public const uint32 DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = 1006;
		public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = 1007;
		public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = 1008;
		public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = 1009;
		public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = 1010;
		public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = 1011;
		public const uint32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = 1012;
		public const uint32 DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = 1013;
		public const uint32 DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = 1014;
		public const uint32 DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = 1015;
		public const uint32 DISPID_IHTMLCONTROLRANGE_LENGTH = 1005;
		public const uint32 DISPID_IHTMLCONTROLRANGE2_ADDELEMENT = 1016;
		public const uint32 DISPID_IHTMLIMGELEMENT_ISMAP = 2002;
		public const uint32 DISPID_IHTMLIMGELEMENT_USEMAP = 2008;
		public const uint32 DISPID_IHTMLIMGELEMENT_MIMETYPE = 2010;
		public const uint32 DISPID_IHTMLIMGELEMENT_FILESIZE = 2011;
		public const uint32 DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = 2012;
		public const uint32 DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = 2013;
		public const uint32 DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = 2014;
		public const uint32 DISPID_IHTMLIMGELEMENT_PROTOCOL = 2015;
		public const uint32 DISPID_IHTMLIMGELEMENT_HREF = 2016;
		public const uint32 DISPID_IHTMLIMGELEMENT_NAMEPROP = 2017;
		public const uint32 DISPID_IHTMLIMGELEMENT_BORDER = 1004;
		public const uint32 DISPID_IHTMLIMGELEMENT_VSPACE = 1005;
		public const uint32 DISPID_IHTMLIMGELEMENT_HSPACE = 1006;
		public const uint32 DISPID_IHTMLIMGELEMENT_ALT = 1002;
		public const uint32 DISPID_IHTMLIMGELEMENT_SRC = 1003;
		public const uint32 DISPID_IHTMLIMGELEMENT_LOWSRC = 1007;
		public const uint32 DISPID_IHTMLIMGELEMENT_VRML = 1008;
		public const uint32 DISPID_IHTMLIMGELEMENT_DYNSRC = 1009;
		public const uint32 DISPID_IHTMLIMGELEMENT_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLIMGELEMENT_COMPLETE = 1010;
		public const uint32 DISPID_IHTMLIMGELEMENT_LOOP = 1011;
		public const uint32 DISPID_IHTMLIMGELEMENT_ALIGN = 65609;
		public const uint32 DISPID_IHTMLIMGELEMENT_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLIMGELEMENT_ONERROR = 71565;
		public const uint32 DISPID_IHTMLIMGELEMENT_ONABORT = 71564;
		public const uint32 DISPID_IHTMLIMGELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLIMGELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLIMGELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLIMGELEMENT_START = 1013;
		public const uint32 DISPID_IHTMLIMGELEMENT2_LONGDESC = 2019;
		public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_LONGDESC = 1151;
		public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_VRML = 1152;
		public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_LOWSRC = 1153;
		public const uint32 DISPID_IHTMLIMGELEMENT3_IE8_DYNSRC = 1154;
		public const uint32 DISPID_IHTMLIMGELEMENT4_NATURALWIDTH = 1155;
		public const uint32 DISPID_IHTMLIMGELEMENT4_NATURALHEIGHT = 1156;
		public const uint32 DISPID_IHTMLMSIMGELEMENT_MSPLAYTODISABLED = 1157;
		public const uint32 DISPID_IHTMLMSIMGELEMENT_MSPLAYTOPRIMARY = 1158;
		public const uint32 DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = 0;
		public const uint32 DISPID_HTMLIMGEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLIMGEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLIMGEVENTS2_ONABORT = 1000;
		public const uint32 DISPID_HTMLIMGEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_HTMLIMGEVENTS_ONERROR = 1002;
		public const uint32 DISPID_HTMLIMGEVENTS_ONABORT = 1000;
		public const uint32 DISPID_IHTMLBODYELEMENT_BACKGROUND = 70537;
		public const uint32 DISPID_IHTMLBODYELEMENT_BGPROPERTIES = 70581;
		public const uint32 DISPID_IHTMLBODYELEMENT_LEFTMARGIN = 70576;
		public const uint32 DISPID_IHTMLBODYELEMENT_TOPMARGIN = 70573;
		public const uint32 DISPID_IHTMLBODYELEMENT_RIGHTMARGIN = 70574;
		public const uint32 DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN = 70575;
		public const uint32 DISPID_IHTMLBODYELEMENT_NOWRAP = 70541;
		public const int32 DISPID_IHTMLBODYELEMENT_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLBODYELEMENT_TEXT = 70538;
		public const uint32 DISPID_IHTMLBODYELEMENT_LINK = 2010;
		public const uint32 DISPID_IHTMLBODYELEMENT_VLINK = 2012;
		public const uint32 DISPID_IHTMLBODYELEMENT_ALINK = 2011;
		public const uint32 DISPID_IHTMLBODYELEMENT_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLBODYELEMENT_ONUNLOAD = 71569;
		public const uint32 DISPID_IHTMLBODYELEMENT_SCROLL = 70615;
		public const uint32 DISPID_IHTMLBODYELEMENT_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD = 71575;
		public const uint32 DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = 2013;
		public const uint32 DISPID_IHTMLBODYELEMENT2_ONBEFOREPRINT = 71602;
		public const uint32 DISPID_IHTMLBODYELEMENT2_ONAFTERPRINT = 71603;
		public const uint32 DISPID_IHTMLBODYELEMENT3_IE8_BACKGROUND = 1150;
		public const uint32 DISPID_IHTMLBODYELEMENT3_ONONLINE = 71643;
		public const uint32 DISPID_IHTMLBODYELEMENT3_ONOFFLINE = 71644;
		public const uint32 DISPID_IHTMLBODYELEMENT3_ONHASHCHANGE = 71645;
		public const uint32 DISPID_IHTMLBODYELEMENT4_ONMESSAGE = 71646;
		public const uint32 DISPID_IHTMLBODYELEMENT4_ONSTORAGE = 71636;
		public const uint32 DISPID_IHTMLBODYELEMENT5_ONPOPSTATE = 71728;
		public const uint32 DISPID_IHTMLFONTELEMENT_COLOR = 70538;
		public const uint32 DISPID_IHTMLFONTELEMENT_FACE = 70554;
		public const uint32 DISPID_IHTMLFONTELEMENT_SIZE = 70555;
		public const uint32 DISPID_IHTMLANCHORELEMENT_HREF = 0;
		public const uint32 DISPID_IHTMLANCHORELEMENT_TARGET = 1003;
		public const uint32 DISPID_IHTMLANCHORELEMENT_REL = 1005;
		public const uint32 DISPID_IHTMLANCHORELEMENT_REV = 1006;
		public const uint32 DISPID_IHTMLANCHORELEMENT_URN = 1007;
		public const uint32 DISPID_IHTMLANCHORELEMENT_METHODS = 1008;
		public const uint32 DISPID_IHTMLANCHORELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLANCHORELEMENT_HOST = 1012;
		public const uint32 DISPID_IHTMLANCHORELEMENT_HOSTNAME = 1013;
		public const uint32 DISPID_IHTMLANCHORELEMENT_PATHNAME = 1014;
		public const uint32 DISPID_IHTMLANCHORELEMENT_PORT = 1015;
		public const uint32 DISPID_IHTMLANCHORELEMENT_PROTOCOL = 1016;
		public const uint32 DISPID_IHTMLANCHORELEMENT_SEARCH = 1017;
		public const uint32 DISPID_IHTMLANCHORELEMENT_HASH = 1018;
		public const uint32 DISPID_IHTMLANCHORELEMENT_ONBLUR = 71551;
		public const uint32 DISPID_IHTMLANCHORELEMENT_ONFOCUS = 71550;
		public const uint32 DISPID_IHTMLANCHORELEMENT_ACCESSKEY = 67541;
		public const uint32 DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = 1031;
		public const uint32 DISPID_IHTMLANCHORELEMENT_MIMETYPE = 1030;
		public const uint32 DISPID_IHTMLANCHORELEMENT_NAMEPROP = 1032;
		public const uint32 DISPID_IHTMLANCHORELEMENT_TABINDEX = 65551;
		public const uint32 DISPID_IHTMLANCHORELEMENT_FOCUS = 67536;
		public const uint32 DISPID_IHTMLANCHORELEMENT_BLUR = 67538;
		public const uint32 DISPID_IHTMLANCHORELEMENT2_CHARSET = 1023;
		public const uint32 DISPID_IHTMLANCHORELEMENT2_COORDS = 1024;
		public const uint32 DISPID_IHTMLANCHORELEMENT2_HREFLANG = 1025;
		public const uint32 DISPID_IHTMLANCHORELEMENT2_SHAPE = 1026;
		public const uint32 DISPID_IHTMLANCHORELEMENT2_TYPE = 1027;
		public const uint32 DISPID_IHTMLANCHORELEMENT3_IE8_SHAPE = 1151;
		public const uint32 DISPID_IHTMLANCHORELEMENT3_IE8_COORDS = 1152;
		public const uint32 DISPID_IHTMLANCHORELEMENT3_IE8_HREF = 1153;
		public const uint32 DISPID_IHTMLLABELELEMENT_HTMLFOR = 1000;
		public const uint32 DISPID_IHTMLLABELELEMENT_ACCESSKEY = 67541;
		public const uint32 DISPID_IHTMLLABELELEMENT2_FORM = 1002;
		public const uint32 DISPID_IHTMLLISTELEMENT2_COMPACT = 1001;
		public const uint32 DISPID_IHTMLULISTELEMENT_COMPACT = 1001;
		public const uint32 DISPID_IHTMLULISTELEMENT_TYPE = 70553;
		public const uint32 DISPID_IHTMLOLISTELEMENT_COMPACT = 1001;
		public const uint32 DISPID_IHTMLOLISTELEMENT_START = 1003;
		public const uint32 DISPID_IHTMLOLISTELEMENT_TYPE = 70553;
		public const uint32 DISPID_IHTMLLIELEMENT_TYPE = 70553;
		public const uint32 DISPID_IHTMLLIELEMENT_VALUE = 1001;
		public const uint32 DISPID_IHTMLBLOCKELEMENT_CLEAR = 70552;
		public const uint32 DISPID_IHTMLBLOCKELEMENT2_CITE = 1001;
		public const uint32 DISPID_IHTMLBLOCKELEMENT2_WIDTH = 1002;
		public const uint32 DISPID_IHTMLBLOCKELEMENT3_IE8_CITE = 1150;
		public const uint32 DISPID_IHTMLDIVELEMENT_ALIGN = 65608;
		public const uint32 DISPID_IHTMLDIVELEMENT_NOWRAP = 70541;
		public const uint32 DISPID_IHTMLDDELEMENT_NOWRAP = 70541;
		public const uint32 DISPID_IHTMLDTELEMENT_NOWRAP = 70541;
		public const uint32 DISPID_IHTMLBRELEMENT_CLEAR = 70552;
		public const uint32 DISPID_IHTMLDLISTELEMENT_COMPACT = 1001;
		public const uint32 DISPID_IHTMLHRELEMENT_ALIGN = 65608;
		public const uint32 DISPID_IHTMLHRELEMENT_COLOR = 70538;
		public const uint32 DISPID_IHTMLHRELEMENT_NOSHADE = 1001;
		public const uint32 DISPID_IHTMLHRELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLHRELEMENT_SIZE = 65542;
		public const uint32 DISPID_IHTMLPARAELEMENT_ALIGN = 65608;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = 1501;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION_LENGTH = 1500;
		public const int32 DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION_TAGS = 1502;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION2_URNS = 1505;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM = 1506;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_LENGTH = 1150;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_ITEM = 1152;
		public const uint32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_NAMEDITEM = 1153;
		public const uint32 DISPID_IHTMLHEADERELEMENT_ALIGN = 65608;
		public const uint32 DISPID_IHTMLSELECTELEMENT_SIZE = 1002;
		public const uint32 DISPID_IHTMLSELECTELEMENT_MULTIPLE = 1003;
		public const uint32 DISPID_IHTMLSELECTELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLSELECTELEMENT_OPTIONS = 1005;
		public const uint32 DISPID_IHTMLSELECTELEMENT_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = 1010;
		public const uint32 DISPID_IHTMLSELECTELEMENT_TYPE = 1012;
		public const uint32 DISPID_IHTMLSELECTELEMENT_VALUE = 1011;
		public const uint32 DISPID_IHTMLSELECTELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLSELECTELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLSELECTELEMENT_ADD = 1503;
		public const uint32 DISPID_IHTMLSELECTELEMENT_REMOVE = 1504;
		public const uint32 DISPID_IHTMLSELECTELEMENT_LENGTH = 1500;
		public const int32 DISPID_IHTMLSELECTELEMENT__NEWENUM = -4;
		public const uint32 DISPID_IHTMLSELECTELEMENT_ITEM = 0;
		public const uint32 DISPID_IHTMLSELECTELEMENT_TAGS = 1502;
		public const uint32 DISPID_IHTMLSELECTELEMENT2_URNS = 1505;
		public const uint32 DISPID_IHTMLSELECTELEMENT4_NAMEDITEM = 1506;
		public const uint32 DISPID_IHTMLSELECTELEMENT5_IE8_ADD = 1150;
		public const uint32 DISPID_IHTMLSELECTELEMENT6_IE9_ADD = 1151;
		public const uint32 DISPID_IHTMLSELECTELEMENT6_IE9_VALUE = 1152;
		public const uint32 DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE = 1001;
		public const uint32 DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = 1001;
		public const uint32 DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = 1001;
		public const uint32 DISPID_IHTMLSELECTIONOBJECT_EMPTY = 1002;
		public const uint32 DISPID_IHTMLSELECTIONOBJECT_CLEAR = 1003;
		public const uint32 DISPID_IHTMLSELECTIONOBJECT_TYPE = 1004;
		public const uint32 DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION = 1005;
		public const uint32 DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL = 1006;
		public const uint32 DISPID_IHTMLSELECTION_ANCHORNODE = 1001;
		public const uint32 DISPID_IHTMLSELECTION_ANCHOROFFSET = 1002;
		public const uint32 DISPID_IHTMLSELECTION_FOCUSNODE = 1003;
		public const uint32 DISPID_IHTMLSELECTION_FOCUSOFFSET = 1004;
		public const uint32 DISPID_IHTMLSELECTION_ISCOLLAPSED = 1005;
		public const uint32 DISPID_IHTMLSELECTION_COLLAPSE = 1006;
		public const uint32 DISPID_IHTMLSELECTION_COLLAPSETOSTART = 1007;
		public const uint32 DISPID_IHTMLSELECTION_COLLAPSETOEND = 1008;
		public const uint32 DISPID_IHTMLSELECTION_SELECTALLCHILDREN = 1009;
		public const uint32 DISPID_IHTMLSELECTION_DELETEFROMDOCUMENT = 1010;
		public const uint32 DISPID_IHTMLSELECTION_RANGECOUNT = 1011;
		public const uint32 DISPID_IHTMLSELECTION_GETRANGEAT = 1012;
		public const uint32 DISPID_IHTMLSELECTION_ADDRANGE = 1013;
		public const uint32 DISPID_IHTMLSELECTION_REMOVERANGE = 1014;
		public const uint32 DISPID_IHTMLSELECTION_REMOVEALLRANGES = 1015;
		public const uint32 DISPID_IHTMLSELECTION_TOSTRING = 1016;
		public const uint32 DISPID_IHTMLOPTIONELEMENT_SELECTED = 1001;
		public const uint32 DISPID_IHTMLOPTIONELEMENT_VALUE = 1002;
		public const uint32 DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = 1003;
		public const uint32 DISPID_IHTMLOPTIONELEMENT_INDEX = 1005;
		public const uint32 DISPID_IHTMLOPTIONELEMENT_TEXT = 1004;
		public const uint32 DISPID_IHTMLOPTIONELEMENT_FORM = 1006;
		public const uint32 DISPID_IHTMLOPTIONELEMENT3_LABEL = 1007;
		public const uint32 DISPID_IHTMLOPTIONELEMENT4_IE9_VALUE = 1008;
		public const uint32 DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = 0;
		public const uint32 DISPID_IHTMLINPUTELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLINPUTELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTELEMENT_STATUS = 2001;
		public const uint32 DISPID_IHTMLINPUTELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLINPUTELEMENT_SIZE = 2002;
		public const uint32 DISPID_IHTMLINPUTELEMENT_MAXLENGTH = 2003;
		public const uint32 DISPID_IHTMLINPUTELEMENT_SELECT = 2004;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLINPUTELEMENT_DEFAULTVALUE = 70619;
		public const uint32 DISPID_IHTMLINPUTELEMENT_READONLY = 2005;
		public const uint32 DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE = 2006;
		public const uint32 DISPID_IHTMLINPUTELEMENT_INDETERMINATE = 2007;
		public const uint32 DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED = 2008;
		public const uint32 DISPID_IHTMLINPUTELEMENT_CHECKED = 2009;
		public const uint32 DISPID_IHTMLINPUTELEMENT_BORDER = 2012;
		public const uint32 DISPID_IHTMLINPUTELEMENT_VSPACE = 2013;
		public const uint32 DISPID_IHTMLINPUTELEMENT_HSPACE = 2014;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ALT = 2010;
		public const uint32 DISPID_IHTMLINPUTELEMENT_SRC = 2011;
		public const uint32 DISPID_IHTMLINPUTELEMENT_LOWSRC = 2015;
		public const uint32 DISPID_IHTMLINPUTELEMENT_VRML = 2016;
		public const uint32 DISPID_IHTMLINPUTELEMENT_DYNSRC = 2017;
		public const uint32 DISPID_IHTMLINPUTELEMENT_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLINPUTELEMENT_COMPLETE = 2018;
		public const uint32 DISPID_IHTMLINPUTELEMENT_LOOP = 2019;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ALIGN = 65609;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ONERROR = 71565;
		public const uint32 DISPID_IHTMLINPUTELEMENT_ONABORT = 71564;
		public const uint32 DISPID_IHTMLINPUTELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLINPUTELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLINPUTELEMENT_START = 2020;
		public const uint32 DISPID_IHTMLINPUTELEMENT2_ACCEPT = 2022;
		public const uint32 DISPID_IHTMLINPUTELEMENT2_USEMAP = 2023;
		public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_SRC = 1150;
		public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_LOWSRC = 1151;
		public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_VRML = 1152;
		public const uint32 DISPID_IHTMLINPUTELEMENT3_IE8_DYNSRC = 1153;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = 2021;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = 2006;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = 2021;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = 2006;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_STATUS = 2021;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE = 70619;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_SIZE = 2002;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = 2003;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_SELECT = 2004;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_READONLY = 2005;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = 2006;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONSTART = 2025;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONEND = 2026;
		public const uint32 DISPID_IHTMLINPUTTEXTELEMENT2_SETSELECTIONRANGE = 2027;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_STATUS = 2021;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_SIZE = 2002;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = 2003;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_SELECT = 2004;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLINPUTFILEELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = 2009;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = 2008;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = 2001;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = 2007;
		public const uint32 DISPID_IHTMLOPTIONBUTTONELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLINPUTIMAGE_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTIMAGE_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTIMAGE_BORDER = 2012;
		public const uint32 DISPID_IHTMLINPUTIMAGE_VSPACE = 2013;
		public const uint32 DISPID_IHTMLINPUTIMAGE_HSPACE = 2014;
		public const uint32 DISPID_IHTMLINPUTIMAGE_ALT = 2010;
		public const uint32 DISPID_IHTMLINPUTIMAGE_SRC = 2011;
		public const uint32 DISPID_IHTMLINPUTIMAGE_LOWSRC = 2015;
		public const uint32 DISPID_IHTMLINPUTIMAGE_VRML = 2016;
		public const uint32 DISPID_IHTMLINPUTIMAGE_DYNSRC = 2017;
		public const uint32 DISPID_IHTMLINPUTIMAGE_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLINPUTIMAGE_COMPLETE = 2018;
		public const uint32 DISPID_IHTMLINPUTIMAGE_LOOP = 2019;
		public const uint32 DISPID_IHTMLINPUTIMAGE_ALIGN = 65609;
		public const uint32 DISPID_IHTMLINPUTIMAGE_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLINPUTIMAGE_ONERROR = 71565;
		public const uint32 DISPID_IHTMLINPUTIMAGE_ONABORT = 71564;
		public const uint32 DISPID_IHTMLINPUTIMAGE_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTIMAGE_WIDTH = 65541;
		public const uint32 DISPID_IHTMLINPUTIMAGE_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLINPUTIMAGE_START = 2020;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_ALT = 2010;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_MIN = 2028;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_MAX = 2029;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_STEP = 2030;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_VALUEASNUMBER = 2031;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_STEPUP = 2033;
		public const uint32 DISPID_IHTMLINPUTRANGEELEMENT_STEPDOWN = 2032;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE = 1001;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT = 1006;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT = 1000;
		public const uint32 DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT = 1000;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = 1001;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = 1006;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR = 1002;
		public const uint32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT = 1000;
		public const uint32 DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_HTMLINPUTIMAGEEVENTS_ONERROR = 1002;
		public const uint32 DISPID_HTMLINPUTIMAGEEVENTS_ONABORT = 1000;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_STATUS = 2001;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE = 70619;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_SELECT = 7005;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_READONLY = 7004;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_ROWS = 7001;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_COLS = 7002;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_WRAP = 7003;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = 7006;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONSTART = 7007;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONEND = 7008;
		public const uint32 DISPID_IHTMLTEXTAREAELEMENT2_SETSELECTIONRANGE = 7009;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_TYPE = 2000;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_VALUE = 70637;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_STATUS = 8001;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = 8002;
		public const uint32 DISPID_IHTMLBUTTONELEMENT2_IE9_TYPE = 8003;
		public const int32 DISPID_IHTMLMARQUEEELEMENT_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = 6000;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_DIRECTION = 6001;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = 6002;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = 6003;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_LOOP = 6004;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_VSPACE = 6005;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_HSPACE = 6006;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_ONFINISH = 71562;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_ONSTART = 71563;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE = 71556;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = 6007;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_START = 6010;
		public const uint32 DISPID_IHTMLMARQUEEELEMENT_STOP = 6011;
		public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE = 1009;
		public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH = 1010;
		public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART = 1011;
		public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = 1009;
		public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = 1010;
		public const uint32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = 1011;
		public const uint32 DISPID_IHTMLHTMLELEMENT_VERSION = 1001;
		public const uint32 DISPID_IHTMLHEADELEMENT_PROFILE = 1001;
		public const uint32 DISPID_IHTMLHEADELEMENT2_IE8_PROFILE = 1150;
		public const uint32 DISPID_IHTMLTITLEELEMENT_TEXT = 70637;
		public const uint32 DISPID_IHTMLMETAELEMENT_HTTPEQUIV = 1001;
		public const uint32 DISPID_IHTMLMETAELEMENT_CONTENT = 1002;
		public const uint32 DISPID_IHTMLMETAELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLMETAELEMENT_URL = 1003;
		public const uint32 DISPID_IHTMLMETAELEMENT_CHARSET = 1013;
		public const uint32 DISPID_IHTMLMETAELEMENT2_SCHEME = 1020;
		public const uint32 DISPID_IHTMLMETAELEMENT3_IE8_URL = 1150;
		public const uint32 DISPID_IHTMLBASEELEMENT_HREF = 1003;
		public const uint32 DISPID_IHTMLBASEELEMENT_TARGET = 1004;
		public const uint32 DISPID_IHTMLBASEELEMENT2_IE8_HREF = 1150;
		public const uint32 DISPID_IHTMLISINDEXELEMENT_PROMPT = 1010;
		public const uint32 DISPID_IHTMLISINDEXELEMENT_ACTION = 1011;
		public const uint32 DISPID_IHTMLISINDEXELEMENT2_FORM = 1012;
		public const uint32 DISPID_IHTMLNEXTIDELEMENT_N = 1012;
		public const uint32 DISPID_IHTMLBASEFONTELEMENT_COLOR = 70538;
		public const uint32 DISPID_IHTMLBASEFONTELEMENT_FACE = 70554;
		public const uint32 DISPID_IHTMLBASEFONTELEMENT_SIZE = 70562;
		public const uint32 DISPID_IOMHISTORY_LENGTH = 1;
		public const uint32 DISPID_IOMHISTORY_BACK = 2;
		public const uint32 DISPID_IOMHISTORY_FORWARD = 3;
		public const uint32 DISPID_IOMHISTORY_GO = 4;
		public const uint32 DISPID_IHTMLOPSPROFILE_ADDREQUEST = 1;
		public const uint32 DISPID_IHTMLOPSPROFILE_CLEARREQUEST = 2;
		public const uint32 DISPID_IHTMLOPSPROFILE_DOREQUEST = 3;
		public const uint32 DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = 4;
		public const uint32 DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = 5;
		public const uint32 DISPID_IHTMLOPSPROFILE_COMMITCHANGES = 6;
		public const uint32 DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = 7;
		public const uint32 DISPID_IHTMLOPSPROFILE_DOREADREQUEST = 8;
		public const uint32 DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = 9;
		public const uint32 DISPID_IOMNAVIGATOR_APPCODENAME = 1;
		public const uint32 DISPID_IOMNAVIGATOR_APPNAME = 2;
		public const uint32 DISPID_IOMNAVIGATOR_APPVERSION = 3;
		public const uint32 DISPID_IOMNAVIGATOR_USERAGENT = 4;
		public const uint32 DISPID_IOMNAVIGATOR_JAVAENABLED = 5;
		public const uint32 DISPID_IOMNAVIGATOR_TAINTENABLED = 6;
		public const uint32 DISPID_IOMNAVIGATOR_MIMETYPES = 7;
		public const uint32 DISPID_IOMNAVIGATOR_PLUGINS = 8;
		public const uint32 DISPID_IOMNAVIGATOR_COOKIEENABLED = 9;
		public const uint32 DISPID_IOMNAVIGATOR_OPSPROFILE = 10;
		public const uint32 DISPID_IOMNAVIGATOR_TOSTRING = 11;
		public const uint32 DISPID_IOMNAVIGATOR_CPUCLASS = 12;
		public const uint32 DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = 13;
		public const uint32 DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = 14;
		public const uint32 DISPID_IOMNAVIGATOR_USERLANGUAGE = 15;
		public const uint32 DISPID_IOMNAVIGATOR_PLATFORM = 16;
		public const uint32 DISPID_IOMNAVIGATOR_APPMINORVERSION = 17;
		public const uint32 DISPID_IOMNAVIGATOR_CONNECTIONSPEED = 18;
		public const uint32 DISPID_IOMNAVIGATOR_ONLINE = 19;
		public const uint32 DISPID_IOMNAVIGATOR_USERPROFILE = 20;
		public const uint32 DISPID_INAVIGATORGEOLOCATION_GEOLOCATION = 21;
		public const uint32 DISPID_INAVIGATORDONOTTRACK_MSDONOTTRACK = 22;
		public const uint32 DISPID_IHTMLLOCATION_HREF = 0;
		public const uint32 DISPID_IHTMLLOCATION_PROTOCOL = 1;
		public const uint32 DISPID_IHTMLLOCATION_HOST = 2;
		public const uint32 DISPID_IHTMLLOCATION_HOSTNAME = 3;
		public const uint32 DISPID_IHTMLLOCATION_PORT = 4;
		public const uint32 DISPID_IHTMLLOCATION_PATHNAME = 5;
		public const uint32 DISPID_IHTMLLOCATION_SEARCH = 6;
		public const uint32 DISPID_IHTMLLOCATION_HASH = 7;
		public const uint32 DISPID_IHTMLLOCATION_RELOAD = 8;
		public const uint32 DISPID_IHTMLLOCATION_REPLACE = 9;
		public const uint32 DISPID_IHTMLLOCATION_ASSIGN = 10;
		public const uint32 DISPID_IHTMLLOCATION_TOSTRING = 11;
		public const uint32 DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = 1;
		public const uint32 DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = 1;
		public const uint32 DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = 2;
		public const uint32 DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH = 1501;
		public const int32 DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLBOOKMARKCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDATATRANSFER_SETDATA = 1001;
		public const uint32 DISPID_IHTMLDATATRANSFER_GETDATA = 1002;
		public const uint32 DISPID_IHTMLDATATRANSFER_CLEARDATA = 1003;
		public const uint32 DISPID_IHTMLDATATRANSFER_DROPEFFECT = 1004;
		public const uint32 DISPID_IHTMLDATATRANSFER_EFFECTALLOWED = 1005;
		public const uint32 DISPID_IHTMLEVENTOBJ_SRCELEMENT = 1001;
		public const uint32 DISPID_IHTMLEVENTOBJ_ALTKEY = 1002;
		public const uint32 DISPID_IHTMLEVENTOBJ_CTRLKEY = 1003;
		public const uint32 DISPID_IHTMLEVENTOBJ_SHIFTKEY = 1004;
		public const uint32 DISPID_IHTMLEVENTOBJ_RETURNVALUE = 1007;
		public const uint32 DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = 1008;
		public const uint32 DISPID_IHTMLEVENTOBJ_FROMELEMENT = 1009;
		public const uint32 DISPID_IHTMLEVENTOBJ_TOELEMENT = 1010;
		public const uint32 DISPID_IHTMLEVENTOBJ_KEYCODE = 1011;
		public const uint32 DISPID_IHTMLEVENTOBJ_BUTTON = 1012;
		public const uint32 DISPID_IHTMLEVENTOBJ_TYPE = 1013;
		public const uint32 DISPID_IHTMLEVENTOBJ_QUALIFIER = 1014;
		public const uint32 DISPID_IHTMLEVENTOBJ_REASON = 1015;
		public const uint32 DISPID_IHTMLEVENTOBJ_X = 1005;
		public const uint32 DISPID_IHTMLEVENTOBJ_Y = 1006;
		public const uint32 DISPID_IHTMLEVENTOBJ_CLIENTX = 1020;
		public const uint32 DISPID_IHTMLEVENTOBJ_CLIENTY = 1021;
		public const uint32 DISPID_IHTMLEVENTOBJ_OFFSETX = 1022;
		public const uint32 DISPID_IHTMLEVENTOBJ_OFFSETY = 1023;
		public const uint32 DISPID_IHTMLEVENTOBJ_SCREENX = 1024;
		public const uint32 DISPID_IHTMLEVENTOBJ_SCREENY = 1025;
		public const uint32 DISPID_IHTMLEVENTOBJ_SRCFILTER = 1026;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SETATTRIBUTE = 66037;
		public const uint32 DISPID_IHTMLEVENTOBJ2_GETATTRIBUTE = 66038;
		public const uint32 DISPID_IHTMLEVENTOBJ2_REMOVEATTRIBUTE = 66039;
		public const uint32 DISPID_IHTMLEVENTOBJ2_PROPERTYNAME = 1027;
		public const uint32 DISPID_IHTMLEVENTOBJ2_BOOKMARKS = 1031;
		public const uint32 DISPID_IHTMLEVENTOBJ2_RECORDSET = 1032;
		public const uint32 DISPID_IHTMLEVENTOBJ2_DATAFLD = 1033;
		public const uint32 DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS = 1034;
		public const uint32 DISPID_IHTMLEVENTOBJ2_REPEAT = 1035;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SRCURN = 1036;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SRCELEMENT = 1001;
		public const uint32 DISPID_IHTMLEVENTOBJ2_ALTKEY = 1002;
		public const uint32 DISPID_IHTMLEVENTOBJ2_CTRLKEY = 1003;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SHIFTKEY = 1004;
		public const uint32 DISPID_IHTMLEVENTOBJ2_FROMELEMENT = 1009;
		public const uint32 DISPID_IHTMLEVENTOBJ2_TOELEMENT = 1010;
		public const uint32 DISPID_IHTMLEVENTOBJ2_BUTTON = 1012;
		public const uint32 DISPID_IHTMLEVENTOBJ2_TYPE = 1013;
		public const uint32 DISPID_IHTMLEVENTOBJ2_QUALIFIER = 1014;
		public const uint32 DISPID_IHTMLEVENTOBJ2_REASON = 1015;
		public const uint32 DISPID_IHTMLEVENTOBJ2_X = 1005;
		public const uint32 DISPID_IHTMLEVENTOBJ2_Y = 1006;
		public const uint32 DISPID_IHTMLEVENTOBJ2_CLIENTX = 1020;
		public const uint32 DISPID_IHTMLEVENTOBJ2_CLIENTY = 1021;
		public const uint32 DISPID_IHTMLEVENTOBJ2_OFFSETX = 1022;
		public const uint32 DISPID_IHTMLEVENTOBJ2_OFFSETY = 1023;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SCREENX = 1024;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SCREENY = 1025;
		public const uint32 DISPID_IHTMLEVENTOBJ2_SRCFILTER = 1026;
		public const uint32 DISPID_IHTMLEVENTOBJ2_DATATRANSFER = 1037;
		public const uint32 DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW = 1038;
		public const uint32 DISPID_IHTMLEVENTOBJ3_SHIFTLEFT = 1039;
		public const uint32 DISPID_IHTMLEVENTOBJ3_ALTLEFT = 1040;
		public const uint32 DISPID_IHTMLEVENTOBJ3_CTRLLEFT = 1041;
		public const uint32 DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE = 1042;
		public const uint32 DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND = 1043;
		public const uint32 DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA = 1044;
		public const uint32 DISPID_IHTMLEVENTOBJ3_IMEREQUEST = 1046;
		public const uint32 DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA = 1047;
		public const uint32 DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT = 1045;
		public const uint32 DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE = 1048;
		public const uint32 DISPID_IHTMLEVENTOBJ3_BEHAVIORPART = 1049;
		public const uint32 DISPID_IHTMLEVENTOBJ3_NEXTPAGE = 1050;
		public const uint32 DISPID_IHTMLEVENTOBJ4_WHEELDELTA = 1051;
		public const uint32 DISPID_IHTMLEVENTOBJ5_URL = 1052;
		public const uint32 DISPID_IHTMLEVENTOBJ5_DATA = 1054;
		public const uint32 DISPID_IHTMLEVENTOBJ5_SOURCE = 1055;
		public const uint32 DISPID_IHTMLEVENTOBJ5_ORIGIN = 1053;
		public const uint32 DISPID_IHTMLEVENTOBJ5_ISSESSION = 1056;
		public const uint32 DISPID_IHTMLEVENTOBJ6_ACTIONURL = 1058;
		public const uint32 DISPID_IHTMLEVENTOBJ6_BUTTONID = 1057;
		public const uint32 DISPID_IHTMLSTYLEMEDIA_TYPE = 1001;
		public const uint32 DISPID_IHTMLSTYLEMEDIA_MATCHMEDIUM = 1002;
		public const uint32 DISPID_IHTMLFRAMESCOLLECTION2_ITEM = 0;
		public const uint32 DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = 1001;
		public const uint32 DISPID_IHTMLSCREEN_COLORDEPTH = 1001;
		public const uint32 DISPID_IHTMLSCREEN_BUFFERDEPTH = 1002;
		public const uint32 DISPID_IHTMLSCREEN_WIDTH = 1003;
		public const uint32 DISPID_IHTMLSCREEN_HEIGHT = 1004;
		public const uint32 DISPID_IHTMLSCREEN_UPDATEINTERVAL = 1005;
		public const uint32 DISPID_IHTMLSCREEN_AVAILHEIGHT = 1006;
		public const uint32 DISPID_IHTMLSCREEN_AVAILWIDTH = 1007;
		public const uint32 DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = 1008;
		public const uint32 DISPID_IHTMLSCREEN2_LOGICALXDPI = 1009;
		public const uint32 DISPID_IHTMLSCREEN2_LOGICALYDPI = 1010;
		public const uint32 DISPID_IHTMLSCREEN2_DEVICEXDPI = 1011;
		public const uint32 DISPID_IHTMLSCREEN2_DEVICEYDPI = 1012;
		public const uint32 DISPID_IHTMLSCREEN3_SYSTEMXDPI = 1013;
		public const uint32 DISPID_IHTMLSCREEN3_SYSTEMYDPI = 1014;
		public const uint32 DISPID_IHTMLSCREEN4_PIXELDEPTH = 1015;
		public const uint32 DISPID_IHTMLWINDOW2_FRAMES = 1100;
		public const uint32 DISPID_IHTMLWINDOW2_DEFAULTSTATUS = 1101;
		public const uint32 DISPID_IHTMLWINDOW2_STATUS = 1102;
		public const uint32 DISPID_IHTMLWINDOW2_SETTIMEOUT = 1172;
		public const uint32 DISPID_IHTMLWINDOW2_CLEARTIMEOUT = 1104;
		public const uint32 DISPID_IHTMLWINDOW2_ALERT = 1105;
		public const uint32 DISPID_IHTMLWINDOW2_CONFIRM = 1110;
		public const uint32 DISPID_IHTMLWINDOW2_PROMPT = 1111;
		public const uint32 DISPID_IHTMLWINDOW2_IMAGE = 1125;
		public const uint32 DISPID_IHTMLWINDOW2_LOCATION = 14;
		public const uint32 DISPID_IHTMLWINDOW2_HISTORY = 2;
		public const uint32 DISPID_IHTMLWINDOW2_CLOSE = 3;
		public const uint32 DISPID_IHTMLWINDOW2_OPENER = 4;
		public const uint32 DISPID_IHTMLWINDOW2_NAVIGATOR = 5;
		public const uint32 DISPID_IHTMLWINDOW2_NAME = 11;
		public const uint32 DISPID_IHTMLWINDOW2_PARENT = 12;
		public const uint32 DISPID_IHTMLWINDOW2_OPEN = 13;
		public const uint32 DISPID_IHTMLWINDOW2_SELF = 20;
		public const uint32 DISPID_IHTMLWINDOW2_TOP = 21;
		public const uint32 DISPID_IHTMLWINDOW2_WINDOW = 22;
		public const uint32 DISPID_IHTMLWINDOW2_NAVIGATE = 25;
		public const uint32 DISPID_IHTMLWINDOW2_ONFOCUS = 71550;
		public const uint32 DISPID_IHTMLWINDOW2_ONBLUR = 71551;
		public const uint32 DISPID_IHTMLWINDOW2_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD = 71575;
		public const uint32 DISPID_IHTMLWINDOW2_ONUNLOAD = 71569;
		public const uint32 DISPID_IHTMLWINDOW2_ONHELP = 71549;
		public const uint32 DISPID_IHTMLWINDOW2_ONERROR = 71565;
		public const uint32 DISPID_IHTMLWINDOW2_ONRESIZE = 71572;
		public const uint32 DISPID_IHTMLWINDOW2_ONSCROLL = 71567;
		public const uint32 DISPID_IHTMLWINDOW2_DOCUMENT = 1151;
		public const uint32 DISPID_IHTMLWINDOW2_EVENT = 1152;
		public const uint32 DISPID_IHTMLWINDOW2__NEWENUM = 1153;
		public const uint32 DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = 1154;
		public const uint32 DISPID_IHTMLWINDOW2_SHOWHELP = 1155;
		public const uint32 DISPID_IHTMLWINDOW2_SCREEN = 1156;
		public const uint32 DISPID_IHTMLWINDOW2_OPTION = 1157;
		public const uint32 DISPID_IHTMLWINDOW2_FOCUS = 1158;
		public const uint32 DISPID_IHTMLWINDOW2_CLOSED = 23;
		public const uint32 DISPID_IHTMLWINDOW2_BLUR = 1159;
		public const uint32 DISPID_IHTMLWINDOW2_SCROLL = 1160;
		public const uint32 DISPID_IHTMLWINDOW2_CLIENTINFORMATION = 1161;
		public const uint32 DISPID_IHTMLWINDOW2_SETINTERVAL = 1173;
		public const uint32 DISPID_IHTMLWINDOW2_CLEARINTERVAL = 1163;
		public const uint32 DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = 1164;
		public const uint32 DISPID_IHTMLWINDOW2_EXECSCRIPT = 1165;
		public const uint32 DISPID_IHTMLWINDOW2_TOSTRING = 1166;
		public const uint32 DISPID_IHTMLWINDOW2_SCROLLBY = 1167;
		public const uint32 DISPID_IHTMLWINDOW2_SCROLLTO = 1168;
		public const uint32 DISPID_IHTMLWINDOW2_MOVETO = 6;
		public const uint32 DISPID_IHTMLWINDOW2_MOVEBY = 7;
		public const uint32 DISPID_IHTMLWINDOW2_RESIZETO = 9;
		public const uint32 DISPID_IHTMLWINDOW2_RESIZEBY = 8;
		public const uint32 DISPID_IHTMLWINDOW2_EXTERNAL = 1169;
		public const uint32 DISPID_IHTMLWINDOW3_SCREENLEFT = 1170;
		public const uint32 DISPID_IHTMLWINDOW3_SCREENTOP = 1171;
		public const uint32 DISPID_IHTMLWINDOW3_ATTACHEVENT = 66043;
		public const uint32 DISPID_IHTMLWINDOW3_DETACHEVENT = 66044;
		public const uint32 DISPID_IHTMLWINDOW3_SETTIMEOUT = 1103;
		public const uint32 DISPID_IHTMLWINDOW3_SETINTERVAL = 1162;
		public const uint32 DISPID_IHTMLWINDOW3_PRINT = 1174;
		public const uint32 DISPID_IHTMLWINDOW3_ONBEFOREPRINT = 71602;
		public const uint32 DISPID_IHTMLWINDOW3_ONAFTERPRINT = 71603;
		public const uint32 DISPID_IHTMLWINDOW3_CLIPBOARDDATA = 1175;
		public const uint32 DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG = 1176;
		public const uint32 DISPID_IHTMLWINDOW4_CREATEPOPUP = 1180;
		public const uint32 DISPID_IHTMLWINDOW4_FRAMEELEMENT = 1181;
		public const uint32 DISPID_IHTMLWINDOW5_XMLHTTPREQUEST = 1190;
		public const uint32 DISPID_IHTMLWINDOW6_XDOMAINREQUEST = 1191;
		public const uint32 DISPID_IHTMLWINDOW6_SESSIONSTORAGE = 1192;
		public const uint32 DISPID_IHTMLWINDOW6_LOCALSTORAGE = 1193;
		public const uint32 DISPID_IHTMLWINDOW6_ONHASHCHANGE = 71645;
		public const uint32 DISPID_IHTMLWINDOW6_MAXCONNECTIONSPERSERVER = 1194;
		public const uint32 DISPID_IHTMLWINDOW6_POSTMESSAGE = 1196;
		public const uint32 DISPID_IHTMLWINDOW6_TOSTATICHTML = 1197;
		public const uint32 DISPID_IHTMLWINDOW6_ONMESSAGE = 71646;
		public const uint32 DISPID_IHTMLWINDOW6_MSWRITEPROFILERMARK = 1198;
		public const uint32 DISPID_IHTMLWINDOW7_GETSELECTION = 1199;
		public const uint32 DISPID_IHTMLWINDOW7_GETCOMPUTEDSTYLE = 1200;
		public const uint32 DISPID_IHTMLWINDOW7_STYLEMEDIA = 1202;
		public const uint32 DISPID_IHTMLWINDOW7_PERFORMANCE = 1203;
		public const uint32 DISPID_IHTMLWINDOW7_INNERWIDTH = 1204;
		public const uint32 DISPID_IHTMLWINDOW7_INNERHEIGHT = 1205;
		public const uint32 DISPID_IHTMLWINDOW7_PAGEXOFFSET = 1206;
		public const uint32 DISPID_IHTMLWINDOW7_PAGEYOFFSET = 1207;
		public const uint32 DISPID_IHTMLWINDOW7_SCREENX = 1208;
		public const uint32 DISPID_IHTMLWINDOW7_SCREENY = 1209;
		public const uint32 DISPID_IHTMLWINDOW7_OUTERWIDTH = 1210;
		public const uint32 DISPID_IHTMLWINDOW7_OUTERHEIGHT = 1211;
		public const uint32 DISPID_IHTMLWINDOW7_ONABORT = 71564;
		public const uint32 DISPID_IHTMLWINDOW7_ONCANPLAY = 71670;
		public const uint32 DISPID_IHTMLWINDOW7_ONCANPLAYTHROUGH = 71671;
		public const uint32 DISPID_IHTMLWINDOW7_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLWINDOW7_ONCLICK = 71544;
		public const uint32 DISPID_IHTMLWINDOW7_ONCONTEXTMENU = 71601;
		public const uint32 DISPID_IHTMLWINDOW7_ONDBLCLICK = 71545;
		public const uint32 DISPID_IHTMLWINDOW7_ONDRAG = 71585;
		public const uint32 DISPID_IHTMLWINDOW7_ONDRAGEND = 71586;
		public const uint32 DISPID_IHTMLWINDOW7_ONDRAGENTER = 71587;
		public const uint32 DISPID_IHTMLWINDOW7_ONDRAGLEAVE = 71589;
		public const uint32 DISPID_IHTMLWINDOW7_ONDRAGOVER = 71588;
		public const uint32 DISPID_IHTMLWINDOW7_ONDRAGSTART = 71571;
		public const uint32 DISPID_IHTMLWINDOW7_ONDROP = 71590;
		public const uint32 DISPID_IHTMLWINDOW7_ONDURATIONCHANGE = 71672;
		public const uint32 DISPID_IHTMLWINDOW7_ONFOCUSIN = 71627;
		public const uint32 DISPID_IHTMLWINDOW7_ONFOCUSOUT = 71628;
		public const uint32 DISPID_IHTMLWINDOW7_ONINPUT = 71663;
		public const uint32 DISPID_IHTMLWINDOW7_ONEMPTIED = 71673;
		public const uint32 DISPID_IHTMLWINDOW7_ONENDED = 71674;
		public const uint32 DISPID_IHTMLWINDOW7_ONKEYDOWN = 71541;
		public const uint32 DISPID_IHTMLWINDOW7_ONKEYPRESS = 71543;
		public const uint32 DISPID_IHTMLWINDOW7_ONKEYUP = 71542;
		public const uint32 DISPID_IHTMLWINDOW7_ONLOADEDDATA = 71675;
		public const uint32 DISPID_IHTMLWINDOW7_ONLOADEDMETADATA = 71676;
		public const uint32 DISPID_IHTMLWINDOW7_ONLOADSTART = 71677;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEDOWN = 71538;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEENTER = 71621;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSELEAVE = 71622;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEMOVE = 71540;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEOUT = 71537;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEOVER = 71536;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEUP = 71539;
		public const uint32 DISPID_IHTMLWINDOW7_ONMOUSEWHEEL = 71612;
		public const uint32 DISPID_IHTMLWINDOW7_ONOFFLINE = 71644;
		public const uint32 DISPID_IHTMLWINDOW7_ONONLINE = 71643;
		public const uint32 DISPID_IHTMLWINDOW7_ONPROGRESS = 71681;
		public const uint32 DISPID_IHTMLWINDOW7_ONRATECHANGE = 71682;
		public const uint32 DISPID_IHTMLWINDOW7_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLWINDOW7_ONRESET = 71548;
		public const uint32 DISPID_IHTMLWINDOW7_ONSEEKED = 71683;
		public const uint32 DISPID_IHTMLWINDOW7_ONSEEKING = 71684;
		public const uint32 DISPID_IHTMLWINDOW7_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLWINDOW7_ONSTALLED = 71685;
		public const uint32 DISPID_IHTMLWINDOW7_ONSTORAGE = 71636;
		public const uint32 DISPID_IHTMLWINDOW7_ONSUBMIT = 71547;
		public const uint32 DISPID_IHTMLWINDOW7_ONSUSPEND = 71686;
		public const uint32 DISPID_IHTMLWINDOW7_ONTIMEUPDATE = 71687;
		public const uint32 DISPID_IHTMLWINDOW7_ONPAUSE = 71678;
		public const uint32 DISPID_IHTMLWINDOW7_ONPLAY = 71679;
		public const uint32 DISPID_IHTMLWINDOW7_ONPLAYING = 71680;
		public const uint32 DISPID_IHTMLWINDOW7_ONVOLUMECHANGE = 71688;
		public const uint32 DISPID_IHTMLWINDOW7_ONWAITING = 71689;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERDOWN = 71690;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERMOVE = 71691;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERUP = 71692;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTEROVER = 71693;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTEROUT = 71694;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERCANCEL = 71695;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSPOINTERHOVER = 71696;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTURESTART = 71699;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTURECHANGE = 71700;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTUREEND = 71701;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTUREHOLD = 71702;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTURETAP = 71703;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSGESTUREDOUBLETAP = 71704;
		public const uint32 DISPID_IHTMLWINDOW8_ONMSINERTIASTART = 71705;
		public const uint32 DISPID_IHTMLWINDOW8_APPLICATIONCACHE = 1213;
		public const uint32 DISPID_IHTMLWINDOW8_ONPOPSTATE = 71728;
		public const uint32 DISPID_HTMLWINDOWEVENTS3_ONHASHCHANGE = 1066;
		public const uint32 DISPID_HTMLWINDOWEVENTS3_ONMESSAGE = 1067;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONUNLOAD = 1008;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONHELP = 65546;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONFOCUS = 65537;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONRESIZE = 1016;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONSCROLL = 1014;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD = 1017;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT = 1024;
		public const uint32 DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT = 1025;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONUNLOAD = 1008;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONHELP = 65546;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONFOCUS = 65537;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONERROR = 1002;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONRESIZE = 1016;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONSCROLL = 1014;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = 1017;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT = 1024;
		public const uint32 DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT = 1025;
		public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_USERAGENT = 1001;
		public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_VERSION = 1002;
		public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_LENGTH = 1001;
		public const uint32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDOCUMENT_SCRIPT = 1001;
		public const uint32 DISPID_IHTMLDOCUMENT2_ALL = 1003;
		public const uint32 DISPID_IHTMLDOCUMENT2_BODY = 1004;
		public const uint32 DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = 1005;
		public const uint32 DISPID_IHTMLDOCUMENT2_IMAGES = 1011;
		public const uint32 DISPID_IHTMLDOCUMENT2_APPLETS = 1008;
		public const uint32 DISPID_IHTMLDOCUMENT2_LINKS = 1009;
		public const uint32 DISPID_IHTMLDOCUMENT2_FORMS = 1010;
		public const uint32 DISPID_IHTMLDOCUMENT2_ANCHORS = 1007;
		public const uint32 DISPID_IHTMLDOCUMENT2_TITLE = 1012;
		public const uint32 DISPID_IHTMLDOCUMENT2_SCRIPTS = 1013;
		public const uint32 DISPID_IHTMLDOCUMENT2_DESIGNMODE = 1014;
		public const uint32 DISPID_IHTMLDOCUMENT2_SELECTION = 1017;
		public const uint32 DISPID_IHTMLDOCUMENT2_READYSTATE = 1018;
		public const uint32 DISPID_IHTMLDOCUMENT2_FRAMES = 1019;
		public const uint32 DISPID_IHTMLDOCUMENT2_EMBEDS = 1015;
		public const uint32 DISPID_IHTMLDOCUMENT2_PLUGINS = 1021;
		public const uint32 DISPID_IHTMLDOCUMENT2_ALINKCOLOR = 1022;
		public const int32 DISPID_IHTMLDOCUMENT2_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLDOCUMENT2_FGCOLOR = 70538;
		public const uint32 DISPID_IHTMLDOCUMENT2_LINKCOLOR = 1024;
		public const uint32 DISPID_IHTMLDOCUMENT2_VLINKCOLOR = 1023;
		public const uint32 DISPID_IHTMLDOCUMENT2_REFERRER = 1027;
		public const uint32 DISPID_IHTMLDOCUMENT2_LOCATION = 1026;
		public const uint32 DISPID_IHTMLDOCUMENT2_LASTMODIFIED = 1028;
		public const uint32 DISPID_IHTMLDOCUMENT2_URL = 1025;
		public const uint32 DISPID_IHTMLDOCUMENT2_DOMAIN = 1029;
		public const uint32 DISPID_IHTMLDOCUMENT2_COOKIE = 1030;
		public const uint32 DISPID_IHTMLDOCUMENT2_EXPANDO = 1031;
		public const uint32 DISPID_IHTMLDOCUMENT2_CHARSET = 1032;
		public const uint32 DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = 1033;
		public const uint32 DISPID_IHTMLDOCUMENT2_MIMETYPE = 1041;
		public const uint32 DISPID_IHTMLDOCUMENT2_FILESIZE = 1042;
		public const uint32 DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = 1043;
		public const uint32 DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = 1044;
		public const uint32 DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = 1045;
		public const uint32 DISPID_IHTMLDOCUMENT2_SECURITY = 1046;
		public const uint32 DISPID_IHTMLDOCUMENT2_PROTOCOL = 1047;
		public const uint32 DISPID_IHTMLDOCUMENT2_NAMEPROP = 1048;
		public const uint32 DISPID_IHTMLDOCUMENT2_WRITE = 1054;
		public const uint32 DISPID_IHTMLDOCUMENT2_WRITELN = 1055;
		public const uint32 DISPID_IHTMLDOCUMENT2_OPEN = 1056;
		public const uint32 DISPID_IHTMLDOCUMENT2_CLOSE = 1057;
		public const uint32 DISPID_IHTMLDOCUMENT2_CLEAR = 1058;
		public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = 1059;
		public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = 1060;
		public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = 1061;
		public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = 1062;
		public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = 1063;
		public const uint32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = 1064;
		public const uint32 DISPID_IHTMLDOCUMENT2_EXECCOMMAND = 1065;
		public const uint32 DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = 1066;
		public const uint32 DISPID_IHTMLDOCUMENT2_CREATEELEMENT = 1067;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONHELP = 71549;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONCLICK = 71544;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONDBLCLICK = 71545;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONKEYUP = 71542;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONKEYDOWN = 71541;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONKEYPRESS = 71543;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEUP = 71539;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN = 71538;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE = 71540;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEOUT = 71537;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONMOUSEOVER = 71536;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE = 71558;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONROWEXIT = 71554;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONROWENTER = 71555;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONDRAGSTART = 71571;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONSELECTSTART = 71573;
		public const uint32 DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = 1068;
		public const uint32 DISPID_IHTMLDOCUMENT2_PARENTWINDOW = 1034;
		public const uint32 DISPID_IHTMLDOCUMENT2_STYLESHEETS = 1069;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE = 71557;
		public const uint32 DISPID_IHTMLDOCUMENT2_ONERRORUPDATE = 71574;
		public const uint32 DISPID_IHTMLDOCUMENT2_TOSTRING = 1070;
		public const uint32 DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = 1071;
		public const uint32 DISPID_IHTMLDOCUMENT3_RELEASECAPTURE = 1072;
		public const uint32 DISPID_IHTMLDOCUMENT3_RECALC = 1073;
		public const uint32 DISPID_IHTMLDOCUMENT3_CREATETEXTNODE = 1074;
		public const uint32 DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT = 1075;
		public const uint32 DISPID_IHTMLDOCUMENT3_UNIQUEID = 1077;
		public const uint32 DISPID_IHTMLDOCUMENT3_ATTACHEVENT = 66043;
		public const uint32 DISPID_IHTMLDOCUMENT3_DETACHEVENT = 66044;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONROWSDELETE = 71598;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONROWSINSERTED = 71599;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONCELLCHANGE = 71600;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONDATASETCHANGED = 71576;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONDATAAVAILABLE = 71577;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONDATASETCOMPLETE = 71578;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONPROPERTYCHANGE = 71583;
		public const uint32 DISPID_IHTMLDOCUMENT3_DIR = 70653;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONCONTEXTMENU = 71601;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONSTOP = 71604;
		public const uint32 DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT = 1076;
		public const uint32 DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT = 1078;
		public const uint32 DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD = 1079;
		public const uint32 DISPID_IHTMLDOCUMENT3_BASEURL = 1080;
		public const uint32 DISPID_IHTMLDOCUMENT3_CHILDNODES = 66585;
		public const uint32 DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS = 1082;
		public const uint32 DISPID_IHTMLDOCUMENT3_ONBEFOREEDITFOCUS = 71605;
		public const uint32 DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME = 1086;
		public const uint32 DISPID_IHTMLDOCUMENT3_GETELEMENTBYID = 1088;
		public const uint32 DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME = 1087;
		public const uint32 DISPID_IHTMLDOCUMENT4_FOCUS = 1089;
		public const uint32 DISPID_IHTMLDOCUMENT4_HASFOCUS = 1090;
		public const uint32 DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE = 71616;
		public const uint32 DISPID_IHTMLDOCUMENT4_NAMESPACES = 1091;
		public const uint32 DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL = 1092;
		public const uint32 DISPID_IHTMLDOCUMENT4_MEDIA = 1093;
		public const uint32 DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT = 1094;
		public const uint32 DISPID_IHTMLDOCUMENT4_FIREEVENT = 1095;
		public const uint32 DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE = 1096;
		public const uint32 DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT = 71615;
		public const uint32 DISPID_IHTMLDOCUMENT4_URLUNENCODED = 1097;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL = 71612;
		public const uint32 DISPID_IHTMLDOCUMENT5_DOCTYPE = 1098;
		public const uint32 DISPID_IHTMLDOCUMENT5_IMPLEMENTATION = 1099;
		public const uint32 DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE = 1100;
		public const uint32 DISPID_IHTMLDOCUMENT5_CREATECOMMENT = 1101;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONFOCUSIN = 71627;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONFOCUSOUT = 71628;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONACTIVATE = 71623;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONDEACTIVATE = 71624;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE = 71626;
		public const uint32 DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE = 71613;
		public const uint32 DISPID_IHTMLDOCUMENT5_COMPATMODE = 1102;
		public const uint32 DISPID_IHTMLDOCUMENT6_COMPATIBLE = 1103;
		public const uint32 DISPID_IHTMLDOCUMENT6_DOCUMENTMODE = 1104;
		public const uint32 DISPID_IHTMLDOCUMENT6_ONSTORAGE = 71636;
		public const uint32 DISPID_IHTMLDOCUMENT6_ONSTORAGECOMMIT = 71637;
		public const uint32 DISPID_IHTMLDOCUMENT6_IE8_GETELEMENTBYID = 1107;
		public const uint32 DISPID_IHTMLDOCUMENT6_UPDATESETTINGS = 1109;
		public const uint32 DISPID_IHTMLDOCUMENT7_DEFAULTVIEW = 1110;
		public const uint32 DISPID_IHTMLDOCUMENT7_CREATECDATASECTION = 1123;
		public const uint32 DISPID_IHTMLDOCUMENT7_GETSELECTION = 1112;
		public const uint32 DISPID_IHTMLDOCUMENT7_GETELEMENTSBYTAGNAMENS = 1113;
		public const uint32 DISPID_IHTMLDOCUMENT7_CREATEELEMENTNS = 1114;
		public const uint32 DISPID_IHTMLDOCUMENT7_CREATEATTRIBUTENS = 1115;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONMSTHUMBNAILCLICK = 71657;
		public const uint32 DISPID_IHTMLDOCUMENT7_CHARACTERSET = 1117;
		public const uint32 DISPID_IHTMLDOCUMENT7_IE9_CREATEELEMENT = 1118;
		public const uint32 DISPID_IHTMLDOCUMENT7_IE9_CREATEATTRIBUTE = 1119;
		public const uint32 DISPID_IHTMLDOCUMENT7_GETELEMENTSBYCLASSNAME = 1120;
		public const uint32 DISPID_IHTMLDOCUMENT7_CREATEPROCESSINGINSTRUCTION = 1124;
		public const uint32 DISPID_IHTMLDOCUMENT7_ADOPTNODE = 1125;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666;
		public const uint32 DISPID_IHTMLDOCUMENT7_IE9_ALL = 1126;
		public const uint32 DISPID_IHTMLDOCUMENT7_INPUTENCODING = 1127;
		public const uint32 DISPID_IHTMLDOCUMENT7_XMLENCODING = 1128;
		public const uint32 DISPID_IHTMLDOCUMENT7_XMLSTANDALONE = 1129;
		public const uint32 DISPID_IHTMLDOCUMENT7_XMLVERSION = 1130;
		public const uint32 DISPID_IHTMLDOCUMENT7_HASATTRIBUTES = 1132;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONABORT = 71564;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONBLUR = 71551;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONCANPLAY = 71670;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONCANPLAYTHROUGH = 71671;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONCHANGE = 71566;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAG = 71585;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGEND = 71586;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGENTER = 71587;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGLEAVE = 71589;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDRAGOVER = 71588;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDROP = 71590;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONDURATIONCHANGE = 71672;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONEMPTIED = 71673;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONENDED = 71674;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONERROR = 71565;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONFOCUS = 71550;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONINPUT = 71663;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONLOADEDDATA = 71675;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONLOADEDMETADATA = 71676;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONLOADSTART = 71677;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONPAUSE = 71678;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONPLAY = 71679;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONPLAYING = 71680;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONPROGRESS = 71681;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONRATECHANGE = 71682;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONRESET = 71548;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSCROLL = 71567;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSEEKED = 71683;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSEEKING = 71684;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSELECT = 71546;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSTALLED = 71685;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSUBMIT = 71547;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONSUSPEND = 71686;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONTIMEUPDATE = 71687;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONVOLUMECHANGE = 71688;
		public const uint32 DISPID_IHTMLDOCUMENT7_ONWAITING = 71689;
		public const uint32 DISPID_IHTMLDOCUMENT7_NORMALIZE = 1134;
		public const uint32 DISPID_IHTMLDOCUMENT7_IMPORTNODE = 1135;
		public const uint32 DISPID_IHTMLDOCUMENT7_IE9_PARENTWINDOW = 1136;
		public const uint32 DISPID_IHTMLDOCUMENT7_IE9_BODY = 1137;
		public const uint32 DISPID_IHTMLDOCUMENT7_HEAD = 1138;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSCONTENTZOOM = 71708;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERDOWN = 71690;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERMOVE = 71691;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERUP = 71692;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTEROVER = 71693;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTEROUT = 71694;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERCANCEL = 71695;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERHOVER = 71696;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTURESTART = 71699;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTURECHANGE = 71700;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREEND = 71701;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREHOLD = 71702;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTURETAP = 71703;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREDOUBLETAP = 71704;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSINERTIASTART = 71705;
		public const uint32 DISPID_IHTMLDOCUMENT8_ELEMENTSFROMPOINT = 1139;
		public const uint32 DISPID_IHTMLDOCUMENT8_ELEMENTSFROMRECT = 1140;
		public const uint32 DISPID_IHTMLDOCUMENT8_ONMSMANIPULATIONSTATECHANGED = 71714;
		public const uint32 DISPID_IHTMLDOCUMENT8_MSCAPSLOCKWARNINGOFF = 1141;
		public const uint32 DISPID_IDOCUMENTEVENT_CREATEEVENT = 1108;
		public const uint32 DISPID_IDOCUMENTRANGE_CREATERANGE = 1111;
		public const uint32 DISPID_IDOCUMENTSELECTOR_QUERYSELECTOR = 1105;
		public const uint32 DISPID_IDOCUMENTSELECTOR_QUERYSELECTORALL = 1106;
		public const uint32 DISPID_IDOCUMENTTRAVERSAL_CREATENODEITERATOR = 1121;
		public const uint32 DISPID_IDOCUMENTTRAVERSAL_CREATETREEWALKER = 1122;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS4_ONMSTHUMBNAILCLICK = 71657;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS4_ONMSSITEMODEJUMPLISTITEMREMOVED = 71666;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGE = 1057;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGECOMMIT = 1058;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONHELP = 65546;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONCLICK = -600;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK = -601;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN = -602;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP = -604;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS = -603;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN = -605;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE = -606;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP = -607;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOUT = 65545;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOVER = 65544;
		public const int32 DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE = -609;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWEXIT = 65542;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWENTER = 65543;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDRAGSTART = 65547;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONSELECTSTART = 65548;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONERRORUPDATE = 65549;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU = 1023;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONSTOP = 1026;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWSDELETE = 65568;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONROWSINSERTED = 65569;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONCELLCHANGE = 65570;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONPROPERTYCHANGE = 65555;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS = 1027;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE = 1037;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT = 1036;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL = 1033;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN = 1048;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT = 1049;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE = 1044;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE = 1045;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE = 1047;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONHELP = 65546;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONCLICK = -600;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK = -601;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN = -602;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONKEYUP = -604;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS = -603;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN = -605;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE = -606;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP = -607;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT = 65545;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER = 65544;
		public const int32 DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = -609;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT = 65542;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWENTER = 65543;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART = 65547;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART = 65548;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE = 65549;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU = 1023;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONSTOP = 1026;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWSDELETE = 65568;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONROWSINSERTED = 65569;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONCELLCHANGE = 65570;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONPROPERTYCHANGE = 65555;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS = 1027;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE = 1037;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT = 1036;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL = 1033;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN = 1048;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT = 1049;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE = 1044;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE = 1045;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE = 1047;
		public const uint32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_IWEBBRIDGE_URL = 1;
		public const uint32 DISPID_IWEBBRIDGE_SCROLLBAR = 2;
		public const uint32 DISPID_IWEBBRIDGE_EMBED = 3;
		public const uint32 DISPID_IWEBBRIDGE_EVENT = 1152;
		public const int32 DISPID_IWEBBRIDGE_READYSTATE = -525;
		public const int32 DISPID_IWEBBRIDGE_ABOUTBOX = -552;
		public const uint32 DISPID_IWBSCRIPTCONTROL_RAISEEVENT = 1;
		public const uint32 DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT = 2;
		public const uint32 DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU = 3;
		public const uint32 DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT = 4;
		public const uint32 DISPID_IWBSCRIPTCONTROL_FROZEN = 5;
		public const uint32 DISPID_IWBSCRIPTCONTROL_SCROLLBAR = 7;
		public const uint32 DISPID_IWBSCRIPTCONTROL_VERSION = 8;
		public const uint32 DISPID_IWBSCRIPTCONTROL_VISIBILITY = 9;
		public const uint32 DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE = 10;
		public const uint32 DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT = 1;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE = -609;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONCLICK = -600;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK = -601;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN = -602;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONKEYUP = -604;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS = -603;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN = -605;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE = -606;
		public const int32 DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP = -607;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_HIDDEN = 68546;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_PALETTE = 68540;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE = 68541;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_SRC = 68542;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_UNITS = 68544;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLEMBEDELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLEMBEDELEMENT2_IE8_SRC = 1150;
		public const uint32 DISPID_IHTMLEMBEDELEMENT2_IE8_PLUGINSPAGE = 1151;
		public const uint32 DISPID_IHTMLAREASCOLLECTION_LENGTH = 1500;
		public const int32 DISPID_IHTMLAREASCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLAREASCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLAREASCOLLECTION_TAGS = 1502;
		public const uint32 DISPID_IHTMLAREASCOLLECTION_ADD = 1503;
		public const uint32 DISPID_IHTMLAREASCOLLECTION_REMOVE = 1504;
		public const uint32 DISPID_IHTMLAREASCOLLECTION2_URNS = 1505;
		public const uint32 DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM = 1506;
		public const uint32 DISPID_IHTMLAREASCOLLECTION4_IE8_LENGTH = 1150;
		public const uint32 DISPID_IHTMLAREASCOLLECTION4_IE8_ITEM = 1152;
		public const uint32 DISPID_IHTMLAREASCOLLECTION4_IE8_NAMEDITEM = 1153;
		public const uint32 DISPID_IHTMLMAPELEMENT_AREAS = 1002;
		public const uint32 DISPID_IHTMLMAPELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLAREAELEMENT_SHAPE = 1001;
		public const uint32 DISPID_IHTMLAREAELEMENT_COORDS = 1002;
		public const uint32 DISPID_IHTMLAREAELEMENT_HREF = 0;
		public const uint32 DISPID_IHTMLAREAELEMENT_TARGET = 1004;
		public const uint32 DISPID_IHTMLAREAELEMENT_ALT = 1005;
		public const uint32 DISPID_IHTMLAREAELEMENT_NOHREF = 1006;
		public const uint32 DISPID_IHTMLAREAELEMENT_HOST = 1007;
		public const uint32 DISPID_IHTMLAREAELEMENT_HOSTNAME = 1008;
		public const uint32 DISPID_IHTMLAREAELEMENT_PATHNAME = 1009;
		public const uint32 DISPID_IHTMLAREAELEMENT_PORT = 1010;
		public const uint32 DISPID_IHTMLAREAELEMENT_PROTOCOL = 1011;
		public const uint32 DISPID_IHTMLAREAELEMENT_SEARCH = 1012;
		public const uint32 DISPID_IHTMLAREAELEMENT_HASH = 1013;
		public const uint32 DISPID_IHTMLAREAELEMENT_ONBLUR = 71551;
		public const uint32 DISPID_IHTMLAREAELEMENT_ONFOCUS = 71550;
		public const uint32 DISPID_IHTMLAREAELEMENT_TABINDEX = 65551;
		public const uint32 DISPID_IHTMLAREAELEMENT_FOCUS = 67536;
		public const uint32 DISPID_IHTMLAREAELEMENT_BLUR = 67538;
		public const uint32 DISPID_IHTMLAREAELEMENT2_IE8_SHAPE = 1151;
		public const uint32 DISPID_IHTMLAREAELEMENT2_IE8_COORDS = 1152;
		public const uint32 DISPID_IHTMLAREAELEMENT2_IE8_HREF = 1153;
		public const uint32 DISPID_IHTMLTABLECAPTION_ALIGN = 65608;
		public const uint32 DISPID_IHTMLTABLECAPTION_VALIGN = 70567;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT_TEXT = 1001;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT_ATOMIC = 1002;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_DATA = 1003;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_LENGTH = 1004;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA = 1005;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA = 1006;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA = 1007;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA = 1008;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA = 1009;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_SUBSTRINGDATA = 1010;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_INSERTDATA = 1011;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_DELETEDATA = 1012;
		public const uint32 DISPID_IHTMLCOMMENTELEMENT3_IE9_REPLACEDATA = 1013;
		public const uint32 DISPID_IHTMLPHRASEELEMENT2_CITE = 1001;
		public const uint32 DISPID_IHTMLPHRASEELEMENT2_DATETIME = 1002;
		public const uint32 DISPID_IHTMLPHRASEELEMENT3_IE8_CITE = 1150;
		public const uint32 DISPID_IHTMLTABLE_COLS = 1001;
		public const uint32 DISPID_IHTMLTABLE_BORDER = 1002;
		public const uint32 DISPID_IHTMLTABLE_FRAME = 1004;
		public const uint32 DISPID_IHTMLTABLE_RULES = 1003;
		public const uint32 DISPID_IHTMLTABLE_CELLSPACING = 1005;
		public const uint32 DISPID_IHTMLTABLE_CELLPADDING = 1006;
		public const uint32 DISPID_IHTMLTABLE_BACKGROUND = 70537;
		public const int32 DISPID_IHTMLTABLE_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLTABLE_BORDERCOLOR = 70564;
		public const uint32 DISPID_IHTMLTABLE_BORDERCOLORLIGHT = 70565;
		public const uint32 DISPID_IHTMLTABLE_BORDERCOLORDARK = 70566;
		public const uint32 DISPID_IHTMLTABLE_ALIGN = 65609;
		public const uint32 DISPID_IHTMLTABLE_REFRESH = 1015;
		public const uint32 DISPID_IHTMLTABLE_ROWS = 1016;
		public const uint32 DISPID_IHTMLTABLE_WIDTH = 65541;
		public const uint32 DISPID_IHTMLTABLE_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLTABLE_DATAPAGESIZE = 1017;
		public const uint32 DISPID_IHTMLTABLE_NEXTPAGE = 1018;
		public const uint32 DISPID_IHTMLTABLE_PREVIOUSPAGE = 1019;
		public const uint32 DISPID_IHTMLTABLE_THEAD = 1020;
		public const uint32 DISPID_IHTMLTABLE_TFOOT = 1021;
		public const uint32 DISPID_IHTMLTABLE_TBODIES = 1024;
		public const uint32 DISPID_IHTMLTABLE_CAPTION = 1025;
		public const uint32 DISPID_IHTMLTABLE_CREATETHEAD = 1026;
		public const uint32 DISPID_IHTMLTABLE_DELETETHEAD = 1027;
		public const uint32 DISPID_IHTMLTABLE_CREATETFOOT = 1028;
		public const uint32 DISPID_IHTMLTABLE_DELETETFOOT = 1029;
		public const uint32 DISPID_IHTMLTABLE_CREATECAPTION = 1030;
		public const uint32 DISPID_IHTMLTABLE_DELETECAPTION = 1031;
		public const uint32 DISPID_IHTMLTABLE_INSERTROW = 1032;
		public const uint32 DISPID_IHTMLTABLE_DELETEROW = 1033;
		public const uint32 DISPID_IHTMLTABLE_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLTABLE_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLTABLE2_FIRSTPAGE = 1035;
		public const uint32 DISPID_IHTMLTABLE2_LASTPAGE = 1036;
		public const uint32 DISPID_IHTMLTABLE2_CELLS = 1037;
		public const uint32 DISPID_IHTMLTABLE2_MOVEROW = 1038;
		public const uint32 DISPID_IHTMLTABLE3_SUMMARY = 1039;
		public const uint32 DISPID_IHTMLTABLE4_IE9_THEAD = 1040;
		public const uint32 DISPID_IHTMLTABLE4_IE9_TFOOT = 1041;
		public const uint32 DISPID_IHTMLTABLE4_IE9_CAPTION = 1042;
		public const uint32 DISPID_IHTMLTABLE4_IE9_INSERTROW = 1043;
		public const uint32 DISPID_IHTMLTABLE4_IE9_DELETEROW = 1044;
		public const uint32 DISPID_IHTMLTABLE4_CREATETBODY = 1045;
		public const uint32 DISPID_IHTMLTABLECOL_SPAN = 1001;
		public const uint32 DISPID_IHTMLTABLECOL_WIDTH = 65541;
		public const uint32 DISPID_IHTMLTABLECOL_ALIGN = 65608;
		public const uint32 DISPID_IHTMLTABLECOL_VALIGN = 70567;
		public const uint32 DISPID_IHTMLTABLECOL2_CH = 1002;
		public const uint32 DISPID_IHTMLTABLECOL2_CHOFF = 1003;
		public const uint32 DISPID_IHTMLTABLECOL3_IE9_CH = 1004;
		public const uint32 DISPID_IHTMLTABLECOL3_IE9_CHOFF = 1005;
		public const uint32 DISPID_IHTMLTABLESECTION_ALIGN = 65608;
		public const uint32 DISPID_IHTMLTABLESECTION_VALIGN = 70567;
		public const int32 DISPID_IHTMLTABLESECTION_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLTABLESECTION_ROWS = 1000;
		public const uint32 DISPID_IHTMLTABLESECTION_INSERTROW = 1001;
		public const uint32 DISPID_IHTMLTABLESECTION_DELETEROW = 1002;
		public const uint32 DISPID_IHTMLTABLESECTION2_MOVEROW = 1003;
		public const uint32 DISPID_IHTMLTABLESECTION3_CH = 1004;
		public const uint32 DISPID_IHTMLTABLESECTION3_CHOFF = 1005;
		public const uint32 DISPID_IHTMLTABLESECTION4_IE9_CH = 1006;
		public const uint32 DISPID_IHTMLTABLESECTION4_IE9_CHOFF = 1007;
		public const uint32 DISPID_IHTMLTABLESECTION4_IE9_INSERTROW = 1008;
		public const uint32 DISPID_IHTMLTABLESECTION4_IE9_DELETEROW = 1009;
		public const uint32 DISPID_IHTMLTABLEROW_ALIGN = 65608;
		public const uint32 DISPID_IHTMLTABLEROW_VALIGN = 70567;
		public const int32 DISPID_IHTMLTABLEROW_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLTABLEROW_BORDERCOLOR = 70564;
		public const uint32 DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT = 70565;
		public const uint32 DISPID_IHTMLTABLEROW_BORDERCOLORDARK = 70566;
		public const uint32 DISPID_IHTMLTABLEROW_ROWINDEX = 1000;
		public const uint32 DISPID_IHTMLTABLEROW_SECTIONROWINDEX = 1001;
		public const uint32 DISPID_IHTMLTABLEROW_CELLS = 1002;
		public const uint32 DISPID_IHTMLTABLEROW_INSERTCELL = 1003;
		public const uint32 DISPID_IHTMLTABLEROW_DELETECELL = 1004;
		public const uint32 DISPID_IHTMLTABLEROW2_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLTABLEROW3_CH = 1009;
		public const uint32 DISPID_IHTMLTABLEROW3_CHOFF = 1010;
		public const uint32 DISPID_IHTMLTABLEROW4_IE9_CH = 1011;
		public const uint32 DISPID_IHTMLTABLEROW4_IE9_CHOFF = 1012;
		public const uint32 DISPID_IHTMLTABLEROW4_IE9_INSERTCELL = 1013;
		public const uint32 DISPID_IHTMLTABLEROW4_IE9_DELETECELL = 1014;
		public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT = 67555;
		public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH = 67556;
		public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP = 67557;
		public const uint32 DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT = 67558;
		public const uint32 DISPID_IHTMLTABLECELL_ROWSPAN = 2001;
		public const uint32 DISPID_IHTMLTABLECELL_COLSPAN = 2002;
		public const uint32 DISPID_IHTMLTABLECELL_ALIGN = 65608;
		public const uint32 DISPID_IHTMLTABLECELL_VALIGN = 70567;
		public const int32 DISPID_IHTMLTABLECELL_BGCOLOR = -501;
		public const uint32 DISPID_IHTMLTABLECELL_NOWRAP = 70541;
		public const uint32 DISPID_IHTMLTABLECELL_BACKGROUND = 70537;
		public const uint32 DISPID_IHTMLTABLECELL_BORDERCOLOR = 70564;
		public const uint32 DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT = 70565;
		public const uint32 DISPID_IHTMLTABLECELL_BORDERCOLORDARK = 70566;
		public const uint32 DISPID_IHTMLTABLECELL_WIDTH = 65541;
		public const uint32 DISPID_IHTMLTABLECELL_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLTABLECELL_CELLINDEX = 2003;
		public const uint32 DISPID_IHTMLTABLECELL2_ABBR = 2004;
		public const uint32 DISPID_IHTMLTABLECELL2_AXIS = 2005;
		public const uint32 DISPID_IHTMLTABLECELL2_CH = 2006;
		public const uint32 DISPID_IHTMLTABLECELL2_CHOFF = 2007;
		public const uint32 DISPID_IHTMLTABLECELL2_HEADERS = 2008;
		public const uint32 DISPID_IHTMLTABLECELL2_SCOPE = 2009;
		public const uint32 DISPID_IHTMLTABLECELL3_IE9_CH = 2010;
		public const uint32 DISPID_IHTMLTABLECELL3_IE9_CHOFF = 2011;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_SRC = 1001;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = 1004;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_EVENT = 1005;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_TEXT = 1006;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_DEFER = 1007;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_ONERROR = 71565;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT_TYPE = 1009;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT2_CHARSET = 1010;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT3_IE8_SRC = 1150;
		public const uint32 DISPID_IHTMLSCRIPTELEMENT4_USEDCHARSET = 1011;
		public const uint32 DISPID_HTMLSCRIPTEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLSCRIPTEVENTS_ONERROR = 1002;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_OBJECT = 68537;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_CLASSID = 68538;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_DATA = 68539;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_RECORDSET = 68541;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_ALIGN = 65609;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_CODEBASE = 68542;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_CODETYPE = 68543;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_CODE = 68544;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_BASEHREF = 65538;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_TYPE = 68545;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_FORM = 67540;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_READYSTATE = 68546;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_ONERROR = 71565;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_ALTHTML = 68547;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_VSPACE = 68548;
		public const uint32 DISPID_IHTMLOBJECTELEMENT_HSPACE = 68549;
		public const uint32 DISPID_IHTMLOBJECTELEMENT2_NAMEDRECORDSET = 68550;
		public const uint32 DISPID_IHTMLOBJECTELEMENT2_CLASSID = 68538;
		public const uint32 DISPID_IHTMLOBJECTELEMENT2_DATA = 68539;
		public const uint32 DISPID_IHTMLOBJECTELEMENT3_ARCHIVE = 68551;
		public const uint32 DISPID_IHTMLOBJECTELEMENT3_ALT = 68552;
		public const uint32 DISPID_IHTMLOBJECTELEMENT3_DECLARE = 68553;
		public const uint32 DISPID_IHTMLOBJECTELEMENT3_STANDBY = 68554;
		public const uint32 DISPID_IHTMLOBJECTELEMENT3_BORDER = 68555;
		public const uint32 DISPID_IHTMLOBJECTELEMENT3_USEMAP = 68556;
		public const uint32 DISPID_IHTMLOBJECTELEMENT4_CONTENTDOCUMENT = 68566;
		public const uint32 DISPID_IHTMLOBJECTELEMENT4_IE8_CODEBASE = 68567;
		public const uint32 DISPID_IHTMLOBJECTELEMENT4_IE8_DATA = 68568;
		public const uint32 DISPID_IHTMLOBJECTELEMENT5_IE9_OBJECT = 68569;
		public const uint32 DISPID_IHTMLPARAMELEMENT_NAME = 1001;
		public const uint32 DISPID_IHTMLPARAMELEMENT_VALUE = 1002;
		public const uint32 DISPID_IHTMLPARAMELEMENT_TYPE = 1003;
		public const uint32 DISPID_IHTMLPARAMELEMENT_VALUETYPE = 1004;
		public const uint32 DISPID_IHTMLPARAMELEMENT2_NAME = 1001;
		public const uint32 DISPID_IHTMLPARAMELEMENT2_TYPE = 1003;
		public const uint32 DISPID_IHTMLPARAMELEMENT2_VALUE = 1002;
		public const uint32 DISPID_IHTMLPARAMELEMENT2_IE8_VALUETYPE = 1150;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONERRORUPDATE = 65549;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWEXIT = 65542;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWENTER = 65543;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONERROR = 65555;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSDELETE = 65568;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSINSERTED = 65569;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONCELLCHANGE = 65570;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONREADYSTATECHANGE = 65556;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE = 65540;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE = 65541;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE = 65549;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT = 65542;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER = 65543;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED = 65550;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE = 65551;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE = 65552;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR = 65555;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSDELETE = 65568;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSINSERTED = 65569;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONCELLCHANGE = 65570;
		public const uint32 DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE = 65556;
		public const uint32 DISPID_IHTMLFRAMEBASE_SRC = 68536;
		public const uint32 DISPID_IHTMLFRAMEBASE_NAME = 65536;
		public const uint32 DISPID_IHTMLFRAMEBASE_BORDER = 68538;
		public const uint32 DISPID_IHTMLFRAMEBASE_FRAMEBORDER = 68539;
		public const uint32 DISPID_IHTMLFRAMEBASE_FRAMESPACING = 68540;
		public const uint32 DISPID_IHTMLFRAMEBASE_MARGINWIDTH = 68541;
		public const uint32 DISPID_IHTMLFRAMEBASE_MARGINHEIGHT = 68542;
		public const uint32 DISPID_IHTMLFRAMEBASE_NORESIZE = 68543;
		public const uint32 DISPID_IHTMLFRAMEBASE_SCROLLING = 68544;
		public const uint32 DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW = 68545;
		public const uint32 DISPID_IHTMLFRAMEBASE2_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLFRAMEBASE2_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY = 70742;
		public const uint32 DISPID_IHTMLFRAMEBASE3_LONGDESC = 68546;
		public const uint32 DISPID_HTMLFRAMESITEEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLFRAMESITEEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR = 69537;
		public const uint32 DISPID_IHTMLFRAMEELEMENT2_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLFRAMEELEMENT2_WIDTH = 65541;
		public const uint32 DISPID_IHTMLFRAMEELEMENT3_CONTENTDOCUMENT = 69656;
		public const uint32 DISPID_IHTMLFRAMEELEMENT3_IE8_SRC = 69657;
		public const uint32 DISPID_IHTMLFRAMEELEMENT3_IE8_LONGDESC = 69658;
		public const uint32 DISPID_IHTMLFRAMEELEMENT3_IE8_FRAMEBORDER = 69659;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT_VSPACE = 69537;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT_HSPACE = 69538;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT_ALIGN = 65609;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT2_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT2_WIDTH = 65541;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT3_CONTENTDOCUMENT = 69656;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT3_IE8_SRC = 69657;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT3_IE8_LONGDESC = 69658;
		public const uint32 DISPID_IHTMLIFRAMEELEMENT3_IE8_FRAMEBORDER = 69659;
		public const uint32 DISPID_IHTMLDIVPOSITION_ALIGN = 65609;
		public const uint32 DISPID_IHTMLFIELDSETELEMENT_ALIGN = 65609;
		public const uint32 DISPID_IHTMLFIELDSETELEMENT2_FORM = 67540;
		public const uint32 DISPID_IHTMLLEGENDELEMENT_ALIGN = 65609;
		public const uint32 DISPID_IHTMLLEGENDELEMENT2_FORM = 67540;
		public const uint32 DISPID_IHTMLSPANFLOW_ALIGN = 65609;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_ROWS = 1000;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_COLS = 1001;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_BORDER = 1002;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = 1003;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = 1004;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = 1005;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_NAME = 65536;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD = 71569;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD = 71575;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT2_ONBEFOREPRINT = 71602;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT2_ONAFTERPRINT = 71603;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONHASHCHANGE = 71645;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONMESSAGE = 71646;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONOFFLINE = 71644;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONONLINE = 71643;
		public const uint32 DISPID_IHTMLFRAMESETELEMENT3_ONSTORAGE = 71636;
		public const uint32 DISPID_IHTMLBGSOUND_SRC = 1001;
		public const uint32 DISPID_IHTMLBGSOUND_LOOP = 1002;
		public const uint32 DISPID_IHTMLBGSOUND_VOLUME = 1003;
		public const uint32 DISPID_IHTMLBGSOUND_BALANCE = 1004;
		public const uint32 DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = 1501;
		public const int32 DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = 1502;
		public const int32 DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = 1503;
		public const uint32 DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = 1503;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_FONTS = 1504;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_EXECARG = 1505;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = 1506;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = 1507;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = 1508;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = 1509;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = 1510;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = 1511;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = 1512;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = 1513;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_SIZES = 1514;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = 1515;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = 1516;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = 1517;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = 1518;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = 1519;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = 1520;
		public const uint32 DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO = 1521;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_TYPE = 1002;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_ONERROR = 71565;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_STYLESHEET = 1004;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_DISABLED = 65612;
		public const uint32 DISPID_IHTMLSTYLEELEMENT_MEDIA = 1006;
		public const uint32 DISPID_IHTMLSTYLEELEMENT2_SHEET = 1007;
		public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD = 1003;
		public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR = 1002;
		public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = 1003;
		public const uint32 DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = 1002;
		public const uint32 DISPID_IHTMLSTYLEFONTFACE_FONTSRC = 70633;
		public const uint32 DISPID_IHTMLSTYLEFONTFACE2_STYLE = 65610;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_RESPONSETEXT = 1003;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_TIMEOUT = 1004;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_CONTENTTYPE = 1005;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONPROGRESS = 1006;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONERROR = 71565;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONTIMEOUT = 71648;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_ONLOAD = 71568;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_ABORT = 1010;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_OPEN = 1011;
		public const uint32 DISPID_IHTMLXDOMAINREQUEST_SEND = 1012;
		public const uint32 DISPID_IHTMLXDOMAINREQUESTFACTORY_CREATE = 0;
		public const uint32 DISPID_IHTMLSTORAGE_LENGTH = 1001;
		public const uint32 DISPID_IHTMLSTORAGE_REMAININGSPACE = 1002;
		public const uint32 DISPID_IHTMLSTORAGE_KEY = 1006;
		public const uint32 DISPID_IHTMLSTORAGE_GETITEM = 1003;
		public const uint32 DISPID_IHTMLSTORAGE_SETITEM = 1004;
		public const uint32 DISPID_IHTMLSTORAGE_REMOVEITEM = 1005;
		public const uint32 DISPID_IHTMLSTORAGE_CLEAR = 1007;
		public const uint32 DISPID_IHTMLSTORAGE2_IE9_SETITEM = 1008;
		public const uint32 DISPID_IEVENTTARGET_ADDEVENTLISTENER = 66046;
		public const uint32 DISPID_IEVENTTARGET_REMOVEEVENTLISTENER = 66047;
		public const uint32 DISPID_IEVENTTARGET_DISPATCHEVENT = 66048;
		public const uint32 DISPID_IDOMEVENT_BUBBLES = 1001;
		public const uint32 DISPID_IDOMEVENT_CANCELABLE = 1002;
		public const uint32 DISPID_IDOMEVENT_CURRENTTARGET = 1003;
		public const uint32 DISPID_IDOMEVENT_DEFAULTPREVENTED = 1004;
		public const uint32 DISPID_IDOMEVENT_EVENTPHASE = 1005;
		public const uint32 DISPID_IDOMEVENT_TARGET = 1006;
		public const uint32 DISPID_IDOMEVENT_TIMESTAMP = 1007;
		public const uint32 DISPID_IDOMEVENT_TYPE = 1008;
		public const uint32 DISPID_IDOMEVENT_INITEVENT = 1009;
		public const uint32 DISPID_IDOMEVENT_PREVENTDEFAULT = 1010;
		public const uint32 DISPID_IDOMEVENT_STOPPROPAGATION = 1011;
		public const uint32 DISPID_IDOMEVENT_STOPIMMEDIATEPROPAGATION = 1012;
		public const uint32 DISPID_IDOMEVENT_ISTRUSTED = 1013;
		public const uint32 DISPID_IDOMEVENT_CANCELBUBBLE = 1014;
		public const uint32 DISPID_IDOMEVENT_SRCELEMENT = 1015;
		public const uint32 DISPID_IDOMUIEVENT_VIEW = 1026;
		public const uint32 DISPID_IDOMUIEVENT_DETAIL = 1027;
		public const uint32 DISPID_IDOMUIEVENT_INITUIEVENT = 1028;
		public const uint32 DISPID_IDOMMOUSEEVENT_SCREENX = 1051;
		public const uint32 DISPID_IDOMMOUSEEVENT_SCREENY = 1052;
		public const uint32 DISPID_IDOMMOUSEEVENT_CLIENTX = 1053;
		public const uint32 DISPID_IDOMMOUSEEVENT_CLIENTY = 1054;
		public const uint32 DISPID_IDOMMOUSEEVENT_CTRLKEY = 1055;
		public const uint32 DISPID_IDOMMOUSEEVENT_SHIFTKEY = 1056;
		public const uint32 DISPID_IDOMMOUSEEVENT_ALTKEY = 1057;
		public const uint32 DISPID_IDOMMOUSEEVENT_METAKEY = 1058;
		public const uint32 DISPID_IDOMMOUSEEVENT_BUTTON = 1059;
		public const uint32 DISPID_IDOMMOUSEEVENT_RELATEDTARGET = 1060;
		public const uint32 DISPID_IDOMMOUSEEVENT_INITMOUSEEVENT = 1061;
		public const uint32 DISPID_IDOMMOUSEEVENT_GETMODIFIERSTATE = 1062;
		public const uint32 DISPID_IDOMMOUSEEVENT_BUTTONS = 1063;
		public const uint32 DISPID_IDOMMOUSEEVENT_FROMELEMENT = 1064;
		public const uint32 DISPID_IDOMMOUSEEVENT_TOELEMENT = 1065;
		public const uint32 DISPID_IDOMMOUSEEVENT_X = 1066;
		public const uint32 DISPID_IDOMMOUSEEVENT_Y = 1067;
		public const uint32 DISPID_IDOMMOUSEEVENT_OFFSETX = 1068;
		public const uint32 DISPID_IDOMMOUSEEVENT_OFFSETY = 1069;
		public const uint32 DISPID_IDOMMOUSEEVENT_PAGEX = 1070;
		public const uint32 DISPID_IDOMMOUSEEVENT_PAGEY = 1071;
		public const uint32 DISPID_IDOMMOUSEEVENT_LAYERX = 1072;
		public const uint32 DISPID_IDOMMOUSEEVENT_LAYERY = 1073;
		public const uint32 DISPID_IDOMMOUSEEVENT_WHICH = 1074;
		public const uint32 DISPID_IDOMDRAGEVENT_DATATRANSFER = 1401;
		public const uint32 DISPID_IDOMDRAGEVENT_INITDRAGEVENT = 1402;
		public const uint32 DISPID_IDOMMOUSEWHEELEVENT_WHEELDELTA = 1076;
		public const uint32 DISPID_IDOMMOUSEWHEELEVENT_INITMOUSEWHEELEVENT = 1077;
		public const uint32 DISPID_IDOMWHEELEVENT_DELTAX = 1101;
		public const uint32 DISPID_IDOMWHEELEVENT_DELTAY = 1102;
		public const uint32 DISPID_IDOMWHEELEVENT_DELTAZ = 1103;
		public const uint32 DISPID_IDOMWHEELEVENT_DELTAMODE = 1104;
		public const uint32 DISPID_IDOMWHEELEVENT_INITWHEELEVENT = 1105;
		public const uint32 DISPID_IDOMTEXTEVENT_DATA = 1126;
		public const uint32 DISPID_IDOMTEXTEVENT_INPUTMETHOD = 1127;
		public const uint32 DISPID_IDOMTEXTEVENT_INITTEXTEVENT = 1128;
		public const uint32 DISPID_IDOMTEXTEVENT_LOCALE = 1129;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_KEY = 1151;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_LOCATION = 1152;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_CTRLKEY = 1153;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_SHIFTKEY = 1154;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_ALTKEY = 1155;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_METAKEY = 1156;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_REPEAT = 1157;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_GETMODIFIERSTATE = 1158;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_INITKEYBOARDEVENT = 1159;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_KEYCODE = 1160;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_CHARCODE = 1161;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_WHICH = 1162;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_IE9_CHAR = 1163;
		public const uint32 DISPID_IDOMKEYBOARDEVENT_LOCALE = 1164;
		public const uint32 DISPID_IDOMCOMPOSITIONEVENT_DATA = 1176;
		public const uint32 DISPID_IDOMCOMPOSITIONEVENT_INITCOMPOSITIONEVENT = 1177;
		public const uint32 DISPID_IDOMCOMPOSITIONEVENT_LOCALE = 1178;
		public const uint32 DISPID_IDOMMUTATIONEVENT_RELATEDNODE = 1226;
		public const uint32 DISPID_IDOMMUTATIONEVENT_PREVVALUE = 1227;
		public const uint32 DISPID_IDOMMUTATIONEVENT_NEWVALUE = 1228;
		public const uint32 DISPID_IDOMMUTATIONEVENT_ATTRNAME = 1229;
		public const uint32 DISPID_IDOMMUTATIONEVENT_ATTRCHANGE = 1230;
		public const uint32 DISPID_IDOMMUTATIONEVENT_INITMUTATIONEVENT = 1231;
		public const uint32 DISPID_IDOMBEFOREUNLOADEVENT_RETURNVALUE = 1376;
		public const uint32 DISPID_IDOMFOCUSEVENT_RELATEDTARGET = 1251;
		public const uint32 DISPID_IDOMFOCUSEVENT_INITFOCUSEVENT = 1252;
		public const uint32 DISPID_IDOMCUSTOMEVENT_DETAIL = 1201;
		public const uint32 DISPID_IDOMCUSTOMEVENT_INITCUSTOMEVENT = 1202;
		public const uint32 DISPID_ICANVASGRADIENT_ADDCOLORSTOP = 1000;
		public const uint32 DISPID_ICANVASTEXTMETRICS_WIDTH = 1000;
		public const uint32 DISPID_ICANVASIMAGEDATA_WIDTH = 1000;
		public const uint32 DISPID_ICANVASIMAGEDATA_HEIGHT = 1001;
		public const uint32 DISPID_ICANVASIMAGEDATA_DATA = 1002;
		public const uint32 DISPID_ICANVASPIXELARRAY_LENGTH = 1000;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CANVAS = 1000;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_RESTORE = 1001;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SAVE = 1002;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ROTATE = 1003;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SCALE = 1004;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SETTRANSFORM = 1005;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TRANSFORM = 1006;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TRANSLATE = 1007;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALALPHA = 1008;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALCOMPOSITEOPERATION = 1009;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLSTYLE = 1010;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKESTYLE = 1011;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATELINEARGRADIENT = 1012;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATERADIALGRADIENT = 1013;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATEPATTERN = 1014;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINECAP = 1015;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINEJOIN = 1016;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINEWIDTH = 1017;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_MITERLIMIT = 1018;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWBLUR = 1019;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWCOLOR = 1020;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETX = 1021;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETY = 1022;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CLEARRECT = 1023;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLRECT = 1024;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKERECT = 1025;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ARC = 1026;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ARCTO = 1027;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_BEGINPATH = 1028;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_BEZIERCURVETO = 1029;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CLIP = 1030;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CLOSEPATH = 1031;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILL = 1032;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_LINETO = 1033;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_MOVETO = 1034;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_QUADRATICCURVETO = 1035;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_RECT = 1036;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKE = 1037;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_ISPOINTINPATH = 1038;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FONT = 1039;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TEXTALIGN = 1040;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_TEXTBASELINE = 1041;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLTEXT = 1042;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_MEASURETEXT = 1043;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKETEXT = 1044;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_DRAWIMAGE = 1045;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATEIMAGEDATA = 1046;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_GETIMAGEDATA = 1047;
		public const uint32 DISPID_ICANVASRENDERINGCONTEXT2D_PUTIMAGEDATA = 1048;
		public const uint32 DISPID_IHTMLCANVASELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLCANVASELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLCANVASELEMENT_GETCONTEXT = 1001;
		public const uint32 DISPID_IHTMLCANVASELEMENT_TODATAURL = 1002;
		public const uint32 DISPID_IDOMPROGRESSEVENT_LENGTHCOMPUTABLE = 1551;
		public const uint32 DISPID_IDOMPROGRESSEVENT_LOADED = 1552;
		public const uint32 DISPID_IDOMPROGRESSEVENT_TOTAL = 1553;
		public const uint32 DISPID_IDOMPROGRESSEVENT_INITPROGRESSEVENT = 1554;
		public const uint32 DISPID_IDOMMESSAGEEVENT_DATA = 1326;
		public const uint32 DISPID_IDOMMESSAGEEVENT_ORIGIN = 1327;
		public const uint32 DISPID_IDOMMESSAGEEVENT_SOURCE = 1328;
		public const uint32 DISPID_IDOMMESSAGEEVENT_INITMESSAGEEVENT = 1329;
		public const uint32 DISPID_IDOMSITEMODEEVENT_BUTTONID = 1301;
		public const uint32 DISPID_IDOMSITEMODEEVENT_ACTIONURL = 1302;
		public const uint32 DISPID_IDOMSTORAGEEVENT_KEY = 1351;
		public const uint32 DISPID_IDOMSTORAGEEVENT_OLDVALUE = 1352;
		public const uint32 DISPID_IDOMSTORAGEEVENT_NEWVALUE = 1353;
		public const uint32 DISPID_IDOMSTORAGEEVENT_URL = 1354;
		public const uint32 DISPID_IDOMSTORAGEEVENT_STORAGEAREA = 1355;
		public const uint32 DISPID_IDOMSTORAGEEVENT_INITSTORAGEEVENT = 1356;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_READYSTATE = 1002;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSEBODY = 1003;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSETEXT = 1004;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSEXML = 1005;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_STATUS = 1006;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_STATUSTEXT = 1007;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_ABORT = 1009;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_OPEN = 1010;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_SEND = 1011;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_GETALLRESPONSEHEADERS = 1012;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_GETRESPONSEHEADER = 1013;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST_SETREQUESTHEADER = 1014;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST2_TIMEOUT = 1015;
		public const uint32 DISPID_IHTMLXMLHTTPREQUEST2_ONTIMEOUT = 71648;
		public const uint32 DISPID_IHTMLXMLHTTPREQUESTFACTORY_CREATE = 0;
		public const uint32 DISPID_HTMLXMLHTTPREQUESTEVENTS_ONTIMEOUT = 1016;
		public const uint32 DISPID_HTMLXMLHTTPREQUESTEVENTS_ONREADYSTATECHANGE = 1008;
		public const uint32 DISPID_ISVGANGLE_UNITTYPE = 1000;
		public const uint32 DISPID_ISVGANGLE_VALUE = 1001;
		public const uint32 DISPID_ISVGANGLE_VALUEINSPECIFIEDUNITS = 1002;
		public const uint32 DISPID_ISVGANGLE_VALUEASSTRING = 1003;
		public const uint32 DISPID_ISVGANGLE_NEWVALUESPECIFIEDUNITS = 1004;
		public const uint32 DISPID_ISVGANGLE_CONVERTTOSPECIFIEDUNITS = 1005;
		public const uint32 DISPID_ISVGSTYLABLE_CLASSNAME = 1001;
		public const uint32 DISPID_ISVGLOCATABLE_NEARESTVIEWPORTELEMENT = 1002;
		public const uint32 DISPID_ISVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 1003;
		public const uint32 DISPID_ISVGLOCATABLE_GETBBOX = 1004;
		public const uint32 DISPID_ISVGLOCATABLE_GETCTM = 1005;
		public const uint32 DISPID_ISVGLOCATABLE_GETSCREENCTM = 1006;
		public const uint32 DISPID_ISVGLOCATABLE_GETTRANSFORMTOELEMENT = 1007;
		public const uint32 DISPID_ISVGTRANSFORMABLE_TRANSFORM = 1009;
		public const uint32 DISPID_ISVGTESTS_REQUIREDFEATURES = 1011;
		public const uint32 DISPID_ISVGTESTS_REQUIREDEXTENSIONS = 1013;
		public const uint32 DISPID_ISVGTESTS_SYSTEMLANGUAGE = 1015;
		public const uint32 DISPID_ISVGTESTS_HASEXTENSION = 1016;
		public const uint32 DISPID_ISVGLANGSPACE_XMLLANG = 1017;
		public const uint32 DISPID_ISVGLANGSPACE_XMLSPACE = 1018;
		public const uint32 DISPID_ISVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED = 1020;
		public const uint32 DISPID_ISVGFITTOVIEWBOX_VIEWBOX = 1022;
		public const uint32 DISPID_ISVGFITTOVIEWBOX_PRESERVEASPECTRATIO = 1024;
		public const uint32 DISPID_ISVGZOOMANDPAN_ZOOMANDPAN = 1025;
		public const uint32 DISPID_ISVGURIREFERENCE_HREF = 1026;
		public const uint32 DISPID_ISVGANIMATEDANGLE_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDANGLE_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDTRANSFORMLIST_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDTRANSFORMLIST_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDBOOLEAN_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDBOOLEAN_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDENUMERATION_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDENUMERATION_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDINTEGER_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDINTEGER_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDLENGTH_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDLENGTH_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDLENGTHLIST_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDLENGTHLIST_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDNUMBER_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDNUMBER_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDNUMBERLIST_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDNUMBERLIST_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDRECT_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDRECT_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGANIMATEDSTRING_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDSTRING_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGCLIPPATHELEMENT_CLIPPATHUNITS = 1051;
		public const uint32 DISPID_ISVGDOCUMENT_ROOTELEMENT = 1116;
		public const uint32 DISPID_IGETSVGDOCUMENT_GETSVGDOCUMENT = 65615;
		public const uint32 DISPID_ISVGELEMENT_XMLBASE = 1032;
		public const uint32 DISPID_ISVGELEMENT_OWNERSVGELEMENT = 1033;
		public const uint32 DISPID_ISVGELEMENT_VIEWPORTELEMENT = 1034;
		public const uint32 DISPID_ISVGELEMENT_FOCUSABLE = 1036;
		public const uint32 DISPID_ISVGLENGTH_UNITTYPE = 1000;
		public const uint32 DISPID_ISVGLENGTH_VALUE = 1001;
		public const uint32 DISPID_ISVGLENGTH_VALUEINSPECIFIEDUNITS = 1002;
		public const uint32 DISPID_ISVGLENGTH_VALUEASSTRING = 1003;
		public const uint32 DISPID_ISVGLENGTH_NEWVALUESPECIFIEDUNITS = 1004;
		public const uint32 DISPID_ISVGLENGTH_CONVERTTOSPECIFIEDUNITS = 1005;
		public const uint32 DISPID_ISVGLENGTHLIST_NUMBEROFITEMS = 1000;
		public const uint32 DISPID_ISVGLENGTHLIST_CLEAR = 1001;
		public const uint32 DISPID_ISVGLENGTHLIST_INITIALIZE = 1002;
		public const uint32 DISPID_ISVGLENGTHLIST_GETITEM = 1003;
		public const uint32 DISPID_ISVGLENGTHLIST_INSERTITEMBEFORE = 1004;
		public const uint32 DISPID_ISVGLENGTHLIST_REPLACEITEM = 1005;
		public const uint32 DISPID_ISVGLENGTHLIST_REMOVEITEM = 1006;
		public const uint32 DISPID_ISVGLENGTHLIST_APPENDITEM = 1007;
		public const uint32 DISPID_ISVGMATRIX_A = 1000;
		public const uint32 DISPID_ISVGMATRIX_B = 1001;
		public const uint32 DISPID_ISVGMATRIX_C = 1002;
		public const uint32 DISPID_ISVGMATRIX_D = 1003;
		public const uint32 DISPID_ISVGMATRIX_E = 1004;
		public const uint32 DISPID_ISVGMATRIX_F = 1005;
		public const uint32 DISPID_ISVGMATRIX_MULTIPLY = 1006;
		public const uint32 DISPID_ISVGMATRIX_INVERSE = 1007;
		public const uint32 DISPID_ISVGMATRIX_TRANSLATE = 1008;
		public const uint32 DISPID_ISVGMATRIX_SCALE = 1009;
		public const uint32 DISPID_ISVGMATRIX_SCALENONUNIFORM = 1010;
		public const uint32 DISPID_ISVGMATRIX_ROTATE = 1011;
		public const uint32 DISPID_ISVGMATRIX_ROTATEFROMVECTOR = 1012;
		public const uint32 DISPID_ISVGMATRIX_FLIPX = 1013;
		public const uint32 DISPID_ISVGMATRIX_FLIPY = 1014;
		public const uint32 DISPID_ISVGMATRIX_SKEWX = 1015;
		public const uint32 DISPID_ISVGMATRIX_SKEWY = 1016;
		public const uint32 DISPID_ISVGNUMBER_VALUE = 1000;
		public const uint32 DISPID_ISVGNUMBERLIST_NUMBEROFITEMS = 1000;
		public const uint32 DISPID_ISVGNUMBERLIST_CLEAR = 1001;
		public const uint32 DISPID_ISVGNUMBERLIST_INITIALIZE = 1002;
		public const uint32 DISPID_ISVGNUMBERLIST_GETITEM = 1003;
		public const uint32 DISPID_ISVGNUMBERLIST_INSERTITEMBEFORE = 1004;
		public const uint32 DISPID_ISVGNUMBERLIST_REPLACEITEM = 1005;
		public const uint32 DISPID_ISVGNUMBERLIST_REMOVEITEM = 1006;
		public const uint32 DISPID_ISVGNUMBERLIST_APPENDITEM = 1007;
		public const uint32 DISPID_ISVGPATTERNELEMENT_PATTERNUNITS = 1051;
		public const uint32 DISPID_ISVGPATTERNELEMENT_PATTERNCONTENTUNITS = 1053;
		public const uint32 DISPID_ISVGPATTERNELEMENT_PATTERNTRANSFORM = 1055;
		public const uint32 DISPID_ISVGPATTERNELEMENT_X = 1057;
		public const uint32 DISPID_ISVGPATTERNELEMENT_Y = 1059;
		public const uint32 DISPID_ISVGPATTERNELEMENT_WIDTH = 1061;
		public const uint32 DISPID_ISVGPATTERNELEMENT_HEIGHT = 1063;
		public const uint32 DISPID_ISVGPATHSEG_PATHSEGTYPE = 1000;
		public const uint32 DISPID_ISVGPATHSEG_PATHSEGTYPEASLETTER = 1001;
		public const uint32 DISPID_ISVGPATHSEGARCABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGARCABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGARCABS_R1 = 1022;
		public const uint32 DISPID_ISVGPATHSEGARCABS_R2 = 1023;
		public const uint32 DISPID_ISVGPATHSEGARCABS_ANGLE = 1024;
		public const uint32 DISPID_ISVGPATHSEGARCABS_LARGEARCFLAG = 1025;
		public const uint32 DISPID_ISVGPATHSEGARCABS_SWEEPFLAG = 1026;
		public const uint32 DISPID_ISVGPATHSEGARCREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGARCREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGARCREL_R1 = 1022;
		public const uint32 DISPID_ISVGPATHSEGARCREL_R2 = 1023;
		public const uint32 DISPID_ISVGPATHSEGARCREL_ANGLE = 1024;
		public const uint32 DISPID_ISVGPATHSEGARCREL_LARGEARCFLAG = 1025;
		public const uint32 DISPID_ISVGPATHSEGARCREL_SWEEPFLAG = 1026;
		public const uint32 DISPID_ISVGPATHSEGMOVETOABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGMOVETOABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGMOVETOREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGMOVETOREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGLINETOABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGLINETOABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGLINETOREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGLINETOREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X1 = 1022;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y1 = 1023;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X2 = 1024;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y2 = 1025;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X1 = 1022;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y1 = 1023;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X2 = 1024;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y2 = 1025;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X2 = 1022;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y2 = 1023;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X2 = 1022;
		public const uint32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y2 = 1023;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X1 = 1022;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y1 = 1023;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X1 = 1022;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y1 = 1023;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_Y = 1021;
		public const uint32 DISPID_ISVGPATHSEGLINETOHORIZONTALABS_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGLINETOHORIZONTALREL_X = 1020;
		public const uint32 DISPID_ISVGPATHSEGLINETOVERTICALABS_Y = 1020;
		public const uint32 DISPID_ISVGPATHSEGLINETOVERTICALREL_Y = 1020;
		public const uint32 DISPID_ISVGPATHSEGLIST_NUMBEROFITEMS = 1000;
		public const uint32 DISPID_ISVGPATHSEGLIST_CLEAR = 1001;
		public const uint32 DISPID_ISVGPATHSEGLIST_INITIALIZE = 1002;
		public const uint32 DISPID_ISVGPATHSEGLIST_GETITEM = 1003;
		public const uint32 DISPID_ISVGPATHSEGLIST_INSERTITEMBEFORE = 1004;
		public const uint32 DISPID_ISVGPATHSEGLIST_REPLACEITEM = 1005;
		public const uint32 DISPID_ISVGPATHSEGLIST_REMOVEITEM = 1006;
		public const uint32 DISPID_ISVGPATHSEGLIST_APPENDITEM = 1007;
		public const uint32 DISPID_ISVGPOINT_X = 1000;
		public const uint32 DISPID_ISVGPOINT_Y = 1001;
		public const uint32 DISPID_ISVGPOINT_MATRIXTRANSFORM = 1002;
		public const uint32 DISPID_ISVGPOINTLIST_NUMBEROFITEMS = 1000;
		public const uint32 DISPID_ISVGPOINTLIST_CLEAR = 1001;
		public const uint32 DISPID_ISVGPOINTLIST_INITIALIZE = 1002;
		public const uint32 DISPID_ISVGPOINTLIST_GETITEM = 1003;
		public const uint32 DISPID_ISVGPOINTLIST_INSERTITEMBEFORE = 1004;
		public const uint32 DISPID_ISVGPOINTLIST_REPLACEITEM = 1005;
		public const uint32 DISPID_ISVGPOINTLIST_REMOVEITEM = 1006;
		public const uint32 DISPID_ISVGPOINTLIST_APPENDITEM = 1007;
		public const uint32 DISPID_ISVGRECT_X = 1000;
		public const uint32 DISPID_ISVGRECT_Y = 1001;
		public const uint32 DISPID_ISVGRECT_WIDTH = 1002;
		public const uint32 DISPID_ISVGRECT_HEIGHT = 1003;
		public const uint32 DISPID_ISVGSTRINGLIST_NUMBEROFITEMS = 1000;
		public const uint32 DISPID_ISVGSTRINGLIST_CLEAR = 1001;
		public const uint32 DISPID_ISVGSTRINGLIST_INITIALIZE = 1002;
		public const uint32 DISPID_ISVGSTRINGLIST_GETITEM = 1003;
		public const uint32 DISPID_ISVGSTRINGLIST_INSERTITEMBEFORE = 1004;
		public const uint32 DISPID_ISVGSTRINGLIST_REPLACEITEM = 1005;
		public const uint32 DISPID_ISVGSTRINGLIST_REMOVEITEM = 1006;
		public const uint32 DISPID_ISVGSTRINGLIST_APPENDITEM = 1007;
		public const uint32 DISPID_ISVGTRANSFORM_TYPE = 1000;
		public const uint32 DISPID_ISVGTRANSFORM_MATRIX = 1001;
		public const uint32 DISPID_ISVGTRANSFORM_ANGLE = 1002;
		public const uint32 DISPID_ISVGTRANSFORM_SETMATRIX = 1003;
		public const uint32 DISPID_ISVGTRANSFORM_SETTRANSLATE = 1004;
		public const uint32 DISPID_ISVGTRANSFORM_SETSCALE = 1005;
		public const uint32 DISPID_ISVGTRANSFORM_SETROTATE = 1006;
		public const uint32 DISPID_ISVGTRANSFORM_SETSKEWX = 1007;
		public const uint32 DISPID_ISVGTRANSFORM_SETSKEWY = 1008;
		public const uint32 DISPID_ISVGSVGELEMENT_X = 1052;
		public const uint32 DISPID_ISVGSVGELEMENT_Y = 1054;
		public const uint32 DISPID_ISVGSVGELEMENT_WIDTH = 1056;
		public const uint32 DISPID_ISVGSVGELEMENT_HEIGHT = 1058;
		public const uint32 DISPID_ISVGSVGELEMENT_CONTENTSCRIPTTYPE = 1059;
		public const uint32 DISPID_ISVGSVGELEMENT_CONTENTSTYLETYPE = 1060;
		public const uint32 DISPID_ISVGSVGELEMENT_VIEWPORT = 1061;
		public const uint32 DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERX = 1062;
		public const uint32 DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERY = 1063;
		public const uint32 DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERX = 1064;
		public const uint32 DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERY = 1065;
		public const uint32 DISPID_ISVGSVGELEMENT_USECURRENTVIEW = 1066;
		public const uint32 DISPID_ISVGSVGELEMENT_CURRENTVIEW = 1067;
		public const uint32 DISPID_ISVGSVGELEMENT_CURRENTSCALE = 1068;
		public const uint32 DISPID_ISVGSVGELEMENT_CURRENTTRANSLATE = 1069;
		public const uint32 DISPID_ISVGSVGELEMENT_SUSPENDREDRAW = 1070;
		public const uint32 DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAW = 1071;
		public const uint32 DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAWALL = 1072;
		public const uint32 DISPID_ISVGSVGELEMENT_FORCEREDRAW = 1073;
		public const uint32 DISPID_ISVGSVGELEMENT_PAUSEANIMATIONS = 1074;
		public const uint32 DISPID_ISVGSVGELEMENT_UNPAUSEANIMATIONS = 1075;
		public const uint32 DISPID_ISVGSVGELEMENT_ANIMATIONSPAUSED = 1076;
		public const uint32 DISPID_ISVGSVGELEMENT_GETCURRENTTIME = 1077;
		public const uint32 DISPID_ISVGSVGELEMENT_SETCURRENTTIME = 1078;
		public const uint32 DISPID_ISVGSVGELEMENT_GETINTERSECTIONLIST = 1079;
		public const uint32 DISPID_ISVGSVGELEMENT_GETENCLOSURELIST = 1080;
		public const uint32 DISPID_ISVGSVGELEMENT_CHECKINTERSECTION = 1081;
		public const uint32 DISPID_ISVGSVGELEMENT_CHECKENCLOSURE = 1082;
		public const uint32 DISPID_ISVGSVGELEMENT_DESELECTALL = 1083;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGNUMBER = 1084;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGLENGTH = 1085;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGANGLE = 1086;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGPOINT = 1087;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGMATRIX = 1088;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGRECT = 1089;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORM = 1090;
		public const uint32 DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORMFROMMATRIX = 1091;
		public const uint32 DISPID_ISVGSVGELEMENT_GETELEMENTBYID = 1092;
		public const uint32 DISPID_ISVGUSEELEMENT_X = 1052;
		public const uint32 DISPID_ISVGUSEELEMENT_Y = 1054;
		public const uint32 DISPID_ISVGUSEELEMENT_WIDTH = 1056;
		public const uint32 DISPID_ISVGUSEELEMENT_HEIGHT = 1058;
		public const uint32 DISPID_ISVGUSEELEMENT_INSTANCEROOT = 1059;
		public const uint32 DISPID_ISVGUSEELEMENT_ANIMATEDINSTANCEROOT = 1060;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_LENGTH = 1001;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDBY = 1002;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACE = 1004;
		public const uint32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACELENGTH = 1005;
		public const uint32 DISPID_IRULESAPPLIED_ELEMENT = 1001;
		public const uint32 DISPID_IRULESAPPLIED_INLINESTYLES = 1002;
		public const uint32 DISPID_IRULESAPPLIED_APPLIEDRULES = 1003;
		public const uint32 DISPID_IRULESAPPLIED_PROPERTYISINLINE = 1004;
		public const uint32 DISPID_IRULESAPPLIED_PROPERTYISINHERITABLE = 1005;
		public const uint32 DISPID_IRULESAPPLIED_HASINHERITABLEPROPERTY = 1006;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_LENGTH = 1001;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_ELEMENT = 1002;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDFROM = 1003;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYCOUNT = 1004;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTY = 1005;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACE = 1006;
		public const uint32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACELENGTH = 1007;
		public const uint32 DISPID_ISVGTRANSFORMLIST_NUMBEROFITEMS = 1000;
		public const uint32 DISPID_ISVGTRANSFORMLIST_CLEAR = 1001;
		public const uint32 DISPID_ISVGTRANSFORMLIST_INITIALIZE = 1002;
		public const uint32 DISPID_ISVGTRANSFORMLIST_GETITEM = 1003;
		public const uint32 DISPID_ISVGTRANSFORMLIST_INSERTITEMBEFORE = 1004;
		public const uint32 DISPID_ISVGTRANSFORMLIST_REPLACEITEM = 1005;
		public const uint32 DISPID_ISVGTRANSFORMLIST_REMOVEITEM = 1006;
		public const uint32 DISPID_ISVGTRANSFORMLIST_APPENDITEM = 1007;
		public const uint32 DISPID_ISVGTRANSFORMLIST_CREATESVGTRANSFORMFROMMATRIX = 1008;
		public const uint32 DISPID_ISVGTRANSFORMLIST_CONSOLIDATE = 1009;
		public const uint32 DISPID_ISVGANIMATEDPOINTS_POINTS = 1050;
		public const uint32 DISPID_ISVGANIMATEDPOINTS_ANIMATEDPOINTS = 1052;
		public const uint32 DISPID_ISVGCIRCLEELEMENT_CX = 1052;
		public const uint32 DISPID_ISVGCIRCLEELEMENT_CY = 1054;
		public const uint32 DISPID_ISVGCIRCLEELEMENT_R = 1056;
		public const uint32 DISPID_ISVGELLIPSEELEMENT_CX = 1052;
		public const uint32 DISPID_ISVGELLIPSEELEMENT_CY = 1054;
		public const uint32 DISPID_ISVGELLIPSEELEMENT_RX = 1056;
		public const uint32 DISPID_ISVGELLIPSEELEMENT_RY = 1058;
		public const uint32 DISPID_ISVGLINEELEMENT_X1 = 1052;
		public const uint32 DISPID_ISVGLINEELEMENT_Y1 = 1054;
		public const uint32 DISPID_ISVGLINEELEMENT_X2 = 1056;
		public const uint32 DISPID_ISVGLINEELEMENT_Y2 = 1058;
		public const uint32 DISPID_ISVGRECTELEMENT_X = 1052;
		public const uint32 DISPID_ISVGRECTELEMENT_Y = 1054;
		public const uint32 DISPID_ISVGRECTELEMENT_WIDTH = 1056;
		public const uint32 DISPID_ISVGRECTELEMENT_HEIGHT = 1058;
		public const uint32 DISPID_ISVGRECTELEMENT_RX = 1060;
		public const uint32 DISPID_ISVGRECTELEMENT_RY = 1062;
		public const uint32 DISPID_ISVGANIMATEDPATHDATA_PATHSEGLIST = 1052;
		public const uint32 DISPID_ISVGANIMATEDPATHDATA_NORMALIZEDPATHSEGLIST = 1076;
		public const uint32 DISPID_ISVGANIMATEDPATHDATA_ANIMATEDPATHSEGLIST = 1077;
		public const uint32 DISPID_ISVGANIMATEDPATHDATA_ANIMATEDNORMALIZEDPATHSEGLIST = 1078;
		public const uint32 DISPID_ISVGPATHELEMENT_PATHLENGTH = 1053;
		public const uint32 DISPID_ISVGPATHELEMENT_GETTOTALLENGTH = 1073;
		public const uint32 DISPID_ISVGPATHELEMENT_GETPOINTATLENGTH = 1074;
		public const uint32 DISPID_ISVGPATHELEMENT_GETPATHSEGATLENGTH = 1075;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCLOSEPATH = 1054;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOABS = 1055;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOREL = 1056;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOABS = 1057;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOREL = 1058;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICABS = 1059;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICREL = 1060;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICABS = 1061;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICREL = 1062;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCABS = 1063;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCREL = 1064;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALABS = 1065;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALREL = 1066;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALABS = 1067;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALREL = 1068;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHABS = 1069;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHREL = 1070;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHABS = 1071;
		public const uint32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHREL = 1072;
		public const uint32 DISPID_ISVGPRESERVEASPECTRATIO_ALIGN = 1000;
		public const uint32 DISPID_ISVGPRESERVEASPECTRATIO_MEETORSLICE = 1001;
		public const uint32 DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_BASEVAL = 1000;
		public const uint32 DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_ANIMVAL = 1001;
		public const uint32 DISPID_ISVGIMAGEELEMENT_X = 1051;
		public const uint32 DISPID_ISVGIMAGEELEMENT_Y = 1053;
		public const uint32 DISPID_ISVGIMAGEELEMENT_WIDTH = 1055;
		public const uint32 DISPID_ISVGIMAGEELEMENT_HEIGHT = 1057;
		public const uint32 DISPID_ISVGSTOPELEMENT_OFFSET = 1051;
		public const uint32 DISPID_ISVGGRADIENTELEMENT_GRADIENTUNITS = 1051;
		public const uint32 DISPID_ISVGGRADIENTELEMENT_GRADIENTTRANSFORM = 1053;
		public const uint32 DISPID_ISVGGRADIENTELEMENT_SPREADMETHOD = 1055;
		public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_X1 = 1071;
		public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_Y1 = 1073;
		public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_X2 = 1075;
		public const uint32 DISPID_ISVGLINEARGRADIENTELEMENT_Y2 = 1077;
		public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_CX = 1071;
		public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_CY = 1073;
		public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_R = 1075;
		public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_FX = 1077;
		public const uint32 DISPID_ISVGRADIALGRADIENTELEMENT_FY = 1079;
		public const uint32 DISPID_ISVGMASKELEMENT_MASKUNITS = 1051;
		public const uint32 DISPID_ISVGMASKELEMENT_MASKCONTENTUNITS = 1053;
		public const uint32 DISPID_ISVGMASKELEMENT_X = 1055;
		public const uint32 DISPID_ISVGMASKELEMENT_Y = 1057;
		public const uint32 DISPID_ISVGMASKELEMENT_WIDTH = 1059;
		public const uint32 DISPID_ISVGMASKELEMENT_HEIGHT = 1061;
		public const uint32 DISPID_ISVGMARKERELEMENT_REFX = 1051;
		public const uint32 DISPID_ISVGMARKERELEMENT_REFY = 1053;
		public const uint32 DISPID_ISVGMARKERELEMENT_MARKERUNITS = 1055;
		public const uint32 DISPID_ISVGMARKERELEMENT_MARKERWIDTH = 1057;
		public const uint32 DISPID_ISVGMARKERELEMENT_MARKERHEIGHT = 1059;
		public const uint32 DISPID_ISVGMARKERELEMENT_ORIENTTYPE = 1061;
		public const uint32 DISPID_ISVGMARKERELEMENT_ORIENTANGLE = 1062;
		public const uint32 DISPID_ISVGMARKERELEMENT_SETORIENTTOAUTO = 1063;
		public const uint32 DISPID_ISVGMARKERELEMENT_SETORIENTTOANGLE = 1064;
		public const uint32 DISPID_ISVGZOOMEVENT_ZOOMRECTSCREEN = 1276;
		public const uint32 DISPID_ISVGZOOMEVENT_PREVIOUSSCALE = 1277;
		public const uint32 DISPID_ISVGZOOMEVENT_PREVIOUSTRANSLATE = 1278;
		public const uint32 DISPID_ISVGZOOMEVENT_NEWSCALE = 1279;
		public const uint32 DISPID_ISVGZOOMEVENT_NEWTRANSLATE = 1280;
		public const uint32 DISPID_ISVGAELEMENT_TARGET = 1052;
		public const uint32 DISPID_ISVGVIEWELEMENT_VIEWTARGET = 1052;
		public const uint32 DISPID_IHTMLMEDIAERROR_CODE = 1000;
		public const uint32 DISPID_IHTMLTIMERANGES_LENGTH = 1000;
		public const uint32 DISPID_IHTMLTIMERANGES_START = 1001;
		public const uint32 DISPID_IHTMLTIMERANGES_END = 1002;
		public const uint32 DISPID_IHTMLTIMERANGES2_STARTDOUBLE = 1003;
		public const uint32 DISPID_IHTMLTIMERANGES2_ENDDOUBLE = 1004;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_ERROR = 1000;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_SRC = 1001;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_CURRENTSRC = 1002;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_NETWORKSTATE = 1003;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_PRELOAD = 1004;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_BUFFERED = 1005;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_LOAD = 1006;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_CANPLAYTYPE = 1007;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_SEEKING = 1009;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_CURRENTTIME = 1010;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_INITIALTIME = 1011;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_DURATION = 1012;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_PAUSED = 1013;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_DEFAULTPLAYBACKRATE = 1014;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_PLAYBACKRATE = 1015;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_PLAYED = 1016;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_SEEKABLE = 1017;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_ENDED = 1018;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_AUTOPLAY = 1019;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_LOOP = 1020;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_PLAY = 1021;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_PAUSE = 1022;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_CONTROLS = 1023;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_VOLUME = 1024;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_MUTED = 1025;
		public const uint32 DISPID_IHTMLMEDIAELEMENT_AUTOBUFFER = 1026;
		public const uint32 DISPID_IHTMLMEDIAELEMENT2_CURRENTTIMEDOUBLE = 1027;
		public const uint32 DISPID_IHTMLMEDIAELEMENT2_INITIALTIMEDOUBLE = 1028;
		public const uint32 DISPID_IHTMLMEDIAELEMENT2_DURATIONDOUBLE = 1029;
		public const uint32 DISPID_IHTMLMEDIAELEMENT2_DEFAULTPLAYBACKRATEDOUBLE = 1030;
		public const uint32 DISPID_IHTMLMEDIAELEMENT2_PLAYBACKRATEDOUBLE = 1031;
		public const uint32 DISPID_IHTMLMEDIAELEMENT2_VOLUMEDOUBLE = 1032;
		public const uint32 DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTODISABLED = 1033;
		public const uint32 DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTOPRIMARY = 1034;
		public const uint32 DISPID_IHTMLSOURCEELEMENT_SRC = 1000;
		public const uint32 DISPID_IHTMLSOURCEELEMENT_TYPE = 1001;
		public const uint32 DISPID_IHTMLSOURCEELEMENT_MEDIA = 1002;
		public const uint32 DISPID_IHTMLVIDEOELEMENT_WIDTH = 65541;
		public const uint32 DISPID_IHTMLVIDEOELEMENT_HEIGHT = 65542;
		public const uint32 DISPID_IHTMLVIDEOELEMENT_VIDEOWIDTH = 1050;
		public const uint32 DISPID_IHTMLVIDEOELEMENT_VIDEOHEIGHT = 1051;
		public const uint32 DISPID_IHTMLVIDEOELEMENT_POSTER = 1052;
		public const uint32 DISPID_IHTMLAUDIOELEMENTFACTORY_CREATE = 0;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGELEMENT = 1000;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGUSEELEMENT = 1001;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_PARENTNODE = 1002;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_CHILDNODES = 1003;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_FIRSTCHILD = 1004;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_LASTCHILD = 1005;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_PREVIOUSSIBLING = 1006;
		public const uint32 DISPID_ISVGELEMENTINSTANCE_NEXTSIBLING = 1007;
		public const uint32 DISPID_ISVGELEMENTINSTANCELIST_LENGTH = 1000;
		public const uint32 DISPID_ISVGELEMENTINSTANCELIST_ITEM = 1001;
		public const uint32 DISPID_IDOMEXCEPTION_CODE = 1000;
		public const uint32 DISPID_IDOMEXCEPTION_MESSAGE = 1001;
		public const uint32 DISPID_IRANGEEXCEPTION_CODE = 1000;
		public const uint32 DISPID_IRANGEEXCEPTION_MESSAGE = 1001;
		public const uint32 DISPID_ISVGEXCEPTION_CODE = 1000;
		public const uint32 DISPID_ISVGEXCEPTION_MESSAGE = 1001;
		public const uint32 DISPID_IEVENTEXCEPTION_CODE = 1000;
		public const uint32 DISPID_IEVENTEXCEPTION_MESSAGE = 1001;
		public const uint32 DISPID_ISVGSCRIPTELEMENT_TYPE = 1052;
		public const uint32 DISPID_ISVGSTYLEELEMENT_TYPE = 1051;
		public const uint32 DISPID_ISVGSTYLEELEMENT_MEDIA = 1052;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_TEXTLENGTH = 1053;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_LENGTHADJUST = 1051;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETNUMBEROFCHARS = 1054;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETCOMPUTEDTEXTLENGTH = 1055;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETSUBSTRINGLENGTH = 1056;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETSTARTPOSITIONOFCHAR = 1057;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETENDPOSITIONOFCHAR = 1058;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETEXTENTOFCHAR = 1059;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETROTATIONOFCHAR = 1060;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_GETCHARNUMATPOSITION = 1061;
		public const uint32 DISPID_ISVGTEXTCONTENTELEMENT_SELECTSUBSTRING = 1062;
		public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_X = 1071;
		public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_Y = 1073;
		public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_DX = 1075;
		public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_DY = 1077;
		public const uint32 DISPID_ISVGTEXTPOSITIONINGELEMENT_ROTATE = 1079;
		public const uint32 DISPID_IDOMDOCUMENTTYPE_NAME = 1000;
		public const uint32 DISPID_IDOMDOCUMENTTYPE_ENTITIES = 1001;
		public const uint32 DISPID_IDOMDOCUMENTTYPE_NOTATIONS = 1002;
		public const uint32 DISPID_IDOMDOCUMENTTYPE_PUBLICID = 1003;
		public const uint32 DISPID_IDOMDOCUMENTTYPE_SYSTEMID = 1004;
		public const uint32 DISPID_IDOMDOCUMENTTYPE_INTERNALSUBSET = 1005;
		public const uint32 DISPID_IDOMNODEITERATOR_ROOT = 1000;
		public const uint32 DISPID_IDOMNODEITERATOR_WHATTOSHOW = 1001;
		public const uint32 DISPID_IDOMNODEITERATOR_FILTER = 1002;
		public const uint32 DISPID_IDOMNODEITERATOR_EXPANDENTITYREFERENCES = 1003;
		public const uint32 DISPID_IDOMNODEITERATOR_NEXTNODE = 1010;
		public const uint32 DISPID_IDOMNODEITERATOR_PREVIOUSNODE = 1011;
		public const uint32 DISPID_IDOMNODEITERATOR_DETACH = 1012;
		public const uint32 DISPID_IDOMTREEWALKER_ROOT = 1000;
		public const uint32 DISPID_IDOMTREEWALKER_WHATTOSHOW = 1001;
		public const uint32 DISPID_IDOMTREEWALKER_FILTER = 1002;
		public const uint32 DISPID_IDOMTREEWALKER_EXPANDENTITYREFERENCES = 1003;
		public const uint32 DISPID_IDOMTREEWALKER_CURRENTNODE = 1020;
		public const uint32 DISPID_IDOMTREEWALKER_PARENTNODE = 1021;
		public const uint32 DISPID_IDOMTREEWALKER_FIRSTCHILD = 1022;
		public const uint32 DISPID_IDOMTREEWALKER_LASTCHILD = 1023;
		public const uint32 DISPID_IDOMTREEWALKER_PREVIOUSSIBLING = 1024;
		public const uint32 DISPID_IDOMTREEWALKER_NEXTSIBLING = 1025;
		public const uint32 DISPID_IDOMTREEWALKER_PREVIOUSNODE = 1026;
		public const uint32 DISPID_IDOMTREEWALKER_NEXTNODE = 1027;
		public const uint32 DISPID_IDOMPROCESSINGINSTRUCTION_TARGET = 1000;
		public const uint32 DISPID_IDOMPROCESSINGINSTRUCTION_DATA = 1001;
		public const uint32 DISPID_IHTMLPERFORMANCE_NAVIGATION = 1000;
		public const uint32 DISPID_IHTMLPERFORMANCE_TIMING = 1001;
		public const uint32 DISPID_IHTMLPERFORMANCE_TOSTRING = 1002;
		public const uint32 DISPID_IHTMLPERFORMANCE_TOJSON = 1003;
		public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_TYPE = 1000;
		public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_REDIRECTCOUNT = 1001;
		public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_TOSTRING = 1002;
		public const uint32 DISPID_IHTMLPERFORMANCENAVIGATION_TOJSON = 1003;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_NAVIGATIONSTART = 1000;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTSTART = 1001;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTEND = 1002;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_REDIRECTSTART = 1003;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_REDIRECTEND = 1004;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_FETCHSTART = 1005;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPSTART = 1006;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPEND = 1007;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_CONNECTSTART = 1008;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_CONNECTEND = 1009;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_REQUESTSTART = 1010;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_RESPONSESTART = 1011;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_RESPONSEEND = 1012;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMLOADING = 1013;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMINTERACTIVE = 1014;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTSTART = 1015;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTEND = 1016;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_DOMCOMPLETE = 1017;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_LOADEVENTSTART = 1018;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_LOADEVENTEND = 1019;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_MSFIRSTPAINT = 1020;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_TOSTRING = 1021;
		public const uint32 DISPID_IHTMLPERFORMANCETIMING_TOJSON = 1022;
		public const uint32 DISPID_ITEMPLATEPRINTER_STARTDOC = 1;
		public const uint32 DISPID_ITEMPLATEPRINTER_STOPDOC = 2;
		public const uint32 DISPID_ITEMPLATEPRINTER_PRINTBLANKPAGE = 3;
		public const uint32 DISPID_ITEMPLATEPRINTER_PRINTPAGE = 4;
		public const uint32 DISPID_ITEMPLATEPRINTER_ENSUREPRINTDIALOGDEFAULTS = 5;
		public const uint32 DISPID_ITEMPLATEPRINTER_SHOWPRINTDIALOG = 6;
		public const uint32 DISPID_ITEMPLATEPRINTER_SHOWPAGESETUPDIALOG = 7;
		public const uint32 DISPID_ITEMPLATEPRINTER_PRINTNONNATIVE = 8;
		public const uint32 DISPID_ITEMPLATEPRINTER_PRINTNONNATIVEFRAMES = 9;
		public const uint32 DISPID_ITEMPLATEPRINTER_FRAMESETDOCUMENT = 10;
		public const uint32 DISPID_ITEMPLATEPRINTER_FRAMEACTIVE = 11;
		public const uint32 DISPID_ITEMPLATEPRINTER_FRAMEASSHOWN = 12;
		public const uint32 DISPID_ITEMPLATEPRINTER_SELECTION = 13;
		public const uint32 DISPID_ITEMPLATEPRINTER_SELECTEDPAGES = 14;
		public const uint32 DISPID_ITEMPLATEPRINTER_CURRENTPAGE = 15;
		public const uint32 DISPID_ITEMPLATEPRINTER_CURRENTPAGEAVAIL = 16;
		public const uint32 DISPID_ITEMPLATEPRINTER_COLLATE = 17;
		public const uint32 DISPID_ITEMPLATEPRINTER_DUPLEX = 18;
		public const uint32 DISPID_ITEMPLATEPRINTER_COPIES = 19;
		public const uint32 DISPID_ITEMPLATEPRINTER_PAGEFROM = 20;
		public const uint32 DISPID_ITEMPLATEPRINTER_PAGETO = 21;
		public const uint32 DISPID_ITEMPLATEPRINTER_TABLEOFLINKS = 22;
		public const uint32 DISPID_ITEMPLATEPRINTER_ALLLINKEDDOCUMENTS = 23;
		public const uint32 DISPID_ITEMPLATEPRINTER_HEADER = 24;
		public const uint32 DISPID_ITEMPLATEPRINTER_FOOTER = 25;
		public const uint32 DISPID_ITEMPLATEPRINTER_MARGINLEFT = 26;
		public const uint32 DISPID_ITEMPLATEPRINTER_MARGINRIGHT = 27;
		public const uint32 DISPID_ITEMPLATEPRINTER_MARGINTOP = 28;
		public const uint32 DISPID_ITEMPLATEPRINTER_MARGINBOTTOM = 29;
		public const uint32 DISPID_ITEMPLATEPRINTER_PAGEWIDTH = 30;
		public const uint32 DISPID_ITEMPLATEPRINTER_PAGEHEIGHT = 31;
		public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLELEFT = 32;
		public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLETOP = 33;
		public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLERIGHT = 34;
		public const uint32 DISPID_ITEMPLATEPRINTER_UNPRINTABLEBOTTOM = 35;
		public const uint32 DISPID_ITEMPLATEPRINTER_UPDATEPAGESTATUS = 36;
		public const uint32 DISPID_ITEMPLATEPRINTER2_SELECTIONENABLED = 37;
		public const uint32 DISPID_ITEMPLATEPRINTER2_FRAMEACTIVEENABLED = 38;
		public const uint32 DISPID_ITEMPLATEPRINTER2_ORIENTATION = 39;
		public const uint32 DISPID_ITEMPLATEPRINTER2_USEPRINTERCOPYCOLLATE = 40;
		public const uint32 DISPID_ITEMPLATEPRINTER2_DEVICESUPPORTS = 41;
		public const uint32 DISPID_ITEMPLATEPRINTER3_HEADERFOOTERFONT = 42;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOP = 43;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHT = 44;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOM = 45;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFT = 46;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOPIMPORTANT = 47;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHTIMPORTANT = 48;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOMIMPORTANT = 49;
		public const uint32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFTIMPORTANT = 50;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_STARTPRINT = 501;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_DRAWPREVIEWPAGE = 502;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_SETPAGECOUNT = 503;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_INVALIDATEPREVIEW = 504;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_GETPRINTTASKOPTIONVALUE = 505;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_ENDPRINT = 506;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHOWHEADERFOOTER = 507;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHRINKTOFIT = 508;
		public const uint32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_PERCENTSCALE = 509;
		public const uint32 DISPID_ISVGTEXTPATHELEMENT_STARTOFFSET = 1071;
		public const uint32 DISPID_ISVGTEXTPATHELEMENT_METHOD = 1073;
		public const uint32 DISPID_ISVGTEXTPATHELEMENT_SPACING = 1075;
		public const uint32 DISPID_IDOMXMLSERIALIZER_SERIALIZETOSTRING = 1000;
		public const uint32 DISPID_IDOMPARSER_PARSEFROMSTRING = 1000;
		public const uint32 DISPID_IDOMXMLSERIALIZERFACTORY_CREATE = 0;
		public const uint32 DISPID_IDOMPARSERFACTORY_CREATE = 0;
		public const uint32 DISPID_IHTMLPROGRESSELEMENT_VALUE = 0;
		public const uint32 DISPID_IHTMLPROGRESSELEMENT_MAX = 1000;
		public const uint32 DISPID_IHTMLPROGRESSELEMENT_POSITION = 1001;
		public const uint32 DISPID_IHTMLPROGRESSELEMENT_FORM = 67540;
		public const uint32 DISPID_IDOMMSTRANSITIONEVENT_PROPERTYNAME = 1476;
		public const uint32 DISPID_IDOMMSTRANSITIONEVENT_ELAPSEDTIME = 1477;
		public const uint32 DISPID_IDOMMSTRANSITIONEVENT_INITMSTRANSITIONEVENT = 1478;
		public const uint32 DISPID_IDOMMSANIMATIONEVENT_ANIMATIONNAME = 1501;
		public const uint32 DISPID_IDOMMSANIMATIONEVENT_ELAPSEDTIME = 1502;
		public const uint32 DISPID_IDOMMSANIMATIONEVENT_INITMSANIMATIONEVENT = 1503;
		public const uint32 DISPID_IWEBGEOLOCATION_GETCURRENTPOSITION = 1001;
		public const uint32 DISPID_IWEBGEOLOCATION_WATCHPOSITION = 1002;
		public const uint32 DISPID_IWEBGEOLOCATION_CLEARWATCH = 1003;
		public const uint32 DISPID_IWEBGEOCOORDINATES_LATITUDE = 1001;
		public const uint32 DISPID_IWEBGEOCOORDINATES_LONGITUDE = 1002;
		public const uint32 DISPID_IWEBGEOCOORDINATES_ALTITUDE = 1003;
		public const uint32 DISPID_IWEBGEOCOORDINATES_ACCURACY = 1004;
		public const uint32 DISPID_IWEBGEOCOORDINATES_ALTITUDEACCURACY = 1005;
		public const uint32 DISPID_IWEBGEOCOORDINATES_HEADING = 1006;
		public const uint32 DISPID_IWEBGEOCOORDINATES_SPEED = 1007;
		public const uint32 DISPID_IWEBGEOPOSITIONERROR_CODE = 1001;
		public const uint32 DISPID_IWEBGEOPOSITIONERROR_MESSAGE = 1002;
		public const uint32 DISPID_IWEBGEOPOSITION_COORDS = 1001;
		public const uint32 DISPID_IWEBGEOPOSITION_TIMESTAMP = 1002;
		public const uint32 DISPID_ICLIENTCAPS_JAVAENABLED = 1;
		public const uint32 DISPID_ICLIENTCAPS_COOKIEENABLED = 2;
		public const uint32 DISPID_ICLIENTCAPS_CPUCLASS = 3;
		public const uint32 DISPID_ICLIENTCAPS_SYSTEMLANGUAGE = 4;
		public const uint32 DISPID_ICLIENTCAPS_USERLANGUAGE = 5;
		public const uint32 DISPID_ICLIENTCAPS_PLATFORM = 6;
		public const uint32 DISPID_ICLIENTCAPS_CONNECTIONSPEED = 7;
		public const uint32 DISPID_ICLIENTCAPS_ONLINE = 8;
		public const uint32 DISPID_ICLIENTCAPS_COLORDEPTH = 9;
		public const uint32 DISPID_ICLIENTCAPS_BUFFERDEPTH = 10;
		public const uint32 DISPID_ICLIENTCAPS_WIDTH = 11;
		public const uint32 DISPID_ICLIENTCAPS_HEIGHT = 12;
		public const uint32 DISPID_ICLIENTCAPS_AVAILHEIGHT = 13;
		public const uint32 DISPID_ICLIENTCAPS_AVAILWIDTH = 14;
		public const uint32 DISPID_ICLIENTCAPS_CONNECTIONTYPE = 15;
		public const uint32 DISPID_ICLIENTCAPS_ISCOMPONENTINSTALLED = 16;
		public const uint32 DISPID_ICLIENTCAPS_GETCOMPONENTVERSION = 17;
		public const uint32 DISPID_ICLIENTCAPS_COMPAREVERSIONS = 18;
		public const uint32 DISPID_ICLIENTCAPS_ADDCOMPONENTREQUEST = 19;
		public const uint32 DISPID_ICLIENTCAPS_DOCOMPONENTREQUEST = 20;
		public const uint32 DISPID_ICLIENTCAPS_CLEARCOMPONENTREQUEST = 21;
		public const uint32 DISPID_IDOMMSMANIPULATIONEVENT_LASTSTATE = 1526;
		public const uint32 DISPID_IDOMMSMANIPULATIONEVENT_CURRENTSTATE = 1527;
		public const uint32 DISPID_IDOMMSMANIPULATIONEVENT_INITMSMANIPULATIONEVENT = 1528;
		public const uint32 DISPID_IDOMCLOSEEVENT_WASCLEAN = 1526;
		public const uint32 DISPID_IDOMCLOSEEVENT_INITCLOSEEVENT = 1529;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_STATUS = 1001;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONCHECKING = 71717;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONERROR = 71565;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONNOUPDATE = 71718;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONDOWNLOADING = 71719;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONPROGRESS = 71681;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONUPDATEREADY = 71720;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONCACHED = 71721;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ONOBSOLETE = 71722;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_UPDATE = 1002;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_SWAPCACHE = 1003;
		public const uint32 DISPID_IHTMLAPPLICATIONCACHE_ABORT = 1004;
		public const uint32 DISPID_ILINEINFO_X = 1001;
		public const uint32 DISPID_ILINEINFO_BASELINE = 1002;
		public const uint32 DISPID_ILINEINFO_TEXTDESCENT = 1003;
		public const uint32 DISPID_ILINEINFO_TEXTHEIGHT = 1004;
		public const uint32 DISPID_ILINEINFO_LINEDIRECTION = 1005;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_BOLD = 1001;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_ITALIC = 1002;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE = 1003;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE = 1004;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT = 1005;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT = 1006;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT = 1007;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE = 1008;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT = 1009;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE = 1010;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME = 1011;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR = 1012;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR = 1013;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR = 1014;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED = 1015;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION = 1016;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION = 1017;
		public const uint32 DISPID_IHTMLCOMPUTEDSTYLE_OL = 1018;
		public const uint32 DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG = 1;
		public const uint32 DISPID_IHTMLDLGSAFEHELPER_GETCHARSET = 2;
		public const uint32 DISPID_IHTMLDLGSAFEHELPER_FONTS = 3;
		public const uint32 DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS = 4;
		public const int32 DISPID_IBLOCKFORMATS__NEWENUM = -4;
		public const uint32 DISPID_IBLOCKFORMATS_COUNT = 1;
		public const uint32 DISPID_IBLOCKFORMATS_ITEM = 0;
		public const int32 DISPID_IFONTNAMES__NEWENUM = -4;
		public const uint32 DISPID_IFONTNAMES_COUNT = 1;
		public const uint32 DISPID_IFONTNAMES_ITEM = 0;
		public const uint32 DISPID_IHTMLNAMESPACE_NAME = 1000;
		public const uint32 DISPID_IHTMLNAMESPACE_URN = 1001;
		public const uint32 DISPID_IHTMLNAMESPACE_TAGNAMES = 1002;
		public const uint32 DISPID_IHTMLNAMESPACE_READYSTATE = 70652;
		public const uint32 DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE = 71561;
		public const uint32 DISPID_IHTMLNAMESPACE_DOIMPORT = 1003;
		public const uint32 DISPID_IHTMLNAMESPACE_ATTACHEVENT = 66043;
		public const uint32 DISPID_IHTMLNAMESPACE_DETACHEVENT = 66044;
		public const uint32 DISPID_IHTMLNAMESPACECOLLECTION_LENGTH = 1000;
		public const uint32 DISPID_IHTMLNAMESPACECOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLNAMESPACECOLLECTION_ADD = 1001;
		public const int32 DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE = -609;
		public const uint32 DISPID_IHTMLIPRINTCOLLECTION_LENGTH = 1501;
		public const int32 DISPID_IHTMLIPRINTCOLLECTION__NEWENUM = -4;
		public const uint32 DISPID_IHTMLIPRINTCOLLECTION_ITEM = 0;
		public const uint32 DISPID_IHTMLDIALOG_DIALOGTOP = 65540;
		public const uint32 DISPID_IHTMLDIALOG_DIALOGLEFT = 65539;
		public const uint32 DISPID_IHTMLDIALOG_DIALOGWIDTH = 65541;
		public const uint32 DISPID_IHTMLDIALOG_DIALOGHEIGHT = 65542;
		public const uint32 DISPID_IHTMLDIALOG_DIALOGARGUMENTS = 25000;
		public const uint32 DISPID_IHTMLDIALOG_MENUARGUMENTS = 25013;
		public const uint32 DISPID_IHTMLDIALOG_RETURNVALUE = 25001;
		public const uint32 DISPID_IHTMLDIALOG_CLOSE = 25011;
		public const uint32 DISPID_IHTMLDIALOG_TOSTRING = 25012;
		public const uint32 DISPID_IHTMLDIALOG2_STATUS = 25014;
		public const uint32 DISPID_IHTMLDIALOG2_RESIZABLE = 25015;
		public const uint32 DISPID_IHTMLDIALOG3_UNADORNED = 25016;
		public const uint32 DISPID_IHTMLDIALOG3_DIALOGHIDE = 25007;
		public const uint32 DISPID_IHTMLMODELESSINIT_PARAMETERS = 25000;
		public const uint32 DISPID_IHTMLMODELESSINIT_OPTIONSTRING = 25001;
		public const uint32 DISPID_IHTMLMODELESSINIT_MONIKER = 25006;
		public const uint32 DISPID_IHTMLMODELESSINIT_DOCUMENT = 25007;
		public const uint32 DISPID_IHTMLPOPUP_SHOW = 27001;
		public const uint32 DISPID_IHTMLPOPUP_HIDE = 27002;
		public const uint32 DISPID_IHTMLPOPUP_DOCUMENT = 27003;
		public const uint32 DISPID_IHTMLPOPUP_ISOPEN = 27004;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME = 5000;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_VERSION = 5001;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_ICON = 5002;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE = 5003;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON = 5005;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON = 5006;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_BORDER = 5007;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE = 5008;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_SYSMENU = 5009;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_CAPTION = 5010;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE = 5011;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR = 5012;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE = 5013;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU = 5014;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER = 5015;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR2_SCROLL = 5016;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT = 5017;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR2_SELECTION = 5018;
		public const uint32 DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE = 5019;
		public const uint32 DISPID_IHTMLTXTRANGEINTERNAL_GET_VISIBLETEXT = 1050;
		public const uint32 DISPID_IE9EVENTS_ABORT = 1000;
		public const uint32 DISPID_IE9EVENTS_ACTIVATE = 1044;
		public const uint32 DISPID_IE9EVENTS_AFTERPRINT = 1025;
		public const uint32 DISPID_IE9EVENTS_BEFOREACTIVATE = 1047;
		public const uint32 DISPID_IE9EVENTS_BEFOREDEACTIVATE = 1034;
		public const uint32 DISPID_IE9EVENTS_BEFOREUNLOAD = 1017;
		public const uint32 DISPID_IE9EVENTS_BEFOREPRINT = 1024;
		public const uint32 DISPID_IE9EVENTS_BOUNCE = 1009;
		public const uint32 DISPID_IE9EVENTS_CHANGE = 1001;
		public const int32 DISPID_IE9EVENTS_CLICK = -600;
		public const uint32 DISPID_IE9EVENTS_COMPLETE = 71727;
		public const uint32 DISPID_IE9EVENTS_CONTEXTMENU = 1023;
		public const uint32 DISPID_IE9EVENTS_DEACTIVATE = 1045;
		public const uint32 DISPID_IE9EVENTS_DOMCONTENTLOADED = 71662;
		public const uint32 DISPID_IE9EVENTS_SUCCESS = 71725;
		public const uint32 DISPID_IE9EVENTS_ERROR = 1002;
		public const uint32 DISPID_IE9EVENTS_FINISH = 1010;
		public const uint32 DISPID_IE9EVENTS_FOCUS = 65537;
		public const uint32 DISPID_IE9EVENTS_FOCUSIN = 1048;
		public const uint32 DISPID_IE9EVENTS_FOCUSOUT = 1049;
		public const uint32 DISPID_IE9EVENTS_HASHCHANGE = 1066;
		public const uint32 DISPID_IE9EVENTS_HELP = 65546;
		public const uint32 DISPID_IE9EVENTS_INPUT = 71663;
		public const uint32 DISPID_IE9EVENTS_LOAD = 1003;
		public const int32 DISPID_IE9EVENTS_KEYDOWN = -602;
		public const int32 DISPID_IE9EVENTS_KEYPRESS = -603;
		public const int32 DISPID_IE9EVENTS_KEYUP = -604;
		public const uint32 DISPID_IE9EVENTS_MESSAGE = 1067;
		public const uint32 DISPID_IE9EVENTS_ONLINE = 1064;
		public const uint32 DISPID_IE9EVENTS_OFFLINE = 1065;
		public const int32 DISPID_IE9EVENTS_READYSTATECHANGE = -609;
		public const uint32 DISPID_IE9EVENTS_RESET = 1015;
		public const uint32 DISPID_IE9EVENTS_RESIZE = 1016;
		public const uint32 DISPID_IE9EVENTS_SCROLL = 1014;
		public const uint32 DISPID_IE9EVENTS_SELECT = 1006;
		public const uint32 DISPID_IE9EVENTS_SELECTIONCHANGE = 1037;
		public const uint32 DISPID_IE9EVENTS_SELECTSTART = 65548;
		public const uint32 DISPID_IE9EVENTS_START = 1011;
		public const uint32 DISPID_IE9EVENTS_STOP = 1026;
		public const uint32 DISPID_IE9EVENTS_STORAGE = 1057;
		public const uint32 DISPID_IE9EVENTS_STORAGECOMMIT = 1058;
		public const uint32 DISPID_IE9EVENTS_SUBMIT = 1007;
		public const uint32 DISPID_IE9EVENTS_TEXTINPUT = 71665;
		public const uint32 DISPID_IE9EVENTS_TIMEOUT = 0;
		public const uint32 DISPID_IE9EVENTS_UNLOAD = 1008;
		public const uint32 DISPID_IE9EVENTS_WHEEL = 71649;
		public const int32 DISPID_IE9EVENTS_DBLCLICK = -601;
		public const int32 DISPID_IE9EVENTS_MOUSEDOWN = -605;
		public const uint32 DISPID_IE9EVENTS_MOUSEENTER = 1042;
		public const uint32 DISPID_IE9EVENTS_MOUSELEAVE = 1043;
		public const int32 DISPID_IE9EVENTS_MOUSEMOVE = -606;
		public const uint32 DISPID_IE9EVENTS_MOUSEOUT = 65545;
		public const uint32 DISPID_IE9EVENTS_MOUSEOVER = 65544;
		public const int32 DISPID_IE9EVENTS_MOUSEUP = -607;
		public const uint32 DISPID_IE9EVENTS_MOUSEWHEEL = 1033;
		public const uint32 DISPID_IE9EVENTS_BEFORECOPY = 65566;
		public const uint32 DISPID_IE9EVENTS_BEFORECUT = 65565;
		public const uint32 DISPID_IE9EVENTS_BEFOREPASTE = 65567;
		public const uint32 DISPID_IE9EVENTS_COPY = 65563;
		public const uint32 DISPID_IE9EVENTS_CUT = 65562;
		public const uint32 DISPID_IE9EVENTS_DRAG = 65556;
		public const uint32 DISPID_IE9EVENTS_DRAGEND = 65557;
		public const uint32 DISPID_IE9EVENTS_DRAGENTER = 65558;
		public const uint32 DISPID_IE9EVENTS_DRAGLEAVE = 65560;
		public const uint32 DISPID_IE9EVENTS_DRAGOVER = 65559;
		public const uint32 DISPID_IE9EVENTS_DRAGSTART = 65547;
		public const uint32 DISPID_IE9EVENTS_DROP = 65561;
		public const uint32 DISPID_IE9EVENTS_PASTE = 65564;
		public const uint32 DISPID_IE9EVENTS_MSBEFOREEDITFOCUS = 1027;
		public const uint32 DISPID_IE9EVENTS_MSCONTROLSELECT = 1036;
		public const uint32 DISPID_IE9EVENTS_MSCONTROLRESIZESTART = 1040;
		public const uint32 DISPID_IE9EVENTS_MSCONTROLRESIZEEND = 1041;
		public const uint32 DISPID_IE9EVENTS_COMPOSITIONSTART = 71658;
		public const uint32 DISPID_IE9EVENTS_COMPOSITIONUPDATE = 71659;
		public const uint32 DISPID_IE9EVENTS_COMPOSITIONEND = 71660;
		public const uint32 DISPID_IE9EVENTS_DOMATTRMODIFIED = 71661;
		public const uint32 DISPID_IE9EVENTS_DOMCHARACTERDATAMODIFIED = 71664;
		public const uint32 DISPID_IE9EVENTS_DOMNODEINSERTED = 71667;
		public const uint32 DISPID_IE9EVENTS_DOMNODEREMOVED = 71668;
		public const uint32 DISPID_IE9EVENTS_DOMSUBTREEMODIFIED = 71669;
		public const uint32 DISPID_IE9EVENTS_SVGLOAD = 71650;
		public const uint32 DISPID_IE9EVENTS_SVGUNLOAD = 71651;
		public const uint32 DISPID_IE9EVENTS_SVGABORT = 71652;
		public const uint32 DISPID_IE9EVENTS_SVGERROR = 71653;
		public const uint32 DISPID_IE9EVENTS_SVGRESIZE = 71654;
		public const uint32 DISPID_IE9EVENTS_SVGSCROLL = 71655;
		public const uint32 DISPID_IE9EVENTS_SVGZOOM = 71656;
		public const uint32 DISPID_IE9EVENTS_MSTHUMBNAILCLICK = 71657;
		public const uint32 DISPID_IE9EVENTS_MSSITEMODEJUMPLISTITEMREMOVED = 71666;
		public const uint32 DISPID_IE9EVENTS_CANPLAY = 71670;
		public const uint32 DISPID_IE9EVENTS_CANPLAYTHROUGH = 71671;
		public const uint32 DISPID_IE9EVENTS_DURATIONCHANGE = 71672;
		public const uint32 DISPID_IE9EVENTS_EMPTIED = 71673;
		public const uint32 DISPID_IE9EVENTS_ENDED = 71674;
		public const uint32 DISPID_IE9EVENTS_LOADEDDATA = 71675;
		public const uint32 DISPID_IE9EVENTS_LOADEDMETADATA = 71676;
		public const uint32 DISPID_IE9EVENTS_LOADSTART = 71677;
		public const uint32 DISPID_IE9EVENTS_PAUSE = 71678;
		public const uint32 DISPID_IE9EVENTS_PLAY = 71679;
		public const uint32 DISPID_IE9EVENTS_PLAYING = 71680;
		public const uint32 DISPID_IE9EVENTS_PROGRESS = 71681;
		public const uint32 DISPID_IE9EVENTS_RATECHANGE = 71682;
		public const uint32 DISPID_IE9EVENTS_SEEKED = 71683;
		public const uint32 DISPID_IE9EVENTS_SEEKING = 71684;
		public const uint32 DISPID_IE9EVENTS_STALLED = 71685;
		public const uint32 DISPID_IE9EVENTS_SUSPEND = 71686;
		public const uint32 DISPID_IE9EVENTS_TIMEUPDATE = 71687;
		public const uint32 DISPID_IE9EVENTS_VOLUMECHANGE = 71688;
		public const uint32 DISPID_IE9EVENTS_WAITING = 71689;
		public const uint32 DISPID_IE9EVENTS_BLOCKED = 71726;
		public const uint32 DISPID_IE9EVENTS_UPGRADENEEDED = 71734;
		public const uint32 DISPID_IE9EVENTS_CUECHANGE = 71729;
		public const uint32 DISPID_IE9EVENTS_ENTER = 71730;
		public const uint32 DISPID_IE9EVENTS_EXIT = 71731;
		public const uint32 DISPID_IE9EVENTS_ADDTRACK = 71736;
		public const uint32 DISPID_IE9EVENTS_REMOVETRACK = 71781;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERDOWN = 71690;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERMOVE = 71691;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERUP = 71692;
		public const uint32 DISPID_IE9EVENTS_MSPOINTEROVER = 71693;
		public const uint32 DISPID_IE9EVENTS_MSPOINTEROUT = 71694;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERCANCEL = 71695;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERHOVER = 71696;
		public const uint32 DISPID_IE9EVENTS_MSLOSTPOINTERCAPTURE = 71706;
		public const uint32 DISPID_IE9EVENTS_MSGOTPOINTERCAPTURE = 71707;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERENTER = 71769;
		public const uint32 DISPID_IE9EVENTS_MSPOINTERLEAVE = 71770;
		public const uint32 DISPID_IE9EVENTS_TOUCHSTART = 71784;
		public const uint32 DISPID_IE9EVENTS_TOUCHEND = 71785;
		public const uint32 DISPID_IE9EVENTS_TOUCHMOVE = 71786;
		public const uint32 DISPID_IE9EVENTS_TOUCHCANCEL = 71787;
		public const uint32 DISPID_IE9EVENTS_MSGESTURESTART = 71699;
		public const uint32 DISPID_IE9EVENTS_MSGESTURECHANGE = 71700;
		public const uint32 DISPID_IE9EVENTS_MSGESTUREEND = 71701;
		public const uint32 DISPID_IE9EVENTS_MSGESTUREHOLD = 71702;
		public const uint32 DISPID_IE9EVENTS_MSGESTURETAP = 71703;
		public const uint32 DISPID_IE9EVENTS_MSGESTUREDOUBLETAP = 71704;
		public const uint32 DISPID_IE9EVENTS_MSINERTIASTART = 71705;
		public const uint32 DISPID_IE9EVENTS_MSCONTENTZOOM = 71708;
		public const uint32 DISPID_IE9EVENTS_MSHOLDVISUAL = 71738;
		public const uint32 DISPID_IE9EVENTS_TRANSITIONSTART = 71709;
		public const uint32 DISPID_IE9EVENTS_TRANSITIONEND = 71710;
		public const uint32 DISPID_IE9EVENTS_ANIMATIONSTART = 71711;
		public const uint32 DISPID_IE9EVENTS_ANIMATIONEND = 71712;
		public const uint32 DISPID_IE9EVENTS_ANIMATIONITERATION = 71713;
		public const uint32 DISPID_IE9EVENTS_MSMANIPULATIONSTATECHANGED = 71714;
		public const uint32 DISPID_IE9EVENTS_CHECKING = 71717;
		public const uint32 DISPID_IE9EVENTS_NOUPDATE = 71718;
		public const uint32 DISPID_IE9EVENTS_DOWNLOADING = 71719;
		public const uint32 DISPID_IE9EVENTS_UPDATEREADY = 71720;
		public const uint32 DISPID_IE9EVENTS_CACHED = 71721;
		public const uint32 DISPID_IE9EVENTS_OBSOLETE = 71722;
		public const uint32 DISPID_IE9EVENTS_INVALID = 71724;
		public const uint32 DISPID_IE9EVENTS_OPEN = 71715;
		public const uint32 DISPID_IE9EVENTS_CLOSE = 71716;
		public const uint32 DISPID_IE9EVENTS_LOADEND = 71723;
		public const uint32 DISPID_IE9EVENTS_POPSTATE = 71728;
		public const uint32 DISPID_IE9EVENTS_VISIBILITYCHANGE = 71732;
		public const uint32 DISPID_IE9EVENTS_MSREGIONUPDATE = 71733;
		public const uint32 DISPID_IE9EVENTS_MSVIDEOFORMATCHANGED = 71735;
		public const uint32 DISPID_IE9EVENTS_MSVIDEOFRAMESTEPCOMPLETED = 71737;
		public const uint32 DISPID_IE9EVENTS_MSVIDEOOPTIMALLAYOUTCHANGED = 71739;
		public const uint32 DISPID_IE9EVENTS_MSFULLSCREENCHANGE = 71740;
		public const uint32 DISPID_IE9EVENTS_MSFULLSCREENERROR = 71741;
		public const uint32 DISPID_IE9EVENTS_MSELEMENTRESIZE = 71742;
		public const uint32 DISPID_IE9EVENTS_SOURCEOPEN = 71743;
		public const uint32 DISPID_IE9EVENTS_SOURCEENDED = 71745;
		public const uint32 DISPID_IE9EVENTS_SOURCECLOSE = 71744;
		public const uint32 DISPID_IE9EVENTS_ADDSOURCEBUFFER = 71746;
		public const uint32 DISPID_IE9EVENTS_REMOVESOURCEBUFFER = 71747;
		public const uint32 DISPID_IE9EVENTS_UPDATESTART = 71766;
		public const uint32 DISPID_IE9EVENTS_UPDATE = 71767;
		public const uint32 DISPID_IE9EVENTS_UPDATEEND = 71768;
		public const uint32 DISPID_IE9EVENTS_MSNEEDKEY = 71748;
		public const uint32 DISPID_IE9EVENTS_MSKEYMESSAGE = 71749;
		public const uint32 DISPID_IE9EVENTS_MSKEYERROR = 71750;
		public const uint32 DISPID_IE9EVENTS_MSKEYADDED = 71751;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWDOMCONTENTLOADED = 71752;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWCONTENTLOADING = 71753;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONSTARTING = 71754;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONCOMPLETED = 71755;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMEDOMCONTENTLOADED = 71756;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMECONTENTLOADING = 71757;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONSTARTING = 71758;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONCOMPLETED = 71759;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWSCRIPTNOTIFY = 71760;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWLONGRUNNINGSCRIPTDETECTED = 71763;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWUNVIEWABLECONTENTIDENTIFIED = 71761;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWUNSAFECONTENTWARNINGDISPLAYING = 71762;
		public const uint32 DISPID_IE9EVENTS_MSWEBVIEWCONTAINSFULLSCREENELEMENTCHANGED = 71783;
		public const uint32 DISPID_IE9EVENTS_WEBGLCONTEXTLOST = 71764;
		public const uint32 DISPID_IE9EVENTS_WEBGLCONTEXTRESTORED = 71765;
		public const uint32 DISPID_IE9EVENTS_WEBGLCONTEXTCREATIONERROR = 71792;
		public const uint32 DISPID_IE9EVENTS_MSSITEPINNED = 71771;
		public const uint32 DISPID_IE9EVENTS_MSORIENTATIONCHANGE = 71772;
		public const uint32 DISPID_IE9EVENTS_ORIENTATIONCHANGE = 71795;
		public const uint32 DISPID_IE9EVENTS_DEVICEORIENTATION = 71773;
		public const uint32 DISPID_IE9EVENTS_DEVICEMOTION = 71774;
		public const uint32 DISPID_IE9EVENTS_COMPASSNEEDSCALIBRATION = 71782;
		public const uint32 DISPID_IE9EVENTS_PAGESHOW = 71775;
		public const uint32 DISPID_IE9EVENTS_PAGEHIDE = 71776;
		public const uint32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWSHOW = 71777;
		public const uint32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWUPDATE = 71778;
		public const uint32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWHIDE = 71779;
		public const uint32 CONTEXT_MENU_DEFAULT = 0;
		public const uint32 CONTEXT_MENU_IMAGE = 1;
		public const uint32 CONTEXT_MENU_CONTROL = 2;
		public const uint32 CONTEXT_MENU_TABLE = 3;
		public const uint32 CONTEXT_MENU_TEXTSELECT = 4;
		public const uint32 CONTEXT_MENU_ANCHOR = 5;
		public const uint32 CONTEXT_MENU_UNKNOWN = 6;
		public const uint32 CONTEXT_MENU_IMGDYNSRC = 7;
		public const uint32 CONTEXT_MENU_DEBUG = 8;
		public const uint32 CONTEXT_MENU_VSCROLL = 9;
		public const uint32 CONTEXT_MENU_HSCROLL = 10;
		public const uint32 CONTEXT_MENU_MEDIA = 11;
		public const uint32 CONTEXT_MENU_ENTITY = 12;
		public const uint32 CONTEXT_MENU_PDF = 13;
		public const uint32 CONTEXT_MENU_DISABLEDFLASH = 14;
		public const uint32 MENUEXT_SHOWDIALOG = 1;
		public const uint32 HTMLDLG_NOUI = 16;
		public const uint32 HTMLDLG_MODAL = 32;
		public const uint32 HTMLDLG_MODELESS = 64;
		public const uint32 HTMLDLG_PRINT_TEMPLATE = 128;
		public const uint32 HTMLDLG_VERIFY = 256;
		public const uint32 HTMLDLG_ALLOW_UNKNOWN_THREAD = 512;
		public const uint32 PRINT_DONTBOTHERUSER = 1;
		public const uint32 PRINT_WAITFORCOMPLETION = 2;
		public const uint32 CMDID_SCRIPTSITE_URL = 0;
		public const uint32 CMDID_SCRIPTSITE_HTMLDLGTRUST = 1;
		public const uint32 CMDID_SCRIPTSITE_SECSTATE = 2;
		public const uint32 CMDID_SCRIPTSITE_SID = 3;
		public const uint32 CMDID_SCRIPTSITE_TRUSTEDDOC = 4;
		public const uint32 CMDID_SCRIPTSITE_SECURITY_WINDOW = 5;
		public const uint32 CMDID_SCRIPTSITE_NAMESPACE = 6;
		public const uint32 CMDID_SCRIPTSITE_IURI = 7;
		public const uint32 CMDID_HOSTCONTEXT_URL = 8;
		public const uint32 CMDID_SCRIPTSITE_ALLOWRECOVERY = 9;
		public const uint32 CMDID_SCRIPTSITE_BASEIURI = 10;
		public const Guid CGID_DocHostCommandHandler = .(0xf38bc242, 0xb950, 0x11d1, 0x89, 0x18, 0x00, 0xc0, 0x4f, 0xc2, 0xc8, 0x36);
		public const uint32 IECMDID_CLEAR_AUTOCOMPLETE_FOR_FORMS = 0;
		public const uint32 IECMDID_SETID_AUTOCOMPLETE_FOR_FORMS = 1;
		public const uint32 IECMDID_BEFORENAVIGATE_GETSHELLBROWSE = 2;
		public const uint32 IECMDID_BEFORENAVIGATE_DOEXTERNALBROWSE = 3;
		public const uint32 IECMDID_BEFORENAVIGATE_GETIDLIST = 4;
		public const uint32 IECMDID_SET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 5;
		public const uint32 IECMDID_GET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 6;
		public const uint32 IECMDID_ARG_CLEAR_FORMS_ALL = 0;
		public const uint32 IECMDID_ARG_CLEAR_FORMS_ALL_BUT_PASSWORDS = 1;
		public const uint32 IECMDID_ARG_CLEAR_FORMS_PASSWORDS_ONLY = 2;
		public const Guid CATID_MSOfficeAntiVirus = .(0x56ffcc30, 0xd398, 0x11d0, 0xb2, 0xae, 0x00, 0xa0, 0xc9, 0x08, 0xfa, 0x49);
		public const uint32 STATURL_QUERYFLAG_ISCACHED = 65536;
		public const uint32 STATURL_QUERYFLAG_NOURL = 131072;
		public const uint32 STATURL_QUERYFLAG_NOTITLE = 262144;
		public const uint32 STATURL_QUERYFLAG_TOPLEVEL = 524288;
		public const uint32 STATURLFLAG_ISCACHED = 1;
		public const uint32 STATURLFLAG_ISTOPLEVEL = 2;
		public const uint32 SURFACE_LOCK_EXCLUSIVE = 1;
		public const uint32 SURFACE_LOCK_ALLOW_DISCARD = 2;
		public const uint32 SURFACE_LOCK_WAIT = 4;
		public const int32 E_SURFACE_NOSURFACE = -2147434496;
		public const int32 E_SURFACE_UNKNOWN_FORMAT = -2147434495;
		public const int32 E_SURFACE_NOTMYPOINTER = -2147434494;
		public const int32 E_SURFACE_DISCARDED = -2147434493;
		public const int32 E_SURFACE_NODC = -2147434492;
		public const int32 E_SURFACE_NOTMYDC = -2147434491;
		public const int32 S_SURFACE_DISCARDED = 49155;
		public const uint32 COLOR_NO_TRANSPARENT = 4294967295;
		public const uint32 IMGDECODE_EVENT_PROGRESS = 1;
		public const uint32 IMGDECODE_EVENT_PALETTE = 2;
		public const uint32 IMGDECODE_EVENT_BEGINBITS = 4;
		public const uint32 IMGDECODE_EVENT_BITSCOMPLETE = 8;
		public const uint32 IMGDECODE_EVENT_USEDDRAW = 16;
		public const uint32 IMGDECODE_HINT_TOPDOWN = 1;
		public const uint32 IMGDECODE_HINT_BOTTOMUP = 2;
		public const uint32 IMGDECODE_HINT_FULLWIDTH = 4;
		public const uint32 MAPMIME_DEFAULT = 0;
		public const uint32 MAPMIME_CLSID = 1;
		public const uint32 MAPMIME_DISABLE = 2;
		public const uint32 MAPMIME_DEFAULT_ALWAYS = 3;
		public const uint32 TIMERMODE_NORMAL = 0;
		public const uint32 TIMERMODE_VISIBILITYAWARE = 1;
		
		// --- Enums ---
		
		public enum htmlDesignMode : int32
		{
			ModeInherit = -2,
			ModeOn = -1,
			ModeOff = 0,
			Mode_Max = 2147483647,
		}
		public enum htmlZOrder : int32
		{
			ZOrderFront = 0,
			ZOrderBack = 1,
			ZOrder_Max = 2147483647,
		}
		public enum htmlClear : int32
		{
			ClearNotSet = 0,
			ClearAll = 1,
			ClearLeft = 2,
			ClearRight = 3,
			ClearBoth = 4,
			ClearNone = 5,
			Clear_Max = 2147483647,
		}
		public enum htmlControlAlign : int32
		{
			AlignNotSet = 0,
			AlignLeft = 1,
			AlignCenter = 2,
			AlignRight = 3,
			AlignTextTop = 4,
			AlignAbsMiddle = 5,
			AlignBaseline = 6,
			AlignAbsBottom = 7,
			AlignBottom = 8,
			AlignMiddle = 9,
			AlignTop = 10,
			Align_Max = 2147483647,
		}
		public enum htmlBlockAlign : int32
		{
			AlignNotSet = 0,
			AlignLeft = 1,
			AlignCenter = 2,
			AlignRight = 3,
			AlignJustify = 4,
			Align_Max = 2147483647,
		}
		public enum htmlReadyState : int32
		{
			Stateuninitialized = 0,
			Stateloading = 1,
			Stateloaded = 2,
			Stateinteractive = 3,
			Statecomplete = 4,
			State_Max = 2147483647,
		}
		public enum htmlLoop : int32
		{
			LoopLoopInfinite = -1,
			Loop_Max = 2147483647,
		}
		public enum mediaType : int32
		{
			TypeNotSet = 0,
			TypeAll = 511,
			TypeAural = 1,
			TypeBraille = 2,
			TypeEmbossed = 4,
			TypeHandheld = 8,
			TypePrint = 16,
			TypeProjection = 32,
			TypeScreen = 64,
			TypeTty = 128,
			TypeTv = 256,
			Type_Max = 2147483647,
		}
		public enum DomConstructor : int32
		{
			ConstructorObject = 0,
			ConstructorAttr = 1,
			ConstructorBehaviorUrnsCollection = 2,
			ConstructorBookmarkCollection = 3,
			ConstructorCompatibleInfo = 4,
			ConstructorCompatibleInfoCollection = 5,
			ConstructorControlRangeCollection = 6,
			ConstructorCSSCurrentStyleDeclaration = 7,
			ConstructorCSSRuleList = 8,
			ConstructorCSSRuleStyleDeclaration = 9,
			ConstructorCSSStyleDeclaration = 10,
			ConstructorCSSStyleRule = 11,
			ConstructorCSSStyleSheet = 12,
			ConstructorDataTransfer = 13,
			ConstructorDOMImplementation = 14,
			ConstructorElement = 15,
			ConstructorEvent = 16,
			ConstructorHistory = 17,
			ConstructorHTCElementBehaviorDefaults = 18,
			ConstructorHTMLAnchorElement = 19,
			ConstructorHTMLAreaElement = 20,
			ConstructorHTMLAreasCollection = 21,
			ConstructorHTMLBaseElement = 22,
			ConstructorHTMLBaseFontElement = 23,
			ConstructorHTMLBGSoundElement = 24,
			ConstructorHTMLBlockElement = 25,
			ConstructorHTMLBodyElement = 26,
			ConstructorHTMLBRElement = 27,
			ConstructorHTMLButtonElement = 28,
			ConstructorHTMLCollection = 29,
			ConstructorHTMLCommentElement = 30,
			ConstructorHTMLDDElement = 31,
			ConstructorHTMLDivElement = 32,
			ConstructorHTMLDocument = 33,
			ConstructorHTMLDListElement = 34,
			ConstructorHTMLDTElement = 35,
			ConstructorHTMLEmbedElement = 36,
			ConstructorHTMLFieldSetElement = 37,
			ConstructorHTMLFontElement = 38,
			ConstructorHTMLFormElement = 39,
			ConstructorHTMLFrameElement = 40,
			ConstructorHTMLFrameSetElement = 41,
			ConstructorHTMLGenericElement = 42,
			ConstructorHTMLHeadElement = 43,
			ConstructorHTMLHeadingElement = 44,
			ConstructorHTMLHRElement = 45,
			ConstructorHTMLHtmlElement = 46,
			ConstructorHTMLIFrameElement = 47,
			ConstructorHTMLImageElement = 48,
			ConstructorHTMLInputElement = 49,
			ConstructorHTMLIsIndexElement = 50,
			ConstructorHTMLLabelElement = 51,
			ConstructorHTMLLegendElement = 52,
			ConstructorHTMLLIElement = 53,
			ConstructorHTMLLinkElement = 54,
			ConstructorHTMLMapElement = 55,
			ConstructorHTMLMarqueeElement = 56,
			ConstructorHTMLMetaElement = 57,
			ConstructorHTMLModelessDialog = 58,
			ConstructorHTMLNamespaceInfo = 59,
			ConstructorHTMLNamespaceInfoCollection = 60,
			ConstructorHTMLNextIdElement = 61,
			ConstructorHTMLNoShowElement = 62,
			ConstructorHTMLObjectElement = 63,
			ConstructorHTMLOListElement = 64,
			ConstructorHTMLOptionElement = 65,
			ConstructorHTMLParagraphElement = 66,
			ConstructorHTMLParamElement = 67,
			ConstructorHTMLPhraseElement = 68,
			ConstructorHTMLPluginsCollection = 69,
			ConstructorHTMLPopup = 70,
			ConstructorHTMLScriptElement = 71,
			ConstructorHTMLSelectElement = 72,
			ConstructorHTMLSpanElement = 73,
			ConstructorHTMLStyleElement = 74,
			ConstructorHTMLTableCaptionElement = 75,
			ConstructorHTMLTableCellElement = 76,
			ConstructorHTMLTableColElement = 77,
			ConstructorHTMLTableElement = 78,
			ConstructorHTMLTableRowElement = 79,
			ConstructorHTMLTableSectionElement = 80,
			ConstructorHTMLTextAreaElement = 81,
			ConstructorHTMLTextElement = 82,
			ConstructorHTMLTitleElement = 83,
			ConstructorHTMLUListElement = 84,
			ConstructorHTMLUnknownElement = 85,
			ConstructorImage = 86,
			ConstructorLocation = 87,
			ConstructorNamedNodeMap = 88,
			ConstructorNavigator = 89,
			ConstructorNodeList = 90,
			ConstructorOption = 91,
			ConstructorScreen = 92,
			ConstructorSelection = 93,
			ConstructorStaticNodeList = 94,
			ConstructorStorage = 95,
			ConstructorStyleSheetList = 96,
			ConstructorStyleSheetPage = 97,
			ConstructorStyleSheetPageList = 98,
			ConstructorText = 99,
			ConstructorTextRange = 100,
			ConstructorTextRangeCollection = 101,
			ConstructorTextRectangle = 102,
			ConstructorTextRectangleList = 103,
			ConstructorWindow = 104,
			ConstructorXDomainRequest = 105,
			ConstructorXMLHttpRequest = 106,
			ConstructorMax = 107,
			Constructor_Max = 2147483647,
		}
		public enum styleTextTransform : int32
		{
			TransformNotSet = 0,
			TransformCapitalize = 1,
			TransformLowercase = 2,
			TransformUppercase = 3,
			TransformNone = 4,
			Transform_Max = 2147483647,
		}
		public enum styleDataRepeat : int32
		{
			RepeatNone = 0,
			RepeatInner = 1,
			Repeat_Max = 2147483647,
		}
		public enum styleOverflow : int32
		{
			OverflowNotSet = 0,
			OverflowAuto = 1,
			OverflowHidden = 2,
			OverflowVisible = 3,
			OverflowScroll = 4,
			Overflow_Max = 2147483647,
		}
		public enum styleMsOverflowStyle : int32
		{
			StyleNotSet = 0,
			StyleAuto = 1,
			StyleNone = 2,
			StyleScrollbar = 3,
			StyleMsAutoHidingScrollbar = 4,
			Style_Max = 2147483647,
		}
		public enum styleTableLayout : int32
		{
			LayoutNotSet = 0,
			LayoutAuto = 1,
			LayoutFixed = 2,
			Layout_Max = 2147483647,
		}
		public enum styleBorderCollapse : int32
		{
			CollapseNotSet = 0,
			CollapseSeparate = 1,
			CollapseCollapse = 2,
			Collapse_Max = 2147483647,
		}
		public enum styleCaptionSide : int32
		{
			SideNotSet = 0,
			SideTop = 1,
			SideBottom = 2,
			SideLeft = 3,
			SideRight = 4,
			Side_Max = 2147483647,
		}
		public enum styleEmptyCells : int32
		{
			CellsNotSet = 0,
			CellsShow = 1,
			CellsHide = 2,
			Cells_Max = 2147483647,
		}
		public enum styleFontStyle : int32
		{
			StyleNotSet = 0,
			StyleItalic = 1,
			StyleOblique = 2,
			StyleNormal = 3,
			Style_Max = 2147483647,
		}
		public enum styleFontVariant : int32
		{
			VariantNotSet = 0,
			VariantSmallCaps = 1,
			VariantNormal = 2,
			Variant_Max = 2147483647,
		}
		public enum styleBackgroundRepeat : int32
		{
			RepeatRepeat = 0,
			RepeatRepeatX = 1,
			RepeatRepeatY = 2,
			RepeatNoRepeat = 3,
			RepeatNotSet = 4,
			Repeat_Max = 2147483647,
		}
		public enum styleBackgroundAttachment : int32
		{
			AttachmentFixed = 0,
			AttachmentScroll = 1,
			AttachmentNotSet = 2,
			Attachment_Max = 2147483647,
		}
		public enum styleBackgroundAttachment3 : int32
		{
			Attachment3Fixed = 0,
			Attachment3Scroll = 1,
			Attachment3Local = 2,
			Attachment3NotSet = 3,
			Attachment3_Max = 2147483647,
		}
		public enum styleBackgroundClip : int32
		{
			ClipBorderBox = 0,
			ClipPaddingBox = 1,
			ClipContentBox = 2,
			ClipNotSet = 3,
			Clip_Max = 2147483647,
		}
		public enum styleBackgroundOrigin : int32
		{
			OriginBorderBox = 0,
			OriginPaddingBox = 1,
			OriginContentBox = 2,
			OriginNotSet = 3,
			Origin_Max = 2147483647,
		}
		public enum styleVerticalAlign : int32
		{
			AlignAuto = 0,
			AlignBaseline = 1,
			AlignSub = 2,
			AlignSuper = 3,
			AlignTop = 4,
			AlignTextTop = 5,
			AlignMiddle = 6,
			AlignBottom = 7,
			AlignTextBottom = 8,
			AlignInherit = 9,
			AlignNotSet = 10,
			Align_Max = 2147483647,
		}
		public enum styleFontWeight : int32
		{
			WeightNotSet = 0,
			Weight100 = 1,
			Weight200 = 2,
			Weight300 = 3,
			Weight400 = 4,
			Weight500 = 5,
			Weight600 = 6,
			Weight700 = 7,
			Weight800 = 8,
			Weight900 = 9,
			WeightNormal = 10,
			WeightBold = 11,
			WeightBolder = 12,
			WeightLighter = 13,
			Weight_Max = 2147483647,
		}
		public enum styleFontSize : int32
		{
			SizeXXSmall = 0,
			SizeXSmall = 1,
			SizeSmall = 2,
			SizeMedium = 3,
			SizeLarge = 4,
			SizeXLarge = 5,
			SizeXXLarge = 6,
			SizeSmaller = 7,
			SizeLarger = 8,
			Size_Max = 2147483647,
		}
		public enum styleZIndex : int32
		{
			ZIndexAuto = -2147483647,
			ZIndex_Max = 2147483647,
		}
		public enum styleWidowsOrphans : int32
		{
			OrphansNotSet = -2147483647,
			Orphans_Max = 2147483647,
		}
		public enum styleAuto : int32
		{
			AutoAuto = 0,
			Auto_Max = 2147483647,
		}
		public enum styleNone : int32
		{
			NoneNone = 0,
			None_Max = 2147483647,
		}
		public enum styleNormal : int32
		{
			NormalNormal = 0,
			Normal_Max = 2147483647,
		}
		public enum styleBorderWidth : int32
		{
			WidthThin = 0,
			WidthMedium = 1,
			WidthThick = 2,
			Width_Max = 2147483647,
		}
		public enum stylePosition : int32
		{
			PositionNotSet = 0,
			Positionstatic = 1,
			Positionrelative = 2,
			Positionabsolute = 3,
			Positionfixed = 4,
			PositionMsPage = 5,
			PositionMsDeviceFixed = 6,
			Position_Max = 2147483647,
		}
		public enum styleBorderStyle : int32
		{
			StyleNotSet = 0,
			StyleDotted = 1,
			StyleDashed = 2,
			StyleSolid = 3,
			StyleDouble = 4,
			StyleGroove = 5,
			StyleRidge = 6,
			StyleInset = 7,
			StyleOutset = 8,
			StyleWindowInset = 9,
			StyleNone = 10,
			StyleHidden = 11,
			Style_Max = 2147483647,
		}
		public enum styleOutlineStyle : int32
		{
			StyleNotSet = 0,
			StyleDotted = 1,
			StyleDashed = 2,
			StyleSolid = 3,
			StyleDouble = 4,
			StyleGroove = 5,
			StyleRidge = 6,
			StyleInset = 7,
			StyleOutset = 8,
			StyleWindowInset = 9,
			StyleNone = 10,
			Style_Max = 2147483647,
		}
		public enum styleStyleFloat : int32
		{
			FloatNotSet = 0,
			FloatLeft = 1,
			FloatRight = 2,
			FloatNone = 3,
			Float_Max = 2147483647,
		}
		public enum styleDisplay : int32
		{
			DisplayNotSet = 0,
			DisplayBlock = 1,
			DisplayInline = 2,
			DisplayListItem = 3,
			DisplayNone = 4,
			DisplayTableHeaderGroup = 5,
			DisplayTableFooterGroup = 6,
			DisplayInlineBlock = 7,
			DisplayTable = 8,
			DisplayInlineTable = 9,
			DisplayTableRow = 10,
			DisplayTableRowGroup = 11,
			DisplayTableColumn = 12,
			DisplayTableColumnGroup = 13,
			DisplayTableCell = 14,
			DisplayTableCaption = 15,
			DisplayRunIn = 16,
			DisplayRuby = 17,
			DisplayRubyBase = 18,
			DisplayRubyText = 19,
			DisplayRubyBaseContainer = 20,
			DisplayRubyTextContainer = 21,
			DisplayMsFlexbox = 22,
			DisplayMsInlineFlexbox = 23,
			DisplayMsGrid = 24,
			DisplayMsInlineGrid = 25,
			DisplayFlex = 26,
			DisplayInlineFlex = 27,
			DisplayWebkitBox = 28,
			DisplayWebkitInlineBox = 29,
			Display_Max = 2147483647,
		}
		public enum styleVisibility : int32
		{
			VisibilityNotSet = 0,
			VisibilityInherit = 1,
			VisibilityVisible = 2,
			VisibilityHidden = 3,
			VisibilityCollapse = 4,
			Visibility_Max = 2147483647,
		}
		public enum styleListStyleType : int32
		{
			TypeNotSet = 0,
			TypeDisc = 1,
			TypeCircle = 2,
			TypeSquare = 3,
			TypeDecimal = 4,
			TypeLowerRoman = 5,
			TypeUpperRoman = 6,
			TypeLowerAlpha = 7,
			TypeUpperAlpha = 8,
			TypeNone = 9,
			TypeDecimalLeadingZero = 10,
			TypeGeorgian = 11,
			TypeArmenian = 12,
			TypeUpperLatin = 13,
			TypeLowerLatin = 14,
			TypeUpperGreek = 15,
			TypeLowerGreek = 16,
			Type_Max = 2147483647,
		}
		public enum styleListStylePosition : int32
		{
			PositionNotSet = 0,
			PositionInside = 1,
			PositionOutSide = 2,
			Position_Max = 2147483647,
		}
		public enum styleWhiteSpace : int32
		{
			SpaceNotSet = 0,
			SpaceNormal = 1,
			SpacePre = 2,
			SpaceNowrap = 3,
			SpacePreline = 4,
			SpacePrewrap = 5,
			Space_Max = 2147483647,
		}
		public enum stylePageBreak : int32
		{
			BreakNotSet = 0,
			BreakAuto = 1,
			BreakAlways = 2,
			BreakLeft = 3,
			BreakRight = 4,
			BreakAvoid = 5,
			Break_Max = 2147483647,
		}
		public enum stylePageBreakInside : int32
		{
			InsideNotSet = 0,
			InsideAuto = 1,
			InsideAvoid = 2,
			Inside_Max = 2147483647,
		}
		public enum styleCursor : int32
		{
			CursorAuto = 0,
			CursorCrosshair = 1,
			CursorDefault = 2,
			CursorHand = 3,
			CursorMove = 4,
			CursorE_resize = 5,
			CursorNe_resize = 6,
			CursorNw_resize = 7,
			CursorN_resize = 8,
			CursorSe_resize = 9,
			CursorSw_resize = 10,
			CursorS_resize = 11,
			CursorW_resize = 12,
			CursorText = 13,
			CursorWait = 14,
			CursorHelp = 15,
			CursorPointer = 16,
			CursorProgress = 17,
			CursorNot_allowed = 18,
			CursorNo_drop = 19,
			CursorVertical_text = 20,
			Cursorall_scroll = 21,
			Cursorcol_resize = 22,
			Cursorrow_resize = 23,
			CursorNone = 24,
			CursorContext_menu = 25,
			CursorEw_resize = 26,
			CursorNs_resize = 27,
			CursorNesw_resize = 28,
			CursorNwse_resize = 29,
			CursorCell = 30,
			CursorCopy = 31,
			CursorAlias = 32,
			Cursorcustom = 33,
			CursorNotSet = 34,
			Cursor_Max = 2147483647,
		}
		public enum styleDir : int32
		{
			DirNotSet = 0,
			DirLeftToRight = 1,
			DirRightToLeft = 2,
			DirInherit = 3,
			Dir_Max = 2147483647,
		}
		public enum styleBidi : int32
		{
			BidiNotSet = 0,
			BidiNormal = 1,
			BidiEmbed = 2,
			BidiOverride = 3,
			BidiInherit = 4,
			Bidi_Max = 2147483647,
		}
		public enum styleImeMode : int32
		{
			ModeAuto = 0,
			ModeActive = 1,
			ModeInactive = 2,
			ModeDisabled = 3,
			ModeNotSet = 4,
			Mode_Max = 2147483647,
		}
		public enum styleRubyAlign : int32
		{
			AlignNotSet = 0,
			AlignAuto = 1,
			AlignLeft = 2,
			AlignCenter = 3,
			AlignRight = 4,
			AlignDistributeLetter = 5,
			AlignDistributeSpace = 6,
			AlignLineEdge = 7,
			Align_Max = 2147483647,
		}
		public enum styleRubyPosition : int32
		{
			PositionNotSet = 0,
			PositionAbove = 1,
			PositionInline = 2,
			Position_Max = 2147483647,
		}
		public enum styleRubyOverhang : int32
		{
			OverhangNotSet = 0,
			OverhangAuto = 1,
			OverhangWhitespace = 2,
			OverhangNone = 3,
			Overhang_Max = 2147483647,
		}
		public enum styleLayoutGridChar : int32
		{
			CharNotSet = 0,
			CharAuto = 1,
			CharNone = 2,
			Char_Max = 2147483647,
		}
		public enum styleLayoutGridLine : int32
		{
			LineNotSet = 0,
			LineAuto = 1,
			LineNone = 2,
			Line_Max = 2147483647,
		}
		public enum styleLayoutGridMode : int32
		{
			ModeNotSet = 0,
			ModeChar = 1,
			ModeLine = 2,
			ModeBoth = 3,
			ModeNone = 4,
			Mode_Max = 2147483647,
		}
		public enum styleLayoutGridType : int32
		{
			TypeNotSet = 0,
			TypeLoose = 1,
			TypeStrict = 2,
			TypeFixed = 3,
			Type_Max = 2147483647,
		}
		public enum styleLineBreak : int32
		{
			BreakNotSet = 0,
			BreakNormal = 1,
			BreakStrict = 2,
			Break_Max = 2147483647,
		}
		public enum styleWordBreak : int32
		{
			BreakNotSet = 0,
			BreakNormal = 1,
			BreakBreakAll = 2,
			BreakKeepAll = 3,
			Break_Max = 2147483647,
		}
		public enum styleWordWrap : int32
		{
			WrapNotSet = 0,
			WrapOff = 1,
			WrapOn = 2,
			Wrap_Max = 2147483647,
		}
		public enum styleTextJustify : int32
		{
			JustifyNotSet = 0,
			JustifyInterWord = 1,
			JustifyNewspaper = 2,
			JustifyDistribute = 3,
			JustifyDistributeAllLines = 4,
			JustifyInterIdeograph = 5,
			JustifyInterCluster = 6,
			JustifyKashida = 7,
			JustifyAuto = 8,
			Justify_Max = 2147483647,
		}
		public enum styleTextAlignLast : int32
		{
			LastNotSet = 0,
			LastLeft = 1,
			LastCenter = 2,
			LastRight = 3,
			LastJustify = 4,
			LastAuto = 5,
			Last_Max = 2147483647,
		}
		public enum styleTextJustifyTrim : int32
		{
			TrimNotSet = 0,
			TrimNone = 1,
			TrimPunctuation = 2,
			TrimPunctAndKana = 3,
			Trim_Max = 2147483647,
		}
		public enum styleAccelerator : int32
		{
			AcceleratorFalse = 0,
			AcceleratorTrue = 1,
			Accelerator_Max = 2147483647,
		}
		public enum styleLayoutFlow : int32
		{
			FlowHorizontal = 0,
			FlowVerticalIdeographic = 1,
			FlowNotSet = 2,
			Flow_Max = 2147483647,
		}
		public enum styleBlockProgression : int32
		{
			ProgressionTb = 0,
			ProgressionRl = 1,
			ProgressionBt = 2,
			ProgressionLr = 3,
			ProgressionNotSet = 4,
			Progression_Max = 2147483647,
		}
		public enum styleWritingMode : int32
		{
			ModeLrtb = 0,
			ModeTbrl = 1,
			ModeRltb = 2,
			ModeBtrl = 3,
			ModeNotSet = 4,
			ModeTblr = 5,
			ModeBtlr = 6,
			ModeLrbt = 7,
			ModeRlbt = 8,
			ModeLr = 9,
			ModeRl = 10,
			ModeTb = 11,
			Mode_Max = 2147483647,
		}
		public enum styleBool : int32
		{
			BoolFalse = 0,
			BoolTrue = 1,
			Bool_Max = 2147483647,
		}
		public enum styleTextUnderlinePosition : int32
		{
			PositionBelow = 0,
			PositionAbove = 1,
			PositionAuto = 2,
			PositionNotSet = 3,
			Position_Max = 2147483647,
		}
		public enum styleTextOverflow : int32
		{
			OverflowClip = 0,
			OverflowEllipsis = 1,
			OverflowNotSet = 2,
			Overflow_Max = 2147483647,
		}
		public enum styleInterpolation : int32
		{
			InterpolationNotSet = 0,
			InterpolationNN = 1,
			InterpolationBCH = 2,
			Interpolation_Max = 2147483647,
		}
		public enum styleBoxSizing : int32
		{
			SizingNotSet = 0,
			SizingContentBox = 1,
			SizingBorderBox = 2,
			Sizing_Max = 2147483647,
		}
		public enum styleFlex : int32
		{
			FlexNone = 0,
			FlexNotSet = 1,
			Flex_Max = 2147483647,
		}
		public enum styleFlexBasis : int32
		{
			BasisAuto = 0,
			BasisNotSet = 1,
			Basis_Max = 2147483647,
		}
		public enum styleFlexDirection : int32
		{
			DirectionRow = 0,
			DirectionRowReverse = 1,
			DirectionColumn = 2,
			DirectionColumnReverse = 3,
			DirectionNotSet = 4,
			Direction_Max = 2147483647,
		}
		public enum styleWebkitBoxOrient : int32
		{
			OrientHorizontal = 0,
			OrientInlineAxis = 1,
			OrientVertical = 2,
			OrientBlockAxis = 3,
			OrientNotSet = 4,
			Orient_Max = 2147483647,
		}
		public enum styleWebkitBoxDirection : int32
		{
			DirectionNormal = 0,
			DirectionReverse = 1,
			DirectionNotSet = 2,
			Direction_Max = 2147483647,
		}
		public enum styleFlexWrap : int32
		{
			WrapNowrap = 0,
			WrapWrap = 1,
			WrapWrapReverse = 2,
			WrapNotSet = 3,
			Wrap_Max = 2147483647,
		}
		public enum styleAlignItems : int32
		{
			ItemsFlexStart = 0,
			ItemsFlexEnd = 1,
			ItemsCenter = 2,
			ItemsBaseline = 3,
			ItemsStretch = 4,
			ItemsNotSet = 5,
			Items_Max = 2147483647,
		}
		public enum styleMsFlexAlign : int32
		{
			AlignStart = 0,
			AlignEnd = 1,
			AlignCenter = 2,
			AlignBaseline = 3,
			AlignStretch = 4,
			AlignNotSet = 5,
			Align_Max = 2147483647,
		}
		public enum styleMsFlexItemAlign : int32
		{
			AlignStart = 0,
			AlignEnd = 1,
			AlignCenter = 2,
			AlignBaseline = 3,
			AlignStretch = 4,
			AlignAuto = 5,
			AlignNotSet = 6,
			Align_Max = 2147483647,
		}
		public enum styleAlignSelf : int32
		{
			SelfFlexStart = 0,
			SelfFlexEnd = 1,
			SelfCenter = 2,
			SelfBaseline = 3,
			SelfStretch = 4,
			SelfAuto = 5,
			SelfNotSet = 6,
			Self_Max = 2147483647,
		}
		public enum styleJustifyContent : int32
		{
			ContentFlexStart = 0,
			ContentFlexEnd = 1,
			ContentCenter = 2,
			ContentSpaceBetween = 3,
			ContentSpaceAround = 4,
			ContentNotSet = 5,
			Content_Max = 2147483647,
		}
		public enum styleMsFlexPack : int32
		{
			PackStart = 0,
			PackEnd = 1,
			PackCenter = 2,
			PackJustify = 3,
			PackDistribute = 4,
			PackNotSet = 5,
			Pack_Max = 2147483647,
		}
		public enum styleWebkitBoxPack : int32
		{
			PackStart = 0,
			PackEnd = 1,
			PackCenter = 2,
			PackJustify = 3,
			PackNotSet = 5,
			Pack_Max = 2147483647,
		}
		public enum styleMsFlexLinePack : int32
		{
			PackStart = 0,
			PackEnd = 1,
			PackCenter = 2,
			PackJustify = 3,
			PackDistribute = 4,
			PackStretch = 5,
			PackNotSet = 6,
			Pack_Max = 2147483647,
		}
		public enum styleAlignContent : int32
		{
			ContentFlexStart = 0,
			ContentFlexEnd = 1,
			ContentCenter = 2,
			ContentSpaceBetween = 3,
			ContentSpaceAround = 4,
			ContentStretch = 5,
			ContentNotSet = 6,
			Content_Max = 2147483647,
		}
		public enum styleColumnFill : int32
		{
			FillAuto = 0,
			FillBalance = 1,
			FillNotSet = 2,
			Fill_Max = 2147483647,
		}
		public enum styleColumnSpan : int32
		{
			SpanNone = 0,
			SpanAll = 1,
			SpanOne = 2,
			SpanNotSet = 3,
			Span_Max = 2147483647,
		}
		public enum styleBreak : int32
		{
			BreakNotSet = 0,
			BreakAuto = 1,
			BreakAlways = 2,
			BreakAvoid = 3,
			BreakLeft = 4,
			BreakRight = 5,
			BreakPage = 6,
			BreakColumn = 7,
			BreakAvoidPage = 8,
			BreakAvoidColumn = 9,
			Break_Max = 2147483647,
		}
		public enum styleBreakInside : int32
		{
			InsideNotSet = 0,
			InsideAuto = 1,
			InsideAvoid = 2,
			InsideAvoidPage = 3,
			InsideAvoidColumn = 4,
			Inside_Max = 2147483647,
		}
		public enum styleMsScrollChaining : int32
		{
			ChainingNotSet = 0,
			ChainingNone = 1,
			ChainingChained = 2,
			Chaining_Max = 2147483647,
		}
		public enum styleMsContentZooming : int32
		{
			ZoomingNotSet = 0,
			ZoomingNone = 1,
			ZoomingZoom = 2,
			Zooming_Max = 2147483647,
		}
		public enum styleMsContentZoomSnapType : int32
		{
			TypeNotSet = 0,
			TypeNone = 1,
			TypeMandatory = 2,
			TypeProximity = 3,
			Type_Max = 2147483647,
		}
		public enum styleMsScrollRails : int32
		{
			RailsNotSet = 0,
			RailsNone = 1,
			RailsRailed = 2,
			Rails_Max = 2147483647,
		}
		public enum styleMsContentZoomChaining : int32
		{
			ChainingNotSet = 0,
			ChainingNone = 1,
			ChainingChained = 2,
			Chaining_Max = 2147483647,
		}
		public enum styleMsScrollSnapType : int32
		{
			TypeNotSet = 0,
			TypeNone = 1,
			TypeMandatory = 2,
			TypeProximity = 3,
			Type_Max = 2147483647,
		}
		public enum styleGridColumn : int32
		{
			ColumnNotSet = 0,
			Column_Max = 2147483647,
		}
		public enum styleGridColumnAlign : int32
		{
			AlignCenter = 0,
			AlignEnd = 1,
			AlignStart = 2,
			AlignStretch = 3,
			AlignNotSet = 4,
			Align_Max = 2147483647,
		}
		public enum styleGridColumnSpan : int32
		{
			SpanNotSet = 0,
			Span_Max = 2147483647,
		}
		public enum styleGridRow : int32
		{
			RowNotSet = 0,
			Row_Max = 2147483647,
		}
		public enum styleGridRowAlign : int32
		{
			AlignCenter = 0,
			AlignEnd = 1,
			AlignStart = 2,
			AlignStretch = 3,
			AlignNotSet = 4,
			Align_Max = 2147483647,
		}
		public enum styleGridRowSpan : int32
		{
			SpanNotSet = 0,
			Span_Max = 2147483647,
		}
		public enum styleWrapThrough : int32
		{
			ThroughNotSet = 0,
			ThroughWrap = 1,
			ThroughNone = 2,
			Through_Max = 2147483647,
		}
		public enum styleWrapFlow : int32
		{
			FlowNotSet = 0,
			FlowAuto = 1,
			FlowBoth = 2,
			FlowStart = 3,
			FlowEnd = 4,
			FlowClear = 5,
			FlowMinimum = 6,
			FlowMaximum = 7,
			Flow_Max = 2147483647,
		}
		public enum styleAlignmentBaseline : int32
		{
			BaselineNotSet = 0,
			BaselineAfterEdge = 1,
			BaselineAlphabetic = 2,
			BaselineAuto = 3,
			BaselineBaseline = 4,
			BaselineBeforeEdge = 5,
			BaselineCentral = 6,
			BaselineHanging = 7,
			BaselineMathematical = 8,
			BaselineMiddle = 9,
			BaselineTextAfterEdge = 10,
			BaselineTextBeforeEdge = 11,
			BaselineIdeographic = 12,
			Baseline_Max = 2147483647,
		}
		public enum styleBaselineShift : int32
		{
			ShiftBaseline = 0,
			ShiftSub = 1,
			ShiftSuper = 2,
			Shift_Max = 2147483647,
		}
		public enum styleClipRule : int32
		{
			RuleNotSet = 0,
			RuleNonZero = 1,
			RuleEvenOdd = 2,
			Rule_Max = 2147483647,
		}
		public enum styleDominantBaseline : int32
		{
			BaselineNotSet = 0,
			BaselineAlphabetic = 1,
			BaselineAuto = 2,
			BaselineCentral = 3,
			BaselineHanging = 4,
			BaselineIdeographic = 5,
			BaselineMathematical = 6,
			BaselineMiddle = 7,
			BaselineNoChange = 8,
			BaselineResetSize = 9,
			BaselineTextAfterEdge = 10,
			BaselineTextBeforeEdge = 11,
			BaselineUseScript = 12,
			Baseline_Max = 2147483647,
		}
		public enum styleFillRule : int32
		{
			RuleNotSet = 0,
			RuleNonZero = 1,
			RuleEvenOdd = 2,
			Rule_Max = 2147483647,
		}
		public enum styleFontStretch : int32
		{
			StretchNotSet = 0,
			StretchWider = 1,
			StretchNarrower = 2,
			StretchUltraCondensed = 3,
			StretchExtraCondensed = 4,
			StretchCondensed = 5,
			StretchSemiCondensed = 6,
			StretchNormal = 7,
			StretchSemiExpanded = 8,
			StretchExpanded = 9,
			StretchExtraExpanded = 10,
			StretchUltraExpanded = 11,
			Stretch_Max = 2147483647,
		}
		public enum stylePointerEvents : int32
		{
			EventsNotSet = 0,
			EventsVisiblePainted = 1,
			EventsVisibleFill = 2,
			EventsVisibleStroke = 3,
			EventsVisible = 4,
			EventsPainted = 5,
			EventsFill = 6,
			EventsStroke = 7,
			EventsAll = 8,
			EventsNone = 9,
			EventsInitial = 10,
			EventsAuto = 11,
			Events_Max = 2147483647,
		}
		public enum styleEnableBackground : int32
		{
			BackgroundNotSet = 0,
			BackgroundAccumulate = 1,
			BackgroundNew = 2,
			BackgroundInherit = 3,
			Background_Max = 2147483647,
		}
		public enum styleStrokeLinecap : int32
		{
			LinecapNotSet = 0,
			LinecapButt = 1,
			LinecapRound = 2,
			LinecapSquare = 3,
			Linecap_Max = 2147483647,
		}
		public enum styleStrokeLinejoin : int32
		{
			LinejoinNotSet = 0,
			LinejoinMiter = 1,
			LinejoinRound = 2,
			LinejoinBevel = 3,
			Linejoin_Max = 2147483647,
		}
		public enum styleTextAnchor : int32
		{
			AnchorNotSet = 0,
			AnchorStart = 1,
			AnchorMiddle = 2,
			AnchorEnd = 3,
			Anchor_Max = 2147483647,
		}
		public enum styleAttrType : int32
		{
			TypeString = 0,
			TypeColor = 1,
			TypeUrl = 2,
			TypeInteger = 3,
			TypeNumber = 4,
			TypeLength = 5,
			TypePx = 6,
			TypeEm = 7,
			TypeEx = 8,
			TypeIn = 9,
			TypeCm = 10,
			TypeMm = 11,
			TypePt = 12,
			TypePc = 13,
			TypeRem = 14,
			TypeCh = 15,
			TypeVh = 16,
			TypeVw = 17,
			TypeVmin = 18,
			TypePercentage = 19,
			TypeAngle = 20,
			TypeDeg = 21,
			TypeRad = 22,
			TypeGrad = 23,
			TypeTime = 24,
			TypeS = 25,
			TypeMs = 26,
			Type_Max = 2147483647,
		}
		public enum styleInitialColor : int32
		{
			ColorNoInitial = 0,
			ColorColorProperty = 1,
			ColorTransparent = 2,
			ColorInvert = 3,
			Color_Max = 2147483647,
		}
		public enum styleInitialString : int32
		{
			StringNoInitial = 0,
			StringNone = 1,
			StringAuto = 2,
			StringNormal = 3,
			String_Max = 2147483647,
		}
		public enum styleTransformOriginX : int32
		{
			XNotSet = 0,
			XLeft = 1,
			XCenter = 2,
			XRight = 3,
			X_Max = 2147483647,
		}
		public enum styleTransformOriginY : int32
		{
			YNotSet = 0,
			YTop = 1,
			YCenter = 2,
			YBottom = 3,
			Y_Max = 2147483647,
		}
		public enum stylePerspectiveOriginX : int32
		{
			XNotSet = 0,
			XLeft = 1,
			XCenter = 2,
			XRight = 3,
			X_Max = 2147483647,
		}
		public enum stylePerspectiveOriginY : int32
		{
			YNotSet = 0,
			YTop = 1,
			YCenter = 2,
			YBottom = 3,
			Y_Max = 2147483647,
		}
		public enum styleTransformStyle : int32
		{
			StyleFlat = 0,
			StylePreserve3D = 1,
			StyleNotSet = 2,
			Style_Max = 2147483647,
		}
		public enum styleBackfaceVisibility : int32
		{
			VisibilityVisible = 0,
			VisibilityHidden = 1,
			VisibilityNotSet = 2,
			Visibility_Max = 2147483647,
		}
		public enum styleTextSizeAdjust : int32
		{
			AdjustNone = 0,
			AdjustAuto = 1,
			Adjust_Max = 2147483647,
		}
		public enum styleColorInterpolationFilters : int32
		{
			FiltersAuto = 0,
			FiltersSRgb = 1,
			FiltersLinearRgb = 2,
			FiltersNotSet = 3,
			Filters_Max = 2147483647,
		}
		public enum styleHyphens : int32
		{
			HyphensNone = 0,
			HyphensManual = 1,
			HyphensAuto = 2,
			HyphensNotSet = 3,
			Hyphens_Max = 2147483647,
		}
		public enum styleHyphenateLimitLines : int32
		{
			LinesNoLimit = 0,
			Lines_Max = 2147483647,
		}
		public enum styleMsAnimationPlayState : int32
		{
			StateRunning = 0,
			StatePaused = 1,
			StateNotSet = 2,
			State_Max = 2147483647,
		}
		public enum styleMsAnimationDirection : int32
		{
			DirectionNormal = 0,
			DirectionAlternate = 1,
			DirectionReverse = 2,
			DirectionAlternateReverse = 3,
			DirectionNotSet = 4,
			Direction_Max = 2147483647,
		}
		public enum styleMsAnimationFillMode : int32
		{
			ModeNone = 0,
			ModeForwards = 1,
			ModeBackwards = 2,
			ModeBoth = 3,
			ModeNotSet = 4,
			Mode_Max = 2147483647,
		}
		public enum styleMsHighContrastAdjust : int32
		{
			AdjustNotSet = 0,
			AdjustAuto = 1,
			AdjustNone = 2,
			Adjust_Max = 2147483647,
		}
		public enum styleMsUserSelect : int32
		{
			SelectAuto = 0,
			SelectText = 1,
			SelectElement = 2,
			SelectNone = 3,
			SelectNotSet = 4,
			Select_Max = 2147483647,
		}
		public enum styleMsTouchAction : int32
		{
			ActionNotSet = -1,
			ActionNone = 0,
			ActionAuto = 1,
			ActionManipulation = 2,
			ActionDoubleTapZoom = 4,
			ActionPanX = 8,
			ActionPanY = 16,
			ActionPinchZoom = 32,
			ActionCrossSlideX = 64,
			ActionCrossSlideY = 128,
			Action_Max = 2147483647,
		}
		public enum styleMsTouchSelect : int32
		{
			SelectGrippers = 0,
			SelectNone = 1,
			SelectNotSet = 2,
			Select_Max = 2147483647,
		}
		public enum styleMsScrollTranslation : int32
		{
			TranslationNotSet = 0,
			TranslationNone = 1,
			TranslationVtoH = 2,
			Translation_Max = 2147483647,
		}
		public enum styleBorderImageRepeat : int32
		{
			RepeatStretch = 0,
			RepeatRepeat = 1,
			RepeatRound = 2,
			RepeatSpace = 3,
			RepeatNotSet = 4,
			Repeat_Max = 2147483647,
		}
		public enum styleBorderImageSliceFill : int32
		{
			FillNotSet = 0,
			FillFill = 1,
			Fill_Max = 2147483647,
		}
		public enum styleMsImeAlign : int32
		{
			AlignAuto = 0,
			AlignAfter = 1,
			AlignNotSet = 2,
			Align_Max = 2147483647,
		}
		public enum styleMsTextCombineHorizontal : int32
		{
			HorizontalNone = 0,
			HorizontalAll = 1,
			HorizontalDigits = 2,
			HorizontalNotSet = 3,
			Horizontal_Max = 2147483647,
		}
		public enum styleWebkitAppearance : int32
		{
			AppearanceNone = 0,
			AppearanceCapsLockIndicator = 1,
			AppearanceButton = 2,
			AppearanceButtonBevel = 3,
			AppearanceCaret = 4,
			AppearanceCheckbox = 5,
			AppearanceDefaultButton = 6,
			AppearanceListbox = 7,
			AppearanceListitem = 8,
			AppearanceMediaFullscreenButton = 9,
			AppearanceMediaMuteButton = 10,
			AppearanceMediaPlayButton = 11,
			AppearanceMediaSeekBackButton = 12,
			AppearanceMediaSeekForwardButton = 13,
			AppearanceMediaSlider = 14,
			AppearanceMediaSliderthumb = 15,
			AppearanceMenulist = 16,
			AppearanceMenulistButton = 17,
			AppearanceMenulistText = 18,
			AppearanceMenulistTextfield = 19,
			AppearancePushButton = 20,
			AppearanceRadio = 21,
			AppearanceSearchfield = 22,
			AppearanceSearchfieldCancelButton = 23,
			AppearanceSearchfieldDecoration = 24,
			AppearanceSearchfieldResultsButton = 25,
			AppearanceSearchfieldResultsDecoration = 26,
			AppearanceSliderHorizontal = 27,
			AppearanceSliderVertical = 28,
			AppearanceSliderthumbHorizontal = 29,
			AppearanceSliderthumbVertical = 30,
			AppearanceSquareButton = 31,
			AppearanceTextarea = 32,
			AppearanceTextfield = 33,
			AppearanceNotSet = 34,
			Appearance_Max = 2147483647,
		}
		public enum styleViewportSize : int32
		{
			SizeAuto = 0,
			SizeDeviceWidth = 1,
			SizeDeviceHeight = 2,
			Size_Max = 2147483647,
		}
		public enum styleUserZoom : int32
		{
			ZoomNotSet = 0,
			ZoomZoom = 1,
			ZoomFixed = 2,
			Zoom_Max = 2147483647,
		}
		public enum styleTextLineThroughStyle : int32
		{
			StyleUndefined = 0,
			StyleSingle = 1,
			StyleDouble = 2,
			Style_Max = 2147483647,
		}
		public enum styleTextUnderlineStyle : int32
		{
			StyleUndefined = 0,
			StyleSingle = 1,
			StyleDouble = 2,
			StyleWords = 3,
			StyleDotted = 4,
			StyleThick = 5,
			StyleDash = 6,
			StyleDotDash = 7,
			StyleDotDotDash = 8,
			StyleWave = 9,
			StyleSingleAccounting = 10,
			StyleDoubleAccounting = 11,
			StyleThickDash = 12,
			Style_Max = 2147483647,
		}
		public enum styleTextEffect : int32
		{
			EffectNone = 0,
			EffectEmboss = 1,
			EffectEngrave = 2,
			EffectOutline = 3,
			Effect_Max = 2147483647,
		}
		public enum styleDefaultTextSelection : int32
		{
			SelectionFalse = 0,
			SelectionTrue = 1,
			Selection_Max = 2147483647,
		}
		public enum styleTextDecoration : int32
		{
			DecorationNone = 0,
			DecorationUnderline = 1,
			DecorationOverline = 2,
			DecorationLineThrough = 3,
			DecorationBlink = 4,
			Decoration_Max = 2147483647,
		}
		public enum textDecoration : int32
		{
			DecorationNone = 0,
			DecorationUnderline = 1,
			DecorationOverline = 2,
			DecorationLineThrough = 3,
			DecorationBlink = 4,
			Decoration_Max = 2147483647,
		}
		public enum htmlListType : int32
		{
			TypeNotSet = 0,
			TypeLargeAlpha = 1,
			TypeSmallAlpha = 2,
			TypeLargeRoman = 3,
			TypeSmallRoman = 4,
			TypeNumbers = 5,
			TypeDisc = 6,
			TypeCircle = 7,
			TypeSquare = 8,
			Type_Max = 2147483647,
		}
		public enum htmlMethod : int32
		{
			MethodNotSet = 0,
			MethodGet = 1,
			MethodPost = 2,
			Method_Max = 2147483647,
		}
		public enum htmlWrap : int32
		{
			WrapOff = 1,
			WrapSoft = 2,
			WrapHard = 3,
			Wrap_Max = 2147483647,
		}
		public enum htmlDir : int32
		{
			DirNotSet = 0,
			DirLeftToRight = 1,
			DirRightToLeft = 2,
			Dir_Max = 2147483647,
		}
		public enum htmlEditable : int32
		{
			EditableInherit = 0,
			EditableTrue = 1,
			EditableFalse = 2,
			Editable_Max = 2147483647,
		}
		public enum htmlInput : int32
		{
			InputNotSet = 0,
			InputButton = 1,
			InputCheckbox = 2,
			InputFile = 3,
			InputHidden = 4,
			InputImage = 5,
			InputPassword = 6,
			InputRadio = 7,
			InputReset = 8,
			InputSelectOne = 9,
			InputSelectMultiple = 10,
			InputSubmit = 11,
			InputText = 12,
			InputTextarea = 13,
			InputRichtext = 14,
			InputRange = 15,
			InputUrl = 16,
			InputEmail = 17,
			InputNumber = 18,
			InputTel = 19,
			InputSearch = 20,
			Input_Max = 2147483647,
		}
		public enum htmlSpellCheck : int32
		{
			CheckNotSet = 0,
			CheckTrue = 1,
			CheckFalse = 2,
			CheckDefault = 3,
			Check_Max = 2147483647,
		}
		public enum htmlEncoding : int32
		{
			EncodingURL = 0,
			EncodingMultipart = 1,
			EncodingText = 2,
			Encoding_Max = 2147483647,
		}
		public enum htmlAdjacency : int32
		{
			AdjacencyBeforeBegin = 1,
			AdjacencyAfterBegin = 2,
			AdjacencyBeforeEnd = 3,
			AdjacencyAfterEnd = 4,
			Adjacency_Max = 2147483647,
		}
		public enum htmlTabIndex : int32
		{
			IndexNotSet = -32768,
			Index_Max = 2147483647,
		}
		public enum htmlComponent : int32
		{
			ComponentClient = 0,
			ComponentSbLeft = 1,
			ComponentSbPageLeft = 2,
			ComponentSbHThumb = 3,
			ComponentSbPageRight = 4,
			ComponentSbRight = 5,
			ComponentSbUp = 6,
			ComponentSbPageUp = 7,
			ComponentSbVThumb = 8,
			ComponentSbPageDown = 9,
			ComponentSbDown = 10,
			ComponentSbLeft2 = 11,
			ComponentSbPageLeft2 = 12,
			ComponentSbRight2 = 13,
			ComponentSbPageRight2 = 14,
			ComponentSbUp2 = 15,
			ComponentSbPageUp2 = 16,
			ComponentSbDown2 = 17,
			ComponentSbPageDown2 = 18,
			ComponentSbTop = 19,
			ComponentSbBottom = 20,
			ComponentOutside = 21,
			ComponentGHTopLeft = 22,
			ComponentGHLeft = 23,
			ComponentGHTop = 24,
			ComponentGHBottomLeft = 25,
			ComponentGHTopRight = 26,
			ComponentGHBottom = 27,
			ComponentGHRight = 28,
			ComponentGHBottomRight = 29,
			Component_Max = 2147483647,
		}
		public enum htmlApplyLocation : int32
		{
			LocationInside = 0,
			LocationOutside = 1,
			Location_Max = 2147483647,
		}
		public enum htmlGlyphMode : int32
		{
			ModeNone = 0,
			ModeBegin = 1,
			ModeEnd = 2,
			ModeBoth = 3,
			Mode_Max = 2147483647,
		}
		public enum htmlDraggable : int32
		{
			DraggableAuto = 0,
			DraggableTrue = 1,
			DraggableFalse = 2,
			Draggable_Max = 2147483647,
		}
		public enum htmlUnit : int32
		{
			UnitCharacter = 1,
			UnitWord = 2,
			UnitSentence = 3,
			UnitTextEdit = 6,
			Unit_Max = 2147483647,
		}
		public enum htmlEndPoints : int32
		{
			PointsStartToStart = 1,
			PointsStartToEnd = 2,
			PointsEndToStart = 3,
			PointsEndToEnd = 4,
			Points_Max = 2147483647,
		}
		public enum htmlDirection : int32
		{
			DirectionForward = 99999,
			DirectionBackward = -99999,
			Direction_Max = 2147483647,
		}
		public enum htmlStart : int32
		{
			Startfileopen = 0,
			Startmouseover = 1,
			Start_Max = 2147483647,
		}
		public enum bodyScroll : int32
		{
			Scrollyes = 1,
			Scrollno = 2,
			Scrollauto = 4,
			Scrolldefault = 3,
			Scroll_Max = 2147483647,
		}
		public enum htmlSelectType : int32
		{
			TypeSelectOne = 1,
			TypeSelectMultiple = 2,
			Type_Max = 2147483647,
		}
		public enum htmlSelectExFlag : int32
		{
			FlagNone = 0,
			FlagHideSelectionInDesign = 1,
			Flag_Max = 2147483647,
		}
		public enum htmlSelection : int32
		{
			SelectionNone = 0,
			SelectionText = 1,
			SelectionControl = 2,
			SelectionTable = 3,
			Selection_Max = 2147483647,
		}
		public enum htmlMarqueeBehavior : int32
		{
			Behaviorscroll = 1,
			Behaviorslide = 2,
			Behavioralternate = 3,
			Behavior_Max = 2147483647,
		}
		public enum htmlMarqueeDirection : int32
		{
			Directionleft = 1,
			Directionright = 3,
			Directionup = 5,
			Directiondown = 7,
			Direction_Max = 2147483647,
		}
		public enum htmlPersistState : int32
		{
			StateNormal = 0,
			StateFavorite = 1,
			StateHistory = 2,
			StateSnapshot = 3,
			StateUserData = 4,
			State_Max = 2147483647,
		}
		public enum htmlDropEffect : int32
		{
			EffectCopy = 0,
			EffectLink = 1,
			EffectMove = 2,
			EffectNone = 3,
			Effect_Max = 2147483647,
		}
		public enum htmlEffectAllowed : int32
		{
			AllowedCopy = 0,
			AllowedLink = 1,
			AllowedMove = 2,
			AllowedCopyLink = 3,
			AllowedCopyMove = 4,
			AllowedLinkMove = 5,
			AllowedAll = 6,
			AllowedNone = 7,
			AllowedUninitialized = 8,
			Allowed_Max = 2147483647,
		}
		public enum htmlCompatMode : int32
		{
			ModeBackCompat = 0,
			ModeCSS1Compat = 1,
			Mode_Max = 2147483647,
		}
		public enum BoolValue : int32
		{
			True = 1,
			False = 0,
			BoolValue_Max = 2147483647,
		}
		public enum htmlCaptionAlign : int32
		{
			AlignNotSet = 0,
			AlignLeft = 1,
			AlignCenter = 2,
			AlignRight = 3,
			AlignJustify = 4,
			AlignTop = 5,
			AlignBottom = 6,
			Align_Max = 2147483647,
		}
		public enum htmlCaptionVAlign : int32
		{
			VAlignNotSet = 0,
			VAlignTop = 1,
			VAlignBottom = 2,
			VAlign_Max = 2147483647,
		}
		public enum htmlFrame : int32
		{
			FrameNotSet = 0,
			Framevoid = 1,
			Frameabove = 2,
			Framebelow = 3,
			Framehsides = 4,
			Framelhs = 5,
			Framerhs = 6,
			Framevsides = 7,
			Framebox = 8,
			Frameborder = 9,
			Frame_Max = 2147483647,
		}
		public enum htmlRules : int32
		{
			RulesNotSet = 0,
			Rulesnone = 1,
			Rulesgroups = 2,
			Rulesrows = 3,
			Rulescols = 4,
			Rulesall = 5,
			Rules_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum htmlCellAlign : int32
		{
			AlignNotSet = 0,
			AlignLeft = 1,
			AlignCenter = 2,
			AlignRight = 3,
			AlignMiddle = 2,
			Align_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum htmlCellVAlign : int32
		{
			VAlignNotSet = 0,
			VAlignTop = 1,
			VAlignMiddle = 2,
			VAlignBottom = 3,
			VAlignBaseline = 4,
			VAlignCenter = 2,
			VAlign_Max = 2147483647,
		}
		public enum frameScrolling : int32
		{
			Scrollingyes = 1,
			Scrollingno = 2,
			Scrollingauto = 4,
			Scrolling_Max = 2147483647,
		}
		public enum sandboxAllow : int32
		{
			AllowScripts = 0,
			AllowSameOrigin = 1,
			AllowTopNavigation = 2,
			AllowForms = 3,
			AllowPopups = 4,
			Allow_Max = 2147483647,
		}
		public enum svgAngleType : int32
		{
			SVG_ANGLETYPE_UNKNOWN = 0,
			SVG_ANGLETYPE_UNSPECIFIED = 1,
			SVG_ANGLETYPE_DEG = 2,
			SVG_ANGLETYPE_RAD = 3,
			SVG_ANGLETYPE_GRAD = 4,
			svgAngleType_Max = 2147483647,
		}
		public enum svgExternalResourcesRequired : int32
		{
			RequiredFalse = 0,
			RequiredTrue = 1,
			Required_Max = 2147483647,
		}
		public enum svgFocusable : int32
		{
			FocusableNotSet = 0,
			FocusableAuto = 1,
			FocusableTrue = 2,
			FocusableFalse = 3,
			Focusable_Max = 2147483647,
		}
		public enum svgLengthType : int32
		{
			SVG_LENGTHTYPE_UNKNOWN = 0,
			SVG_LENGTHTYPE_NUMBER = 1,
			SVG_LENGTHTYPE_PERCENTAGE = 2,
			SVG_LENGTHTYPE_EMS = 3,
			SVG_LENGTHTYPE_EXS = 4,
			SVG_LENGTHTYPE_PX = 5,
			SVG_LENGTHTYPE_CM = 6,
			SVG_LENGTHTYPE_MM = 7,
			SVG_LENGTHTYPE_IN = 8,
			SVG_LENGTHTYPE_PT = 9,
			SVG_LENGTHTYPE_PC = 10,
			svgLengthType_Max = 2147483647,
		}
		public enum svgPathSegType : int32
		{
			PATHSEG_UNKNOWN = 0,
			PATHSEG_CLOSEPATH = 1,
			PATHSEG_MOVETO_ABS = 2,
			PATHSEG_MOVETO_REL = 3,
			PATHSEG_LINETO_ABS = 4,
			PATHSEG_LINETO_REL = 5,
			PATHSEG_CURVETO_CUBIC_ABS = 6,
			PATHSEG_CURVETO_CUBIC_REL = 7,
			PATHSEG_CURVETO_QUADRATIC_ABS = 8,
			PATHSEG_CURVETO_QUADRATIC_REL = 9,
			PATHSEG_ARC_ABS = 10,
			PATHSEG_ARC_REL = 11,
			PATHSEG_LINETO_HORIZONTAL_ABS = 12,
			PATHSEG_LINETO_HORIZONTAL_REL = 13,
			PATHSEG_LINETO_VERTICAL_ABS = 14,
			PATHSEG_LINETO_VERTICAL_REL = 15,
			PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16,
			PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17,
			PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18,
			PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19,
			svgPathSegType_Max = 2147483647,
		}
		public enum svgTransformType : int32
		{
			SVG_TRANSFORM_UNKNOWN = 0,
			SVG_TRANSFORM_MATRIX = 1,
			SVG_TRANSFORM_TRANSLATE = 2,
			SVG_TRANSFORM_SCALE = 3,
			SVG_TRANSFORM_ROTATE = 4,
			SVG_TRANSFORM_SKEWX = 5,
			SVG_TRANSFORM_SKEWY = 6,
			svgTransformType_Max = 2147483647,
		}
		public enum svgPreserveAspectRatioAlignType : int32
		{
			SVG_PRESERVEASPECTRATIO_UNKNOWN = 0,
			SVG_PRESERVEASPECTRATIO_NONE = 1,
			SVG_PRESERVEASPECTRATIO_XMINYMIN = 2,
			SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3,
			SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4,
			SVG_PRESERVEASPECTRATIO_XMINYMID = 5,
			SVG_PRESERVEASPECTRATIO_XMIDYMID = 6,
			SVG_PRESERVEASPECTRATIO_XMAXYMID = 7,
			SVG_PRESERVEASPECTRATIO_XMINYMAX = 8,
			SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9,
			SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10,
			svgPreserveAspectRatioAlignType_Max = 2147483647,
		}
		public enum svgPreserveAspectMeetOrSliceType : int32
		{
			SVG_MEETORSLICE_UNKNOWN = 0,
			SVG_MEETORSLICE_MEET = 1,
			SVG_MEETORSLICE_SLICE = 2,
			svgPreserveAspectMeetOrSliceType_Max = 2147483647,
		}
		public enum svgUnitTypes : int32
		{
			SVG_UNITTYPE_UNKNOWN = 0,
			SVG_UNITTYPE_USERSPACEONUSE = 1,
			SVG_UNITTYPE_OBJECTBOUNDINGBOX = 2,
			svgUnitTypes_Max = 2147483647,
		}
		public enum svgSpreadMethod : int32
		{
			SVG_SPREADMETHOD_UNKNOWN = 0,
			SVG_SPREADMETHOD_PAD = 1,
			SVG_SPREADMETHOD_REFLECT = 2,
			SVG_SPREADMETHOD_REPEAT = 3,
			svgSpreadMethod_Max = 2147483647,
		}
		public enum svgFeblendMode : int32
		{
			SVG_FEBLEND_MODE_UNKNOWN = 0,
			SVG_FEBLEND_MODE_NORMAL = 1,
			SVG_FEBLEND_MODE_MULTIPLY = 2,
			SVG_FEBLEND_MODE_SCREEN = 3,
			SVG_FEBLEND_MODE_DARKEN = 4,
			SVG_FEBLEND_MODE_LIGHTEN = 5,
			svgFeblendMode_Max = 2147483647,
		}
		public enum svgFecolormatrixType : int32
		{
			SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0,
			SVG_FECOLORMATRIX_TYPE_MATRIX = 1,
			SVG_FECOLORMATRIX_TYPE_SATURATE = 2,
			SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3,
			SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4,
			svgFecolormatrixType_Max = 2147483647,
		}
		public enum svgFecomponenttransferType : int32
		{
			SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0,
			SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1,
			SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2,
			SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3,
			SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4,
			SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5,
			svgFecomponenttransferType_Max = 2147483647,
		}
		public enum svgFecompositeOperator : int32
		{
			SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0,
			SVG_FECOMPOSITE_OPERATOR_OVER = 1,
			SVG_FECOMPOSITE_OPERATOR_IN = 2,
			SVG_FECOMPOSITE_OPERATOR_OUT = 3,
			SVG_FECOMPOSITE_OPERATOR_ATOP = 4,
			SVG_FECOMPOSITE_OPERATOR_XOR = 5,
			SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6,
			svgFecompositeOperator_Max = 2147483647,
		}
		public enum svgEdgemode : int32
		{
			SVG_EDGEMODE_UNKNOWN = 0,
			SVG_EDGEMODE_DUPLICATE = 1,
			SVG_EDGEMODE_WRAP = 2,
			SVG_EDGEMODE_NONE = 3,
			svgEdgemode_Max = 2147483647,
		}
		public enum svgPreserveAlpha : int32
		{
			SVG_PRESERVEALPHA_FALSE = 0,
			SVG_PRESERVEALPHA_TRUE = 1,
			svgPreserveAlpha_Max = 2147483647,
		}
		public enum svgChannel : int32
		{
			SVG_CHANNEL_UNKNOWN = 0,
			SVG_CHANNEL_R = 1,
			SVG_CHANNEL_G = 2,
			SVG_CHANNEL_B = 3,
			SVG_CHANNEL_A = 4,
			svgChannel_Max = 2147483647,
		}
		public enum svgMorphologyOperator : int32
		{
			SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0,
			SVG_MORPHOLOGY_OPERATOR_ERODE = 1,
			SVG_MORPHOLOGY_OPERATOR_DILATE = 2,
			svgMorphologyOperator_Max = 2147483647,
		}
		public enum svgTurbulenceType : int32
		{
			SVG_TURBULENCE_TYPE_UNKNOWN = 0,
			SVG_TURBULENCE_TYPE_FACTALNOISE = 1,
			SVG_TURBULENCE_TYPE_TURBULENCE = 2,
			svgTurbulenceType_Max = 2147483647,
		}
		public enum svgStitchtype : int32
		{
			SVG_STITCHTYPE_UNKNOWN = 0,
			SVG_STITCHTYPE_STITCH = 1,
			SVG_STITCHTYPE_NOSTITCH = 2,
			svgStitchtype_Max = 2147483647,
		}
		public enum svgMarkerUnits : int32
		{
			SVG_MARKERUNITS_UNKNOWN = 0,
			SVG_MARKERUNITS_USERSPACEONUSE = 1,
			SVG_MARKERUNITS_STROKEWIDTH = 2,
			svgMarkerUnits_Max = 2147483647,
		}
		public enum svgMarkerOrient : int32
		{
			SVG_MARKER_ORIENT_UNKNOWN = 0,
			SVG_MARKER_ORIENT_AUTO = 1,
			SVG_MARKER_ORIENT_ANGLE = 2,
			svgMarkerOrient_Max = 2147483647,
		}
		public enum svgMarkerOrientAttribute : int32
		{
			AttributeAuto = 0,
			Attribute_Max = 2147483647,
		}
		public enum htmlMediaNetworkState : int32
		{
			StateEmpty = 0,
			StateIdle = 1,
			StateLoading = 2,
			StateNoSource = 3,
			State_Max = 2147483647,
		}
		public enum htmlMediaReadyState : int32
		{
			StateHaveNothing = 0,
			StateHaveMetadata = 1,
			StateHaveCurrentData = 2,
			StateHaveFutureData = 3,
			StateHaveEnoughData = 4,
			State_Max = 2147483647,
		}
		public enum htmlMediaErr : int32
		{
			ErrAborted = 0,
			ErrNetwork = 1,
			ErrDecode = 2,
			ErrSrcNotSupported = 3,
			Err_Max = 2147483647,
		}
		public enum lengthAdjust : int32
		{
			LENGTHADJUST_UNKNOWN = 0,
			LENGTHADJUST_SPACING = 1,
			LENGTHADJUST_SPACINGANDGLYPHS = 2,
			lengthAdjust_Max = 2147483647,
		}
		public enum textpathMethodtype : int32
		{
			TEXTPATH_METHODTYPE_UNKNOWN = 0,
			TEXTPATH_METHODTYPE_ALIGN = 1,
			TEXTPATH_METHODTYPE_STRETCH = 2,
			textpathMethodtype_Max = 2147483647,
		}
		public enum textpathSpacingtype : int32
		{
			TEXTPATH_SPACINGTYPE_UNKNOWN = 0,
			TEXTPATH_SPACINGTYPE_AUTO = 1,
			TEXTPATH_SPACINGTYPE_EXACT = 2,
			textpathSpacingtype_Max = 2147483647,
		}
		public enum ELEMENT_CORNER : int32
		{
			NONE = 0,
			TOP = 1,
			LEFT = 2,
			BOTTOM = 3,
			RIGHT = 4,
			TOPLEFT = 5,
			TOPRIGHT = 6,
			BOTTOMLEFT = 7,
			BOTTOMRIGHT = 8,
			Max = 2147483647,
		}
		public enum SECUREURLHOSTVALIDATE_FLAGS : int32
		{
			SUHV_PROMPTBEFORENO = 1,
			SUHV_SILENTYES = 2,
			SUHV_UNSECURESOURCE = 4,
			SECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647,
		}
		public enum POINTER_GRAVITY : int32
		{
			Left = 0,
			Right = 1,
			Max = 2147483647,
		}
		public enum ELEMENT_ADJACENCY : int32
		{
			ELEM_ADJ_BeforeBegin = 0,
			ELEM_ADJ_AfterBegin = 1,
			ELEM_ADJ_BeforeEnd = 2,
			ELEM_ADJ_AfterEnd = 3,
			ELEMENT_ADJACENCY_Max = 2147483647,
		}
		public enum MARKUP_CONTEXT_TYPE : int32
		{
			CONTEXT_TYPE_None = 0,
			CONTEXT_TYPE_Text = 1,
			CONTEXT_TYPE_EnterScope = 2,
			CONTEXT_TYPE_ExitScope = 3,
			CONTEXT_TYPE_NoScope = 4,
			MARKUP_CONTEXT_TYPE_Max = 2147483647,
		}
		public enum FINDTEXT_FLAGS : int32
		{
			BACKWARDS = 1,
			WHOLEWORD = 2,
			MATCHCASE = 4,
			RAW = 131072,
			MATCHREPEATEDWHITESPACE = 262144,
			MATCHDIAC = 536870912,
			MATCHKASHIDA = 1073741824,
			MATCHALEFHAMZA = -2147483648,
			FLAGS_Max = 2147483647,
		}
		public enum MOVEUNIT_ACTION : int32
		{
			PREVCHAR = 0,
			NEXTCHAR = 1,
			PREVCLUSTERBEGIN = 2,
			NEXTCLUSTERBEGIN = 3,
			PREVCLUSTEREND = 4,
			NEXTCLUSTEREND = 5,
			PREVWORDBEGIN = 6,
			NEXTWORDBEGIN = 7,
			PREVWORDEND = 8,
			NEXTWORDEND = 9,
			PREVPROOFWORD = 10,
			NEXTPROOFWORD = 11,
			NEXTURLBEGIN = 12,
			PREVURLBEGIN = 13,
			NEXTURLEND = 14,
			PREVURLEND = 15,
			PREVSENTENCE = 16,
			NEXTSENTENCE = 17,
			PREVBLOCK = 18,
			NEXTBLOCK = 19,
			ACTION_Max = 2147483647,
		}
		public enum PARSE_FLAGS : int32
		{
			ABSOLUTIFYIE40URLS = 1,
			DISABLEVML = 2,
			FLAGS_Max = 2147483647,
		}
		public enum ELEMENT_TAG_ID : int32
		{
			TAGID_NULL = 0,
			TAGID_UNKNOWN = 1,
			TAGID_A = 2,
			TAGID_ACRONYM = 3,
			TAGID_ADDRESS = 4,
			TAGID_APPLET = 5,
			TAGID_AREA = 6,
			TAGID_B = 7,
			TAGID_BASE = 8,
			TAGID_BASEFONT = 9,
			TAGID_BDO = 10,
			TAGID_BGSOUND = 11,
			TAGID_BIG = 12,
			TAGID_BLINK = 13,
			TAGID_BLOCKQUOTE = 14,
			TAGID_BODY = 15,
			TAGID_BR = 16,
			TAGID_BUTTON = 17,
			TAGID_CAPTION = 18,
			TAGID_CENTER = 19,
			TAGID_CITE = 20,
			TAGID_CODE = 21,
			TAGID_COL = 22,
			TAGID_COLGROUP = 23,
			TAGID_COMMENT = 24,
			TAGID_COMMENT_RAW = 25,
			TAGID_DD = 26,
			TAGID_DEL = 27,
			TAGID_DFN = 28,
			TAGID_DIR = 29,
			TAGID_DIV = 30,
			TAGID_DL = 31,
			TAGID_DT = 32,
			TAGID_EM = 33,
			TAGID_EMBED = 34,
			TAGID_FIELDSET = 35,
			TAGID_FONT = 36,
			TAGID_FORM = 37,
			TAGID_FRAME = 38,
			TAGID_FRAMESET = 39,
			TAGID_GENERIC = 40,
			TAGID_H1 = 41,
			TAGID_H2 = 42,
			TAGID_H3 = 43,
			TAGID_H4 = 44,
			TAGID_H5 = 45,
			TAGID_H6 = 46,
			TAGID_HEAD = 47,
			TAGID_HR = 48,
			TAGID_HTML = 49,
			TAGID_I = 50,
			TAGID_IFRAME = 51,
			TAGID_IMG = 52,
			TAGID_INPUT = 53,
			TAGID_INS = 54,
			TAGID_KBD = 55,
			TAGID_LABEL = 56,
			TAGID_LEGEND = 57,
			TAGID_LI = 58,
			TAGID_LINK = 59,
			TAGID_LISTING = 60,
			TAGID_MAP = 61,
			TAGID_MARQUEE = 62,
			TAGID_MENU = 63,
			TAGID_META = 64,
			TAGID_NEXTID = 65,
			TAGID_NOBR = 66,
			TAGID_NOEMBED = 67,
			TAGID_NOFRAMES = 68,
			TAGID_NOSCRIPT = 69,
			TAGID_OBJECT = 70,
			TAGID_OL = 71,
			TAGID_OPTION = 72,
			TAGID_P = 73,
			TAGID_PARAM = 74,
			TAGID_PLAINTEXT = 75,
			TAGID_PRE = 76,
			TAGID_Q = 77,
			TAGID_RP = 78,
			TAGID_RT = 79,
			TAGID_RUBY = 80,
			TAGID_S = 81,
			TAGID_SAMP = 82,
			TAGID_SCRIPT = 83,
			TAGID_SELECT = 84,
			TAGID_SMALL = 85,
			TAGID_SPAN = 86,
			TAGID_STRIKE = 87,
			TAGID_STRONG = 88,
			TAGID_STYLE = 89,
			TAGID_SUB = 90,
			TAGID_SUP = 91,
			TAGID_TABLE = 92,
			TAGID_TBODY = 93,
			TAGID_TC = 94,
			TAGID_TD = 95,
			TAGID_TEXTAREA = 96,
			TAGID_TFOOT = 97,
			TAGID_TH = 98,
			TAGID_THEAD = 99,
			TAGID_TITLE = 100,
			TAGID_TR = 101,
			TAGID_TT = 102,
			TAGID_U = 103,
			TAGID_UL = 104,
			TAGID_VAR = 105,
			TAGID_WBR = 106,
			TAGID_XMP = 107,
			TAGID_ROOT = 108,
			TAGID_OPTGROUP = 109,
			TAGID_ABBR = 110,
			TAGID_SVG_A = 111,
			TAGID_SVG_ALTGLYPH = 112,
			TAGID_SVG_ALTGLYPHDEF = 113,
			TAGID_SVG_ALTGLYPHITEM = 114,
			TAGID_SVG_ANIMATE = 115,
			TAGID_SVG_ANIMATECOLOR = 116,
			TAGID_SVG_ANIMATEMOTION = 117,
			TAGID_SVG_ANIMATETRANSFORM = 118,
			TAGID_SVG_CIRCLE = 119,
			TAGID_SVG_CLIPPATH = 120,
			TAGID_SVG_COLOR_PROFILE = 121,
			TAGID_SVG_CURSOR = 122,
			TAGID_SVG_DEFINITION_SRC = 123,
			TAGID_SVG_DEFS = 124,
			TAGID_SVG_DESC = 125,
			TAGID_SVG_ELLIPSE = 126,
			TAGID_SVG_FEBLEND = 127,
			TAGID_SVG_FECOLORMATRIX = 128,
			TAGID_SVG_FECOMPONENTTRANSFER = 129,
			TAGID_SVG_FECOMPOSITE = 130,
			TAGID_SVG_FECONVOLVEMATRIX = 131,
			TAGID_SVG_FEDIFFUSELIGHTING = 132,
			TAGID_SVG_FEDISPLACEMENTMAP = 133,
			TAGID_SVG_FEDISTANTLIGHT = 134,
			TAGID_SVG_FEFLOOD = 135,
			TAGID_SVG_FEFUNCA = 136,
			TAGID_SVG_FEFUNCB = 137,
			TAGID_SVG_FEFUNCG = 138,
			TAGID_SVG_FEFUNCR = 139,
			TAGID_SVG_FEGAUSSIANBLUR = 140,
			TAGID_SVG_FEIMAGE = 141,
			TAGID_SVG_FEMERGE = 142,
			TAGID_SVG_FEMERGENODE = 143,
			TAGID_SVG_FEMORPHOLOGY = 144,
			TAGID_SVG_FEOFFSET = 145,
			TAGID_SVG_FEPOINTLIGHT = 146,
			TAGID_SVG_FESPECULARLIGHTING = 147,
			TAGID_SVG_FESPOTLIGHT = 148,
			TAGID_SVG_FETILE = 149,
			TAGID_SVG_FETURBULENCE = 150,
			TAGID_SVG_FILTER = 151,
			TAGID_SVG_FONT = 152,
			TAGID_SVG_FONT_FACE = 153,
			TAGID_SVG_FONT_FACE_FORMAT = 154,
			TAGID_SVG_FONT_FACE_NAME = 155,
			TAGID_SVG_FONT_FACE_SRC = 156,
			TAGID_SVG_FONT_FACE_URI = 157,
			TAGID_SVG_FOREIGNOBJECT = 158,
			TAGID_SVG_G = 159,
			TAGID_SVG_GLYPH = 160,
			TAGID_SVG_GLYPHREF = 161,
			TAGID_SVG_HKERN = 162,
			TAGID_SVG_IMAGE = 163,
			TAGID_SVG_LINE = 164,
			TAGID_SVG_LINEARGRADIENT = 165,
			TAGID_SVG_MARKER = 166,
			TAGID_SVG_MASK = 167,
			TAGID_SVG_METADATA = 168,
			TAGID_SVG_MISSING_GLYPH = 169,
			TAGID_SVG_MPATH = 170,
			TAGID_SVG_PATH = 171,
			TAGID_SVG_PATTERN = 172,
			TAGID_SVG_POLYGON = 173,
			TAGID_SVG_POLYLINE = 174,
			TAGID_SVG_RADIALGRADIENT = 175,
			TAGID_SVG_RECT = 176,
			TAGID_SVG_SCRIPT = 177,
			TAGID_SVG_SET = 178,
			TAGID_SVG_STOP = 179,
			TAGID_SVG_STYLE = 180,
			TAGID_SVG_SVG = 181,
			TAGID_SVG_SWITCH = 182,
			TAGID_SVG_SYMBOL = 183,
			TAGID_SVG_TEXT = 184,
			TAGID_SVG_TEXTPATH = 185,
			TAGID_SVG_TITLE = 186,
			TAGID_SVG_TREF = 187,
			TAGID_SVG_TSPAN = 188,
			TAGID_SVG_USE = 189,
			TAGID_SVG_VIEW = 190,
			TAGID_SVG_VKERN = 191,
			TAGID_AUDIO = 192,
			TAGID_SOURCE = 193,
			TAGID_VIDEO = 194,
			TAGID_CANVAS = 195,
			TAGID_DOCTYPE = 196,
			TAGID_KEYGEN = 197,
			TAGID_PROCESSINGINSTRUCTION = 198,
			TAGID_ARTICLE = 199,
			TAGID_ASIDE = 200,
			TAGID_FIGCAPTION = 201,
			TAGID_FIGURE = 202,
			TAGID_FOOTER = 203,
			TAGID_HEADER = 204,
			TAGID_HGROUP = 205,
			TAGID_MARK = 206,
			TAGID_NAV = 207,
			TAGID_SECTION = 208,
			TAGID_PROGRESS = 209,
			TAGID_MATHML_ANNOTATION_XML = 210,
			TAGID_MATHML_MATH = 211,
			TAGID_MATHML_MI = 212,
			TAGID_MATHML_MN = 213,
			TAGID_MATHML_MO = 214,
			TAGID_MATHML_MS = 215,
			TAGID_MATHML_MTEXT = 216,
			TAGID_DATALIST = 217,
			TAGID_TRACK = 218,
			TAGID_ISINDEX = 219,
			TAGID_COMMAND = 220,
			TAGID_DETAILS = 221,
			TAGID_SUMMARY = 222,
			TAGID_X_MS_WEBVIEW = 223,
			TAGID_COUNT = 224,
			TAGID_LAST_PREDEFINED = 10000,
			ELEMENT_TAG_ID_Max = 2147483647,
		}
		public enum SELECTION_TYPE : int32
		{
			None = 0,
			Caret = 1,
			Text = 2,
			Control = 3,
			Max = 2147483647,
		}
		public enum SAVE_SEGMENTS_FLAGS : int32
		{
			NoIE4SelectionCompat = 1,
			FLAGS_Max = 2147483647,
		}
		public enum CARET_DIRECTION : int32
		{
			INDETERMINATE = 0,
			SAME = 1,
			BACKWARD = 2,
			FORWARD = 3,
			Max = 2147483647,
		}
		public enum LINE_DIRECTION : int32
		{
			RightToLeft = 1,
			LeftToRight = 2,
			Max = 2147483647,
		}
		public enum HT_OPTIONS : int32
		{
			OPT_AllowAfterEOL = 1,
			OPTIONS_Max = 2147483647,
		}
		public enum HT_RESULTS : int32
		{
			Glyph = 1,
			Max = 2147483647,
		}
		public enum DISPLAY_MOVEUNIT : int32
		{
			PreviousLine = 1,
			NextLine = 2,
			CurrentLineStart = 3,
			CurrentLineEnd = 4,
			TopOfWindow = 5,
			BottomOfWindow = 6,
			Max = 2147483647,
		}
		public enum DISPLAY_GRAVITY : int32
		{
			PreviousLine = 1,
			NextLine = 2,
			Max = 2147483647,
		}
		public enum DISPLAY_BREAK : int32
		{
			None = 0,
			Block = 1,
			Break = 2,
			Max = 2147483647,
		}
		public enum COORD_SYSTEM : int32
		{
			GLOBAL = 0,
			PARENT = 1,
			CONTAINER = 2,
			CONTENT = 3,
			FRAME = 4,
			CLIENT = 5,
			Max = 2147483647,
		}
		public enum DEV_CONSOLE_MESSAGE_LEVEL : int32
		{
			DCML_INFORMATIONAL = 0,
			DCML_WARNING = 1,
			DCML_ERROR = 2,
			DEV_CONSOLE_MESSAGE_LEVEL_Max = 2147483647,
		}
		public enum DOM_EVENT_PHASE : int32
		{
			DEP_CAPTURING_PHASE = 1,
			DEP_AT_TARGET = 2,
			DEP_BUBBLING_PHASE = 3,
			DOM_EVENT_PHASE_Max = 2147483647,
		}
		public enum SCRIPT_TIMER_TYPE : int32
		{
			STT_TIMEOUT = 0,
			STT_INTERVAL = 1,
			STT_IMMEDIATE = 2,
			STT_ANIMATION_FRAME = 3,
			SCRIPT_TIMER_TYPE_Max = 2147483647,
		}
		public enum HTML_PAINTER : int32
		{
			HTMLPAINTER_OPAQUE = 1,
			HTMLPAINTER_TRANSPARENT = 2,
			HTMLPAINTER_ALPHA = 4,
			HTMLPAINTER_COMPLEX = 8,
			HTMLPAINTER_OVERLAY = 16,
			HTMLPAINTER_HITTEST = 32,
			HTMLPAINTER_SURFACE = 256,
			HTMLPAINTER_3DSURFACE = 512,
			HTMLPAINTER_NOBAND = 1024,
			HTMLPAINTER_NODC = 4096,
			HTMLPAINTER_NOPHYSICALCLIP = 8192,
			HTMLPAINTER_NOSAVEDC = 16384,
			HTMLPAINTER_SUPPORTS_XFORM = 32768,
			HTMLPAINTER_EXPAND = 65536,
			HTMLPAINTER_NOSCROLLBITS = 131072,
			HTML_PAINTER_Max = 2147483647,
		}
		public enum HTML_PAINT_ZORDER : int32
		{
			HTMLPAINT_ZORDER_NONE = 0,
			HTMLPAINT_ZORDER_REPLACE_ALL = 1,
			HTMLPAINT_ZORDER_REPLACE_CONTENT = 2,
			HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 3,
			HTMLPAINT_ZORDER_BELOW_CONTENT = 4,
			HTMLPAINT_ZORDER_BELOW_FLOW = 5,
			HTMLPAINT_ZORDER_ABOVE_FLOW = 6,
			HTMLPAINT_ZORDER_ABOVE_CONTENT = 7,
			HTMLPAINT_ZORDER_WINDOW_TOP = 8,
			HTML_PAINT_ZORDER_Max = 2147483647,
		}
		public enum HTML_PAINT_DRAW_FLAGS : int32
		{
			HTMLPAINT_DRAW_UPDATEREGION = 1,
			HTMLPAINT_DRAW_USE_XFORM = 2,
			HTML_PAINT_DRAW_FLAGS_Max = 2147483647,
		}
		public enum HTML_PAINT_EVENT_FLAGS : int32
		{
			HTMLPAINT_EVENT_TARGET = 1,
			HTMLPAINT_EVENT_SETCURSOR = 2,
			HTML_PAINT_EVENT_FLAGS_Max = 2147483647,
		}
		public enum HTML_PAINT_DRAW_INFO_FLAGS : int32
		{
			HTMLPAINT_DRAWINFO_VIEWPORT = 1,
			HTMLPAINT_DRAWINFO_UPDATEREGION = 2,
			HTMLPAINT_DRAWINFO_XFORM = 4,
			HTML_PAINT_DRAW_INFO_FLAGS_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum HTMLDlgFlag : int32
		{
			FlagNo = 0,
			FlagOff = 0,
			Flag0 = 0,
			FlagYes = 1,
			FlagOn = 1,
			Flag1 = 1,
			FlagNotSet = -1,
			Flag_Max = 2147483647,
		}
		public enum HTMLDlgBorder : int32
		{
			BorderThin = 0,
			BorderThick = 262144,
			Border_Max = 2147483647,
		}
		public enum HTMLDlgEdge : int32
		{
			EdgeSunken = 0,
			EdgeRaised = 16,
			Edge_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum HTMLDlgCenter : int32
		{
			CenterNo = 0,
			CenterOff = 0,
			Center0 = 0,
			CenterYes = 1,
			CenterOn = 1,
			Center1 = 1,
			CenterParent = 1,
			CenterDesktop = 2,
			Center_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum HTMLAppFlag : int32
		{
			FlagNo = 0,
			FlagOff = 0,
			Flag0 = 0,
			FlagYes = 1,
			FlagOn = 1,
			Flag1 = 1,
			Flag_Max = 2147483647,
		}
		public enum HTMLMinimizeFlag : int32
		{
			FlagNo = 0,
			FlagYes = 131072,
			Flag_Max = 2147483647,
		}
		public enum HTMLMaximizeFlag : int32
		{
			FlagNo = 0,
			FlagYes = 65536,
			Flag_Max = 2147483647,
		}
		public enum HTMLCaptionFlag : int32
		{
			FlagNo = 0,
			FlagYes = 12582912,
			Flag_Max = 2147483647,
		}
		public enum HTMLSysMenuFlag : int32
		{
			FlagNo = 0,
			FlagYes = 524288,
			Flag_Max = 2147483647,
		}
		public enum HTMLBorder : int32
		{
			HTMLBorderNone = 0,
			HTMLBorderThick = 262144,
			HTMLBorderDialog = 4194304,
			HTMLBorderThin = 8388608,
			HTMLBorder_Max = 2147483647,
		}
		public enum HTMLBorderStyle : int32
		{
			StyleNormal = 0,
			StyleRaised = 256,
			StyleSunken = 512,
			Stylecombined = 768,
			StyleStatic = 131072,
			Style_Max = 2147483647,
		}
		public enum HTMLWindowState : int32
		{
			StateNormal = 1,
			StateMaximize = 3,
			StateMinimize = 6,
			State_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum BEHAVIOR_EVENT : int32
		{
			BEHAVIOREVENT_FIRST = 0,
			BEHAVIOREVENT_CONTENTREADY = 0,
			BEHAVIOREVENT_DOCUMENTREADY = 1,
			BEHAVIOREVENT_APPLYSTYLE = 2,
			BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 3,
			BEHAVIOREVENT_CONTENTSAVE = 4,
			BEHAVIOREVENT_LAST = 4,
			BEHAVIOR_EVENT_Max = 2147483647,
		}
		public enum BEHAVIOR_EVENT_FLAGS : int32
		{
			BEHAVIOREVENTFLAGS_BUBBLE = 1,
			BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 2,
			BEHAVIOR_EVENT_FLAGS_Max = 2147483647,
		}
		public enum BEHAVIOR_RENDER_INFO : int32
		{
			BEHAVIORRENDERINFO_BEFOREBACKGROUND = 1,
			BEHAVIORRENDERINFO_AFTERBACKGROUND = 2,
			BEHAVIORRENDERINFO_BEFORECONTENT = 4,
			BEHAVIORRENDERINFO_AFTERCONTENT = 8,
			BEHAVIORRENDERINFO_AFTERFOREGROUND = 32,
			BEHAVIORRENDERINFO_ABOVECONTENT = 40,
			BEHAVIORRENDERINFO_ALLLAYERS = 255,
			BEHAVIORRENDERINFO_DISABLEBACKGROUND = 256,
			BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 512,
			BEHAVIORRENDERINFO_DISABLECONTENT = 1024,
			BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 2048,
			BEHAVIORRENDERINFO_DISABLEALLLAYERS = 3840,
			BEHAVIORRENDERINFO_HITTESTING = 4096,
			BEHAVIORRENDERINFO_SURFACE = 1048576,
			BEHAVIORRENDERINFO_3DSURFACE = 2097152,
			BEHAVIOR_RENDER_INFO_Max = 2147483647,
		}
		[AllowDuplicates]
		public enum BEHAVIOR_RELATION : int32
		{
			FIRSTRELATION = 0,
			SAMEELEMENT = 0,
			PARENT = 1,
			CHILD = 2,
			SIBLING = 3,
			LASTRELATION = 3,
			RELATION_Max = 2147483647,
		}
		public enum BEHAVIOR_LAYOUT_INFO : int32
		{
			BEHAVIORLAYOUTINFO_FULLDELEGATION = 1,
			BEHAVIORLAYOUTINFO_MODIFYNATURAL = 2,
			BEHAVIORLAYOUTINFO_MAPSIZE = 4,
			BEHAVIOR_LAYOUT_INFO_Max = 2147483647,
		}
		public enum BEHAVIOR_LAYOUT_MODE : int32
		{
			BEHAVIORLAYOUTMODE_NATURAL = 1,
			BEHAVIORLAYOUTMODE_MINWIDTH = 2,
			BEHAVIORLAYOUTMODE_MAXWIDTH = 4,
			BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 16384,
			BEHAVIORLAYOUTMODE_FINAL_PERCENT = 32768,
			BEHAVIOR_LAYOUT_MODE_Max = 2147483647,
		}
		public enum ELEMENTDESCRIPTOR_FLAGS : int32
		{
			ELEMENTDESCRIPTORFLAGS_LITERAL = 1,
			ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 2,
			ELEMENTDESCRIPTOR_FLAGS_Max = 2147483647,
		}
		public enum ELEMENTNAMESPACE_FLAGS : int32
		{
			ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 1,
			ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 2,
			ELEMENTNAMESPACE_FLAGS_Max = 2147483647,
		}
		public enum VIEW_OBJECT_ALPHA_MODE : int32
		{
			IGNORE = 0,
			PREMULTIPLIED = 1,
			Max = 2147483647,
		}
		public enum VIEW_OBJECT_COMPOSITION_MODE : int32
		{
			LEGACY = 0,
			SURFACEPRESENTER = 1,
			Max = 2147483647,
		}
		public enum ExtensionValidationContexts : int32
		{
			None = 0,
			Dynamic = 1,
			Parsed = 2,
		}
		public enum ExtensionValidationResults : int32
		{
			None = 0,
			DoNotInstantiate = 1,
			ArrestPageLoad = 2,
		}
		public enum __MIDL_ITargetFrame2_0001 : int32
		{
			NONE = 0,
			JUSTTESTEXISTENCE = 1,
			INTERNAL = -2147483648,
		}
		public enum __MIDL_ITargetFrame2_0002 : int32
		{
			SCROLL_YES = 1,
			SCROLL_NO = 2,
			SCROLL_AUTO = 4,
			NORESIZE = 8,
			NO3DBORDER = 16,
			DESKTOP = 32,
			BROWSERBAND = 64,
		}
		public enum __MIDL_ITargetFrame_0001 : int32
		{
			RECORD = 1,
			POST = 2,
			NO_DOC_CACHE = 4,
			NO_IMAGE_CACHE = 8,
			AUTH_FAIL_CACHE_OK = 16,
			SENDING_FROM_FORM = 32,
			REALLY_SENDING_FROM_FORM = 64,
		}
		public enum MediaActivityNotifyType : int32
		{
			Playback = 0,
			Recording = 1,
			Casting = 2,
		}
		public enum SCROLLABLECONTEXTMENU_PLACEMENT : int32
		{
			TOP = 0,
			BOTTOM = 1,
			LEFT = 2,
			RIGHT = 3,
			FULL = 4,
		}
		public enum INTERNETEXPLORERCONFIGURATION : int32
		{
			HOST = 1,
			WEB_DRIVER = 2,
			WEB_DRIVER_EDGE = 4,
		}
		public enum IELAUNCHOPTION_FLAGS : int32
		{
			SCRIPTDEBUG = 1,
			FORCE_COMPAT = 2,
			FORCE_EDGE = 4,
			LOCK_ENGINE = 8,
		}
		public enum DOCHOSTUITYPE : int32
		{
			BROWSE = 0,
			AUTHOR = 1,
		}
		public enum DOCHOSTUIDBLCLK : int32
		{
			DEFAULT = 0,
			SHOWPROPERTIES = 1,
			SHOWCODE = 2,
		}
		public enum DOCHOSTUIFLAG : int32
		{
			DIALOG = 1,
			DISABLE_HELP_MENU = 2,
			NO3DBORDER = 4,
			SCROLL_NO = 8,
			DISABLE_SCRIPT_INACTIVE = 16,
			OPENNEWWIN = 32,
			DISABLE_OFFSCREEN = 64,
			FLAT_SCROLLBAR = 128,
			DIV_BLOCKDEFAULT = 256,
			ACTIVATE_CLIENTHIT_ONLY = 512,
			OVERRIDEBEHAVIORFACTORY = 1024,
			CODEPAGELINKEDFONTS = 2048,
			URL_ENCODING_DISABLE_UTF8 = 4096,
			URL_ENCODING_ENABLE_UTF8 = 8192,
			ENABLE_FORMS_AUTOCOMPLETE = 16384,
			ENABLE_INPLACE_NAVIGATION = 65536,
			IME_ENABLE_RECONVERSION = 131072,
			THEME = 262144,
			NOTHEME = 524288,
			NOPICS = 1048576,
			NO3DOUTERBORDER = 2097152,
			DISABLE_EDIT_NS_FIXUP = 4194304,
			LOCAL_MACHINE_ACCESS_CHECK = 8388608,
			DISABLE_UNTRUSTEDPROTOCOL = 16777216,
			HOST_NAVIGATES = 33554432,
			ENABLE_REDIRECT_NOTIFICATION = 67108864,
			USE_WINDOWLESS_SELECTCONTROL = 134217728,
			USE_WINDOWED_SELECTCONTROL = 268435456,
			ENABLE_ACTIVEX_INACTIVATE_MODE = 536870912,
			DPI_AWARE = 1073741824,
		}
		public enum OpenServiceErrors : int32
		{
			NOTFOUND = -2147287038,
			NOTSUPPORTED = -2147467231,
			CANCELLED = -2147471631,
			GPDISABLED = -1072886820,
		}
		public enum OpenServiceActivityContentType : int32
		{
			None = -1,
			Document = 0,
			Selection = 1,
			Link = 2,
			Count = 3,
		}
		[AllowDuplicates]
		public enum ADDURL_FLAG : int32
		{
			FIRST = 0,
			ADDTOHISTORYANDCACHE = 0,
			ADDTOCACHE = 1,
			Max = 2147483647,
		}
		
		// --- Function Pointers ---
		
		public function HRESULT SHOWHTMLDIALOGFN(HWND hwndParent, ref IMoniker pmk, out VARIANT pvarArgIn, PWSTR pchOptions, out VARIANT pvArgOut);
		public function HRESULT SHOWHTMLDIALOGEXFN(HWND hwndParent, ref IMoniker pmk, uint32 dwDialogFlags, out VARIANT pvarArgIn, PWSTR pchOptions, out VARIANT pvArgOut);
		public function HRESULT SHOWMODELESSHTMLDIALOGFN(HWND hwndParent, ref IMoniker pmk, out VARIANT pvarArgIn, out VARIANT pvarOptions, out IHTMLWindow2* ppWindow);
		public function HRESULT IEREGISTERXMLNSFN(PWSTR lpszURI, Guid clsid, BOOL fMachine);
		public function HRESULT IEISXMLNSREGISTEREDFN(PWSTR lpszURI, out Guid pCLSID);
		
		// --- Structs ---
		
		[CRepr]
		public struct HTML_PAINTER_INFO
		{
			public int32 lFlags;
			public int32 lZOrder;
			public Guid iidDrawObject;
			public RECT rcExpand;
		}
		[CRepr]
		public struct HTML_PAINT_XFORM
		{
			public float eM11;
			public float eM12;
			public float eM21;
			public float eM22;
			public float eDx;
			public float eDy;
		}
		[CRepr]
		public struct HTML_PAINT_DRAW_INFO
		{
			public RECT rcViewport;
			public HRGN hrgnUpdate;
			public HTML_PAINT_XFORM xform;
		}
		[CRepr]
		public struct tagNavigateData
		{
			public uint32 ulTarget;
			public uint32 ulURL;
			public uint32 ulRefURL;
			public uint32 ulPostData;
			public uint32 dwFlags;
		}
		[CRepr]
		public struct IELAUNCHURLINFO
		{
			public uint32 cbSize;
			public uint32 dwCreationFlags;
			public uint32 dwLaunchOptionFlags;
		}
		[CRepr]
		public struct HTMLPersistEvents {}
		[CRepr]
		public struct LayoutRectEvents {}
		[CRepr]
		public struct HostDialogHelper {}
		[CRepr]
		public struct DOCHOSTUIINFO
		{
			public uint32 cbSize;
			public uint32 dwFlags;
			public uint32 dwDoubleClick;
			public PWSTR pchHostCss;
			public PWSTR pchHostNS;
		}
		[CRepr]
		public struct STATURL
		{
			public uint32 cbSize;
			public PWSTR pwcsUrl;
			public PWSTR pwcsTitle;
			public FILETIME ftLastVisited;
			public FILETIME ftLastUpdated;
			public FILETIME ftExpires;
			public uint32 dwFlags;
		}
		
		// --- COM Class IDs ---
		
		public const Guid CLSID_HTMLCSSStyleDeclaration = .(0x30510741, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyle = .(0x3050f285, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLRuleStyle = .(0x3050f3d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCSSRule = .(0x305106ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCSSImportRule = .(0x305106f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCSSMediaRule = .(0x305106f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCSSMediaList = .(0x30510732, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCSSNamespaceRule = .(0x305106f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMSCSSKeyframeRule = .(0x3051080e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMSCSSKeyframesRule = .(0x3051080f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLRenderStyle = .(0x3050f6aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCurrentStyle = .(0x3050f3dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDOMAttribute = .(0x3050f4b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDOMTextNode = .(0x3050f4ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDOMImplementation = .(0x3050f80e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAttributeCollection = .(0x3050f4cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_StaticNodeList = .(0x30510467, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMChildrenCollection = .(0x3050f5aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDefaults = .(0x3050f6c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTCDefaultDispatch = .(0x3050f4fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTCPropertyBehavior = .(0x3050f5de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTCMethodBehavior = .(0x3050f630, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTCEventBehavior = .(0x3050f4fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTCAttachBehavior = .(0x3050f5f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTCDescBehavior = .(0x3050f5dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLUrnCollection = .(0x3050f580, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLGenericElement = .(0x3050f4b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheetRule = .(0x3050f3ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheetRulesCollection = .(0x3050f3cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheetPage = .(0x3050f7ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheetPagesCollection = .(0x3050f7f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheet = .(0x3050f2e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheetsCollection = .(0x3050f37f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLLinkElement = .(0x3050f277, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDOMRange = .(0x305106c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLFormElement = .(0x3050f251, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTextElement = .(0x3050f26a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLImg = .(0x3050f241, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLImageElementFactory = .(0x3050f38f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLBody = .(0x3050f24a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLFontElement = .(0x3050f27b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAnchorElement = .(0x3050f248, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLLabelElement = .(0x3050f32b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLListElement = .(0x3050f272, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLUListElement = .(0x3050f269, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLOListElement = .(0x3050f270, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLLIElement = .(0x3050f273, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLBlockElement = .(0x3050f281, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDivElement = .(0x3050f27e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDDElement = .(0x3050f27f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDTElement = .(0x3050f27c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLBRElement = .(0x3050f280, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDListElement = .(0x3050f27d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLHRElement = .(0x3050f252, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLParaElement = .(0x3050f26f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLElementCollection = .(0x3050f4cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLHeaderElement = .(0x3050f27a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLSelectElement = .(0x3050f245, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLWndSelectElement = .(0x3050f2cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLOptionElement = .(0x3050f24d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLOptionElementFactory = .(0x3050f38d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLWndOptionElement = .(0x3050f2d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLInputElement = .(0x3050f5d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTextAreaElement = .(0x3050f2ac, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLRichtextElement = .(0x3050f2df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLButtonElement = .(0x3050f2c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMarqueeElement = .(0x3050f2b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLHtmlElement = .(0x3050f491, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLHeadElement = .(0x3050f493, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTitleElement = .(0x3050f284, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMetaElement = .(0x3050f275, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLBaseElement = .(0x3050f276, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLIsIndexElement = .(0x3050f278, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLNextIdElement = .(0x3050f279, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLBaseFontElement = .(0x3050f282, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLUnknownElement = .(0x3050f268, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLHistory = .(0xfeceaaa3, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);
		public const Guid CLSID_COpsProfile = .(0x3050f402, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLNavigator = .(0xfeceaaa6, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);
		public const Guid CLSID_HTMLLocation = .(0x163bb1e1, 0x6e00, 0x11cf, 0x83, 0x7a, 0x48, 0xdc, 0x04, 0xc1, 0x00, 0x00);
		public const Guid CLSID_CMimeTypes = .(0x3050f3fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CPlugins = .(0x3050f3ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CEventObj = .(0x3050f48a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleMedia = .(0x3051074c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_FramesCollection = .(0x3050f7f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLScreen = .(0x3050f35d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLWindow2 = .(0xd48a6ec6, 0x6a4a, 0x11cf, 0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00);
		public const Guid CLSID_HTMLWindowProxy = .(0x3050f391, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDocumentCompatibleInfo = .(0x3051041b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDocumentCompatibleInfoCollection = .(0x30510419, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDocument = .(0x25336920, 0x03f9, 0x11cf, 0x8f, 0xd0, 0x00, 0xaa, 0x00, 0x68, 0x6f, 0x13);
		public const Guid CLSID_Scriptlet = .(0xae24fdae, 0x03c6, 0x11d1, 0x8b, 0x76, 0x00, 0x80, 0xc7, 0x44, 0xf3, 0x89);
		public const Guid CLSID_HTMLEmbed = .(0x3050f25d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAreasCollection = .(0x3050f4ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMapElement = .(0x3050f271, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAreaElement = .(0x3050f283, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTableCaption = .(0x3050f2ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCommentElement = .(0x3050f317, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLPhraseElement = .(0x3050f26e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLSpanElement = .(0x3050f3f5, 0x98b4, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTable = .(0x3050f26b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTableCol = .(0x3050f26c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTableSection = .(0x3050f2e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTableRow = .(0x3050f26d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTableCell = .(0x3050f246, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLScriptElement = .(0x3050f28c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLNoShowElement = .(0x3050f38b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLObjectElement = .(0x3050f24e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLParamElement = .(0x3050f83e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLFrameBase = .(0x3050f312, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLFrameElement = .(0x3050f314, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLIFrame = .(0x3050f316, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDivPosition = .(0x3050f249, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLFieldSetElement = .(0x3050f3e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLLegendElement = .(0x3050f3e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLSpanFlow = .(0x3050f3e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLFrameSetSite = .(0x3050f31a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLBGsound = .(0x3050f370, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleElement = .(0x3050f37d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleFontFace = .(0x3050f3d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_XDomainRequest = .(0x30510455, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_XDomainRequestFactory = .(0x30510457, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStorage = .(0x30510475, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMEvent = .(0x305104bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMUIEvent = .(0x305106cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMMouseEvent = .(0x305106cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMDragEvent = .(0x30510762, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMMouseWheelEvent = .(0x305106d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMWheelEvent = .(0x305106d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMTextEvent = .(0x305106d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMKeyboardEvent = .(0x305106d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMCompositionEvent = .(0x305106d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMMutationEvent = .(0x305106db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMBeforeUnloadEvent = .(0x30510764, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMFocusEvent = .(0x305106cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMCustomEvent = .(0x305106df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CanvasGradient = .(0x30510715, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CanvasPattern = .(0x30510717, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CanvasTextMetrics = .(0x30510719, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CanvasImageData = .(0x3051071b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CanvasRenderingContext2D = .(0x30510700, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLCanvasElement = .(0x305106e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMProgressEvent = .(0x3051071f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMMessageEvent = .(0x30510721, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMSiteModeEvent = .(0x30510766, 0x98b6, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMStorageEvent = .(0x30510723, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_XMLHttpRequestEventTarget = .(0x30510831, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLXMLHttpRequest = .(0x3051040b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLXMLHttpRequestFactory = .(0x3051040d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAngle = .(0x30510584, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedAngle = .(0x305105e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedTransformList = .(0x305105b1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedBoolean = .(0x3051058b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedEnumeration = .(0x3051058e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedInteger = .(0x3051058f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedLength = .(0x30510581, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedLengthList = .(0x30510582, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedNumber = .(0x30510588, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedNumberList = .(0x3051058a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedRect = .(0x30510586, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedString = .(0x3051058c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGClipPathElement = .(0x305105e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGElement = .(0x30510564, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGLength = .(0x3051057e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGLengthList = .(0x30510580, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGMatrix = .(0x305105ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGNumber = .(0x30510587, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGNumberList = .(0x30510589, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPatternElement = .(0x305105d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSeg = .(0x305105b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegArcAbs = .(0x305105bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegArcRel = .(0x305105bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegClosePath = .(0x305105bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegMovetoAbs = .(0x305105cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegMovetoRel = .(0x305105cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegLinetoAbs = .(0x305105c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegLinetoRel = .(0x305105c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoCubicAbs = .(0x305105be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoCubicRel = .(0x305105bf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoCubicSmoothAbs = .(0x305105c0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoCubicSmoothRel = .(0x305105c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoQuadraticAbs = .(0x305105c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoQuadraticRel = .(0x305105c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoQuadraticSmoothAbs = .(0x305105c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegCurvetoQuadraticSmoothRel = .(0x305105c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegLinetoHorizontalAbs = .(0x305105c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegLinetoHorizontalRel = .(0x305105c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegLinetoVerticalAbs = .(0x305105ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegLinetoVerticalRel = .(0x305105cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathSegList = .(0x305105b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPoint = .(0x305105ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPointList = .(0x305105b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGRect = .(0x30510583, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGStringList = .(0x3051058d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTransform = .(0x305105af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGSVGElement = .(0x30510574, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGUseElement = .(0x30510590, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLStyleSheetRulesAppliedCollection = .(0xeb36f845, 0x2395, 0x4719, 0xb8, 0x5c, 0xd0, 0xd8, 0x0e, 0x18, 0x4b, 0xd9);
		public const Guid CLSID_RulesApplied = .(0x7c803920, 0x7a53, 0x4d26, 0x98, 0xac, 0xfd, 0xd2, 0x3e, 0x6b, 0x9e, 0x01);
		public const Guid CLSID_RulesAppliedCollection = .(0x671926ee, 0xc3cf, 0x40af, 0xbe, 0x8f, 0x1c, 0xba, 0xee, 0x64, 0x86, 0xe8);
		public const Guid CLSID_HTMLW3CComputedStyle = .(0x305106c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTransformList = .(0x305105b0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGCircleElement = .(0x30510578, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGEllipseElement = .(0x30510579, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGLineElement = .(0x3051057a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGRectElement = .(0x30510577, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPolygonElement = .(0x3051057b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPolylineElement = .(0x3051057c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGGElement = .(0x3051056f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGSymbolElement = .(0x30510571, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGDefsElement = .(0x30510570, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPathElement = .(0x305105b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGPreserveAspectRatio = .(0x305105d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTextElement = .(0x305105df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAnimatedPreserveAspectRatio = .(0x305105ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGImageElement = .(0x305105cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGStopElement = .(0x305105d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGGradientElement = .(0x305105d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGLinearGradientElement = .(0x305105d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGRadialGradientElement = .(0x305105d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGMaskElement = .(0x305105e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGMarkerElement = .(0x305105de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGZoomEvent = .(0x305105d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGAElement = .(0x305105db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGViewElement = .(0x305105dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMediaError = .(0x3051070a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLTimeRanges = .(0x3051070b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLMediaElement = .(0x3051070c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLSourceElement = .(0x3051070d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAudioElement = .(0x3051070e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAudioElementFactory = .(0x305107ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLVideoElement = .(0x3051070f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGSwitchElement = .(0x305105d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGDescElement = .(0x30510572, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTitleElement = .(0x30510573, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGMetadataElement = .(0x305105d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGElementInstance = .(0x30510575, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGElementInstanceList = .(0x30510576, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMException = .(0x3051072c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_RangeException = .(0x3051072e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGException = .(0x30510730, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_EventException = .(0x3051073b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGScriptElement = .(0x305105e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGStyleElement = .(0x305105d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTextContentElement = .(0x305105dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTextPositioningElement = .(0x305105e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMDocumentType = .(0x30510739, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_NodeIterator = .(0x30510745, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_TreeWalker = .(0x30510747, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMProcessingInstruction = .(0x30510743, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLPerformance = .(0x3051074f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLPerformanceNavigation = .(0x30510751, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLPerformanceTiming = .(0x30510753, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_SVGTSpanElement = .(0x305105e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CTemplatePrinter = .(0x3050f6b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CPrintManagerTemplatePrinter = .(0x63619f54, 0x9d71, 0x4c23, 0xa0, 0x8d, 0x50, 0xd7, 0xf1, 0x8d, 0xb2, 0xe9);
		public const Guid CLSID_SVGTextPathElement = .(0x305105eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_XMLSerializer = .(0x3051077e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMParser = .(0x30510782, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDOMXmlSerializerFactory = .(0x30510780, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMParserFactory = .(0x30510784, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLSemanticElement = .(0x305107b0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLProgressElement = .(0x3050f2d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMMSTransitionEvent = .(0x305107b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMMSAnimationEvent = .(0x305107b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_WebGeolocation = .(0x305107c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_WebGeocoordinates = .(0x305107c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_WebGeopositionError = .(0x305107ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_WebGeoposition = .(0x305107ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CClientCaps = .(0x7e8bc44e, 0xaeff, 0x11d1, 0x89, 0xc2, 0x00, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4);
		public const Guid CLSID_DOMMSManipulationEvent = .(0x30510817, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_DOMCloseEvent = .(0x30510800, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_ApplicationCache = .(0x30510829, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HtmlDlgSafeHelper = .(0x3050f819, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_BlockFormats = .(0x3050f831, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_FontNames = .(0x3050f83a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLNamespace = .(0x3050f6bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLNamespaceCollection = .(0x3050f6b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_ThreadDialogProcParam = .(0x3050f5eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLDialog = .(0x3050f28a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLPopup = .(0x3050f667, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLAppBehavior = .(0x3050f5cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_OldHTMLDocument = .(0xd48a6ec9, 0x6a4a, 0x11cf, 0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00);
		public const Guid CLSID_OldHTMLFormElement = .(0x0d04d285, 0x6bec, 0x11cf, 0x8b, 0x97, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);
		public const Guid CLSID_HTMLInputButtonElement = .(0x3050f2b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLInputTextElement = .(0x3050f2ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLInputFileElement = .(0x3050f2ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLOptionButtonElement = .(0x3050f2be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HTMLInputImage = .(0x3050f2c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_HomePageSetting = .(0x374cede0, 0x873a, 0x4c4f, 0xbc, 0x86, 0xbc, 0xc8, 0xcf, 0x51, 0x16, 0xa3);
		public const Guid CLSID_InternetExplorerManager = .(0xdf4fcc34, 0x067a, 0x4e0a, 0x83, 0x52, 0x4a, 0x1a, 0x50, 0x95, 0x34, 0x6e);
		public const Guid CLSID_IEWebDriverManager = .(0x90314af2, 0x5250, 0x47b3, 0x89, 0xd8, 0x62, 0x95, 0xfc, 0x23, 0xbc, 0x22);
		public const Guid CLSID_PeerFactory = .(0x3050f4cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_IntelliForms = .(0x613ab92e, 0x16bf, 0x11d2, 0xbc, 0xa5, 0x00, 0xc0, 0x4f, 0xd9, 0x29, 0xdb);
		public const Guid CLSID_HomePage = .(0x766bf2ae, 0xd650, 0x11d1, 0x98, 0x11, 0x00, 0xc0, 0x4f, 0xc3, 0x1d, 0x2e);
		public const Guid CLSID_CPersistUserData = .(0x3050f48e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CPersistDataPeer = .(0x3050f487, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CPersistShortcut = .(0x3050f4c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CPersistHistory = .(0x3050f4c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CPersistSnapshot = .(0x3050f4c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CDownloadBehavior = .(0x3050f5be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_wfolders = .(0xbae31f9a, 0x1b81, 0x11d2, 0xa9, 0x7a, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);
		public const Guid CLSID_AnchorClick = .(0x13d5413c, 0x33b9, 0x11d2, 0x95, 0xa7, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);
		public const Guid CLSID_CLayoutRect = .(0x3050f664, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CDeviceRect = .(0x3050f6d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_CHeaderFooter = .(0x3050f6cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
		public const Guid CLSID_OpenServiceManager = .(0x098870b6, 0x39ea, 0x480b, 0xb8, 0xb5, 0xdd, 0x01, 0x67, 0xc4, 0xdb, 0x59);
		public const Guid CLSID_OpenServiceActivityManager = .(0xc5efd803, 0x50f8, 0x43cd, 0x9a, 0xb8, 0xaa, 0xfc, 0x13, 0x94, 0xc9, 0xe0);
		public const Guid CLSID_CoDitherToRGB8 = .(0xa860ce50, 0x3910, 0x11d0, 0x86, 0xfc, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);
		public const Guid CLSID_CoSniffStream = .(0x6a01fda0, 0x30df, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);
		public const Guid CLSID_CoMapMIMEToCLSID = .(0x30c3b080, 0x30fb, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);
		
		// --- COM Interfaces ---
		
		[CRepr]
		public struct IHTMLFiltersCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f3ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(ref VARIANT pvarIndex, out VARIANT pvarResult) mut => VT.item(ref this, ref pvarIndex, out pvarResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFiltersCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFiltersCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFiltersCollection self, ref VARIANT pvarIndex, out VARIANT pvarResult) item;
			}
		}
		[CRepr]
		public struct IIE70DispatchEx : IDispatchEx
		{
			public const new Guid IID = .(0x3051046b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatchEx.VTable {}
		}
		[CRepr]
		public struct IIE80DispatchEx : IDispatchEx
		{
			public const new Guid IID = .(0x3051046c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatchEx.VTable {}
		}
		[CRepr]
		public struct IHTMLEventObj : IDispatch
		{
			public const new Guid IID = .(0x3050f32d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_srcElement(out IHTMLElement* p) mut => VT.get_srcElement(ref this, out p);
			public HRESULT get_altKey(out int16 p) mut => VT.get_altKey(ref this, out p);
			public HRESULT get_ctrlKey(out int16 p) mut => VT.get_ctrlKey(ref this, out p);
			public HRESULT get_shiftKey(out int16 p) mut => VT.get_shiftKey(ref this, out p);
			public HRESULT put_returnValue(VARIANT v) mut => VT.put_returnValue(ref this, v);
			public HRESULT get_returnValue(out VARIANT p) mut => VT.get_returnValue(ref this, out p);
			public HRESULT put_cancelBubble(int16 v) mut => VT.put_cancelBubble(ref this, v);
			public HRESULT get_cancelBubble(out int16 p) mut => VT.get_cancelBubble(ref this, out p);
			public HRESULT get_fromElement(out IHTMLElement* p) mut => VT.get_fromElement(ref this, out p);
			public HRESULT get_toElement(out IHTMLElement* p) mut => VT.get_toElement(ref this, out p);
			public HRESULT put_keyCode(int32 v) mut => VT.put_keyCode(ref this, v);
			public HRESULT get_keyCode(out int32 p) mut => VT.get_keyCode(ref this, out p);
			public HRESULT get_button(out int32 p) mut => VT.get_button(ref this, out p);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT get_qualifier(out BSTR p) mut => VT.get_qualifier(ref this, out p);
			public HRESULT get_reason(out int32 p) mut => VT.get_reason(ref this, out p);
			public HRESULT get_x(out int32 p) mut => VT.get_x(ref this, out p);
			public HRESULT get_y(out int32 p) mut => VT.get_y(ref this, out p);
			public HRESULT get_clientX(out int32 p) mut => VT.get_clientX(ref this, out p);
			public HRESULT get_clientY(out int32 p) mut => VT.get_clientY(ref this, out p);
			public HRESULT get_offsetX(out int32 p) mut => VT.get_offsetX(ref this, out p);
			public HRESULT get_offsetY(out int32 p) mut => VT.get_offsetY(ref this, out p);
			public HRESULT get_screenX(out int32 p) mut => VT.get_screenX(ref this, out p);
			public HRESULT get_screenY(out int32 p) mut => VT.get_screenY(ref this, out p);
			public HRESULT get_srcFilter(out IDispatch* p) mut => VT.get_srcFilter(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out IHTMLElement* p) get_srcElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int16 p) get_altKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int16 p) get_ctrlKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int16 p) get_shiftKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, VARIANT v) put_returnValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out VARIANT p) get_returnValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, int16 v) put_cancelBubble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int16 p) get_cancelBubble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out IHTMLElement* p) get_fromElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out IHTMLElement* p) get_toElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, int32 v) put_keyCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_keyCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_button;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out BSTR p) get_qualifier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_reason;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_clientX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_clientY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_offsetX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_offsetY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_screenX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out int32 p) get_screenY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj self, out IDispatch* p) get_srcFilter;
			}
		}
		[CRepr]
		public struct IElementBehaviorSite : IUnknown
		{
			public const new Guid IID = .(0x3050f427, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetElement(out IHTMLElement* ppElement) mut => VT.GetElement(ref this, out ppElement);
			public HRESULT RegisterNotification(int32 lEvent) mut => VT.RegisterNotification(ref this, lEvent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSite self, out IHTMLElement* ppElement) GetElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSite self, int32 lEvent) RegisterNotification;
			}
		}
		[CRepr]
		public struct IElementBehavior : IUnknown
		{
			public const new Guid IID = .(0x3050f425, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Init(ref IElementBehaviorSite pBehaviorSite) mut => VT.Init(ref this, ref pBehaviorSite);
			public HRESULT Notify(int32 lEvent, out VARIANT pVar) mut => VT.Notify(ref this, lEvent, out pVar);
			public HRESULT Detach() mut => VT.Detach(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehavior self, ref IElementBehaviorSite pBehaviorSite) Init;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehavior self, int32 lEvent, out VARIANT pVar) Notify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehavior self) Detach;
			}
		}
		[CRepr]
		public struct IElementBehaviorFactory : IUnknown
		{
			public const new Guid IID = .(0x3050f429, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FindBehavior(BSTR bstrBehavior, BSTR bstrBehaviorUrl, ref IElementBehaviorSite pSite, out IElementBehavior* ppBehavior) mut => VT.FindBehavior(ref this, bstrBehavior, bstrBehaviorUrl, ref pSite, out ppBehavior);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorFactory self, BSTR bstrBehavior, BSTR bstrBehaviorUrl, ref IElementBehaviorSite pSite, out IElementBehavior* ppBehavior) FindBehavior;
			}
		}
		[CRepr]
		public struct IElementBehaviorSiteOM : IUnknown
		{
			public const new Guid IID = .(0x3050f489, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RegisterEvent(PWSTR pchEvent, int32 lFlags, out int32 plCookie) mut => VT.RegisterEvent(ref this, pchEvent, lFlags, out plCookie);
			public HRESULT GetEventCookie(PWSTR pchEvent, out int32 plCookie) mut => VT.GetEventCookie(ref this, pchEvent, out plCookie);
			public HRESULT FireEvent(int32 lCookie, ref IHTMLEventObj pEventObject) mut => VT.FireEvent(ref this, lCookie, ref pEventObject);
			public HRESULT CreateEventObject(out IHTMLEventObj* ppEventObject) mut => VT.CreateEventObject(ref this, out ppEventObject);
			public HRESULT RegisterName(PWSTR pchName) mut => VT.RegisterName(ref this, pchName);
			public HRESULT RegisterUrn(PWSTR pchUrn) mut => VT.RegisterUrn(ref this, pchUrn);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM self, PWSTR pchEvent, int32 lFlags, out int32 plCookie) RegisterEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM self, PWSTR pchEvent, out int32 plCookie) GetEventCookie;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM self, int32 lCookie, ref IHTMLEventObj pEventObject) FireEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM self, out IHTMLEventObj* ppEventObject) CreateEventObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM self, PWSTR pchName) RegisterName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM self, PWSTR pchUrn) RegisterUrn;
			}
		}
		[CRepr]
		public struct IElementBehaviorRender : IUnknown
		{
			public const new Guid IID = .(0x3050f4aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Draw(HDC hdc, int32 lLayer, ref RECT pRect, ref IUnknown pReserved) mut => VT.Draw(ref this, hdc, lLayer, ref pRect, ref pReserved);
			public HRESULT GetRenderInfo(out int32 plRenderInfo) mut => VT.GetRenderInfo(ref this, out plRenderInfo);
			public HRESULT HitTestPoint(ref POINT pPoint, ref IUnknown pReserved, out BOOL pbHit) mut => VT.HitTestPoint(ref this, ref pPoint, ref pReserved, out pbHit);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorRender self, HDC hdc, int32 lLayer, ref RECT pRect, ref IUnknown pReserved) Draw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorRender self, out int32 plRenderInfo) GetRenderInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorRender self, ref POINT pPoint, ref IUnknown pReserved, out BOOL pbHit) HitTestPoint;
			}
		}
		[CRepr]
		public struct IElementBehaviorSiteRender : IUnknown
		{
			public const new Guid IID = .(0x3050f4a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Invalidate(ref RECT pRect) mut => VT.Invalidate(ref this, ref pRect);
			public HRESULT InvalidateRenderInfo() mut => VT.InvalidateRenderInfo(ref this);
			public HRESULT InvalidateStyle() mut => VT.InvalidateStyle(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteRender self, ref RECT pRect) Invalidate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteRender self) InvalidateRenderInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteRender self) InvalidateStyle;
			}
		}
		[CRepr]
		public struct IDOMEvent : IDispatch
		{
			public const new Guid IID = .(0x305104ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_bubbles(out int16 p) mut => VT.get_bubbles(ref this, out p);
			public HRESULT get_cancelable(out int16 p) mut => VT.get_cancelable(ref this, out p);
			public HRESULT get_currentTarget(out IEventTarget* p) mut => VT.get_currentTarget(ref this, out p);
			public HRESULT get_defaultPrevented(out int16 p) mut => VT.get_defaultPrevented(ref this, out p);
			public HRESULT get_eventPhase(out uint16 p) mut => VT.get_eventPhase(ref this, out p);
			public HRESULT get_target(out IEventTarget* p) mut => VT.get_target(ref this, out p);
			public HRESULT get_timeStamp(out uint64 p) mut => VT.get_timeStamp(ref this, out p);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT initEvent(BSTR eventType, int16 canBubble, int16 cancelable) mut => VT.initEvent(ref this, eventType, canBubble, cancelable);
			public HRESULT preventDefault() mut => VT.preventDefault(ref this);
			public HRESULT stopPropagation() mut => VT.stopPropagation(ref this);
			public HRESULT stopImmediatePropagation() mut => VT.stopImmediatePropagation(ref this);
			public HRESULT get_isTrusted(out int16 p) mut => VT.get_isTrusted(ref this, out p);
			public HRESULT put_cancelBubble(int16 v) mut => VT.put_cancelBubble(ref this, v);
			public HRESULT get_cancelBubble(out int16 p) mut => VT.get_cancelBubble(ref this, out p);
			public HRESULT get_srcElement(out IHTMLElement* p) mut => VT.get_srcElement(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out int16 p) get_bubbles;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out int16 p) get_cancelable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out IEventTarget* p) get_currentTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out int16 p) get_defaultPrevented;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out uint16 p) get_eventPhase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out IEventTarget* p) get_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out uint64 p) get_timeStamp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, BSTR eventType, int16 canBubble, int16 cancelable) initEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self) preventDefault;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self) stopPropagation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self) stopImmediatePropagation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out int16 p) get_isTrusted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, int16 v) put_cancelBubble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out int16 p) get_cancelBubble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEvent self, out IHTMLElement* p) get_srcElement;
			}
		}
		[CRepr]
		public struct IHTMLDOMConstructor : IDispatch
		{
			public const new Guid IID = .(0x3051049b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_constructor(out IDispatch* p) mut => VT.get_constructor(ref this, out p);
			public HRESULT LookupGetter(BSTR propname, out VARIANT ppDispHandler) mut => VT.LookupGetter(ref this, propname, out ppDispHandler);
			public HRESULT LookupSetter(BSTR propname, out VARIANT ppDispHandler) mut => VT.LookupSetter(ref this, propname, out ppDispHandler);
			public HRESULT DefineGetter(BSTR propname, ref VARIANT pdispHandler) mut => VT.DefineGetter(ref this, propname, ref pdispHandler);
			public HRESULT DefineSetter(BSTR propname, ref VARIANT pdispHandler) mut => VT.DefineSetter(ref this, propname, ref pdispHandler);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructor self, out IDispatch* p) get_constructor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructor self, BSTR propname, out VARIANT ppDispHandler) LookupGetter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructor self, BSTR propname, out VARIANT ppDispHandler) LookupSetter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructor self, BSTR propname, ref VARIANT pdispHandler) DefineGetter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructor self, BSTR propname, ref VARIANT pdispHandler) DefineSetter;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheetRule : IDispatch
		{
			public const new Guid IID = .(0x3050f357, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selectorText(BSTR v) mut => VT.put_selectorText(ref this, v);
			public HRESULT get_selectorText(out BSTR p) mut => VT.get_selectorText(ref this, out p);
			public HRESULT get_style(out IHTMLRuleStyle* p) mut => VT.get_style(ref this, out p);
			public HRESULT get_readOnly(out int16 p) mut => VT.get_readOnly(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRule self, BSTR v) put_selectorText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRule self, out BSTR p) get_selectorText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRule self, out IHTMLRuleStyle* p) get_style;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRule self, out int16 p) get_readOnly;
			}
		}
		[CRepr]
		public struct IHTMLCSSStyleDeclaration : IDispatch
		{
			public const new Guid IID = .(0x30510740, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get_parentRule(out VARIANT p) mut => VT.get_parentRule(ref this, out p);
			public HRESULT getPropertyValue(BSTR bstrPropertyName, out BSTR pbstrPropertyValue) mut => VT.getPropertyValue(ref this, bstrPropertyName, out pbstrPropertyValue);
			public HRESULT getPropertyPriority(BSTR bstrPropertyName, out BSTR pbstrPropertyPriority) mut => VT.getPropertyPriority(ref this, bstrPropertyName, out pbstrPropertyPriority);
			public HRESULT removeProperty(BSTR bstrPropertyName, out BSTR pbstrPropertyValue) mut => VT.removeProperty(ref this, bstrPropertyName, out pbstrPropertyValue);
			public HRESULT setProperty(BSTR bstrPropertyName, ref VARIANT pvarPropertyValue, ref VARIANT pvarPropertyPriority) mut => VT.setProperty(ref this, bstrPropertyName, ref pvarPropertyValue, ref pvarPropertyPriority);
			public HRESULT item(int32 index, out BSTR pbstrPropertyName) mut => VT.item(ref this, index, out pbstrPropertyName);
			public HRESULT put_fontFamily(BSTR v) mut => VT.put_fontFamily(ref this, v);
			public HRESULT get_fontFamily(out BSTR p) mut => VT.get_fontFamily(ref this, out p);
			public HRESULT put_fontStyle(BSTR v) mut => VT.put_fontStyle(ref this, v);
			public HRESULT get_fontStyle(out BSTR p) mut => VT.get_fontStyle(ref this, out p);
			public HRESULT put_fontVariant(BSTR v) mut => VT.put_fontVariant(ref this, v);
			public HRESULT get_fontVariant(out BSTR p) mut => VT.get_fontVariant(ref this, out p);
			public HRESULT put_fontWeight(BSTR v) mut => VT.put_fontWeight(ref this, v);
			public HRESULT get_fontWeight(out BSTR p) mut => VT.get_fontWeight(ref this, out p);
			public HRESULT put_fontSize(VARIANT v) mut => VT.put_fontSize(ref this, v);
			public HRESULT get_fontSize(out VARIANT p) mut => VT.get_fontSize(ref this, out p);
			public HRESULT put_font(BSTR v) mut => VT.put_font(ref this, v);
			public HRESULT get_font(out BSTR p) mut => VT.get_font(ref this, out p);
			public HRESULT put_color(VARIANT v) mut => VT.put_color(ref this, v);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_backgroundColor(VARIANT v) mut => VT.put_backgroundColor(ref this, v);
			public HRESULT get_backgroundColor(out VARIANT p) mut => VT.get_backgroundColor(ref this, out p);
			public HRESULT put_backgroundImage(BSTR v) mut => VT.put_backgroundImage(ref this, v);
			public HRESULT get_backgroundImage(out BSTR p) mut => VT.get_backgroundImage(ref this, out p);
			public HRESULT put_backgroundRepeat(BSTR v) mut => VT.put_backgroundRepeat(ref this, v);
			public HRESULT get_backgroundRepeat(out BSTR p) mut => VT.get_backgroundRepeat(ref this, out p);
			public HRESULT put_backgroundAttachment(BSTR v) mut => VT.put_backgroundAttachment(ref this, v);
			public HRESULT get_backgroundAttachment(out BSTR p) mut => VT.get_backgroundAttachment(ref this, out p);
			public HRESULT put_backgroundPosition(BSTR v) mut => VT.put_backgroundPosition(ref this, v);
			public HRESULT get_backgroundPosition(out BSTR p) mut => VT.get_backgroundPosition(ref this, out p);
			public HRESULT put_backgroundPositionX(VARIANT v) mut => VT.put_backgroundPositionX(ref this, v);
			public HRESULT get_backgroundPositionX(out VARIANT p) mut => VT.get_backgroundPositionX(ref this, out p);
			public HRESULT put_backgroundPositionY(VARIANT v) mut => VT.put_backgroundPositionY(ref this, v);
			public HRESULT get_backgroundPositionY(out VARIANT p) mut => VT.get_backgroundPositionY(ref this, out p);
			public HRESULT put_wordSpacing(VARIANT v) mut => VT.put_wordSpacing(ref this, v);
			public HRESULT get_wordSpacing(out VARIANT p) mut => VT.get_wordSpacing(ref this, out p);
			public HRESULT put_letterSpacing(VARIANT v) mut => VT.put_letterSpacing(ref this, v);
			public HRESULT get_letterSpacing(out VARIANT p) mut => VT.get_letterSpacing(ref this, out p);
			public HRESULT put_textDecoration(BSTR v) mut => VT.put_textDecoration(ref this, v);
			public HRESULT get_textDecoration(out BSTR p) mut => VT.get_textDecoration(ref this, out p);
			public HRESULT put_verticalAlign(VARIANT v) mut => VT.put_verticalAlign(ref this, v);
			public HRESULT get_verticalAlign(out VARIANT p) mut => VT.get_verticalAlign(ref this, out p);
			public HRESULT put_textTransform(BSTR v) mut => VT.put_textTransform(ref this, v);
			public HRESULT get_textTransform(out BSTR p) mut => VT.get_textTransform(ref this, out p);
			public HRESULT put_textAlign(BSTR v) mut => VT.put_textAlign(ref this, v);
			public HRESULT get_textAlign(out BSTR p) mut => VT.get_textAlign(ref this, out p);
			public HRESULT put_textIndent(VARIANT v) mut => VT.put_textIndent(ref this, v);
			public HRESULT get_textIndent(out VARIANT p) mut => VT.get_textIndent(ref this, out p);
			public HRESULT put_lineHeight(VARIANT v) mut => VT.put_lineHeight(ref this, v);
			public HRESULT get_lineHeight(out VARIANT p) mut => VT.get_lineHeight(ref this, out p);
			public HRESULT put_marginTop(VARIANT v) mut => VT.put_marginTop(ref this, v);
			public HRESULT get_marginTop(out VARIANT p) mut => VT.get_marginTop(ref this, out p);
			public HRESULT put_marginRight(VARIANT v) mut => VT.put_marginRight(ref this, v);
			public HRESULT get_marginRight(out VARIANT p) mut => VT.get_marginRight(ref this, out p);
			public HRESULT put_marginBottom(VARIANT v) mut => VT.put_marginBottom(ref this, v);
			public HRESULT get_marginBottom(out VARIANT p) mut => VT.get_marginBottom(ref this, out p);
			public HRESULT put_marginLeft(VARIANT v) mut => VT.put_marginLeft(ref this, v);
			public HRESULT get_marginLeft(out VARIANT p) mut => VT.get_marginLeft(ref this, out p);
			public HRESULT put_margin(BSTR v) mut => VT.put_margin(ref this, v);
			public HRESULT get_margin(out BSTR p) mut => VT.get_margin(ref this, out p);
			public HRESULT put_paddingTop(VARIANT v) mut => VT.put_paddingTop(ref this, v);
			public HRESULT get_paddingTop(out VARIANT p) mut => VT.get_paddingTop(ref this, out p);
			public HRESULT put_paddingRight(VARIANT v) mut => VT.put_paddingRight(ref this, v);
			public HRESULT get_paddingRight(out VARIANT p) mut => VT.get_paddingRight(ref this, out p);
			public HRESULT put_paddingBottom(VARIANT v) mut => VT.put_paddingBottom(ref this, v);
			public HRESULT get_paddingBottom(out VARIANT p) mut => VT.get_paddingBottom(ref this, out p);
			public HRESULT put_paddingLeft(VARIANT v) mut => VT.put_paddingLeft(ref this, v);
			public HRESULT get_paddingLeft(out VARIANT p) mut => VT.get_paddingLeft(ref this, out p);
			public HRESULT put_padding(BSTR v) mut => VT.put_padding(ref this, v);
			public HRESULT get_padding(out BSTR p) mut => VT.get_padding(ref this, out p);
			public HRESULT put_border(BSTR v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out BSTR p) mut => VT.get_border(ref this, out p);
			public HRESULT put_borderTop(BSTR v) mut => VT.put_borderTop(ref this, v);
			public HRESULT get_borderTop(out BSTR p) mut => VT.get_borderTop(ref this, out p);
			public HRESULT put_borderRight(BSTR v) mut => VT.put_borderRight(ref this, v);
			public HRESULT get_borderRight(out BSTR p) mut => VT.get_borderRight(ref this, out p);
			public HRESULT put_borderBottom(BSTR v) mut => VT.put_borderBottom(ref this, v);
			public HRESULT get_borderBottom(out BSTR p) mut => VT.get_borderBottom(ref this, out p);
			public HRESULT put_borderLeft(BSTR v) mut => VT.put_borderLeft(ref this, v);
			public HRESULT get_borderLeft(out BSTR p) mut => VT.get_borderLeft(ref this, out p);
			public HRESULT put_borderColor(BSTR v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out BSTR p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_borderTopColor(VARIANT v) mut => VT.put_borderTopColor(ref this, v);
			public HRESULT get_borderTopColor(out VARIANT p) mut => VT.get_borderTopColor(ref this, out p);
			public HRESULT put_borderRightColor(VARIANT v) mut => VT.put_borderRightColor(ref this, v);
			public HRESULT get_borderRightColor(out VARIANT p) mut => VT.get_borderRightColor(ref this, out p);
			public HRESULT put_borderBottomColor(VARIANT v) mut => VT.put_borderBottomColor(ref this, v);
			public HRESULT get_borderBottomColor(out VARIANT p) mut => VT.get_borderBottomColor(ref this, out p);
			public HRESULT put_borderLeftColor(VARIANT v) mut => VT.put_borderLeftColor(ref this, v);
			public HRESULT get_borderLeftColor(out VARIANT p) mut => VT.get_borderLeftColor(ref this, out p);
			public HRESULT put_borderWidth(BSTR v) mut => VT.put_borderWidth(ref this, v);
			public HRESULT get_borderWidth(out BSTR p) mut => VT.get_borderWidth(ref this, out p);
			public HRESULT put_borderTopWidth(VARIANT v) mut => VT.put_borderTopWidth(ref this, v);
			public HRESULT get_borderTopWidth(out VARIANT p) mut => VT.get_borderTopWidth(ref this, out p);
			public HRESULT put_borderRightWidth(VARIANT v) mut => VT.put_borderRightWidth(ref this, v);
			public HRESULT get_borderRightWidth(out VARIANT p) mut => VT.get_borderRightWidth(ref this, out p);
			public HRESULT put_borderBottomWidth(VARIANT v) mut => VT.put_borderBottomWidth(ref this, v);
			public HRESULT get_borderBottomWidth(out VARIANT p) mut => VT.get_borderBottomWidth(ref this, out p);
			public HRESULT put_borderLeftWidth(VARIANT v) mut => VT.put_borderLeftWidth(ref this, v);
			public HRESULT get_borderLeftWidth(out VARIANT p) mut => VT.get_borderLeftWidth(ref this, out p);
			public HRESULT put_borderStyle(BSTR v) mut => VT.put_borderStyle(ref this, v);
			public HRESULT get_borderStyle(out BSTR p) mut => VT.get_borderStyle(ref this, out p);
			public HRESULT put_borderTopStyle(BSTR v) mut => VT.put_borderTopStyle(ref this, v);
			public HRESULT get_borderTopStyle(out BSTR p) mut => VT.get_borderTopStyle(ref this, out p);
			public HRESULT put_borderRightStyle(BSTR v) mut => VT.put_borderRightStyle(ref this, v);
			public HRESULT get_borderRightStyle(out BSTR p) mut => VT.get_borderRightStyle(ref this, out p);
			public HRESULT put_borderBottomStyle(BSTR v) mut => VT.put_borderBottomStyle(ref this, v);
			public HRESULT get_borderBottomStyle(out BSTR p) mut => VT.get_borderBottomStyle(ref this, out p);
			public HRESULT put_borderLeftStyle(BSTR v) mut => VT.put_borderLeftStyle(ref this, v);
			public HRESULT get_borderLeftStyle(out BSTR p) mut => VT.get_borderLeftStyle(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_styleFloat(BSTR v) mut => VT.put_styleFloat(ref this, v);
			public HRESULT get_styleFloat(out BSTR p) mut => VT.get_styleFloat(ref this, out p);
			public HRESULT put_clear(BSTR v) mut => VT.put_clear(ref this, v);
			public HRESULT get_clear(out BSTR p) mut => VT.get_clear(ref this, out p);
			public HRESULT put_display(BSTR v) mut => VT.put_display(ref this, v);
			public HRESULT get_display(out BSTR p) mut => VT.get_display(ref this, out p);
			public HRESULT put_visibility(BSTR v) mut => VT.put_visibility(ref this, v);
			public HRESULT get_visibility(out BSTR p) mut => VT.get_visibility(ref this, out p);
			public HRESULT put_listStyleType(BSTR v) mut => VT.put_listStyleType(ref this, v);
			public HRESULT get_listStyleType(out BSTR p) mut => VT.get_listStyleType(ref this, out p);
			public HRESULT put_listStylePosition(BSTR v) mut => VT.put_listStylePosition(ref this, v);
			public HRESULT get_listStylePosition(out BSTR p) mut => VT.get_listStylePosition(ref this, out p);
			public HRESULT put_listStyleImage(BSTR v) mut => VT.put_listStyleImage(ref this, v);
			public HRESULT get_listStyleImage(out BSTR p) mut => VT.get_listStyleImage(ref this, out p);
			public HRESULT put_listStyle(BSTR v) mut => VT.put_listStyle(ref this, v);
			public HRESULT get_listStyle(out BSTR p) mut => VT.get_listStyle(ref this, out p);
			public HRESULT put_whiteSpace(BSTR v) mut => VT.put_whiteSpace(ref this, v);
			public HRESULT get_whiteSpace(out BSTR p) mut => VT.get_whiteSpace(ref this, out p);
			public HRESULT put_top(VARIANT v) mut => VT.put_top(ref this, v);
			public HRESULT get_top(out VARIANT p) mut => VT.get_top(ref this, out p);
			public HRESULT put_left(VARIANT v) mut => VT.put_left(ref this, v);
			public HRESULT get_left(out VARIANT p) mut => VT.get_left(ref this, out p);
			public HRESULT put_zIndex(VARIANT v) mut => VT.put_zIndex(ref this, v);
			public HRESULT get_zIndex(out VARIANT p) mut => VT.get_zIndex(ref this, out p);
			public HRESULT put_overflow(BSTR v) mut => VT.put_overflow(ref this, v);
			public HRESULT get_overflow(out BSTR p) mut => VT.get_overflow(ref this, out p);
			public HRESULT put_pageBreakBefore(BSTR v) mut => VT.put_pageBreakBefore(ref this, v);
			public HRESULT get_pageBreakBefore(out BSTR p) mut => VT.get_pageBreakBefore(ref this, out p);
			public HRESULT put_pageBreakAfter(BSTR v) mut => VT.put_pageBreakAfter(ref this, v);
			public HRESULT get_pageBreakAfter(out BSTR p) mut => VT.get_pageBreakAfter(ref this, out p);
			public HRESULT put_cssText(BSTR v) mut => VT.put_cssText(ref this, v);
			public HRESULT get_cssText(out BSTR p) mut => VT.get_cssText(ref this, out p);
			public HRESULT put_cursor(BSTR v) mut => VT.put_cursor(ref this, v);
			public HRESULT get_cursor(out BSTR p) mut => VT.get_cursor(ref this, out p);
			public HRESULT put_clip(BSTR v) mut => VT.put_clip(ref this, v);
			public HRESULT get_clip(out BSTR p) mut => VT.get_clip(ref this, out p);
			public HRESULT put_filter(BSTR v) mut => VT.put_filter(ref this, v);
			public HRESULT get_filter(out BSTR p) mut => VT.get_filter(ref this, out p);
			public HRESULT put_tableLayout(BSTR v) mut => VT.put_tableLayout(ref this, v);
			public HRESULT get_tableLayout(out BSTR p) mut => VT.get_tableLayout(ref this, out p);
			public HRESULT put_borderCollapse(BSTR v) mut => VT.put_borderCollapse(ref this, v);
			public HRESULT get_borderCollapse(out BSTR p) mut => VT.get_borderCollapse(ref this, out p);
			public HRESULT put_direction(BSTR v) mut => VT.put_direction(ref this, v);
			public HRESULT get_direction(out BSTR p) mut => VT.get_direction(ref this, out p);
			public HRESULT put_behavior(BSTR v) mut => VT.put_behavior(ref this, v);
			public HRESULT get_behavior(out BSTR p) mut => VT.get_behavior(ref this, out p);
			public HRESULT put_position(BSTR v) mut => VT.put_position(ref this, v);
			public HRESULT get_position(out BSTR p) mut => VT.get_position(ref this, out p);
			public HRESULT put_unicodeBidi(BSTR v) mut => VT.put_unicodeBidi(ref this, v);
			public HRESULT get_unicodeBidi(out BSTR p) mut => VT.get_unicodeBidi(ref this, out p);
			public HRESULT put_bottom(VARIANT v) mut => VT.put_bottom(ref this, v);
			public HRESULT get_bottom(out VARIANT p) mut => VT.get_bottom(ref this, out p);
			public HRESULT put_right(VARIANT v) mut => VT.put_right(ref this, v);
			public HRESULT get_right(out VARIANT p) mut => VT.get_right(ref this, out p);
			public HRESULT put_imeMode(BSTR v) mut => VT.put_imeMode(ref this, v);
			public HRESULT get_imeMode(out BSTR p) mut => VT.get_imeMode(ref this, out p);
			public HRESULT put_rubyAlign(BSTR v) mut => VT.put_rubyAlign(ref this, v);
			public HRESULT get_rubyAlign(out BSTR p) mut => VT.get_rubyAlign(ref this, out p);
			public HRESULT put_rubyPosition(BSTR v) mut => VT.put_rubyPosition(ref this, v);
			public HRESULT get_rubyPosition(out BSTR p) mut => VT.get_rubyPosition(ref this, out p);
			public HRESULT put_rubyOverhang(BSTR v) mut => VT.put_rubyOverhang(ref this, v);
			public HRESULT get_rubyOverhang(out BSTR p) mut => VT.get_rubyOverhang(ref this, out p);
			public HRESULT put_layoutGridChar(VARIANT v) mut => VT.put_layoutGridChar(ref this, v);
			public HRESULT get_layoutGridChar(out VARIANT p) mut => VT.get_layoutGridChar(ref this, out p);
			public HRESULT put_layoutGridLine(VARIANT v) mut => VT.put_layoutGridLine(ref this, v);
			public HRESULT get_layoutGridLine(out VARIANT p) mut => VT.get_layoutGridLine(ref this, out p);
			public HRESULT put_layoutGridMode(BSTR v) mut => VT.put_layoutGridMode(ref this, v);
			public HRESULT get_layoutGridMode(out BSTR p) mut => VT.get_layoutGridMode(ref this, out p);
			public HRESULT put_layoutGridType(BSTR v) mut => VT.put_layoutGridType(ref this, v);
			public HRESULT get_layoutGridType(out BSTR p) mut => VT.get_layoutGridType(ref this, out p);
			public HRESULT put_layoutGrid(BSTR v) mut => VT.put_layoutGrid(ref this, v);
			public HRESULT get_layoutGrid(out BSTR p) mut => VT.get_layoutGrid(ref this, out p);
			public HRESULT put_textAutospace(BSTR v) mut => VT.put_textAutospace(ref this, v);
			public HRESULT get_textAutospace(out BSTR p) mut => VT.get_textAutospace(ref this, out p);
			public HRESULT put_wordBreak(BSTR v) mut => VT.put_wordBreak(ref this, v);
			public HRESULT get_wordBreak(out BSTR p) mut => VT.get_wordBreak(ref this, out p);
			public HRESULT put_lineBreak(BSTR v) mut => VT.put_lineBreak(ref this, v);
			public HRESULT get_lineBreak(out BSTR p) mut => VT.get_lineBreak(ref this, out p);
			public HRESULT put_textJustify(BSTR v) mut => VT.put_textJustify(ref this, v);
			public HRESULT get_textJustify(out BSTR p) mut => VT.get_textJustify(ref this, out p);
			public HRESULT put_textJustifyTrim(BSTR v) mut => VT.put_textJustifyTrim(ref this, v);
			public HRESULT get_textJustifyTrim(out BSTR p) mut => VT.get_textJustifyTrim(ref this, out p);
			public HRESULT put_textKashida(VARIANT v) mut => VT.put_textKashida(ref this, v);
			public HRESULT get_textKashida(out VARIANT p) mut => VT.get_textKashida(ref this, out p);
			public HRESULT put_overflowX(BSTR v) mut => VT.put_overflowX(ref this, v);
			public HRESULT get_overflowX(out BSTR p) mut => VT.get_overflowX(ref this, out p);
			public HRESULT put_overflowY(BSTR v) mut => VT.put_overflowY(ref this, v);
			public HRESULT get_overflowY(out BSTR p) mut => VT.get_overflowY(ref this, out p);
			public HRESULT put_accelerator(BSTR v) mut => VT.put_accelerator(ref this, v);
			public HRESULT get_accelerator(out BSTR p) mut => VT.get_accelerator(ref this, out p);
			public HRESULT put_layoutFlow(BSTR v) mut => VT.put_layoutFlow(ref this, v);
			public HRESULT get_layoutFlow(out BSTR p) mut => VT.get_layoutFlow(ref this, out p);
			public HRESULT put_zoom(VARIANT v) mut => VT.put_zoom(ref this, v);
			public HRESULT get_zoom(out VARIANT p) mut => VT.get_zoom(ref this, out p);
			public HRESULT put_wordWrap(BSTR v) mut => VT.put_wordWrap(ref this, v);
			public HRESULT get_wordWrap(out BSTR p) mut => VT.get_wordWrap(ref this, out p);
			public HRESULT put_textUnderlinePosition(BSTR v) mut => VT.put_textUnderlinePosition(ref this, v);
			public HRESULT get_textUnderlinePosition(out BSTR p) mut => VT.get_textUnderlinePosition(ref this, out p);
			public HRESULT put_scrollbarBaseColor(VARIANT v) mut => VT.put_scrollbarBaseColor(ref this, v);
			public HRESULT get_scrollbarBaseColor(out VARIANT p) mut => VT.get_scrollbarBaseColor(ref this, out p);
			public HRESULT put_scrollbarFaceColor(VARIANT v) mut => VT.put_scrollbarFaceColor(ref this, v);
			public HRESULT get_scrollbarFaceColor(out VARIANT p) mut => VT.get_scrollbarFaceColor(ref this, out p);
			public HRESULT put_scrollbar3dLightColor(VARIANT v) mut => VT.put_scrollbar3dLightColor(ref this, v);
			public HRESULT get_scrollbar3dLightColor(out VARIANT p) mut => VT.get_scrollbar3dLightColor(ref this, out p);
			public HRESULT put_scrollbarShadowColor(VARIANT v) mut => VT.put_scrollbarShadowColor(ref this, v);
			public HRESULT get_scrollbarShadowColor(out VARIANT p) mut => VT.get_scrollbarShadowColor(ref this, out p);
			public HRESULT put_scrollbarHighlightColor(VARIANT v) mut => VT.put_scrollbarHighlightColor(ref this, v);
			public HRESULT get_scrollbarHighlightColor(out VARIANT p) mut => VT.get_scrollbarHighlightColor(ref this, out p);
			public HRESULT put_scrollbarDarkShadowColor(VARIANT v) mut => VT.put_scrollbarDarkShadowColor(ref this, v);
			public HRESULT get_scrollbarDarkShadowColor(out VARIANT p) mut => VT.get_scrollbarDarkShadowColor(ref this, out p);
			public HRESULT put_scrollbarArrowColor(VARIANT v) mut => VT.put_scrollbarArrowColor(ref this, v);
			public HRESULT get_scrollbarArrowColor(out VARIANT p) mut => VT.get_scrollbarArrowColor(ref this, out p);
			public HRESULT put_scrollbarTrackColor(VARIANT v) mut => VT.put_scrollbarTrackColor(ref this, v);
			public HRESULT get_scrollbarTrackColor(out VARIANT p) mut => VT.get_scrollbarTrackColor(ref this, out p);
			public HRESULT put_writingMode(BSTR v) mut => VT.put_writingMode(ref this, v);
			public HRESULT get_writingMode(out BSTR p) mut => VT.get_writingMode(ref this, out p);
			public HRESULT put_textAlignLast(BSTR v) mut => VT.put_textAlignLast(ref this, v);
			public HRESULT get_textAlignLast(out BSTR p) mut => VT.get_textAlignLast(ref this, out p);
			public HRESULT put_textKashidaSpace(VARIANT v) mut => VT.put_textKashidaSpace(ref this, v);
			public HRESULT get_textKashidaSpace(out VARIANT p) mut => VT.get_textKashidaSpace(ref this, out p);
			public HRESULT put_textOverflow(BSTR v) mut => VT.put_textOverflow(ref this, v);
			public HRESULT get_textOverflow(out BSTR p) mut => VT.get_textOverflow(ref this, out p);
			public HRESULT put_minHeight(VARIANT v) mut => VT.put_minHeight(ref this, v);
			public HRESULT get_minHeight(out VARIANT p) mut => VT.get_minHeight(ref this, out p);
			public HRESULT put_msInterpolationMode(BSTR v) mut => VT.put_msInterpolationMode(ref this, v);
			public HRESULT get_msInterpolationMode(out BSTR p) mut => VT.get_msInterpolationMode(ref this, out p);
			public HRESULT put_maxHeight(VARIANT v) mut => VT.put_maxHeight(ref this, v);
			public HRESULT get_maxHeight(out VARIANT p) mut => VT.get_maxHeight(ref this, out p);
			public HRESULT put_minWidth(VARIANT v) mut => VT.put_minWidth(ref this, v);
			public HRESULT get_minWidth(out VARIANT p) mut => VT.get_minWidth(ref this, out p);
			public HRESULT put_maxWidth(VARIANT v) mut => VT.put_maxWidth(ref this, v);
			public HRESULT get_maxWidth(out VARIANT p) mut => VT.get_maxWidth(ref this, out p);
			public HRESULT put_content(BSTR v) mut => VT.put_content(ref this, v);
			public HRESULT get_content(out BSTR p) mut => VT.get_content(ref this, out p);
			public HRESULT put_captionSide(BSTR v) mut => VT.put_captionSide(ref this, v);
			public HRESULT get_captionSide(out BSTR p) mut => VT.get_captionSide(ref this, out p);
			public HRESULT put_counterIncrement(BSTR v) mut => VT.put_counterIncrement(ref this, v);
			public HRESULT get_counterIncrement(out BSTR p) mut => VT.get_counterIncrement(ref this, out p);
			public HRESULT put_counterReset(BSTR v) mut => VT.put_counterReset(ref this, v);
			public HRESULT get_counterReset(out BSTR p) mut => VT.get_counterReset(ref this, out p);
			public HRESULT put_outline(BSTR v) mut => VT.put_outline(ref this, v);
			public HRESULT get_outline(out BSTR p) mut => VT.get_outline(ref this, out p);
			public HRESULT put_outlineWidth(VARIANT v) mut => VT.put_outlineWidth(ref this, v);
			public HRESULT get_outlineWidth(out VARIANT p) mut => VT.get_outlineWidth(ref this, out p);
			public HRESULT put_outlineStyle(BSTR v) mut => VT.put_outlineStyle(ref this, v);
			public HRESULT get_outlineStyle(out BSTR p) mut => VT.get_outlineStyle(ref this, out p);
			public HRESULT put_outlineColor(VARIANT v) mut => VT.put_outlineColor(ref this, v);
			public HRESULT get_outlineColor(out VARIANT p) mut => VT.get_outlineColor(ref this, out p);
			public HRESULT put_boxSizing(BSTR v) mut => VT.put_boxSizing(ref this, v);
			public HRESULT get_boxSizing(out BSTR p) mut => VT.get_boxSizing(ref this, out p);
			public HRESULT put_borderSpacing(BSTR v) mut => VT.put_borderSpacing(ref this, v);
			public HRESULT get_borderSpacing(out BSTR p) mut => VT.get_borderSpacing(ref this, out p);
			public HRESULT put_orphans(VARIANT v) mut => VT.put_orphans(ref this, v);
			public HRESULT get_orphans(out VARIANT p) mut => VT.get_orphans(ref this, out p);
			public HRESULT put_widows(VARIANT v) mut => VT.put_widows(ref this, v);
			public HRESULT get_widows(out VARIANT p) mut => VT.get_widows(ref this, out p);
			public HRESULT put_pageBreakInside(BSTR v) mut => VT.put_pageBreakInside(ref this, v);
			public HRESULT get_pageBreakInside(out BSTR p) mut => VT.get_pageBreakInside(ref this, out p);
			public HRESULT put_emptyCells(BSTR v) mut => VT.put_emptyCells(ref this, v);
			public HRESULT get_emptyCells(out BSTR p) mut => VT.get_emptyCells(ref this, out p);
			public HRESULT put_msBlockProgression(BSTR v) mut => VT.put_msBlockProgression(ref this, v);
			public HRESULT get_msBlockProgression(out BSTR p) mut => VT.get_msBlockProgression(ref this, out p);
			public HRESULT put_quotes(BSTR v) mut => VT.put_quotes(ref this, v);
			public HRESULT get_quotes(out BSTR p) mut => VT.get_quotes(ref this, out p);
			public HRESULT put_alignmentBaseline(BSTR v) mut => VT.put_alignmentBaseline(ref this, v);
			public HRESULT get_alignmentBaseline(out BSTR p) mut => VT.get_alignmentBaseline(ref this, out p);
			public HRESULT put_baselineShift(VARIANT v) mut => VT.put_baselineShift(ref this, v);
			public HRESULT get_baselineShift(out VARIANT p) mut => VT.get_baselineShift(ref this, out p);
			public HRESULT put_dominantBaseline(BSTR v) mut => VT.put_dominantBaseline(ref this, v);
			public HRESULT get_dominantBaseline(out BSTR p) mut => VT.get_dominantBaseline(ref this, out p);
			public HRESULT put_fontSizeAdjust(VARIANT v) mut => VT.put_fontSizeAdjust(ref this, v);
			public HRESULT get_fontSizeAdjust(out VARIANT p) mut => VT.get_fontSizeAdjust(ref this, out p);
			public HRESULT put_fontStretch(BSTR v) mut => VT.put_fontStretch(ref this, v);
			public HRESULT get_fontStretch(out BSTR p) mut => VT.get_fontStretch(ref this, out p);
			public HRESULT put_opacity(VARIANT v) mut => VT.put_opacity(ref this, v);
			public HRESULT get_opacity(out VARIANT p) mut => VT.get_opacity(ref this, out p);
			public HRESULT put_clipPath(BSTR v) mut => VT.put_clipPath(ref this, v);
			public HRESULT get_clipPath(out BSTR p) mut => VT.get_clipPath(ref this, out p);
			public HRESULT put_clipRule(BSTR v) mut => VT.put_clipRule(ref this, v);
			public HRESULT get_clipRule(out BSTR p) mut => VT.get_clipRule(ref this, out p);
			public HRESULT put_fill(BSTR v) mut => VT.put_fill(ref this, v);
			public HRESULT get_fill(out BSTR p) mut => VT.get_fill(ref this, out p);
			public HRESULT put_fillOpacity(VARIANT v) mut => VT.put_fillOpacity(ref this, v);
			public HRESULT get_fillOpacity(out VARIANT p) mut => VT.get_fillOpacity(ref this, out p);
			public HRESULT put_fillRule(BSTR v) mut => VT.put_fillRule(ref this, v);
			public HRESULT get_fillRule(out BSTR p) mut => VT.get_fillRule(ref this, out p);
			public HRESULT put_kerning(VARIANT v) mut => VT.put_kerning(ref this, v);
			public HRESULT get_kerning(out VARIANT p) mut => VT.get_kerning(ref this, out p);
			public HRESULT put_marker(BSTR v) mut => VT.put_marker(ref this, v);
			public HRESULT get_marker(out BSTR p) mut => VT.get_marker(ref this, out p);
			public HRESULT put_markerEnd(BSTR v) mut => VT.put_markerEnd(ref this, v);
			public HRESULT get_markerEnd(out BSTR p) mut => VT.get_markerEnd(ref this, out p);
			public HRESULT put_markerMid(BSTR v) mut => VT.put_markerMid(ref this, v);
			public HRESULT get_markerMid(out BSTR p) mut => VT.get_markerMid(ref this, out p);
			public HRESULT put_markerStart(BSTR v) mut => VT.put_markerStart(ref this, v);
			public HRESULT get_markerStart(out BSTR p) mut => VT.get_markerStart(ref this, out p);
			public HRESULT put_mask(BSTR v) mut => VT.put_mask(ref this, v);
			public HRESULT get_mask(out BSTR p) mut => VT.get_mask(ref this, out p);
			public HRESULT put_pointerEvents(BSTR v) mut => VT.put_pointerEvents(ref this, v);
			public HRESULT get_pointerEvents(out BSTR p) mut => VT.get_pointerEvents(ref this, out p);
			public HRESULT put_stopColor(VARIANT v) mut => VT.put_stopColor(ref this, v);
			public HRESULT get_stopColor(out VARIANT p) mut => VT.get_stopColor(ref this, out p);
			public HRESULT put_stopOpacity(VARIANT v) mut => VT.put_stopOpacity(ref this, v);
			public HRESULT get_stopOpacity(out VARIANT p) mut => VT.get_stopOpacity(ref this, out p);
			public HRESULT put_stroke(BSTR v) mut => VT.put_stroke(ref this, v);
			public HRESULT get_stroke(out BSTR p) mut => VT.get_stroke(ref this, out p);
			public HRESULT put_strokeDasharray(BSTR v) mut => VT.put_strokeDasharray(ref this, v);
			public HRESULT get_strokeDasharray(out BSTR p) mut => VT.get_strokeDasharray(ref this, out p);
			public HRESULT put_strokeDashoffset(VARIANT v) mut => VT.put_strokeDashoffset(ref this, v);
			public HRESULT get_strokeDashoffset(out VARIANT p) mut => VT.get_strokeDashoffset(ref this, out p);
			public HRESULT put_strokeLinecap(BSTR v) mut => VT.put_strokeLinecap(ref this, v);
			public HRESULT get_strokeLinecap(out BSTR p) mut => VT.get_strokeLinecap(ref this, out p);
			public HRESULT put_strokeLinejoin(BSTR v) mut => VT.put_strokeLinejoin(ref this, v);
			public HRESULT get_strokeLinejoin(out BSTR p) mut => VT.get_strokeLinejoin(ref this, out p);
			public HRESULT put_strokeMiterlimit(VARIANT v) mut => VT.put_strokeMiterlimit(ref this, v);
			public HRESULT get_strokeMiterlimit(out VARIANT p) mut => VT.get_strokeMiterlimit(ref this, out p);
			public HRESULT put_strokeOpacity(VARIANT v) mut => VT.put_strokeOpacity(ref this, v);
			public HRESULT get_strokeOpacity(out VARIANT p) mut => VT.get_strokeOpacity(ref this, out p);
			public HRESULT put_strokeWidth(VARIANT v) mut => VT.put_strokeWidth(ref this, v);
			public HRESULT get_strokeWidth(out VARIANT p) mut => VT.get_strokeWidth(ref this, out p);
			public HRESULT put_textAnchor(BSTR v) mut => VT.put_textAnchor(ref this, v);
			public HRESULT get_textAnchor(out BSTR p) mut => VT.get_textAnchor(ref this, out p);
			public HRESULT put_glyphOrientationHorizontal(VARIANT v) mut => VT.put_glyphOrientationHorizontal(ref this, v);
			public HRESULT get_glyphOrientationHorizontal(out VARIANT p) mut => VT.get_glyphOrientationHorizontal(ref this, out p);
			public HRESULT put_glyphOrientationVertical(VARIANT v) mut => VT.put_glyphOrientationVertical(ref this, v);
			public HRESULT get_glyphOrientationVertical(out VARIANT p) mut => VT.get_glyphOrientationVertical(ref this, out p);
			public HRESULT put_borderRadius(BSTR v) mut => VT.put_borderRadius(ref this, v);
			public HRESULT get_borderRadius(out BSTR p) mut => VT.get_borderRadius(ref this, out p);
			public HRESULT put_borderTopLeftRadius(BSTR v) mut => VT.put_borderTopLeftRadius(ref this, v);
			public HRESULT get_borderTopLeftRadius(out BSTR p) mut => VT.get_borderTopLeftRadius(ref this, out p);
			public HRESULT put_borderTopRightRadius(BSTR v) mut => VT.put_borderTopRightRadius(ref this, v);
			public HRESULT get_borderTopRightRadius(out BSTR p) mut => VT.get_borderTopRightRadius(ref this, out p);
			public HRESULT put_borderBottomRightRadius(BSTR v) mut => VT.put_borderBottomRightRadius(ref this, v);
			public HRESULT get_borderBottomRightRadius(out BSTR p) mut => VT.get_borderBottomRightRadius(ref this, out p);
			public HRESULT put_borderBottomLeftRadius(BSTR v) mut => VT.put_borderBottomLeftRadius(ref this, v);
			public HRESULT get_borderBottomLeftRadius(out BSTR p) mut => VT.get_borderBottomLeftRadius(ref this, out p);
			public HRESULT put_clipTop(VARIANT v) mut => VT.put_clipTop(ref this, v);
			public HRESULT get_clipTop(out VARIANT p) mut => VT.get_clipTop(ref this, out p);
			public HRESULT put_clipRight(VARIANT v) mut => VT.put_clipRight(ref this, v);
			public HRESULT get_clipRight(out VARIANT p) mut => VT.get_clipRight(ref this, out p);
			public HRESULT get_clipBottom(out VARIANT p) mut => VT.get_clipBottom(ref this, out p);
			public HRESULT put_clipLeft(VARIANT v) mut => VT.put_clipLeft(ref this, v);
			public HRESULT get_clipLeft(out VARIANT p) mut => VT.get_clipLeft(ref this, out p);
			public HRESULT put_cssFloat(BSTR v) mut => VT.put_cssFloat(ref this, v);
			public HRESULT get_cssFloat(out BSTR p) mut => VT.get_cssFloat(ref this, out p);
			public HRESULT put_backgroundClip(BSTR v) mut => VT.put_backgroundClip(ref this, v);
			public HRESULT get_backgroundClip(out BSTR p) mut => VT.get_backgroundClip(ref this, out p);
			public HRESULT put_backgroundOrigin(BSTR v) mut => VT.put_backgroundOrigin(ref this, v);
			public HRESULT get_backgroundOrigin(out BSTR p) mut => VT.get_backgroundOrigin(ref this, out p);
			public HRESULT put_backgroundSize(BSTR v) mut => VT.put_backgroundSize(ref this, v);
			public HRESULT get_backgroundSize(out BSTR p) mut => VT.get_backgroundSize(ref this, out p);
			public HRESULT put_boxShadow(BSTR v) mut => VT.put_boxShadow(ref this, v);
			public HRESULT get_boxShadow(out BSTR p) mut => VT.get_boxShadow(ref this, out p);
			public HRESULT put_msTransform(BSTR v) mut => VT.put_msTransform(ref this, v);
			public HRESULT get_msTransform(out BSTR p) mut => VT.get_msTransform(ref this, out p);
			public HRESULT put_msTransformOrigin(BSTR v) mut => VT.put_msTransformOrigin(ref this, v);
			public HRESULT get_msTransformOrigin(out BSTR p) mut => VT.get_msTransformOrigin(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_parentRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR bstrPropertyName, out BSTR pbstrPropertyValue) getPropertyValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR bstrPropertyName, out BSTR pbstrPropertyPriority) getPropertyPriority;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR bstrPropertyName, out BSTR pbstrPropertyValue) removeProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR bstrPropertyName, ref VARIANT pvarPropertyValue, ref VARIANT pvarPropertyPriority) setProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, int32 index, out BSTR pbstrPropertyName) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_listStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_listStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_whiteSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_whiteSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_layoutGrid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_layoutGrid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_accelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_accelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_textKashidaSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_textKashidaSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_minHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_minHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_maxWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_maxWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_counterIncrement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_counterIncrement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_counterReset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_counterReset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_quotes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_quotes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_alignmentBaseline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_alignmentBaseline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_baselineShift;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_baselineShift;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_dominantBaseline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_dominantBaseline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_fontSizeAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_fontSizeAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fontStretch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fontStretch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_opacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_opacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_clipPath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_clipPath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_clipRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_clipRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fill;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fill;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_fillOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_fillOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_fillRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_fillRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_kerning;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_kerning;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_marker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_marker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_markerEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_markerEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_markerMid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_markerMid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_markerStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_markerStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_mask;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_mask;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_pointerEvents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_pointerEvents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_stopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_stopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_stopOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_stopOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_stroke;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_stroke;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_strokeDasharray;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_strokeDasharray;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_strokeDashoffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_strokeDashoffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_strokeLinecap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_strokeLinecap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_strokeLinejoin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_strokeLinejoin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_strokeMiterlimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_strokeMiterlimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_strokeOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_strokeOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_strokeWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_strokeWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_textAnchor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_textAnchor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_glyphOrientationHorizontal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_glyphOrientationHorizontal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_glyphOrientationVertical;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_glyphOrientationVertical;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderTopLeftRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderTopLeftRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderTopRightRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderTopRightRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderBottomRightRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderBottomRightRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_borderBottomLeftRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_borderBottomLeftRadius;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_clipTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_clipTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_clipRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_clipRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_clipBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, VARIANT v) put_clipLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out VARIANT p) get_clipLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_cssFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_cssFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundClip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundClip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_backgroundSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_backgroundSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_boxShadow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_boxShadow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_msTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_msTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, BSTR v) put_msTransformOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration self, out BSTR p) get_msTransformOrigin;
			}
		}
		[CRepr]
		public struct IHTMLCSSStyleDeclaration2 : IDispatch
		{
			public const new Guid IID = .(0x305107d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_msScrollChaining(BSTR v) mut => VT.put_msScrollChaining(ref this, v);
			public HRESULT get_msScrollChaining(out BSTR p) mut => VT.get_msScrollChaining(ref this, out p);
			public HRESULT put_msContentZooming(BSTR v) mut => VT.put_msContentZooming(ref this, v);
			public HRESULT get_msContentZooming(out BSTR p) mut => VT.get_msContentZooming(ref this, out p);
			public HRESULT put_msContentZoomSnapType(BSTR v) mut => VT.put_msContentZoomSnapType(ref this, v);
			public HRESULT get_msContentZoomSnapType(out BSTR p) mut => VT.get_msContentZoomSnapType(ref this, out p);
			public HRESULT put_msScrollRails(BSTR v) mut => VT.put_msScrollRails(ref this, v);
			public HRESULT get_msScrollRails(out BSTR p) mut => VT.get_msScrollRails(ref this, out p);
			public HRESULT put_msContentZoomChaining(BSTR v) mut => VT.put_msContentZoomChaining(ref this, v);
			public HRESULT get_msContentZoomChaining(out BSTR p) mut => VT.get_msContentZoomChaining(ref this, out p);
			public HRESULT put_msScrollSnapType(BSTR v) mut => VT.put_msScrollSnapType(ref this, v);
			public HRESULT get_msScrollSnapType(out BSTR p) mut => VT.get_msScrollSnapType(ref this, out p);
			public HRESULT put_msContentZoomLimit(BSTR v) mut => VT.put_msContentZoomLimit(ref this, v);
			public HRESULT get_msContentZoomLimit(out BSTR p) mut => VT.get_msContentZoomLimit(ref this, out p);
			public HRESULT put_msContentZoomSnap(BSTR v) mut => VT.put_msContentZoomSnap(ref this, v);
			public HRESULT get_msContentZoomSnap(out BSTR p) mut => VT.get_msContentZoomSnap(ref this, out p);
			public HRESULT put_msContentZoomSnapPoints(BSTR v) mut => VT.put_msContentZoomSnapPoints(ref this, v);
			public HRESULT get_msContentZoomSnapPoints(out BSTR p) mut => VT.get_msContentZoomSnapPoints(ref this, out p);
			public HRESULT put_msContentZoomLimitMin(VARIANT v) mut => VT.put_msContentZoomLimitMin(ref this, v);
			public HRESULT get_msContentZoomLimitMin(out VARIANT p) mut => VT.get_msContentZoomLimitMin(ref this, out p);
			public HRESULT put_msContentZoomLimitMax(VARIANT v) mut => VT.put_msContentZoomLimitMax(ref this, v);
			public HRESULT get_msContentZoomLimitMax(out VARIANT p) mut => VT.get_msContentZoomLimitMax(ref this, out p);
			public HRESULT put_msScrollSnapX(BSTR v) mut => VT.put_msScrollSnapX(ref this, v);
			public HRESULT get_msScrollSnapX(out BSTR p) mut => VT.get_msScrollSnapX(ref this, out p);
			public HRESULT put_msScrollSnapY(BSTR v) mut => VT.put_msScrollSnapY(ref this, v);
			public HRESULT get_msScrollSnapY(out BSTR p) mut => VT.get_msScrollSnapY(ref this, out p);
			public HRESULT put_msScrollSnapPointsX(BSTR v) mut => VT.put_msScrollSnapPointsX(ref this, v);
			public HRESULT get_msScrollSnapPointsX(out BSTR p) mut => VT.get_msScrollSnapPointsX(ref this, out p);
			public HRESULT put_msScrollSnapPointsY(BSTR v) mut => VT.put_msScrollSnapPointsY(ref this, v);
			public HRESULT get_msScrollSnapPointsY(out BSTR p) mut => VT.get_msScrollSnapPointsY(ref this, out p);
			public HRESULT put_msGridColumn(VARIANT v) mut => VT.put_msGridColumn(ref this, v);
			public HRESULT get_msGridColumn(out VARIANT p) mut => VT.get_msGridColumn(ref this, out p);
			public HRESULT put_msGridColumnAlign(BSTR v) mut => VT.put_msGridColumnAlign(ref this, v);
			public HRESULT get_msGridColumnAlign(out BSTR p) mut => VT.get_msGridColumnAlign(ref this, out p);
			public HRESULT put_msGridColumns(BSTR v) mut => VT.put_msGridColumns(ref this, v);
			public HRESULT get_msGridColumns(out BSTR p) mut => VT.get_msGridColumns(ref this, out p);
			public HRESULT put_msGridColumnSpan(VARIANT v) mut => VT.put_msGridColumnSpan(ref this, v);
			public HRESULT get_msGridColumnSpan(out VARIANT p) mut => VT.get_msGridColumnSpan(ref this, out p);
			public HRESULT put_msGridRow(VARIANT v) mut => VT.put_msGridRow(ref this, v);
			public HRESULT get_msGridRow(out VARIANT p) mut => VT.get_msGridRow(ref this, out p);
			public HRESULT put_msGridRowAlign(BSTR v) mut => VT.put_msGridRowAlign(ref this, v);
			public HRESULT get_msGridRowAlign(out BSTR p) mut => VT.get_msGridRowAlign(ref this, out p);
			public HRESULT put_msGridRows(BSTR v) mut => VT.put_msGridRows(ref this, v);
			public HRESULT get_msGridRows(out BSTR p) mut => VT.get_msGridRows(ref this, out p);
			public HRESULT put_msGridRowSpan(VARIANT v) mut => VT.put_msGridRowSpan(ref this, v);
			public HRESULT get_msGridRowSpan(out VARIANT p) mut => VT.get_msGridRowSpan(ref this, out p);
			public HRESULT put_msWrapThrough(BSTR v) mut => VT.put_msWrapThrough(ref this, v);
			public HRESULT get_msWrapThrough(out BSTR p) mut => VT.get_msWrapThrough(ref this, out p);
			public HRESULT put_msWrapMargin(VARIANT v) mut => VT.put_msWrapMargin(ref this, v);
			public HRESULT get_msWrapMargin(out VARIANT p) mut => VT.get_msWrapMargin(ref this, out p);
			public HRESULT put_msWrapFlow(BSTR v) mut => VT.put_msWrapFlow(ref this, v);
			public HRESULT get_msWrapFlow(out BSTR p) mut => VT.get_msWrapFlow(ref this, out p);
			public HRESULT put_msAnimationName(BSTR v) mut => VT.put_msAnimationName(ref this, v);
			public HRESULT get_msAnimationName(out BSTR p) mut => VT.get_msAnimationName(ref this, out p);
			public HRESULT put_msAnimationDuration(BSTR v) mut => VT.put_msAnimationDuration(ref this, v);
			public HRESULT get_msAnimationDuration(out BSTR p) mut => VT.get_msAnimationDuration(ref this, out p);
			public HRESULT put_msAnimationTimingFunction(BSTR v) mut => VT.put_msAnimationTimingFunction(ref this, v);
			public HRESULT get_msAnimationTimingFunction(out BSTR p) mut => VT.get_msAnimationTimingFunction(ref this, out p);
			public HRESULT put_msAnimationDelay(BSTR v) mut => VT.put_msAnimationDelay(ref this, v);
			public HRESULT get_msAnimationDelay(out BSTR p) mut => VT.get_msAnimationDelay(ref this, out p);
			public HRESULT put_msAnimationDirection(BSTR v) mut => VT.put_msAnimationDirection(ref this, v);
			public HRESULT get_msAnimationDirection(out BSTR p) mut => VT.get_msAnimationDirection(ref this, out p);
			public HRESULT put_msAnimationPlayState(BSTR v) mut => VT.put_msAnimationPlayState(ref this, v);
			public HRESULT get_msAnimationPlayState(out BSTR p) mut => VT.get_msAnimationPlayState(ref this, out p);
			public HRESULT put_msAnimationIterationCount(BSTR v) mut => VT.put_msAnimationIterationCount(ref this, v);
			public HRESULT get_msAnimationIterationCount(out BSTR p) mut => VT.get_msAnimationIterationCount(ref this, out p);
			public HRESULT put_msAnimation(BSTR v) mut => VT.put_msAnimation(ref this, v);
			public HRESULT get_msAnimation(out BSTR p) mut => VT.get_msAnimation(ref this, out p);
			public HRESULT put_msAnimationFillMode(BSTR v) mut => VT.put_msAnimationFillMode(ref this, v);
			public HRESULT get_msAnimationFillMode(out BSTR p) mut => VT.get_msAnimationFillMode(ref this, out p);
			public HRESULT put_colorInterpolationFilters(BSTR v) mut => VT.put_colorInterpolationFilters(ref this, v);
			public HRESULT get_colorInterpolationFilters(out BSTR p) mut => VT.get_colorInterpolationFilters(ref this, out p);
			public HRESULT put_columnCount(VARIANT v) mut => VT.put_columnCount(ref this, v);
			public HRESULT get_columnCount(out VARIANT p) mut => VT.get_columnCount(ref this, out p);
			public HRESULT put_columnWidth(VARIANT v) mut => VT.put_columnWidth(ref this, v);
			public HRESULT get_columnWidth(out VARIANT p) mut => VT.get_columnWidth(ref this, out p);
			public HRESULT put_columnGap(VARIANT v) mut => VT.put_columnGap(ref this, v);
			public HRESULT get_columnGap(out VARIANT p) mut => VT.get_columnGap(ref this, out p);
			public HRESULT put_columnFill(BSTR v) mut => VT.put_columnFill(ref this, v);
			public HRESULT get_columnFill(out BSTR p) mut => VT.get_columnFill(ref this, out p);
			public HRESULT put_columnSpan(BSTR v) mut => VT.put_columnSpan(ref this, v);
			public HRESULT get_columnSpan(out BSTR p) mut => VT.get_columnSpan(ref this, out p);
			public HRESULT put_columns(BSTR v) mut => VT.put_columns(ref this, v);
			public HRESULT get_columns(out BSTR p) mut => VT.get_columns(ref this, out p);
			public HRESULT put_columnRule(BSTR v) mut => VT.put_columnRule(ref this, v);
			public HRESULT get_columnRule(out BSTR p) mut => VT.get_columnRule(ref this, out p);
			public HRESULT put_columnRuleColor(VARIANT v) mut => VT.put_columnRuleColor(ref this, v);
			public HRESULT get_columnRuleColor(out VARIANT p) mut => VT.get_columnRuleColor(ref this, out p);
			public HRESULT put_columnRuleStyle(BSTR v) mut => VT.put_columnRuleStyle(ref this, v);
			public HRESULT get_columnRuleStyle(out BSTR p) mut => VT.get_columnRuleStyle(ref this, out p);
			public HRESULT put_columnRuleWidth(VARIANT v) mut => VT.put_columnRuleWidth(ref this, v);
			public HRESULT get_columnRuleWidth(out VARIANT p) mut => VT.get_columnRuleWidth(ref this, out p);
			public HRESULT put_breakBefore(BSTR v) mut => VT.put_breakBefore(ref this, v);
			public HRESULT get_breakBefore(out BSTR p) mut => VT.get_breakBefore(ref this, out p);
			public HRESULT put_breakAfter(BSTR v) mut => VT.put_breakAfter(ref this, v);
			public HRESULT get_breakAfter(out BSTR p) mut => VT.get_breakAfter(ref this, out p);
			public HRESULT put_breakInside(BSTR v) mut => VT.put_breakInside(ref this, v);
			public HRESULT get_breakInside(out BSTR p) mut => VT.get_breakInside(ref this, out p);
			public HRESULT put_floodColor(VARIANT v) mut => VT.put_floodColor(ref this, v);
			public HRESULT get_floodColor(out VARIANT p) mut => VT.get_floodColor(ref this, out p);
			public HRESULT put_floodOpacity(VARIANT v) mut => VT.put_floodOpacity(ref this, v);
			public HRESULT get_floodOpacity(out VARIANT p) mut => VT.get_floodOpacity(ref this, out p);
			public HRESULT put_lightingColor(VARIANT v) mut => VT.put_lightingColor(ref this, v);
			public HRESULT get_lightingColor(out VARIANT p) mut => VT.get_lightingColor(ref this, out p);
			public HRESULT put_msScrollLimitXMin(VARIANT v) mut => VT.put_msScrollLimitXMin(ref this, v);
			public HRESULT get_msScrollLimitXMin(out VARIANT p) mut => VT.get_msScrollLimitXMin(ref this, out p);
			public HRESULT put_msScrollLimitYMin(VARIANT v) mut => VT.put_msScrollLimitYMin(ref this, v);
			public HRESULT get_msScrollLimitYMin(out VARIANT p) mut => VT.get_msScrollLimitYMin(ref this, out p);
			public HRESULT put_msScrollLimitXMax(VARIANT v) mut => VT.put_msScrollLimitXMax(ref this, v);
			public HRESULT get_msScrollLimitXMax(out VARIANT p) mut => VT.get_msScrollLimitXMax(ref this, out p);
			public HRESULT put_msScrollLimitYMax(VARIANT v) mut => VT.put_msScrollLimitYMax(ref this, v);
			public HRESULT get_msScrollLimitYMax(out VARIANT p) mut => VT.get_msScrollLimitYMax(ref this, out p);
			public HRESULT put_msScrollLimit(BSTR v) mut => VT.put_msScrollLimit(ref this, v);
			public HRESULT get_msScrollLimit(out BSTR p) mut => VT.get_msScrollLimit(ref this, out p);
			public HRESULT put_textShadow(BSTR v) mut => VT.put_textShadow(ref this, v);
			public HRESULT get_textShadow(out BSTR p) mut => VT.get_textShadow(ref this, out p);
			public HRESULT put_msFlowFrom(BSTR v) mut => VT.put_msFlowFrom(ref this, v);
			public HRESULT get_msFlowFrom(out BSTR p) mut => VT.get_msFlowFrom(ref this, out p);
			public HRESULT put_msFlowInto(BSTR v) mut => VT.put_msFlowInto(ref this, v);
			public HRESULT get_msFlowInto(out BSTR p) mut => VT.get_msFlowInto(ref this, out p);
			public HRESULT put_msHyphens(BSTR v) mut => VT.put_msHyphens(ref this, v);
			public HRESULT get_msHyphens(out BSTR p) mut => VT.get_msHyphens(ref this, out p);
			public HRESULT put_msHyphenateLimitZone(VARIANT v) mut => VT.put_msHyphenateLimitZone(ref this, v);
			public HRESULT get_msHyphenateLimitZone(out VARIANT p) mut => VT.get_msHyphenateLimitZone(ref this, out p);
			public HRESULT put_msHyphenateLimitChars(BSTR v) mut => VT.put_msHyphenateLimitChars(ref this, v);
			public HRESULT get_msHyphenateLimitChars(out BSTR p) mut => VT.get_msHyphenateLimitChars(ref this, out p);
			public HRESULT put_msHyphenateLimitLines(VARIANT v) mut => VT.put_msHyphenateLimitLines(ref this, v);
			public HRESULT get_msHyphenateLimitLines(out VARIANT p) mut => VT.get_msHyphenateLimitLines(ref this, out p);
			public HRESULT put_msHighContrastAdjust(BSTR v) mut => VT.put_msHighContrastAdjust(ref this, v);
			public HRESULT get_msHighContrastAdjust(out BSTR p) mut => VT.get_msHighContrastAdjust(ref this, out p);
			public HRESULT put_enableBackground(BSTR v) mut => VT.put_enableBackground(ref this, v);
			public HRESULT get_enableBackground(out BSTR p) mut => VT.get_enableBackground(ref this, out p);
			public HRESULT put_msFontFeatureSettings(BSTR v) mut => VT.put_msFontFeatureSettings(ref this, v);
			public HRESULT get_msFontFeatureSettings(out BSTR p) mut => VT.get_msFontFeatureSettings(ref this, out p);
			public HRESULT put_msUserSelect(BSTR v) mut => VT.put_msUserSelect(ref this, v);
			public HRESULT get_msUserSelect(out BSTR p) mut => VT.get_msUserSelect(ref this, out p);
			public HRESULT put_msOverflowStyle(BSTR v) mut => VT.put_msOverflowStyle(ref this, v);
			public HRESULT get_msOverflowStyle(out BSTR p) mut => VT.get_msOverflowStyle(ref this, out p);
			public HRESULT put_msTransformStyle(BSTR v) mut => VT.put_msTransformStyle(ref this, v);
			public HRESULT get_msTransformStyle(out BSTR p) mut => VT.get_msTransformStyle(ref this, out p);
			public HRESULT put_msBackfaceVisibility(BSTR v) mut => VT.put_msBackfaceVisibility(ref this, v);
			public HRESULT get_msBackfaceVisibility(out BSTR p) mut => VT.get_msBackfaceVisibility(ref this, out p);
			public HRESULT put_msPerspective(VARIANT v) mut => VT.put_msPerspective(ref this, v);
			public HRESULT get_msPerspective(out VARIANT p) mut => VT.get_msPerspective(ref this, out p);
			public HRESULT put_msPerspectiveOrigin(BSTR v) mut => VT.put_msPerspectiveOrigin(ref this, v);
			public HRESULT get_msPerspectiveOrigin(out BSTR p) mut => VT.get_msPerspectiveOrigin(ref this, out p);
			public HRESULT put_msTransitionProperty(BSTR v) mut => VT.put_msTransitionProperty(ref this, v);
			public HRESULT get_msTransitionProperty(out BSTR p) mut => VT.get_msTransitionProperty(ref this, out p);
			public HRESULT put_msTransitionDuration(BSTR v) mut => VT.put_msTransitionDuration(ref this, v);
			public HRESULT get_msTransitionDuration(out BSTR p) mut => VT.get_msTransitionDuration(ref this, out p);
			public HRESULT put_msTransitionTimingFunction(BSTR v) mut => VT.put_msTransitionTimingFunction(ref this, v);
			public HRESULT get_msTransitionTimingFunction(out BSTR p) mut => VT.get_msTransitionTimingFunction(ref this, out p);
			public HRESULT put_msTransitionDelay(BSTR v) mut => VT.put_msTransitionDelay(ref this, v);
			public HRESULT get_msTransitionDelay(out BSTR p) mut => VT.get_msTransitionDelay(ref this, out p);
			public HRESULT put_msTransition(BSTR v) mut => VT.put_msTransition(ref this, v);
			public HRESULT get_msTransition(out BSTR p) mut => VT.get_msTransition(ref this, out p);
			public HRESULT put_msTouchAction(BSTR v) mut => VT.put_msTouchAction(ref this, v);
			public HRESULT get_msTouchAction(out BSTR p) mut => VT.get_msTouchAction(ref this, out p);
			public HRESULT put_msScrollTranslation(BSTR v) mut => VT.put_msScrollTranslation(ref this, v);
			public HRESULT get_msScrollTranslation(out BSTR p) mut => VT.get_msScrollTranslation(ref this, out p);
			public HRESULT put_msFlex(BSTR v) mut => VT.put_msFlex(ref this, v);
			public HRESULT get_msFlex(out BSTR p) mut => VT.get_msFlex(ref this, out p);
			public HRESULT put_msFlexPositive(VARIANT v) mut => VT.put_msFlexPositive(ref this, v);
			public HRESULT get_msFlexPositive(out VARIANT p) mut => VT.get_msFlexPositive(ref this, out p);
			public HRESULT put_msFlexNegative(VARIANT v) mut => VT.put_msFlexNegative(ref this, v);
			public HRESULT get_msFlexNegative(out VARIANT p) mut => VT.get_msFlexNegative(ref this, out p);
			public HRESULT put_msFlexPreferredSize(VARIANT v) mut => VT.put_msFlexPreferredSize(ref this, v);
			public HRESULT get_msFlexPreferredSize(out VARIANT p) mut => VT.get_msFlexPreferredSize(ref this, out p);
			public HRESULT put_msFlexFlow(BSTR v) mut => VT.put_msFlexFlow(ref this, v);
			public HRESULT get_msFlexFlow(out BSTR p) mut => VT.get_msFlexFlow(ref this, out p);
			public HRESULT put_msFlexDirection(BSTR v) mut => VT.put_msFlexDirection(ref this, v);
			public HRESULT get_msFlexDirection(out BSTR p) mut => VT.get_msFlexDirection(ref this, out p);
			public HRESULT put_msFlexWrap(BSTR v) mut => VT.put_msFlexWrap(ref this, v);
			public HRESULT get_msFlexWrap(out BSTR p) mut => VT.get_msFlexWrap(ref this, out p);
			public HRESULT put_msFlexAlign(BSTR v) mut => VT.put_msFlexAlign(ref this, v);
			public HRESULT get_msFlexAlign(out BSTR p) mut => VT.get_msFlexAlign(ref this, out p);
			public HRESULT put_msFlexItemAlign(BSTR v) mut => VT.put_msFlexItemAlign(ref this, v);
			public HRESULT get_msFlexItemAlign(out BSTR p) mut => VT.get_msFlexItemAlign(ref this, out p);
			public HRESULT put_msFlexPack(BSTR v) mut => VT.put_msFlexPack(ref this, v);
			public HRESULT get_msFlexPack(out BSTR p) mut => VT.get_msFlexPack(ref this, out p);
			public HRESULT put_msFlexLinePack(BSTR v) mut => VT.put_msFlexLinePack(ref this, v);
			public HRESULT get_msFlexLinePack(out BSTR p) mut => VT.get_msFlexLinePack(ref this, out p);
			public HRESULT put_msFlexOrder(VARIANT v) mut => VT.put_msFlexOrder(ref this, v);
			public HRESULT get_msFlexOrder(out VARIANT p) mut => VT.get_msFlexOrder(ref this, out p);
			public HRESULT put_msTouchSelect(BSTR v) mut => VT.put_msTouchSelect(ref this, v);
			public HRESULT get_msTouchSelect(out BSTR p) mut => VT.get_msTouchSelect(ref this, out p);
			public HRESULT put_transform(BSTR v) mut => VT.put_transform(ref this, v);
			public HRESULT get_transform(out BSTR p) mut => VT.get_transform(ref this, out p);
			public HRESULT put_transformOrigin(BSTR v) mut => VT.put_transformOrigin(ref this, v);
			public HRESULT get_transformOrigin(out BSTR p) mut => VT.get_transformOrigin(ref this, out p);
			public HRESULT put_transformStyle(BSTR v) mut => VT.put_transformStyle(ref this, v);
			public HRESULT get_transformStyle(out BSTR p) mut => VT.get_transformStyle(ref this, out p);
			public HRESULT put_backfaceVisibility(BSTR v) mut => VT.put_backfaceVisibility(ref this, v);
			public HRESULT get_backfaceVisibility(out BSTR p) mut => VT.get_backfaceVisibility(ref this, out p);
			public HRESULT put_perspective(VARIANT v) mut => VT.put_perspective(ref this, v);
			public HRESULT get_perspective(out VARIANT p) mut => VT.get_perspective(ref this, out p);
			public HRESULT put_perspectiveOrigin(BSTR v) mut => VT.put_perspectiveOrigin(ref this, v);
			public HRESULT get_perspectiveOrigin(out BSTR p) mut => VT.get_perspectiveOrigin(ref this, out p);
			public HRESULT put_transitionProperty(BSTR v) mut => VT.put_transitionProperty(ref this, v);
			public HRESULT get_transitionProperty(out BSTR p) mut => VT.get_transitionProperty(ref this, out p);
			public HRESULT put_transitionDuration(BSTR v) mut => VT.put_transitionDuration(ref this, v);
			public HRESULT get_transitionDuration(out BSTR p) mut => VT.get_transitionDuration(ref this, out p);
			public HRESULT put_transitionTimingFunction(BSTR v) mut => VT.put_transitionTimingFunction(ref this, v);
			public HRESULT get_transitionTimingFunction(out BSTR p) mut => VT.get_transitionTimingFunction(ref this, out p);
			public HRESULT put_transitionDelay(BSTR v) mut => VT.put_transitionDelay(ref this, v);
			public HRESULT get_transitionDelay(out BSTR p) mut => VT.get_transitionDelay(ref this, out p);
			public HRESULT put_transition(BSTR v) mut => VT.put_transition(ref this, v);
			public HRESULT get_transition(out BSTR p) mut => VT.get_transition(ref this, out p);
			public HRESULT put_fontFeatureSettings(BSTR v) mut => VT.put_fontFeatureSettings(ref this, v);
			public HRESULT get_fontFeatureSettings(out BSTR p) mut => VT.get_fontFeatureSettings(ref this, out p);
			public HRESULT put_animationName(BSTR v) mut => VT.put_animationName(ref this, v);
			public HRESULT get_animationName(out BSTR p) mut => VT.get_animationName(ref this, out p);
			public HRESULT put_animationDuration(BSTR v) mut => VT.put_animationDuration(ref this, v);
			public HRESULT get_animationDuration(out BSTR p) mut => VT.get_animationDuration(ref this, out p);
			public HRESULT put_animationTimingFunction(BSTR v) mut => VT.put_animationTimingFunction(ref this, v);
			public HRESULT get_animationTimingFunction(out BSTR p) mut => VT.get_animationTimingFunction(ref this, out p);
			public HRESULT put_animationDelay(BSTR v) mut => VT.put_animationDelay(ref this, v);
			public HRESULT get_animationDelay(out BSTR p) mut => VT.get_animationDelay(ref this, out p);
			public HRESULT put_animationDirection(BSTR v) mut => VT.put_animationDirection(ref this, v);
			public HRESULT get_animationDirection(out BSTR p) mut => VT.get_animationDirection(ref this, out p);
			public HRESULT put_animationPlayState(BSTR v) mut => VT.put_animationPlayState(ref this, v);
			public HRESULT get_animationPlayState(out BSTR p) mut => VT.get_animationPlayState(ref this, out p);
			public HRESULT put_animationIterationCount(BSTR v) mut => VT.put_animationIterationCount(ref this, v);
			public HRESULT get_animationIterationCount(out BSTR p) mut => VT.get_animationIterationCount(ref this, out p);
			public HRESULT put_animation(BSTR v) mut => VT.put_animation(ref this, v);
			public HRESULT get_animation(out BSTR p) mut => VT.get_animation(ref this, out p);
			public HRESULT put_animationFillMode(BSTR v) mut => VT.put_animationFillMode(ref this, v);
			public HRESULT get_animationFillMode(out BSTR p) mut => VT.get_animationFillMode(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollChaining;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollChaining;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msContentZooming;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msContentZooming;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msContentZoomSnapType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msContentZoomSnapType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollRails;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollRails;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msContentZoomChaining;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msContentZoomChaining;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollSnapType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollSnapType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msContentZoomLimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msContentZoomLimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msContentZoomSnap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msContentZoomSnap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msContentZoomSnapPoints;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msContentZoomSnapPoints;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msContentZoomLimitMin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msContentZoomLimitMin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msContentZoomLimitMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msContentZoomLimitMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollSnapX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollSnapX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollSnapY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollSnapY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollSnapPointsX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollSnapPointsX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollSnapPointsY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollSnapPointsY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msGridColumn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msGridColumn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msGridColumnAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msGridColumnAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msGridColumns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msGridColumns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msGridColumnSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msGridColumnSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msGridRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msGridRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msGridRowAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msGridRowAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msGridRows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msGridRows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msGridRowSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msGridRowSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msWrapThrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msWrapThrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msWrapMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msWrapMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msWrapFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msWrapFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationPlayState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationPlayState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationIterationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationIterationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msAnimationFillMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msAnimationFillMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_colorInterpolationFilters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_colorInterpolationFilters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_columnCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_columnCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_columnWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_columnWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_columnGap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_columnGap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_columnFill;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_columnFill;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_columnSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_columnSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_columns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_columns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_columnRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_columnRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_columnRuleColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_columnRuleColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_columnRuleStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_columnRuleStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_columnRuleWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_columnRuleWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_breakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_breakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_breakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_breakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_breakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_breakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_floodColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_floodColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_floodOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_floodOpacity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_lightingColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_lightingColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msScrollLimitXMin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msScrollLimitXMin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msScrollLimitYMin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msScrollLimitYMin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msScrollLimitXMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msScrollLimitXMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msScrollLimitYMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msScrollLimitYMax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollLimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollLimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_textShadow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_textShadow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlowFrom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlowFrom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlowInto;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlowInto;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msHyphens;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msHyphens;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msHyphenateLimitZone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msHyphenateLimitZone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msHyphenateLimitChars;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msHyphenateLimitChars;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msHyphenateLimitLines;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msHyphenateLimitLines;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msHighContrastAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msHighContrastAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_enableBackground;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_enableBackground;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFontFeatureSettings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFontFeatureSettings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msUserSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msUserSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msOverflowStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msOverflowStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTransformStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTransformStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msBackfaceVisibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msBackfaceVisibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msPerspective;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msPerspective;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msPerspectiveOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msPerspectiveOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTransitionProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTransitionProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTransitionDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTransitionDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTransitionTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTransitionTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTransitionDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTransitionDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTransition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTransition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTouchAction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTouchAction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msScrollTranslation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msScrollTranslation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msFlexPositive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msFlexPositive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msFlexNegative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msFlexNegative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msFlexPreferredSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msFlexPreferredSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexItemAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexItemAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexPack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexPack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msFlexLinePack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msFlexLinePack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_msFlexOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_msFlexOrder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_msTouchSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_msTouchSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transformOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transformOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transformStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transformStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_backfaceVisibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_backfaceVisibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, VARIANT v) put_perspective;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out VARIANT p) get_perspective;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_perspectiveOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_perspectiveOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transitionProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transitionProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transitionDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transitionDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transitionTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transitionTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transitionDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transitionDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_transition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_transition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_fontFeatureSettings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_fontFeatureSettings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationPlayState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationPlayState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationIterationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationIterationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, BSTR v) put_animationFillMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration2 self, out BSTR p) get_animationFillMode;
			}
		}
		[CRepr]
		public struct IHTMLCSSStyleDeclaration3 : IDispatch
		{
			public const new Guid IID = .(0x3051085c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_flex(BSTR v) mut => VT.put_flex(ref this, v);
			public HRESULT get_flex(out BSTR p) mut => VT.get_flex(ref this, out p);
			public HRESULT put_flexDirection(BSTR v) mut => VT.put_flexDirection(ref this, v);
			public HRESULT get_flexDirection(out BSTR p) mut => VT.get_flexDirection(ref this, out p);
			public HRESULT put_flexWrap(BSTR v) mut => VT.put_flexWrap(ref this, v);
			public HRESULT get_flexWrap(out BSTR p) mut => VT.get_flexWrap(ref this, out p);
			public HRESULT put_flexFlow(BSTR v) mut => VT.put_flexFlow(ref this, v);
			public HRESULT get_flexFlow(out BSTR p) mut => VT.get_flexFlow(ref this, out p);
			public HRESULT put_flexGrow(VARIANT v) mut => VT.put_flexGrow(ref this, v);
			public HRESULT get_flexGrow(out VARIANT p) mut => VT.get_flexGrow(ref this, out p);
			public HRESULT put_flexShrink(VARIANT v) mut => VT.put_flexShrink(ref this, v);
			public HRESULT get_flexShrink(out VARIANT p) mut => VT.get_flexShrink(ref this, out p);
			public HRESULT put_flexBasis(VARIANT v) mut => VT.put_flexBasis(ref this, v);
			public HRESULT get_flexBasis(out VARIANT p) mut => VT.get_flexBasis(ref this, out p);
			public HRESULT put_justifyContent(BSTR v) mut => VT.put_justifyContent(ref this, v);
			public HRESULT get_justifyContent(out BSTR p) mut => VT.get_justifyContent(ref this, out p);
			public HRESULT put_alignItems(BSTR v) mut => VT.put_alignItems(ref this, v);
			public HRESULT get_alignItems(out BSTR p) mut => VT.get_alignItems(ref this, out p);
			public HRESULT put_alignSelf(BSTR v) mut => VT.put_alignSelf(ref this, v);
			public HRESULT get_alignSelf(out BSTR p) mut => VT.get_alignSelf(ref this, out p);
			public HRESULT put_alignContent(BSTR v) mut => VT.put_alignContent(ref this, v);
			public HRESULT get_alignContent(out BSTR p) mut => VT.get_alignContent(ref this, out p);
			public HRESULT put_borderImage(BSTR v) mut => VT.put_borderImage(ref this, v);
			public HRESULT get_borderImage(out BSTR p) mut => VT.get_borderImage(ref this, out p);
			public HRESULT put_borderImageSource(BSTR v) mut => VT.put_borderImageSource(ref this, v);
			public HRESULT get_borderImageSource(out BSTR p) mut => VT.get_borderImageSource(ref this, out p);
			public HRESULT put_borderImageSlice(BSTR v) mut => VT.put_borderImageSlice(ref this, v);
			public HRESULT get_borderImageSlice(out BSTR p) mut => VT.get_borderImageSlice(ref this, out p);
			public HRESULT put_borderImageWidth(BSTR v) mut => VT.put_borderImageWidth(ref this, v);
			public HRESULT get_borderImageWidth(out BSTR p) mut => VT.get_borderImageWidth(ref this, out p);
			public HRESULT put_borderImageOutset(BSTR v) mut => VT.put_borderImageOutset(ref this, v);
			public HRESULT get_borderImageOutset(out BSTR p) mut => VT.get_borderImageOutset(ref this, out p);
			public HRESULT put_borderImageRepeat(BSTR v) mut => VT.put_borderImageRepeat(ref this, v);
			public HRESULT get_borderImageRepeat(out BSTR p) mut => VT.get_borderImageRepeat(ref this, out p);
			public HRESULT put_msImeAlign(BSTR v) mut => VT.put_msImeAlign(ref this, v);
			public HRESULT get_msImeAlign(out BSTR p) mut => VT.get_msImeAlign(ref this, out p);
			public HRESULT put_msTextCombineHorizontal(BSTR v) mut => VT.put_msTextCombineHorizontal(ref this, v);
			public HRESULT get_msTextCombineHorizontal(out BSTR p) mut => VT.get_msTextCombineHorizontal(ref this, out p);
			public HRESULT put_touchAction(BSTR v) mut => VT.put_touchAction(ref this, v);
			public HRESULT get_touchAction(out BSTR p) mut => VT.get_touchAction(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_flex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_flex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_flexDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_flexDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_flexWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_flexWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_flexFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_flexFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, VARIANT v) put_flexGrow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out VARIANT p) get_flexGrow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, VARIANT v) put_flexShrink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out VARIANT p) get_flexShrink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, VARIANT v) put_flexBasis;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out VARIANT p) get_flexBasis;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_justifyContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_justifyContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_alignItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_alignItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_alignSelf;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_alignSelf;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_alignContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_alignContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_borderImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_borderImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_borderImageSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_borderImageSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_borderImageSlice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_borderImageSlice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_borderImageWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_borderImageWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_borderImageOutset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_borderImageOutset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_borderImageRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_borderImageRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_msImeAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_msImeAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_msTextCombineHorizontal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_msTextCombineHorizontal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, BSTR v) put_touchAction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration3 self, out BSTR p) get_touchAction;
			}
		}
		[CRepr]
		public struct IHTMLCSSStyleDeclaration4 : IDispatch
		{
			public const new Guid IID = .(0xd6100f3b, 0x27c8, 0x4132, 0xaf, 0xea, 0xf0, 0xe4, 0xb1, 0xe0, 0x00, 0x60);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_webkitAppearance(BSTR v) mut => VT.put_webkitAppearance(ref this, v);
			public HRESULT get_webkitAppearance(out BSTR p) mut => VT.get_webkitAppearance(ref this, out p);
			public HRESULT put_webkitUserSelect(BSTR v) mut => VT.put_webkitUserSelect(ref this, v);
			public HRESULT get_webkitUserSelect(out BSTR p) mut => VT.get_webkitUserSelect(ref this, out p);
			public HRESULT put_webkitBoxAlign(BSTR v) mut => VT.put_webkitBoxAlign(ref this, v);
			public HRESULT get_webkitBoxAlign(out BSTR p) mut => VT.get_webkitBoxAlign(ref this, out p);
			public HRESULT put_webkitBoxOrdinalGroup(VARIANT v) mut => VT.put_webkitBoxOrdinalGroup(ref this, v);
			public HRESULT get_webkitBoxOrdinalGroup(out VARIANT p) mut => VT.get_webkitBoxOrdinalGroup(ref this, out p);
			public HRESULT put_webkitBoxPack(BSTR v) mut => VT.put_webkitBoxPack(ref this, v);
			public HRESULT get_webkitBoxPack(out BSTR p) mut => VT.get_webkitBoxPack(ref this, out p);
			public HRESULT put_webkitBoxFlex(VARIANT v) mut => VT.put_webkitBoxFlex(ref this, v);
			public HRESULT get_webkitBoxFlex(out VARIANT p) mut => VT.get_webkitBoxFlex(ref this, out p);
			public HRESULT put_webkitBoxOrient(BSTR v) mut => VT.put_webkitBoxOrient(ref this, v);
			public HRESULT get_webkitBoxOrient(out BSTR p) mut => VT.get_webkitBoxOrient(ref this, out p);
			public HRESULT put_webkitBoxDirection(BSTR v) mut => VT.put_webkitBoxDirection(ref this, v);
			public HRESULT get_webkitBoxDirection(out BSTR p) mut => VT.get_webkitBoxDirection(ref this, out p);
			public HRESULT put_webkitTransform(BSTR v) mut => VT.put_webkitTransform(ref this, v);
			public HRESULT get_webkitTransform(out BSTR p) mut => VT.get_webkitTransform(ref this, out p);
			public HRESULT put_webkitBackgroundSize(BSTR v) mut => VT.put_webkitBackgroundSize(ref this, v);
			public HRESULT get_webkitBackgroundSize(out BSTR p) mut => VT.get_webkitBackgroundSize(ref this, out p);
			public HRESULT put_webkitBackfaceVisibility(BSTR v) mut => VT.put_webkitBackfaceVisibility(ref this, v);
			public HRESULT get_webkitBackfaceVisibility(out BSTR p) mut => VT.get_webkitBackfaceVisibility(ref this, out p);
			public HRESULT put_webkitAnimation(BSTR v) mut => VT.put_webkitAnimation(ref this, v);
			public HRESULT get_webkitAnimation(out BSTR p) mut => VT.get_webkitAnimation(ref this, out p);
			public HRESULT put_webkitTransition(BSTR v) mut => VT.put_webkitTransition(ref this, v);
			public HRESULT get_webkitTransition(out BSTR p) mut => VT.get_webkitTransition(ref this, out p);
			public HRESULT put_webkitAnimationName(BSTR v) mut => VT.put_webkitAnimationName(ref this, v);
			public HRESULT get_webkitAnimationName(out BSTR p) mut => VT.get_webkitAnimationName(ref this, out p);
			public HRESULT put_webkitAnimationDuration(BSTR v) mut => VT.put_webkitAnimationDuration(ref this, v);
			public HRESULT get_webkitAnimationDuration(out BSTR p) mut => VT.get_webkitAnimationDuration(ref this, out p);
			public HRESULT put_webkitAnimationTimingFunction(BSTR v) mut => VT.put_webkitAnimationTimingFunction(ref this, v);
			public HRESULT get_webkitAnimationTimingFunction(out BSTR p) mut => VT.get_webkitAnimationTimingFunction(ref this, out p);
			public HRESULT put_webkitAnimationDelay(BSTR v) mut => VT.put_webkitAnimationDelay(ref this, v);
			public HRESULT get_webkitAnimationDelay(out BSTR p) mut => VT.get_webkitAnimationDelay(ref this, out p);
			public HRESULT put_webkitAnimationIterationCount(BSTR v) mut => VT.put_webkitAnimationIterationCount(ref this, v);
			public HRESULT get_webkitAnimationIterationCount(out BSTR p) mut => VT.get_webkitAnimationIterationCount(ref this, out p);
			public HRESULT put_webkitAnimationDirection(BSTR v) mut => VT.put_webkitAnimationDirection(ref this, v);
			public HRESULT get_webkitAnimationDirection(out BSTR p) mut => VT.get_webkitAnimationDirection(ref this, out p);
			public HRESULT put_webkitAnimationPlayState(BSTR v) mut => VT.put_webkitAnimationPlayState(ref this, v);
			public HRESULT get_webkitAnimationPlayState(out BSTR p) mut => VT.get_webkitAnimationPlayState(ref this, out p);
			public HRESULT put_webkitTransitionProperty(BSTR v) mut => VT.put_webkitTransitionProperty(ref this, v);
			public HRESULT get_webkitTransitionProperty(out BSTR p) mut => VT.get_webkitTransitionProperty(ref this, out p);
			public HRESULT put_webkitTransitionDuration(BSTR v) mut => VT.put_webkitTransitionDuration(ref this, v);
			public HRESULT get_webkitTransitionDuration(out BSTR p) mut => VT.get_webkitTransitionDuration(ref this, out p);
			public HRESULT put_webkitTransitionTimingFunction(BSTR v) mut => VT.put_webkitTransitionTimingFunction(ref this, v);
			public HRESULT get_webkitTransitionTimingFunction(out BSTR p) mut => VT.get_webkitTransitionTimingFunction(ref this, out p);
			public HRESULT put_webkitTransitionDelay(BSTR v) mut => VT.put_webkitTransitionDelay(ref this, v);
			public HRESULT get_webkitTransitionDelay(out BSTR p) mut => VT.get_webkitTransitionDelay(ref this, out p);
			public HRESULT put_webkitBackgroundAttachment(BSTR v) mut => VT.put_webkitBackgroundAttachment(ref this, v);
			public HRESULT get_webkitBackgroundAttachment(out BSTR p) mut => VT.get_webkitBackgroundAttachment(ref this, out p);
			public HRESULT put_webkitBackgroundColor(VARIANT v) mut => VT.put_webkitBackgroundColor(ref this, v);
			public HRESULT get_webkitBackgroundColor(out VARIANT p) mut => VT.get_webkitBackgroundColor(ref this, out p);
			public HRESULT put_webkitBackgroundClip(BSTR v) mut => VT.put_webkitBackgroundClip(ref this, v);
			public HRESULT get_webkitBackgroundClip(out BSTR p) mut => VT.get_webkitBackgroundClip(ref this, out p);
			public HRESULT put_webkitBackgroundImage(BSTR v) mut => VT.put_webkitBackgroundImage(ref this, v);
			public HRESULT get_webkitBackgroundImage(out BSTR p) mut => VT.get_webkitBackgroundImage(ref this, out p);
			public HRESULT put_webkitBackgroundRepeat(BSTR v) mut => VT.put_webkitBackgroundRepeat(ref this, v);
			public HRESULT get_webkitBackgroundRepeat(out BSTR p) mut => VT.get_webkitBackgroundRepeat(ref this, out p);
			public HRESULT put_webkitBackgroundOrigin(BSTR v) mut => VT.put_webkitBackgroundOrigin(ref this, v);
			public HRESULT get_webkitBackgroundOrigin(out BSTR p) mut => VT.get_webkitBackgroundOrigin(ref this, out p);
			public HRESULT put_webkitBackgroundPosition(BSTR v) mut => VT.put_webkitBackgroundPosition(ref this, v);
			public HRESULT get_webkitBackgroundPosition(out BSTR p) mut => VT.get_webkitBackgroundPosition(ref this, out p);
			public HRESULT put_webkitBackgroundPositionX(VARIANT v) mut => VT.put_webkitBackgroundPositionX(ref this, v);
			public HRESULT get_webkitBackgroundPositionX(out VARIANT p) mut => VT.get_webkitBackgroundPositionX(ref this, out p);
			public HRESULT put_webkitBackgroundPositionY(VARIANT v) mut => VT.put_webkitBackgroundPositionY(ref this, v);
			public HRESULT get_webkitBackgroundPositionY(out VARIANT p) mut => VT.get_webkitBackgroundPositionY(ref this, out p);
			public HRESULT put_webkitBackground(BSTR v) mut => VT.put_webkitBackground(ref this, v);
			public HRESULT get_webkitBackground(out BSTR p) mut => VT.get_webkitBackground(ref this, out p);
			public HRESULT put_webkitTransformOrigin(BSTR v) mut => VT.put_webkitTransformOrigin(ref this, v);
			public HRESULT get_webkitTransformOrigin(out BSTR p) mut => VT.get_webkitTransformOrigin(ref this, out p);
			public HRESULT put_msTextSizeAdjust(VARIANT v) mut => VT.put_msTextSizeAdjust(ref this, v);
			public HRESULT get_msTextSizeAdjust(out VARIANT p) mut => VT.get_msTextSizeAdjust(ref this, out p);
			public HRESULT put_webkitTextSizeAdjust(VARIANT v) mut => VT.put_webkitTextSizeAdjust(ref this, v);
			public HRESULT get_webkitTextSizeAdjust(out VARIANT p) mut => VT.get_webkitTextSizeAdjust(ref this, out p);
			public HRESULT put_webkitBorderImage(BSTR v) mut => VT.put_webkitBorderImage(ref this, v);
			public HRESULT get_webkitBorderImage(out BSTR p) mut => VT.get_webkitBorderImage(ref this, out p);
			public HRESULT put_webkitBorderImageSource(BSTR v) mut => VT.put_webkitBorderImageSource(ref this, v);
			public HRESULT get_webkitBorderImageSource(out BSTR p) mut => VT.get_webkitBorderImageSource(ref this, out p);
			public HRESULT put_webkitBorderImageSlice(BSTR v) mut => VT.put_webkitBorderImageSlice(ref this, v);
			public HRESULT get_webkitBorderImageSlice(out BSTR p) mut => VT.get_webkitBorderImageSlice(ref this, out p);
			public HRESULT put_webkitBorderImageWidth(BSTR v) mut => VT.put_webkitBorderImageWidth(ref this, v);
			public HRESULT get_webkitBorderImageWidth(out BSTR p) mut => VT.get_webkitBorderImageWidth(ref this, out p);
			public HRESULT put_webkitBorderImageOutset(BSTR v) mut => VT.put_webkitBorderImageOutset(ref this, v);
			public HRESULT get_webkitBorderImageOutset(out BSTR p) mut => VT.get_webkitBorderImageOutset(ref this, out p);
			public HRESULT put_webkitBorderImageRepeat(BSTR v) mut => VT.put_webkitBorderImageRepeat(ref this, v);
			public HRESULT get_webkitBorderImageRepeat(out BSTR p) mut => VT.get_webkitBorderImageRepeat(ref this, out p);
			public HRESULT put_webkitBoxSizing(BSTR v) mut => VT.put_webkitBoxSizing(ref this, v);
			public HRESULT get_webkitBoxSizing(out BSTR p) mut => VT.get_webkitBoxSizing(ref this, out p);
			public HRESULT put_webkitAnimationFillMode(BSTR v) mut => VT.put_webkitAnimationFillMode(ref this, v);
			public HRESULT get_webkitAnimationFillMode(out BSTR p) mut => VT.get_webkitAnimationFillMode(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAppearance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAppearance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitUserSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitUserSelect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBoxAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBoxAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_webkitBoxOrdinalGroup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_webkitBoxOrdinalGroup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBoxPack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBoxPack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_webkitBoxFlex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_webkitBoxFlex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBoxOrient;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBoxOrient;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBoxDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBoxDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackfaceVisibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackfaceVisibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationIterationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationIterationCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationPlayState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationPlayState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransitionProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransitionProperty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransitionDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransitionDuration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransitionTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransitionTimingFunction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransitionDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransitionDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_webkitBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_webkitBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundClip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundClip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_webkitBackgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_webkitBackgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_webkitBackgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_webkitBackgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBackground;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBackground;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitTransformOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitTransformOrigin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_msTextSizeAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_msTextSizeAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, VARIANT v) put_webkitTextSizeAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out VARIANT p) get_webkitTextSizeAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBorderImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBorderImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBorderImageSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBorderImageSource;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBorderImageSlice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBorderImageSlice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBorderImageWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBorderImageWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBorderImageOutset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBorderImageOutset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBorderImageRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBorderImageRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitBoxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitBoxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, BSTR v) put_webkitAnimationFillMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSStyleDeclaration4 self, out BSTR p) get_webkitAnimationFillMode;
			}
		}
		[CRepr]
		public struct IHTMLStyleEnabled : IDispatch
		{
			public const new Guid IID = .(0x305104c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT msGetPropertyEnabled(BSTR name, out int16 p) mut => VT.msGetPropertyEnabled(ref this, name, out p);
			public HRESULT msPutPropertyEnabled(BSTR name, int16 b) mut => VT.msPutPropertyEnabled(ref this, name, b);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleEnabled self, BSTR name, out int16 p) msGetPropertyEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleEnabled self, BSTR name, int16 b) msPutPropertyEnabled;
			}
		}
		[CRepr]
		public struct DispHTMLCSSStyleDeclaration : IDispatch
		{
			public const new Guid IID = .(0x3059009a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f25e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_fontFamily(BSTR v) mut => VT.put_fontFamily(ref this, v);
			public HRESULT get_fontFamily(out BSTR p) mut => VT.get_fontFamily(ref this, out p);
			public HRESULT put_fontStyle(BSTR v) mut => VT.put_fontStyle(ref this, v);
			public HRESULT get_fontStyle(out BSTR p) mut => VT.get_fontStyle(ref this, out p);
			public HRESULT put_fontVariant(BSTR v) mut => VT.put_fontVariant(ref this, v);
			public HRESULT get_fontVariant(out BSTR p) mut => VT.get_fontVariant(ref this, out p);
			public HRESULT put_fontWeight(BSTR v) mut => VT.put_fontWeight(ref this, v);
			public HRESULT get_fontWeight(out BSTR p) mut => VT.get_fontWeight(ref this, out p);
			public HRESULT put_fontSize(VARIANT v) mut => VT.put_fontSize(ref this, v);
			public HRESULT get_fontSize(out VARIANT p) mut => VT.get_fontSize(ref this, out p);
			public HRESULT put_font(BSTR v) mut => VT.put_font(ref this, v);
			public HRESULT get_font(out BSTR p) mut => VT.get_font(ref this, out p);
			public HRESULT put_color(VARIANT v) mut => VT.put_color(ref this, v);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_backgroundColor(VARIANT v) mut => VT.put_backgroundColor(ref this, v);
			public HRESULT get_backgroundColor(out VARIANT p) mut => VT.get_backgroundColor(ref this, out p);
			public HRESULT put_backgroundImage(BSTR v) mut => VT.put_backgroundImage(ref this, v);
			public HRESULT get_backgroundImage(out BSTR p) mut => VT.get_backgroundImage(ref this, out p);
			public HRESULT put_backgroundRepeat(BSTR v) mut => VT.put_backgroundRepeat(ref this, v);
			public HRESULT get_backgroundRepeat(out BSTR p) mut => VT.get_backgroundRepeat(ref this, out p);
			public HRESULT put_backgroundAttachment(BSTR v) mut => VT.put_backgroundAttachment(ref this, v);
			public HRESULT get_backgroundAttachment(out BSTR p) mut => VT.get_backgroundAttachment(ref this, out p);
			public HRESULT put_backgroundPosition(BSTR v) mut => VT.put_backgroundPosition(ref this, v);
			public HRESULT get_backgroundPosition(out BSTR p) mut => VT.get_backgroundPosition(ref this, out p);
			public HRESULT put_backgroundPositionX(VARIANT v) mut => VT.put_backgroundPositionX(ref this, v);
			public HRESULT get_backgroundPositionX(out VARIANT p) mut => VT.get_backgroundPositionX(ref this, out p);
			public HRESULT put_backgroundPositionY(VARIANT v) mut => VT.put_backgroundPositionY(ref this, v);
			public HRESULT get_backgroundPositionY(out VARIANT p) mut => VT.get_backgroundPositionY(ref this, out p);
			public HRESULT put_wordSpacing(VARIANT v) mut => VT.put_wordSpacing(ref this, v);
			public HRESULT get_wordSpacing(out VARIANT p) mut => VT.get_wordSpacing(ref this, out p);
			public HRESULT put_letterSpacing(VARIANT v) mut => VT.put_letterSpacing(ref this, v);
			public HRESULT get_letterSpacing(out VARIANT p) mut => VT.get_letterSpacing(ref this, out p);
			public HRESULT put_textDecoration(BSTR v) mut => VT.put_textDecoration(ref this, v);
			public HRESULT get_textDecoration(out BSTR p) mut => VT.get_textDecoration(ref this, out p);
			public HRESULT put_textDecorationNone(int16 v) mut => VT.put_textDecorationNone(ref this, v);
			public HRESULT get_textDecorationNone(out int16 p) mut => VT.get_textDecorationNone(ref this, out p);
			public HRESULT put_textDecorationUnderline(int16 v) mut => VT.put_textDecorationUnderline(ref this, v);
			public HRESULT get_textDecorationUnderline(out int16 p) mut => VT.get_textDecorationUnderline(ref this, out p);
			public HRESULT put_textDecorationOverline(int16 v) mut => VT.put_textDecorationOverline(ref this, v);
			public HRESULT get_textDecorationOverline(out int16 p) mut => VT.get_textDecorationOverline(ref this, out p);
			public HRESULT put_textDecorationLineThrough(int16 v) mut => VT.put_textDecorationLineThrough(ref this, v);
			public HRESULT get_textDecorationLineThrough(out int16 p) mut => VT.get_textDecorationLineThrough(ref this, out p);
			public HRESULT put_textDecorationBlink(int16 v) mut => VT.put_textDecorationBlink(ref this, v);
			public HRESULT get_textDecorationBlink(out int16 p) mut => VT.get_textDecorationBlink(ref this, out p);
			public HRESULT put_verticalAlign(VARIANT v) mut => VT.put_verticalAlign(ref this, v);
			public HRESULT get_verticalAlign(out VARIANT p) mut => VT.get_verticalAlign(ref this, out p);
			public HRESULT put_textTransform(BSTR v) mut => VT.put_textTransform(ref this, v);
			public HRESULT get_textTransform(out BSTR p) mut => VT.get_textTransform(ref this, out p);
			public HRESULT put_textAlign(BSTR v) mut => VT.put_textAlign(ref this, v);
			public HRESULT get_textAlign(out BSTR p) mut => VT.get_textAlign(ref this, out p);
			public HRESULT put_textIndent(VARIANT v) mut => VT.put_textIndent(ref this, v);
			public HRESULT get_textIndent(out VARIANT p) mut => VT.get_textIndent(ref this, out p);
			public HRESULT put_lineHeight(VARIANT v) mut => VT.put_lineHeight(ref this, v);
			public HRESULT get_lineHeight(out VARIANT p) mut => VT.get_lineHeight(ref this, out p);
			public HRESULT put_marginTop(VARIANT v) mut => VT.put_marginTop(ref this, v);
			public HRESULT get_marginTop(out VARIANT p) mut => VT.get_marginTop(ref this, out p);
			public HRESULT put_marginRight(VARIANT v) mut => VT.put_marginRight(ref this, v);
			public HRESULT get_marginRight(out VARIANT p) mut => VT.get_marginRight(ref this, out p);
			public HRESULT put_marginBottom(VARIANT v) mut => VT.put_marginBottom(ref this, v);
			public HRESULT get_marginBottom(out VARIANT p) mut => VT.get_marginBottom(ref this, out p);
			public HRESULT put_marginLeft(VARIANT v) mut => VT.put_marginLeft(ref this, v);
			public HRESULT get_marginLeft(out VARIANT p) mut => VT.get_marginLeft(ref this, out p);
			public HRESULT put_margin(BSTR v) mut => VT.put_margin(ref this, v);
			public HRESULT get_margin(out BSTR p) mut => VT.get_margin(ref this, out p);
			public HRESULT put_paddingTop(VARIANT v) mut => VT.put_paddingTop(ref this, v);
			public HRESULT get_paddingTop(out VARIANT p) mut => VT.get_paddingTop(ref this, out p);
			public HRESULT put_paddingRight(VARIANT v) mut => VT.put_paddingRight(ref this, v);
			public HRESULT get_paddingRight(out VARIANT p) mut => VT.get_paddingRight(ref this, out p);
			public HRESULT put_paddingBottom(VARIANT v) mut => VT.put_paddingBottom(ref this, v);
			public HRESULT get_paddingBottom(out VARIANT p) mut => VT.get_paddingBottom(ref this, out p);
			public HRESULT put_paddingLeft(VARIANT v) mut => VT.put_paddingLeft(ref this, v);
			public HRESULT get_paddingLeft(out VARIANT p) mut => VT.get_paddingLeft(ref this, out p);
			public HRESULT put_padding(BSTR v) mut => VT.put_padding(ref this, v);
			public HRESULT get_padding(out BSTR p) mut => VT.get_padding(ref this, out p);
			public HRESULT put_border(BSTR v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out BSTR p) mut => VT.get_border(ref this, out p);
			public HRESULT put_borderTop(BSTR v) mut => VT.put_borderTop(ref this, v);
			public HRESULT get_borderTop(out BSTR p) mut => VT.get_borderTop(ref this, out p);
			public HRESULT put_borderRight(BSTR v) mut => VT.put_borderRight(ref this, v);
			public HRESULT get_borderRight(out BSTR p) mut => VT.get_borderRight(ref this, out p);
			public HRESULT put_borderBottom(BSTR v) mut => VT.put_borderBottom(ref this, v);
			public HRESULT get_borderBottom(out BSTR p) mut => VT.get_borderBottom(ref this, out p);
			public HRESULT put_borderLeft(BSTR v) mut => VT.put_borderLeft(ref this, v);
			public HRESULT get_borderLeft(out BSTR p) mut => VT.get_borderLeft(ref this, out p);
			public HRESULT put_borderColor(BSTR v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out BSTR p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_borderTopColor(VARIANT v) mut => VT.put_borderTopColor(ref this, v);
			public HRESULT get_borderTopColor(out VARIANT p) mut => VT.get_borderTopColor(ref this, out p);
			public HRESULT put_borderRightColor(VARIANT v) mut => VT.put_borderRightColor(ref this, v);
			public HRESULT get_borderRightColor(out VARIANT p) mut => VT.get_borderRightColor(ref this, out p);
			public HRESULT put_borderBottomColor(VARIANT v) mut => VT.put_borderBottomColor(ref this, v);
			public HRESULT get_borderBottomColor(out VARIANT p) mut => VT.get_borderBottomColor(ref this, out p);
			public HRESULT put_borderLeftColor(VARIANT v) mut => VT.put_borderLeftColor(ref this, v);
			public HRESULT get_borderLeftColor(out VARIANT p) mut => VT.get_borderLeftColor(ref this, out p);
			public HRESULT put_borderWidth(BSTR v) mut => VT.put_borderWidth(ref this, v);
			public HRESULT get_borderWidth(out BSTR p) mut => VT.get_borderWidth(ref this, out p);
			public HRESULT put_borderTopWidth(VARIANT v) mut => VT.put_borderTopWidth(ref this, v);
			public HRESULT get_borderTopWidth(out VARIANT p) mut => VT.get_borderTopWidth(ref this, out p);
			public HRESULT put_borderRightWidth(VARIANT v) mut => VT.put_borderRightWidth(ref this, v);
			public HRESULT get_borderRightWidth(out VARIANT p) mut => VT.get_borderRightWidth(ref this, out p);
			public HRESULT put_borderBottomWidth(VARIANT v) mut => VT.put_borderBottomWidth(ref this, v);
			public HRESULT get_borderBottomWidth(out VARIANT p) mut => VT.get_borderBottomWidth(ref this, out p);
			public HRESULT put_borderLeftWidth(VARIANT v) mut => VT.put_borderLeftWidth(ref this, v);
			public HRESULT get_borderLeftWidth(out VARIANT p) mut => VT.get_borderLeftWidth(ref this, out p);
			public HRESULT put_borderStyle(BSTR v) mut => VT.put_borderStyle(ref this, v);
			public HRESULT get_borderStyle(out BSTR p) mut => VT.get_borderStyle(ref this, out p);
			public HRESULT put_borderTopStyle(BSTR v) mut => VT.put_borderTopStyle(ref this, v);
			public HRESULT get_borderTopStyle(out BSTR p) mut => VT.get_borderTopStyle(ref this, out p);
			public HRESULT put_borderRightStyle(BSTR v) mut => VT.put_borderRightStyle(ref this, v);
			public HRESULT get_borderRightStyle(out BSTR p) mut => VT.get_borderRightStyle(ref this, out p);
			public HRESULT put_borderBottomStyle(BSTR v) mut => VT.put_borderBottomStyle(ref this, v);
			public HRESULT get_borderBottomStyle(out BSTR p) mut => VT.get_borderBottomStyle(ref this, out p);
			public HRESULT put_borderLeftStyle(BSTR v) mut => VT.put_borderLeftStyle(ref this, v);
			public HRESULT get_borderLeftStyle(out BSTR p) mut => VT.get_borderLeftStyle(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_styleFloat(BSTR v) mut => VT.put_styleFloat(ref this, v);
			public HRESULT get_styleFloat(out BSTR p) mut => VT.get_styleFloat(ref this, out p);
			public HRESULT put_clear(BSTR v) mut => VT.put_clear(ref this, v);
			public HRESULT get_clear(out BSTR p) mut => VT.get_clear(ref this, out p);
			public HRESULT put_display(BSTR v) mut => VT.put_display(ref this, v);
			public HRESULT get_display(out BSTR p) mut => VT.get_display(ref this, out p);
			public HRESULT put_visibility(BSTR v) mut => VT.put_visibility(ref this, v);
			public HRESULT get_visibility(out BSTR p) mut => VT.get_visibility(ref this, out p);
			public HRESULT put_listStyleType(BSTR v) mut => VT.put_listStyleType(ref this, v);
			public HRESULT get_listStyleType(out BSTR p) mut => VT.get_listStyleType(ref this, out p);
			public HRESULT put_listStylePosition(BSTR v) mut => VT.put_listStylePosition(ref this, v);
			public HRESULT get_listStylePosition(out BSTR p) mut => VT.get_listStylePosition(ref this, out p);
			public HRESULT put_listStyleImage(BSTR v) mut => VT.put_listStyleImage(ref this, v);
			public HRESULT get_listStyleImage(out BSTR p) mut => VT.get_listStyleImage(ref this, out p);
			public HRESULT put_listStyle(BSTR v) mut => VT.put_listStyle(ref this, v);
			public HRESULT get_listStyle(out BSTR p) mut => VT.get_listStyle(ref this, out p);
			public HRESULT put_whiteSpace(BSTR v) mut => VT.put_whiteSpace(ref this, v);
			public HRESULT get_whiteSpace(out BSTR p) mut => VT.get_whiteSpace(ref this, out p);
			public HRESULT put_top(VARIANT v) mut => VT.put_top(ref this, v);
			public HRESULT get_top(out VARIANT p) mut => VT.get_top(ref this, out p);
			public HRESULT put_left(VARIANT v) mut => VT.put_left(ref this, v);
			public HRESULT get_left(out VARIANT p) mut => VT.get_left(ref this, out p);
			public HRESULT get_position(out BSTR p) mut => VT.get_position(ref this, out p);
			public HRESULT put_zIndex(VARIANT v) mut => VT.put_zIndex(ref this, v);
			public HRESULT get_zIndex(out VARIANT p) mut => VT.get_zIndex(ref this, out p);
			public HRESULT put_overflow(BSTR v) mut => VT.put_overflow(ref this, v);
			public HRESULT get_overflow(out BSTR p) mut => VT.get_overflow(ref this, out p);
			public HRESULT put_pageBreakBefore(BSTR v) mut => VT.put_pageBreakBefore(ref this, v);
			public HRESULT get_pageBreakBefore(out BSTR p) mut => VT.get_pageBreakBefore(ref this, out p);
			public HRESULT put_pageBreakAfter(BSTR v) mut => VT.put_pageBreakAfter(ref this, v);
			public HRESULT get_pageBreakAfter(out BSTR p) mut => VT.get_pageBreakAfter(ref this, out p);
			public HRESULT put_cssText(BSTR v) mut => VT.put_cssText(ref this, v);
			public HRESULT get_cssText(out BSTR p) mut => VT.get_cssText(ref this, out p);
			public HRESULT put_pixelTop(int32 v) mut => VT.put_pixelTop(ref this, v);
			public HRESULT get_pixelTop(out int32 p) mut => VT.get_pixelTop(ref this, out p);
			public HRESULT put_pixelLeft(int32 v) mut => VT.put_pixelLeft(ref this, v);
			public HRESULT get_pixelLeft(out int32 p) mut => VT.get_pixelLeft(ref this, out p);
			public HRESULT put_pixelWidth(int32 v) mut => VT.put_pixelWidth(ref this, v);
			public HRESULT get_pixelWidth(out int32 p) mut => VT.get_pixelWidth(ref this, out p);
			public HRESULT put_pixelHeight(int32 v) mut => VT.put_pixelHeight(ref this, v);
			public HRESULT get_pixelHeight(out int32 p) mut => VT.get_pixelHeight(ref this, out p);
			public HRESULT put_posTop(float v) mut => VT.put_posTop(ref this, v);
			public HRESULT get_posTop(out float p) mut => VT.get_posTop(ref this, out p);
			public HRESULT put_posLeft(float v) mut => VT.put_posLeft(ref this, v);
			public HRESULT get_posLeft(out float p) mut => VT.get_posLeft(ref this, out p);
			public HRESULT put_posWidth(float v) mut => VT.put_posWidth(ref this, v);
			public HRESULT get_posWidth(out float p) mut => VT.get_posWidth(ref this, out p);
			public HRESULT put_posHeight(float v) mut => VT.put_posHeight(ref this, v);
			public HRESULT get_posHeight(out float p) mut => VT.get_posHeight(ref this, out p);
			public HRESULT put_cursor(BSTR v) mut => VT.put_cursor(ref this, v);
			public HRESULT get_cursor(out BSTR p) mut => VT.get_cursor(ref this, out p);
			public HRESULT put_clip(BSTR v) mut => VT.put_clip(ref this, v);
			public HRESULT get_clip(out BSTR p) mut => VT.get_clip(ref this, out p);
			public HRESULT put_filter(BSTR v) mut => VT.put_filter(ref this, v);
			public HRESULT get_filter(out BSTR p) mut => VT.get_filter(ref this, out p);
			public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.setAttribute(ref this, strAttributeName, AttributeValue, lFlags);
			public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, lFlags, out AttributeValue);
			public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) mut => VT.removeAttribute(ref this, strAttributeName, lFlags, out pfSuccess);
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_backgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_backgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int16 v) put_textDecorationNone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int16 p) get_textDecorationNone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int16 v) put_textDecorationUnderline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int16 p) get_textDecorationUnderline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int16 v) put_textDecorationOverline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int16 p) get_textDecorationOverline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int16 v) put_textDecorationLineThrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int16 p) get_textDecorationLineThrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int16 v) put_textDecorationBlink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int16 p) get_textDecorationBlink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_textTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_textTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_listStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_listStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_whiteSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_whiteSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, VARIANT v) put_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out VARIANT p) get_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int32 v) put_pixelTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int32 p) get_pixelTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int32 v) put_pixelLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int32 p) get_pixelLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int32 v) put_pixelWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int32 p) get_pixelWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, int32 v) put_pixelHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out int32 p) get_pixelHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, float v) put_posTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out float p) get_posTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, float v) put_posLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out float p) get_posLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, float v) put_posWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out float p) get_posWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, float v) put_posHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out float p) get_posHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR v) put_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR p) get_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) removeAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle self, out BSTR String) toString;
			}
		}
		[CRepr]
		public struct IHTMLStyle2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4a2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_tableLayout(BSTR v) mut => VT.put_tableLayout(ref this, v);
			public HRESULT get_tableLayout(out BSTR p) mut => VT.get_tableLayout(ref this, out p);
			public HRESULT put_borderCollapse(BSTR v) mut => VT.put_borderCollapse(ref this, v);
			public HRESULT get_borderCollapse(out BSTR p) mut => VT.get_borderCollapse(ref this, out p);
			public HRESULT put_direction(BSTR v) mut => VT.put_direction(ref this, v);
			public HRESULT get_direction(out BSTR p) mut => VT.get_direction(ref this, out p);
			public HRESULT put_behavior(BSTR v) mut => VT.put_behavior(ref this, v);
			public HRESULT get_behavior(out BSTR p) mut => VT.get_behavior(ref this, out p);
			public HRESULT setExpression(BSTR propname, BSTR expression, BSTR language) mut => VT.setExpression(ref this, propname, expression, language);
			public HRESULT getExpression(BSTR propname, out VARIANT expression) mut => VT.getExpression(ref this, propname, out expression);
			public HRESULT removeExpression(BSTR propname, out int16 pfSuccess) mut => VT.removeExpression(ref this, propname, out pfSuccess);
			public HRESULT put_position(BSTR v) mut => VT.put_position(ref this, v);
			public HRESULT get_position(out BSTR p) mut => VT.get_position(ref this, out p);
			public HRESULT put_unicodeBidi(BSTR v) mut => VT.put_unicodeBidi(ref this, v);
			public HRESULT get_unicodeBidi(out BSTR p) mut => VT.get_unicodeBidi(ref this, out p);
			public HRESULT put_bottom(VARIANT v) mut => VT.put_bottom(ref this, v);
			public HRESULT get_bottom(out VARIANT p) mut => VT.get_bottom(ref this, out p);
			public HRESULT put_right(VARIANT v) mut => VT.put_right(ref this, v);
			public HRESULT get_right(out VARIANT p) mut => VT.get_right(ref this, out p);
			public HRESULT put_pixelBottom(int32 v) mut => VT.put_pixelBottom(ref this, v);
			public HRESULT get_pixelBottom(out int32 p) mut => VT.get_pixelBottom(ref this, out p);
			public HRESULT put_pixelRight(int32 v) mut => VT.put_pixelRight(ref this, v);
			public HRESULT get_pixelRight(out int32 p) mut => VT.get_pixelRight(ref this, out p);
			public HRESULT put_posBottom(float v) mut => VT.put_posBottom(ref this, v);
			public HRESULT get_posBottom(out float p) mut => VT.get_posBottom(ref this, out p);
			public HRESULT put_posRight(float v) mut => VT.put_posRight(ref this, v);
			public HRESULT get_posRight(out float p) mut => VT.get_posRight(ref this, out p);
			public HRESULT put_imeMode(BSTR v) mut => VT.put_imeMode(ref this, v);
			public HRESULT get_imeMode(out BSTR p) mut => VT.get_imeMode(ref this, out p);
			public HRESULT put_rubyAlign(BSTR v) mut => VT.put_rubyAlign(ref this, v);
			public HRESULT get_rubyAlign(out BSTR p) mut => VT.get_rubyAlign(ref this, out p);
			public HRESULT put_rubyPosition(BSTR v) mut => VT.put_rubyPosition(ref this, v);
			public HRESULT get_rubyPosition(out BSTR p) mut => VT.get_rubyPosition(ref this, out p);
			public HRESULT put_rubyOverhang(BSTR v) mut => VT.put_rubyOverhang(ref this, v);
			public HRESULT get_rubyOverhang(out BSTR p) mut => VT.get_rubyOverhang(ref this, out p);
			public HRESULT put_layoutGridChar(VARIANT v) mut => VT.put_layoutGridChar(ref this, v);
			public HRESULT get_layoutGridChar(out VARIANT p) mut => VT.get_layoutGridChar(ref this, out p);
			public HRESULT put_layoutGridLine(VARIANT v) mut => VT.put_layoutGridLine(ref this, v);
			public HRESULT get_layoutGridLine(out VARIANT p) mut => VT.get_layoutGridLine(ref this, out p);
			public HRESULT put_layoutGridMode(BSTR v) mut => VT.put_layoutGridMode(ref this, v);
			public HRESULT get_layoutGridMode(out BSTR p) mut => VT.get_layoutGridMode(ref this, out p);
			public HRESULT put_layoutGridType(BSTR v) mut => VT.put_layoutGridType(ref this, v);
			public HRESULT get_layoutGridType(out BSTR p) mut => VT.get_layoutGridType(ref this, out p);
			public HRESULT put_layoutGrid(BSTR v) mut => VT.put_layoutGrid(ref this, v);
			public HRESULT get_layoutGrid(out BSTR p) mut => VT.get_layoutGrid(ref this, out p);
			public HRESULT put_wordBreak(BSTR v) mut => VT.put_wordBreak(ref this, v);
			public HRESULT get_wordBreak(out BSTR p) mut => VT.get_wordBreak(ref this, out p);
			public HRESULT put_lineBreak(BSTR v) mut => VT.put_lineBreak(ref this, v);
			public HRESULT get_lineBreak(out BSTR p) mut => VT.get_lineBreak(ref this, out p);
			public HRESULT put_textJustify(BSTR v) mut => VT.put_textJustify(ref this, v);
			public HRESULT get_textJustify(out BSTR p) mut => VT.get_textJustify(ref this, out p);
			public HRESULT put_textJustifyTrim(BSTR v) mut => VT.put_textJustifyTrim(ref this, v);
			public HRESULT get_textJustifyTrim(out BSTR p) mut => VT.get_textJustifyTrim(ref this, out p);
			public HRESULT put_textKashida(VARIANT v) mut => VT.put_textKashida(ref this, v);
			public HRESULT get_textKashida(out VARIANT p) mut => VT.get_textKashida(ref this, out p);
			public HRESULT put_textAutospace(BSTR v) mut => VT.put_textAutospace(ref this, v);
			public HRESULT get_textAutospace(out BSTR p) mut => VT.get_textAutospace(ref this, out p);
			public HRESULT put_overflowX(BSTR v) mut => VT.put_overflowX(ref this, v);
			public HRESULT get_overflowX(out BSTR p) mut => VT.get_overflowX(ref this, out p);
			public HRESULT put_overflowY(BSTR v) mut => VT.put_overflowY(ref this, v);
			public HRESULT get_overflowY(out BSTR p) mut => VT.get_overflowY(ref this, out p);
			public HRESULT put_accelerator(BSTR v) mut => VT.put_accelerator(ref this, v);
			public HRESULT get_accelerator(out BSTR p) mut => VT.get_accelerator(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR propname, BSTR expression, BSTR language) setExpression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR propname, out VARIANT expression) getExpression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR propname, out int16 pfSuccess) removeExpression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, VARIANT v) put_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out VARIANT p) get_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, VARIANT v) put_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out VARIANT p) get_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, int32 v) put_pixelBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out int32 p) get_pixelBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, int32 v) put_pixelRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out int32 p) get_pixelRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, float v) put_posBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out float p) get_posBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, float v) put_posRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out float p) get_posRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, VARIANT v) put_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out VARIANT p) get_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, VARIANT v) put_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out VARIANT p) get_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_layoutGrid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_layoutGrid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, VARIANT v) put_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out VARIANT p) get_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, BSTR v) put_accelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle2 self, out BSTR p) get_accelerator;
			}
		}
		[CRepr]
		public struct IHTMLStyle3 : IDispatch
		{
			public const new Guid IID = .(0x3050f656, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_layoutFlow(BSTR v) mut => VT.put_layoutFlow(ref this, v);
			public HRESULT get_layoutFlow(out BSTR p) mut => VT.get_layoutFlow(ref this, out p);
			public HRESULT put_zoom(VARIANT v) mut => VT.put_zoom(ref this, v);
			public HRESULT get_zoom(out VARIANT p) mut => VT.get_zoom(ref this, out p);
			public HRESULT put_wordWrap(BSTR v) mut => VT.put_wordWrap(ref this, v);
			public HRESULT get_wordWrap(out BSTR p) mut => VT.get_wordWrap(ref this, out p);
			public HRESULT put_textUnderlinePosition(BSTR v) mut => VT.put_textUnderlinePosition(ref this, v);
			public HRESULT get_textUnderlinePosition(out BSTR p) mut => VT.get_textUnderlinePosition(ref this, out p);
			public HRESULT put_scrollbarBaseColor(VARIANT v) mut => VT.put_scrollbarBaseColor(ref this, v);
			public HRESULT get_scrollbarBaseColor(out VARIANT p) mut => VT.get_scrollbarBaseColor(ref this, out p);
			public HRESULT put_scrollbarFaceColor(VARIANT v) mut => VT.put_scrollbarFaceColor(ref this, v);
			public HRESULT get_scrollbarFaceColor(out VARIANT p) mut => VT.get_scrollbarFaceColor(ref this, out p);
			public HRESULT put_scrollbar3dLightColor(VARIANT v) mut => VT.put_scrollbar3dLightColor(ref this, v);
			public HRESULT get_scrollbar3dLightColor(out VARIANT p) mut => VT.get_scrollbar3dLightColor(ref this, out p);
			public HRESULT put_scrollbarShadowColor(VARIANT v) mut => VT.put_scrollbarShadowColor(ref this, v);
			public HRESULT get_scrollbarShadowColor(out VARIANT p) mut => VT.get_scrollbarShadowColor(ref this, out p);
			public HRESULT put_scrollbarHighlightColor(VARIANT v) mut => VT.put_scrollbarHighlightColor(ref this, v);
			public HRESULT get_scrollbarHighlightColor(out VARIANT p) mut => VT.get_scrollbarHighlightColor(ref this, out p);
			public HRESULT put_scrollbarDarkShadowColor(VARIANT v) mut => VT.put_scrollbarDarkShadowColor(ref this, v);
			public HRESULT get_scrollbarDarkShadowColor(out VARIANT p) mut => VT.get_scrollbarDarkShadowColor(ref this, out p);
			public HRESULT put_scrollbarArrowColor(VARIANT v) mut => VT.put_scrollbarArrowColor(ref this, v);
			public HRESULT get_scrollbarArrowColor(out VARIANT p) mut => VT.get_scrollbarArrowColor(ref this, out p);
			public HRESULT put_scrollbarTrackColor(VARIANT v) mut => VT.put_scrollbarTrackColor(ref this, v);
			public HRESULT get_scrollbarTrackColor(out VARIANT p) mut => VT.get_scrollbarTrackColor(ref this, out p);
			public HRESULT put_writingMode(BSTR v) mut => VT.put_writingMode(ref this, v);
			public HRESULT get_writingMode(out BSTR p) mut => VT.get_writingMode(ref this, out p);
			public HRESULT put_textAlignLast(BSTR v) mut => VT.put_textAlignLast(ref this, v);
			public HRESULT get_textAlignLast(out BSTR p) mut => VT.get_textAlignLast(ref this, out p);
			public HRESULT put_textKashidaSpace(VARIANT v) mut => VT.put_textKashidaSpace(ref this, v);
			public HRESULT get_textKashidaSpace(out VARIANT p) mut => VT.get_textKashidaSpace(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, BSTR v) put_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out BSTR p) get_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, BSTR v) put_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out BSTR p) get_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, BSTR v) put_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out BSTR p) get_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, BSTR v) put_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out BSTR p) get_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, BSTR v) put_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out BSTR p) get_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, VARIANT v) put_textKashidaSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle3 self, out VARIANT p) get_textKashidaSpace;
			}
		}
		[CRepr]
		public struct IHTMLStyle4 : IDispatch
		{
			public const new Guid IID = .(0x3050f816, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_textOverflow(BSTR v) mut => VT.put_textOverflow(ref this, v);
			public HRESULT get_textOverflow(out BSTR p) mut => VT.get_textOverflow(ref this, out p);
			public HRESULT put_minHeight(VARIANT v) mut => VT.put_minHeight(ref this, v);
			public HRESULT get_minHeight(out VARIANT p) mut => VT.get_minHeight(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle4 self, BSTR v) put_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle4 self, out BSTR p) get_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle4 self, VARIANT v) put_minHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle4 self, out VARIANT p) get_minHeight;
			}
		}
		[CRepr]
		public struct IHTMLStyle5 : IDispatch
		{
			public const new Guid IID = .(0x3050f33a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_msInterpolationMode(BSTR v) mut => VT.put_msInterpolationMode(ref this, v);
			public HRESULT get_msInterpolationMode(out BSTR p) mut => VT.get_msInterpolationMode(ref this, out p);
			public HRESULT put_maxHeight(VARIANT v) mut => VT.put_maxHeight(ref this, v);
			public HRESULT get_maxHeight(out VARIANT p) mut => VT.get_maxHeight(ref this, out p);
			public HRESULT put_minWidth(VARIANT v) mut => VT.put_minWidth(ref this, v);
			public HRESULT get_minWidth(out VARIANT p) mut => VT.get_minWidth(ref this, out p);
			public HRESULT put_maxWidth(VARIANT v) mut => VT.put_maxWidth(ref this, v);
			public HRESULT get_maxWidth(out VARIANT p) mut => VT.get_maxWidth(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, BSTR v) put_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, out BSTR p) get_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, VARIANT v) put_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, out VARIANT p) get_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, VARIANT v) put_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, out VARIANT p) get_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, VARIANT v) put_maxWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle5 self, out VARIANT p) get_maxWidth;
			}
		}
		[CRepr]
		public struct IHTMLStyle6 : IDispatch
		{
			public const new Guid IID = .(0x30510480, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_content(BSTR v) mut => VT.put_content(ref this, v);
			public HRESULT get_content(out BSTR p) mut => VT.get_content(ref this, out p);
			public HRESULT put_captionSide(BSTR v) mut => VT.put_captionSide(ref this, v);
			public HRESULT get_captionSide(out BSTR p) mut => VT.get_captionSide(ref this, out p);
			public HRESULT put_counterIncrement(BSTR v) mut => VT.put_counterIncrement(ref this, v);
			public HRESULT get_counterIncrement(out BSTR p) mut => VT.get_counterIncrement(ref this, out p);
			public HRESULT put_counterReset(BSTR v) mut => VT.put_counterReset(ref this, v);
			public HRESULT get_counterReset(out BSTR p) mut => VT.get_counterReset(ref this, out p);
			public HRESULT put_outline(BSTR v) mut => VT.put_outline(ref this, v);
			public HRESULT get_outline(out BSTR p) mut => VT.get_outline(ref this, out p);
			public HRESULT put_outlineWidth(VARIANT v) mut => VT.put_outlineWidth(ref this, v);
			public HRESULT get_outlineWidth(out VARIANT p) mut => VT.get_outlineWidth(ref this, out p);
			public HRESULT put_outlineStyle(BSTR v) mut => VT.put_outlineStyle(ref this, v);
			public HRESULT get_outlineStyle(out BSTR p) mut => VT.get_outlineStyle(ref this, out p);
			public HRESULT put_outlineColor(VARIANT v) mut => VT.put_outlineColor(ref this, v);
			public HRESULT get_outlineColor(out VARIANT p) mut => VT.get_outlineColor(ref this, out p);
			public HRESULT put_boxSizing(BSTR v) mut => VT.put_boxSizing(ref this, v);
			public HRESULT get_boxSizing(out BSTR p) mut => VT.get_boxSizing(ref this, out p);
			public HRESULT put_borderSpacing(BSTR v) mut => VT.put_borderSpacing(ref this, v);
			public HRESULT get_borderSpacing(out BSTR p) mut => VT.get_borderSpacing(ref this, out p);
			public HRESULT put_orphans(VARIANT v) mut => VT.put_orphans(ref this, v);
			public HRESULT get_orphans(out VARIANT p) mut => VT.get_orphans(ref this, out p);
			public HRESULT put_widows(VARIANT v) mut => VT.put_widows(ref this, v);
			public HRESULT get_widows(out VARIANT p) mut => VT.get_widows(ref this, out p);
			public HRESULT put_pageBreakInside(BSTR v) mut => VT.put_pageBreakInside(ref this, v);
			public HRESULT get_pageBreakInside(out BSTR p) mut => VT.get_pageBreakInside(ref this, out p);
			public HRESULT put_emptyCells(BSTR v) mut => VT.put_emptyCells(ref this, v);
			public HRESULT get_emptyCells(out BSTR p) mut => VT.get_emptyCells(ref this, out p);
			public HRESULT put_msBlockProgression(BSTR v) mut => VT.put_msBlockProgression(ref this, v);
			public HRESULT get_msBlockProgression(out BSTR p) mut => VT.get_msBlockProgression(ref this, out p);
			public HRESULT put_quotes(BSTR v) mut => VT.put_quotes(ref this, v);
			public HRESULT get_quotes(out BSTR p) mut => VT.get_quotes(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_counterIncrement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_counterIncrement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_counterReset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_counterReset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, VARIANT v) put_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out VARIANT p) get_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, VARIANT v) put_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out VARIANT p) get_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, VARIANT v) put_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out VARIANT p) get_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, VARIANT v) put_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out VARIANT p) get_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, BSTR v) put_quotes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyle6 self, out BSTR p) get_quotes;
			}
		}
		[CRepr]
		public struct IHTMLRuleStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f3cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_fontFamily(BSTR v) mut => VT.put_fontFamily(ref this, v);
			public HRESULT get_fontFamily(out BSTR p) mut => VT.get_fontFamily(ref this, out p);
			public HRESULT put_fontStyle(BSTR v) mut => VT.put_fontStyle(ref this, v);
			public HRESULT get_fontStyle(out BSTR p) mut => VT.get_fontStyle(ref this, out p);
			public HRESULT put_fontVariant(BSTR v) mut => VT.put_fontVariant(ref this, v);
			public HRESULT get_fontVariant(out BSTR p) mut => VT.get_fontVariant(ref this, out p);
			public HRESULT put_fontWeight(BSTR v) mut => VT.put_fontWeight(ref this, v);
			public HRESULT get_fontWeight(out BSTR p) mut => VT.get_fontWeight(ref this, out p);
			public HRESULT put_fontSize(VARIANT v) mut => VT.put_fontSize(ref this, v);
			public HRESULT get_fontSize(out VARIANT p) mut => VT.get_fontSize(ref this, out p);
			public HRESULT put_font(BSTR v) mut => VT.put_font(ref this, v);
			public HRESULT get_font(out BSTR p) mut => VT.get_font(ref this, out p);
			public HRESULT put_color(VARIANT v) mut => VT.put_color(ref this, v);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_backgroundColor(VARIANT v) mut => VT.put_backgroundColor(ref this, v);
			public HRESULT get_backgroundColor(out VARIANT p) mut => VT.get_backgroundColor(ref this, out p);
			public HRESULT put_backgroundImage(BSTR v) mut => VT.put_backgroundImage(ref this, v);
			public HRESULT get_backgroundImage(out BSTR p) mut => VT.get_backgroundImage(ref this, out p);
			public HRESULT put_backgroundRepeat(BSTR v) mut => VT.put_backgroundRepeat(ref this, v);
			public HRESULT get_backgroundRepeat(out BSTR p) mut => VT.get_backgroundRepeat(ref this, out p);
			public HRESULT put_backgroundAttachment(BSTR v) mut => VT.put_backgroundAttachment(ref this, v);
			public HRESULT get_backgroundAttachment(out BSTR p) mut => VT.get_backgroundAttachment(ref this, out p);
			public HRESULT put_backgroundPosition(BSTR v) mut => VT.put_backgroundPosition(ref this, v);
			public HRESULT get_backgroundPosition(out BSTR p) mut => VT.get_backgroundPosition(ref this, out p);
			public HRESULT put_backgroundPositionX(VARIANT v) mut => VT.put_backgroundPositionX(ref this, v);
			public HRESULT get_backgroundPositionX(out VARIANT p) mut => VT.get_backgroundPositionX(ref this, out p);
			public HRESULT put_backgroundPositionY(VARIANT v) mut => VT.put_backgroundPositionY(ref this, v);
			public HRESULT get_backgroundPositionY(out VARIANT p) mut => VT.get_backgroundPositionY(ref this, out p);
			public HRESULT put_wordSpacing(VARIANT v) mut => VT.put_wordSpacing(ref this, v);
			public HRESULT get_wordSpacing(out VARIANT p) mut => VT.get_wordSpacing(ref this, out p);
			public HRESULT put_letterSpacing(VARIANT v) mut => VT.put_letterSpacing(ref this, v);
			public HRESULT get_letterSpacing(out VARIANT p) mut => VT.get_letterSpacing(ref this, out p);
			public HRESULT put_textDecoration(BSTR v) mut => VT.put_textDecoration(ref this, v);
			public HRESULT get_textDecoration(out BSTR p) mut => VT.get_textDecoration(ref this, out p);
			public HRESULT put_textDecorationNone(int16 v) mut => VT.put_textDecorationNone(ref this, v);
			public HRESULT get_textDecorationNone(out int16 p) mut => VT.get_textDecorationNone(ref this, out p);
			public HRESULT put_textDecorationUnderline(int16 v) mut => VT.put_textDecorationUnderline(ref this, v);
			public HRESULT get_textDecorationUnderline(out int16 p) mut => VT.get_textDecorationUnderline(ref this, out p);
			public HRESULT put_textDecorationOverline(int16 v) mut => VT.put_textDecorationOverline(ref this, v);
			public HRESULT get_textDecorationOverline(out int16 p) mut => VT.get_textDecorationOverline(ref this, out p);
			public HRESULT put_textDecorationLineThrough(int16 v) mut => VT.put_textDecorationLineThrough(ref this, v);
			public HRESULT get_textDecorationLineThrough(out int16 p) mut => VT.get_textDecorationLineThrough(ref this, out p);
			public HRESULT put_textDecorationBlink(int16 v) mut => VT.put_textDecorationBlink(ref this, v);
			public HRESULT get_textDecorationBlink(out int16 p) mut => VT.get_textDecorationBlink(ref this, out p);
			public HRESULT put_verticalAlign(VARIANT v) mut => VT.put_verticalAlign(ref this, v);
			public HRESULT get_verticalAlign(out VARIANT p) mut => VT.get_verticalAlign(ref this, out p);
			public HRESULT put_textTransform(BSTR v) mut => VT.put_textTransform(ref this, v);
			public HRESULT get_textTransform(out BSTR p) mut => VT.get_textTransform(ref this, out p);
			public HRESULT put_textAlign(BSTR v) mut => VT.put_textAlign(ref this, v);
			public HRESULT get_textAlign(out BSTR p) mut => VT.get_textAlign(ref this, out p);
			public HRESULT put_textIndent(VARIANT v) mut => VT.put_textIndent(ref this, v);
			public HRESULT get_textIndent(out VARIANT p) mut => VT.get_textIndent(ref this, out p);
			public HRESULT put_lineHeight(VARIANT v) mut => VT.put_lineHeight(ref this, v);
			public HRESULT get_lineHeight(out VARIANT p) mut => VT.get_lineHeight(ref this, out p);
			public HRESULT put_marginTop(VARIANT v) mut => VT.put_marginTop(ref this, v);
			public HRESULT get_marginTop(out VARIANT p) mut => VT.get_marginTop(ref this, out p);
			public HRESULT put_marginRight(VARIANT v) mut => VT.put_marginRight(ref this, v);
			public HRESULT get_marginRight(out VARIANT p) mut => VT.get_marginRight(ref this, out p);
			public HRESULT put_marginBottom(VARIANT v) mut => VT.put_marginBottom(ref this, v);
			public HRESULT get_marginBottom(out VARIANT p) mut => VT.get_marginBottom(ref this, out p);
			public HRESULT put_marginLeft(VARIANT v) mut => VT.put_marginLeft(ref this, v);
			public HRESULT get_marginLeft(out VARIANT p) mut => VT.get_marginLeft(ref this, out p);
			public HRESULT put_margin(BSTR v) mut => VT.put_margin(ref this, v);
			public HRESULT get_margin(out BSTR p) mut => VT.get_margin(ref this, out p);
			public HRESULT put_paddingTop(VARIANT v) mut => VT.put_paddingTop(ref this, v);
			public HRESULT get_paddingTop(out VARIANT p) mut => VT.get_paddingTop(ref this, out p);
			public HRESULT put_paddingRight(VARIANT v) mut => VT.put_paddingRight(ref this, v);
			public HRESULT get_paddingRight(out VARIANT p) mut => VT.get_paddingRight(ref this, out p);
			public HRESULT put_paddingBottom(VARIANT v) mut => VT.put_paddingBottom(ref this, v);
			public HRESULT get_paddingBottom(out VARIANT p) mut => VT.get_paddingBottom(ref this, out p);
			public HRESULT put_paddingLeft(VARIANT v) mut => VT.put_paddingLeft(ref this, v);
			public HRESULT get_paddingLeft(out VARIANT p) mut => VT.get_paddingLeft(ref this, out p);
			public HRESULT put_padding(BSTR v) mut => VT.put_padding(ref this, v);
			public HRESULT get_padding(out BSTR p) mut => VT.get_padding(ref this, out p);
			public HRESULT put_border(BSTR v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out BSTR p) mut => VT.get_border(ref this, out p);
			public HRESULT put_borderTop(BSTR v) mut => VT.put_borderTop(ref this, v);
			public HRESULT get_borderTop(out BSTR p) mut => VT.get_borderTop(ref this, out p);
			public HRESULT put_borderRight(BSTR v) mut => VT.put_borderRight(ref this, v);
			public HRESULT get_borderRight(out BSTR p) mut => VT.get_borderRight(ref this, out p);
			public HRESULT put_borderBottom(BSTR v) mut => VT.put_borderBottom(ref this, v);
			public HRESULT get_borderBottom(out BSTR p) mut => VT.get_borderBottom(ref this, out p);
			public HRESULT put_borderLeft(BSTR v) mut => VT.put_borderLeft(ref this, v);
			public HRESULT get_borderLeft(out BSTR p) mut => VT.get_borderLeft(ref this, out p);
			public HRESULT put_borderColor(BSTR v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out BSTR p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_borderTopColor(VARIANT v) mut => VT.put_borderTopColor(ref this, v);
			public HRESULT get_borderTopColor(out VARIANT p) mut => VT.get_borderTopColor(ref this, out p);
			public HRESULT put_borderRightColor(VARIANT v) mut => VT.put_borderRightColor(ref this, v);
			public HRESULT get_borderRightColor(out VARIANT p) mut => VT.get_borderRightColor(ref this, out p);
			public HRESULT put_borderBottomColor(VARIANT v) mut => VT.put_borderBottomColor(ref this, v);
			public HRESULT get_borderBottomColor(out VARIANT p) mut => VT.get_borderBottomColor(ref this, out p);
			public HRESULT put_borderLeftColor(VARIANT v) mut => VT.put_borderLeftColor(ref this, v);
			public HRESULT get_borderLeftColor(out VARIANT p) mut => VT.get_borderLeftColor(ref this, out p);
			public HRESULT put_borderWidth(BSTR v) mut => VT.put_borderWidth(ref this, v);
			public HRESULT get_borderWidth(out BSTR p) mut => VT.get_borderWidth(ref this, out p);
			public HRESULT put_borderTopWidth(VARIANT v) mut => VT.put_borderTopWidth(ref this, v);
			public HRESULT get_borderTopWidth(out VARIANT p) mut => VT.get_borderTopWidth(ref this, out p);
			public HRESULT put_borderRightWidth(VARIANT v) mut => VT.put_borderRightWidth(ref this, v);
			public HRESULT get_borderRightWidth(out VARIANT p) mut => VT.get_borderRightWidth(ref this, out p);
			public HRESULT put_borderBottomWidth(VARIANT v) mut => VT.put_borderBottomWidth(ref this, v);
			public HRESULT get_borderBottomWidth(out VARIANT p) mut => VT.get_borderBottomWidth(ref this, out p);
			public HRESULT put_borderLeftWidth(VARIANT v) mut => VT.put_borderLeftWidth(ref this, v);
			public HRESULT get_borderLeftWidth(out VARIANT p) mut => VT.get_borderLeftWidth(ref this, out p);
			public HRESULT put_borderStyle(BSTR v) mut => VT.put_borderStyle(ref this, v);
			public HRESULT get_borderStyle(out BSTR p) mut => VT.get_borderStyle(ref this, out p);
			public HRESULT put_borderTopStyle(BSTR v) mut => VT.put_borderTopStyle(ref this, v);
			public HRESULT get_borderTopStyle(out BSTR p) mut => VT.get_borderTopStyle(ref this, out p);
			public HRESULT put_borderRightStyle(BSTR v) mut => VT.put_borderRightStyle(ref this, v);
			public HRESULT get_borderRightStyle(out BSTR p) mut => VT.get_borderRightStyle(ref this, out p);
			public HRESULT put_borderBottomStyle(BSTR v) mut => VT.put_borderBottomStyle(ref this, v);
			public HRESULT get_borderBottomStyle(out BSTR p) mut => VT.get_borderBottomStyle(ref this, out p);
			public HRESULT put_borderLeftStyle(BSTR v) mut => VT.put_borderLeftStyle(ref this, v);
			public HRESULT get_borderLeftStyle(out BSTR p) mut => VT.get_borderLeftStyle(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_styleFloat(BSTR v) mut => VT.put_styleFloat(ref this, v);
			public HRESULT get_styleFloat(out BSTR p) mut => VT.get_styleFloat(ref this, out p);
			public HRESULT put_clear(BSTR v) mut => VT.put_clear(ref this, v);
			public HRESULT get_clear(out BSTR p) mut => VT.get_clear(ref this, out p);
			public HRESULT put_display(BSTR v) mut => VT.put_display(ref this, v);
			public HRESULT get_display(out BSTR p) mut => VT.get_display(ref this, out p);
			public HRESULT put_visibility(BSTR v) mut => VT.put_visibility(ref this, v);
			public HRESULT get_visibility(out BSTR p) mut => VT.get_visibility(ref this, out p);
			public HRESULT put_listStyleType(BSTR v) mut => VT.put_listStyleType(ref this, v);
			public HRESULT get_listStyleType(out BSTR p) mut => VT.get_listStyleType(ref this, out p);
			public HRESULT put_listStylePosition(BSTR v) mut => VT.put_listStylePosition(ref this, v);
			public HRESULT get_listStylePosition(out BSTR p) mut => VT.get_listStylePosition(ref this, out p);
			public HRESULT put_listStyleImage(BSTR v) mut => VT.put_listStyleImage(ref this, v);
			public HRESULT get_listStyleImage(out BSTR p) mut => VT.get_listStyleImage(ref this, out p);
			public HRESULT put_listStyle(BSTR v) mut => VT.put_listStyle(ref this, v);
			public HRESULT get_listStyle(out BSTR p) mut => VT.get_listStyle(ref this, out p);
			public HRESULT put_whiteSpace(BSTR v) mut => VT.put_whiteSpace(ref this, v);
			public HRESULT get_whiteSpace(out BSTR p) mut => VT.get_whiteSpace(ref this, out p);
			public HRESULT put_top(VARIANT v) mut => VT.put_top(ref this, v);
			public HRESULT get_top(out VARIANT p) mut => VT.get_top(ref this, out p);
			public HRESULT put_left(VARIANT v) mut => VT.put_left(ref this, v);
			public HRESULT get_left(out VARIANT p) mut => VT.get_left(ref this, out p);
			public HRESULT get_position(out BSTR p) mut => VT.get_position(ref this, out p);
			public HRESULT put_zIndex(VARIANT v) mut => VT.put_zIndex(ref this, v);
			public HRESULT get_zIndex(out VARIANT p) mut => VT.get_zIndex(ref this, out p);
			public HRESULT put_overflow(BSTR v) mut => VT.put_overflow(ref this, v);
			public HRESULT get_overflow(out BSTR p) mut => VT.get_overflow(ref this, out p);
			public HRESULT put_pageBreakBefore(BSTR v) mut => VT.put_pageBreakBefore(ref this, v);
			public HRESULT get_pageBreakBefore(out BSTR p) mut => VT.get_pageBreakBefore(ref this, out p);
			public HRESULT put_pageBreakAfter(BSTR v) mut => VT.put_pageBreakAfter(ref this, v);
			public HRESULT get_pageBreakAfter(out BSTR p) mut => VT.get_pageBreakAfter(ref this, out p);
			public HRESULT put_cssText(BSTR v) mut => VT.put_cssText(ref this, v);
			public HRESULT get_cssText(out BSTR p) mut => VT.get_cssText(ref this, out p);
			public HRESULT put_cursor(BSTR v) mut => VT.put_cursor(ref this, v);
			public HRESULT get_cursor(out BSTR p) mut => VT.get_cursor(ref this, out p);
			public HRESULT put_clip(BSTR v) mut => VT.put_clip(ref this, v);
			public HRESULT get_clip(out BSTR p) mut => VT.get_clip(ref this, out p);
			public HRESULT put_filter(BSTR v) mut => VT.put_filter(ref this, v);
			public HRESULT get_filter(out BSTR p) mut => VT.get_filter(ref this, out p);
			public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.setAttribute(ref this, strAttributeName, AttributeValue, lFlags);
			public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, lFlags, out AttributeValue);
			public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) mut => VT.removeAttribute(ref this, strAttributeName, lFlags, out pfSuccess);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_backgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_backgroundPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, int16 v) put_textDecorationNone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out int16 p) get_textDecorationNone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, int16 v) put_textDecorationUnderline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out int16 p) get_textDecorationUnderline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, int16 v) put_textDecorationOverline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out int16 p) get_textDecorationOverline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, int16 v) put_textDecorationLineThrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out int16 p) get_textDecorationLineThrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, int16 v) put_textDecorationBlink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out int16 p) get_textDecorationBlink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_textTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_textTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_listStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_listStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_whiteSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_whiteSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, VARIANT v) put_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out VARIANT p) get_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR v) put_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, out BSTR p) get_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle self, BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) removeAttribute;
			}
		}
		[CRepr]
		public struct IHTMLRuleStyle2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4ac, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_tableLayout(BSTR v) mut => VT.put_tableLayout(ref this, v);
			public HRESULT get_tableLayout(out BSTR p) mut => VT.get_tableLayout(ref this, out p);
			public HRESULT put_borderCollapse(BSTR v) mut => VT.put_borderCollapse(ref this, v);
			public HRESULT get_borderCollapse(out BSTR p) mut => VT.get_borderCollapse(ref this, out p);
			public HRESULT put_direction(BSTR v) mut => VT.put_direction(ref this, v);
			public HRESULT get_direction(out BSTR p) mut => VT.get_direction(ref this, out p);
			public HRESULT put_behavior(BSTR v) mut => VT.put_behavior(ref this, v);
			public HRESULT get_behavior(out BSTR p) mut => VT.get_behavior(ref this, out p);
			public HRESULT put_position(BSTR v) mut => VT.put_position(ref this, v);
			public HRESULT get_position(out BSTR p) mut => VT.get_position(ref this, out p);
			public HRESULT put_unicodeBidi(BSTR v) mut => VT.put_unicodeBidi(ref this, v);
			public HRESULT get_unicodeBidi(out BSTR p) mut => VT.get_unicodeBidi(ref this, out p);
			public HRESULT put_bottom(VARIANT v) mut => VT.put_bottom(ref this, v);
			public HRESULT get_bottom(out VARIANT p) mut => VT.get_bottom(ref this, out p);
			public HRESULT put_right(VARIANT v) mut => VT.put_right(ref this, v);
			public HRESULT get_right(out VARIANT p) mut => VT.get_right(ref this, out p);
			public HRESULT put_pixelBottom(int32 v) mut => VT.put_pixelBottom(ref this, v);
			public HRESULT get_pixelBottom(out int32 p) mut => VT.get_pixelBottom(ref this, out p);
			public HRESULT put_pixelRight(int32 v) mut => VT.put_pixelRight(ref this, v);
			public HRESULT get_pixelRight(out int32 p) mut => VT.get_pixelRight(ref this, out p);
			public HRESULT put_posBottom(float v) mut => VT.put_posBottom(ref this, v);
			public HRESULT get_posBottom(out float p) mut => VT.get_posBottom(ref this, out p);
			public HRESULT put_posRight(float v) mut => VT.put_posRight(ref this, v);
			public HRESULT get_posRight(out float p) mut => VT.get_posRight(ref this, out p);
			public HRESULT put_imeMode(BSTR v) mut => VT.put_imeMode(ref this, v);
			public HRESULT get_imeMode(out BSTR p) mut => VT.get_imeMode(ref this, out p);
			public HRESULT put_rubyAlign(BSTR v) mut => VT.put_rubyAlign(ref this, v);
			public HRESULT get_rubyAlign(out BSTR p) mut => VT.get_rubyAlign(ref this, out p);
			public HRESULT put_rubyPosition(BSTR v) mut => VT.put_rubyPosition(ref this, v);
			public HRESULT get_rubyPosition(out BSTR p) mut => VT.get_rubyPosition(ref this, out p);
			public HRESULT put_rubyOverhang(BSTR v) mut => VT.put_rubyOverhang(ref this, v);
			public HRESULT get_rubyOverhang(out BSTR p) mut => VT.get_rubyOverhang(ref this, out p);
			public HRESULT put_layoutGridChar(VARIANT v) mut => VT.put_layoutGridChar(ref this, v);
			public HRESULT get_layoutGridChar(out VARIANT p) mut => VT.get_layoutGridChar(ref this, out p);
			public HRESULT put_layoutGridLine(VARIANT v) mut => VT.put_layoutGridLine(ref this, v);
			public HRESULT get_layoutGridLine(out VARIANT p) mut => VT.get_layoutGridLine(ref this, out p);
			public HRESULT put_layoutGridMode(BSTR v) mut => VT.put_layoutGridMode(ref this, v);
			public HRESULT get_layoutGridMode(out BSTR p) mut => VT.get_layoutGridMode(ref this, out p);
			public HRESULT put_layoutGridType(BSTR v) mut => VT.put_layoutGridType(ref this, v);
			public HRESULT get_layoutGridType(out BSTR p) mut => VT.get_layoutGridType(ref this, out p);
			public HRESULT put_layoutGrid(BSTR v) mut => VT.put_layoutGrid(ref this, v);
			public HRESULT get_layoutGrid(out BSTR p) mut => VT.get_layoutGrid(ref this, out p);
			public HRESULT put_textAutospace(BSTR v) mut => VT.put_textAutospace(ref this, v);
			public HRESULT get_textAutospace(out BSTR p) mut => VT.get_textAutospace(ref this, out p);
			public HRESULT put_wordBreak(BSTR v) mut => VT.put_wordBreak(ref this, v);
			public HRESULT get_wordBreak(out BSTR p) mut => VT.get_wordBreak(ref this, out p);
			public HRESULT put_lineBreak(BSTR v) mut => VT.put_lineBreak(ref this, v);
			public HRESULT get_lineBreak(out BSTR p) mut => VT.get_lineBreak(ref this, out p);
			public HRESULT put_textJustify(BSTR v) mut => VT.put_textJustify(ref this, v);
			public HRESULT get_textJustify(out BSTR p) mut => VT.get_textJustify(ref this, out p);
			public HRESULT put_textJustifyTrim(BSTR v) mut => VT.put_textJustifyTrim(ref this, v);
			public HRESULT get_textJustifyTrim(out BSTR p) mut => VT.get_textJustifyTrim(ref this, out p);
			public HRESULT put_textKashida(VARIANT v) mut => VT.put_textKashida(ref this, v);
			public HRESULT get_textKashida(out VARIANT p) mut => VT.get_textKashida(ref this, out p);
			public HRESULT put_overflowX(BSTR v) mut => VT.put_overflowX(ref this, v);
			public HRESULT get_overflowX(out BSTR p) mut => VT.get_overflowX(ref this, out p);
			public HRESULT put_overflowY(BSTR v) mut => VT.put_overflowY(ref this, v);
			public HRESULT get_overflowY(out BSTR p) mut => VT.get_overflowY(ref this, out p);
			public HRESULT put_accelerator(BSTR v) mut => VT.put_accelerator(ref this, v);
			public HRESULT get_accelerator(out BSTR p) mut => VT.get_accelerator(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, VARIANT v) put_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out VARIANT p) get_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, VARIANT v) put_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out VARIANT p) get_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, int32 v) put_pixelBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out int32 p) get_pixelBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, int32 v) put_pixelRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out int32 p) get_pixelRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, float v) put_posBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out float p) get_posBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, float v) put_posRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out float p) get_posRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, VARIANT v) put_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out VARIANT p) get_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, VARIANT v) put_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out VARIANT p) get_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_layoutGrid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_layoutGrid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, VARIANT v) put_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out VARIANT p) get_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, BSTR v) put_accelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle2 self, out BSTR p) get_accelerator;
			}
		}
		[CRepr]
		public struct IHTMLRuleStyle3 : IDispatch
		{
			public const new Guid IID = .(0x3050f657, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_layoutFlow(BSTR v) mut => VT.put_layoutFlow(ref this, v);
			public HRESULT get_layoutFlow(out BSTR p) mut => VT.get_layoutFlow(ref this, out p);
			public HRESULT put_zoom(VARIANT v) mut => VT.put_zoom(ref this, v);
			public HRESULT get_zoom(out VARIANT p) mut => VT.get_zoom(ref this, out p);
			public HRESULT put_wordWrap(BSTR v) mut => VT.put_wordWrap(ref this, v);
			public HRESULT get_wordWrap(out BSTR p) mut => VT.get_wordWrap(ref this, out p);
			public HRESULT put_textUnderlinePosition(BSTR v) mut => VT.put_textUnderlinePosition(ref this, v);
			public HRESULT get_textUnderlinePosition(out BSTR p) mut => VT.get_textUnderlinePosition(ref this, out p);
			public HRESULT put_scrollbarBaseColor(VARIANT v) mut => VT.put_scrollbarBaseColor(ref this, v);
			public HRESULT get_scrollbarBaseColor(out VARIANT p) mut => VT.get_scrollbarBaseColor(ref this, out p);
			public HRESULT put_scrollbarFaceColor(VARIANT v) mut => VT.put_scrollbarFaceColor(ref this, v);
			public HRESULT get_scrollbarFaceColor(out VARIANT p) mut => VT.get_scrollbarFaceColor(ref this, out p);
			public HRESULT put_scrollbar3dLightColor(VARIANT v) mut => VT.put_scrollbar3dLightColor(ref this, v);
			public HRESULT get_scrollbar3dLightColor(out VARIANT p) mut => VT.get_scrollbar3dLightColor(ref this, out p);
			public HRESULT put_scrollbarShadowColor(VARIANT v) mut => VT.put_scrollbarShadowColor(ref this, v);
			public HRESULT get_scrollbarShadowColor(out VARIANT p) mut => VT.get_scrollbarShadowColor(ref this, out p);
			public HRESULT put_scrollbarHighlightColor(VARIANT v) mut => VT.put_scrollbarHighlightColor(ref this, v);
			public HRESULT get_scrollbarHighlightColor(out VARIANT p) mut => VT.get_scrollbarHighlightColor(ref this, out p);
			public HRESULT put_scrollbarDarkShadowColor(VARIANT v) mut => VT.put_scrollbarDarkShadowColor(ref this, v);
			public HRESULT get_scrollbarDarkShadowColor(out VARIANT p) mut => VT.get_scrollbarDarkShadowColor(ref this, out p);
			public HRESULT put_scrollbarArrowColor(VARIANT v) mut => VT.put_scrollbarArrowColor(ref this, v);
			public HRESULT get_scrollbarArrowColor(out VARIANT p) mut => VT.get_scrollbarArrowColor(ref this, out p);
			public HRESULT put_scrollbarTrackColor(VARIANT v) mut => VT.put_scrollbarTrackColor(ref this, v);
			public HRESULT get_scrollbarTrackColor(out VARIANT p) mut => VT.get_scrollbarTrackColor(ref this, out p);
			public HRESULT put_writingMode(BSTR v) mut => VT.put_writingMode(ref this, v);
			public HRESULT get_writingMode(out BSTR p) mut => VT.get_writingMode(ref this, out p);
			public HRESULT put_textAlignLast(BSTR v) mut => VT.put_textAlignLast(ref this, v);
			public HRESULT get_textAlignLast(out BSTR p) mut => VT.get_textAlignLast(ref this, out p);
			public HRESULT put_textKashidaSpace(VARIANT v) mut => VT.put_textKashidaSpace(ref this, v);
			public HRESULT get_textKashidaSpace(out VARIANT p) mut => VT.get_textKashidaSpace(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, BSTR v) put_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out BSTR p) get_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, BSTR v) put_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out BSTR p) get_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, BSTR v) put_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out BSTR p) get_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, BSTR v) put_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out BSTR p) get_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, BSTR v) put_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out BSTR p) get_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, VARIANT v) put_textKashidaSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle3 self, out VARIANT p) get_textKashidaSpace;
			}
		}
		[CRepr]
		public struct IHTMLRuleStyle4 : IDispatch
		{
			public const new Guid IID = .(0x3050f817, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_textOverflow(BSTR v) mut => VT.put_textOverflow(ref this, v);
			public HRESULT get_textOverflow(out BSTR p) mut => VT.get_textOverflow(ref this, out p);
			public HRESULT put_minHeight(VARIANT v) mut => VT.put_minHeight(ref this, v);
			public HRESULT get_minHeight(out VARIANT p) mut => VT.get_minHeight(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle4 self, BSTR v) put_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle4 self, out BSTR p) get_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle4 self, VARIANT v) put_minHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle4 self, out VARIANT p) get_minHeight;
			}
		}
		[CRepr]
		public struct IHTMLRuleStyle5 : IDispatch
		{
			public const new Guid IID = .(0x3050f335, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_msInterpolationMode(BSTR v) mut => VT.put_msInterpolationMode(ref this, v);
			public HRESULT get_msInterpolationMode(out BSTR p) mut => VT.get_msInterpolationMode(ref this, out p);
			public HRESULT put_maxHeight(VARIANT v) mut => VT.put_maxHeight(ref this, v);
			public HRESULT get_maxHeight(out VARIANT p) mut => VT.get_maxHeight(ref this, out p);
			public HRESULT put_minWidth(VARIANT v) mut => VT.put_minWidth(ref this, v);
			public HRESULT get_minWidth(out VARIANT p) mut => VT.get_minWidth(ref this, out p);
			public HRESULT put_maxWidth(VARIANT v) mut => VT.put_maxWidth(ref this, v);
			public HRESULT get_maxWidth(out VARIANT p) mut => VT.get_maxWidth(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, BSTR v) put_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, out BSTR p) get_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, VARIANT v) put_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, out VARIANT p) get_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, VARIANT v) put_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, out VARIANT p) get_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, VARIANT v) put_maxWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle5 self, out VARIANT p) get_maxWidth;
			}
		}
		[CRepr]
		public struct IHTMLRuleStyle6 : IDispatch
		{
			public const new Guid IID = .(0x30510471, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_content(BSTR v) mut => VT.put_content(ref this, v);
			public HRESULT get_content(out BSTR p) mut => VT.get_content(ref this, out p);
			public HRESULT put_captionSide(BSTR v) mut => VT.put_captionSide(ref this, v);
			public HRESULT get_captionSide(out BSTR p) mut => VT.get_captionSide(ref this, out p);
			public HRESULT put_counterIncrement(BSTR v) mut => VT.put_counterIncrement(ref this, v);
			public HRESULT get_counterIncrement(out BSTR p) mut => VT.get_counterIncrement(ref this, out p);
			public HRESULT put_counterReset(BSTR v) mut => VT.put_counterReset(ref this, v);
			public HRESULT get_counterReset(out BSTR p) mut => VT.get_counterReset(ref this, out p);
			public HRESULT put_outline(BSTR v) mut => VT.put_outline(ref this, v);
			public HRESULT get_outline(out BSTR p) mut => VT.get_outline(ref this, out p);
			public HRESULT put_outlineWidth(VARIANT v) mut => VT.put_outlineWidth(ref this, v);
			public HRESULT get_outlineWidth(out VARIANT p) mut => VT.get_outlineWidth(ref this, out p);
			public HRESULT put_outlineStyle(BSTR v) mut => VT.put_outlineStyle(ref this, v);
			public HRESULT get_outlineStyle(out BSTR p) mut => VT.get_outlineStyle(ref this, out p);
			public HRESULT put_outlineColor(VARIANT v) mut => VT.put_outlineColor(ref this, v);
			public HRESULT get_outlineColor(out VARIANT p) mut => VT.get_outlineColor(ref this, out p);
			public HRESULT put_boxSizing(BSTR v) mut => VT.put_boxSizing(ref this, v);
			public HRESULT get_boxSizing(out BSTR p) mut => VT.get_boxSizing(ref this, out p);
			public HRESULT put_borderSpacing(BSTR v) mut => VT.put_borderSpacing(ref this, v);
			public HRESULT get_borderSpacing(out BSTR p) mut => VT.get_borderSpacing(ref this, out p);
			public HRESULT put_orphans(VARIANT v) mut => VT.put_orphans(ref this, v);
			public HRESULT get_orphans(out VARIANT p) mut => VT.get_orphans(ref this, out p);
			public HRESULT put_widows(VARIANT v) mut => VT.put_widows(ref this, v);
			public HRESULT get_widows(out VARIANT p) mut => VT.get_widows(ref this, out p);
			public HRESULT put_pageBreakInside(BSTR v) mut => VT.put_pageBreakInside(ref this, v);
			public HRESULT get_pageBreakInside(out BSTR p) mut => VT.get_pageBreakInside(ref this, out p);
			public HRESULT put_emptyCells(BSTR v) mut => VT.put_emptyCells(ref this, v);
			public HRESULT get_emptyCells(out BSTR p) mut => VT.get_emptyCells(ref this, out p);
			public HRESULT put_msBlockProgression(BSTR v) mut => VT.put_msBlockProgression(ref this, v);
			public HRESULT get_msBlockProgression(out BSTR p) mut => VT.get_msBlockProgression(ref this, out p);
			public HRESULT put_quotes(BSTR v) mut => VT.put_quotes(ref this, v);
			public HRESULT get_quotes(out BSTR p) mut => VT.get_quotes(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_counterIncrement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_counterIncrement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_counterReset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_counterReset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, VARIANT v) put_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out VARIANT p) get_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, VARIANT v) put_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out VARIANT p) get_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, VARIANT v) put_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out VARIANT p) get_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, VARIANT v) put_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out VARIANT p) get_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, BSTR v) put_quotes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRuleStyle6 self, out BSTR p) get_quotes;
			}
		}
		[CRepr]
		public struct DispHTMLStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f55a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLRuleStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f55c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleSheetRulesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f2e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out IHTMLStyleSheetRule* ppHTMLStyleSheetRule) mut => VT.item(ref this, index, out ppHTMLStyleSheetRule);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesCollection self, int32 index, out IHTMLStyleSheetRule* ppHTMLStyleSheetRule) item;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheet : IDispatch
		{
			public const new Guid IID = .(0x3050f2e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_title(BSTR v) mut => VT.put_title(ref this, v);
			public HRESULT get_title(out BSTR p) mut => VT.get_title(ref this, out p);
			public HRESULT get_parentStyleSheet(out IHTMLStyleSheet* p) mut => VT.get_parentStyleSheet(ref this, out p);
			public HRESULT get_owningElement(out IHTMLElement* p) mut => VT.get_owningElement(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_readOnly(out int16 p) mut => VT.get_readOnly(ref this, out p);
			public HRESULT get_imports(out IHTMLStyleSheetsCollection* p) mut => VT.get_imports(ref this, out p);
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT get_id(out BSTR p) mut => VT.get_id(ref this, out p);
			public HRESULT addImport(BSTR bstrURL, int32 lIndex, out int32 plIndex) mut => VT.addImport(ref this, bstrURL, lIndex, out plIndex);
			public HRESULT addRule(BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, out int32 plNewIndex) mut => VT.addRule(ref this, bstrSelector, bstrStyle, lIndex, out plNewIndex);
			public HRESULT removeImport(int32 lIndex) mut => VT.removeImport(ref this, lIndex);
			public HRESULT removeRule(int32 lIndex) mut => VT.removeRule(ref this, lIndex);
			public HRESULT put_media(BSTR v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out BSTR p) mut => VT.get_media(ref this, out p);
			public HRESULT put_cssText(BSTR v) mut => VT.put_cssText(ref this, v);
			public HRESULT get_cssText(out BSTR p) mut => VT.get_cssText(ref this, out p);
			public HRESULT get_rules(out IHTMLStyleSheetRulesCollection* p) mut => VT.get_rules(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, BSTR v) put_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out BSTR p) get_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out IHTMLStyleSheet* p) get_parentStyleSheet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out IHTMLElement* p) get_owningElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out int16 p) get_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out IHTMLStyleSheetsCollection* p) get_imports;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out BSTR p) get_id;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, BSTR bstrURL, int32 lIndex, out int32 plIndex) addImport;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, out int32 plNewIndex) addRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, int32 lIndex) removeImport;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, int32 lIndex) removeRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, BSTR v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out BSTR p) get_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, BSTR v) put_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out BSTR p) get_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet self, out IHTMLStyleSheetRulesCollection* p) get_rules;
			}
		}
		[CRepr]
		public struct IHTMLCSSRule : IDispatch
		{
			public const new Guid IID = .(0x305106e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out uint16 p) mut => VT.get_type(ref this, out p);
			public HRESULT put_cssText(BSTR v) mut => VT.put_cssText(ref this, v);
			public HRESULT get_cssText(out BSTR p) mut => VT.get_cssText(ref this, out p);
			public HRESULT get_parentRule(out IHTMLCSSRule* p) mut => VT.get_parentRule(ref this, out p);
			public HRESULT get_parentStyleSheet(out IHTMLStyleSheet* p) mut => VT.get_parentStyleSheet(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSRule self, out uint16 p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSRule self, BSTR v) put_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSRule self, out BSTR p) get_cssText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSRule self, out IHTMLCSSRule* p) get_parentRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSRule self, out IHTMLStyleSheet* p) get_parentStyleSheet;
			}
		}
		[CRepr]
		public struct IHTMLCSSImportRule : IDispatch
		{
			public const new Guid IID = .(0x305106ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT put_media(VARIANT v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out VARIANT p) mut => VT.get_media(ref this, out p);
			public HRESULT get_styleSheet(out IHTMLStyleSheet* p) mut => VT.get_styleSheet(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSImportRule self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSImportRule self, VARIANT v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSImportRule self, out VARIANT p) get_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSImportRule self, out IHTMLStyleSheet* p) get_styleSheet;
			}
		}
		[CRepr]
		public struct IHTMLCSSMediaRule : IDispatch
		{
			public const new Guid IID = .(0x305106eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_media(VARIANT v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out VARIANT p) mut => VT.get_media(ref this, out p);
			public HRESULT get_cssRules(out IHTMLStyleSheetRulesCollection* p) mut => VT.get_cssRules(ref this, out p);
			public HRESULT insertRule(BSTR bstrRule, int32 lIndex, out int32 plNewIndex) mut => VT.insertRule(ref this, bstrRule, lIndex, out plNewIndex);
			public HRESULT deleteRule(int32 lIndex) mut => VT.deleteRule(ref this, lIndex);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaRule self, VARIANT v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaRule self, out VARIANT p) get_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaRule self, out IHTMLStyleSheetRulesCollection* p) get_cssRules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaRule self, BSTR bstrRule, int32 lIndex, out int32 plNewIndex) insertRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaRule self, int32 lIndex) deleteRule;
			}
		}
		[CRepr]
		public struct IHTMLCSSMediaList : IDispatch
		{
			public const new Guid IID = .(0x30510731, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_mediaText(BSTR v) mut => VT.put_mediaText(ref this, v);
			public HRESULT get_mediaText(out BSTR p) mut => VT.get_mediaText(ref this, out p);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out BSTR pbstrMedium) mut => VT.item(ref this, index, out pbstrMedium);
			public HRESULT appendMedium(BSTR bstrMedium) mut => VT.appendMedium(ref this, bstrMedium);
			public HRESULT deleteMedium(BSTR bstrMedium) mut => VT.deleteMedium(ref this, bstrMedium);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaList self, BSTR v) put_mediaText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaList self, out BSTR p) get_mediaText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaList self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaList self, int32 index, out BSTR pbstrMedium) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaList self, BSTR bstrMedium) appendMedium;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSMediaList self, BSTR bstrMedium) deleteMedium;
			}
		}
		[CRepr]
		public struct IHTMLCSSNamespaceRule : IDispatch
		{
			public const new Guid IID = .(0x305106ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_namespaceURI(out BSTR p) mut => VT.get_namespaceURI(ref this, out p);
			public HRESULT get_prefix(out BSTR p) mut => VT.get_prefix(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSNamespaceRule self, out BSTR p) get_namespaceURI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCSSNamespaceRule self, out BSTR p) get_prefix;
			}
		}
		[CRepr]
		public struct IHTMLMSCSSKeyframeRule : IDispatch
		{
			public const new Guid IID = .(0x3051080c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_keyText(BSTR v) mut => VT.put_keyText(ref this, v);
			public HRESULT get_keyText(out BSTR p) mut => VT.get_keyText(ref this, out p);
			public HRESULT get_style(out IHTMLRuleStyle* p) mut => VT.get_style(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframeRule self, BSTR v) put_keyText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframeRule self, out BSTR p) get_keyText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframeRule self, out IHTMLRuleStyle* p) get_style;
			}
		}
		[CRepr]
		public struct IHTMLMSCSSKeyframesRule : IDispatch
		{
			public const new Guid IID = .(0x3051080d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT get_cssRules(out IHTMLStyleSheetRulesCollection* p) mut => VT.get_cssRules(ref this, out p);
			public HRESULT appendRule(BSTR bstrRule) mut => VT.appendRule(ref this, bstrRule);
			public HRESULT deleteRule(BSTR bstrKey) mut => VT.deleteRule(ref this, bstrKey);
			public HRESULT findRule(BSTR bstrKey, out IHTMLMSCSSKeyframeRule* ppMSKeyframeRule) mut => VT.findRule(ref this, bstrKey, out ppMSKeyframeRule);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframesRule self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframesRule self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframesRule self, out IHTMLStyleSheetRulesCollection* p) get_cssRules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframesRule self, BSTR bstrRule) appendRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframesRule self, BSTR bstrKey) deleteRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSCSSKeyframesRule self, BSTR bstrKey, out IHTMLMSCSSKeyframeRule* ppMSKeyframeRule) findRule;
			}
		}
		[CRepr]
		public struct DispHTMLCSSRule : IDispatch
		{
			public const new Guid IID = .(0x3059007d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLCSSImportRule : IDispatch
		{
			public const new Guid IID = .(0x3059007e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLCSSMediaRule : IDispatch
		{
			public const new Guid IID = .(0x3059007f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLCSSMediaList : IDispatch
		{
			public const new Guid IID = .(0x30590097, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLCSSNamespaceRule : IDispatch
		{
			public const new Guid IID = .(0x30590080, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLMSCSSKeyframeRule : IDispatch
		{
			public const new Guid IID = .(0x305900de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLMSCSSKeyframesRule : IDispatch
		{
			public const new Guid IID = .(0x305900df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLRenderStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f6ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_textLineThroughStyle(BSTR v) mut => VT.put_textLineThroughStyle(ref this, v);
			public HRESULT get_textLineThroughStyle(out BSTR p) mut => VT.get_textLineThroughStyle(ref this, out p);
			public HRESULT put_textUnderlineStyle(BSTR v) mut => VT.put_textUnderlineStyle(ref this, v);
			public HRESULT get_textUnderlineStyle(out BSTR p) mut => VT.get_textUnderlineStyle(ref this, out p);
			public HRESULT put_textEffect(BSTR v) mut => VT.put_textEffect(ref this, v);
			public HRESULT get_textEffect(out BSTR p) mut => VT.get_textEffect(ref this, out p);
			public HRESULT put_textColor(VARIANT v) mut => VT.put_textColor(ref this, v);
			public HRESULT get_textColor(out VARIANT p) mut => VT.get_textColor(ref this, out p);
			public HRESULT put_textBackgroundColor(VARIANT v) mut => VT.put_textBackgroundColor(ref this, v);
			public HRESULT get_textBackgroundColor(out VARIANT p) mut => VT.get_textBackgroundColor(ref this, out p);
			public HRESULT put_textDecorationColor(VARIANT v) mut => VT.put_textDecorationColor(ref this, v);
			public HRESULT get_textDecorationColor(out VARIANT p) mut => VT.get_textDecorationColor(ref this, out p);
			public HRESULT put_renderingPriority(int32 v) mut => VT.put_renderingPriority(ref this, v);
			public HRESULT get_renderingPriority(out int32 p) mut => VT.get_renderingPriority(ref this, out p);
			public HRESULT put_defaultTextSelection(BSTR v) mut => VT.put_defaultTextSelection(ref this, v);
			public HRESULT get_defaultTextSelection(out BSTR p) mut => VT.get_defaultTextSelection(ref this, out p);
			public HRESULT put_textDecoration(BSTR v) mut => VT.put_textDecoration(ref this, v);
			public HRESULT get_textDecoration(out BSTR p) mut => VT.get_textDecoration(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, BSTR v) put_textLineThroughStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out BSTR p) get_textLineThroughStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, BSTR v) put_textUnderlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out BSTR p) get_textUnderlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, BSTR v) put_textEffect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out BSTR p) get_textEffect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, VARIANT v) put_textColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out VARIANT p) get_textColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, VARIANT v) put_textBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out VARIANT p) get_textBackgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, VARIANT v) put_textDecorationColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out VARIANT p) get_textDecorationColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, int32 v) put_renderingPriority;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out int32 p) get_renderingPriority;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, BSTR v) put_defaultTextSelection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out BSTR p) get_defaultTextSelection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, BSTR v) put_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRenderStyle self, out BSTR p) get_textDecoration;
			}
		}
		[CRepr]
		public struct DispHTMLRenderStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f58b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLCurrentStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f3db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_position(out BSTR p) mut => VT.get_position(ref this, out p);
			public HRESULT get_styleFloat(out BSTR p) mut => VT.get_styleFloat(ref this, out p);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT get_backgroundColor(out VARIANT p) mut => VT.get_backgroundColor(ref this, out p);
			public HRESULT get_fontFamily(out BSTR p) mut => VT.get_fontFamily(ref this, out p);
			public HRESULT get_fontStyle(out BSTR p) mut => VT.get_fontStyle(ref this, out p);
			public HRESULT get_fontVariant(out BSTR p) mut => VT.get_fontVariant(ref this, out p);
			public HRESULT get_fontWeight(out VARIANT p) mut => VT.get_fontWeight(ref this, out p);
			public HRESULT get_fontSize(out VARIANT p) mut => VT.get_fontSize(ref this, out p);
			public HRESULT get_backgroundImage(out BSTR p) mut => VT.get_backgroundImage(ref this, out p);
			public HRESULT get_backgroundPositionX(out VARIANT p) mut => VT.get_backgroundPositionX(ref this, out p);
			public HRESULT get_backgroundPositionY(out VARIANT p) mut => VT.get_backgroundPositionY(ref this, out p);
			public HRESULT get_backgroundRepeat(out BSTR p) mut => VT.get_backgroundRepeat(ref this, out p);
			public HRESULT get_borderLeftColor(out VARIANT p) mut => VT.get_borderLeftColor(ref this, out p);
			public HRESULT get_borderTopColor(out VARIANT p) mut => VT.get_borderTopColor(ref this, out p);
			public HRESULT get_borderRightColor(out VARIANT p) mut => VT.get_borderRightColor(ref this, out p);
			public HRESULT get_borderBottomColor(out VARIANT p) mut => VT.get_borderBottomColor(ref this, out p);
			public HRESULT get_borderTopStyle(out BSTR p) mut => VT.get_borderTopStyle(ref this, out p);
			public HRESULT get_borderRightStyle(out BSTR p) mut => VT.get_borderRightStyle(ref this, out p);
			public HRESULT get_borderBottomStyle(out BSTR p) mut => VT.get_borderBottomStyle(ref this, out p);
			public HRESULT get_borderLeftStyle(out BSTR p) mut => VT.get_borderLeftStyle(ref this, out p);
			public HRESULT get_borderTopWidth(out VARIANT p) mut => VT.get_borderTopWidth(ref this, out p);
			public HRESULT get_borderRightWidth(out VARIANT p) mut => VT.get_borderRightWidth(ref this, out p);
			public HRESULT get_borderBottomWidth(out VARIANT p) mut => VT.get_borderBottomWidth(ref this, out p);
			public HRESULT get_borderLeftWidth(out VARIANT p) mut => VT.get_borderLeftWidth(ref this, out p);
			public HRESULT get_left(out VARIANT p) mut => VT.get_left(ref this, out p);
			public HRESULT get_top(out VARIANT p) mut => VT.get_top(ref this, out p);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT get_paddingLeft(out VARIANT p) mut => VT.get_paddingLeft(ref this, out p);
			public HRESULT get_paddingTop(out VARIANT p) mut => VT.get_paddingTop(ref this, out p);
			public HRESULT get_paddingRight(out VARIANT p) mut => VT.get_paddingRight(ref this, out p);
			public HRESULT get_paddingBottom(out VARIANT p) mut => VT.get_paddingBottom(ref this, out p);
			public HRESULT get_textAlign(out BSTR p) mut => VT.get_textAlign(ref this, out p);
			public HRESULT get_textDecoration(out BSTR p) mut => VT.get_textDecoration(ref this, out p);
			public HRESULT get_display(out BSTR p) mut => VT.get_display(ref this, out p);
			public HRESULT get_visibility(out BSTR p) mut => VT.get_visibility(ref this, out p);
			public HRESULT get_zIndex(out VARIANT p) mut => VT.get_zIndex(ref this, out p);
			public HRESULT get_letterSpacing(out VARIANT p) mut => VT.get_letterSpacing(ref this, out p);
			public HRESULT get_lineHeight(out VARIANT p) mut => VT.get_lineHeight(ref this, out p);
			public HRESULT get_textIndent(out VARIANT p) mut => VT.get_textIndent(ref this, out p);
			public HRESULT get_verticalAlign(out VARIANT p) mut => VT.get_verticalAlign(ref this, out p);
			public HRESULT get_backgroundAttachment(out BSTR p) mut => VT.get_backgroundAttachment(ref this, out p);
			public HRESULT get_marginTop(out VARIANT p) mut => VT.get_marginTop(ref this, out p);
			public HRESULT get_marginRight(out VARIANT p) mut => VT.get_marginRight(ref this, out p);
			public HRESULT get_marginBottom(out VARIANT p) mut => VT.get_marginBottom(ref this, out p);
			public HRESULT get_marginLeft(out VARIANT p) mut => VT.get_marginLeft(ref this, out p);
			public HRESULT get_clear(out BSTR p) mut => VT.get_clear(ref this, out p);
			public HRESULT get_listStyleType(out BSTR p) mut => VT.get_listStyleType(ref this, out p);
			public HRESULT get_listStylePosition(out BSTR p) mut => VT.get_listStylePosition(ref this, out p);
			public HRESULT get_listStyleImage(out BSTR p) mut => VT.get_listStyleImage(ref this, out p);
			public HRESULT get_clipTop(out VARIANT p) mut => VT.get_clipTop(ref this, out p);
			public HRESULT get_clipRight(out VARIANT p) mut => VT.get_clipRight(ref this, out p);
			public HRESULT get_clipBottom(out VARIANT p) mut => VT.get_clipBottom(ref this, out p);
			public HRESULT get_clipLeft(out VARIANT p) mut => VT.get_clipLeft(ref this, out p);
			public HRESULT get_overflow(out BSTR p) mut => VT.get_overflow(ref this, out p);
			public HRESULT get_pageBreakBefore(out BSTR p) mut => VT.get_pageBreakBefore(ref this, out p);
			public HRESULT get_pageBreakAfter(out BSTR p) mut => VT.get_pageBreakAfter(ref this, out p);
			public HRESULT get_cursor(out BSTR p) mut => VT.get_cursor(ref this, out p);
			public HRESULT get_tableLayout(out BSTR p) mut => VT.get_tableLayout(ref this, out p);
			public HRESULT get_borderCollapse(out BSTR p) mut => VT.get_borderCollapse(ref this, out p);
			public HRESULT get_direction(out BSTR p) mut => VT.get_direction(ref this, out p);
			public HRESULT get_behavior(out BSTR p) mut => VT.get_behavior(ref this, out p);
			public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, lFlags, out AttributeValue);
			public HRESULT get_unicodeBidi(out BSTR p) mut => VT.get_unicodeBidi(ref this, out p);
			public HRESULT get_right(out VARIANT p) mut => VT.get_right(ref this, out p);
			public HRESULT get_bottom(out VARIANT p) mut => VT.get_bottom(ref this, out p);
			public HRESULT get_imeMode(out BSTR p) mut => VT.get_imeMode(ref this, out p);
			public HRESULT get_rubyAlign(out BSTR p) mut => VT.get_rubyAlign(ref this, out p);
			public HRESULT get_rubyPosition(out BSTR p) mut => VT.get_rubyPosition(ref this, out p);
			public HRESULT get_rubyOverhang(out BSTR p) mut => VT.get_rubyOverhang(ref this, out p);
			public HRESULT get_textAutospace(out BSTR p) mut => VT.get_textAutospace(ref this, out p);
			public HRESULT get_lineBreak(out BSTR p) mut => VT.get_lineBreak(ref this, out p);
			public HRESULT get_wordBreak(out BSTR p) mut => VT.get_wordBreak(ref this, out p);
			public HRESULT get_textJustify(out BSTR p) mut => VT.get_textJustify(ref this, out p);
			public HRESULT get_textJustifyTrim(out BSTR p) mut => VT.get_textJustifyTrim(ref this, out p);
			public HRESULT get_textKashida(out VARIANT p) mut => VT.get_textKashida(ref this, out p);
			public HRESULT get_blockDirection(out BSTR p) mut => VT.get_blockDirection(ref this, out p);
			public HRESULT get_layoutGridChar(out VARIANT p) mut => VT.get_layoutGridChar(ref this, out p);
			public HRESULT get_layoutGridLine(out VARIANT p) mut => VT.get_layoutGridLine(ref this, out p);
			public HRESULT get_layoutGridMode(out BSTR p) mut => VT.get_layoutGridMode(ref this, out p);
			public HRESULT get_layoutGridType(out BSTR p) mut => VT.get_layoutGridType(ref this, out p);
			public HRESULT get_borderStyle(out BSTR p) mut => VT.get_borderStyle(ref this, out p);
			public HRESULT get_borderColor(out BSTR p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT get_borderWidth(out BSTR p) mut => VT.get_borderWidth(ref this, out p);
			public HRESULT get_padding(out BSTR p) mut => VT.get_padding(ref this, out p);
			public HRESULT get_margin(out BSTR p) mut => VT.get_margin(ref this, out p);
			public HRESULT get_accelerator(out BSTR p) mut => VT.get_accelerator(ref this, out p);
			public HRESULT get_overflowX(out BSTR p) mut => VT.get_overflowX(ref this, out p);
			public HRESULT get_overflowY(out BSTR p) mut => VT.get_overflowY(ref this, out p);
			public HRESULT get_textTransform(out BSTR p) mut => VT.get_textTransform(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_styleFloat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_fontFamily;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_fontStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_fontVariant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_backgroundImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_backgroundPositionX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_backgroundPositionY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_backgroundRepeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderLeftColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderTopColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderRightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderBottomColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderTopStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderRightStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderBottomStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderLeftStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderTopWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderRightWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderBottomWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_borderLeftWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_paddingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_paddingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_paddingRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_paddingBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_textDecoration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_display;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_zIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_letterSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_lineHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_textIndent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_verticalAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_backgroundAttachment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_listStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_listStylePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_listStyleImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_clipTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_clipRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_clipBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_clipLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_overflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_pageBreakBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_pageBreakAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_cursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_tableLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderCollapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_unicodeBidi;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_imeMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_rubyAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_rubyPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_rubyOverhang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_textAutospace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_lineBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_wordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_textJustify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_textJustifyTrim;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_textKashida;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_blockDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_layoutGridChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out VARIANT p) get_layoutGridLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_layoutGridMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_layoutGridType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_borderWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_padding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_margin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_accelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_overflowX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_overflowY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle self, out BSTR p) get_textTransform;
			}
		}
		[CRepr]
		public struct IHTMLCurrentStyle2 : IDispatch
		{
			public const new Guid IID = .(0x3050f658, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_layoutFlow(out BSTR p) mut => VT.get_layoutFlow(ref this, out p);
			public HRESULT get_wordWrap(out BSTR p) mut => VT.get_wordWrap(ref this, out p);
			public HRESULT get_textUnderlinePosition(out BSTR p) mut => VT.get_textUnderlinePosition(ref this, out p);
			public HRESULT get_hasLayout(out int16 p) mut => VT.get_hasLayout(ref this, out p);
			public HRESULT get_scrollbarBaseColor(out VARIANT p) mut => VT.get_scrollbarBaseColor(ref this, out p);
			public HRESULT get_scrollbarFaceColor(out VARIANT p) mut => VT.get_scrollbarFaceColor(ref this, out p);
			public HRESULT get_scrollbar3dLightColor(out VARIANT p) mut => VT.get_scrollbar3dLightColor(ref this, out p);
			public HRESULT get_scrollbarShadowColor(out VARIANT p) mut => VT.get_scrollbarShadowColor(ref this, out p);
			public HRESULT get_scrollbarHighlightColor(out VARIANT p) mut => VT.get_scrollbarHighlightColor(ref this, out p);
			public HRESULT get_scrollbarDarkShadowColor(out VARIANT p) mut => VT.get_scrollbarDarkShadowColor(ref this, out p);
			public HRESULT get_scrollbarArrowColor(out VARIANT p) mut => VT.get_scrollbarArrowColor(ref this, out p);
			public HRESULT get_scrollbarTrackColor(out VARIANT p) mut => VT.get_scrollbarTrackColor(ref this, out p);
			public HRESULT get_writingMode(out BSTR p) mut => VT.get_writingMode(ref this, out p);
			public HRESULT get_zoom(out VARIANT p) mut => VT.get_zoom(ref this, out p);
			public HRESULT get_filter(out BSTR p) mut => VT.get_filter(ref this, out p);
			public HRESULT get_textAlignLast(out BSTR p) mut => VT.get_textAlignLast(ref this, out p);
			public HRESULT get_textKashidaSpace(out VARIANT p) mut => VT.get_textKashidaSpace(ref this, out p);
			public HRESULT get_isBlock(out int16 p) mut => VT.get_isBlock(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out BSTR p) get_layoutFlow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out BSTR p) get_wordWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out BSTR p) get_textUnderlinePosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out int16 p) get_hasLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarBaseColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarFaceColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbar3dLightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarHighlightColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarDarkShadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarArrowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_scrollbarTrackColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out BSTR p) get_writingMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_zoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out BSTR p) get_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out BSTR p) get_textAlignLast;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out VARIANT p) get_textKashidaSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle2 self, out int16 p) get_isBlock;
			}
		}
		[CRepr]
		public struct IHTMLCurrentStyle3 : IDispatch
		{
			public const new Guid IID = .(0x3050f818, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_textOverflow(out BSTR p) mut => VT.get_textOverflow(ref this, out p);
			public HRESULT get_minHeight(out VARIANT p) mut => VT.get_minHeight(ref this, out p);
			public HRESULT get_wordSpacing(out VARIANT p) mut => VT.get_wordSpacing(ref this, out p);
			public HRESULT get_whiteSpace(out BSTR p) mut => VT.get_whiteSpace(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle3 self, out BSTR p) get_textOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle3 self, out VARIANT p) get_minHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle3 self, out VARIANT p) get_wordSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle3 self, out BSTR p) get_whiteSpace;
			}
		}
		[CRepr]
		public struct IHTMLCurrentStyle4 : IDispatch
		{
			public const new Guid IID = .(0x3050f33b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_msInterpolationMode(out BSTR p) mut => VT.get_msInterpolationMode(ref this, out p);
			public HRESULT get_maxHeight(out VARIANT p) mut => VT.get_maxHeight(ref this, out p);
			public HRESULT get_minWidth(out VARIANT p) mut => VT.get_minWidth(ref this, out p);
			public HRESULT get_maxWidth(out VARIANT p) mut => VT.get_maxWidth(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle4 self, out BSTR p) get_msInterpolationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle4 self, out VARIANT p) get_maxHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle4 self, out VARIANT p) get_minWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle4 self, out VARIANT p) get_maxWidth;
			}
		}
		[CRepr]
		public struct IHTMLCurrentStyle5 : IDispatch
		{
			public const new Guid IID = .(0x30510481, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_captionSide(out BSTR p) mut => VT.get_captionSide(ref this, out p);
			public HRESULT get_outline(out BSTR p) mut => VT.get_outline(ref this, out p);
			public HRESULT get_outlineWidth(out VARIANT p) mut => VT.get_outlineWidth(ref this, out p);
			public HRESULT get_outlineStyle(out BSTR p) mut => VT.get_outlineStyle(ref this, out p);
			public HRESULT get_outlineColor(out VARIANT p) mut => VT.get_outlineColor(ref this, out p);
			public HRESULT get_boxSizing(out BSTR p) mut => VT.get_boxSizing(ref this, out p);
			public HRESULT get_borderSpacing(out BSTR p) mut => VT.get_borderSpacing(ref this, out p);
			public HRESULT get_orphans(out VARIANT p) mut => VT.get_orphans(ref this, out p);
			public HRESULT get_widows(out VARIANT p) mut => VT.get_widows(ref this, out p);
			public HRESULT get_pageBreakInside(out BSTR p) mut => VT.get_pageBreakInside(ref this, out p);
			public HRESULT get_emptyCells(out BSTR p) mut => VT.get_emptyCells(ref this, out p);
			public HRESULT get_msBlockProgression(out BSTR p) mut => VT.get_msBlockProgression(ref this, out p);
			public HRESULT get_quotes(out BSTR p) mut => VT.get_quotes(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_captionSide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_outline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out VARIANT p) get_outlineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_outlineStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out VARIANT p) get_outlineColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_boxSizing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_borderSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out VARIANT p) get_orphans;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out VARIANT p) get_widows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_pageBreakInside;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_emptyCells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_msBlockProgression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCurrentStyle5 self, out BSTR p) get_quotes;
			}
		}
		[CRepr]
		public struct DispHTMLCurrentStyle : IDispatch
		{
			public const new Guid IID = .(0x3050f557, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.setAttribute(ref this, strAttributeName, AttributeValue, lFlags);
			public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, lFlags, out AttributeValue);
			public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) mut => VT.removeAttribute(ref this, strAttributeName, lFlags, out pfSuccess);
			public HRESULT put_className(BSTR v) mut => VT.put_className(ref this, v);
			public HRESULT get_className(out BSTR p) mut => VT.get_className(ref this, out p);
			public HRESULT put_id(BSTR v) mut => VT.put_id(ref this, v);
			public HRESULT get_id(out BSTR p) mut => VT.get_id(ref this, out p);
			public HRESULT get_tagName(out BSTR p) mut => VT.get_tagName(ref this, out p);
			public HRESULT get_parentElement(out IHTMLElement* p) mut => VT.get_parentElement(ref this, out p);
			public HRESULT get_style(out IHTMLStyle* p) mut => VT.get_style(ref this, out p);
			public HRESULT put_onhelp(VARIANT v) mut => VT.put_onhelp(ref this, v);
			public HRESULT get_onhelp(out VARIANT p) mut => VT.get_onhelp(ref this, out p);
			public HRESULT put_onclick(VARIANT v) mut => VT.put_onclick(ref this, v);
			public HRESULT get_onclick(out VARIANT p) mut => VT.get_onclick(ref this, out p);
			public HRESULT put_ondblclick(VARIANT v) mut => VT.put_ondblclick(ref this, v);
			public HRESULT get_ondblclick(out VARIANT p) mut => VT.get_ondblclick(ref this, out p);
			public HRESULT put_onkeydown(VARIANT v) mut => VT.put_onkeydown(ref this, v);
			public HRESULT get_onkeydown(out VARIANT p) mut => VT.get_onkeydown(ref this, out p);
			public HRESULT put_onkeyup(VARIANT v) mut => VT.put_onkeyup(ref this, v);
			public HRESULT get_onkeyup(out VARIANT p) mut => VT.get_onkeyup(ref this, out p);
			public HRESULT put_onkeypress(VARIANT v) mut => VT.put_onkeypress(ref this, v);
			public HRESULT get_onkeypress(out VARIANT p) mut => VT.get_onkeypress(ref this, out p);
			public HRESULT put_onmouseout(VARIANT v) mut => VT.put_onmouseout(ref this, v);
			public HRESULT get_onmouseout(out VARIANT p) mut => VT.get_onmouseout(ref this, out p);
			public HRESULT put_onmouseover(VARIANT v) mut => VT.put_onmouseover(ref this, v);
			public HRESULT get_onmouseover(out VARIANT p) mut => VT.get_onmouseover(ref this, out p);
			public HRESULT put_onmousemove(VARIANT v) mut => VT.put_onmousemove(ref this, v);
			public HRESULT get_onmousemove(out VARIANT p) mut => VT.get_onmousemove(ref this, out p);
			public HRESULT put_onmousedown(VARIANT v) mut => VT.put_onmousedown(ref this, v);
			public HRESULT get_onmousedown(out VARIANT p) mut => VT.get_onmousedown(ref this, out p);
			public HRESULT put_onmouseup(VARIANT v) mut => VT.put_onmouseup(ref this, v);
			public HRESULT get_onmouseup(out VARIANT p) mut => VT.get_onmouseup(ref this, out p);
			public HRESULT get_document(out IDispatch* p) mut => VT.get_document(ref this, out p);
			public HRESULT put_title(BSTR v) mut => VT.put_title(ref this, v);
			public HRESULT get_title(out BSTR p) mut => VT.get_title(ref this, out p);
			public HRESULT put_language(BSTR v) mut => VT.put_language(ref this, v);
			public HRESULT get_language(out BSTR p) mut => VT.get_language(ref this, out p);
			public HRESULT put_onselectstart(VARIANT v) mut => VT.put_onselectstart(ref this, v);
			public HRESULT get_onselectstart(out VARIANT p) mut => VT.get_onselectstart(ref this, out p);
			public HRESULT scrollIntoView(VARIANT varargStart) mut => VT.scrollIntoView(ref this, varargStart);
			public HRESULT contains(ref IHTMLElement pChild, out int16 pfResult) mut => VT.contains(ref this, ref pChild, out pfResult);
			public HRESULT get_sourceIndex(out int32 p) mut => VT.get_sourceIndex(ref this, out p);
			public HRESULT get_recordNumber(out VARIANT p) mut => VT.get_recordNumber(ref this, out p);
			public HRESULT put_lang(BSTR v) mut => VT.put_lang(ref this, v);
			public HRESULT get_lang(out BSTR p) mut => VT.get_lang(ref this, out p);
			public HRESULT get_offsetLeft(out int32 p) mut => VT.get_offsetLeft(ref this, out p);
			public HRESULT get_offsetTop(out int32 p) mut => VT.get_offsetTop(ref this, out p);
			public HRESULT get_offsetWidth(out int32 p) mut => VT.get_offsetWidth(ref this, out p);
			public HRESULT get_offsetHeight(out int32 p) mut => VT.get_offsetHeight(ref this, out p);
			public HRESULT get_offsetParent(out IHTMLElement* p) mut => VT.get_offsetParent(ref this, out p);
			public HRESULT put_innerHTML(BSTR v) mut => VT.put_innerHTML(ref this, v);
			public HRESULT get_innerHTML(out BSTR p) mut => VT.get_innerHTML(ref this, out p);
			public HRESULT put_innerText(BSTR v) mut => VT.put_innerText(ref this, v);
			public HRESULT get_innerText(out BSTR p) mut => VT.get_innerText(ref this, out p);
			public HRESULT put_outerHTML(BSTR v) mut => VT.put_outerHTML(ref this, v);
			public HRESULT get_outerHTML(out BSTR p) mut => VT.get_outerHTML(ref this, out p);
			public HRESULT put_outerText(BSTR v) mut => VT.put_outerText(ref this, v);
			public HRESULT get_outerText(out BSTR p) mut => VT.get_outerText(ref this, out p);
			public HRESULT insertAdjacentHTML(BSTR @where, BSTR html) mut => VT.insertAdjacentHTML(ref this, @where, html);
			public HRESULT insertAdjacentText(BSTR @where, BSTR text) mut => VT.insertAdjacentText(ref this, @where, text);
			public HRESULT get_parentTextEdit(out IHTMLElement* p) mut => VT.get_parentTextEdit(ref this, out p);
			public HRESULT get_isTextEdit(out int16 p) mut => VT.get_isTextEdit(ref this, out p);
			public HRESULT click() mut => VT.click(ref this);
			public HRESULT get_filters(out IHTMLFiltersCollection* p) mut => VT.get_filters(ref this, out p);
			public HRESULT put_ondragstart(VARIANT v) mut => VT.put_ondragstart(ref this, v);
			public HRESULT get_ondragstart(out VARIANT p) mut => VT.get_ondragstart(ref this, out p);
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);
			public HRESULT put_onbeforeupdate(VARIANT v) mut => VT.put_onbeforeupdate(ref this, v);
			public HRESULT get_onbeforeupdate(out VARIANT p) mut => VT.get_onbeforeupdate(ref this, out p);
			public HRESULT put_onafterupdate(VARIANT v) mut => VT.put_onafterupdate(ref this, v);
			public HRESULT get_onafterupdate(out VARIANT p) mut => VT.get_onafterupdate(ref this, out p);
			public HRESULT put_onerrorupdate(VARIANT v) mut => VT.put_onerrorupdate(ref this, v);
			public HRESULT get_onerrorupdate(out VARIANT p) mut => VT.get_onerrorupdate(ref this, out p);
			public HRESULT put_onrowexit(VARIANT v) mut => VT.put_onrowexit(ref this, v);
			public HRESULT get_onrowexit(out VARIANT p) mut => VT.get_onrowexit(ref this, out p);
			public HRESULT put_onrowenter(VARIANT v) mut => VT.put_onrowenter(ref this, v);
			public HRESULT get_onrowenter(out VARIANT p) mut => VT.get_onrowenter(ref this, out p);
			public HRESULT put_ondatasetchanged(VARIANT v) mut => VT.put_ondatasetchanged(ref this, v);
			public HRESULT get_ondatasetchanged(out VARIANT p) mut => VT.get_ondatasetchanged(ref this, out p);
			public HRESULT put_ondataavailable(VARIANT v) mut => VT.put_ondataavailable(ref this, v);
			public HRESULT get_ondataavailable(out VARIANT p) mut => VT.get_ondataavailable(ref this, out p);
			public HRESULT put_ondatasetcomplete(VARIANT v) mut => VT.put_ondatasetcomplete(ref this, v);
			public HRESULT get_ondatasetcomplete(out VARIANT p) mut => VT.get_ondatasetcomplete(ref this, out p);
			public HRESULT put_onfilterchange(VARIANT v) mut => VT.put_onfilterchange(ref this, v);
			public HRESULT get_onfilterchange(out VARIANT p) mut => VT.get_onfilterchange(ref this, out p);
			public HRESULT get_children(out IDispatch* p) mut => VT.get_children(ref this, out p);
			public HRESULT get_all(out IDispatch* p) mut => VT.get_all(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) removeAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_className;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_className;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_id;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_id;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_tagName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IHTMLElement* p) get_parentElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IHTMLStyle* p) get_style;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onhelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onhelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_ondblclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_ondblclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onkeydown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onkeydown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onkeyup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onkeyup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onkeypress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onkeypress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onmouseout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onmouseout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onmouseover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onmouseover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onmousemove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onmousemove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onmousedown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onmousedown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onmouseup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onmouseup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IDispatch* p) get_document;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_language;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_language;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onselectstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onselectstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT varargStart) scrollIntoView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, ref IHTMLElement pChild, out int16 pfResult) contains;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out int32 p) get_sourceIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_recordNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_lang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_lang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out int32 p) get_offsetLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out int32 p) get_offsetTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out int32 p) get_offsetWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out int32 p) get_offsetHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IHTMLElement* p) get_offsetParent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_innerHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_innerHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_innerText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_innerText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_outerHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_outerHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR v) put_outerText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR p) get_outerText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR @where, BSTR html) insertAdjacentHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, BSTR @where, BSTR text) insertAdjacentText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IHTMLElement* p) get_parentTextEdit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out int16 p) get_isTextEdit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self) click;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IHTMLFiltersCollection* p) get_filters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_ondragstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_ondragstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out BSTR String) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onbeforeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onbeforeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onafterupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onafterupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onerrorupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onerrorupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onrowexit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onrowexit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onrowenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onrowenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_ondatasetchanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_ondatasetchanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_ondataavailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_ondataavailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_ondatasetcomplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_ondatasetcomplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, VARIANT v) put_onfilterchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out VARIANT p) get_onfilterchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IDispatch* p) get_children;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement self, out IDispatch* p) get_all;
			}
		}
		[CRepr]
		public struct IHTMLRect : IDispatch
		{
			public const new Guid IID = .(0x3050f4a3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_left(int32 v) mut => VT.put_left(ref this, v);
			public HRESULT get_left(out int32 p) mut => VT.get_left(ref this, out p);
			public HRESULT put_top(int32 v) mut => VT.put_top(ref this, v);
			public HRESULT get_top(out int32 p) mut => VT.get_top(ref this, out p);
			public HRESULT put_right(int32 v) mut => VT.put_right(ref this, v);
			public HRESULT get_right(out int32 p) mut => VT.get_right(ref this, out p);
			public HRESULT put_bottom(int32 v) mut => VT.put_bottom(ref this, v);
			public HRESULT get_bottom(out int32 p) mut => VT.get_bottom(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, int32 v) put_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, out int32 p) get_left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, int32 v) put_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, out int32 p) get_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, int32 v) put_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, out int32 p) get_right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, int32 v) put_bottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect self, out int32 p) get_bottom;
			}
		}
		[CRepr]
		public struct IHTMLRect2 : IDispatch
		{
			public const new Guid IID = .(0x3051076c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_width(out float p) mut => VT.get_width(ref this, out p);
			public HRESULT get_height(out float p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect2 self, out float p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRect2 self, out float p) get_height;
			}
		}
		[CRepr]
		public struct IHTMLRectCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f4a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(ref VARIANT pvarIndex, out VARIANT pvarResult) mut => VT.item(ref this, ref pvarIndex, out pvarResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRectCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRectCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLRectCollection self, ref VARIANT pvarIndex, out VARIANT pvarResult) item;
			}
		}
		[CRepr]
		public struct IHTMLElementCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f21f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);
			public HRESULT put_length(int32 v) mut => VT.put_length(ref this, v);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(VARIANT name, VARIANT index, out IDispatch* pdisp) mut => VT.item(ref this, name, index, out pdisp);
			public HRESULT tags(VARIANT tagName, out IDispatch* pdisp) mut => VT.tags(ref this, tagName, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection self, out BSTR String) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection self, int32 v) put_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection self, VARIANT name, VARIANT index, out IDispatch* pdisp) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection self, VARIANT tagName, out IDispatch* pdisp) tags;
			}
		}
		[CRepr]
		public struct IHTMLElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f434, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_scopeName(out BSTR p) mut => VT.get_scopeName(ref this, out p);
			public HRESULT setCapture(int16 containerCapture) mut => VT.setCapture(ref this, containerCapture);
			public HRESULT releaseCapture() mut => VT.releaseCapture(ref this);
			public HRESULT put_onlosecapture(VARIANT v) mut => VT.put_onlosecapture(ref this, v);
			public HRESULT get_onlosecapture(out VARIANT p) mut => VT.get_onlosecapture(ref this, out p);
			public HRESULT componentFromPoint(int32 x, int32 y, out BSTR component) mut => VT.componentFromPoint(ref this, x, y, out component);
			public HRESULT doScroll(VARIANT component) mut => VT.doScroll(ref this, component);
			public HRESULT put_onscroll(VARIANT v) mut => VT.put_onscroll(ref this, v);
			public HRESULT get_onscroll(out VARIANT p) mut => VT.get_onscroll(ref this, out p);
			public HRESULT put_ondrag(VARIANT v) mut => VT.put_ondrag(ref this, v);
			public HRESULT get_ondrag(out VARIANT p) mut => VT.get_ondrag(ref this, out p);
			public HRESULT put_ondragend(VARIANT v) mut => VT.put_ondragend(ref this, v);
			public HRESULT get_ondragend(out VARIANT p) mut => VT.get_ondragend(ref this, out p);
			public HRESULT put_ondragenter(VARIANT v) mut => VT.put_ondragenter(ref this, v);
			public HRESULT get_ondragenter(out VARIANT p) mut => VT.get_ondragenter(ref this, out p);
			public HRESULT put_ondragover(VARIANT v) mut => VT.put_ondragover(ref this, v);
			public HRESULT get_ondragover(out VARIANT p) mut => VT.get_ondragover(ref this, out p);
			public HRESULT put_ondragleave(VARIANT v) mut => VT.put_ondragleave(ref this, v);
			public HRESULT get_ondragleave(out VARIANT p) mut => VT.get_ondragleave(ref this, out p);
			public HRESULT put_ondrop(VARIANT v) mut => VT.put_ondrop(ref this, v);
			public HRESULT get_ondrop(out VARIANT p) mut => VT.get_ondrop(ref this, out p);
			public HRESULT put_onbeforecut(VARIANT v) mut => VT.put_onbeforecut(ref this, v);
			public HRESULT get_onbeforecut(out VARIANT p) mut => VT.get_onbeforecut(ref this, out p);
			public HRESULT put_oncut(VARIANT v) mut => VT.put_oncut(ref this, v);
			public HRESULT get_oncut(out VARIANT p) mut => VT.get_oncut(ref this, out p);
			public HRESULT put_onbeforecopy(VARIANT v) mut => VT.put_onbeforecopy(ref this, v);
			public HRESULT get_onbeforecopy(out VARIANT p) mut => VT.get_onbeforecopy(ref this, out p);
			public HRESULT put_oncopy(VARIANT v) mut => VT.put_oncopy(ref this, v);
			public HRESULT get_oncopy(out VARIANT p) mut => VT.get_oncopy(ref this, out p);
			public HRESULT put_onbeforepaste(VARIANT v) mut => VT.put_onbeforepaste(ref this, v);
			public HRESULT get_onbeforepaste(out VARIANT p) mut => VT.get_onbeforepaste(ref this, out p);
			public HRESULT put_onpaste(VARIANT v) mut => VT.put_onpaste(ref this, v);
			public HRESULT get_onpaste(out VARIANT p) mut => VT.get_onpaste(ref this, out p);
			public HRESULT get_currentStyle(out IHTMLCurrentStyle* p) mut => VT.get_currentStyle(ref this, out p);
			public HRESULT put_onpropertychange(VARIANT v) mut => VT.put_onpropertychange(ref this, v);
			public HRESULT get_onpropertychange(out VARIANT p) mut => VT.get_onpropertychange(ref this, out p);
			public HRESULT getClientRects(out IHTMLRectCollection* pRectCol) mut => VT.getClientRects(ref this, out pRectCol);
			public HRESULT getBoundingClientRect(out IHTMLRect* pRect) mut => VT.getBoundingClientRect(ref this, out pRect);
			public HRESULT setExpression(BSTR propname, BSTR expression, BSTR language) mut => VT.setExpression(ref this, propname, expression, language);
			public HRESULT getExpression(BSTR propname, out VARIANT expression) mut => VT.getExpression(ref this, propname, out expression);
			public HRESULT removeExpression(BSTR propname, out int16 pfSuccess) mut => VT.removeExpression(ref this, propname, out pfSuccess);
			public HRESULT put_tabIndex(int16 v) mut => VT.put_tabIndex(ref this, v);
			public HRESULT get_tabIndex(out int16 p) mut => VT.get_tabIndex(ref this, out p);
			public HRESULT focus() mut => VT.focus(ref this);
			public HRESULT put_accessKey(BSTR v) mut => VT.put_accessKey(ref this, v);
			public HRESULT get_accessKey(out BSTR p) mut => VT.get_accessKey(ref this, out p);
			public HRESULT put_onblur(VARIANT v) mut => VT.put_onblur(ref this, v);
			public HRESULT get_onblur(out VARIANT p) mut => VT.get_onblur(ref this, out p);
			public HRESULT put_onfocus(VARIANT v) mut => VT.put_onfocus(ref this, v);
			public HRESULT get_onfocus(out VARIANT p) mut => VT.get_onfocus(ref this, out p);
			public HRESULT put_onresize(VARIANT v) mut => VT.put_onresize(ref this, v);
			public HRESULT get_onresize(out VARIANT p) mut => VT.get_onresize(ref this, out p);
			public HRESULT blur() mut => VT.blur(ref this);
			public HRESULT addFilter(ref IUnknown pUnk) mut => VT.addFilter(ref this, ref pUnk);
			public HRESULT removeFilter(ref IUnknown pUnk) mut => VT.removeFilter(ref this, ref pUnk);
			public HRESULT get_clientHeight(out int32 p) mut => VT.get_clientHeight(ref this, out p);
			public HRESULT get_clientWidth(out int32 p) mut => VT.get_clientWidth(ref this, out p);
			public HRESULT get_clientTop(out int32 p) mut => VT.get_clientTop(ref this, out p);
			public HRESULT get_clientLeft(out int32 p) mut => VT.get_clientLeft(ref this, out p);
			public HRESULT attachEvent(BSTR event, ref IDispatch pDisp, out int16 pfResult) mut => VT.attachEvent(ref this, event, ref pDisp, out pfResult);
			public HRESULT detachEvent(BSTR event, ref IDispatch pDisp) mut => VT.detachEvent(ref this, event, ref pDisp);
			public HRESULT get_readyState(out VARIANT p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT put_onrowsdelete(VARIANT v) mut => VT.put_onrowsdelete(ref this, v);
			public HRESULT get_onrowsdelete(out VARIANT p) mut => VT.get_onrowsdelete(ref this, out p);
			public HRESULT put_onrowsinserted(VARIANT v) mut => VT.put_onrowsinserted(ref this, v);
			public HRESULT get_onrowsinserted(out VARIANT p) mut => VT.get_onrowsinserted(ref this, out p);
			public HRESULT put_oncellchange(VARIANT v) mut => VT.put_oncellchange(ref this, v);
			public HRESULT get_oncellchange(out VARIANT p) mut => VT.get_oncellchange(ref this, out p);
			public HRESULT put_dir(BSTR v) mut => VT.put_dir(ref this, v);
			public HRESULT get_dir(out BSTR p) mut => VT.get_dir(ref this, out p);
			public HRESULT createControlRange(out IDispatch* range) mut => VT.createControlRange(ref this, out range);
			public HRESULT get_scrollHeight(out int32 p) mut => VT.get_scrollHeight(ref this, out p);
			public HRESULT get_scrollWidth(out int32 p) mut => VT.get_scrollWidth(ref this, out p);
			public HRESULT put_scrollTop(int32 v) mut => VT.put_scrollTop(ref this, v);
			public HRESULT get_scrollTop(out int32 p) mut => VT.get_scrollTop(ref this, out p);
			public HRESULT put_scrollLeft(int32 v) mut => VT.put_scrollLeft(ref this, v);
			public HRESULT get_scrollLeft(out int32 p) mut => VT.get_scrollLeft(ref this, out p);
			public HRESULT clearAttributes() mut => VT.clearAttributes(ref this);
			public HRESULT mergeAttributes(ref IHTMLElement mergeThis) mut => VT.mergeAttributes(ref this, ref mergeThis);
			public HRESULT put_oncontextmenu(VARIANT v) mut => VT.put_oncontextmenu(ref this, v);
			public HRESULT get_oncontextmenu(out VARIANT p) mut => VT.get_oncontextmenu(ref this, out p);
			public HRESULT insertAdjacentElement(BSTR @where, ref IHTMLElement insertedElement, out IHTMLElement* inserted) mut => VT.insertAdjacentElement(ref this, @where, ref insertedElement, out inserted);
			public HRESULT applyElement(ref IHTMLElement apply, BSTR @where, out IHTMLElement* applied) mut => VT.applyElement(ref this, ref apply, @where, out applied);
			public HRESULT getAdjacentText(BSTR @where, out BSTR text) mut => VT.getAdjacentText(ref this, @where, out text);
			public HRESULT replaceAdjacentText(BSTR @where, BSTR newText, out BSTR oldText) mut => VT.replaceAdjacentText(ref this, @where, newText, out oldText);
			public HRESULT get_canHaveChildren(out int16 p) mut => VT.get_canHaveChildren(ref this, out p);
			public HRESULT addBehavior(BSTR bstrUrl, ref VARIANT pvarFactory, out int32 pCookie) mut => VT.addBehavior(ref this, bstrUrl, ref pvarFactory, out pCookie);
			public HRESULT removeBehavior(int32 cookie, out int16 pfResult) mut => VT.removeBehavior(ref this, cookie, out pfResult);
			public HRESULT get_runtimeStyle(out IHTMLStyle* p) mut => VT.get_runtimeStyle(ref this, out p);
			public HRESULT get_behaviorUrns(out IDispatch* p) mut => VT.get_behaviorUrns(ref this, out p);
			public HRESULT put_tagUrn(BSTR v) mut => VT.put_tagUrn(ref this, v);
			public HRESULT get_tagUrn(out BSTR p) mut => VT.get_tagUrn(ref this, out p);
			public HRESULT put_onbeforeeditfocus(VARIANT v) mut => VT.put_onbeforeeditfocus(ref this, v);
			public HRESULT get_onbeforeeditfocus(out VARIANT p) mut => VT.get_onbeforeeditfocus(ref this, out p);
			public HRESULT get_readyStateValue(out int32 p) mut => VT.get_readyStateValue(ref this, out p);
			public HRESULT getElementsByTagName(BSTR v, out IHTMLElementCollection* pelColl) mut => VT.getElementsByTagName(ref this, v, out pelColl);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out BSTR p) get_scopeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, int16 containerCapture) setCapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self) releaseCapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onlosecapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onlosecapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, int32 x, int32 y, out BSTR component) componentFromPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT component) doScroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_ondrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_ondrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_ondragend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_ondragend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_ondragenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_ondragenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_ondragover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_ondragover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_ondragleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_ondragleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_ondrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_ondrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onbeforecut;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onbeforecut;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_oncut;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_oncut;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onbeforecopy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onbeforecopy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_oncopy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_oncopy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onbeforepaste;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onbeforepaste;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onpaste;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onpaste;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out IHTMLCurrentStyle* p) get_currentStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onpropertychange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onpropertychange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out IHTMLRectCollection* pRectCol) getClientRects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out IHTMLRect* pRect) getBoundingClientRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR propname, BSTR expression, BSTR language) setExpression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR propname, out VARIANT expression) getExpression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR propname, out int16 pfSuccess) removeExpression;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, int16 v) put_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int16 p) get_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self) focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR v) put_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out BSTR p) get_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onresize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onresize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self) blur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, ref IUnknown pUnk) addFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, ref IUnknown pUnk) removeFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_clientHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_clientWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_clientTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_clientLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR event, ref IDispatch pDisp, out int16 pfResult) attachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR event, ref IDispatch pDisp) detachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onrowsdelete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onrowsdelete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onrowsinserted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onrowsinserted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_oncellchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_oncellchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR v) put_dir;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out BSTR p) get_dir;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out IDispatch* range) createControlRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_scrollHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_scrollWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, int32 v) put_scrollTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_scrollTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, int32 v) put_scrollLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_scrollLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self) clearAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, ref IHTMLElement mergeThis) mergeAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_oncontextmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_oncontextmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR @where, ref IHTMLElement insertedElement, out IHTMLElement* inserted) insertAdjacentElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, ref IHTMLElement apply, BSTR @where, out IHTMLElement* applied) applyElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR @where, out BSTR text) getAdjacentText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR @where, BSTR newText, out BSTR oldText) replaceAdjacentText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int16 p) get_canHaveChildren;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR bstrUrl, ref VARIANT pvarFactory, out int32 pCookie) addBehavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, int32 cookie, out int16 pfResult) removeBehavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out IHTMLStyle* p) get_runtimeStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out IDispatch* p) get_behaviorUrns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR v) put_tagUrn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out BSTR p) get_tagUrn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, VARIANT v) put_onbeforeeditfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out VARIANT p) get_onbeforeeditfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, out int32 p) get_readyStateValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement2 self, BSTR v, out IHTMLElementCollection* pelColl) getElementsByTagName;
			}
		}
		[CRepr]
		public struct IHTMLAttributeCollection3 : IDispatch
		{
			public const new Guid IID = .(0x30510469, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getNamedItem(BSTR bstrName, out IHTMLDOMAttribute* ppNodeOut) mut => VT.getNamedItem(ref this, bstrName, out ppNodeOut);
			public HRESULT setNamedItem(ref IHTMLDOMAttribute pNodeIn, out IHTMLDOMAttribute* ppNodeOut) mut => VT.setNamedItem(ref this, ref pNodeIn, out ppNodeOut);
			public HRESULT removeNamedItem(BSTR bstrName, out IHTMLDOMAttribute* ppNodeOut) mut => VT.removeNamedItem(ref this, bstrName, out ppNodeOut);
			public HRESULT item(int32 index, out IHTMLDOMAttribute* ppNodeOut) mut => VT.item(ref this, index, out ppNodeOut);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection3 self, BSTR bstrName, out IHTMLDOMAttribute* ppNodeOut) getNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection3 self, ref IHTMLDOMAttribute pNodeIn, out IHTMLDOMAttribute* ppNodeOut) setNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection3 self, BSTR bstrName, out IHTMLDOMAttribute* ppNodeOut) removeNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection3 self, int32 index, out IHTMLDOMAttribute* ppNodeOut) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection3 self, out int32 p) get_length;
			}
		}
		[CRepr]
		public struct IDOMDocumentType : IDispatch
		{
			public const new Guid IID = .(0x30510738, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT get_entities(out IDispatch* p) mut => VT.get_entities(ref this, out p);
			public HRESULT get_notations(out IDispatch* p) mut => VT.get_notations(ref this, out p);
			public HRESULT get_publicId(out VARIANT p) mut => VT.get_publicId(ref this, out p);
			public HRESULT get_systemId(out VARIANT p) mut => VT.get_systemId(ref this, out p);
			public HRESULT get_internalSubset(out VARIANT p) mut => VT.get_internalSubset(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDocumentType self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDocumentType self, out IDispatch* p) get_entities;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDocumentType self, out IDispatch* p) get_notations;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDocumentType self, out VARIANT p) get_publicId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDocumentType self, out VARIANT p) get_systemId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDocumentType self, out VARIANT p) get_internalSubset;
			}
		}
		[CRepr]
		public struct IHTMLDocument7 : IDispatch
		{
			public const new Guid IID = .(0x305104b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_defaultView(out IHTMLWindow2* p) mut => VT.get_defaultView(ref this, out p);
			public HRESULT createCDATASection(BSTR text, out IHTMLDOMNode* newCDATASectionNode) mut => VT.createCDATASection(ref this, text, out newCDATASectionNode);
			public HRESULT getSelection(out IHTMLSelection* ppIHTMLSelection) mut => VT.getSelection(ref this, out ppIHTMLSelection);
			public HRESULT getElementsByTagNameNS(ref VARIANT pvarNS, BSTR bstrLocalName, out IHTMLElementCollection* pelColl) mut => VT.getElementsByTagNameNS(ref this, ref pvarNS, bstrLocalName, out pelColl);
			public HRESULT createElementNS(ref VARIANT pvarNS, BSTR bstrTag, out IHTMLElement* newElem) mut => VT.createElementNS(ref this, ref pvarNS, bstrTag, out newElem);
			public HRESULT createAttributeNS(ref VARIANT pvarNS, BSTR bstrAttrName, out IHTMLDOMAttribute* ppAttribute) mut => VT.createAttributeNS(ref this, ref pvarNS, bstrAttrName, out ppAttribute);
			public HRESULT put_onmsthumbnailclick(VARIANT v) mut => VT.put_onmsthumbnailclick(ref this, v);
			public HRESULT get_onmsthumbnailclick(out VARIANT p) mut => VT.get_onmsthumbnailclick(ref this, out p);
			public HRESULT get_characterSet(out BSTR p) mut => VT.get_characterSet(ref this, out p);
			public HRESULT createElement(BSTR bstrTag, out IHTMLElement* newElem) mut => VT.createElement(ref this, bstrTag, out newElem);
			public HRESULT createAttribute(BSTR bstrAttrName, out IHTMLDOMAttribute* ppAttribute) mut => VT.createAttribute(ref this, bstrAttrName, out ppAttribute);
			public HRESULT getElementsByClassName(BSTR v, out IHTMLElementCollection* pel) mut => VT.getElementsByClassName(ref this, v, out pel);
			public HRESULT createProcessingInstruction(BSTR bstrTarget, BSTR bstrData, out IDOMProcessingInstruction* newProcessingInstruction) mut => VT.createProcessingInstruction(ref this, bstrTarget, bstrData, out newProcessingInstruction);
			public HRESULT adoptNode(ref IHTMLDOMNode pNodeSource, out IHTMLDOMNode3* ppNodeDest) mut => VT.adoptNode(ref this, ref pNodeSource, out ppNodeDest);
			public HRESULT put_onmssitemodejumplistitemremoved(VARIANT v) mut => VT.put_onmssitemodejumplistitemremoved(ref this, v);
			public HRESULT get_onmssitemodejumplistitemremoved(out VARIANT p) mut => VT.get_onmssitemodejumplistitemremoved(ref this, out p);
			public HRESULT get_all(out IHTMLElementCollection* p) mut => VT.get_all(ref this, out p);
			public HRESULT get_inputEncoding(out BSTR p) mut => VT.get_inputEncoding(ref this, out p);
			public HRESULT get_xmlEncoding(out BSTR p) mut => VT.get_xmlEncoding(ref this, out p);
			public HRESULT put_xmlStandalone(int16 v) mut => VT.put_xmlStandalone(ref this, v);
			public HRESULT get_xmlStandalone(out int16 p) mut => VT.get_xmlStandalone(ref this, out p);
			public HRESULT put_xmlVersion(BSTR v) mut => VT.put_xmlVersion(ref this, v);
			public HRESULT get_xmlVersion(out BSTR p) mut => VT.get_xmlVersion(ref this, out p);
			public HRESULT hasAttributes(out int16 pfHasAttributes) mut => VT.hasAttributes(ref this, out pfHasAttributes);
			public HRESULT put_onabort(VARIANT v) mut => VT.put_onabort(ref this, v);
			public HRESULT get_onabort(out VARIANT p) mut => VT.get_onabort(ref this, out p);
			public HRESULT put_onblur(VARIANT v) mut => VT.put_onblur(ref this, v);
			public HRESULT get_onblur(out VARIANT p) mut => VT.get_onblur(ref this, out p);
			public HRESULT put_oncanplay(VARIANT v) mut => VT.put_oncanplay(ref this, v);
			public HRESULT get_oncanplay(out VARIANT p) mut => VT.get_oncanplay(ref this, out p);
			public HRESULT put_oncanplaythrough(VARIANT v) mut => VT.put_oncanplaythrough(ref this, v);
			public HRESULT get_oncanplaythrough(out VARIANT p) mut => VT.get_oncanplaythrough(ref this, out p);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_ondrag(VARIANT v) mut => VT.put_ondrag(ref this, v);
			public HRESULT get_ondrag(out VARIANT p) mut => VT.get_ondrag(ref this, out p);
			public HRESULT put_ondragend(VARIANT v) mut => VT.put_ondragend(ref this, v);
			public HRESULT get_ondragend(out VARIANT p) mut => VT.get_ondragend(ref this, out p);
			public HRESULT put_ondragenter(VARIANT v) mut => VT.put_ondragenter(ref this, v);
			public HRESULT get_ondragenter(out VARIANT p) mut => VT.get_ondragenter(ref this, out p);
			public HRESULT put_ondragleave(VARIANT v) mut => VT.put_ondragleave(ref this, v);
			public HRESULT get_ondragleave(out VARIANT p) mut => VT.get_ondragleave(ref this, out p);
			public HRESULT put_ondragover(VARIANT v) mut => VT.put_ondragover(ref this, v);
			public HRESULT get_ondragover(out VARIANT p) mut => VT.get_ondragover(ref this, out p);
			public HRESULT put_ondrop(VARIANT v) mut => VT.put_ondrop(ref this, v);
			public HRESULT get_ondrop(out VARIANT p) mut => VT.get_ondrop(ref this, out p);
			public HRESULT put_ondurationchange(VARIANT v) mut => VT.put_ondurationchange(ref this, v);
			public HRESULT get_ondurationchange(out VARIANT p) mut => VT.get_ondurationchange(ref this, out p);
			public HRESULT put_onemptied(VARIANT v) mut => VT.put_onemptied(ref this, v);
			public HRESULT get_onemptied(out VARIANT p) mut => VT.get_onemptied(ref this, out p);
			public HRESULT put_onended(VARIANT v) mut => VT.put_onended(ref this, v);
			public HRESULT get_onended(out VARIANT p) mut => VT.get_onended(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_onfocus(VARIANT v) mut => VT.put_onfocus(ref this, v);
			public HRESULT get_onfocus(out VARIANT p) mut => VT.get_onfocus(ref this, out p);
			public HRESULT put_oninput(VARIANT v) mut => VT.put_oninput(ref this, v);
			public HRESULT get_oninput(out VARIANT p) mut => VT.get_oninput(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onloadeddata(VARIANT v) mut => VT.put_onloadeddata(ref this, v);
			public HRESULT get_onloadeddata(out VARIANT p) mut => VT.get_onloadeddata(ref this, out p);
			public HRESULT put_onloadedmetadata(VARIANT v) mut => VT.put_onloadedmetadata(ref this, v);
			public HRESULT get_onloadedmetadata(out VARIANT p) mut => VT.get_onloadedmetadata(ref this, out p);
			public HRESULT put_onloadstart(VARIANT v) mut => VT.put_onloadstart(ref this, v);
			public HRESULT get_onloadstart(out VARIANT p) mut => VT.get_onloadstart(ref this, out p);
			public HRESULT put_onpause(VARIANT v) mut => VT.put_onpause(ref this, v);
			public HRESULT get_onpause(out VARIANT p) mut => VT.get_onpause(ref this, out p);
			public HRESULT put_onplay(VARIANT v) mut => VT.put_onplay(ref this, v);
			public HRESULT get_onplay(out VARIANT p) mut => VT.get_onplay(ref this, out p);
			public HRESULT put_onplaying(VARIANT v) mut => VT.put_onplaying(ref this, v);
			public HRESULT get_onplaying(out VARIANT p) mut => VT.get_onplaying(ref this, out p);
			public HRESULT put_onprogress(VARIANT v) mut => VT.put_onprogress(ref this, v);
			public HRESULT get_onprogress(out VARIANT p) mut => VT.get_onprogress(ref this, out p);
			public HRESULT put_onratechange(VARIANT v) mut => VT.put_onratechange(ref this, v);
			public HRESULT get_onratechange(out VARIANT p) mut => VT.get_onratechange(ref this, out p);
			public HRESULT put_onreset(VARIANT v) mut => VT.put_onreset(ref this, v);
			public HRESULT get_onreset(out VARIANT p) mut => VT.get_onreset(ref this, out p);
			public HRESULT put_onscroll(VARIANT v) mut => VT.put_onscroll(ref this, v);
			public HRESULT get_onscroll(out VARIANT p) mut => VT.get_onscroll(ref this, out p);
			public HRESULT put_onseeked(VARIANT v) mut => VT.put_onseeked(ref this, v);
			public HRESULT get_onseeked(out VARIANT p) mut => VT.get_onseeked(ref this, out p);
			public HRESULT put_onseeking(VARIANT v) mut => VT.put_onseeking(ref this, v);
			public HRESULT get_onseeking(out VARIANT p) mut => VT.get_onseeking(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_onstalled(VARIANT v) mut => VT.put_onstalled(ref this, v);
			public HRESULT get_onstalled(out VARIANT p) mut => VT.get_onstalled(ref this, out p);
			public HRESULT put_onsubmit(VARIANT v) mut => VT.put_onsubmit(ref this, v);
			public HRESULT get_onsubmit(out VARIANT p) mut => VT.get_onsubmit(ref this, out p);
			public HRESULT put_onsuspend(VARIANT v) mut => VT.put_onsuspend(ref this, v);
			public HRESULT get_onsuspend(out VARIANT p) mut => VT.get_onsuspend(ref this, out p);
			public HRESULT put_ontimeupdate(VARIANT v) mut => VT.put_ontimeupdate(ref this, v);
			public HRESULT get_ontimeupdate(out VARIANT p) mut => VT.get_ontimeupdate(ref this, out p);
			public HRESULT put_onvolumechange(VARIANT v) mut => VT.put_onvolumechange(ref this, v);
			public HRESULT get_onvolumechange(out VARIANT p) mut => VT.get_onvolumechange(ref this, out p);
			public HRESULT put_onwaiting(VARIANT v) mut => VT.put_onwaiting(ref this, v);
			public HRESULT get_onwaiting(out VARIANT p) mut => VT.get_onwaiting(ref this, out p);
			public HRESULT normalize() mut => VT.normalize(ref this);
			public HRESULT importNode(ref IHTMLDOMNode pNodeSource, int16 fDeep, out IHTMLDOMNode3* ppNodeDest) mut => VT.importNode(ref this, ref pNodeSource, fDeep, out ppNodeDest);
			public HRESULT get_parentWindow(out IHTMLWindow2* p) mut => VT.get_parentWindow(ref this, out p);
			public HRESULT putref_body(ref IHTMLElement v) mut => VT.putref_body(ref this, ref v);
			public HRESULT get_body(out IHTMLElement* p) mut => VT.get_body(ref this, out p);
			public HRESULT get_head(out IHTMLElement* p) mut => VT.get_head(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out IHTMLWindow2* p) get_defaultView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, BSTR text, out IHTMLDOMNode* newCDATASectionNode) createCDATASection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out IHTMLSelection* ppIHTMLSelection) getSelection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, ref VARIANT pvarNS, BSTR bstrLocalName, out IHTMLElementCollection* pelColl) getElementsByTagNameNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, ref VARIANT pvarNS, BSTR bstrTag, out IHTMLElement* newElem) createElementNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, ref VARIANT pvarNS, BSTR bstrAttrName, out IHTMLDOMAttribute* ppAttribute) createAttributeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onmsthumbnailclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onmsthumbnailclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out BSTR p) get_characterSet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, BSTR bstrTag, out IHTMLElement* newElem) createElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, BSTR bstrAttrName, out IHTMLDOMAttribute* ppAttribute) createAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, BSTR v, out IHTMLElementCollection* pel) getElementsByClassName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, BSTR bstrTarget, BSTR bstrData, out IDOMProcessingInstruction* newProcessingInstruction) createProcessingInstruction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, ref IHTMLDOMNode pNodeSource, out IHTMLDOMNode3* ppNodeDest) adoptNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onmssitemodejumplistitemremoved;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onmssitemodejumplistitemremoved;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out IHTMLElementCollection* p) get_all;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out BSTR p) get_inputEncoding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out BSTR p) get_xmlEncoding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, int16 v) put_xmlStandalone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out int16 p) get_xmlStandalone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, BSTR v) put_xmlVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out BSTR p) get_xmlVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out int16 pfHasAttributes) hasAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_oncanplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_oncanplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_oncanplaythrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_oncanplaythrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondragend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondragend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondragenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondragenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondragleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondragleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondragover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondragover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ondurationchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ondurationchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onemptied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onemptied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_oninput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_oninput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onloadeddata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onloadeddata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onloadedmetadata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onloadedmetadata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onloadstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onloadstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onpause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onpause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onplaying;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onplaying;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onratechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onratechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onseeked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onseeked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onseeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onseeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onsuspend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onsuspend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_ontimeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_ontimeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onvolumechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onvolumechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, VARIANT v) put_onwaiting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out VARIANT p) get_onwaiting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self) normalize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, ref IHTMLDOMNode pNodeSource, int16 fDeep, out IHTMLDOMNode3* ppNodeDest) importNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out IHTMLWindow2* p) get_parentWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, ref IHTMLElement v) putref_body;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out IHTMLElement* p) get_body;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument7 self, out IHTMLElement* p) get_head;
			}
		}
		[CRepr]
		public struct IHTMLDOMNode : IDispatch
		{
			public const new Guid IID = .(0x3050f5da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_nodeType(out int32 p) mut => VT.get_nodeType(ref this, out p);
			public HRESULT get_parentNode(out IHTMLDOMNode* p) mut => VT.get_parentNode(ref this, out p);
			public HRESULT hasChildNodes(out int16 fChildren) mut => VT.hasChildNodes(ref this, out fChildren);
			public HRESULT get_childNodes(out IDispatch* p) mut => VT.get_childNodes(ref this, out p);
			public HRESULT get_attributes(out IDispatch* p) mut => VT.get_attributes(ref this, out p);
			public HRESULT insertBefore(ref IHTMLDOMNode newChild, VARIANT refChild, out IHTMLDOMNode* node) mut => VT.insertBefore(ref this, ref newChild, refChild, out node);
			public HRESULT removeChild(ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) mut => VT.removeChild(ref this, ref oldChild, out node);
			public HRESULT replaceChild(ref IHTMLDOMNode newChild, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) mut => VT.replaceChild(ref this, ref newChild, ref oldChild, out node);
			public HRESULT cloneNode(int16 fDeep, out IHTMLDOMNode* clonedNode) mut => VT.cloneNode(ref this, fDeep, out clonedNode);
			public HRESULT removeNode(int16 fDeep, out IHTMLDOMNode* removed) mut => VT.removeNode(ref this, fDeep, out removed);
			public HRESULT swapNode(ref IHTMLDOMNode otherNode, out IHTMLDOMNode* swappedNode) mut => VT.swapNode(ref this, ref otherNode, out swappedNode);
			public HRESULT replaceNode(ref IHTMLDOMNode replacement, out IHTMLDOMNode* replaced) mut => VT.replaceNode(ref this, ref replacement, out replaced);
			public HRESULT appendChild(ref IHTMLDOMNode newChild, out IHTMLDOMNode* node) mut => VT.appendChild(ref this, ref newChild, out node);
			public HRESULT get_nodeName(out BSTR p) mut => VT.get_nodeName(ref this, out p);
			public HRESULT put_nodeValue(VARIANT v) mut => VT.put_nodeValue(ref this, v);
			public HRESULT get_nodeValue(out VARIANT p) mut => VT.get_nodeValue(ref this, out p);
			public HRESULT get_firstChild(out IHTMLDOMNode* p) mut => VT.get_firstChild(ref this, out p);
			public HRESULT get_lastChild(out IHTMLDOMNode* p) mut => VT.get_lastChild(ref this, out p);
			public HRESULT get_previousSibling(out IHTMLDOMNode* p) mut => VT.get_previousSibling(ref this, out p);
			public HRESULT get_nextSibling(out IHTMLDOMNode* p) mut => VT.get_nextSibling(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out int32 p) get_nodeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IHTMLDOMNode* p) get_parentNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out int16 fChildren) hasChildNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IDispatch* p) get_childNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IDispatch* p) get_attributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, ref IHTMLDOMNode newChild, VARIANT refChild, out IHTMLDOMNode* node) insertBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) removeChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, ref IHTMLDOMNode newChild, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) replaceChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, int16 fDeep, out IHTMLDOMNode* clonedNode) cloneNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, int16 fDeep, out IHTMLDOMNode* removed) removeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, ref IHTMLDOMNode otherNode, out IHTMLDOMNode* swappedNode) swapNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, ref IHTMLDOMNode replacement, out IHTMLDOMNode* replaced) replaceNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, ref IHTMLDOMNode newChild, out IHTMLDOMNode* node) appendChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out BSTR p) get_nodeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, VARIANT v) put_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out VARIANT p) get_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IHTMLDOMNode* p) get_firstChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IHTMLDOMNode* p) get_lastChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IHTMLDOMNode* p) get_previousSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode self, out IHTMLDOMNode* p) get_nextSibling;
			}
		}
		[CRepr]
		public struct IHTMLDOMNode2 : IDispatch
		{
			public const new Guid IID = .(0x3050f80b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_ownerDocument(out IDispatch* p) mut => VT.get_ownerDocument(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode2 self, out IDispatch* p) get_ownerDocument;
			}
		}
		[CRepr]
		public struct IHTMLDOMNode3 : IDispatch
		{
			public const new Guid IID = .(0x305106e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_prefix(VARIANT v) mut => VT.put_prefix(ref this, v);
			public HRESULT get_prefix(out VARIANT p) mut => VT.get_prefix(ref this, out p);
			public HRESULT get_localName(out VARIANT p) mut => VT.get_localName(ref this, out p);
			public HRESULT get_namespaceURI(out VARIANT p) mut => VT.get_namespaceURI(ref this, out p);
			public HRESULT put_textContent(VARIANT v) mut => VT.put_textContent(ref this, v);
			public HRESULT get_textContent(out VARIANT p) mut => VT.get_textContent(ref this, out p);
			public HRESULT isEqualNode(ref IHTMLDOMNode3 otherNode, out int16 isEqual) mut => VT.isEqualNode(ref this, ref otherNode, out isEqual);
			public HRESULT lookupNamespaceURI(ref VARIANT pvarPrefix, out VARIANT pvarNamespaceURI) mut => VT.lookupNamespaceURI(ref this, ref pvarPrefix, out pvarNamespaceURI);
			public HRESULT lookupPrefix(ref VARIANT pvarNamespaceURI, out VARIANT pvarPrefix) mut => VT.lookupPrefix(ref this, ref pvarNamespaceURI, out pvarPrefix);
			public HRESULT isDefaultNamespace(ref VARIANT pvarNamespace, out int16 pfDefaultNamespace) mut => VT.isDefaultNamespace(ref this, ref pvarNamespace, out pfDefaultNamespace);
			public HRESULT appendChild(ref IHTMLDOMNode newChild, out IHTMLDOMNode* node) mut => VT.appendChild(ref this, ref newChild, out node);
			public HRESULT insertBefore(ref IHTMLDOMNode newChild, VARIANT refChild, out IHTMLDOMNode* node) mut => VT.insertBefore(ref this, ref newChild, refChild, out node);
			public HRESULT removeChild(ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) mut => VT.removeChild(ref this, ref oldChild, out node);
			public HRESULT replaceChild(ref IHTMLDOMNode newChild, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) mut => VT.replaceChild(ref this, ref newChild, ref oldChild, out node);
			public HRESULT isSameNode(ref IHTMLDOMNode3 otherNode, out int16 isSame) mut => VT.isSameNode(ref this, ref otherNode, out isSame);
			public HRESULT compareDocumentPosition(ref IHTMLDOMNode otherNode, out uint16 flags) mut => VT.compareDocumentPosition(ref this, ref otherNode, out flags);
			public HRESULT isSupported(BSTR feature, VARIANT version, out int16 pfisSupported) mut => VT.isSupported(ref this, feature, version, out pfisSupported);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, VARIANT v) put_prefix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, out VARIANT p) get_prefix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, out VARIANT p) get_localName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, out VARIANT p) get_namespaceURI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, VARIANT v) put_textContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, out VARIANT p) get_textContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode3 otherNode, out int16 isEqual) isEqualNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref VARIANT pvarPrefix, out VARIANT pvarNamespaceURI) lookupNamespaceURI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref VARIANT pvarNamespaceURI, out VARIANT pvarPrefix) lookupPrefix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref VARIANT pvarNamespace, out int16 pfDefaultNamespace) isDefaultNamespace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode newChild, out IHTMLDOMNode* node) appendChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode newChild, VARIANT refChild, out IHTMLDOMNode* node) insertBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) removeChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode newChild, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) replaceChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode3 otherNode, out int16 isSame) isSameNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, ref IHTMLDOMNode otherNode, out uint16 flags) compareDocumentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMNode3 self, BSTR feature, VARIANT version, out int16 pfisSupported) isSupported;
			}
		}
		[CRepr]
		public struct IHTMLDOMAttribute : IDispatch
		{
			public const new Guid IID = .(0x3050f4b0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_nodeName(out BSTR p) mut => VT.get_nodeName(ref this, out p);
			public HRESULT put_nodeValue(VARIANT v) mut => VT.put_nodeValue(ref this, v);
			public HRESULT get_nodeValue(out VARIANT p) mut => VT.get_nodeValue(ref this, out p);
			public HRESULT get_specified(out int16 p) mut => VT.get_specified(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute self, out BSTR p) get_nodeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute self, VARIANT v) put_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute self, out VARIANT p) get_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute self, out int16 p) get_specified;
			}
		}
		[CRepr]
		public struct IHTMLDOMAttribute2 : IDispatch
		{
			public const new Guid IID = .(0x3050f810, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT get_expando(out int16 p) mut => VT.get_expando(ref this, out p);
			public HRESULT get_nodeType(out int32 p) mut => VT.get_nodeType(ref this, out p);
			public HRESULT get_parentNode(out IHTMLDOMNode* p) mut => VT.get_parentNode(ref this, out p);
			public HRESULT get_childNodes(out IDispatch* p) mut => VT.get_childNodes(ref this, out p);
			public HRESULT get_firstChild(out IHTMLDOMNode* p) mut => VT.get_firstChild(ref this, out p);
			public HRESULT get_lastChild(out IHTMLDOMNode* p) mut => VT.get_lastChild(ref this, out p);
			public HRESULT get_previousSibling(out IHTMLDOMNode* p) mut => VT.get_previousSibling(ref this, out p);
			public HRESULT get_nextSibling(out IHTMLDOMNode* p) mut => VT.get_nextSibling(ref this, out p);
			public HRESULT get_attributes(out IDispatch* p) mut => VT.get_attributes(ref this, out p);
			public HRESULT get_ownerDocument(out IDispatch* p) mut => VT.get_ownerDocument(ref this, out p);
			public HRESULT insertBefore(ref IHTMLDOMNode newChild, VARIANT refChild, out IHTMLDOMNode* node) mut => VT.insertBefore(ref this, ref newChild, refChild, out node);
			public HRESULT replaceChild(ref IHTMLDOMNode newChild, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) mut => VT.replaceChild(ref this, ref newChild, ref oldChild, out node);
			public HRESULT removeChild(ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) mut => VT.removeChild(ref this, ref oldChild, out node);
			public HRESULT appendChild(ref IHTMLDOMNode newChild, out IHTMLDOMNode* node) mut => VT.appendChild(ref this, ref newChild, out node);
			public HRESULT hasChildNodes(out int16 fChildren) mut => VT.hasChildNodes(ref this, out fChildren);
			public HRESULT cloneNode(int16 fDeep, out IHTMLDOMAttribute* clonedNode) mut => VT.cloneNode(ref this, fDeep, out clonedNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out int16 p) get_expando;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out int32 p) get_nodeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IHTMLDOMNode* p) get_parentNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IDispatch* p) get_childNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IHTMLDOMNode* p) get_firstChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IHTMLDOMNode* p) get_lastChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IHTMLDOMNode* p) get_previousSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IHTMLDOMNode* p) get_nextSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IDispatch* p) get_attributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out IDispatch* p) get_ownerDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, ref IHTMLDOMNode newChild, VARIANT refChild, out IHTMLDOMNode* node) insertBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, ref IHTMLDOMNode newChild, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) replaceChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, ref IHTMLDOMNode oldChild, out IHTMLDOMNode* node) removeChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, ref IHTMLDOMNode newChild, out IHTMLDOMNode* node) appendChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, out int16 fChildren) hasChildNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute2 self, int16 fDeep, out IHTMLDOMAttribute* clonedNode) cloneNode;
			}
		}
		[CRepr]
		public struct IHTMLDOMAttribute3 : IDispatch
		{
			public const new Guid IID = .(0x30510468, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_nodeValue(VARIANT v) mut => VT.put_nodeValue(ref this, v);
			public HRESULT get_nodeValue(out VARIANT p) mut => VT.get_nodeValue(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT get_specified(out int16 p) mut => VT.get_specified(ref this, out p);
			public HRESULT get_ownerElement(out IHTMLElement2* p) mut => VT.get_ownerElement(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute3 self, VARIANT v) put_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute3 self, out VARIANT p) get_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute3 self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute3 self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute3 self, out int16 p) get_specified;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute3 self, out IHTMLElement2* p) get_ownerElement;
			}
		}
		[CRepr]
		public struct IHTMLDOMAttribute4 : IDispatch
		{
			public const new Guid IID = .(0x305106f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_nodeValue(VARIANT v) mut => VT.put_nodeValue(ref this, v);
			public HRESULT get_nodeValue(out VARIANT p) mut => VT.get_nodeValue(ref this, out p);
			public HRESULT get_nodeName(out BSTR p) mut => VT.get_nodeName(ref this, out p);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT get_firstChild(out IHTMLDOMNode* p) mut => VT.get_firstChild(ref this, out p);
			public HRESULT get_lastChild(out IHTMLDOMNode* p) mut => VT.get_lastChild(ref this, out p);
			public HRESULT get_childNodes(out IDispatch* p) mut => VT.get_childNodes(ref this, out p);
			public HRESULT hasAttributes(out int16 pfHasAttributes) mut => VT.hasAttributes(ref this, out pfHasAttributes);
			public HRESULT hasChildNodes(out int16 fChildren) mut => VT.hasChildNodes(ref this, out fChildren);
			public HRESULT normalize() mut => VT.normalize(ref this);
			public HRESULT get_specified(out int16 p) mut => VT.get_specified(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, VARIANT v) put_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out VARIANT p) get_nodeValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out BSTR p) get_nodeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out IHTMLDOMNode* p) get_firstChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out IHTMLDOMNode* p) get_lastChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out IDispatch* p) get_childNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out int16 pfHasAttributes) hasAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out int16 fChildren) hasChildNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self) normalize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMAttribute4 self, out int16 p) get_specified;
			}
		}
		[CRepr]
		public struct IHTMLDOMTextNode : IDispatch
		{
			public const new Guid IID = .(0x3050f4b1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_data(BSTR v) mut => VT.put_data(ref this, v);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT splitText(int32 offset, out IHTMLDOMNode* pRetNode) mut => VT.splitText(ref this, offset, out pRetNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode self, BSTR v) put_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode self, out BSTR String) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode self, int32 offset, out IHTMLDOMNode* pRetNode) splitText;
			}
		}
		[CRepr]
		public struct IHTMLDOMTextNode2 : IDispatch
		{
			public const new Guid IID = .(0x3050f809, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT substringData(int32 offset, int32 Count, out BSTR pbstrsubString) mut => VT.substringData(ref this, offset, Count, out pbstrsubString);
			public HRESULT appendData(BSTR bstrstring) mut => VT.appendData(ref this, bstrstring);
			public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.insertData(ref this, offset, bstrstring);
			public HRESULT deleteData(int32 offset, int32 Count) mut => VT.deleteData(ref this, offset, Count);
			public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.replaceData(ref this, offset, Count, bstrstring);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode2 self, int32 offset, int32 Count, out BSTR pbstrsubString) substringData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode2 self, BSTR bstrstring) appendData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode2 self, int32 offset, BSTR bstrstring) insertData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode2 self, int32 offset, int32 Count) deleteData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode2 self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
			}
		}
		[CRepr]
		public struct IHTMLDOMTextNode3 : IDispatch
		{
			public const new Guid IID = .(0x3051073e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT substringData(int32 offset, int32 Count, out BSTR pbstrsubString) mut => VT.substringData(ref this, offset, Count, out pbstrsubString);
			public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.insertData(ref this, offset, bstrstring);
			public HRESULT deleteData(int32 offset, int32 Count) mut => VT.deleteData(ref this, offset, Count);
			public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.replaceData(ref this, offset, Count, bstrstring);
			public HRESULT splitText(int32 offset, out IHTMLDOMNode* pRetNode) mut => VT.splitText(ref this, offset, out pRetNode);
			public HRESULT get_wholeText(out BSTR p) mut => VT.get_wholeText(ref this, out p);
			public HRESULT replaceWholeText(BSTR bstrText, out IHTMLDOMNode* ppRetNode) mut => VT.replaceWholeText(ref this, bstrText, out ppRetNode);
			public HRESULT hasAttributes(out int16 pfHasAttributes) mut => VT.hasAttributes(ref this, out pfHasAttributes);
			public HRESULT normalize() mut => VT.normalize(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, int32 offset, int32 Count, out BSTR pbstrsubString) substringData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, int32 offset, BSTR bstrstring) insertData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, int32 offset, int32 Count) deleteData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, int32 offset, out IHTMLDOMNode* pRetNode) splitText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, out BSTR p) get_wholeText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, BSTR bstrText, out IHTMLDOMNode* ppRetNode) replaceWholeText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self, out int16 pfHasAttributes) hasAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMTextNode3 self) normalize;
			}
		}
		[CRepr]
		public struct IHTMLDOMImplementation : IDispatch
		{
			public const new Guid IID = .(0x3050f80d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT hasFeature(BSTR bstrfeature, VARIANT version, out int16 pfHasFeature) mut => VT.hasFeature(ref this, bstrfeature, version, out pfHasFeature);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMImplementation self, BSTR bstrfeature, VARIANT version, out int16 pfHasFeature) hasFeature;
			}
		}
		[CRepr]
		public struct IHTMLDOMImplementation2 : IDispatch
		{
			public const new Guid IID = .(0x3051073c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createDocumentType(BSTR bstrQualifiedName, ref VARIANT pvarPublicId, ref VARIANT pvarSystemId, out IDOMDocumentType* newDocumentType) mut => VT.createDocumentType(ref this, bstrQualifiedName, ref pvarPublicId, ref pvarSystemId, out newDocumentType);
			public HRESULT createDocument(ref VARIANT pvarNS, ref VARIANT pvarTagName, ref IDOMDocumentType pDocumentType, out IHTMLDocument7* ppnewDocument) mut => VT.createDocument(ref this, ref pvarNS, ref pvarTagName, ref pDocumentType, out ppnewDocument);
			public HRESULT createHTMLDocument(BSTR bstrTitle, out IHTMLDocument7* ppnewDocument) mut => VT.createHTMLDocument(ref this, bstrTitle, out ppnewDocument);
			public HRESULT hasFeature(BSTR bstrfeature, VARIANT version, out int16 pfHasFeature) mut => VT.hasFeature(ref this, bstrfeature, version, out pfHasFeature);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMImplementation2 self, BSTR bstrQualifiedName, ref VARIANT pvarPublicId, ref VARIANT pvarSystemId, out IDOMDocumentType* newDocumentType) createDocumentType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMImplementation2 self, ref VARIANT pvarNS, ref VARIANT pvarTagName, ref IDOMDocumentType pDocumentType, out IHTMLDocument7* ppnewDocument) createDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMImplementation2 self, BSTR bstrTitle, out IHTMLDocument7* ppnewDocument) createHTMLDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMImplementation2 self, BSTR bstrfeature, VARIANT version, out int16 pfHasFeature) hasFeature;
			}
		}
		[CRepr]
		public struct DispHTMLDOMAttribute : IDispatch
		{
			public const new Guid IID = .(0x3050f564, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLDOMTextNode : IDispatch
		{
			public const new Guid IID = .(0x3050f565, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLDOMImplementation : IDispatch
		{
			public const new Guid IID = .(0x3050f58f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLAttributeCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f4c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(ref VARIANT name, out IDispatch* pdisp) mut => VT.item(ref this, ref name, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection self, ref VARIANT name, out IDispatch* pdisp) item;
			}
		}
		[CRepr]
		public struct IHTMLAttributeCollection2 : IDispatch
		{
			public const new Guid IID = .(0x3050f80a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getNamedItem(BSTR bstrName, out IHTMLDOMAttribute* newretNode) mut => VT.getNamedItem(ref this, bstrName, out newretNode);
			public HRESULT setNamedItem(ref IHTMLDOMAttribute ppNode, out IHTMLDOMAttribute* newretNode) mut => VT.setNamedItem(ref this, ref ppNode, out newretNode);
			public HRESULT removeNamedItem(BSTR bstrName, out IHTMLDOMAttribute* newretNode) mut => VT.removeNamedItem(ref this, bstrName, out newretNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection2 self, BSTR bstrName, out IHTMLDOMAttribute* newretNode) getNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection2 self, ref IHTMLDOMAttribute ppNode, out IHTMLDOMAttribute* newretNode) setNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection2 self, BSTR bstrName, out IHTMLDOMAttribute* newretNode) removeNamedItem;
			}
		}
		[CRepr]
		public struct IHTMLAttributeCollection4 : IDispatch
		{
			public const new Guid IID = .(0x305106fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getNamedItemNS(ref VARIANT pvarNS, BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.getNamedItemNS(ref this, ref pvarNS, bstrName, out ppNodeOut);
			public HRESULT setNamedItemNS(ref IHTMLDOMAttribute2 pNodeIn, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.setNamedItemNS(ref this, ref pNodeIn, out ppNodeOut);
			public HRESULT removeNamedItemNS(ref VARIANT pvarNS, BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.removeNamedItemNS(ref this, ref pvarNS, bstrName, out ppNodeOut);
			public HRESULT getNamedItem(BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.getNamedItem(ref this, bstrName, out ppNodeOut);
			public HRESULT setNamedItem(ref IHTMLDOMAttribute2 pNodeIn, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.setNamedItem(ref this, ref pNodeIn, out ppNodeOut);
			public HRESULT removeNamedItem(BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.removeNamedItem(ref this, bstrName, out ppNodeOut);
			public HRESULT item(int32 index, out IHTMLDOMAttribute2* ppNodeOut) mut => VT.item(ref this, index, out ppNodeOut);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, ref VARIANT pvarNS, BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) getNamedItemNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, ref IHTMLDOMAttribute2 pNodeIn, out IHTMLDOMAttribute2* ppNodeOut) setNamedItemNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, ref VARIANT pvarNS, BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) removeNamedItemNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) getNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, ref IHTMLDOMAttribute2 pNodeIn, out IHTMLDOMAttribute2* ppNodeOut) setNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, BSTR bstrName, out IHTMLDOMAttribute2* ppNodeOut) removeNamedItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, int32 index, out IHTMLDOMAttribute2* ppNodeOut) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAttributeCollection4 self, out int32 p) get_length;
			}
		}
		[CRepr]
		public struct IHTMLDOMChildrenCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f5ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(int32 index, out IDispatch* ppItem) mut => VT.item(ref this, index, out ppItem);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMChildrenCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMChildrenCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMChildrenCollection self, int32 index, out IDispatch* ppItem) item;
			}
		}
		[CRepr]
		public struct IHTMLDOMChildrenCollection2 : IDispatch
		{
			public const new Guid IID = .(0x30510791, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT item(int32 index, out IDispatch* ppItem) mut => VT.item(ref this, index, out ppItem);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMChildrenCollection2 self, int32 index, out IDispatch* ppItem) item;
			}
		}
		[CRepr]
		public struct DispHTMLAttributeCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f56c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispStaticNodeList : IDispatch
		{
			public const new Guid IID = .(0x3050f59b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispDOMChildrenCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f577, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLElementEvents4 : IDispatch
		{
			public const new Guid IID = .(0x3051075e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLElementEvents3 : IDispatch
		{
			public const new Guid IID = .(0x3050f59f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f60f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f33c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IRulesAppliedCollection : IDispatch
		{
			public const new Guid IID = .(0x305104be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT item(int32 index, out IRulesApplied* ppRulesApplied) mut => VT.item(ref this, index, out ppRulesApplied);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get_element(out IHTMLElement* p) mut => VT.get_element(ref this, out p);
			public HRESULT propertyInheritedFrom(BSTR name, out IRulesApplied* ppRulesApplied) mut => VT.propertyInheritedFrom(ref this, name, out ppRulesApplied);
			public HRESULT get_propertyCount(out int32 p) mut => VT.get_propertyCount(ref this, out p);
			public HRESULT property(int32 index, out BSTR pbstrProperty) mut => VT.property(ref this, index, out pbstrProperty);
			public HRESULT propertyInheritedTrace(BSTR name, int32 index, out IRulesApplied* ppRulesApplied) mut => VT.propertyInheritedTrace(ref this, name, index, out ppRulesApplied);
			public HRESULT propertyInheritedTraceLength(BSTR name, out int32 pLength) mut => VT.propertyInheritedTraceLength(ref this, name, out pLength);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, int32 index, out IRulesApplied* ppRulesApplied) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, out IHTMLElement* p) get_element;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, BSTR name, out IRulesApplied* ppRulesApplied) propertyInheritedFrom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, out int32 p) get_propertyCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, int32 index, out BSTR pbstrProperty) property;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, BSTR name, int32 index, out IRulesApplied* ppRulesApplied) propertyInheritedTrace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesAppliedCollection self, BSTR name, out int32 pLength) propertyInheritedTraceLength;
			}
		}
		[CRepr]
		public struct IHTMLElement3 : IDispatch
		{
			public const new Guid IID = .(0x3050f673, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT mergeAttributes(ref IHTMLElement mergeThis, ref VARIANT pvarFlags) mut => VT.mergeAttributes(ref this, ref mergeThis, ref pvarFlags);
			public HRESULT get_isMultiLine(out int16 p) mut => VT.get_isMultiLine(ref this, out p);
			public HRESULT get_canHaveHTML(out int16 p) mut => VT.get_canHaveHTML(ref this, out p);
			public HRESULT put_onlayoutcomplete(VARIANT v) mut => VT.put_onlayoutcomplete(ref this, v);
			public HRESULT get_onlayoutcomplete(out VARIANT p) mut => VT.get_onlayoutcomplete(ref this, out p);
			public HRESULT put_onpage(VARIANT v) mut => VT.put_onpage(ref this, v);
			public HRESULT get_onpage(out VARIANT p) mut => VT.get_onpage(ref this, out p);
			public HRESULT put_inflateBlock(int16 v) mut => VT.put_inflateBlock(ref this, v);
			public HRESULT get_inflateBlock(out int16 p) mut => VT.get_inflateBlock(ref this, out p);
			public HRESULT put_onbeforedeactivate(VARIANT v) mut => VT.put_onbeforedeactivate(ref this, v);
			public HRESULT get_onbeforedeactivate(out VARIANT p) mut => VT.get_onbeforedeactivate(ref this, out p);
			public HRESULT setActive() mut => VT.setActive(ref this);
			public HRESULT put_contentEditable(BSTR v) mut => VT.put_contentEditable(ref this, v);
			public HRESULT get_contentEditable(out BSTR p) mut => VT.get_contentEditable(ref this, out p);
			public HRESULT get_isContentEditable(out int16 p) mut => VT.get_isContentEditable(ref this, out p);
			public HRESULT put_hideFocus(int16 v) mut => VT.put_hideFocus(ref this, v);
			public HRESULT get_hideFocus(out int16 p) mut => VT.get_hideFocus(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_isDisabled(out int16 p) mut => VT.get_isDisabled(ref this, out p);
			public HRESULT put_onmove(VARIANT v) mut => VT.put_onmove(ref this, v);
			public HRESULT get_onmove(out VARIANT p) mut => VT.get_onmove(ref this, out p);
			public HRESULT put_oncontrolselect(VARIANT v) mut => VT.put_oncontrolselect(ref this, v);
			public HRESULT get_oncontrolselect(out VARIANT p) mut => VT.get_oncontrolselect(ref this, out p);
			public HRESULT fireEvent(BSTR bstrEventName, ref VARIANT pvarEventObject, out int16 pfCancelled) mut => VT.fireEvent(ref this, bstrEventName, ref pvarEventObject, out pfCancelled);
			public HRESULT put_onresizestart(VARIANT v) mut => VT.put_onresizestart(ref this, v);
			public HRESULT get_onresizestart(out VARIANT p) mut => VT.get_onresizestart(ref this, out p);
			public HRESULT put_onresizeend(VARIANT v) mut => VT.put_onresizeend(ref this, v);
			public HRESULT get_onresizeend(out VARIANT p) mut => VT.get_onresizeend(ref this, out p);
			public HRESULT put_onmovestart(VARIANT v) mut => VT.put_onmovestart(ref this, v);
			public HRESULT get_onmovestart(out VARIANT p) mut => VT.get_onmovestart(ref this, out p);
			public HRESULT put_onmoveend(VARIANT v) mut => VT.put_onmoveend(ref this, v);
			public HRESULT get_onmoveend(out VARIANT p) mut => VT.get_onmoveend(ref this, out p);
			public HRESULT put_onmouseenter(VARIANT v) mut => VT.put_onmouseenter(ref this, v);
			public HRESULT get_onmouseenter(out VARIANT p) mut => VT.get_onmouseenter(ref this, out p);
			public HRESULT put_onmouseleave(VARIANT v) mut => VT.put_onmouseleave(ref this, v);
			public HRESULT get_onmouseleave(out VARIANT p) mut => VT.get_onmouseleave(ref this, out p);
			public HRESULT put_onactivate(VARIANT v) mut => VT.put_onactivate(ref this, v);
			public HRESULT get_onactivate(out VARIANT p) mut => VT.get_onactivate(ref this, out p);
			public HRESULT put_ondeactivate(VARIANT v) mut => VT.put_ondeactivate(ref this, v);
			public HRESULT get_ondeactivate(out VARIANT p) mut => VT.get_ondeactivate(ref this, out p);
			public HRESULT dragDrop(out int16 pfRet) mut => VT.dragDrop(ref this, out pfRet);
			public HRESULT get_glyphMode(out int32 p) mut => VT.get_glyphMode(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, ref IHTMLElement mergeThis, ref VARIANT pvarFlags) mergeAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_isMultiLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_canHaveHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onlayoutcomplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onlayoutcomplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onpage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onpage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, int16 v) put_inflateBlock;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_inflateBlock;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onbeforedeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onbeforedeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self) setActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, BSTR v) put_contentEditable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out BSTR p) get_contentEditable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_isContentEditable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, int16 v) put_hideFocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_hideFocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 p) get_isDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onmove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onmove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_oncontrolselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_oncontrolselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, BSTR bstrEventName, ref VARIANT pvarEventObject, out int16 pfCancelled) fireEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onresizestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onresizestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onresizeend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onresizeend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onmovestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onmovestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onmoveend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onmoveend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onmouseenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onmouseenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onmouseleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onmouseleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_onactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_onactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, VARIANT v) put_ondeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out VARIANT p) get_ondeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int16 pfRet) dragDrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement3 self, out int32 p) get_glyphMode;
			}
		}
		[CRepr]
		public struct IHTMLElement4 : IDispatch
		{
			public const new Guid IID = .(0x3050f80f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onmousewheel(VARIANT v) mut => VT.put_onmousewheel(ref this, v);
			public HRESULT get_onmousewheel(out VARIANT p) mut => VT.get_onmousewheel(ref this, out p);
			public HRESULT normalize() mut => VT.normalize(ref this);
			public HRESULT getAttributeNode(BSTR bstrname, out IHTMLDOMAttribute* ppAttribute) mut => VT.getAttributeNode(ref this, bstrname, out ppAttribute);
			public HRESULT setAttributeNode(ref IHTMLDOMAttribute pattr, out IHTMLDOMAttribute* ppretAttribute) mut => VT.setAttributeNode(ref this, ref pattr, out ppretAttribute);
			public HRESULT removeAttributeNode(ref IHTMLDOMAttribute pattr, out IHTMLDOMAttribute* ppretAttribute) mut => VT.removeAttributeNode(ref this, ref pattr, out ppretAttribute);
			public HRESULT put_onbeforeactivate(VARIANT v) mut => VT.put_onbeforeactivate(ref this, v);
			public HRESULT get_onbeforeactivate(out VARIANT p) mut => VT.get_onbeforeactivate(ref this, out p);
			public HRESULT put_onfocusin(VARIANT v) mut => VT.put_onfocusin(ref this, v);
			public HRESULT get_onfocusin(out VARIANT p) mut => VT.get_onfocusin(ref this, out p);
			public HRESULT put_onfocusout(VARIANT v) mut => VT.put_onfocusout(ref this, v);
			public HRESULT get_onfocusout(out VARIANT p) mut => VT.get_onfocusout(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, VARIANT v) put_onmousewheel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, out VARIANT p) get_onmousewheel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self) normalize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, BSTR bstrname, out IHTMLDOMAttribute* ppAttribute) getAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, ref IHTMLDOMAttribute pattr, out IHTMLDOMAttribute* ppretAttribute) setAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, ref IHTMLDOMAttribute pattr, out IHTMLDOMAttribute* ppretAttribute) removeAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, VARIANT v) put_onbeforeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, out VARIANT p) get_onbeforeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, VARIANT v) put_onfocusin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, out VARIANT p) get_onfocusin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, VARIANT v) put_onfocusout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement4 self, out VARIANT p) get_onfocusout;
			}
		}
		[CRepr]
		public struct IElementSelector : IDispatch
		{
			public const new Guid IID = .(0x30510463, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT querySelector(BSTR v, out IHTMLElement* pel) mut => VT.querySelector(ref this, v, out pel);
			public HRESULT querySelectorAll(BSTR v, out IHTMLDOMChildrenCollection* pel) mut => VT.querySelectorAll(ref this, v, out pel);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementSelector self, BSTR v, out IHTMLElement* pel) querySelector;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementSelector self, BSTR v, out IHTMLDOMChildrenCollection* pel) querySelectorAll;
			}
		}
		[CRepr]
		public struct IHTMLElementRender : IUnknown
		{
			public const new Guid IID = .(0x3050f669, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT DrawToDC(HDC hDC) mut => VT.DrawToDC(ref this, hDC);
			public HRESULT SetDocumentPrinter(BSTR bstrPrinterName, HDC hDC) mut => VT.SetDocumentPrinter(ref this, bstrPrinterName, hDC);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementRender self, HDC hDC) DrawToDC;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementRender self, BSTR bstrPrinterName, HDC hDC) SetDocumentPrinter;
			}
		}
		[CRepr]
		public struct IHTMLUniqueName : IDispatch
		{
			public const new Guid IID = .(0x3050f4d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_uniqueNumber(out int32 p) mut => VT.get_uniqueNumber(ref this, out p);
			public HRESULT get_uniqueID(out BSTR p) mut => VT.get_uniqueID(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUniqueName self, out int32 p) get_uniqueNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUniqueName self, out BSTR p) get_uniqueID;
			}
		}
		[CRepr]
		public struct IHTMLElement5 : IDispatch
		{
			public const new Guid IID = .(0x3051045d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getAttributeNode(BSTR bstrname, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.getAttributeNode(ref this, bstrname, out ppretAttribute);
			public HRESULT setAttributeNode(ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.setAttributeNode(ref this, ref pattr, out ppretAttribute);
			public HRESULT removeAttributeNode(ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.removeAttributeNode(ref this, ref pattr, out ppretAttribute);
			public HRESULT hasAttribute(BSTR name, out int16 pfHasAttribute) mut => VT.hasAttribute(ref this, name, out pfHasAttribute);
			public HRESULT put_role(BSTR v) mut => VT.put_role(ref this, v);
			public HRESULT get_role(out BSTR p) mut => VT.get_role(ref this, out p);
			public HRESULT put_ariaBusy(BSTR v) mut => VT.put_ariaBusy(ref this, v);
			public HRESULT get_ariaBusy(out BSTR p) mut => VT.get_ariaBusy(ref this, out p);
			public HRESULT put_ariaChecked(BSTR v) mut => VT.put_ariaChecked(ref this, v);
			public HRESULT get_ariaChecked(out BSTR p) mut => VT.get_ariaChecked(ref this, out p);
			public HRESULT put_ariaDisabled(BSTR v) mut => VT.put_ariaDisabled(ref this, v);
			public HRESULT get_ariaDisabled(out BSTR p) mut => VT.get_ariaDisabled(ref this, out p);
			public HRESULT put_ariaExpanded(BSTR v) mut => VT.put_ariaExpanded(ref this, v);
			public HRESULT get_ariaExpanded(out BSTR p) mut => VT.get_ariaExpanded(ref this, out p);
			public HRESULT put_ariaHaspopup(BSTR v) mut => VT.put_ariaHaspopup(ref this, v);
			public HRESULT get_ariaHaspopup(out BSTR p) mut => VT.get_ariaHaspopup(ref this, out p);
			public HRESULT put_ariaHidden(BSTR v) mut => VT.put_ariaHidden(ref this, v);
			public HRESULT get_ariaHidden(out BSTR p) mut => VT.get_ariaHidden(ref this, out p);
			public HRESULT put_ariaInvalid(BSTR v) mut => VT.put_ariaInvalid(ref this, v);
			public HRESULT get_ariaInvalid(out BSTR p) mut => VT.get_ariaInvalid(ref this, out p);
			public HRESULT put_ariaMultiselectable(BSTR v) mut => VT.put_ariaMultiselectable(ref this, v);
			public HRESULT get_ariaMultiselectable(out BSTR p) mut => VT.get_ariaMultiselectable(ref this, out p);
			public HRESULT put_ariaPressed(BSTR v) mut => VT.put_ariaPressed(ref this, v);
			public HRESULT get_ariaPressed(out BSTR p) mut => VT.get_ariaPressed(ref this, out p);
			public HRESULT put_ariaReadonly(BSTR v) mut => VT.put_ariaReadonly(ref this, v);
			public HRESULT get_ariaReadonly(out BSTR p) mut => VT.get_ariaReadonly(ref this, out p);
			public HRESULT put_ariaRequired(BSTR v) mut => VT.put_ariaRequired(ref this, v);
			public HRESULT get_ariaRequired(out BSTR p) mut => VT.get_ariaRequired(ref this, out p);
			public HRESULT put_ariaSecret(BSTR v) mut => VT.put_ariaSecret(ref this, v);
			public HRESULT get_ariaSecret(out BSTR p) mut => VT.get_ariaSecret(ref this, out p);
			public HRESULT put_ariaSelected(BSTR v) mut => VT.put_ariaSelected(ref this, v);
			public HRESULT get_ariaSelected(out BSTR p) mut => VT.get_ariaSelected(ref this, out p);
			public HRESULT getAttribute(BSTR strAttributeName, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, out AttributeValue);
			public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue) mut => VT.setAttribute(ref this, strAttributeName, AttributeValue);
			public HRESULT removeAttribute(BSTR strAttributeName, out int16 pfSuccess) mut => VT.removeAttribute(ref this, strAttributeName, out pfSuccess);
			public HRESULT get_attributes(out IHTMLAttributeCollection3* p) mut => VT.get_attributes(ref this, out p);
			public HRESULT put_ariaValuenow(BSTR v) mut => VT.put_ariaValuenow(ref this, v);
			public HRESULT get_ariaValuenow(out BSTR p) mut => VT.get_ariaValuenow(ref this, out p);
			public HRESULT put_ariaPosinset(int16 v) mut => VT.put_ariaPosinset(ref this, v);
			public HRESULT get_ariaPosinset(out int16 p) mut => VT.get_ariaPosinset(ref this, out p);
			public HRESULT put_ariaSetsize(int16 v) mut => VT.put_ariaSetsize(ref this, v);
			public HRESULT get_ariaSetsize(out int16 p) mut => VT.get_ariaSetsize(ref this, out p);
			public HRESULT put_ariaLevel(int16 v) mut => VT.put_ariaLevel(ref this, v);
			public HRESULT get_ariaLevel(out int16 p) mut => VT.get_ariaLevel(ref this, out p);
			public HRESULT put_ariaValuemin(BSTR v) mut => VT.put_ariaValuemin(ref this, v);
			public HRESULT get_ariaValuemin(out BSTR p) mut => VT.get_ariaValuemin(ref this, out p);
			public HRESULT put_ariaValuemax(BSTR v) mut => VT.put_ariaValuemax(ref this, v);
			public HRESULT get_ariaValuemax(out BSTR p) mut => VT.get_ariaValuemax(ref this, out p);
			public HRESULT put_ariaControls(BSTR v) mut => VT.put_ariaControls(ref this, v);
			public HRESULT get_ariaControls(out BSTR p) mut => VT.get_ariaControls(ref this, out p);
			public HRESULT put_ariaDescribedby(BSTR v) mut => VT.put_ariaDescribedby(ref this, v);
			public HRESULT get_ariaDescribedby(out BSTR p) mut => VT.get_ariaDescribedby(ref this, out p);
			public HRESULT put_ariaFlowto(BSTR v) mut => VT.put_ariaFlowto(ref this, v);
			public HRESULT get_ariaFlowto(out BSTR p) mut => VT.get_ariaFlowto(ref this, out p);
			public HRESULT put_ariaLabelledby(BSTR v) mut => VT.put_ariaLabelledby(ref this, v);
			public HRESULT get_ariaLabelledby(out BSTR p) mut => VT.get_ariaLabelledby(ref this, out p);
			public HRESULT put_ariaActivedescendant(BSTR v) mut => VT.put_ariaActivedescendant(ref this, v);
			public HRESULT get_ariaActivedescendant(out BSTR p) mut => VT.get_ariaActivedescendant(ref this, out p);
			public HRESULT put_ariaOwns(BSTR v) mut => VT.put_ariaOwns(ref this, v);
			public HRESULT get_ariaOwns(out BSTR p) mut => VT.get_ariaOwns(ref this, out p);
			public HRESULT hasAttributes(out int16 pfHasAttributes) mut => VT.hasAttributes(ref this, out pfHasAttributes);
			public HRESULT put_ariaLive(BSTR v) mut => VT.put_ariaLive(ref this, v);
			public HRESULT get_ariaLive(out BSTR p) mut => VT.get_ariaLive(ref this, out p);
			public HRESULT put_ariaRelevant(BSTR v) mut => VT.put_ariaRelevant(ref this, v);
			public HRESULT get_ariaRelevant(out BSTR p) mut => VT.get_ariaRelevant(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR bstrname, out IHTMLDOMAttribute2* ppretAttribute) getAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) setAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) removeAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR name, out int16 pfHasAttribute) hasAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_role;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_role;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaBusy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaBusy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaChecked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaChecked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaExpanded;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaExpanded;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaHaspopup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaHaspopup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaHidden;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaHidden;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaInvalid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaInvalid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaMultiselectable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaMultiselectable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaPressed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaPressed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaReadonly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaReadonly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaRequired;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaRequired;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaSecret;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaSecret;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaSelected;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaSelected;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR strAttributeName, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR strAttributeName, VARIANT AttributeValue) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR strAttributeName, out int16 pfSuccess) removeAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out IHTMLAttributeCollection3* p) get_attributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaValuenow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaValuenow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, int16 v) put_ariaPosinset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out int16 p) get_ariaPosinset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, int16 v) put_ariaSetsize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out int16 p) get_ariaSetsize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, int16 v) put_ariaLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out int16 p) get_ariaLevel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaValuemin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaValuemin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaValuemax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaValuemax;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaControls;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaControls;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaDescribedby;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaDescribedby;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaFlowto;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaFlowto;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaLabelledby;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaLabelledby;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaActivedescendant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaActivedescendant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaOwns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaOwns;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out int16 pfHasAttributes) hasAttributes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaLive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaLive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, BSTR v) put_ariaRelevant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement5 self, out BSTR p) get_ariaRelevant;
			}
		}
		[CRepr]
		public struct IHTMLElement6 : IDispatch
		{
			public const new Guid IID = .(0x305106f8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getAttributeNS(ref VARIANT pvarNS, BSTR strAttributeName, out VARIANT AttributeValue) mut => VT.getAttributeNS(ref this, ref pvarNS, strAttributeName, out AttributeValue);
			public HRESULT setAttributeNS(ref VARIANT pvarNS, BSTR strAttributeName, ref VARIANT pvarAttributeValue) mut => VT.setAttributeNS(ref this, ref pvarNS, strAttributeName, ref pvarAttributeValue);
			public HRESULT removeAttributeNS(ref VARIANT pvarNS, BSTR strAttributeName) mut => VT.removeAttributeNS(ref this, ref pvarNS, strAttributeName);
			public HRESULT getAttributeNodeNS(ref VARIANT pvarNS, BSTR bstrname, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.getAttributeNodeNS(ref this, ref pvarNS, bstrname, out ppretAttribute);
			public HRESULT setAttributeNodeNS(ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.setAttributeNodeNS(ref this, ref pattr, out ppretAttribute);
			public HRESULT hasAttributeNS(ref VARIANT pvarNS, BSTR name, out int16 pfHasAttribute) mut => VT.hasAttributeNS(ref this, ref pvarNS, name, out pfHasAttribute);
			public HRESULT getAttribute(BSTR strAttributeName, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, out AttributeValue);
			public HRESULT setAttribute(BSTR strAttributeName, ref VARIANT pvarAttributeValue) mut => VT.setAttribute(ref this, strAttributeName, ref pvarAttributeValue);
			public HRESULT removeAttribute(BSTR strAttributeName) mut => VT.removeAttribute(ref this, strAttributeName);
			public HRESULT getAttributeNode(BSTR strAttributeName, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.getAttributeNode(ref this, strAttributeName, out ppretAttribute);
			public HRESULT setAttributeNode(ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.setAttributeNode(ref this, ref pattr, out ppretAttribute);
			public HRESULT removeAttributeNode(ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) mut => VT.removeAttributeNode(ref this, ref pattr, out ppretAttribute);
			public HRESULT hasAttribute(BSTR name, out int16 pfHasAttribute) mut => VT.hasAttribute(ref this, name, out pfHasAttribute);
			public HRESULT getElementsByTagNameNS(ref VARIANT varNS, BSTR bstrLocalName, out IHTMLElementCollection* pelColl) mut => VT.getElementsByTagNameNS(ref this, ref varNS, bstrLocalName, out pelColl);
			public HRESULT get_tagName(out BSTR p) mut => VT.get_tagName(ref this, out p);
			public HRESULT get_nodeName(out BSTR p) mut => VT.get_nodeName(ref this, out p);
			public HRESULT getElementsByClassName(BSTR v, out IHTMLElementCollection* pel) mut => VT.getElementsByClassName(ref this, v, out pel);
			public HRESULT msMatchesSelector(BSTR v, out int16 pfMatches) mut => VT.msMatchesSelector(ref this, v, out pfMatches);
			public HRESULT put_onabort(VARIANT v) mut => VT.put_onabort(ref this, v);
			public HRESULT get_onabort(out VARIANT p) mut => VT.get_onabort(ref this, out p);
			public HRESULT put_oncanplay(VARIANT v) mut => VT.put_oncanplay(ref this, v);
			public HRESULT get_oncanplay(out VARIANT p) mut => VT.get_oncanplay(ref this, out p);
			public HRESULT put_oncanplaythrough(VARIANT v) mut => VT.put_oncanplaythrough(ref this, v);
			public HRESULT get_oncanplaythrough(out VARIANT p) mut => VT.get_oncanplaythrough(ref this, out p);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_ondurationchange(VARIANT v) mut => VT.put_ondurationchange(ref this, v);
			public HRESULT get_ondurationchange(out VARIANT p) mut => VT.get_ondurationchange(ref this, out p);
			public HRESULT put_onemptied(VARIANT v) mut => VT.put_onemptied(ref this, v);
			public HRESULT get_onemptied(out VARIANT p) mut => VT.get_onemptied(ref this, out p);
			public HRESULT put_onended(VARIANT v) mut => VT.put_onended(ref this, v);
			public HRESULT get_onended(out VARIANT p) mut => VT.get_onended(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_oninput(VARIANT v) mut => VT.put_oninput(ref this, v);
			public HRESULT get_oninput(out VARIANT p) mut => VT.get_oninput(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onloadeddata(VARIANT v) mut => VT.put_onloadeddata(ref this, v);
			public HRESULT get_onloadeddata(out VARIANT p) mut => VT.get_onloadeddata(ref this, out p);
			public HRESULT put_onloadedmetadata(VARIANT v) mut => VT.put_onloadedmetadata(ref this, v);
			public HRESULT get_onloadedmetadata(out VARIANT p) mut => VT.get_onloadedmetadata(ref this, out p);
			public HRESULT put_onloadstart(VARIANT v) mut => VT.put_onloadstart(ref this, v);
			public HRESULT get_onloadstart(out VARIANT p) mut => VT.get_onloadstart(ref this, out p);
			public HRESULT put_onpause(VARIANT v) mut => VT.put_onpause(ref this, v);
			public HRESULT get_onpause(out VARIANT p) mut => VT.get_onpause(ref this, out p);
			public HRESULT put_onplay(VARIANT v) mut => VT.put_onplay(ref this, v);
			public HRESULT get_onplay(out VARIANT p) mut => VT.get_onplay(ref this, out p);
			public HRESULT put_onplaying(VARIANT v) mut => VT.put_onplaying(ref this, v);
			public HRESULT get_onplaying(out VARIANT p) mut => VT.get_onplaying(ref this, out p);
			public HRESULT put_onprogress(VARIANT v) mut => VT.put_onprogress(ref this, v);
			public HRESULT get_onprogress(out VARIANT p) mut => VT.get_onprogress(ref this, out p);
			public HRESULT put_onratechange(VARIANT v) mut => VT.put_onratechange(ref this, v);
			public HRESULT get_onratechange(out VARIANT p) mut => VT.get_onratechange(ref this, out p);
			public HRESULT put_onreset(VARIANT v) mut => VT.put_onreset(ref this, v);
			public HRESULT get_onreset(out VARIANT p) mut => VT.get_onreset(ref this, out p);
			public HRESULT put_onseeked(VARIANT v) mut => VT.put_onseeked(ref this, v);
			public HRESULT get_onseeked(out VARIANT p) mut => VT.get_onseeked(ref this, out p);
			public HRESULT put_onseeking(VARIANT v) mut => VT.put_onseeking(ref this, v);
			public HRESULT get_onseeking(out VARIANT p) mut => VT.get_onseeking(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_onstalled(VARIANT v) mut => VT.put_onstalled(ref this, v);
			public HRESULT get_onstalled(out VARIANT p) mut => VT.get_onstalled(ref this, out p);
			public HRESULT put_onsubmit(VARIANT v) mut => VT.put_onsubmit(ref this, v);
			public HRESULT get_onsubmit(out VARIANT p) mut => VT.get_onsubmit(ref this, out p);
			public HRESULT put_onsuspend(VARIANT v) mut => VT.put_onsuspend(ref this, v);
			public HRESULT get_onsuspend(out VARIANT p) mut => VT.get_onsuspend(ref this, out p);
			public HRESULT put_ontimeupdate(VARIANT v) mut => VT.put_ontimeupdate(ref this, v);
			public HRESULT get_ontimeupdate(out VARIANT p) mut => VT.get_ontimeupdate(ref this, out p);
			public HRESULT put_onvolumechange(VARIANT v) mut => VT.put_onvolumechange(ref this, v);
			public HRESULT get_onvolumechange(out VARIANT p) mut => VT.get_onvolumechange(ref this, out p);
			public HRESULT put_onwaiting(VARIANT v) mut => VT.put_onwaiting(ref this, v);
			public HRESULT get_onwaiting(out VARIANT p) mut => VT.get_onwaiting(ref this, out p);
			public HRESULT hasAttributes(out int16 pfHasAttributes) mut => VT.hasAttributes(ref this, out pfHasAttributes);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref VARIANT pvarNS, BSTR strAttributeName, out VARIANT AttributeValue) getAttributeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref VARIANT pvarNS, BSTR strAttributeName, ref VARIANT pvarAttributeValue) setAttributeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref VARIANT pvarNS, BSTR strAttributeName) removeAttributeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref VARIANT pvarNS, BSTR bstrname, out IHTMLDOMAttribute2* ppretAttribute) getAttributeNodeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) setAttributeNodeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref VARIANT pvarNS, BSTR name, out int16 pfHasAttribute) hasAttributeNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR strAttributeName, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR strAttributeName, ref VARIANT pvarAttributeValue) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR strAttributeName) removeAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR strAttributeName, out IHTMLDOMAttribute2* ppretAttribute) getAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) setAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref IHTMLDOMAttribute2 pattr, out IHTMLDOMAttribute2* ppretAttribute) removeAttributeNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR name, out int16 pfHasAttribute) hasAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, ref VARIANT varNS, BSTR bstrLocalName, out IHTMLElementCollection* pelColl) getElementsByTagNameNS;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out BSTR p) get_tagName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out BSTR p) get_nodeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR v, out IHTMLElementCollection* pel) getElementsByClassName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, BSTR v, out int16 pfMatches) msMatchesSelector;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_oncanplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_oncanplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_oncanplaythrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_oncanplaythrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_ondurationchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_ondurationchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onemptied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onemptied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_oninput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_oninput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onloadeddata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onloadeddata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onloadedmetadata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onloadedmetadata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onloadstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onloadstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onpause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onpause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onplaying;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onplaying;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onratechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onratechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onseeked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onseeked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onseeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onseeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onsuspend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onsuspend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_ontimeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_ontimeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onvolumechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onvolumechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, VARIANT v) put_onwaiting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out VARIANT p) get_onwaiting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement6 self, out int16 pfHasAttributes) hasAttributes;
			}
		}
		[CRepr]
		public struct IHTMLElement7 : IDispatch
		{
			public const new Guid IID = .(0x305107aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onmspointerdown(VARIANT v) mut => VT.put_onmspointerdown(ref this, v);
			public HRESULT get_onmspointerdown(out VARIANT p) mut => VT.get_onmspointerdown(ref this, out p);
			public HRESULT put_onmspointermove(VARIANT v) mut => VT.put_onmspointermove(ref this, v);
			public HRESULT get_onmspointermove(out VARIANT p) mut => VT.get_onmspointermove(ref this, out p);
			public HRESULT put_onmspointerup(VARIANT v) mut => VT.put_onmspointerup(ref this, v);
			public HRESULT get_onmspointerup(out VARIANT p) mut => VT.get_onmspointerup(ref this, out p);
			public HRESULT put_onmspointerover(VARIANT v) mut => VT.put_onmspointerover(ref this, v);
			public HRESULT get_onmspointerover(out VARIANT p) mut => VT.get_onmspointerover(ref this, out p);
			public HRESULT put_onmspointerout(VARIANT v) mut => VT.put_onmspointerout(ref this, v);
			public HRESULT get_onmspointerout(out VARIANT p) mut => VT.get_onmspointerout(ref this, out p);
			public HRESULT put_onmspointercancel(VARIANT v) mut => VT.put_onmspointercancel(ref this, v);
			public HRESULT get_onmspointercancel(out VARIANT p) mut => VT.get_onmspointercancel(ref this, out p);
			public HRESULT put_onmspointerhover(VARIANT v) mut => VT.put_onmspointerhover(ref this, v);
			public HRESULT get_onmspointerhover(out VARIANT p) mut => VT.get_onmspointerhover(ref this, out p);
			public HRESULT put_onmslostpointercapture(VARIANT v) mut => VT.put_onmslostpointercapture(ref this, v);
			public HRESULT get_onmslostpointercapture(out VARIANT p) mut => VT.get_onmslostpointercapture(ref this, out p);
			public HRESULT put_onmsgotpointercapture(VARIANT v) mut => VT.put_onmsgotpointercapture(ref this, v);
			public HRESULT get_onmsgotpointercapture(out VARIANT p) mut => VT.get_onmsgotpointercapture(ref this, out p);
			public HRESULT put_onmsgesturestart(VARIANT v) mut => VT.put_onmsgesturestart(ref this, v);
			public HRESULT get_onmsgesturestart(out VARIANT p) mut => VT.get_onmsgesturestart(ref this, out p);
			public HRESULT put_onmsgesturechange(VARIANT v) mut => VT.put_onmsgesturechange(ref this, v);
			public HRESULT get_onmsgesturechange(out VARIANT p) mut => VT.get_onmsgesturechange(ref this, out p);
			public HRESULT put_onmsgestureend(VARIANT v) mut => VT.put_onmsgestureend(ref this, v);
			public HRESULT get_onmsgestureend(out VARIANT p) mut => VT.get_onmsgestureend(ref this, out p);
			public HRESULT put_onmsgesturehold(VARIANT v) mut => VT.put_onmsgesturehold(ref this, v);
			public HRESULT get_onmsgesturehold(out VARIANT p) mut => VT.get_onmsgesturehold(ref this, out p);
			public HRESULT put_onmsgesturetap(VARIANT v) mut => VT.put_onmsgesturetap(ref this, v);
			public HRESULT get_onmsgesturetap(out VARIANT p) mut => VT.get_onmsgesturetap(ref this, out p);
			public HRESULT put_onmsgesturedoubletap(VARIANT v) mut => VT.put_onmsgesturedoubletap(ref this, v);
			public HRESULT get_onmsgesturedoubletap(out VARIANT p) mut => VT.get_onmsgesturedoubletap(ref this, out p);
			public HRESULT put_onmsinertiastart(VARIANT v) mut => VT.put_onmsinertiastart(ref this, v);
			public HRESULT get_onmsinertiastart(out VARIANT p) mut => VT.get_onmsinertiastart(ref this, out p);
			public HRESULT msSetPointerCapture(int32 pointerId) mut => VT.msSetPointerCapture(ref this, pointerId);
			public HRESULT msReleasePointerCapture(int32 pointerId) mut => VT.msReleasePointerCapture(ref this, pointerId);
			public HRESULT put_onmstransitionstart(VARIANT v) mut => VT.put_onmstransitionstart(ref this, v);
			public HRESULT get_onmstransitionstart(out VARIANT p) mut => VT.get_onmstransitionstart(ref this, out p);
			public HRESULT put_onmstransitionend(VARIANT v) mut => VT.put_onmstransitionend(ref this, v);
			public HRESULT get_onmstransitionend(out VARIANT p) mut => VT.get_onmstransitionend(ref this, out p);
			public HRESULT put_onmsanimationstart(VARIANT v) mut => VT.put_onmsanimationstart(ref this, v);
			public HRESULT get_onmsanimationstart(out VARIANT p) mut => VT.get_onmsanimationstart(ref this, out p);
			public HRESULT put_onmsanimationend(VARIANT v) mut => VT.put_onmsanimationend(ref this, v);
			public HRESULT get_onmsanimationend(out VARIANT p) mut => VT.get_onmsanimationend(ref this, out p);
			public HRESULT put_onmsanimationiteration(VARIANT v) mut => VT.put_onmsanimationiteration(ref this, v);
			public HRESULT get_onmsanimationiteration(out VARIANT p) mut => VT.get_onmsanimationiteration(ref this, out p);
			public HRESULT put_oninvalid(VARIANT v) mut => VT.put_oninvalid(ref this, v);
			public HRESULT get_oninvalid(out VARIANT p) mut => VT.get_oninvalid(ref this, out p);
			public HRESULT put_xmsAcceleratorKey(BSTR v) mut => VT.put_xmsAcceleratorKey(ref this, v);
			public HRESULT get_xmsAcceleratorKey(out BSTR p) mut => VT.get_xmsAcceleratorKey(ref this, out p);
			public HRESULT put_spellcheck(VARIANT v) mut => VT.put_spellcheck(ref this, v);
			public HRESULT get_spellcheck(out VARIANT p) mut => VT.get_spellcheck(ref this, out p);
			public HRESULT put_onmsmanipulationstatechanged(VARIANT v) mut => VT.put_onmsmanipulationstatechanged(ref this, v);
			public HRESULT get_onmsmanipulationstatechanged(out VARIANT p) mut => VT.get_onmsmanipulationstatechanged(ref this, out p);
			public HRESULT put_oncuechange(VARIANT v) mut => VT.put_oncuechange(ref this, v);
			public HRESULT get_oncuechange(out VARIANT p) mut => VT.get_oncuechange(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointerdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointerdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointermove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointermove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointerup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointerup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointerover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointerover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointerout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointerout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointercancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointercancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmspointerhover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmspointerhover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmslostpointercapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmslostpointercapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgotpointercapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgotpointercapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgesturestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgesturestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgesturechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgesturechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgestureend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgestureend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgesturehold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgesturehold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgesturetap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgesturetap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsgesturedoubletap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsgesturedoubletap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsinertiastart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsinertiastart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, int32 pointerId) msSetPointerCapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, int32 pointerId) msReleasePointerCapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmstransitionstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmstransitionstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmstransitionend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmstransitionend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsanimationstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsanimationstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsanimationend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsanimationend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsanimationiteration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsanimationiteration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_oninvalid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_oninvalid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, BSTR v) put_xmsAcceleratorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out BSTR p) get_xmsAcceleratorKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_spellcheck;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_spellcheck;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_onmsmanipulationstatechanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_onmsmanipulationstatechanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, VARIANT v) put_oncuechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElement7 self, out VARIANT p) get_oncuechange;
			}
		}
		[CRepr]
		public struct IHTMLElementAppliedStyles : IDispatch
		{
			public const new Guid IID = .(0x305104bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT msGetRulesApplied(out IRulesAppliedCollection* ppRulesAppliedCollection) mut => VT.msGetRulesApplied(ref this, out ppRulesAppliedCollection);
			public HRESULT msGetRulesAppliedWithAncestor(VARIANT varContext, out IRulesAppliedCollection* ppRulesAppliedCollection) mut => VT.msGetRulesAppliedWithAncestor(ref this, varContext, out ppRulesAppliedCollection);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementAppliedStyles self, out IRulesAppliedCollection* ppRulesAppliedCollection) msGetRulesApplied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementAppliedStyles self, VARIANT varContext, out IRulesAppliedCollection* ppRulesAppliedCollection) msGetRulesAppliedWithAncestor;
			}
		}
		[CRepr]
		public struct IElementTraversal : IDispatch
		{
			public const new Guid IID = .(0x30510736, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_firstElementChild(out IHTMLElement* p) mut => VT.get_firstElementChild(ref this, out p);
			public HRESULT get_lastElementChild(out IHTMLElement* p) mut => VT.get_lastElementChild(ref this, out p);
			public HRESULT get_previousElementSibling(out IHTMLElement* p) mut => VT.get_previousElementSibling(ref this, out p);
			public HRESULT get_nextElementSibling(out IHTMLElement* p) mut => VT.get_nextElementSibling(ref this, out p);
			public HRESULT get_childElementCount(out int32 p) mut => VT.get_childElementCount(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementTraversal self, out IHTMLElement* p) get_firstElementChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementTraversal self, out IHTMLElement* p) get_lastElementChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementTraversal self, out IHTMLElement* p) get_previousElementSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementTraversal self, out IHTMLElement* p) get_nextElementSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementTraversal self, out int32 p) get_childElementCount;
			}
		}
		[CRepr]
		public struct IHTMLDatabinding : IDispatch
		{
			public const new Guid IID = .(0x3050f3f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_dataFld(BSTR v) mut => VT.put_dataFld(ref this, v);
			public HRESULT get_dataFld(out BSTR p) mut => VT.get_dataFld(ref this, out p);
			public HRESULT put_dataSrc(BSTR v) mut => VT.put_dataSrc(ref this, v);
			public HRESULT get_dataSrc(out BSTR p) mut => VT.get_dataSrc(ref this, out p);
			public HRESULT put_dataFormatAs(BSTR v) mut => VT.put_dataFormatAs(ref this, v);
			public HRESULT get_dataFormatAs(out BSTR p) mut => VT.get_dataFormatAs(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDatabinding self, BSTR v) put_dataFld;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDatabinding self, out BSTR p) get_dataFld;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDatabinding self, BSTR v) put_dataSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDatabinding self, out BSTR p) get_dataSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDatabinding self, BSTR v) put_dataFormatAs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDatabinding self, out BSTR p) get_dataFormatAs;
			}
		}
		[CRepr]
		public struct IHTMLDocument : IDispatch
		{
			public const new Guid IID = .(0x626fc520, 0xa41e, 0x11cf, 0xa7, 0x31, 0x00, 0xa0, 0xc9, 0x08, 0x26, 0x37);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Script(out IDispatch* p) mut => VT.get_Script(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument self, out IDispatch* p) get_Script;
			}
		}
		[CRepr]
		public struct IHTMLElementDefaults : IDispatch
		{
			public const new Guid IID = .(0x3050f6c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_style(out IHTMLStyle* p) mut => VT.get_style(ref this, out p);
			public HRESULT put_tabStop(int16 v) mut => VT.put_tabStop(ref this, v);
			public HRESULT get_tabStop(out int16 p) mut => VT.get_tabStop(ref this, out p);
			public HRESULT put_viewInheritStyle(int16 v) mut => VT.put_viewInheritStyle(ref this, v);
			public HRESULT get_viewInheritStyle(out int16 p) mut => VT.get_viewInheritStyle(ref this, out p);
			public HRESULT put_viewMasterTab(int16 v) mut => VT.put_viewMasterTab(ref this, v);
			public HRESULT get_viewMasterTab(out int16 p) mut => VT.get_viewMasterTab(ref this, out p);
			public HRESULT put_scrollSegmentX(int32 v) mut => VT.put_scrollSegmentX(ref this, v);
			public HRESULT get_scrollSegmentX(out int32 p) mut => VT.get_scrollSegmentX(ref this, out p);
			public HRESULT put_scrollSegmentY(int32 v) mut => VT.put_scrollSegmentY(ref this, v);
			public HRESULT get_scrollSegmentY(out int32 p) mut => VT.get_scrollSegmentY(ref this, out p);
			public HRESULT put_isMultiLine(int16 v) mut => VT.put_isMultiLine(ref this, v);
			public HRESULT get_isMultiLine(out int16 p) mut => VT.get_isMultiLine(ref this, out p);
			public HRESULT put_contentEditable(BSTR v) mut => VT.put_contentEditable(ref this, v);
			public HRESULT get_contentEditable(out BSTR p) mut => VT.get_contentEditable(ref this, out p);
			public HRESULT put_canHaveHTML(int16 v) mut => VT.put_canHaveHTML(ref this, v);
			public HRESULT get_canHaveHTML(out int16 p) mut => VT.get_canHaveHTML(ref this, out p);
			public HRESULT putref_viewLink(ref IHTMLDocument v) mut => VT.putref_viewLink(ref this, ref v);
			public HRESULT get_viewLink(out IHTMLDocument* p) mut => VT.get_viewLink(ref this, out p);
			public HRESULT put_frozen(int16 v) mut => VT.put_frozen(ref this, v);
			public HRESULT get_frozen(out int16 p) mut => VT.get_frozen(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out IHTMLStyle* p) get_style;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int16 v) put_tabStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int16 p) get_tabStop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int16 v) put_viewInheritStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int16 p) get_viewInheritStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int16 v) put_viewMasterTab;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int16 p) get_viewMasterTab;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int32 v) put_scrollSegmentX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int32 p) get_scrollSegmentX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int32 v) put_scrollSegmentY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int32 p) get_scrollSegmentY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int16 v) put_isMultiLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int16 p) get_isMultiLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, BSTR v) put_contentEditable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out BSTR p) get_contentEditable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int16 v) put_canHaveHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int16 p) get_canHaveHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, ref IHTMLDocument v) putref_viewLink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out IHTMLDocument* p) get_viewLink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, int16 v) put_frozen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementDefaults self, out int16 p) get_frozen;
			}
		}
		[CRepr]
		public struct DispHTMLDefaults : IDispatch
		{
			public const new Guid IID = .(0x3050f58c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTCDefaultDispatch : IDispatch
		{
			public const new Guid IID = .(0x3050f4fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_element(out IHTMLElement* p) mut => VT.get_element(ref this, out p);
			public HRESULT createEventObject(out IHTMLEventObj* eventObj) mut => VT.createEventObject(ref this, out eventObj);
			public HRESULT get_defaults(out IDispatch* p) mut => VT.get_defaults(ref this, out p);
			public HRESULT get_document(out IDispatch* p) mut => VT.get_document(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCDefaultDispatch self, out IHTMLElement* p) get_element;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCDefaultDispatch self, out IHTMLEventObj* eventObj) createEventObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCDefaultDispatch self, out IDispatch* p) get_defaults;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCDefaultDispatch self, out IDispatch* p) get_document;
			}
		}
		[CRepr]
		public struct IHTCPropertyBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f5df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT fireChange() mut => VT.fireChange(ref this);
			public HRESULT put_value(VARIANT v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out VARIANT p) mut => VT.get_value(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCPropertyBehavior self) fireChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCPropertyBehavior self, VARIANT v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCPropertyBehavior self, out VARIANT p) get_value;
			}
		}
		[CRepr]
		public struct IHTCMethodBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f631, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTCEventBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f4ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT fire(ref IHTMLEventObj pvar) mut => VT.fire(ref this, ref pvar);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCEventBehavior self, ref IHTMLEventObj pvar) fire;
			}
		}
		[CRepr]
		public struct IHTCAttachBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f5f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT fireEvent(ref IDispatch evt) mut => VT.fireEvent(ref this, ref evt);
			public HRESULT detachEvent() mut => VT.detachEvent(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCAttachBehavior self, ref IDispatch evt) fireEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCAttachBehavior self) detachEvent;
			}
		}
		[CRepr]
		public struct IHTCAttachBehavior2 : IDispatch
		{
			public const new Guid IID = .(0x3050f7eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT fireEvent(VARIANT evt) mut => VT.fireEvent(ref this, evt);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCAttachBehavior2 self, VARIANT evt) fireEvent;
			}
		}
		[CRepr]
		public struct IHTCDescBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f5dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_urn(out BSTR p) mut => VT.get_urn(ref this, out p);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCDescBehavior self, out BSTR p) get_urn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTCDescBehavior self, out BSTR p) get_name;
			}
		}
		[CRepr]
		public struct DispHTCDefaultDispatch : IDispatch
		{
			public const new Guid IID = .(0x3050f573, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTCPropertyBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f57f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTCMethodBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f587, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTCEventBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f574, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTCAttachBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f583, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTCDescBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f57e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLUrnCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f5e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out BSTR ppUrn) mut => VT.item(ref this, index, out ppUrn);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUrnCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUrnCollection self, int32 index, out BSTR ppUrn) item;
			}
		}
		[CRepr]
		public struct DispHTMLUrnCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f551, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLGenericElement : IDispatch
		{
			public const new Guid IID = .(0x3050f4b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_recordset(out IDispatch* p) mut => VT.get_recordset(ref this, out p);
			public HRESULT namedRecordset(BSTR dataMember, ref VARIANT hierarchy, out IDispatch* ppRecordset) mut => VT.namedRecordset(ref this, dataMember, ref hierarchy, out ppRecordset);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLGenericElement self, out IDispatch* p) get_recordset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLGenericElement self, BSTR dataMember, ref VARIANT hierarchy, out IDispatch* ppRecordset) namedRecordset;
			}
		}
		[CRepr]
		public struct DispHTMLGenericElement : IDispatch
		{
			public const new Guid IID = .(0x3050f563, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleSheetRuleApplied : IDispatch
		{
			public const new Guid IID = .(0x305104c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_msSpecificity(out int32 p) mut => VT.get_msSpecificity(ref this, out p);
			public HRESULT msGetSpecificity(int32 index, out int32 p) mut => VT.msGetSpecificity(ref this, index, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRuleApplied self, out int32 p) get_msSpecificity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRuleApplied self, int32 index, out int32 p) msGetSpecificity;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheetRule2 : IDispatch
		{
			public const new Guid IID = .(0x305106fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selectorText(BSTR v) mut => VT.put_selectorText(ref this, v);
			public HRESULT get_selectorText(out BSTR p) mut => VT.get_selectorText(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRule2 self, BSTR v) put_selectorText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRule2 self, out BSTR p) get_selectorText;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheetRulesCollection2 : IDispatch
		{
			public const new Guid IID = .(0x305106e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out IHTMLCSSRule* ppHTMLCSSRule) mut => VT.item(ref this, index, out ppHTMLCSSRule);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesCollection2 self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesCollection2 self, int32 index, out IHTMLCSSRule* ppHTMLCSSRule) item;
			}
		}
		[CRepr]
		public struct DispHTMLStyleSheetRule : IDispatch
		{
			public const new Guid IID = .(0x3050f50e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLStyleSheetRulesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f52f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleSheetPage : IDispatch
		{
			public const new Guid IID = .(0x3050f7ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_selector(out BSTR p) mut => VT.get_selector(ref this, out p);
			public HRESULT get_pseudoClass(out BSTR p) mut => VT.get_pseudoClass(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPage self, out BSTR p) get_selector;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPage self, out BSTR p) get_pseudoClass;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheetPage2 : IDispatch
		{
			public const new Guid IID = .(0x305106ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selectorText(BSTR v) mut => VT.put_selectorText(ref this, v);
			public HRESULT get_selectorText(out BSTR p) mut => VT.get_selectorText(ref this, out p);
			public HRESULT get_style(out IHTMLRuleStyle* p) mut => VT.get_style(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPage2 self, BSTR v) put_selectorText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPage2 self, out BSTR p) get_selectorText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPage2 self, out IHTMLRuleStyle* p) get_style;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheetPagesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f7f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out IHTMLStyleSheetPage* ppHTMLStyleSheetPage) mut => VT.item(ref this, index, out ppHTMLStyleSheetPage);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPagesCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetPagesCollection self, int32 index, out IHTMLStyleSheetPage* ppHTMLStyleSheetPage) item;
			}
		}
		[CRepr]
		public struct DispHTMLStyleSheetPage : IDispatch
		{
			public const new Guid IID = .(0x3050f540, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLStyleSheetPagesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f543, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleSheetsCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f37e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(ref VARIANT pvarIndex, out VARIANT pvarResult) mut => VT.item(ref this, ref pvarIndex, out pvarResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetsCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetsCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetsCollection self, ref VARIANT pvarIndex, out VARIANT pvarResult) item;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheet2 : IDispatch
		{
			public const new Guid IID = .(0x3050f3d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_pages(out IHTMLStyleSheetPagesCollection* p) mut => VT.get_pages(ref this, out p);
			public HRESULT addPageRule(BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, out int32 plNewIndex) mut => VT.addPageRule(ref this, bstrSelector, bstrStyle, lIndex, out plNewIndex);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet2 self, out IHTMLStyleSheetPagesCollection* p) get_pages;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet2 self, BSTR bstrSelector, BSTR bstrStyle, int32 lIndex, out int32 plNewIndex) addPageRule;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheet3 : IDispatch
		{
			public const new Guid IID = .(0x30510496, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT get_isAlternate(out int16 p) mut => VT.get_isAlternate(ref this, out p);
			public HRESULT get_isPrefAlternate(out int16 p) mut => VT.get_isPrefAlternate(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet3 self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet3 self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet3 self, out int16 p) get_isAlternate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet3 self, out int16 p) get_isPrefAlternate;
			}
		}
		[CRepr]
		public struct IHTMLStyleSheet4 : IDispatch
		{
			public const new Guid IID = .(0x305106f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT get_href(out VARIANT p) mut => VT.get_href(ref this, out p);
			public HRESULT get_title(out BSTR p) mut => VT.get_title(ref this, out p);
			public HRESULT get_ownerNode(out IHTMLElement* p) mut => VT.get_ownerNode(ref this, out p);
			public HRESULT get_ownerRule(out IHTMLCSSRule* p) mut => VT.get_ownerRule(ref this, out p);
			public HRESULT get_cssRules(out IHTMLStyleSheetRulesCollection* p) mut => VT.get_cssRules(ref this, out p);
			public HRESULT get_media(out VARIANT p) mut => VT.get_media(ref this, out p);
			public HRESULT insertRule(BSTR bstrRule, int32 lIndex, out int32 plNewIndex) mut => VT.insertRule(ref this, bstrRule, lIndex, out plNewIndex);
			public HRESULT deleteRule(int32 lIndex) mut => VT.deleteRule(ref this, lIndex);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out VARIANT p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out BSTR p) get_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out IHTMLElement* p) get_ownerNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out IHTMLCSSRule* p) get_ownerRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out IHTMLStyleSheetRulesCollection* p) get_cssRules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, out VARIANT p) get_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, BSTR bstrRule, int32 lIndex, out int32 plNewIndex) insertRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheet4 self, int32 lIndex) deleteRule;
			}
		}
		[CRepr]
		public struct DispHTMLStyleSheet : IDispatch
		{
			public const new Guid IID = .(0x3050f58d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleSheetsCollection2 : IDispatch
		{
			public const new Guid IID = .(0x305106e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT item(int32 index, out VARIANT pvarResult) mut => VT.item(ref this, index, out pvarResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetsCollection2 self, int32 index, out VARIANT pvarResult) item;
			}
		}
		[CRepr]
		public struct DispHTMLStyleSheetsCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f547, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLLinkElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f61d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLLinkElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f3cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLLinkElement : IDispatch
		{
			public const new Guid IID = .(0x3050f205, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT put_rel(BSTR v) mut => VT.put_rel(ref this, v);
			public HRESULT get_rel(out BSTR p) mut => VT.get_rel(ref this, out p);
			public HRESULT put_rev(BSTR v) mut => VT.put_rev(ref this, v);
			public HRESULT get_rev(out BSTR p) mut => VT.get_rev(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT get_styleSheet(out IHTMLStyleSheet* p) mut => VT.get_styleSheet(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT put_media(BSTR v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out BSTR p) mut => VT.get_media(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, BSTR v) put_rel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out BSTR p) get_rel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, BSTR v) put_rev;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out BSTR p) get_rev;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out IHTMLStyleSheet* p) get_styleSheet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, BSTR v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement self, out BSTR p) get_media;
			}
		}
		[CRepr]
		public struct IHTMLLinkElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_target(BSTR v) mut => VT.put_target(ref this, v);
			public HRESULT get_target(out BSTR p) mut => VT.get_target(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement2 self, BSTR v) put_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement2 self, out BSTR p) get_target;
			}
		}
		[CRepr]
		public struct IHTMLLinkElement3 : IDispatch
		{
			public const new Guid IID = .(0x3050f81e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_charset(BSTR v) mut => VT.put_charset(ref this, v);
			public HRESULT get_charset(out BSTR p) mut => VT.get_charset(ref this, out p);
			public HRESULT put_hreflang(BSTR v) mut => VT.put_hreflang(ref this, v);
			public HRESULT get_hreflang(out BSTR p) mut => VT.get_hreflang(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement3 self, BSTR v) put_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement3 self, out BSTR p) get_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement3 self, BSTR v) put_hreflang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement3 self, out BSTR p) get_hreflang;
			}
		}
		[CRepr]
		public struct IHTMLLinkElement4 : IDispatch
		{
			public const new Guid IID = .(0x3051043a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement4 self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement4 self, out BSTR p) get_href;
			}
		}
		[CRepr]
		public struct IHTMLLinkElement5 : IDispatch
		{
			public const new Guid IID = .(0x30510726, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_sheet(out IHTMLStyleSheet* p) mut => VT.get_sheet(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLinkElement5 self, out IHTMLStyleSheet* p) get_sheet;
			}
		}
		[CRepr]
		public struct DispHTMLLinkElement : IDispatch
		{
			public const new Guid IID = .(0x3050f524, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLTxtRange : IDispatch
		{
			public const new Guid IID = .(0x3050f220, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_htmlText(out BSTR p) mut => VT.get_htmlText(ref this, out p);
			public HRESULT put_text(BSTR v) mut => VT.put_text(ref this, v);
			public HRESULT get_text(out BSTR p) mut => VT.get_text(ref this, out p);
			public HRESULT parentElement(out IHTMLElement* parent) mut => VT.parentElement(ref this, out parent);
			public HRESULT duplicate(out IHTMLTxtRange* Duplicate) mut => VT.duplicate(ref this, out Duplicate);
			public HRESULT inRange(ref IHTMLTxtRange Range, out int16 InRange) mut => VT.inRange(ref this, ref Range, out InRange);
			public HRESULT isEqual(ref IHTMLTxtRange Range, out int16 IsEqual) mut => VT.isEqual(ref this, ref Range, out IsEqual);
			public HRESULT scrollIntoView(int16 fStart) mut => VT.scrollIntoView(ref this, fStart);
			public HRESULT collapse(int16 Start) mut => VT.collapse(ref this, Start);
			public HRESULT expand(BSTR Unit, out int16 Success) mut => VT.expand(ref this, Unit, out Success);
			public HRESULT move(BSTR Unit, int32 Count, out int32 ActualCount) mut => VT.move(ref this, Unit, Count, out ActualCount);
			public HRESULT moveStart(BSTR Unit, int32 Count, out int32 ActualCount) mut => VT.moveStart(ref this, Unit, Count, out ActualCount);
			public HRESULT moveEnd(BSTR Unit, int32 Count, out int32 ActualCount) mut => VT.moveEnd(ref this, Unit, Count, out ActualCount);
			public HRESULT select() mut => VT.select(ref this);
			public HRESULT pasteHTML(BSTR html) mut => VT.pasteHTML(ref this, html);
			public HRESULT moveToElementText(ref IHTMLElement element) mut => VT.moveToElementText(ref this, ref element);
			public HRESULT setEndPoint(BSTR how, ref IHTMLTxtRange SourceRange) mut => VT.setEndPoint(ref this, how, ref SourceRange);
			public HRESULT compareEndPoints(BSTR how, ref IHTMLTxtRange SourceRange, out int32 ret) mut => VT.compareEndPoints(ref this, how, ref SourceRange, out ret);
			public HRESULT findText(BSTR String, int32 count, int32 Flags, out int16 Success) mut => VT.findText(ref this, String, count, Flags, out Success);
			public HRESULT moveToPoint(int32 x, int32 y) mut => VT.moveToPoint(ref this, x, y);
			public HRESULT getBookmark(out BSTR Boolmark) mut => VT.getBookmark(ref this, out Boolmark);
			public HRESULT moveToBookmark(BSTR Bookmark, out int16 Success) mut => VT.moveToBookmark(ref this, Bookmark, out Success);
			public HRESULT queryCommandSupported(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandSupported(ref this, cmdID, out pfRet);
			public HRESULT queryCommandEnabled(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandEnabled(ref this, cmdID, out pfRet);
			public HRESULT queryCommandState(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandState(ref this, cmdID, out pfRet);
			public HRESULT queryCommandIndeterm(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandIndeterm(ref this, cmdID, out pfRet);
			public HRESULT queryCommandText(BSTR cmdID, out BSTR pcmdText) mut => VT.queryCommandText(ref this, cmdID, out pcmdText);
			public HRESULT queryCommandValue(BSTR cmdID, out VARIANT pcmdValue) mut => VT.queryCommandValue(ref this, cmdID, out pcmdValue);
			public HRESULT execCommand(BSTR cmdID, int16 showUI, VARIANT value, out int16 pfRet) mut => VT.execCommand(ref this, cmdID, showUI, value, out pfRet);
			public HRESULT execCommandShowHelp(BSTR cmdID, out int16 pfRet) mut => VT.execCommandShowHelp(ref this, cmdID, out pfRet);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, out BSTR p) get_htmlText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR v) put_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, out BSTR p) get_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, out IHTMLElement* parent) parentElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, out IHTMLTxtRange* Duplicate) duplicate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, ref IHTMLTxtRange Range, out int16 InRange) inRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, ref IHTMLTxtRange Range, out int16 IsEqual) isEqual;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, int16 fStart) scrollIntoView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, int16 Start) collapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR Unit, out int16 Success) expand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR Unit, int32 Count, out int32 ActualCount) move;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR Unit, int32 Count, out int32 ActualCount) moveStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR Unit, int32 Count, out int32 ActualCount) moveEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self) select;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR html) pasteHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, ref IHTMLElement element) moveToElementText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR how, ref IHTMLTxtRange SourceRange) setEndPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR how, ref IHTMLTxtRange SourceRange, out int32 ret) compareEndPoints;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR String, int32 count, int32 Flags, out int16 Success) findText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, int32 x, int32 y) moveToPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, out BSTR Boolmark) getBookmark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR Bookmark, out int16 Success) moveToBookmark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out int16 pfRet) queryCommandSupported;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out int16 pfRet) queryCommandEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out int16 pfRet) queryCommandState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out int16 pfRet) queryCommandIndeterm;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out BSTR pcmdText) queryCommandText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out VARIANT pcmdValue) queryCommandValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, int16 showUI, VARIANT value, out int16 pfRet) execCommand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRange self, BSTR cmdID, out int16 pfRet) execCommandShowHelp;
			}
		}
		[CRepr]
		public struct IHTMLTextRangeMetrics : IDispatch
		{
			public const new Guid IID = .(0x3050f40b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_offsetTop(out int32 p) mut => VT.get_offsetTop(ref this, out p);
			public HRESULT get_offsetLeft(out int32 p) mut => VT.get_offsetLeft(ref this, out p);
			public HRESULT get_boundingTop(out int32 p) mut => VT.get_boundingTop(ref this, out p);
			public HRESULT get_boundingLeft(out int32 p) mut => VT.get_boundingLeft(ref this, out p);
			public HRESULT get_boundingWidth(out int32 p) mut => VT.get_boundingWidth(ref this, out p);
			public HRESULT get_boundingHeight(out int32 p) mut => VT.get_boundingHeight(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics self, out int32 p) get_offsetTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics self, out int32 p) get_offsetLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics self, out int32 p) get_boundingTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics self, out int32 p) get_boundingLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics self, out int32 p) get_boundingWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics self, out int32 p) get_boundingHeight;
			}
		}
		[CRepr]
		public struct IHTMLTextRangeMetrics2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getClientRects(out IHTMLRectCollection* pRectCol) mut => VT.getClientRects(ref this, out pRectCol);
			public HRESULT getBoundingClientRect(out IHTMLRect* pRect) mut => VT.getBoundingClientRect(ref this, out pRect);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics2 self, out IHTMLRectCollection* pRectCol) getClientRects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextRangeMetrics2 self, out IHTMLRect* pRect) getBoundingClientRect;
			}
		}
		[CRepr]
		public struct IHTMLTxtRangeCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f7ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(ref VARIANT pvarIndex, out VARIANT pvarResult) mut => VT.item(ref this, ref pvarIndex, out pvarResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRangeCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRangeCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTxtRangeCollection self, ref VARIANT pvarIndex, out VARIANT pvarResult) item;
			}
		}
		[CRepr]
		public struct IHTMLDOMRange : IDispatch
		{
			public const new Guid IID = .(0x305104ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_startContainer(out IHTMLDOMNode* p) mut => VT.get_startContainer(ref this, out p);
			public HRESULT get_startOffset(out int32 p) mut => VT.get_startOffset(ref this, out p);
			public HRESULT get_endContainer(out IHTMLDOMNode* p) mut => VT.get_endContainer(ref this, out p);
			public HRESULT get_endOffset(out int32 p) mut => VT.get_endOffset(ref this, out p);
			public HRESULT get_collapsed(out int16 p) mut => VT.get_collapsed(ref this, out p);
			public HRESULT get_commonAncestorContainer(out IHTMLDOMNode* p) mut => VT.get_commonAncestorContainer(ref this, out p);
			public HRESULT setStart(ref IDispatch refNode, int32 offset) mut => VT.setStart(ref this, ref refNode, offset);
			public HRESULT setEnd(ref IDispatch refNode, int32 offset) mut => VT.setEnd(ref this, ref refNode, offset);
			public HRESULT setStartBefore(ref IDispatch refNode) mut => VT.setStartBefore(ref this, ref refNode);
			public HRESULT setStartAfter(ref IDispatch refNode) mut => VT.setStartAfter(ref this, ref refNode);
			public HRESULT setEndBefore(ref IDispatch refNode) mut => VT.setEndBefore(ref this, ref refNode);
			public HRESULT setEndAfter(ref IDispatch refNode) mut => VT.setEndAfter(ref this, ref refNode);
			public HRESULT collapse(int16 toStart) mut => VT.collapse(ref this, toStart);
			public HRESULT selectNode(ref IDispatch refNode) mut => VT.selectNode(ref this, ref refNode);
			public HRESULT selectNodeContents(ref IDispatch refNode) mut => VT.selectNodeContents(ref this, ref refNode);
			public HRESULT compareBoundaryPoints(int16 how, ref IDispatch sourceRange, out int32 compareResult) mut => VT.compareBoundaryPoints(ref this, how, ref sourceRange, out compareResult);
			public HRESULT deleteContents() mut => VT.deleteContents(ref this);
			public HRESULT extractContents(out IDispatch* ppDocumentFragment) mut => VT.extractContents(ref this, out ppDocumentFragment);
			public HRESULT cloneContents(out IDispatch* ppDocumentFragment) mut => VT.cloneContents(ref this, out ppDocumentFragment);
			public HRESULT insertNode(ref IDispatch newNode) mut => VT.insertNode(ref this, ref newNode);
			public HRESULT surroundContents(ref IDispatch newParent) mut => VT.surroundContents(ref this, ref newParent);
			public HRESULT cloneRange(out IHTMLDOMRange* ppClonedRange) mut => VT.cloneRange(ref this, out ppClonedRange);
			public HRESULT toString(out BSTR pRangeString) mut => VT.toString(ref this, out pRangeString);
			public HRESULT detach() mut => VT.detach(ref this);
			public HRESULT getClientRects(out IHTMLRectCollection* ppRectCol) mut => VT.getClientRects(ref this, out ppRectCol);
			public HRESULT getBoundingClientRect(out IHTMLRect* ppRect) mut => VT.getBoundingClientRect(ref this, out ppRect);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IHTMLDOMNode* p) get_startContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out int32 p) get_startOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IHTMLDOMNode* p) get_endContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out int32 p) get_endOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out int16 p) get_collapsed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IHTMLDOMNode* p) get_commonAncestorContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode, int32 offset) setStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode, int32 offset) setEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode) setStartBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode) setStartAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode) setEndBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode) setEndAfter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, int16 toStart) collapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode) selectNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch refNode) selectNodeContents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, int16 how, ref IDispatch sourceRange, out int32 compareResult) compareBoundaryPoints;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self) deleteContents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IDispatch* ppDocumentFragment) extractContents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IDispatch* ppDocumentFragment) cloneContents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch newNode) insertNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, ref IDispatch newParent) surroundContents;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IHTMLDOMRange* ppClonedRange) cloneRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out BSTR pRangeString) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self) detach;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IHTMLRectCollection* ppRectCol) getClientRects;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMRange self, out IHTMLRect* ppRect) getBoundingClientRect;
			}
		}
		[CRepr]
		public struct DispHTMLDOMRange : IDispatch
		{
			public const new Guid IID = .(0x3050f5a3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLFormElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f614, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLFormElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f364, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFormElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_action(BSTR v) mut => VT.put_action(ref this, v);
			public HRESULT get_action(out BSTR p) mut => VT.get_action(ref this, out p);
			public HRESULT put_dir(BSTR v) mut => VT.put_dir(ref this, v);
			public HRESULT get_dir(out BSTR p) mut => VT.get_dir(ref this, out p);
			public HRESULT put_encoding(BSTR v) mut => VT.put_encoding(ref this, v);
			public HRESULT get_encoding(out BSTR p) mut => VT.get_encoding(ref this, out p);
			public HRESULT put_method(BSTR v) mut => VT.put_method(ref this, v);
			public HRESULT get_method(out BSTR p) mut => VT.get_method(ref this, out p);
			public HRESULT get_elements(out IDispatch* p) mut => VT.get_elements(ref this, out p);
			public HRESULT put_target(BSTR v) mut => VT.put_target(ref this, v);
			public HRESULT get_target(out BSTR p) mut => VT.get_target(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_onsubmit(VARIANT v) mut => VT.put_onsubmit(ref this, v);
			public HRESULT get_onsubmit(out VARIANT p) mut => VT.get_onsubmit(ref this, out p);
			public HRESULT put_onreset(VARIANT v) mut => VT.put_onreset(ref this, v);
			public HRESULT get_onreset(out VARIANT p) mut => VT.get_onreset(ref this, out p);
			public HRESULT submit() mut => VT.submit(ref this);
			public HRESULT reset() mut => VT.reset(ref this);
			public HRESULT put_length(int32 v) mut => VT.put_length(ref this, v);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(VARIANT name, VARIANT index, out IDispatch* pdisp) mut => VT.item(ref this, name, index, out pdisp);
			public HRESULT tags(VARIANT tagName, out IDispatch* pdisp) mut => VT.tags(ref this, tagName, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, BSTR v) put_action;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out BSTR p) get_action;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, BSTR v) put_dir;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out BSTR p) get_dir;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, BSTR v) put_encoding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out BSTR p) get_encoding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, BSTR v) put_method;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out BSTR p) get_method;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out IDispatch* p) get_elements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, BSTR v) put_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out BSTR p) get_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, VARIANT v) put_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out VARIANT p) get_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, VARIANT v) put_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out VARIANT p) get_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self) submit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self) reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, int32 v) put_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, VARIANT name, VARIANT index, out IDispatch* pdisp) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement self, VARIANT tagName, out IDispatch* pdisp) tags;
			}
		}
		[CRepr]
		public struct IHTMLFormElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_acceptCharset(BSTR v) mut => VT.put_acceptCharset(ref this, v);
			public HRESULT get_acceptCharset(out BSTR p) mut => VT.get_acceptCharset(ref this, out p);
			public HRESULT urns(VARIANT urn, out IDispatch* pdisp) mut => VT.urns(ref this, urn, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement2 self, BSTR v) put_acceptCharset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement2 self, out BSTR p) get_acceptCharset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement2 self, VARIANT urn, out IDispatch* pdisp) urns;
			}
		}
		[CRepr]
		public struct IHTMLFormElement3 : IDispatch
		{
			public const new Guid IID = .(0x3050f836, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT namedItem(BSTR name, out IDispatch* pdisp) mut => VT.namedItem(ref this, name, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement3 self, BSTR name, out IDispatch* pdisp) namedItem;
			}
		}
		[CRepr]
		public struct IHTMLSubmitData : IDispatch
		{
			public const new Guid IID = .(0x3050f645, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT appendNameValuePair(BSTR name, BSTR value) mut => VT.appendNameValuePair(ref this, name, value);
			public HRESULT appendNameFilePair(BSTR name, BSTR filename) mut => VT.appendNameFilePair(ref this, name, filename);
			public HRESULT appendItemSeparator() mut => VT.appendItemSeparator(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSubmitData self, BSTR name, BSTR value) appendNameValuePair;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSubmitData self, BSTR name, BSTR filename) appendNameFilePair;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSubmitData self) appendItemSeparator;
			}
		}
		[CRepr]
		public struct IHTMLFormElement4 : IDispatch
		{
			public const new Guid IID = .(0x3051042c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_action(BSTR v) mut => VT.put_action(ref this, v);
			public HRESULT get_action(out BSTR p) mut => VT.get_action(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement4 self, BSTR v) put_action;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFormElement4 self, out BSTR p) get_action;
			}
		}
		[CRepr]
		public struct DispHTMLFormElement : IDispatch
		{
			public const new Guid IID = .(0x3050f510, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLControlElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f612, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLControlElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f4ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLControlElement : IDispatch
		{
			public const new Guid IID = .(0x3050f4e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_tabIndex(int16 v) mut => VT.put_tabIndex(ref this, v);
			public HRESULT get_tabIndex(out int16 p) mut => VT.get_tabIndex(ref this, out p);
			public HRESULT focus() mut => VT.focus(ref this);
			public HRESULT put_accessKey(BSTR v) mut => VT.put_accessKey(ref this, v);
			public HRESULT get_accessKey(out BSTR p) mut => VT.get_accessKey(ref this, out p);
			public HRESULT put_onblur(VARIANT v) mut => VT.put_onblur(ref this, v);
			public HRESULT get_onblur(out VARIANT p) mut => VT.get_onblur(ref this, out p);
			public HRESULT put_onfocus(VARIANT v) mut => VT.put_onfocus(ref this, v);
			public HRESULT get_onfocus(out VARIANT p) mut => VT.get_onfocus(ref this, out p);
			public HRESULT put_onresize(VARIANT v) mut => VT.put_onresize(ref this, v);
			public HRESULT get_onresize(out VARIANT p) mut => VT.get_onresize(ref this, out p);
			public HRESULT blur() mut => VT.blur(ref this);
			public HRESULT addFilter(ref IUnknown pUnk) mut => VT.addFilter(ref this, ref pUnk);
			public HRESULT removeFilter(ref IUnknown pUnk) mut => VT.removeFilter(ref this, ref pUnk);
			public HRESULT get_clientHeight(out int32 p) mut => VT.get_clientHeight(ref this, out p);
			public HRESULT get_clientWidth(out int32 p) mut => VT.get_clientWidth(ref this, out p);
			public HRESULT get_clientTop(out int32 p) mut => VT.get_clientTop(ref this, out p);
			public HRESULT get_clientLeft(out int32 p) mut => VT.get_clientLeft(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, int16 v) put_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out int16 p) get_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self) focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, BSTR v) put_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out BSTR p) get_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, VARIANT v) put_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out VARIANT p) get_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, VARIANT v) put_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out VARIANT p) get_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, VARIANT v) put_onresize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out VARIANT p) get_onresize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self) blur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, ref IUnknown pUnk) addFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, ref IUnknown pUnk) removeFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out int32 p) get_clientHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out int32 p) get_clientWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out int32 p) get_clientTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlElement self, out int32 p) get_clientLeft;
			}
		}
		[CRepr]
		public struct IHTMLTextElement : IDispatch
		{
			public const new Guid IID = .(0x3050f218, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTextElement : IDispatch
		{
			public const new Guid IID = .(0x3050f537, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLTextContainerEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f624, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLTextContainerEvents : IDispatch
		{
			public const new Guid IID = .(0x1ff6aa72, 0x5842, 0x11cf, 0xa7, 0x07, 0x00, 0xaa, 0x00, 0xc0, 0x09, 0x8d);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLTextContainer : IDispatch
		{
			public const new Guid IID = .(0x3050f230, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createControlRange(out IDispatch* range) mut => VT.createControlRange(ref this, out range);
			public HRESULT get_scrollHeight(out int32 p) mut => VT.get_scrollHeight(ref this, out p);
			public HRESULT get_scrollWidth(out int32 p) mut => VT.get_scrollWidth(ref this, out p);
			public HRESULT put_scrollTop(int32 v) mut => VT.put_scrollTop(ref this, v);
			public HRESULT get_scrollTop(out int32 p) mut => VT.get_scrollTop(ref this, out p);
			public HRESULT put_scrollLeft(int32 v) mut => VT.put_scrollLeft(ref this, v);
			public HRESULT get_scrollLeft(out int32 p) mut => VT.get_scrollLeft(ref this, out p);
			public HRESULT put_onscroll(VARIANT v) mut => VT.put_onscroll(ref this, v);
			public HRESULT get_onscroll(out VARIANT p) mut => VT.get_onscroll(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, out IDispatch* range) createControlRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, out int32 p) get_scrollHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, out int32 p) get_scrollWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, int32 v) put_scrollTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, out int32 p) get_scrollTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, int32 v) put_scrollLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, out int32 p) get_scrollLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, VARIANT v) put_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextContainer self, out VARIANT p) get_onscroll;
			}
		}
		[CRepr]
		public struct IHTMLControlRange : IDispatch
		{
			public const new Guid IID = .(0x3050f29c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT select() mut => VT.select(ref this);
			public HRESULT add(ref IHTMLControlElement item) mut => VT.add(ref this, ref item);
			public HRESULT remove(int32 index) mut => VT.remove(ref this, index);
			public HRESULT item(int32 index, out IHTMLElement* pdisp) mut => VT.item(ref this, index, out pdisp);
			public HRESULT scrollIntoView(VARIANT varargStart) mut => VT.scrollIntoView(ref this, varargStart);
			public HRESULT queryCommandSupported(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandSupported(ref this, cmdID, out pfRet);
			public HRESULT queryCommandEnabled(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandEnabled(ref this, cmdID, out pfRet);
			public HRESULT queryCommandState(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandState(ref this, cmdID, out pfRet);
			public HRESULT queryCommandIndeterm(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandIndeterm(ref this, cmdID, out pfRet);
			public HRESULT queryCommandText(BSTR cmdID, out BSTR pcmdText) mut => VT.queryCommandText(ref this, cmdID, out pcmdText);
			public HRESULT queryCommandValue(BSTR cmdID, out VARIANT pcmdValue) mut => VT.queryCommandValue(ref this, cmdID, out pcmdValue);
			public HRESULT execCommand(BSTR cmdID, int16 showUI, VARIANT value, out int16 pfRet) mut => VT.execCommand(ref this, cmdID, showUI, value, out pfRet);
			public HRESULT execCommandShowHelp(BSTR cmdID, out int16 pfRet) mut => VT.execCommandShowHelp(ref this, cmdID, out pfRet);
			public HRESULT commonParentElement(out IHTMLElement* parent) mut => VT.commonParentElement(ref this, out parent);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self) select;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, ref IHTMLControlElement item) add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, int32 index) remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, int32 index, out IHTMLElement* pdisp) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, VARIANT varargStart) scrollIntoView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out int16 pfRet) queryCommandSupported;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out int16 pfRet) queryCommandEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out int16 pfRet) queryCommandState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out int16 pfRet) queryCommandIndeterm;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out BSTR pcmdText) queryCommandText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out VARIANT pcmdValue) queryCommandValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, int16 showUI, VARIANT value, out int16 pfRet) execCommand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, BSTR cmdID, out int16 pfRet) execCommandShowHelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, out IHTMLElement* parent) commonParentElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange self, out int32 p) get_length;
			}
		}
		[CRepr]
		public struct IHTMLControlRange2 : IDispatch
		{
			public const new Guid IID = .(0x3050f65e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT addElement(ref IHTMLElement item) mut => VT.addElement(ref this, ref item);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLControlRange2 self, ref IHTMLElement item) addElement;
			}
		}
		[CRepr]
		public struct HTMLImgEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f616, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLImgEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f25b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLImgElement : IDispatch
		{
			public const new Guid IID = .(0x3050f240, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_isMap(int16 v) mut => VT.put_isMap(ref this, v);
			public HRESULT get_isMap(out int16 p) mut => VT.get_isMap(ref this, out p);
			public HRESULT put_useMap(BSTR v) mut => VT.put_useMap(ref this, v);
			public HRESULT get_useMap(out BSTR p) mut => VT.get_useMap(ref this, out p);
			public HRESULT get_mimeType(out BSTR p) mut => VT.get_mimeType(ref this, out p);
			public HRESULT get_fileSize(out BSTR p) mut => VT.get_fileSize(ref this, out p);
			public HRESULT get_fileCreatedDate(out BSTR p) mut => VT.get_fileCreatedDate(ref this, out p);
			public HRESULT get_fileModifiedDate(out BSTR p) mut => VT.get_fileModifiedDate(ref this, out p);
			public HRESULT get_fileUpdatedDate(out BSTR p) mut => VT.get_fileUpdatedDate(ref this, out p);
			public HRESULT get_protocol(out BSTR p) mut => VT.get_protocol(ref this, out p);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT get_nameProp(out BSTR p) mut => VT.get_nameProp(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_vspace(int32 v) mut => VT.put_vspace(ref this, v);
			public HRESULT get_vspace(out int32 p) mut => VT.get_vspace(ref this, out p);
			public HRESULT put_hspace(int32 v) mut => VT.put_hspace(ref this, v);
			public HRESULT get_hspace(out int32 p) mut => VT.get_hspace(ref this, out p);
			public HRESULT put_alt(BSTR v) mut => VT.put_alt(ref this, v);
			public HRESULT get_alt(out BSTR p) mut => VT.get_alt(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_lowsrc(BSTR v) mut => VT.put_lowsrc(ref this, v);
			public HRESULT get_lowsrc(out BSTR p) mut => VT.get_lowsrc(ref this, out p);
			public HRESULT put_vrml(BSTR v) mut => VT.put_vrml(ref this, v);
			public HRESULT get_vrml(out BSTR p) mut => VT.get_vrml(ref this, out p);
			public HRESULT put_dynsrc(BSTR v) mut => VT.put_dynsrc(ref this, v);
			public HRESULT get_dynsrc(out BSTR p) mut => VT.get_dynsrc(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT get_complete(out int16 p) mut => VT.get_complete(ref this, out p);
			public HRESULT put_loop(VARIANT v) mut => VT.put_loop(ref this, v);
			public HRESULT get_loop(out VARIANT p) mut => VT.get_loop(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_onabort(VARIANT v) mut => VT.put_onabort(ref this, v);
			public HRESULT get_onabort(out VARIANT p) mut => VT.get_onabort(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_width(int32 v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(int32 v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT put_start(BSTR v) mut => VT.put_start(ref this, v);
			public HRESULT get_start(out BSTR p) mut => VT.get_start(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, int16 v) put_isMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out int16 p) get_isMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_useMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_useMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_mimeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_fileSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_fileCreatedDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_fileModifiedDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_fileUpdatedDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_nameProp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, int32 v) put_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out int32 p) get_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, int32 v) put_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out int32 p) get_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out int16 p) get_complete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, VARIANT v) put_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out VARIANT p) get_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, VARIANT v) put_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out VARIANT p) get_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, int32 v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, int32 v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, BSTR v) put_start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement self, out BSTR p) get_start;
			}
		}
		[CRepr]
		public struct IHTMLImgElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f826, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_longDesc(BSTR v) mut => VT.put_longDesc(ref this, v);
			public HRESULT get_longDesc(out BSTR p) mut => VT.get_longDesc(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement2 self, BSTR v) put_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement2 self, out BSTR p) get_longDesc;
			}
		}
		[CRepr]
		public struct IHTMLImgElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510434, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_longDesc(BSTR v) mut => VT.put_longDesc(ref this, v);
			public HRESULT get_longDesc(out BSTR p) mut => VT.get_longDesc(ref this, out p);
			public HRESULT put_vrml(BSTR v) mut => VT.put_vrml(ref this, v);
			public HRESULT get_vrml(out BSTR p) mut => VT.get_vrml(ref this, out p);
			public HRESULT put_lowsrc(BSTR v) mut => VT.put_lowsrc(ref this, v);
			public HRESULT get_lowsrc(out BSTR p) mut => VT.get_lowsrc(ref this, out p);
			public HRESULT put_dynsrc(BSTR v) mut => VT.put_dynsrc(ref this, v);
			public HRESULT get_dynsrc(out BSTR p) mut => VT.get_dynsrc(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, BSTR v) put_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, out BSTR p) get_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, BSTR v) put_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, out BSTR p) get_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, BSTR v) put_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, out BSTR p) get_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, BSTR v) put_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement3 self, out BSTR p) get_dynsrc;
			}
		}
		[CRepr]
		public struct IHTMLImgElement4 : IDispatch
		{
			public const new Guid IID = .(0x305107f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_naturalWidth(out int32 p) mut => VT.get_naturalWidth(ref this, out p);
			public HRESULT get_naturalHeight(out int32 p) mut => VT.get_naturalHeight(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement4 self, out int32 p) get_naturalWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImgElement4 self, out int32 p) get_naturalHeight;
			}
		}
		[CRepr]
		public struct IHTMLMSImgElement : IDispatch
		{
			public const new Guid IID = .(0x30510793, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_msPlayToDisabled(int16 v) mut => VT.put_msPlayToDisabled(ref this, v);
			public HRESULT get_msPlayToDisabled(out int16 p) mut => VT.get_msPlayToDisabled(ref this, out p);
			public HRESULT put_msPlayToPrimary(int16 v) mut => VT.put_msPlayToPrimary(ref this, v);
			public HRESULT get_msPlayToPrimary(out int16 p) mut => VT.get_msPlayToPrimary(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSImgElement self, int16 v) put_msPlayToDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSImgElement self, out int16 p) get_msPlayToDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSImgElement self, int16 v) put_msPlayToPrimary;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSImgElement self, out int16 p) get_msPlayToPrimary;
			}
		}
		[CRepr]
		public struct IHTMLImageElementFactory : IDispatch
		{
			public const new Guid IID = .(0x3050f38e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(VARIANT width, VARIANT height, out IHTMLImgElement* __MIDL__IHTMLImageElementFactory0000) mut => VT.create(ref this, width, height, out __MIDL__IHTMLImageElementFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLImageElementFactory self, VARIANT width, VARIANT height, out IHTMLImgElement* __MIDL__IHTMLImageElementFactory0000) create;
			}
		}
		[CRepr]
		public struct DispHTMLImg : IDispatch
		{
			public const new Guid IID = .(0x3050f51c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLBodyElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_bgProperties(BSTR v) mut => VT.put_bgProperties(ref this, v);
			public HRESULT get_bgProperties(out BSTR p) mut => VT.get_bgProperties(ref this, out p);
			public HRESULT put_leftMargin(VARIANT v) mut => VT.put_leftMargin(ref this, v);
			public HRESULT get_leftMargin(out VARIANT p) mut => VT.get_leftMargin(ref this, out p);
			public HRESULT put_topMargin(VARIANT v) mut => VT.put_topMargin(ref this, v);
			public HRESULT get_topMargin(out VARIANT p) mut => VT.get_topMargin(ref this, out p);
			public HRESULT put_rightMargin(VARIANT v) mut => VT.put_rightMargin(ref this, v);
			public HRESULT get_rightMargin(out VARIANT p) mut => VT.get_rightMargin(ref this, out p);
			public HRESULT put_bottomMargin(VARIANT v) mut => VT.put_bottomMargin(ref this, v);
			public HRESULT get_bottomMargin(out VARIANT p) mut => VT.get_bottomMargin(ref this, out p);
			public HRESULT put_noWrap(int16 v) mut => VT.put_noWrap(ref this, v);
			public HRESULT get_noWrap(out int16 p) mut => VT.get_noWrap(ref this, out p);
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT put_text(VARIANT v) mut => VT.put_text(ref this, v);
			public HRESULT get_text(out VARIANT p) mut => VT.get_text(ref this, out p);
			public HRESULT put_link(VARIANT v) mut => VT.put_link(ref this, v);
			public HRESULT get_link(out VARIANT p) mut => VT.get_link(ref this, out p);
			public HRESULT put_vLink(VARIANT v) mut => VT.put_vLink(ref this, v);
			public HRESULT get_vLink(out VARIANT p) mut => VT.get_vLink(ref this, out p);
			public HRESULT put_aLink(VARIANT v) mut => VT.put_aLink(ref this, v);
			public HRESULT get_aLink(out VARIANT p) mut => VT.get_aLink(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onunload(VARIANT v) mut => VT.put_onunload(ref this, v);
			public HRESULT get_onunload(out VARIANT p) mut => VT.get_onunload(ref this, out p);
			public HRESULT put_scroll(BSTR v) mut => VT.put_scroll(ref this, v);
			public HRESULT get_scroll(out BSTR p) mut => VT.get_scroll(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_onbeforeunload(VARIANT v) mut => VT.put_onbeforeunload(ref this, v);
			public HRESULT get_onbeforeunload(out VARIANT p) mut => VT.get_onbeforeunload(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, BSTR v) put_bgProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out BSTR p) get_bgProperties;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_leftMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_leftMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_topMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_topMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_rightMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_rightMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_bottomMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_bottomMargin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, int16 v) put_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out int16 p) get_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_link;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_link;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_vLink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_vLink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_aLink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_aLink;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_onunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_onunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, BSTR v) put_scroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out BSTR p) get_scroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, VARIANT v) put_onbeforeunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out VARIANT p) get_onbeforeunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement self, out IHTMLTxtRange* range) createTextRange;
			}
		}
		[CRepr]
		public struct IHTMLBodyElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onbeforeprint(VARIANT v) mut => VT.put_onbeforeprint(ref this, v);
			public HRESULT get_onbeforeprint(out VARIANT p) mut => VT.get_onbeforeprint(ref this, out p);
			public HRESULT put_onafterprint(VARIANT v) mut => VT.put_onafterprint(ref this, v);
			public HRESULT get_onafterprint(out VARIANT p) mut => VT.get_onafterprint(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement2 self, VARIANT v) put_onbeforeprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement2 self, out VARIANT p) get_onbeforeprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement2 self, VARIANT v) put_onafterprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement2 self, out VARIANT p) get_onafterprint;
			}
		}
		[CRepr]
		public struct IHTMLBodyElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510422, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_ononline(VARIANT v) mut => VT.put_ononline(ref this, v);
			public HRESULT get_ononline(out VARIANT p) mut => VT.get_ononline(ref this, out p);
			public HRESULT put_onoffline(VARIANT v) mut => VT.put_onoffline(ref this, v);
			public HRESULT get_onoffline(out VARIANT p) mut => VT.get_onoffline(ref this, out p);
			public HRESULT put_onhashchange(VARIANT v) mut => VT.put_onhashchange(ref this, v);
			public HRESULT get_onhashchange(out VARIANT p) mut => VT.get_onhashchange(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, VARIANT v) put_ononline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, out VARIANT p) get_ononline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, VARIANT v) put_onoffline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, out VARIANT p) get_onoffline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, VARIANT v) put_onhashchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement3 self, out VARIANT p) get_onhashchange;
			}
		}
		[CRepr]
		public struct IHTMLBodyElement4 : IDispatch
		{
			public const new Guid IID = .(0x30510795, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onmessage(VARIANT v) mut => VT.put_onmessage(ref this, v);
			public HRESULT get_onmessage(out VARIANT p) mut => VT.get_onmessage(ref this, out p);
			public HRESULT put_onstorage(VARIANT v) mut => VT.put_onstorage(ref this, v);
			public HRESULT get_onstorage(out VARIANT p) mut => VT.get_onstorage(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement4 self, VARIANT v) put_onmessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement4 self, out VARIANT p) get_onmessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement4 self, VARIANT v) put_onstorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement4 self, out VARIANT p) get_onstorage;
			}
		}
		[CRepr]
		public struct IHTMLBodyElement5 : IDispatch
		{
			public const new Guid IID = .(0x30510822, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onpopstate(VARIANT v) mut => VT.put_onpopstate(ref this, v);
			public HRESULT get_onpopstate(out VARIANT p) mut => VT.get_onpopstate(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement5 self, VARIANT v) put_onpopstate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBodyElement5 self, out VARIANT p) get_onpopstate;
			}
		}
		[CRepr]
		public struct DispHTMLBody : IDispatch
		{
			public const new Guid IID = .(0x3050f507, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFontElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_color(VARIANT v) mut => VT.put_color(ref this, v);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT put_face(BSTR v) mut => VT.put_face(ref this, v);
			public HRESULT get_face(out BSTR p) mut => VT.get_face(ref this, out p);
			public HRESULT put_size(VARIANT v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out VARIANT p) mut => VT.get_size(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontElement self, VARIANT v) put_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontElement self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontElement self, BSTR v) put_face;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontElement self, out BSTR p) get_face;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontElement self, VARIANT v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontElement self, out VARIANT p) get_size;
			}
		}
		[CRepr]
		public struct DispHTMLFontElement : IDispatch
		{
			public const new Guid IID = .(0x3050f512, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLAnchorEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f610, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLAnchorEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f29d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLAnchorElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT put_target(BSTR v) mut => VT.put_target(ref this, v);
			public HRESULT get_target(out BSTR p) mut => VT.get_target(ref this, out p);
			public HRESULT put_rel(BSTR v) mut => VT.put_rel(ref this, v);
			public HRESULT get_rel(out BSTR p) mut => VT.get_rel(ref this, out p);
			public HRESULT put_rev(BSTR v) mut => VT.put_rev(ref this, v);
			public HRESULT get_rev(out BSTR p) mut => VT.get_rev(ref this, out p);
			public HRESULT put_urn(BSTR v) mut => VT.put_urn(ref this, v);
			public HRESULT get_urn(out BSTR p) mut => VT.get_urn(ref this, out p);
			public HRESULT put_Methods(BSTR v) mut => VT.put_Methods(ref this, v);
			public HRESULT get_Methods(out BSTR p) mut => VT.get_Methods(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_host(BSTR v) mut => VT.put_host(ref this, v);
			public HRESULT get_host(out BSTR p) mut => VT.get_host(ref this, out p);
			public HRESULT put_hostname(BSTR v) mut => VT.put_hostname(ref this, v);
			public HRESULT get_hostname(out BSTR p) mut => VT.get_hostname(ref this, out p);
			public HRESULT put_pathname(BSTR v) mut => VT.put_pathname(ref this, v);
			public HRESULT get_pathname(out BSTR p) mut => VT.get_pathname(ref this, out p);
			public HRESULT put_port(BSTR v) mut => VT.put_port(ref this, v);
			public HRESULT get_port(out BSTR p) mut => VT.get_port(ref this, out p);
			public HRESULT put_protocol(BSTR v) mut => VT.put_protocol(ref this, v);
			public HRESULT get_protocol(out BSTR p) mut => VT.get_protocol(ref this, out p);
			public HRESULT put_search(BSTR v) mut => VT.put_search(ref this, v);
			public HRESULT get_search(out BSTR p) mut => VT.get_search(ref this, out p);
			public HRESULT put_hash(BSTR v) mut => VT.put_hash(ref this, v);
			public HRESULT get_hash(out BSTR p) mut => VT.get_hash(ref this, out p);
			public HRESULT put_onblur(VARIANT v) mut => VT.put_onblur(ref this, v);
			public HRESULT get_onblur(out VARIANT p) mut => VT.get_onblur(ref this, out p);
			public HRESULT put_onfocus(VARIANT v) mut => VT.put_onfocus(ref this, v);
			public HRESULT get_onfocus(out VARIANT p) mut => VT.get_onfocus(ref this, out p);
			public HRESULT put_accessKey(BSTR v) mut => VT.put_accessKey(ref this, v);
			public HRESULT get_accessKey(out BSTR p) mut => VT.get_accessKey(ref this, out p);
			public HRESULT get_protocolLong(out BSTR p) mut => VT.get_protocolLong(ref this, out p);
			public HRESULT get_mimeType(out BSTR p) mut => VT.get_mimeType(ref this, out p);
			public HRESULT get_nameProp(out BSTR p) mut => VT.get_nameProp(ref this, out p);
			public HRESULT put_tabIndex(int16 v) mut => VT.put_tabIndex(ref this, v);
			public HRESULT get_tabIndex(out int16 p) mut => VT.get_tabIndex(ref this, out p);
			public HRESULT focus() mut => VT.focus(ref this);
			public HRESULT blur() mut => VT.blur(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_rel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_rel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_rev;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_rev;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_urn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_urn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_Methods;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_Methods;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_host;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_host;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_hostname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_hostname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_pathname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_pathname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_port;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_port;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_search;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_search;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_hash;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_hash;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, VARIANT v) put_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out VARIANT p) get_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, VARIANT v) put_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out VARIANT p) get_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, BSTR v) put_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_protocolLong;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_mimeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out BSTR p) get_nameProp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, int16 v) put_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self, out int16 p) get_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self) focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement self) blur;
			}
		}
		[CRepr]
		public struct IHTMLAnchorElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f825, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_charset(BSTR v) mut => VT.put_charset(ref this, v);
			public HRESULT get_charset(out BSTR p) mut => VT.get_charset(ref this, out p);
			public HRESULT put_coords(BSTR v) mut => VT.put_coords(ref this, v);
			public HRESULT get_coords(out BSTR p) mut => VT.get_coords(ref this, out p);
			public HRESULT put_hreflang(BSTR v) mut => VT.put_hreflang(ref this, v);
			public HRESULT get_hreflang(out BSTR p) mut => VT.get_hreflang(ref this, out p);
			public HRESULT put_shape(BSTR v) mut => VT.put_shape(ref this, v);
			public HRESULT get_shape(out BSTR p) mut => VT.get_shape(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, BSTR v) put_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, out BSTR p) get_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, BSTR v) put_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, out BSTR p) get_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, BSTR v) put_hreflang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, out BSTR p) get_hreflang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, BSTR v) put_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, out BSTR p) get_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement2 self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct IHTMLAnchorElement3 : IDispatch
		{
			public const new Guid IID = .(0x3051041d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_shape(BSTR v) mut => VT.put_shape(ref this, v);
			public HRESULT get_shape(out BSTR p) mut => VT.get_shape(ref this, out p);
			public HRESULT put_coords(BSTR v) mut => VT.put_coords(ref this, v);
			public HRESULT get_coords(out BSTR p) mut => VT.get_coords(ref this, out p);
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement3 self, BSTR v) put_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement3 self, out BSTR p) get_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement3 self, BSTR v) put_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement3 self, out BSTR p) get_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement3 self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAnchorElement3 self, out BSTR p) get_href;
			}
		}
		[CRepr]
		public struct DispHTMLAnchorElement : IDispatch
		{
			public const new Guid IID = .(0x3050f502, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLLabelEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f61c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLLabelEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f329, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLLabelElement : IDispatch
		{
			public const new Guid IID = .(0x3050f32a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_htmlFor(BSTR v) mut => VT.put_htmlFor(ref this, v);
			public HRESULT get_htmlFor(out BSTR p) mut => VT.get_htmlFor(ref this, out p);
			public HRESULT put_accessKey(BSTR v) mut => VT.put_accessKey(ref this, v);
			public HRESULT get_accessKey(out BSTR p) mut => VT.get_accessKey(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLabelElement self, BSTR v) put_htmlFor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLabelElement self, out BSTR p) get_htmlFor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLabelElement self, BSTR v) put_accessKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLabelElement self, out BSTR p) get_accessKey;
			}
		}
		[CRepr]
		public struct IHTMLLabelElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f832, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLabelElement2 self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct DispHTMLLabelElement : IDispatch
		{
			public const new Guid IID = .(0x3050f522, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f20e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLListElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f822, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_compact(int16 v) mut => VT.put_compact(ref this, v);
			public HRESULT get_compact(out int16 p) mut => VT.get_compact(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLListElement2 self, int16 v) put_compact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLListElement2 self, out int16 p) get_compact;
			}
		}
		[CRepr]
		public struct DispHTMLListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f525, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLUListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_compact(int16 v) mut => VT.put_compact(ref this, v);
			public HRESULT get_compact(out int16 p) mut => VT.get_compact(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUListElement self, int16 v) put_compact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUListElement self, out int16 p) get_compact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUListElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUListElement self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct DispHTMLUListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f538, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLOListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_compact(int16 v) mut => VT.put_compact(ref this, v);
			public HRESULT get_compact(out int16 p) mut => VT.get_compact(ref this, out p);
			public HRESULT put_start(int32 v) mut => VT.put_start(ref this, v);
			public HRESULT get_start(out int32 p) mut => VT.get_start(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOListElement self, int16 v) put_compact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOListElement self, out int16 p) get_compact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOListElement self, int32 v) put_start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOListElement self, out int32 p) get_start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOListElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOListElement self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct DispHTMLOListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f52a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLLIElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(int32 v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out int32 p) mut => VT.get_value(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLIElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLIElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLIElement self, int32 v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLIElement self, out int32 p) get_value;
			}
		}
		[CRepr]
		public struct DispHTMLLIElement : IDispatch
		{
			public const new Guid IID = .(0x3050f523, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLBlockElement : IDispatch
		{
			public const new Guid IID = .(0x3050f208, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_clear(BSTR v) mut => VT.put_clear(ref this, v);
			public HRESULT get_clear(out BSTR p) mut => VT.get_clear(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement self, BSTR v) put_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement self, out BSTR p) get_clear;
			}
		}
		[CRepr]
		public struct IHTMLBlockElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f823, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_cite(BSTR v) mut => VT.put_cite(ref this, v);
			public HRESULT get_cite(out BSTR p) mut => VT.get_cite(ref this, out p);
			public HRESULT put_width(BSTR v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out BSTR p) mut => VT.get_width(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement2 self, BSTR v) put_cite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement2 self, out BSTR p) get_cite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement2 self, BSTR v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement2 self, out BSTR p) get_width;
			}
		}
		[CRepr]
		public struct IHTMLBlockElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510494, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_cite(BSTR v) mut => VT.put_cite(ref this, v);
			public HRESULT get_cite(out BSTR p) mut => VT.get_cite(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement3 self, BSTR v) put_cite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBlockElement3 self, out BSTR p) get_cite;
			}
		}
		[CRepr]
		public struct DispHTMLBlockElement : IDispatch
		{
			public const new Guid IID = .(0x3050f506, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDivElement : IDispatch
		{
			public const new Guid IID = .(0x3050f200, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_noWrap(int16 v) mut => VT.put_noWrap(ref this, v);
			public HRESULT get_noWrap(out int16 p) mut => VT.get_noWrap(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDivElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDivElement self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDivElement self, int16 v) put_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDivElement self, out int16 p) get_noWrap;
			}
		}
		[CRepr]
		public struct DispHTMLDivElement : IDispatch
		{
			public const new Guid IID = .(0x3050f50c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDDElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_noWrap(int16 v) mut => VT.put_noWrap(ref this, v);
			public HRESULT get_noWrap(out int16 p) mut => VT.get_noWrap(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDDElement self, int16 v) put_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDDElement self, out int16 p) get_noWrap;
			}
		}
		[CRepr]
		public struct DispHTMLDDElement : IDispatch
		{
			public const new Guid IID = .(0x3050f50b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDTElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_noWrap(int16 v) mut => VT.put_noWrap(ref this, v);
			public HRESULT get_noWrap(out int16 p) mut => VT.get_noWrap(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDTElement self, int16 v) put_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDTElement self, out int16 p) get_noWrap;
			}
		}
		[CRepr]
		public struct DispHTMLDTElement : IDispatch
		{
			public const new Guid IID = .(0x3050f50d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLBRElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_clear(BSTR v) mut => VT.put_clear(ref this, v);
			public HRESULT get_clear(out BSTR p) mut => VT.get_clear(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBRElement self, BSTR v) put_clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBRElement self, out BSTR p) get_clear;
			}
		}
		[CRepr]
		public struct DispHTMLBRElement : IDispatch
		{
			public const new Guid IID = .(0x3050f53a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_compact(int16 v) mut => VT.put_compact(ref this, v);
			public HRESULT get_compact(out int16 p) mut => VT.get_compact(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDListElement self, int16 v) put_compact;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDListElement self, out int16 p) get_compact;
			}
		}
		[CRepr]
		public struct DispHTMLDListElement : IDispatch
		{
			public const new Guid IID = .(0x3050f53b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLHRElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_color(VARIANT v) mut => VT.put_color(ref this, v);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT put_noShade(int16 v) mut => VT.put_noShade(ref this, v);
			public HRESULT get_noShade(out int16 p) mut => VT.get_noShade(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_size(VARIANT v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out VARIANT p) mut => VT.get_size(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, VARIANT v) put_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, int16 v) put_noShade;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, out int16 p) get_noShade;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, VARIANT v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHRElement self, out VARIANT p) get_size;
			}
		}
		[CRepr]
		public struct DispHTMLHRElement : IDispatch
		{
			public const new Guid IID = .(0x3050f53d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLParaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParaElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParaElement self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct DispHTMLParaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f52c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLElementCollection2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT urns(VARIANT urn, out IDispatch* pdisp) mut => VT.urns(ref this, urn, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection2 self, VARIANT urn, out IDispatch* pdisp) urns;
			}
		}
		[CRepr]
		public struct IHTMLElementCollection3 : IDispatch
		{
			public const new Guid IID = .(0x3050f835, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT namedItem(BSTR name, out IDispatch* pdisp) mut => VT.namedItem(ref this, name, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection3 self, BSTR name, out IDispatch* pdisp) namedItem;
			}
		}
		[CRepr]
		public struct IHTMLElementCollection4 : IDispatch
		{
			public const new Guid IID = .(0x30510425, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out IHTMLElement2* pNode) mut => VT.item(ref this, index, out pNode);
			public HRESULT namedItem(BSTR name, out IHTMLElement2* pNode) mut => VT.namedItem(ref this, name, out pNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection4 self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection4 self, int32 index, out IHTMLElement2* pNode) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLElementCollection4 self, BSTR name, out IHTMLElement2* pNode) namedItem;
			}
		}
		[CRepr]
		public struct DispHTMLElementCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f56b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLHeaderElement : IDispatch
		{
			public const new Guid IID = .(0x3050f1f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHeaderElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHeaderElement self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct DispHTMLHeaderElement : IDispatch
		{
			public const new Guid IID = .(0x3050f515, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLSelectElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f622, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLSelectElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f302, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLOptionElement : IDispatch
		{
			public const new Guid IID = .(0x3050f211, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selected(int16 v) mut => VT.put_selected(ref this, v);
			public HRESULT get_selected(out int16 p) mut => VT.get_selected(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_defaultSelected(int16 v) mut => VT.put_defaultSelected(ref this, v);
			public HRESULT get_defaultSelected(out int16 p) mut => VT.get_defaultSelected(ref this, out p);
			public HRESULT put_index(int32 v) mut => VT.put_index(ref this, v);
			public HRESULT get_index(out int32 p) mut => VT.get_index(ref this, out p);
			public HRESULT put_text(BSTR v) mut => VT.put_text(ref this, v);
			public HRESULT get_text(out BSTR p) mut => VT.get_text(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, int16 v) put_selected;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, out int16 p) get_selected;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, int16 v) put_defaultSelected;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, out int16 p) get_defaultSelected;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, int32 v) put_index;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, out int32 p) get_index;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, BSTR v) put_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, out BSTR p) get_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct IHTMLSelectElementEx : IUnknown
		{
			public const new Guid IID = .(0x3050f2d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ShowDropdown(BOOL fShow) mut => VT.ShowDropdown(ref this, fShow);
			public HRESULT SetSelectExFlags(uint32 lFlags) mut => VT.SetSelectExFlags(ref this, lFlags);
			public HRESULT GetSelectExFlags(out uint32 pFlags) mut => VT.GetSelectExFlags(ref this, out pFlags);
			public HRESULT GetDropdownOpen(out BOOL pfOpen) mut => VT.GetDropdownOpen(ref this, out pfOpen);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElementEx self, BOOL fShow) ShowDropdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElementEx self, uint32 lFlags) SetSelectExFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElementEx self, out uint32 pFlags) GetSelectExFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElementEx self, out BOOL pfOpen) GetDropdownOpen;
			}
		}
		[CRepr]
		public struct IHTMLSelectElement : IDispatch
		{
			public const new Guid IID = .(0x3050f244, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_size(int32 v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out int32 p) mut => VT.get_size(ref this, out p);
			public HRESULT put_multiple(int16 v) mut => VT.put_multiple(ref this, v);
			public HRESULT get_multiple(out int16 p) mut => VT.get_multiple(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT get_options(out IDispatch* p) mut => VT.get_options(ref this, out p);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_selectedIndex(int32 v) mut => VT.put_selectedIndex(ref this, v);
			public HRESULT get_selectedIndex(out int32 p) mut => VT.get_selectedIndex(ref this, out p);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT add(ref IHTMLElement element, VARIANT before) mut => VT.add(ref this, ref element, before);
			public HRESULT remove(int32 index) mut => VT.remove(ref this, index);
			public HRESULT put_length(int32 v) mut => VT.put_length(ref this, v);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(VARIANT name, VARIANT index, out IDispatch* pdisp) mut => VT.item(ref this, name, index, out pdisp);
			public HRESULT tags(VARIANT tagName, out IDispatch* pdisp) mut => VT.tags(ref this, tagName, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, int32 v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out int32 p) get_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, int16 v) put_multiple;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out int16 p) get_multiple;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out IDispatch* p) get_options;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, int32 v) put_selectedIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out int32 p) get_selectedIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, ref IHTMLElement element, VARIANT before) add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, int32 index) remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, int32 v) put_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, VARIANT name, VARIANT index, out IDispatch* pdisp) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement self, VARIANT tagName, out IDispatch* pdisp) tags;
			}
		}
		[CRepr]
		public struct IHTMLSelectElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT urns(VARIANT urn, out IDispatch* pdisp) mut => VT.urns(ref this, urn, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement2 self, VARIANT urn, out IDispatch* pdisp) urns;
			}
		}
		[CRepr]
		public struct IHTMLSelectElement4 : IDispatch
		{
			public const new Guid IID = .(0x3050f838, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT namedItem(BSTR name, out IDispatch* pdisp) mut => VT.namedItem(ref this, name, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement4 self, BSTR name, out IDispatch* pdisp) namedItem;
			}
		}
		[CRepr]
		public struct IHTMLSelectElement5 : IDispatch
		{
			public const new Guid IID = .(0x3051049d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT add(ref IHTMLOptionElement pElem, ref VARIANT pvarBefore) mut => VT.add(ref this, ref pElem, ref pvarBefore);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement5 self, ref IHTMLOptionElement pElem, ref VARIANT pvarBefore) add;
			}
		}
		[CRepr]
		public struct IHTMLSelectElement6 : IDispatch
		{
			public const new Guid IID = .(0x30510760, 0x98b6, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT add(ref IHTMLOptionElement pElem, ref VARIANT pvarBefore) mut => VT.add(ref this, ref pElem, ref pvarBefore);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement6 self, ref IHTMLOptionElement pElem, ref VARIANT pvarBefore) add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement6 self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectElement6 self, out BSTR p) get_value;
			}
		}
		[CRepr]
		public struct DispHTMLSelectElement : IDispatch
		{
			public const new Guid IID = .(0x3050f531, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLWndSelectElement : IDispatch
		{
			public const new Guid IID = .(0x3050f597, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLSelectionObject : IDispatch
		{
			public const new Guid IID = .(0x3050f25a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createRange(out IDispatch* range) mut => VT.createRange(ref this, out range);
			public HRESULT empty() mut => VT.empty(ref this);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectionObject self, out IDispatch* range) createRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectionObject self) empty;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectionObject self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectionObject self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct IHTMLSelectionObject2 : IDispatch
		{
			public const new Guid IID = .(0x3050f7ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createRangeCollection(out IDispatch* rangeCollection) mut => VT.createRangeCollection(ref this, out rangeCollection);
			public HRESULT get_typeDetail(out BSTR p) mut => VT.get_typeDetail(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectionObject2 self, out IDispatch* rangeCollection) createRangeCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelectionObject2 self, out BSTR p) get_typeDetail;
			}
		}
		[CRepr]
		public struct IHTMLSelection : IDispatch
		{
			public const new Guid IID = .(0x305104b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_anchorNode(out IHTMLDOMNode* p) mut => VT.get_anchorNode(ref this, out p);
			public HRESULT get_anchorOffset(out int32 p) mut => VT.get_anchorOffset(ref this, out p);
			public HRESULT get_focusNode(out IHTMLDOMNode* p) mut => VT.get_focusNode(ref this, out p);
			public HRESULT get_focusOffset(out int32 p) mut => VT.get_focusOffset(ref this, out p);
			public HRESULT get_isCollapsed(out int16 p) mut => VT.get_isCollapsed(ref this, out p);
			public HRESULT collapse(ref IDispatch parentNode, int32 offfset) mut => VT.collapse(ref this, ref parentNode, offfset);
			public HRESULT collapseToStart() mut => VT.collapseToStart(ref this);
			public HRESULT collapseToEnd() mut => VT.collapseToEnd(ref this);
			public HRESULT selectAllChildren(ref IDispatch parentNode) mut => VT.selectAllChildren(ref this, ref parentNode);
			public HRESULT deleteFromDocument() mut => VT.deleteFromDocument(ref this);
			public HRESULT get_rangeCount(out int32 p) mut => VT.get_rangeCount(ref this, out p);
			public HRESULT getRangeAt(int32 index, out IHTMLDOMRange* ppRange) mut => VT.getRangeAt(ref this, index, out ppRange);
			public HRESULT addRange(ref IDispatch range) mut => VT.addRange(ref this, ref range);
			public HRESULT removeRange(ref IDispatch range) mut => VT.removeRange(ref this, ref range);
			public HRESULT removeAllRanges() mut => VT.removeAllRanges(ref this);
			public HRESULT toString(out BSTR pSelectionString) mut => VT.toString(ref this, out pSelectionString);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out IHTMLDOMNode* p) get_anchorNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out int32 p) get_anchorOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out IHTMLDOMNode* p) get_focusNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out int32 p) get_focusOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out int16 p) get_isCollapsed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, ref IDispatch parentNode, int32 offfset) collapse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self) collapseToStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self) collapseToEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, ref IDispatch parentNode) selectAllChildren;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self) deleteFromDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out int32 p) get_rangeCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, int32 index, out IHTMLDOMRange* ppRange) getRangeAt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, ref IDispatch range) addRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, ref IDispatch range) removeRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self) removeAllRanges;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSelection self, out BSTR pSelectionString) toString;
			}
		}
		[CRepr]
		public struct IHTMLOptionElement3 : IDispatch
		{
			public const new Guid IID = .(0x3050f820, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_label(BSTR v) mut => VT.put_label(ref this, v);
			public HRESULT get_label(out BSTR p) mut => VT.get_label(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement3 self, BSTR v) put_label;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement3 self, out BSTR p) get_label;
			}
		}
		[CRepr]
		public struct IHTMLOptionElement4 : IDispatch
		{
			public const new Guid IID = .(0x305107b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement4 self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElement4 self, out BSTR p) get_value;
			}
		}
		[CRepr]
		public struct IHTMLOptionElementFactory : IDispatch
		{
			public const new Guid IID = .(0x3050f38c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(VARIANT text, VARIANT value, VARIANT defaultselected, VARIANT selected, out IHTMLOptionElement* __MIDL__IHTMLOptionElementFactory0000) mut => VT.create(ref this, text, value, defaultselected, selected, out __MIDL__IHTMLOptionElementFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionElementFactory self, VARIANT text, VARIANT value, VARIANT defaultselected, VARIANT selected, out IHTMLOptionElement* __MIDL__IHTMLOptionElementFactory0000) create;
			}
		}
		[CRepr]
		public struct DispHTMLOptionElement : IDispatch
		{
			public const new Guid IID = .(0x3050f52b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLWndOptionElement : IDispatch
		{
			public const new Guid IID = .(0x3050f598, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLButtonElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f617, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLButtonElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f2b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLInputTextElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f618, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLOptionButtonElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f619, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLInputFileElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f61a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLInputImageEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f61b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLInputTextElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f2a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLOptionButtonElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f2bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLInputFileElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f2af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLInputImageEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f2c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLInputElement : IDispatch
		{
			public const new Guid IID = .(0x3050f5d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(int16 v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out int16 p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT put_size(int32 v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out int32 p) mut => VT.get_size(ref this, out p);
			public HRESULT put_maxLength(int32 v) mut => VT.put_maxLength(ref this, v);
			public HRESULT get_maxLength(out int32 p) mut => VT.get_maxLength(ref this, out p);
			public HRESULT select() mut => VT.select(ref this);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_defaultValue(BSTR v) mut => VT.put_defaultValue(ref this, v);
			public HRESULT get_defaultValue(out BSTR p) mut => VT.get_defaultValue(ref this, out p);
			public HRESULT put_readOnly(int16 v) mut => VT.put_readOnly(ref this, v);
			public HRESULT get_readOnly(out int16 p) mut => VT.get_readOnly(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);
			public HRESULT put_indeterminate(int16 v) mut => VT.put_indeterminate(ref this, v);
			public HRESULT get_indeterminate(out int16 p) mut => VT.get_indeterminate(ref this, out p);
			public HRESULT put_defaultChecked(int16 v) mut => VT.put_defaultChecked(ref this, v);
			public HRESULT get_defaultChecked(out int16 p) mut => VT.get_defaultChecked(ref this, out p);
			public HRESULT put_checked(int16 v) mut => VT.put_checked(ref this, v);
			public HRESULT get_checked(out int16 p) mut => VT.get_checked(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_vspace(int32 v) mut => VT.put_vspace(ref this, v);
			public HRESULT get_vspace(out int32 p) mut => VT.get_vspace(ref this, out p);
			public HRESULT put_hspace(int32 v) mut => VT.put_hspace(ref this, v);
			public HRESULT get_hspace(out int32 p) mut => VT.get_hspace(ref this, out p);
			public HRESULT put_alt(BSTR v) mut => VT.put_alt(ref this, v);
			public HRESULT get_alt(out BSTR p) mut => VT.get_alt(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_lowsrc(BSTR v) mut => VT.put_lowsrc(ref this, v);
			public HRESULT get_lowsrc(out BSTR p) mut => VT.get_lowsrc(ref this, out p);
			public HRESULT put_vrml(BSTR v) mut => VT.put_vrml(ref this, v);
			public HRESULT get_vrml(out BSTR p) mut => VT.get_vrml(ref this, out p);
			public HRESULT put_dynsrc(BSTR v) mut => VT.put_dynsrc(ref this, v);
			public HRESULT get_dynsrc(out BSTR p) mut => VT.get_dynsrc(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT get_complete(out int16 p) mut => VT.get_complete(ref this, out p);
			public HRESULT put_loop(VARIANT v) mut => VT.put_loop(ref this, v);
			public HRESULT get_loop(out VARIANT p) mut => VT.get_loop(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_onabort(VARIANT v) mut => VT.put_onabort(ref this, v);
			public HRESULT get_onabort(out VARIANT p) mut => VT.get_onabort(ref this, out p);
			public HRESULT put_width(int32 v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(int32 v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT put_start(BSTR v) mut => VT.put_start(ref this, v);
			public HRESULT get_start(out BSTR p) mut => VT.get_start(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int16 v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int32 v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int32 p) get_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int32 v) put_maxLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int32 p) get_maxLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self) select;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_defaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_defaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int16 v) put_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out IHTMLTxtRange* range) createTextRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int16 v) put_indeterminate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_indeterminate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int16 v) put_defaultChecked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_defaultChecked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int16 v) put_checked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_checked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int32 v) put_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int32 p) get_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int32 v) put_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int32 p) get_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int16 p) get_complete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, VARIANT v) put_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out VARIANT p) get_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int32 v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, int32 v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, BSTR v) put_start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement self, out BSTR p) get_start;
			}
		}
		[CRepr]
		public struct IHTMLInputElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f821, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_accept(BSTR v) mut => VT.put_accept(ref this, v);
			public HRESULT get_accept(out BSTR p) mut => VT.get_accept(ref this, out p);
			public HRESULT put_useMap(BSTR v) mut => VT.put_useMap(ref this, v);
			public HRESULT get_useMap(out BSTR p) mut => VT.get_useMap(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement2 self, BSTR v) put_accept;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement2 self, out BSTR p) get_accept;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement2 self, BSTR v) put_useMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement2 self, out BSTR p) get_useMap;
			}
		}
		[CRepr]
		public struct IHTMLInputElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510435, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_lowsrc(BSTR v) mut => VT.put_lowsrc(ref this, v);
			public HRESULT get_lowsrc(out BSTR p) mut => VT.get_lowsrc(ref this, out p);
			public HRESULT put_vrml(BSTR v) mut => VT.put_vrml(ref this, v);
			public HRESULT get_vrml(out BSTR p) mut => VT.get_vrml(ref this, out p);
			public HRESULT put_dynsrc(BSTR v) mut => VT.put_dynsrc(ref this, v);
			public HRESULT get_dynsrc(out BSTR p) mut => VT.get_dynsrc(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, BSTR v) put_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, out BSTR p) get_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, BSTR v) put_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, out BSTR p) get_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, BSTR v) put_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputElement3 self, out BSTR p) get_dynsrc;
			}
		}
		[CRepr]
		public struct IHTMLInputButtonElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(VARIANT v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out VARIANT p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, VARIANT v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out VARIANT p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputButtonElement self, out IHTMLTxtRange* range) createTextRange;
			}
		}
		[CRepr]
		public struct IHTMLInputHiddenElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(VARIANT v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out VARIANT p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, VARIANT v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out VARIANT p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputHiddenElement self, out IHTMLTxtRange* range) createTextRange;
			}
		}
		[CRepr]
		public struct IHTMLInputTextElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(VARIANT v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out VARIANT p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT put_defaultValue(BSTR v) mut => VT.put_defaultValue(ref this, v);
			public HRESULT get_defaultValue(out BSTR p) mut => VT.get_defaultValue(ref this, out p);
			public HRESULT put_size(int32 v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out int32 p) mut => VT.get_size(ref this, out p);
			public HRESULT put_maxLength(int32 v) mut => VT.put_maxLength(ref this, v);
			public HRESULT get_maxLength(out int32 p) mut => VT.get_maxLength(ref this, out p);
			public HRESULT select() mut => VT.select(ref this);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_readOnly(int16 v) mut => VT.put_readOnly(ref this, v);
			public HRESULT get_readOnly(out int16 p) mut => VT.get_readOnly(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, VARIANT v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out VARIANT p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, BSTR v) put_defaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out BSTR p) get_defaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, int32 v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out int32 p) get_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, int32 v) put_maxLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out int32 p) get_maxLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self) select;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, int16 v) put_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out int16 p) get_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement self, out IHTMLTxtRange* range) createTextRange;
			}
		}
		[CRepr]
		public struct IHTMLInputTextElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f2d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selectionStart(int32 v) mut => VT.put_selectionStart(ref this, v);
			public HRESULT get_selectionStart(out int32 p) mut => VT.get_selectionStart(ref this, out p);
			public HRESULT put_selectionEnd(int32 v) mut => VT.put_selectionEnd(ref this, v);
			public HRESULT get_selectionEnd(out int32 p) mut => VT.get_selectionEnd(ref this, out p);
			public HRESULT setSelectionRange(int32 start, int32 end) mut => VT.setSelectionRange(ref this, start, end);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement2 self, int32 v) put_selectionStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement2 self, out int32 p) get_selectionStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement2 self, int32 v) put_selectionEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement2 self, out int32 p) get_selectionEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputTextElement2 self, int32 start, int32 end) setSelectionRange;
			}
		}
		[CRepr]
		public struct IHTMLInputFileElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(VARIANT v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out VARIANT p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT put_size(int32 v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out int32 p) mut => VT.get_size(ref this, out p);
			public HRESULT put_maxLength(int32 v) mut => VT.put_maxLength(ref this, v);
			public HRESULT get_maxLength(out int32 p) mut => VT.get_maxLength(ref this, out p);
			public HRESULT select() mut => VT.select(ref this);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, VARIANT v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out VARIANT p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, int32 v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out int32 p) get_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, int32 v) put_maxLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out int32 p) get_maxLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self) select;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputFileElement self, out BSTR p) get_value;
			}
		}
		[CRepr]
		public struct IHTMLOptionButtonElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_checked(int16 v) mut => VT.put_checked(ref this, v);
			public HRESULT get_checked(out int16 p) mut => VT.get_checked(ref this, out p);
			public HRESULT put_defaultChecked(int16 v) mut => VT.put_defaultChecked(ref this, v);
			public HRESULT get_defaultChecked(out int16 p) mut => VT.get_defaultChecked(ref this, out p);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT put_status(int16 v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out int16 p) mut => VT.get_status(ref this, out p);
			public HRESULT put_indeterminate(int16 v) mut => VT.put_indeterminate(ref this, v);
			public HRESULT get_indeterminate(out int16 p) mut => VT.get_indeterminate(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, int16 v) put_checked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out int16 p) get_checked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, int16 v) put_defaultChecked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out int16 p) get_defaultChecked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, int16 v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out int16 p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, int16 v) put_indeterminate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out int16 p) get_indeterminate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionButtonElement self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct IHTMLInputImage : IDispatch
		{
			public const new Guid IID = .(0x3050f2c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_vspace(int32 v) mut => VT.put_vspace(ref this, v);
			public HRESULT get_vspace(out int32 p) mut => VT.get_vspace(ref this, out p);
			public HRESULT put_hspace(int32 v) mut => VT.put_hspace(ref this, v);
			public HRESULT get_hspace(out int32 p) mut => VT.get_hspace(ref this, out p);
			public HRESULT put_alt(BSTR v) mut => VT.put_alt(ref this, v);
			public HRESULT get_alt(out BSTR p) mut => VT.get_alt(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_lowsrc(BSTR v) mut => VT.put_lowsrc(ref this, v);
			public HRESULT get_lowsrc(out BSTR p) mut => VT.get_lowsrc(ref this, out p);
			public HRESULT put_vrml(BSTR v) mut => VT.put_vrml(ref this, v);
			public HRESULT get_vrml(out BSTR p) mut => VT.get_vrml(ref this, out p);
			public HRESULT put_dynsrc(BSTR v) mut => VT.put_dynsrc(ref this, v);
			public HRESULT get_dynsrc(out BSTR p) mut => VT.get_dynsrc(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT get_complete(out int16 p) mut => VT.get_complete(ref this, out p);
			public HRESULT put_loop(VARIANT v) mut => VT.put_loop(ref this, v);
			public HRESULT get_loop(out VARIANT p) mut => VT.get_loop(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_onabort(VARIANT v) mut => VT.put_onabort(ref this, v);
			public HRESULT get_onabort(out VARIANT p) mut => VT.get_onabort(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_width(int32 v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(int32 v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT put_start(BSTR v) mut => VT.put_start(ref this, v);
			public HRESULT get_start(out BSTR p) mut => VT.get_start(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, int32 v) put_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out int32 p) get_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, int32 v) put_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out int32 p) get_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_lowsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_vrml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_dynsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out int16 p) get_complete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, VARIANT v) put_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out VARIANT p) get_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, VARIANT v) put_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out VARIANT p) get_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, int32 v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, int32 v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, BSTR v) put_start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputImage self, out BSTR p) get_start;
			}
		}
		[CRepr]
		public struct IHTMLInputRangeElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_alt(BSTR v) mut => VT.put_alt(ref this, v);
			public HRESULT get_alt(out BSTR p) mut => VT.get_alt(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_min(BSTR v) mut => VT.put_min(ref this, v);
			public HRESULT get_min(out BSTR p) mut => VT.get_min(ref this, out p);
			public HRESULT put_max(BSTR v) mut => VT.put_max(ref this, v);
			public HRESULT get_max(out BSTR p) mut => VT.get_max(ref this, out p);
			public HRESULT put_step(BSTR v) mut => VT.put_step(ref this, v);
			public HRESULT get_step(out BSTR p) mut => VT.get_step(ref this, out p);
			public HRESULT put_valueAsNumber(double v) mut => VT.put_valueAsNumber(ref this, v);
			public HRESULT get_valueAsNumber(out double p) mut => VT.get_valueAsNumber(ref this, out p);
			public HRESULT stepUp(int32 n) mut => VT.stepUp(ref this, n);
			public HRESULT stepDown(int32 n) mut => VT.stepDown(ref this, n);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, BSTR v) put_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, BSTR v) put_min;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_min;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, BSTR v) put_max;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_max;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, BSTR v) put_step;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out BSTR p) get_step;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, double v) put_valueAsNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, out double p) get_valueAsNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, int32 n) stepUp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLInputRangeElement self, int32 n) stepDown;
			}
		}
		[CRepr]
		public struct DispHTMLInputElement : IDispatch
		{
			public const new Guid IID = .(0x3050f57d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLTextAreaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(VARIANT v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out VARIANT p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT put_defaultValue(BSTR v) mut => VT.put_defaultValue(ref this, v);
			public HRESULT get_defaultValue(out BSTR p) mut => VT.get_defaultValue(ref this, out p);
			public HRESULT select() mut => VT.select(ref this);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_readOnly(int16 v) mut => VT.put_readOnly(ref this, v);
			public HRESULT get_readOnly(out int16 p) mut => VT.get_readOnly(ref this, out p);
			public HRESULT put_rows(int32 v) mut => VT.put_rows(ref this, v);
			public HRESULT get_rows(out int32 p) mut => VT.get_rows(ref this, out p);
			public HRESULT put_cols(int32 v) mut => VT.put_cols(ref this, v);
			public HRESULT get_cols(out int32 p) mut => VT.get_cols(ref this, out p);
			public HRESULT put_wrap(BSTR v) mut => VT.put_wrap(ref this, v);
			public HRESULT get_wrap(out BSTR p) mut => VT.get_wrap(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, VARIANT v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out VARIANT p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, BSTR v) put_defaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out BSTR p) get_defaultValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self) select;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, int16 v) put_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out int16 p) get_readOnly;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, int32 v) put_rows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out int32 p) get_rows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, int32 v) put_cols;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out int32 p) get_cols;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, BSTR v) put_wrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out BSTR p) get_wrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement self, out IHTMLTxtRange* range) createTextRange;
			}
		}
		[CRepr]
		public struct IHTMLTextAreaElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f2d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selectionStart(int32 v) mut => VT.put_selectionStart(ref this, v);
			public HRESULT get_selectionStart(out int32 p) mut => VT.get_selectionStart(ref this, out p);
			public HRESULT put_selectionEnd(int32 v) mut => VT.put_selectionEnd(ref this, v);
			public HRESULT get_selectionEnd(out int32 p) mut => VT.get_selectionEnd(ref this, out p);
			public HRESULT setSelectionRange(int32 start, int32 end) mut => VT.setSelectionRange(ref this, start, end);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement2 self, int32 v) put_selectionStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement2 self, out int32 p) get_selectionStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement2 self, int32 v) put_selectionEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement2 self, out int32 p) get_selectionEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTextAreaElement2 self, int32 start, int32 end) setSelectionRange;
			}
		}
		[CRepr]
		public struct DispHTMLTextAreaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f521, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLRichtextElement : IDispatch
		{
			public const new Guid IID = .(0x3050f54d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLButtonElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_status(VARIANT v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out VARIANT p) mut => VT.get_status(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT createTextRange(out IHTMLTxtRange* range) mut => VT.createTextRange(ref this, out range);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, VARIANT v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out VARIANT p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement self, out IHTMLTxtRange* range) createTextRange;
			}
		}
		[CRepr]
		public struct IHTMLButtonElement2 : IDispatch
		{
			public const new Guid IID = .(0x305106f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement2 self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLButtonElement2 self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct DispHTMLButtonElement : IDispatch
		{
			public const new Guid IID = .(0x3050f51f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLMarqueeElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f61f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLMarqueeElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f2b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLMarqueeElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT put_scrollDelay(int32 v) mut => VT.put_scrollDelay(ref this, v);
			public HRESULT get_scrollDelay(out int32 p) mut => VT.get_scrollDelay(ref this, out p);
			public HRESULT put_direction(BSTR v) mut => VT.put_direction(ref this, v);
			public HRESULT get_direction(out BSTR p) mut => VT.get_direction(ref this, out p);
			public HRESULT put_behavior(BSTR v) mut => VT.put_behavior(ref this, v);
			public HRESULT get_behavior(out BSTR p) mut => VT.get_behavior(ref this, out p);
			public HRESULT put_scrollAmount(int32 v) mut => VT.put_scrollAmount(ref this, v);
			public HRESULT get_scrollAmount(out int32 p) mut => VT.get_scrollAmount(ref this, out p);
			public HRESULT put_loop(int32 v) mut => VT.put_loop(ref this, v);
			public HRESULT get_loop(out int32 p) mut => VT.get_loop(ref this, out p);
			public HRESULT put_vspace(int32 v) mut => VT.put_vspace(ref this, v);
			public HRESULT get_vspace(out int32 p) mut => VT.get_vspace(ref this, out p);
			public HRESULT put_hspace(int32 v) mut => VT.put_hspace(ref this, v);
			public HRESULT get_hspace(out int32 p) mut => VT.get_hspace(ref this, out p);
			public HRESULT put_onfinish(VARIANT v) mut => VT.put_onfinish(ref this, v);
			public HRESULT get_onfinish(out VARIANT p) mut => VT.get_onfinish(ref this, out p);
			public HRESULT put_onstart(VARIANT v) mut => VT.put_onstart(ref this, v);
			public HRESULT get_onstart(out VARIANT p) mut => VT.get_onstart(ref this, out p);
			public HRESULT put_onbounce(VARIANT v) mut => VT.put_onbounce(ref this, v);
			public HRESULT get_onbounce(out VARIANT p) mut => VT.get_onbounce(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_trueSpeed(int16 v) mut => VT.put_trueSpeed(ref this, v);
			public HRESULT get_trueSpeed(out int16 p) mut => VT.get_trueSpeed(ref this, out p);
			public HRESULT start() mut => VT.start(ref this);
			public HRESULT stop() mut => VT.stop(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, int32 v) put_scrollDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out int32 p) get_scrollDelay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, BSTR v) put_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out BSTR p) get_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, BSTR v) put_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out BSTR p) get_behavior;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, int32 v) put_scrollAmount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out int32 p) get_scrollAmount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, int32 v) put_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out int32 p) get_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, int32 v) put_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out int32 p) get_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, int32 v) put_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out int32 p) get_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, VARIANT v) put_onfinish;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out VARIANT p) get_onfinish;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, VARIANT v) put_onstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out VARIANT p) get_onstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, VARIANT v) put_onbounce;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out VARIANT p) get_onbounce;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, int16 v) put_trueSpeed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self, out int16 p) get_trueSpeed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self) start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMarqueeElement self) stop;
			}
		}
		[CRepr]
		public struct DispHTMLMarqueeElement : IDispatch
		{
			public const new Guid IID = .(0x3050f527, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLHtmlElement : IDispatch
		{
			public const new Guid IID = .(0x3050f81c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_version(BSTR v) mut => VT.put_version(ref this, v);
			public HRESULT get_version(out BSTR p) mut => VT.get_version(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHtmlElement self, BSTR v) put_version;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHtmlElement self, out BSTR p) get_version;
			}
		}
		[CRepr]
		public struct IHTMLHeadElement : IDispatch
		{
			public const new Guid IID = .(0x3050f81d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_profile(BSTR v) mut => VT.put_profile(ref this, v);
			public HRESULT get_profile(out BSTR p) mut => VT.get_profile(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHeadElement self, BSTR v) put_profile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHeadElement self, out BSTR p) get_profile;
			}
		}
		[CRepr]
		public struct IHTMLHeadElement2 : IDispatch
		{
			public const new Guid IID = .(0x3051042f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_profile(BSTR v) mut => VT.put_profile(ref this, v);
			public HRESULT get_profile(out BSTR p) mut => VT.get_profile(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHeadElement2 self, BSTR v) put_profile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLHeadElement2 self, out BSTR p) get_profile;
			}
		}
		[CRepr]
		public struct IHTMLTitleElement : IDispatch
		{
			public const new Guid IID = .(0x3050f322, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_text(BSTR v) mut => VT.put_text(ref this, v);
			public HRESULT get_text(out BSTR p) mut => VT.get_text(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTitleElement self, BSTR v) put_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTitleElement self, out BSTR p) get_text;
			}
		}
		[CRepr]
		public struct IHTMLMetaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f203, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_httpEquiv(BSTR v) mut => VT.put_httpEquiv(ref this, v);
			public HRESULT get_httpEquiv(out BSTR p) mut => VT.get_httpEquiv(ref this, out p);
			public HRESULT put_content(BSTR v) mut => VT.put_content(ref this, v);
			public HRESULT get_content(out BSTR p) mut => VT.get_content(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_url(BSTR v) mut => VT.put_url(ref this, v);
			public HRESULT get_url(out BSTR p) mut => VT.get_url(ref this, out p);
			public HRESULT put_charset(BSTR v) mut => VT.put_charset(ref this, v);
			public HRESULT get_charset(out BSTR p) mut => VT.get_charset(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, BSTR v) put_httpEquiv;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, out BSTR p) get_httpEquiv;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, BSTR v) put_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, out BSTR p) get_content;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, BSTR v) put_url;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, out BSTR p) get_url;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, BSTR v) put_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement self, out BSTR p) get_charset;
			}
		}
		[CRepr]
		public struct IHTMLMetaElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f81f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_scheme(BSTR v) mut => VT.put_scheme(ref this, v);
			public HRESULT get_scheme(out BSTR p) mut => VT.get_scheme(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement2 self, BSTR v) put_scheme;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement2 self, out BSTR p) get_scheme;
			}
		}
		[CRepr]
		public struct IHTMLMetaElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510495, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_url(BSTR v) mut => VT.put_url(ref this, v);
			public HRESULT get_url(out BSTR p) mut => VT.get_url(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement3 self, BSTR v) put_url;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMetaElement3 self, out BSTR p) get_url;
			}
		}
		[CRepr]
		public struct IHTMLBaseElement : IDispatch
		{
			public const new Guid IID = .(0x3050f204, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT put_target(BSTR v) mut => VT.put_target(ref this, v);
			public HRESULT get_target(out BSTR p) mut => VT.get_target(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseElement self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseElement self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseElement self, BSTR v) put_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseElement self, out BSTR p) get_target;
			}
		}
		[CRepr]
		public struct IHTMLBaseElement2 : IDispatch
		{
			public const new Guid IID = .(0x30510420, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseElement2 self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseElement2 self, out BSTR p) get_href;
			}
		}
		[CRepr]
		public struct DispHTMLHtmlElement : IDispatch
		{
			public const new Guid IID = .(0x3050f560, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLHeadElement : IDispatch
		{
			public const new Guid IID = .(0x3050f561, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTitleElement : IDispatch
		{
			public const new Guid IID = .(0x3050f516, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLMetaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f517, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLBaseElement : IDispatch
		{
			public const new Guid IID = .(0x3050f518, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLIsIndexElement : IDispatch
		{
			public const new Guid IID = .(0x3050f206, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_prompt(BSTR v) mut => VT.put_prompt(ref this, v);
			public HRESULT get_prompt(out BSTR p) mut => VT.get_prompt(ref this, out p);
			public HRESULT put_action(BSTR v) mut => VT.put_action(ref this, v);
			public HRESULT get_action(out BSTR p) mut => VT.get_action(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIsIndexElement self, BSTR v) put_prompt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIsIndexElement self, out BSTR p) get_prompt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIsIndexElement self, BSTR v) put_action;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIsIndexElement self, out BSTR p) get_action;
			}
		}
		[CRepr]
		public struct IHTMLIsIndexElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f82f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIsIndexElement2 self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct IHTMLNextIdElement : IDispatch
		{
			public const new Guid IID = .(0x3050f207, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_n(BSTR v) mut => VT.put_n(ref this, v);
			public HRESULT get_n(out BSTR p) mut => VT.get_n(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNextIdElement self, BSTR v) put_n;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNextIdElement self, out BSTR p) get_n;
			}
		}
		[CRepr]
		public struct DispHTMLIsIndexElement : IDispatch
		{
			public const new Guid IID = .(0x3050f519, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLNextIdElement : IDispatch
		{
			public const new Guid IID = .(0x3050f51a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLBaseFontElement : IDispatch
		{
			public const new Guid IID = .(0x3050f202, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_color(VARIANT v) mut => VT.put_color(ref this, v);
			public HRESULT get_color(out VARIANT p) mut => VT.get_color(ref this, out p);
			public HRESULT put_face(BSTR v) mut => VT.put_face(ref this, v);
			public HRESULT get_face(out BSTR p) mut => VT.get_face(ref this, out p);
			public HRESULT put_size(int32 v) mut => VT.put_size(ref this, v);
			public HRESULT get_size(out int32 p) mut => VT.get_size(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseFontElement self, VARIANT v) put_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseFontElement self, out VARIANT p) get_color;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseFontElement self, BSTR v) put_face;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseFontElement self, out BSTR p) get_face;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseFontElement self, int32 v) put_size;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBaseFontElement self, out int32 p) get_size;
			}
		}
		[CRepr]
		public struct DispHTMLBaseFontElement : IDispatch
		{
			public const new Guid IID = .(0x3050f504, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLUnknownElement : IDispatch
		{
			public const new Guid IID = .(0x3050f209, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLUnknownElement : IDispatch
		{
			public const new Guid IID = .(0x3050f539, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IWebGeolocation : IDispatch
		{
			public const new Guid IID = .(0x305107c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getCurrentPosition(ref IDispatch successCallback, ref IDispatch errorCallback, ref IDispatch options) mut => VT.getCurrentPosition(ref this, ref successCallback, ref errorCallback, ref options);
			public HRESULT watchPosition(ref IDispatch successCallback, ref IDispatch errorCallback, ref IDispatch options, out int32 watchId) mut => VT.watchPosition(ref this, ref successCallback, ref errorCallback, ref options, out watchId);
			public HRESULT clearWatch(int32 watchId) mut => VT.clearWatch(ref this, watchId);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeolocation self, ref IDispatch successCallback, ref IDispatch errorCallback, ref IDispatch options) getCurrentPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeolocation self, ref IDispatch successCallback, ref IDispatch errorCallback, ref IDispatch options, out int32 watchId) watchPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeolocation self, int32 watchId) clearWatch;
			}
		}
		[CRepr]
		public struct IHTMLMimeTypesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f3fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMimeTypesCollection self, out int32 p) get_length;
			}
		}
		[CRepr]
		public struct IHTMLPluginsCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f3fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT refresh(int16 reload) mut => VT.refresh(ref this, reload);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPluginsCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPluginsCollection self, int16 reload) refresh;
			}
		}
		[CRepr]
		public struct IOmHistory : IDispatch
		{
			public const new Guid IID = .(0xfeceaaa2, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int16 p) mut => VT.get_length(ref this, out p);
			public HRESULT back(ref VARIANT pvargdistance) mut => VT.back(ref this, ref pvargdistance);
			public HRESULT forward(ref VARIANT pvargdistance) mut => VT.forward(ref this, ref pvargdistance);
			public HRESULT go(ref VARIANT pvargdistance) mut => VT.go(ref this, ref pvargdistance);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmHistory self, out int16 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmHistory self, ref VARIANT pvargdistance) back;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmHistory self, ref VARIANT pvargdistance) forward;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmHistory self, ref VARIANT pvargdistance) go;
			}
		}
		[CRepr]
		public struct IHTMLOpsProfile : IDispatch
		{
			public const new Guid IID = .(0x3050f401, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT addRequest(BSTR name, VARIANT reserved, out int16 success) mut => VT.addRequest(ref this, name, reserved, out success);
			public HRESULT clearRequest() mut => VT.clearRequest(ref this);
			public HRESULT doRequest(VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) mut => VT.doRequest(ref this, usage, fname, domain, path, expire, reserved);
			public HRESULT getAttribute(BSTR name, out BSTR value) mut => VT.getAttribute(ref this, name, out value);
			public HRESULT setAttribute(BSTR name, BSTR value, VARIANT prefs, out int16 success) mut => VT.setAttribute(ref this, name, value, prefs, out success);
			public HRESULT commitChanges(out int16 success) mut => VT.commitChanges(ref this, out success);
			public HRESULT addReadRequest(BSTR name, VARIANT reserved, out int16 success) mut => VT.addReadRequest(ref this, name, reserved, out success);
			public HRESULT doReadRequest(VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) mut => VT.doReadRequest(ref this, usage, fname, domain, path, expire, reserved);
			public HRESULT doWriteRequest(out int16 success) mut => VT.doWriteRequest(ref this, out success);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, BSTR name, VARIANT reserved, out int16 success) addRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self) clearRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) doRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, BSTR name, out BSTR value) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, BSTR name, BSTR value, VARIANT prefs, out int16 success) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, out int16 success) commitChanges;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, BSTR name, VARIANT reserved, out int16 success) addReadRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) doReadRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOpsProfile self, out int16 success) doWriteRequest;
			}
		}
		[CRepr]
		public struct IOmNavigator : IDispatch
		{
			public const new Guid IID = .(0xfeceaaa5, 0x8405, 0x11cf, 0x8b, 0xa1, 0x00, 0xaa, 0x00, 0x47, 0x6d, 0xa6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_appCodeName(out BSTR p) mut => VT.get_appCodeName(ref this, out p);
			public HRESULT get_appName(out BSTR p) mut => VT.get_appName(ref this, out p);
			public HRESULT get_appVersion(out BSTR p) mut => VT.get_appVersion(ref this, out p);
			public HRESULT get_userAgent(out BSTR p) mut => VT.get_userAgent(ref this, out p);
			public HRESULT javaEnabled(out int16 enabled) mut => VT.javaEnabled(ref this, out enabled);
			public HRESULT taintEnabled(out int16 enabled) mut => VT.taintEnabled(ref this, out enabled);
			public HRESULT get_mimeTypes(out IHTMLMimeTypesCollection* p) mut => VT.get_mimeTypes(ref this, out p);
			public HRESULT get_plugins(out IHTMLPluginsCollection* p) mut => VT.get_plugins(ref this, out p);
			public HRESULT get_cookieEnabled(out int16 p) mut => VT.get_cookieEnabled(ref this, out p);
			public HRESULT get_opsProfile(out IHTMLOpsProfile* p) mut => VT.get_opsProfile(ref this, out p);
			public HRESULT toString(out BSTR string) mut => VT.toString(ref this, out string);
			public HRESULT get_cpuClass(out BSTR p) mut => VT.get_cpuClass(ref this, out p);
			public HRESULT get_systemLanguage(out BSTR p) mut => VT.get_systemLanguage(ref this, out p);
			public HRESULT get_browserLanguage(out BSTR p) mut => VT.get_browserLanguage(ref this, out p);
			public HRESULT get_userLanguage(out BSTR p) mut => VT.get_userLanguage(ref this, out p);
			public HRESULT get_platform(out BSTR p) mut => VT.get_platform(ref this, out p);
			public HRESULT get_appMinorVersion(out BSTR p) mut => VT.get_appMinorVersion(ref this, out p);
			public HRESULT get_connectionSpeed(out int32 p) mut => VT.get_connectionSpeed(ref this, out p);
			public HRESULT get_onLine(out int16 p) mut => VT.get_onLine(ref this, out p);
			public HRESULT get_userProfile(out IHTMLOpsProfile* p) mut => VT.get_userProfile(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_appCodeName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_appName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_appVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_userAgent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out int16 enabled) javaEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out int16 enabled) taintEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out IHTMLMimeTypesCollection* p) get_mimeTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out IHTMLPluginsCollection* p) get_plugins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out int16 p) get_cookieEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out IHTMLOpsProfile* p) get_opsProfile;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR string) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_cpuClass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_systemLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_browserLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_userLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_platform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out BSTR p) get_appMinorVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out int32 p) get_connectionSpeed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out int16 p) get_onLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOmNavigator self, out IHTMLOpsProfile* p) get_userProfile;
			}
		}
		[CRepr]
		public struct INavigatorGeolocation : IDispatch
		{
			public const new Guid IID = .(0x305107cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_geolocation(out IWebGeolocation* p) mut => VT.get_geolocation(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref INavigatorGeolocation self, out IWebGeolocation* p) get_geolocation;
			}
		}
		[CRepr]
		public struct INavigatorDoNotTrack : IDispatch
		{
			public const new Guid IID = .(0x30510804, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_msDoNotTrack(out BSTR p) mut => VT.get_msDoNotTrack(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref INavigatorDoNotTrack self, out BSTR p) get_msDoNotTrack;
			}
		}
		[CRepr]
		public struct IHTMLLocation : IDispatch
		{
			public const new Guid IID = .(0x163bb1e0, 0x6e00, 0x11cf, 0x83, 0x7a, 0x48, 0xdc, 0x04, 0xc1, 0x00, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT put_protocol(BSTR v) mut => VT.put_protocol(ref this, v);
			public HRESULT get_protocol(out BSTR p) mut => VT.get_protocol(ref this, out p);
			public HRESULT put_host(BSTR v) mut => VT.put_host(ref this, v);
			public HRESULT get_host(out BSTR p) mut => VT.get_host(ref this, out p);
			public HRESULT put_hostname(BSTR v) mut => VT.put_hostname(ref this, v);
			public HRESULT get_hostname(out BSTR p) mut => VT.get_hostname(ref this, out p);
			public HRESULT put_port(BSTR v) mut => VT.put_port(ref this, v);
			public HRESULT get_port(out BSTR p) mut => VT.get_port(ref this, out p);
			public HRESULT put_pathname(BSTR v) mut => VT.put_pathname(ref this, v);
			public HRESULT get_pathname(out BSTR p) mut => VT.get_pathname(ref this, out p);
			public HRESULT put_search(BSTR v) mut => VT.put_search(ref this, v);
			public HRESULT get_search(out BSTR p) mut => VT.get_search(ref this, out p);
			public HRESULT put_hash(BSTR v) mut => VT.put_hash(ref this, v);
			public HRESULT get_hash(out BSTR p) mut => VT.get_hash(ref this, out p);
			public HRESULT reload(int16 flag) mut => VT.reload(ref this, flag);
			public HRESULT replace(BSTR bstr) mut => VT.replace(ref this, bstr);
			public HRESULT assign(BSTR bstr) mut => VT.assign(ref this, bstr);
			public HRESULT toString(out BSTR string) mut => VT.toString(ref this, out string);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_host;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_host;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_hostname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_hostname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_port;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_port;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_pathname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_pathname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_search;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_search;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR v) put_hash;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR p) get_hash;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, int16 flag) reload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR bstr) replace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, BSTR bstr) assign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLocation self, out BSTR string) toString;
			}
		}
		[CRepr]
		public struct DispHTMLHistory : IDispatch
		{
			public const new Guid IID = .(0x3050f549, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLNavigator : IDispatch
		{
			public const new Guid IID = .(0x3050f54c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLLocation : IDispatch
		{
			public const new Guid IID = .(0x3050f54e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispCPlugins : IDispatch
		{
			public const new Guid IID = .(0x3050f54a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLBookmarkCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f4ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(int32 index, out VARIANT pVarBookmark) mut => VT.item(ref this, index, out pVarBookmark);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBookmarkCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBookmarkCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBookmarkCollection self, int32 index, out VARIANT pVarBookmark) item;
			}
		}
		[CRepr]
		public struct IHTMLDataTransfer : IDispatch
		{
			public const new Guid IID = .(0x3050f4b3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT setData(BSTR format, ref VARIANT data, out int16 pret) mut => VT.setData(ref this, format, ref data, out pret);
			public HRESULT getData(BSTR format, out VARIANT pvarRet) mut => VT.getData(ref this, format, out pvarRet);
			public HRESULT clearData(BSTR format, out int16 pret) mut => VT.clearData(ref this, format, out pret);
			public HRESULT put_dropEffect(BSTR v) mut => VT.put_dropEffect(ref this, v);
			public HRESULT get_dropEffect(out BSTR p) mut => VT.get_dropEffect(ref this, out p);
			public HRESULT put_effectAllowed(BSTR v) mut => VT.put_effectAllowed(ref this, v);
			public HRESULT get_effectAllowed(out BSTR p) mut => VT.get_effectAllowed(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, BSTR format, ref VARIANT data, out int16 pret) setData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, BSTR format, out VARIANT pvarRet) getData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, BSTR format, out int16 pret) clearData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, BSTR v) put_dropEffect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, out BSTR p) get_dropEffect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, BSTR v) put_effectAllowed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDataTransfer self, out BSTR p) get_effectAllowed;
			}
		}
		[CRepr]
		public struct IHTMLEventObj2 : IDispatch
		{
			public const new Guid IID = .(0x3050f48b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT setAttribute(BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) mut => VT.setAttribute(ref this, strAttributeName, AttributeValue, lFlags);
			public HRESULT getAttribute(BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) mut => VT.getAttribute(ref this, strAttributeName, lFlags, out AttributeValue);
			public HRESULT removeAttribute(BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) mut => VT.removeAttribute(ref this, strAttributeName, lFlags, out pfSuccess);
			public HRESULT put_propertyName(BSTR v) mut => VT.put_propertyName(ref this, v);
			public HRESULT get_propertyName(out BSTR p) mut => VT.get_propertyName(ref this, out p);
			public HRESULT putref_bookmarks(ref IHTMLBookmarkCollection v) mut => VT.putref_bookmarks(ref this, ref v);
			public HRESULT get_bookmarks(out IHTMLBookmarkCollection* p) mut => VT.get_bookmarks(ref this, out p);
			public HRESULT putref_recordset(ref IDispatch v) mut => VT.putref_recordset(ref this, ref v);
			public HRESULT get_recordset(out IDispatch* p) mut => VT.get_recordset(ref this, out p);
			public HRESULT put_dataFld(BSTR v) mut => VT.put_dataFld(ref this, v);
			public HRESULT get_dataFld(out BSTR p) mut => VT.get_dataFld(ref this, out p);
			public HRESULT putref_boundElements(ref IHTMLElementCollection v) mut => VT.putref_boundElements(ref this, ref v);
			public HRESULT get_boundElements(out IHTMLElementCollection* p) mut => VT.get_boundElements(ref this, out p);
			public HRESULT put_repeat(int16 v) mut => VT.put_repeat(ref this, v);
			public HRESULT get_repeat(out int16 p) mut => VT.get_repeat(ref this, out p);
			public HRESULT put_srcUrn(BSTR v) mut => VT.put_srcUrn(ref this, v);
			public HRESULT get_srcUrn(out BSTR p) mut => VT.get_srcUrn(ref this, out p);
			public HRESULT putref_srcElement(ref IHTMLElement v) mut => VT.putref_srcElement(ref this, ref v);
			public HRESULT get_srcElement(out IHTMLElement* p) mut => VT.get_srcElement(ref this, out p);
			public HRESULT put_altKey(int16 v) mut => VT.put_altKey(ref this, v);
			public HRESULT get_altKey(out int16 p) mut => VT.get_altKey(ref this, out p);
			public HRESULT put_ctrlKey(int16 v) mut => VT.put_ctrlKey(ref this, v);
			public HRESULT get_ctrlKey(out int16 p) mut => VT.get_ctrlKey(ref this, out p);
			public HRESULT put_shiftKey(int16 v) mut => VT.put_shiftKey(ref this, v);
			public HRESULT get_shiftKey(out int16 p) mut => VT.get_shiftKey(ref this, out p);
			public HRESULT putref_fromElement(ref IHTMLElement v) mut => VT.putref_fromElement(ref this, ref v);
			public HRESULT get_fromElement(out IHTMLElement* p) mut => VT.get_fromElement(ref this, out p);
			public HRESULT putref_toElement(ref IHTMLElement v) mut => VT.putref_toElement(ref this, ref v);
			public HRESULT get_toElement(out IHTMLElement* p) mut => VT.get_toElement(ref this, out p);
			public HRESULT put_button(int32 v) mut => VT.put_button(ref this, v);
			public HRESULT get_button(out int32 p) mut => VT.get_button(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_qualifier(BSTR v) mut => VT.put_qualifier(ref this, v);
			public HRESULT get_qualifier(out BSTR p) mut => VT.get_qualifier(ref this, out p);
			public HRESULT put_reason(int32 v) mut => VT.put_reason(ref this, v);
			public HRESULT get_reason(out int32 p) mut => VT.get_reason(ref this, out p);
			public HRESULT put_x(int32 v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out int32 p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(int32 v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out int32 p) mut => VT.get_y(ref this, out p);
			public HRESULT put_clientX(int32 v) mut => VT.put_clientX(ref this, v);
			public HRESULT get_clientX(out int32 p) mut => VT.get_clientX(ref this, out p);
			public HRESULT put_clientY(int32 v) mut => VT.put_clientY(ref this, v);
			public HRESULT get_clientY(out int32 p) mut => VT.get_clientY(ref this, out p);
			public HRESULT put_offsetX(int32 v) mut => VT.put_offsetX(ref this, v);
			public HRESULT get_offsetX(out int32 p) mut => VT.get_offsetX(ref this, out p);
			public HRESULT put_offsetY(int32 v) mut => VT.put_offsetY(ref this, v);
			public HRESULT get_offsetY(out int32 p) mut => VT.get_offsetY(ref this, out p);
			public HRESULT put_screenX(int32 v) mut => VT.put_screenX(ref this, v);
			public HRESULT get_screenX(out int32 p) mut => VT.get_screenX(ref this, out p);
			public HRESULT put_screenY(int32 v) mut => VT.put_screenY(ref this, v);
			public HRESULT get_screenY(out int32 p) mut => VT.get_screenY(ref this, out p);
			public HRESULT putref_srcFilter(ref IDispatch v) mut => VT.putref_srcFilter(ref this, ref v);
			public HRESULT get_srcFilter(out IDispatch* p) mut => VT.get_srcFilter(ref this, out p);
			public HRESULT get_dataTransfer(out IHTMLDataTransfer* p) mut => VT.get_dataTransfer(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR strAttributeName, VARIANT AttributeValue, int32 lFlags) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR strAttributeName, int32 lFlags, out VARIANT AttributeValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR strAttributeName, int32 lFlags, out int16 pfSuccess) removeAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR v) put_propertyName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out BSTR p) get_propertyName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IHTMLBookmarkCollection v) putref_bookmarks;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IHTMLBookmarkCollection* p) get_bookmarks;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IDispatch v) putref_recordset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IDispatch* p) get_recordset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR v) put_dataFld;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out BSTR p) get_dataFld;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IHTMLElementCollection v) putref_boundElements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IHTMLElementCollection* p) get_boundElements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int16 v) put_repeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int16 p) get_repeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR v) put_srcUrn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out BSTR p) get_srcUrn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IHTMLElement v) putref_srcElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IHTMLElement* p) get_srcElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int16 v) put_altKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int16 p) get_altKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int16 v) put_ctrlKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int16 p) get_ctrlKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int16 v) put_shiftKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int16 p) get_shiftKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IHTMLElement v) putref_fromElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IHTMLElement* p) get_fromElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IHTMLElement v) putref_toElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IHTMLElement* p) get_toElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_button;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_button;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, BSTR v) put_qualifier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out BSTR p) get_qualifier;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_reason;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_reason;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_clientX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_clientX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_clientY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_clientY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_offsetX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_offsetX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_offsetY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_offsetY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_screenX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_screenX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, int32 v) put_screenY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out int32 p) get_screenY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, ref IDispatch v) putref_srcFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IDispatch* p) get_srcFilter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj2 self, out IHTMLDataTransfer* p) get_dataTransfer;
			}
		}
		[CRepr]
		public struct IHTMLEventObj3 : IDispatch
		{
			public const new Guid IID = .(0x3050f680, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_contentOverflow(out int16 p) mut => VT.get_contentOverflow(ref this, out p);
			public HRESULT put_shiftLeft(int16 v) mut => VT.put_shiftLeft(ref this, v);
			public HRESULT get_shiftLeft(out int16 p) mut => VT.get_shiftLeft(ref this, out p);
			public HRESULT put_altLeft(int16 v) mut => VT.put_altLeft(ref this, v);
			public HRESULT get_altLeft(out int16 p) mut => VT.get_altLeft(ref this, out p);
			public HRESULT put_ctrlLeft(int16 v) mut => VT.put_ctrlLeft(ref this, v);
			public HRESULT get_ctrlLeft(out int16 p) mut => VT.get_ctrlLeft(ref this, out p);
			public HRESULT get_imeCompositionChange(out int p) mut => VT.get_imeCompositionChange(ref this, out p);
			public HRESULT get_imeNotifyCommand(out int p) mut => VT.get_imeNotifyCommand(ref this, out p);
			public HRESULT get_imeNotifyData(out int p) mut => VT.get_imeNotifyData(ref this, out p);
			public HRESULT get_imeRequest(out int p) mut => VT.get_imeRequest(ref this, out p);
			public HRESULT get_imeRequestData(out int p) mut => VT.get_imeRequestData(ref this, out p);
			public HRESULT get_keyboardLayout(out int p) mut => VT.get_keyboardLayout(ref this, out p);
			public HRESULT get_behaviorCookie(out int32 p) mut => VT.get_behaviorCookie(ref this, out p);
			public HRESULT get_behaviorPart(out int32 p) mut => VT.get_behaviorPart(ref this, out p);
			public HRESULT get_nextPage(out BSTR p) mut => VT.get_nextPage(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int16 p) get_contentOverflow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, int16 v) put_shiftLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int16 p) get_shiftLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, int16 v) put_altLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int16 p) get_altLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, int16 v) put_ctrlLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int16 p) get_ctrlLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int p) get_imeCompositionChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int p) get_imeNotifyCommand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int p) get_imeNotifyData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int p) get_imeRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int p) get_imeRequestData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int p) get_keyboardLayout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int32 p) get_behaviorCookie;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out int32 p) get_behaviorPart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj3 self, out BSTR p) get_nextPage;
			}
		}
		[CRepr]
		public struct IHTMLEventObj4 : IDispatch
		{
			public const new Guid IID = .(0x3050f814, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_wheelDelta(out int32 p) mut => VT.get_wheelDelta(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj4 self, out int32 p) get_wheelDelta;
			}
		}
		[CRepr]
		public struct IHTMLEventObj5 : IDispatch
		{
			public const new Guid IID = .(0x30510478, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_url(BSTR v) mut => VT.put_url(ref this, v);
			public HRESULT get_url(out BSTR p) mut => VT.get_url(ref this, out p);
			public HRESULT put_data(BSTR v) mut => VT.put_data(ref this, v);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT get_source(out IDispatch* p) mut => VT.get_source(ref this, out p);
			public HRESULT put_origin(BSTR v) mut => VT.put_origin(ref this, v);
			public HRESULT get_origin(out BSTR p) mut => VT.get_origin(ref this, out p);
			public HRESULT put_issession(int16 v) mut => VT.put_issession(ref this, v);
			public HRESULT get_issession(out int16 p) mut => VT.get_issession(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, BSTR v) put_url;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, out BSTR p) get_url;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, BSTR v) put_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, out IDispatch* p) get_source;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, BSTR v) put_origin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, out BSTR p) get_origin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, int16 v) put_issession;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj5 self, out int16 p) get_issession;
			}
		}
		[CRepr]
		public struct IHTMLEventObj6 : IDispatch
		{
			public const new Guid IID = .(0x30510734, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_actionURL(out BSTR p) mut => VT.get_actionURL(ref this, out p);
			public HRESULT get_buttonID(out int32 p) mut => VT.get_buttonID(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj6 self, out BSTR p) get_actionURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEventObj6 self, out int32 p) get_buttonID;
			}
		}
		[CRepr]
		public struct DispCEventObj : IDispatch
		{
			public const new Guid IID = .(0x3050f558, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleMedia : IDispatch
		{
			public const new Guid IID = .(0x3051074b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT matchMedium(BSTR mediaQuery, out int16 matches) mut => VT.matchMedium(ref this, mediaQuery, out matches);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleMedia self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleMedia self, BSTR mediaQuery, out int16 matches) matchMedium;
			}
		}
		[CRepr]
		public struct DispHTMLStyleMedia : IDispatch
		{
			public const new Guid IID = .(0x3059009e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFramesCollection2 : IDispatch
		{
			public const new Guid IID = .(0x332c4426, 0x26cb, 0x11d0, 0xb4, 0x83, 0x00, 0xc0, 0x4f, 0xd9, 0x01, 0x19);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT item(ref VARIANT pvarIndex, out VARIANT pvarResult) mut => VT.item(ref this, ref pvarIndex, out pvarResult);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFramesCollection2 self, ref VARIANT pvarIndex, out VARIANT pvarResult) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFramesCollection2 self, out int32 p) get_length;
			}
		}
		[CRepr]
		public struct HTMLWindowEvents3 : IDispatch
		{
			public const new Guid IID = .(0x3050f5a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLWindowEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f625, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLWindowEvents : IDispatch
		{
			public const new Guid IID = .(0x96a0a4e0, 0xd062, 0x11cf, 0x94, 0xb6, 0x00, 0xaa, 0x00, 0x60, 0x27, 0x5c);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDocument2 : IHTMLDocument
		{
			public const new Guid IID = .(0x332c4425, 0x26cb, 0x11d0, 0xb4, 0x83, 0x00, 0xc0, 0x4f, 0xd9, 0x01, 0x19);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_all(out IHTMLElementCollection* p) mut => VT.get_all(ref this, out p);
			public HRESULT get_body(out IHTMLElement* p) mut => VT.get_body(ref this, out p);
			public HRESULT get_activeElement(out IHTMLElement* p) mut => VT.get_activeElement(ref this, out p);
			public HRESULT get_images(out IHTMLElementCollection* p) mut => VT.get_images(ref this, out p);
			public HRESULT get_applets(out IHTMLElementCollection* p) mut => VT.get_applets(ref this, out p);
			public HRESULT get_links(out IHTMLElementCollection* p) mut => VT.get_links(ref this, out p);
			public HRESULT get_forms(out IHTMLElementCollection* p) mut => VT.get_forms(ref this, out p);
			public HRESULT get_anchors(out IHTMLElementCollection* p) mut => VT.get_anchors(ref this, out p);
			public HRESULT put_title(BSTR v) mut => VT.put_title(ref this, v);
			public HRESULT get_title(out BSTR p) mut => VT.get_title(ref this, out p);
			public HRESULT get_scripts(out IHTMLElementCollection* p) mut => VT.get_scripts(ref this, out p);
			public HRESULT put_designMode(BSTR v) mut => VT.put_designMode(ref this, v);
			public HRESULT get_designMode(out BSTR p) mut => VT.get_designMode(ref this, out p);
			public HRESULT get_selection(out IHTMLSelectionObject* p) mut => VT.get_selection(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT get_frames(out IHTMLFramesCollection2* p) mut => VT.get_frames(ref this, out p);
			public HRESULT get_embeds(out IHTMLElementCollection* p) mut => VT.get_embeds(ref this, out p);
			public HRESULT get_plugins(out IHTMLElementCollection* p) mut => VT.get_plugins(ref this, out p);
			public HRESULT put_alinkColor(VARIANT v) mut => VT.put_alinkColor(ref this, v);
			public HRESULT get_alinkColor(out VARIANT p) mut => VT.get_alinkColor(ref this, out p);
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT put_fgColor(VARIANT v) mut => VT.put_fgColor(ref this, v);
			public HRESULT get_fgColor(out VARIANT p) mut => VT.get_fgColor(ref this, out p);
			public HRESULT put_linkColor(VARIANT v) mut => VT.put_linkColor(ref this, v);
			public HRESULT get_linkColor(out VARIANT p) mut => VT.get_linkColor(ref this, out p);
			public HRESULT put_vlinkColor(VARIANT v) mut => VT.put_vlinkColor(ref this, v);
			public HRESULT get_vlinkColor(out VARIANT p) mut => VT.get_vlinkColor(ref this, out p);
			public HRESULT get_referrer(out BSTR p) mut => VT.get_referrer(ref this, out p);
			public HRESULT get_location(out IHTMLLocation* p) mut => VT.get_location(ref this, out p);
			public HRESULT get_lastModified(out BSTR p) mut => VT.get_lastModified(ref this, out p);
			public HRESULT put_URL(BSTR v) mut => VT.put_URL(ref this, v);
			public HRESULT get_URL(out BSTR p) mut => VT.get_URL(ref this, out p);
			public HRESULT put_domain(BSTR v) mut => VT.put_domain(ref this, v);
			public HRESULT get_domain(out BSTR p) mut => VT.get_domain(ref this, out p);
			public HRESULT put_cookie(BSTR v) mut => VT.put_cookie(ref this, v);
			public HRESULT get_cookie(out BSTR p) mut => VT.get_cookie(ref this, out p);
			public HRESULT put_expando(int16 v) mut => VT.put_expando(ref this, v);
			public HRESULT get_expando(out int16 p) mut => VT.get_expando(ref this, out p);
			public HRESULT put_charset(BSTR v) mut => VT.put_charset(ref this, v);
			public HRESULT get_charset(out BSTR p) mut => VT.get_charset(ref this, out p);
			public HRESULT put_defaultCharset(BSTR v) mut => VT.put_defaultCharset(ref this, v);
			public HRESULT get_defaultCharset(out BSTR p) mut => VT.get_defaultCharset(ref this, out p);
			public HRESULT get_mimeType(out BSTR p) mut => VT.get_mimeType(ref this, out p);
			public HRESULT get_fileSize(out BSTR p) mut => VT.get_fileSize(ref this, out p);
			public HRESULT get_fileCreatedDate(out BSTR p) mut => VT.get_fileCreatedDate(ref this, out p);
			public HRESULT get_fileModifiedDate(out BSTR p) mut => VT.get_fileModifiedDate(ref this, out p);
			public HRESULT get_fileUpdatedDate(out BSTR p) mut => VT.get_fileUpdatedDate(ref this, out p);
			public HRESULT get_security(out BSTR p) mut => VT.get_security(ref this, out p);
			public HRESULT get_protocol(out BSTR p) mut => VT.get_protocol(ref this, out p);
			public HRESULT get_nameProp(out BSTR p) mut => VT.get_nameProp(ref this, out p);
			public HRESULT write(ref SAFEARRAY psarray) mut => VT.write(ref this, ref psarray);
			public HRESULT writeln(ref SAFEARRAY psarray) mut => VT.writeln(ref this, ref psarray);
			public HRESULT open(BSTR url, VARIANT name, VARIANT features, VARIANT replace, out IDispatch* pomWindowResult) mut => VT.open(ref this, url, name, features, replace, out pomWindowResult);
			public HRESULT close() mut => VT.close(ref this);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT queryCommandSupported(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandSupported(ref this, cmdID, out pfRet);
			public HRESULT queryCommandEnabled(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandEnabled(ref this, cmdID, out pfRet);
			public HRESULT queryCommandState(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandState(ref this, cmdID, out pfRet);
			public HRESULT queryCommandIndeterm(BSTR cmdID, out int16 pfRet) mut => VT.queryCommandIndeterm(ref this, cmdID, out pfRet);
			public HRESULT queryCommandText(BSTR cmdID, out BSTR pcmdText) mut => VT.queryCommandText(ref this, cmdID, out pcmdText);
			public HRESULT queryCommandValue(BSTR cmdID, out VARIANT pcmdValue) mut => VT.queryCommandValue(ref this, cmdID, out pcmdValue);
			public HRESULT execCommand(BSTR cmdID, int16 showUI, VARIANT value, out int16 pfRet) mut => VT.execCommand(ref this, cmdID, showUI, value, out pfRet);
			public HRESULT execCommandShowHelp(BSTR cmdID, out int16 pfRet) mut => VT.execCommandShowHelp(ref this, cmdID, out pfRet);
			public HRESULT createElement(BSTR eTag, out IHTMLElement* newElem) mut => VT.createElement(ref this, eTag, out newElem);
			public HRESULT put_onhelp(VARIANT v) mut => VT.put_onhelp(ref this, v);
			public HRESULT get_onhelp(out VARIANT p) mut => VT.get_onhelp(ref this, out p);
			public HRESULT put_onclick(VARIANT v) mut => VT.put_onclick(ref this, v);
			public HRESULT get_onclick(out VARIANT p) mut => VT.get_onclick(ref this, out p);
			public HRESULT put_ondblclick(VARIANT v) mut => VT.put_ondblclick(ref this, v);
			public HRESULT get_ondblclick(out VARIANT p) mut => VT.get_ondblclick(ref this, out p);
			public HRESULT put_onkeyup(VARIANT v) mut => VT.put_onkeyup(ref this, v);
			public HRESULT get_onkeyup(out VARIANT p) mut => VT.get_onkeyup(ref this, out p);
			public HRESULT put_onkeydown(VARIANT v) mut => VT.put_onkeydown(ref this, v);
			public HRESULT get_onkeydown(out VARIANT p) mut => VT.get_onkeydown(ref this, out p);
			public HRESULT put_onkeypress(VARIANT v) mut => VT.put_onkeypress(ref this, v);
			public HRESULT get_onkeypress(out VARIANT p) mut => VT.get_onkeypress(ref this, out p);
			public HRESULT put_onmouseup(VARIANT v) mut => VT.put_onmouseup(ref this, v);
			public HRESULT get_onmouseup(out VARIANT p) mut => VT.get_onmouseup(ref this, out p);
			public HRESULT put_onmousedown(VARIANT v) mut => VT.put_onmousedown(ref this, v);
			public HRESULT get_onmousedown(out VARIANT p) mut => VT.get_onmousedown(ref this, out p);
			public HRESULT put_onmousemove(VARIANT v) mut => VT.put_onmousemove(ref this, v);
			public HRESULT get_onmousemove(out VARIANT p) mut => VT.get_onmousemove(ref this, out p);
			public HRESULT put_onmouseout(VARIANT v) mut => VT.put_onmouseout(ref this, v);
			public HRESULT get_onmouseout(out VARIANT p) mut => VT.get_onmouseout(ref this, out p);
			public HRESULT put_onmouseover(VARIANT v) mut => VT.put_onmouseover(ref this, v);
			public HRESULT get_onmouseover(out VARIANT p) mut => VT.get_onmouseover(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT put_onafterupdate(VARIANT v) mut => VT.put_onafterupdate(ref this, v);
			public HRESULT get_onafterupdate(out VARIANT p) mut => VT.get_onafterupdate(ref this, out p);
			public HRESULT put_onrowexit(VARIANT v) mut => VT.put_onrowexit(ref this, v);
			public HRESULT get_onrowexit(out VARIANT p) mut => VT.get_onrowexit(ref this, out p);
			public HRESULT put_onrowenter(VARIANT v) mut => VT.put_onrowenter(ref this, v);
			public HRESULT get_onrowenter(out VARIANT p) mut => VT.get_onrowenter(ref this, out p);
			public HRESULT put_ondragstart(VARIANT v) mut => VT.put_ondragstart(ref this, v);
			public HRESULT get_ondragstart(out VARIANT p) mut => VT.get_ondragstart(ref this, out p);
			public HRESULT put_onselectstart(VARIANT v) mut => VT.put_onselectstart(ref this, v);
			public HRESULT get_onselectstart(out VARIANT p) mut => VT.get_onselectstart(ref this, out p);
			public HRESULT elementFromPoint(int32 x, int32 y, out IHTMLElement* elementHit) mut => VT.elementFromPoint(ref this, x, y, out elementHit);
			public HRESULT get_parentWindow(out IHTMLWindow2* p) mut => VT.get_parentWindow(ref this, out p);
			public HRESULT get_styleSheets(out IHTMLStyleSheetsCollection* p) mut => VT.get_styleSheets(ref this, out p);
			public HRESULT put_onbeforeupdate(VARIANT v) mut => VT.put_onbeforeupdate(ref this, v);
			public HRESULT get_onbeforeupdate(out VARIANT p) mut => VT.get_onbeforeupdate(ref this, out p);
			public HRESULT put_onerrorupdate(VARIANT v) mut => VT.put_onerrorupdate(ref this, v);
			public HRESULT get_onerrorupdate(out VARIANT p) mut => VT.get_onerrorupdate(ref this, out p);
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);
			public HRESULT createStyleSheet(BSTR bstrHref, int32 lIndex, out IHTMLStyleSheet* ppnewStyleSheet) mut => VT.createStyleSheet(ref this, bstrHref, lIndex, out ppnewStyleSheet);

			[CRepr]
			public struct VTable : IHTMLDocument.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_all;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElement* p) get_body;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElement* p) get_activeElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_images;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_applets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_links;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_forms;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_anchors;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_scripts;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_designMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_designMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLSelectionObject* p) get_selection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLFramesCollection2* p) get_frames;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_embeds;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLElementCollection* p) get_plugins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_alinkColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_alinkColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_fgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_fgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_linkColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_linkColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_vlinkColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_vlinkColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_referrer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLLocation* p) get_location;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_lastModified;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_domain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_domain;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_cookie;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_cookie;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, int16 v) put_expando;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out int16 p) get_expando;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR v) put_defaultCharset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_defaultCharset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_mimeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_fileSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_fileCreatedDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_fileModifiedDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_fileUpdatedDate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_security;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR p) get_nameProp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, ref SAFEARRAY psarray) write;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, ref SAFEARRAY psarray) writeln;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR url, VARIANT name, VARIANT features, VARIANT replace, out IDispatch* pomWindowResult) open;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self) close;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out int16 pfRet) queryCommandSupported;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out int16 pfRet) queryCommandEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out int16 pfRet) queryCommandState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out int16 pfRet) queryCommandIndeterm;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out BSTR pcmdText) queryCommandText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out VARIANT pcmdValue) queryCommandValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, int16 showUI, VARIANT value, out int16 pfRet) execCommand;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR cmdID, out int16 pfRet) execCommandShowHelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR eTag, out IHTMLElement* newElem) createElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onhelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onhelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_ondblclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_ondblclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onkeyup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onkeyup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onkeydown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onkeydown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onkeypress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onkeypress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onmouseup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onmouseup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onmousedown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onmousedown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onmousemove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onmousemove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onmouseout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onmouseout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onmouseover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onmouseover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onafterupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onafterupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onrowexit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onrowexit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onrowenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onrowenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_ondragstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_ondragstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onselectstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onselectstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, int32 x, int32 y, out IHTMLElement* elementHit) elementFromPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLWindow2* p) get_parentWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out IHTMLStyleSheetsCollection* p) get_styleSheets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onbeforeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onbeforeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, VARIANT v) put_onerrorupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out VARIANT p) get_onerrorupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, out BSTR String) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument2 self, BSTR bstrHref, int32 lIndex, out IHTMLStyleSheet* ppnewStyleSheet) createStyleSheet;
			}
		}
		[CRepr]
		public struct IHTMLWindow2 : IHTMLFramesCollection2
		{
			public const new Guid IID = .(0x332c4427, 0x26cb, 0x11d0, 0xb4, 0x83, 0x00, 0xc0, 0x4f, 0xd9, 0x01, 0x19);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_frames(out IHTMLFramesCollection2* p) mut => VT.get_frames(ref this, out p);
			public HRESULT put_defaultStatus(BSTR v) mut => VT.put_defaultStatus(ref this, v);
			public HRESULT get_defaultStatus(out BSTR p) mut => VT.get_defaultStatus(ref this, out p);
			public HRESULT put_status(BSTR v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out BSTR p) mut => VT.get_status(ref this, out p);
			public HRESULT setTimeout(BSTR expression, int32 msec, ref VARIANT language, out int32 timerID) mut => VT.setTimeout(ref this, expression, msec, ref language, out timerID);
			public HRESULT clearTimeout(int32 timerID) mut => VT.clearTimeout(ref this, timerID);
			public HRESULT alert(BSTR message) mut => VT.alert(ref this, message);
			public HRESULT confirm(BSTR message, out int16 confirmed) mut => VT.confirm(ref this, message, out confirmed);
			public HRESULT prompt(BSTR message, BSTR defstr, out VARIANT textdata) mut => VT.prompt(ref this, message, defstr, out textdata);
			public HRESULT get_Image(out IHTMLImageElementFactory* p) mut => VT.get_Image(ref this, out p);
			public HRESULT get_location(out IHTMLLocation* p) mut => VT.get_location(ref this, out p);
			public HRESULT get_history(out IOmHistory* p) mut => VT.get_history(ref this, out p);
			public HRESULT close() mut => VT.close(ref this);
			public HRESULT put_opener(VARIANT v) mut => VT.put_opener(ref this, v);
			public HRESULT get_opener(out VARIANT p) mut => VT.get_opener(ref this, out p);
			public HRESULT get_navigator(out IOmNavigator* p) mut => VT.get_navigator(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT get_parent(out IHTMLWindow2* p) mut => VT.get_parent(ref this, out p);
			public HRESULT open(BSTR url, BSTR name, BSTR features, int16 replace, out IHTMLWindow2* pomWindowResult) mut => VT.open(ref this, url, name, features, replace, out pomWindowResult);
			public HRESULT get_self(out IHTMLWindow2* p) mut => VT.get_self(ref this, out p);
			public HRESULT get_top(out IHTMLWindow2* p) mut => VT.get_top(ref this, out p);
			public HRESULT get_window(out IHTMLWindow2* p) mut => VT.get_window(ref this, out p);
			public HRESULT navigate(BSTR url) mut => VT.navigate(ref this, url);
			public HRESULT put_onfocus(VARIANT v) mut => VT.put_onfocus(ref this, v);
			public HRESULT get_onfocus(out VARIANT p) mut => VT.get_onfocus(ref this, out p);
			public HRESULT put_onblur(VARIANT v) mut => VT.put_onblur(ref this, v);
			public HRESULT get_onblur(out VARIANT p) mut => VT.get_onblur(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onbeforeunload(VARIANT v) mut => VT.put_onbeforeunload(ref this, v);
			public HRESULT get_onbeforeunload(out VARIANT p) mut => VT.get_onbeforeunload(ref this, out p);
			public HRESULT put_onunload(VARIANT v) mut => VT.put_onunload(ref this, v);
			public HRESULT get_onunload(out VARIANT p) mut => VT.get_onunload(ref this, out p);
			public HRESULT put_onhelp(VARIANT v) mut => VT.put_onhelp(ref this, v);
			public HRESULT get_onhelp(out VARIANT p) mut => VT.get_onhelp(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_onresize(VARIANT v) mut => VT.put_onresize(ref this, v);
			public HRESULT get_onresize(out VARIANT p) mut => VT.get_onresize(ref this, out p);
			public HRESULT put_onscroll(VARIANT v) mut => VT.put_onscroll(ref this, v);
			public HRESULT get_onscroll(out VARIANT p) mut => VT.get_onscroll(ref this, out p);
			public HRESULT get_document(out IHTMLDocument2* p) mut => VT.get_document(ref this, out p);
			public HRESULT get_event(out IHTMLEventObj* p) mut => VT.get_event(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT showModalDialog(BSTR dialog, ref VARIANT varArgIn, ref VARIANT varOptions, out VARIANT varArgOut) mut => VT.showModalDialog(ref this, dialog, ref varArgIn, ref varOptions, out varArgOut);
			public HRESULT showHelp(BSTR helpURL, VARIANT helpArg, BSTR features) mut => VT.showHelp(ref this, helpURL, helpArg, features);
			public HRESULT get_screen(out IHTMLScreen* p) mut => VT.get_screen(ref this, out p);
			public HRESULT get_Option(out IHTMLOptionElementFactory* p) mut => VT.get_Option(ref this, out p);
			public HRESULT focus() mut => VT.focus(ref this);
			public HRESULT get_closed(out int16 p) mut => VT.get_closed(ref this, out p);
			public HRESULT blur() mut => VT.blur(ref this);
			public HRESULT scroll(int32 x, int32 y) mut => VT.scroll(ref this, x, y);
			public HRESULT get_clientInformation(out IOmNavigator* p) mut => VT.get_clientInformation(ref this, out p);
			public HRESULT setInterval(BSTR expression, int32 msec, ref VARIANT language, out int32 timerID) mut => VT.setInterval(ref this, expression, msec, ref language, out timerID);
			public HRESULT clearInterval(int32 timerID) mut => VT.clearInterval(ref this, timerID);
			public HRESULT put_offscreenBuffering(VARIANT v) mut => VT.put_offscreenBuffering(ref this, v);
			public HRESULT get_offscreenBuffering(out VARIANT p) mut => VT.get_offscreenBuffering(ref this, out p);
			public HRESULT execScript(BSTR code, BSTR language, out VARIANT pvarRet) mut => VT.execScript(ref this, code, language, out pvarRet);
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);
			public HRESULT scrollBy(int32 x, int32 y) mut => VT.scrollBy(ref this, x, y);
			public HRESULT scrollTo(int32 x, int32 y) mut => VT.scrollTo(ref this, x, y);
			public HRESULT moveTo(int32 x, int32 y) mut => VT.moveTo(ref this, x, y);
			public HRESULT moveBy(int32 x, int32 y) mut => VT.moveBy(ref this, x, y);
			public HRESULT resizeTo(int32 x, int32 y) mut => VT.resizeTo(ref this, x, y);
			public HRESULT resizeBy(int32 x, int32 y) mut => VT.resizeBy(ref this, x, y);
			public HRESULT get_external(out IDispatch* p) mut => VT.get_external(ref this, out p);

			[CRepr]
			public struct VTable : IHTMLFramesCollection2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLFramesCollection2* p) get_frames;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR v) put_defaultStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out BSTR p) get_defaultStatus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out BSTR p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR expression, int32 msec, ref VARIANT language, out int32 timerID) setTimeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 timerID) clearTimeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR message) alert;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR message, out int16 confirmed) confirm;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR message, BSTR defstr, out VARIANT textdata) prompt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLImageElementFactory* p) get_Image;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLLocation* p) get_location;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IOmHistory* p) get_history;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self) close;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_opener;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_opener;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IOmNavigator* p) get_navigator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLWindow2* p) get_parent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR url, BSTR name, BSTR features, int16 replace, out IHTMLWindow2* pomWindowResult) open;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLWindow2* p) get_self;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLWindow2* p) get_top;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLWindow2* p) get_window;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR url) navigate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onbeforeunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onbeforeunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onhelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onhelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onresize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onresize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_onscroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLDocument2* p) get_document;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLEventObj* p) get_event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR dialog, ref VARIANT varArgIn, ref VARIANT varOptions, out VARIANT varArgOut) showModalDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR helpURL, VARIANT helpArg, BSTR features) showHelp;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLScreen* p) get_screen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IHTMLOptionElementFactory* p) get_Option;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self) focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out int16 p) get_closed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self) blur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) scroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IOmNavigator* p) get_clientInformation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR expression, int32 msec, ref VARIANT language, out int32 timerID) setInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 timerID) clearInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, VARIANT v) put_offscreenBuffering;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out VARIANT p) get_offscreenBuffering;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, BSTR code, BSTR language, out VARIANT pvarRet) execScript;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out BSTR String) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) scrollBy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) scrollTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) moveTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) moveBy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) resizeTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, int32 x, int32 y) resizeBy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow2 self, out IDispatch* p) get_external;
			}
		}
		[CRepr]
		public struct IHTMLWindow3 : IDispatch
		{
			public const new Guid IID = .(0x3050f4ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_screenLeft(out int32 p) mut => VT.get_screenLeft(ref this, out p);
			public HRESULT get_screenTop(out int32 p) mut => VT.get_screenTop(ref this, out p);
			public HRESULT attachEvent(BSTR event, ref IDispatch pDisp, out int16 pfResult) mut => VT.attachEvent(ref this, event, ref pDisp, out pfResult);
			public HRESULT detachEvent(BSTR event, ref IDispatch pDisp) mut => VT.detachEvent(ref this, event, ref pDisp);
			public HRESULT setTimeout(ref VARIANT expression, int32 msec, ref VARIANT language, out int32 timerID) mut => VT.setTimeout(ref this, ref expression, msec, ref language, out timerID);
			public HRESULT setInterval(ref VARIANT expression, int32 msec, ref VARIANT language, out int32 timerID) mut => VT.setInterval(ref this, ref expression, msec, ref language, out timerID);
			public HRESULT print() mut => VT.print(ref this);
			public HRESULT put_onbeforeprint(VARIANT v) mut => VT.put_onbeforeprint(ref this, v);
			public HRESULT get_onbeforeprint(out VARIANT p) mut => VT.get_onbeforeprint(ref this, out p);
			public HRESULT put_onafterprint(VARIANT v) mut => VT.put_onafterprint(ref this, v);
			public HRESULT get_onafterprint(out VARIANT p) mut => VT.get_onafterprint(ref this, out p);
			public HRESULT get_clipboardData(out IHTMLDataTransfer* p) mut => VT.get_clipboardData(ref this, out p);
			public HRESULT showModelessDialog(BSTR url, ref VARIANT varArgIn, ref VARIANT options, out IHTMLWindow2* pDialog) mut => VT.showModelessDialog(ref this, url, ref varArgIn, ref options, out pDialog);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, out int32 p) get_screenLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, out int32 p) get_screenTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, BSTR event, ref IDispatch pDisp, out int16 pfResult) attachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, BSTR event, ref IDispatch pDisp) detachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, ref VARIANT expression, int32 msec, ref VARIANT language, out int32 timerID) setTimeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, ref VARIANT expression, int32 msec, ref VARIANT language, out int32 timerID) setInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self) print;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, VARIANT v) put_onbeforeprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, out VARIANT p) get_onbeforeprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, VARIANT v) put_onafterprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, out VARIANT p) get_onafterprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, out IHTMLDataTransfer* p) get_clipboardData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow3 self, BSTR url, ref VARIANT varArgIn, ref VARIANT options, out IHTMLWindow2* pDialog) showModelessDialog;
			}
		}
		[CRepr]
		public struct IHTMLFrameBase : IDispatch
		{
			public const new Guid IID = .(0x3050f311, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_frameBorder(BSTR v) mut => VT.put_frameBorder(ref this, v);
			public HRESULT get_frameBorder(out BSTR p) mut => VT.get_frameBorder(ref this, out p);
			public HRESULT put_frameSpacing(VARIANT v) mut => VT.put_frameSpacing(ref this, v);
			public HRESULT get_frameSpacing(out VARIANT p) mut => VT.get_frameSpacing(ref this, out p);
			public HRESULT put_marginWidth(VARIANT v) mut => VT.put_marginWidth(ref this, v);
			public HRESULT get_marginWidth(out VARIANT p) mut => VT.get_marginWidth(ref this, out p);
			public HRESULT put_marginHeight(VARIANT v) mut => VT.put_marginHeight(ref this, v);
			public HRESULT get_marginHeight(out VARIANT p) mut => VT.get_marginHeight(ref this, out p);
			public HRESULT put_noResize(int16 v) mut => VT.put_noResize(ref this, v);
			public HRESULT get_noResize(out int16 p) mut => VT.get_noResize(ref this, out p);
			public HRESULT put_scrolling(BSTR v) mut => VT.put_scrolling(ref this, v);
			public HRESULT get_scrolling(out BSTR p) mut => VT.get_scrolling(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, BSTR v) put_frameBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out BSTR p) get_frameBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, VARIANT v) put_frameSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out VARIANT p) get_frameSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, VARIANT v) put_marginWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out VARIANT p) get_marginWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, VARIANT v) put_marginHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out VARIANT p) get_marginHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, int16 v) put_noResize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out int16 p) get_noResize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, BSTR v) put_scrolling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase self, out BSTR p) get_scrolling;
			}
		}
		[CRepr]
		public struct IHTMLStorage : IDispatch
		{
			public const new Guid IID = .(0x30510474, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get_remainingSpace(out int32 p) mut => VT.get_remainingSpace(ref this, out p);
			public HRESULT key(int32 lIndex, out BSTR __MIDL__IHTMLStorage0000) mut => VT.key(ref this, lIndex, out __MIDL__IHTMLStorage0000);
			public HRESULT getItem(BSTR bstrKey, out VARIANT __MIDL__IHTMLStorage0001) mut => VT.getItem(ref this, bstrKey, out __MIDL__IHTMLStorage0001);
			public HRESULT setItem(BSTR bstrKey, BSTR bstrValue) mut => VT.setItem(ref this, bstrKey, bstrValue);
			public HRESULT removeItem(BSTR bstrKey) mut => VT.removeItem(ref this, bstrKey);
			public HRESULT clear() mut => VT.clear(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self, out int32 p) get_remainingSpace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self, int32 lIndex, out BSTR __MIDL__IHTMLStorage0000) key;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self, BSTR bstrKey, out VARIANT __MIDL__IHTMLStorage0001) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self, BSTR bstrKey, BSTR bstrValue) setItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self, BSTR bstrKey) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage self) clear;
			}
		}
		[CRepr]
		public struct IHTMLPerformance : IDispatch
		{
			public const new Guid IID = .(0x3051074e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_navigation(out IHTMLPerformanceNavigation* p) mut => VT.get_navigation(ref this, out p);
			public HRESULT get_timing(out IHTMLPerformanceTiming* p) mut => VT.get_timing(ref this, out p);
			public HRESULT toString(out BSTR string) mut => VT.toString(ref this, out string);
			public HRESULT toJSON(out VARIANT pVar) mut => VT.toJSON(ref this, out pVar);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformance self, out IHTMLPerformanceNavigation* p) get_navigation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformance self, out IHTMLPerformanceTiming* p) get_timing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformance self, out BSTR string) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformance self, out VARIANT pVar) toJSON;
			}
		}
		[CRepr]
		public struct IHTMLApplicationCache : IDispatch
		{
			public const new Guid IID = .(0x30510828, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_status(out int32 p) mut => VT.get_status(ref this, out p);
			public HRESULT put_onchecking(VARIANT v) mut => VT.put_onchecking(ref this, v);
			public HRESULT get_onchecking(out VARIANT p) mut => VT.get_onchecking(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_onnoupdate(VARIANT v) mut => VT.put_onnoupdate(ref this, v);
			public HRESULT get_onnoupdate(out VARIANT p) mut => VT.get_onnoupdate(ref this, out p);
			public HRESULT put_ondownloading(VARIANT v) mut => VT.put_ondownloading(ref this, v);
			public HRESULT get_ondownloading(out VARIANT p) mut => VT.get_ondownloading(ref this, out p);
			public HRESULT put_onprogress(VARIANT v) mut => VT.put_onprogress(ref this, v);
			public HRESULT get_onprogress(out VARIANT p) mut => VT.get_onprogress(ref this, out p);
			public HRESULT put_onupdateready(VARIANT v) mut => VT.put_onupdateready(ref this, v);
			public HRESULT get_onupdateready(out VARIANT p) mut => VT.get_onupdateready(ref this, out p);
			public HRESULT put_oncached(VARIANT v) mut => VT.put_oncached(ref this, v);
			public HRESULT get_oncached(out VARIANT p) mut => VT.get_oncached(ref this, out p);
			public HRESULT put_onobsolete(VARIANT v) mut => VT.put_onobsolete(ref this, v);
			public HRESULT get_onobsolete(out VARIANT p) mut => VT.get_onobsolete(ref this, out p);
			public HRESULT update() mut => VT.update(ref this);
			public HRESULT swapCache() mut => VT.swapCache(ref this);
			public HRESULT abort() mut => VT.abort(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out int32 p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_onchecking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_onchecking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_onnoupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_onnoupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_ondownloading;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_ondownloading;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_onupdateready;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_onupdateready;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_oncached;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_oncached;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, VARIANT v) put_onobsolete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self, out VARIANT p) get_onobsolete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self) update;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self) swapCache;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLApplicationCache self) abort;
			}
		}
		[CRepr]
		public struct IHTMLScreen : IDispatch
		{
			public const new Guid IID = .(0x3050f35c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_colorDepth(out int32 p) mut => VT.get_colorDepth(ref this, out p);
			public HRESULT put_bufferDepth(int32 v) mut => VT.put_bufferDepth(ref this, v);
			public HRESULT get_bufferDepth(out int32 p) mut => VT.get_bufferDepth(ref this, out p);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT put_updateInterval(int32 v) mut => VT.put_updateInterval(ref this, v);
			public HRESULT get_updateInterval(out int32 p) mut => VT.get_updateInterval(ref this, out p);
			public HRESULT get_availHeight(out int32 p) mut => VT.get_availHeight(ref this, out p);
			public HRESULT get_availWidth(out int32 p) mut => VT.get_availWidth(ref this, out p);
			public HRESULT get_fontSmoothingEnabled(out int16 p) mut => VT.get_fontSmoothingEnabled(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_colorDepth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, int32 v) put_bufferDepth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_bufferDepth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, int32 v) put_updateInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_updateInterval;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_availHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int32 p) get_availWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen self, out int16 p) get_fontSmoothingEnabled;
			}
		}
		[CRepr]
		public struct IHTMLScreen2 : IDispatch
		{
			public const new Guid IID = .(0x3050f84a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_logicalXDPI(out int32 p) mut => VT.get_logicalXDPI(ref this, out p);
			public HRESULT get_logicalYDPI(out int32 p) mut => VT.get_logicalYDPI(ref this, out p);
			public HRESULT get_deviceXDPI(out int32 p) mut => VT.get_deviceXDPI(ref this, out p);
			public HRESULT get_deviceYDPI(out int32 p) mut => VT.get_deviceYDPI(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen2 self, out int32 p) get_logicalXDPI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen2 self, out int32 p) get_logicalYDPI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen2 self, out int32 p) get_deviceXDPI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen2 self, out int32 p) get_deviceYDPI;
			}
		}
		[CRepr]
		public struct IHTMLScreen3 : IDispatch
		{
			public const new Guid IID = .(0x305104a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_systemXDPI(out int32 p) mut => VT.get_systemXDPI(ref this, out p);
			public HRESULT get_systemYDPI(out int32 p) mut => VT.get_systemYDPI(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen3 self, out int32 p) get_systemXDPI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen3 self, out int32 p) get_systemYDPI;
			}
		}
		[CRepr]
		public struct IHTMLScreen4 : IDispatch
		{
			public const new Guid IID = .(0x3051076b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_pixelDepth(out int32 p) mut => VT.get_pixelDepth(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScreen4 self, out int32 p) get_pixelDepth;
			}
		}
		[CRepr]
		public struct IHTMLWindow4 : IDispatch
		{
			public const new Guid IID = .(0x3050f6cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createPopup(ref VARIANT varArgIn, out IDispatch* ppPopup) mut => VT.createPopup(ref this, ref varArgIn, out ppPopup);
			public HRESULT get_frameElement(out IHTMLFrameBase* p) mut => VT.get_frameElement(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow4 self, ref VARIANT varArgIn, out IDispatch* ppPopup) createPopup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow4 self, out IHTMLFrameBase* p) get_frameElement;
			}
		}
		[CRepr]
		public struct IHTMLWindow5 : IDispatch
		{
			public const new Guid IID = .(0x3051040e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_XMLHttpRequest(VARIANT v) mut => VT.put_XMLHttpRequest(ref this, v);
			public HRESULT get_XMLHttpRequest(out VARIANT p) mut => VT.get_XMLHttpRequest(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow5 self, VARIANT v) put_XMLHttpRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow5 self, out VARIANT p) get_XMLHttpRequest;
			}
		}
		[CRepr]
		public struct IHTMLWindow6 : IDispatch
		{
			public const new Guid IID = .(0x30510453, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_XDomainRequest(VARIANT v) mut => VT.put_XDomainRequest(ref this, v);
			public HRESULT get_XDomainRequest(out VARIANT p) mut => VT.get_XDomainRequest(ref this, out p);
			public HRESULT get_sessionStorage(out IHTMLStorage* p) mut => VT.get_sessionStorage(ref this, out p);
			public HRESULT get_localStorage(out IHTMLStorage* p) mut => VT.get_localStorage(ref this, out p);
			public HRESULT put_onhashchange(VARIANT v) mut => VT.put_onhashchange(ref this, v);
			public HRESULT get_onhashchange(out VARIANT p) mut => VT.get_onhashchange(ref this, out p);
			public HRESULT get_maxConnectionsPerServer(out int32 p) mut => VT.get_maxConnectionsPerServer(ref this, out p);
			public HRESULT postMessage(BSTR msg, VARIANT targetOrigin) mut => VT.postMessage(ref this, msg, targetOrigin);
			public HRESULT toStaticHTML(BSTR bstrHTML, out BSTR pbstrStaticHTML) mut => VT.toStaticHTML(ref this, bstrHTML, out pbstrStaticHTML);
			public HRESULT put_onmessage(VARIANT v) mut => VT.put_onmessage(ref this, v);
			public HRESULT get_onmessage(out VARIANT p) mut => VT.get_onmessage(ref this, out p);
			public HRESULT msWriteProfilerMark(BSTR bstrProfilerMarkName) mut => VT.msWriteProfilerMark(ref this, bstrProfilerMarkName);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, VARIANT v) put_XDomainRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, out VARIANT p) get_XDomainRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, out IHTMLStorage* p) get_sessionStorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, out IHTMLStorage* p) get_localStorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, VARIANT v) put_onhashchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, out VARIANT p) get_onhashchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, out int32 p) get_maxConnectionsPerServer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, BSTR msg, VARIANT targetOrigin) postMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, BSTR bstrHTML, out BSTR pbstrStaticHTML) toStaticHTML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, VARIANT v) put_onmessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, out VARIANT p) get_onmessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow6 self, BSTR bstrProfilerMarkName) msWriteProfilerMark;
			}
		}
		[CRepr]
		public struct IHTMLWindow7 : IDispatch
		{
			public const new Guid IID = .(0x305104b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getSelection(out IHTMLSelection* ppIHTMLSelection) mut => VT.getSelection(ref this, out ppIHTMLSelection);
			public HRESULT getComputedStyle(ref IHTMLDOMNode varArgIn, BSTR bstrPseudoElt, out IHTMLCSSStyleDeclaration* ppComputedStyle) mut => VT.getComputedStyle(ref this, ref varArgIn, bstrPseudoElt, out ppComputedStyle);
			public HRESULT get_styleMedia(out IHTMLStyleMedia* p) mut => VT.get_styleMedia(ref this, out p);
			public HRESULT put_performance(VARIANT v) mut => VT.put_performance(ref this, v);
			public HRESULT get_performance(out VARIANT p) mut => VT.get_performance(ref this, out p);
			public HRESULT get_innerWidth(out int32 p) mut => VT.get_innerWidth(ref this, out p);
			public HRESULT get_innerHeight(out int32 p) mut => VT.get_innerHeight(ref this, out p);
			public HRESULT get_pageXOffset(out int32 p) mut => VT.get_pageXOffset(ref this, out p);
			public HRESULT get_pageYOffset(out int32 p) mut => VT.get_pageYOffset(ref this, out p);
			public HRESULT get_screenX(out int32 p) mut => VT.get_screenX(ref this, out p);
			public HRESULT get_screenY(out int32 p) mut => VT.get_screenY(ref this, out p);
			public HRESULT get_outerWidth(out int32 p) mut => VT.get_outerWidth(ref this, out p);
			public HRESULT get_outerHeight(out int32 p) mut => VT.get_outerHeight(ref this, out p);
			public HRESULT put_onabort(VARIANT v) mut => VT.put_onabort(ref this, v);
			public HRESULT get_onabort(out VARIANT p) mut => VT.get_onabort(ref this, out p);
			public HRESULT put_oncanplay(VARIANT v) mut => VT.put_oncanplay(ref this, v);
			public HRESULT get_oncanplay(out VARIANT p) mut => VT.get_oncanplay(ref this, out p);
			public HRESULT put_oncanplaythrough(VARIANT v) mut => VT.put_oncanplaythrough(ref this, v);
			public HRESULT get_oncanplaythrough(out VARIANT p) mut => VT.get_oncanplaythrough(ref this, out p);
			public HRESULT put_onchange(VARIANT v) mut => VT.put_onchange(ref this, v);
			public HRESULT get_onchange(out VARIANT p) mut => VT.get_onchange(ref this, out p);
			public HRESULT put_onclick(VARIANT v) mut => VT.put_onclick(ref this, v);
			public HRESULT get_onclick(out VARIANT p) mut => VT.get_onclick(ref this, out p);
			public HRESULT put_oncontextmenu(VARIANT v) mut => VT.put_oncontextmenu(ref this, v);
			public HRESULT get_oncontextmenu(out VARIANT p) mut => VT.get_oncontextmenu(ref this, out p);
			public HRESULT put_ondblclick(VARIANT v) mut => VT.put_ondblclick(ref this, v);
			public HRESULT get_ondblclick(out VARIANT p) mut => VT.get_ondblclick(ref this, out p);
			public HRESULT put_ondrag(VARIANT v) mut => VT.put_ondrag(ref this, v);
			public HRESULT get_ondrag(out VARIANT p) mut => VT.get_ondrag(ref this, out p);
			public HRESULT put_ondragend(VARIANT v) mut => VT.put_ondragend(ref this, v);
			public HRESULT get_ondragend(out VARIANT p) mut => VT.get_ondragend(ref this, out p);
			public HRESULT put_ondragenter(VARIANT v) mut => VT.put_ondragenter(ref this, v);
			public HRESULT get_ondragenter(out VARIANT p) mut => VT.get_ondragenter(ref this, out p);
			public HRESULT put_ondragleave(VARIANT v) mut => VT.put_ondragleave(ref this, v);
			public HRESULT get_ondragleave(out VARIANT p) mut => VT.get_ondragleave(ref this, out p);
			public HRESULT put_ondragover(VARIANT v) mut => VT.put_ondragover(ref this, v);
			public HRESULT get_ondragover(out VARIANT p) mut => VT.get_ondragover(ref this, out p);
			public HRESULT put_ondragstart(VARIANT v) mut => VT.put_ondragstart(ref this, v);
			public HRESULT get_ondragstart(out VARIANT p) mut => VT.get_ondragstart(ref this, out p);
			public HRESULT put_ondrop(VARIANT v) mut => VT.put_ondrop(ref this, v);
			public HRESULT get_ondrop(out VARIANT p) mut => VT.get_ondrop(ref this, out p);
			public HRESULT put_ondurationchange(VARIANT v) mut => VT.put_ondurationchange(ref this, v);
			public HRESULT get_ondurationchange(out VARIANT p) mut => VT.get_ondurationchange(ref this, out p);
			public HRESULT put_onfocusin(VARIANT v) mut => VT.put_onfocusin(ref this, v);
			public HRESULT get_onfocusin(out VARIANT p) mut => VT.get_onfocusin(ref this, out p);
			public HRESULT put_onfocusout(VARIANT v) mut => VT.put_onfocusout(ref this, v);
			public HRESULT get_onfocusout(out VARIANT p) mut => VT.get_onfocusout(ref this, out p);
			public HRESULT put_oninput(VARIANT v) mut => VT.put_oninput(ref this, v);
			public HRESULT get_oninput(out VARIANT p) mut => VT.get_oninput(ref this, out p);
			public HRESULT put_onemptied(VARIANT v) mut => VT.put_onemptied(ref this, v);
			public HRESULT get_onemptied(out VARIANT p) mut => VT.get_onemptied(ref this, out p);
			public HRESULT put_onended(VARIANT v) mut => VT.put_onended(ref this, v);
			public HRESULT get_onended(out VARIANT p) mut => VT.get_onended(ref this, out p);
			public HRESULT put_onkeydown(VARIANT v) mut => VT.put_onkeydown(ref this, v);
			public HRESULT get_onkeydown(out VARIANT p) mut => VT.get_onkeydown(ref this, out p);
			public HRESULT put_onkeypress(VARIANT v) mut => VT.put_onkeypress(ref this, v);
			public HRESULT get_onkeypress(out VARIANT p) mut => VT.get_onkeypress(ref this, out p);
			public HRESULT put_onkeyup(VARIANT v) mut => VT.put_onkeyup(ref this, v);
			public HRESULT get_onkeyup(out VARIANT p) mut => VT.get_onkeyup(ref this, out p);
			public HRESULT put_onloadeddata(VARIANT v) mut => VT.put_onloadeddata(ref this, v);
			public HRESULT get_onloadeddata(out VARIANT p) mut => VT.get_onloadeddata(ref this, out p);
			public HRESULT put_onloadedmetadata(VARIANT v) mut => VT.put_onloadedmetadata(ref this, v);
			public HRESULT get_onloadedmetadata(out VARIANT p) mut => VT.get_onloadedmetadata(ref this, out p);
			public HRESULT put_onloadstart(VARIANT v) mut => VT.put_onloadstart(ref this, v);
			public HRESULT get_onloadstart(out VARIANT p) mut => VT.get_onloadstart(ref this, out p);
			public HRESULT put_onmousedown(VARIANT v) mut => VT.put_onmousedown(ref this, v);
			public HRESULT get_onmousedown(out VARIANT p) mut => VT.get_onmousedown(ref this, out p);
			public HRESULT put_onmouseenter(VARIANT v) mut => VT.put_onmouseenter(ref this, v);
			public HRESULT get_onmouseenter(out VARIANT p) mut => VT.get_onmouseenter(ref this, out p);
			public HRESULT put_onmouseleave(VARIANT v) mut => VT.put_onmouseleave(ref this, v);
			public HRESULT get_onmouseleave(out VARIANT p) mut => VT.get_onmouseleave(ref this, out p);
			public HRESULT put_onmousemove(VARIANT v) mut => VT.put_onmousemove(ref this, v);
			public HRESULT get_onmousemove(out VARIANT p) mut => VT.get_onmousemove(ref this, out p);
			public HRESULT put_onmouseout(VARIANT v) mut => VT.put_onmouseout(ref this, v);
			public HRESULT get_onmouseout(out VARIANT p) mut => VT.get_onmouseout(ref this, out p);
			public HRESULT put_onmouseover(VARIANT v) mut => VT.put_onmouseover(ref this, v);
			public HRESULT get_onmouseover(out VARIANT p) mut => VT.get_onmouseover(ref this, out p);
			public HRESULT put_onmouseup(VARIANT v) mut => VT.put_onmouseup(ref this, v);
			public HRESULT get_onmouseup(out VARIANT p) mut => VT.get_onmouseup(ref this, out p);
			public HRESULT put_onmousewheel(VARIANT v) mut => VT.put_onmousewheel(ref this, v);
			public HRESULT get_onmousewheel(out VARIANT p) mut => VT.get_onmousewheel(ref this, out p);
			public HRESULT put_onoffline(VARIANT v) mut => VT.put_onoffline(ref this, v);
			public HRESULT get_onoffline(out VARIANT p) mut => VT.get_onoffline(ref this, out p);
			public HRESULT put_ononline(VARIANT v) mut => VT.put_ononline(ref this, v);
			public HRESULT get_ononline(out VARIANT p) mut => VT.get_ononline(ref this, out p);
			public HRESULT put_onprogress(VARIANT v) mut => VT.put_onprogress(ref this, v);
			public HRESULT get_onprogress(out VARIANT p) mut => VT.get_onprogress(ref this, out p);
			public HRESULT put_onratechange(VARIANT v) mut => VT.put_onratechange(ref this, v);
			public HRESULT get_onratechange(out VARIANT p) mut => VT.get_onratechange(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT put_onreset(VARIANT v) mut => VT.put_onreset(ref this, v);
			public HRESULT get_onreset(out VARIANT p) mut => VT.get_onreset(ref this, out p);
			public HRESULT put_onseeked(VARIANT v) mut => VT.put_onseeked(ref this, v);
			public HRESULT get_onseeked(out VARIANT p) mut => VT.get_onseeked(ref this, out p);
			public HRESULT put_onseeking(VARIANT v) mut => VT.put_onseeking(ref this, v);
			public HRESULT get_onseeking(out VARIANT p) mut => VT.get_onseeking(ref this, out p);
			public HRESULT put_onselect(VARIANT v) mut => VT.put_onselect(ref this, v);
			public HRESULT get_onselect(out VARIANT p) mut => VT.get_onselect(ref this, out p);
			public HRESULT put_onstalled(VARIANT v) mut => VT.put_onstalled(ref this, v);
			public HRESULT get_onstalled(out VARIANT p) mut => VT.get_onstalled(ref this, out p);
			public HRESULT put_onstorage(VARIANT v) mut => VT.put_onstorage(ref this, v);
			public HRESULT get_onstorage(out VARIANT p) mut => VT.get_onstorage(ref this, out p);
			public HRESULT put_onsubmit(VARIANT v) mut => VT.put_onsubmit(ref this, v);
			public HRESULT get_onsubmit(out VARIANT p) mut => VT.get_onsubmit(ref this, out p);
			public HRESULT put_onsuspend(VARIANT v) mut => VT.put_onsuspend(ref this, v);
			public HRESULT get_onsuspend(out VARIANT p) mut => VT.get_onsuspend(ref this, out p);
			public HRESULT put_ontimeupdate(VARIANT v) mut => VT.put_ontimeupdate(ref this, v);
			public HRESULT get_ontimeupdate(out VARIANT p) mut => VT.get_ontimeupdate(ref this, out p);
			public HRESULT put_onpause(VARIANT v) mut => VT.put_onpause(ref this, v);
			public HRESULT get_onpause(out VARIANT p) mut => VT.get_onpause(ref this, out p);
			public HRESULT put_onplay(VARIANT v) mut => VT.put_onplay(ref this, v);
			public HRESULT get_onplay(out VARIANT p) mut => VT.get_onplay(ref this, out p);
			public HRESULT put_onplaying(VARIANT v) mut => VT.put_onplaying(ref this, v);
			public HRESULT get_onplaying(out VARIANT p) mut => VT.get_onplaying(ref this, out p);
			public HRESULT put_onvolumechange(VARIANT v) mut => VT.put_onvolumechange(ref this, v);
			public HRESULT get_onvolumechange(out VARIANT p) mut => VT.get_onvolumechange(ref this, out p);
			public HRESULT put_onwaiting(VARIANT v) mut => VT.put_onwaiting(ref this, v);
			public HRESULT get_onwaiting(out VARIANT p) mut => VT.get_onwaiting(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out IHTMLSelection* ppIHTMLSelection) getSelection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, ref IHTMLDOMNode varArgIn, BSTR bstrPseudoElt, out IHTMLCSSStyleDeclaration* ppComputedStyle) getComputedStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out IHTMLStyleMedia* p) get_styleMedia;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_performance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_performance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_innerWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_innerHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_pageXOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_pageYOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_screenX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_screenY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_outerWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out int32 p) get_outerHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onabort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_oncanplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_oncanplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_oncanplaythrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_oncanplaythrough;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_oncontextmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_oncontextmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondblclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondblclick;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondragend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondragend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondragenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondragenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondragleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondragleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondragover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondragover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondragstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondragstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondrop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ondurationchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ondurationchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onfocusin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onfocusin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onfocusout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onfocusout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_oninput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_oninput;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onemptied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onemptied;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onkeydown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onkeydown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onkeypress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onkeypress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onkeyup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onkeyup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onloadeddata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onloadeddata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onloadedmetadata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onloadedmetadata;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onloadstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onloadstart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmousedown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmousedown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmouseenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmouseenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmouseleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmouseleave;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmousemove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmousemove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmouseout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmouseout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmouseover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmouseover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmouseup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmouseup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onmousewheel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onmousewheel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onoffline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onoffline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ononline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ononline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onratechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onratechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onreset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onseeked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onseeked;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onseeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onseeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onstorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onstorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onsubmit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onsuspend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onsuspend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_ontimeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_ontimeupdate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onpause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onpause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onplaying;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onplaying;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onvolumechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onvolumechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, VARIANT v) put_onwaiting;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow7 self, out VARIANT p) get_onwaiting;
			}
		}
		[CRepr]
		public struct IHTMLWindow8 : IDispatch
		{
			public const new Guid IID = .(0x305107ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onmspointerdown(VARIANT v) mut => VT.put_onmspointerdown(ref this, v);
			public HRESULT get_onmspointerdown(out VARIANT p) mut => VT.get_onmspointerdown(ref this, out p);
			public HRESULT put_onmspointermove(VARIANT v) mut => VT.put_onmspointermove(ref this, v);
			public HRESULT get_onmspointermove(out VARIANT p) mut => VT.get_onmspointermove(ref this, out p);
			public HRESULT put_onmspointerup(VARIANT v) mut => VT.put_onmspointerup(ref this, v);
			public HRESULT get_onmspointerup(out VARIANT p) mut => VT.get_onmspointerup(ref this, out p);
			public HRESULT put_onmspointerover(VARIANT v) mut => VT.put_onmspointerover(ref this, v);
			public HRESULT get_onmspointerover(out VARIANT p) mut => VT.get_onmspointerover(ref this, out p);
			public HRESULT put_onmspointerout(VARIANT v) mut => VT.put_onmspointerout(ref this, v);
			public HRESULT get_onmspointerout(out VARIANT p) mut => VT.get_onmspointerout(ref this, out p);
			public HRESULT put_onmspointercancel(VARIANT v) mut => VT.put_onmspointercancel(ref this, v);
			public HRESULT get_onmspointercancel(out VARIANT p) mut => VT.get_onmspointercancel(ref this, out p);
			public HRESULT put_onmspointerhover(VARIANT v) mut => VT.put_onmspointerhover(ref this, v);
			public HRESULT get_onmspointerhover(out VARIANT p) mut => VT.get_onmspointerhover(ref this, out p);
			public HRESULT put_onmsgesturestart(VARIANT v) mut => VT.put_onmsgesturestart(ref this, v);
			public HRESULT get_onmsgesturestart(out VARIANT p) mut => VT.get_onmsgesturestart(ref this, out p);
			public HRESULT put_onmsgesturechange(VARIANT v) mut => VT.put_onmsgesturechange(ref this, v);
			public HRESULT get_onmsgesturechange(out VARIANT p) mut => VT.get_onmsgesturechange(ref this, out p);
			public HRESULT put_onmsgestureend(VARIANT v) mut => VT.put_onmsgestureend(ref this, v);
			public HRESULT get_onmsgestureend(out VARIANT p) mut => VT.get_onmsgestureend(ref this, out p);
			public HRESULT put_onmsgesturehold(VARIANT v) mut => VT.put_onmsgesturehold(ref this, v);
			public HRESULT get_onmsgesturehold(out VARIANT p) mut => VT.get_onmsgesturehold(ref this, out p);
			public HRESULT put_onmsgesturetap(VARIANT v) mut => VT.put_onmsgesturetap(ref this, v);
			public HRESULT get_onmsgesturetap(out VARIANT p) mut => VT.get_onmsgesturetap(ref this, out p);
			public HRESULT put_onmsgesturedoubletap(VARIANT v) mut => VT.put_onmsgesturedoubletap(ref this, v);
			public HRESULT get_onmsgesturedoubletap(out VARIANT p) mut => VT.get_onmsgesturedoubletap(ref this, out p);
			public HRESULT put_onmsinertiastart(VARIANT v) mut => VT.put_onmsinertiastart(ref this, v);
			public HRESULT get_onmsinertiastart(out VARIANT p) mut => VT.get_onmsinertiastart(ref this, out p);
			public HRESULT get_applicationCache(out IHTMLApplicationCache* p) mut => VT.get_applicationCache(ref this, out p);
			public HRESULT put_onpopstate(VARIANT v) mut => VT.put_onpopstate(ref this, v);
			public HRESULT get_onpopstate(out VARIANT p) mut => VT.get_onpopstate(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointerdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointerdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointermove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointermove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointerup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointerup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointerover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointerover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointerout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointerout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointercancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointercancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmspointerhover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmspointerhover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsgesturestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsgesturestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsgesturechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsgesturechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsgestureend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsgestureend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsgesturehold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsgesturehold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsgesturetap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsgesturetap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsgesturedoubletap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsgesturedoubletap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onmsinertiastart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onmsinertiastart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out IHTMLApplicationCache* p) get_applicationCache;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, VARIANT v) put_onpopstate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLWindow8 self, out VARIANT p) get_onpopstate;
			}
		}
		[CRepr]
		public struct DispHTMLScreen : IDispatch
		{
			public const new Guid IID = .(0x3050f591, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLWindow2 : IDispatch
		{
			public const new Guid IID = .(0x3050f55d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLWindowProxy : IDispatch
		{
			public const new Guid IID = .(0x3050f55e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDocumentCompatibleInfo : IDispatch
		{
			public const new Guid IID = .(0x3051041a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_userAgent(out BSTR p) mut => VT.get_userAgent(ref this, out p);
			public HRESULT get_version(out BSTR p) mut => VT.get_version(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocumentCompatibleInfo self, out BSTR p) get_userAgent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocumentCompatibleInfo self, out BSTR p) get_version;
			}
		}
		[CRepr]
		public struct IHTMLDocumentCompatibleInfoCollection : IDispatch
		{
			public const new Guid IID = .(0x30510418, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out IHTMLDocumentCompatibleInfo* compatibleInfo) mut => VT.item(ref this, index, out compatibleInfo);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocumentCompatibleInfoCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocumentCompatibleInfoCollection self, int32 index, out IHTMLDocumentCompatibleInfo* compatibleInfo) item;
			}
		}
		[CRepr]
		public struct DispHTMLDocumentCompatibleInfo : IDispatch
		{
			public const new Guid IID = .(0x3050f53e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLDocumentCompatibleInfoCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f53f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLDocumentEvents4 : IDispatch
		{
			public const new Guid IID = .(0x30510737, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLDocumentEvents3 : IDispatch
		{
			public const new Guid IID = .(0x3050f5a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLDocumentEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f613, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLDocumentEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f260, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGSVGElement : IDispatch
		{
			public const new Guid IID = .(0x305104e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x(ref ISVGAnimatedLength v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLength* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLength v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLength* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_width(ref ISVGAnimatedLength v) mut => VT.putref_width(ref this, ref v);
			public HRESULT get_width(out ISVGAnimatedLength* p) mut => VT.get_width(ref this, out p);
			public HRESULT putref_height(ref ISVGAnimatedLength v) mut => VT.putref_height(ref this, ref v);
			public HRESULT get_height(out ISVGAnimatedLength* p) mut => VT.get_height(ref this, out p);
			public HRESULT put_contentScriptType(BSTR v) mut => VT.put_contentScriptType(ref this, v);
			public HRESULT get_contentScriptType(out BSTR p) mut => VT.get_contentScriptType(ref this, out p);
			public HRESULT put_contentStyleType(BSTR v) mut => VT.put_contentStyleType(ref this, v);
			public HRESULT get_contentStyleType(out BSTR p) mut => VT.get_contentStyleType(ref this, out p);
			public HRESULT putref_viewport(ref ISVGRect v) mut => VT.putref_viewport(ref this, ref v);
			public HRESULT get_viewport(out ISVGRect* p) mut => VT.get_viewport(ref this, out p);
			public HRESULT put_pixelUnitToMillimeterX(float v) mut => VT.put_pixelUnitToMillimeterX(ref this, v);
			public HRESULT get_pixelUnitToMillimeterX(out float p) mut => VT.get_pixelUnitToMillimeterX(ref this, out p);
			public HRESULT put_pixelUnitToMillimeterY(float v) mut => VT.put_pixelUnitToMillimeterY(ref this, v);
			public HRESULT get_pixelUnitToMillimeterY(out float p) mut => VT.get_pixelUnitToMillimeterY(ref this, out p);
			public HRESULT put_screenPixelToMillimeterX(float v) mut => VT.put_screenPixelToMillimeterX(ref this, v);
			public HRESULT get_screenPixelToMillimeterX(out float p) mut => VT.get_screenPixelToMillimeterX(ref this, out p);
			public HRESULT put_screenPixelToMillimeterY(float v) mut => VT.put_screenPixelToMillimeterY(ref this, v);
			public HRESULT get_screenPixelToMillimeterY(out float p) mut => VT.get_screenPixelToMillimeterY(ref this, out p);
			public HRESULT put_useCurrentView(int16 v) mut => VT.put_useCurrentView(ref this, v);
			public HRESULT get_useCurrentView(out int16 p) mut => VT.get_useCurrentView(ref this, out p);
			public HRESULT putref_currentView(ref ISVGViewSpec v) mut => VT.putref_currentView(ref this, ref v);
			public HRESULT get_currentView(out ISVGViewSpec* p) mut => VT.get_currentView(ref this, out p);
			public HRESULT put_currentScale(float v) mut => VT.put_currentScale(ref this, v);
			public HRESULT get_currentScale(out float p) mut => VT.get_currentScale(ref this, out p);
			public HRESULT putref_currentTranslate(ref ISVGPoint v) mut => VT.putref_currentTranslate(ref this, ref v);
			public HRESULT get_currentTranslate(out ISVGPoint* p) mut => VT.get_currentTranslate(ref this, out p);
			public HRESULT suspendRedraw(uint32 maxWaitMilliseconds, out uint32 pResult) mut => VT.suspendRedraw(ref this, maxWaitMilliseconds, out pResult);
			public HRESULT unsuspendRedraw(uint32 suspendHandeID) mut => VT.unsuspendRedraw(ref this, suspendHandeID);
			public HRESULT unsuspendRedrawAll() mut => VT.unsuspendRedrawAll(ref this);
			public HRESULT forceRedraw() mut => VT.forceRedraw(ref this);
			public HRESULT pauseAnimations() mut => VT.pauseAnimations(ref this);
			public HRESULT unpauseAnimations() mut => VT.unpauseAnimations(ref this);
			public HRESULT animationsPaused(out int16 pResult) mut => VT.animationsPaused(ref this, out pResult);
			public HRESULT getCurrentTime(out float pResult) mut => VT.getCurrentTime(ref this, out pResult);
			public HRESULT setCurrentTime(float seconds) mut => VT.setCurrentTime(ref this, seconds);
			public HRESULT getIntersectionList(ref ISVGRect rect, ref ISVGElement referenceElement, out VARIANT pResult) mut => VT.getIntersectionList(ref this, ref rect, ref referenceElement, out pResult);
			public HRESULT getEnclosureList(ref ISVGRect rect, ref ISVGElement referenceElement, out VARIANT pResult) mut => VT.getEnclosureList(ref this, ref rect, ref referenceElement, out pResult);
			public HRESULT checkIntersection(ref ISVGElement element, ref ISVGRect rect, out int16 pResult) mut => VT.checkIntersection(ref this, ref element, ref rect, out pResult);
			public HRESULT checkEnclosure(ref ISVGElement element, ref ISVGRect rect, out int16 pResult) mut => VT.checkEnclosure(ref this, ref element, ref rect, out pResult);
			public HRESULT deselectAll() mut => VT.deselectAll(ref this);
			public HRESULT createSVGNumber(out ISVGNumber* pResult) mut => VT.createSVGNumber(ref this, out pResult);
			public HRESULT createSVGLength(out ISVGLength* pResult) mut => VT.createSVGLength(ref this, out pResult);
			public HRESULT createSVGAngle(out ISVGAngle* pResult) mut => VT.createSVGAngle(ref this, out pResult);
			public HRESULT createSVGPoint(out ISVGPoint* pResult) mut => VT.createSVGPoint(ref this, out pResult);
			public HRESULT createSVGMatrix(out ISVGMatrix* pResult) mut => VT.createSVGMatrix(ref this, out pResult);
			public HRESULT createSVGRect(out ISVGRect* pResult) mut => VT.createSVGRect(ref this, out pResult);
			public HRESULT createSVGTransform(out ISVGTransform* pResult) mut => VT.createSVGTransform(ref this, out pResult);
			public HRESULT createSVGTransformFromMatrix(ref ISVGMatrix matrix, out ISVGTransform* pResult) mut => VT.createSVGTransformFromMatrix(ref this, ref matrix, out pResult);
			public HRESULT getElementById(BSTR elementId, out IHTMLElement* pResult) mut => VT.getElementById(ref this, elementId, out pResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGAnimatedLength v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGAnimatedLength* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGAnimatedLength v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGAnimatedLength* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGAnimatedLength v) putref_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGAnimatedLength* p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGAnimatedLength v) putref_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGAnimatedLength* p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, BSTR v) put_contentScriptType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out BSTR p) get_contentScriptType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, BSTR v) put_contentStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out BSTR p) get_contentStyleType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGRect v) putref_viewport;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGRect* p) get_viewport;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, float v) put_pixelUnitToMillimeterX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out float p) get_pixelUnitToMillimeterX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, float v) put_pixelUnitToMillimeterY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out float p) get_pixelUnitToMillimeterY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, float v) put_screenPixelToMillimeterX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out float p) get_screenPixelToMillimeterX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, float v) put_screenPixelToMillimeterY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out float p) get_screenPixelToMillimeterY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, int16 v) put_useCurrentView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out int16 p) get_useCurrentView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGViewSpec v) putref_currentView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGViewSpec* p) get_currentView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, float v) put_currentScale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out float p) get_currentScale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGPoint v) putref_currentTranslate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGPoint* p) get_currentTranslate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, uint32 maxWaitMilliseconds, out uint32 pResult) suspendRedraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, uint32 suspendHandeID) unsuspendRedraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self) unsuspendRedrawAll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self) forceRedraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self) pauseAnimations;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self) unpauseAnimations;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out int16 pResult) animationsPaused;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out float pResult) getCurrentTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, float seconds) setCurrentTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGRect rect, ref ISVGElement referenceElement, out VARIANT pResult) getIntersectionList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGRect rect, ref ISVGElement referenceElement, out VARIANT pResult) getEnclosureList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGElement element, ref ISVGRect rect, out int16 pResult) checkIntersection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGElement element, ref ISVGRect rect, out int16 pResult) checkEnclosure;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self) deselectAll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGNumber* pResult) createSVGNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGLength* pResult) createSVGLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGAngle* pResult) createSVGAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGPoint* pResult) createSVGPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGMatrix* pResult) createSVGMatrix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGRect* pResult) createSVGRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, out ISVGTransform* pResult) createSVGTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, ref ISVGMatrix matrix, out ISVGTransform* pResult) createSVGTransformFromMatrix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGSVGElement self, BSTR elementId, out IHTMLElement* pResult) getElementById;
			}
		}
		[CRepr]
		public struct IDOMNodeIterator : IDispatch
		{
			public const new Guid IID = .(0x30510746, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_root(out IDispatch* p) mut => VT.get_root(ref this, out p);
			public HRESULT get_whatToShow(out uint32 p) mut => VT.get_whatToShow(ref this, out p);
			public HRESULT get_filter(out IDispatch* p) mut => VT.get_filter(ref this, out p);
			public HRESULT get_expandEntityReferences(out int16 p) mut => VT.get_expandEntityReferences(ref this, out p);
			public HRESULT nextNode(out IDispatch* ppRetNode) mut => VT.nextNode(ref this, out ppRetNode);
			public HRESULT previousNode(out IDispatch* ppRetNode) mut => VT.previousNode(ref this, out ppRetNode);
			public HRESULT detach() mut => VT.detach(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self, out IDispatch* p) get_root;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self, out uint32 p) get_whatToShow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self, out IDispatch* p) get_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self, out int16 p) get_expandEntityReferences;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self, out IDispatch* ppRetNode) nextNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self, out IDispatch* ppRetNode) previousNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMNodeIterator self) detach;
			}
		}
		[CRepr]
		public struct IDOMTreeWalker : IDispatch
		{
			public const new Guid IID = .(0x30510748, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_root(out IDispatch* p) mut => VT.get_root(ref this, out p);
			public HRESULT get_whatToShow(out uint32 p) mut => VT.get_whatToShow(ref this, out p);
			public HRESULT get_filter(out IDispatch* p) mut => VT.get_filter(ref this, out p);
			public HRESULT get_expandEntityReferences(out int16 p) mut => VT.get_expandEntityReferences(ref this, out p);
			public HRESULT putref_currentNode(ref IDispatch v) mut => VT.putref_currentNode(ref this, ref v);
			public HRESULT get_currentNode(out IDispatch* p) mut => VT.get_currentNode(ref this, out p);
			public HRESULT parentNode(out IDispatch* ppRetNode) mut => VT.parentNode(ref this, out ppRetNode);
			public HRESULT firstChild(out IDispatch* ppRetNode) mut => VT.firstChild(ref this, out ppRetNode);
			public HRESULT lastChild(out IDispatch* ppRetNode) mut => VT.lastChild(ref this, out ppRetNode);
			public HRESULT previousSibling(out IDispatch* ppRetNode) mut => VT.previousSibling(ref this, out ppRetNode);
			public HRESULT nextSibling(out IDispatch* ppRetNode) mut => VT.nextSibling(ref this, out ppRetNode);
			public HRESULT previousNode(out IDispatch* ppRetNode) mut => VT.previousNode(ref this, out ppRetNode);
			public HRESULT nextNode(out IDispatch* ppRetNode) mut => VT.nextNode(ref this, out ppRetNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* p) get_root;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out uint32 p) get_whatToShow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* p) get_filter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out int16 p) get_expandEntityReferences;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, ref IDispatch v) putref_currentNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* p) get_currentNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) parentNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) firstChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) lastChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) previousSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) nextSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) previousNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTreeWalker self, out IDispatch* ppRetNode) nextNode;
			}
		}
		[CRepr]
		public struct IDOMProcessingInstruction : IDispatch
		{
			public const new Guid IID = .(0x30510742, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_target(out BSTR p) mut => VT.get_target(ref this, out p);
			public HRESULT put_data(BSTR v) mut => VT.put_data(ref this, v);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProcessingInstruction self, out BSTR p) get_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProcessingInstruction self, BSTR v) put_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProcessingInstruction self, out BSTR p) get_data;
			}
		}
		[CRepr]
		public struct IHTMLDocument3 : IDispatch
		{
			public const new Guid IID = .(0x3050f485, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT releaseCapture() mut => VT.releaseCapture(ref this);
			public HRESULT recalc(int16 fForce) mut => VT.recalc(ref this, fForce);
			public HRESULT createTextNode(BSTR text, out IHTMLDOMNode* newTextNode) mut => VT.createTextNode(ref this, text, out newTextNode);
			public HRESULT get_documentElement(out IHTMLElement* p) mut => VT.get_documentElement(ref this, out p);
			public HRESULT get_uniqueID(out BSTR p) mut => VT.get_uniqueID(ref this, out p);
			public HRESULT attachEvent(BSTR event, ref IDispatch pDisp, out int16 pfResult) mut => VT.attachEvent(ref this, event, ref pDisp, out pfResult);
			public HRESULT detachEvent(BSTR event, ref IDispatch pDisp) mut => VT.detachEvent(ref this, event, ref pDisp);
			public HRESULT put_onrowsdelete(VARIANT v) mut => VT.put_onrowsdelete(ref this, v);
			public HRESULT get_onrowsdelete(out VARIANT p) mut => VT.get_onrowsdelete(ref this, out p);
			public HRESULT put_onrowsinserted(VARIANT v) mut => VT.put_onrowsinserted(ref this, v);
			public HRESULT get_onrowsinserted(out VARIANT p) mut => VT.get_onrowsinserted(ref this, out p);
			public HRESULT put_oncellchange(VARIANT v) mut => VT.put_oncellchange(ref this, v);
			public HRESULT get_oncellchange(out VARIANT p) mut => VT.get_oncellchange(ref this, out p);
			public HRESULT put_ondatasetchanged(VARIANT v) mut => VT.put_ondatasetchanged(ref this, v);
			public HRESULT get_ondatasetchanged(out VARIANT p) mut => VT.get_ondatasetchanged(ref this, out p);
			public HRESULT put_ondataavailable(VARIANT v) mut => VT.put_ondataavailable(ref this, v);
			public HRESULT get_ondataavailable(out VARIANT p) mut => VT.get_ondataavailable(ref this, out p);
			public HRESULT put_ondatasetcomplete(VARIANT v) mut => VT.put_ondatasetcomplete(ref this, v);
			public HRESULT get_ondatasetcomplete(out VARIANT p) mut => VT.get_ondatasetcomplete(ref this, out p);
			public HRESULT put_onpropertychange(VARIANT v) mut => VT.put_onpropertychange(ref this, v);
			public HRESULT get_onpropertychange(out VARIANT p) mut => VT.get_onpropertychange(ref this, out p);
			public HRESULT put_dir(BSTR v) mut => VT.put_dir(ref this, v);
			public HRESULT get_dir(out BSTR p) mut => VT.get_dir(ref this, out p);
			public HRESULT put_oncontextmenu(VARIANT v) mut => VT.put_oncontextmenu(ref this, v);
			public HRESULT get_oncontextmenu(out VARIANT p) mut => VT.get_oncontextmenu(ref this, out p);
			public HRESULT put_onstop(VARIANT v) mut => VT.put_onstop(ref this, v);
			public HRESULT get_onstop(out VARIANT p) mut => VT.get_onstop(ref this, out p);
			public HRESULT createDocumentFragment(out IHTMLDocument2* pNewDoc) mut => VT.createDocumentFragment(ref this, out pNewDoc);
			public HRESULT get_parentDocument(out IHTMLDocument2* p) mut => VT.get_parentDocument(ref this, out p);
			public HRESULT put_enableDownload(int16 v) mut => VT.put_enableDownload(ref this, v);
			public HRESULT get_enableDownload(out int16 p) mut => VT.get_enableDownload(ref this, out p);
			public HRESULT put_baseUrl(BSTR v) mut => VT.put_baseUrl(ref this, v);
			public HRESULT get_baseUrl(out BSTR p) mut => VT.get_baseUrl(ref this, out p);
			public HRESULT get_childNodes(out IDispatch* p) mut => VT.get_childNodes(ref this, out p);
			public HRESULT put_inheritStyleSheets(int16 v) mut => VT.put_inheritStyleSheets(ref this, v);
			public HRESULT get_inheritStyleSheets(out int16 p) mut => VT.get_inheritStyleSheets(ref this, out p);
			public HRESULT put_onbeforeeditfocus(VARIANT v) mut => VT.put_onbeforeeditfocus(ref this, v);
			public HRESULT get_onbeforeeditfocus(out VARIANT p) mut => VT.get_onbeforeeditfocus(ref this, out p);
			public HRESULT getElementsByName(BSTR v, out IHTMLElementCollection* pelColl) mut => VT.getElementsByName(ref this, v, out pelColl);
			public HRESULT getElementById(BSTR v, out IHTMLElement* pel) mut => VT.getElementById(ref this, v, out pel);
			public HRESULT getElementsByTagName(BSTR v, out IHTMLElementCollection* pelColl) mut => VT.getElementsByTagName(ref this, v, out pelColl);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self) releaseCapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, int16 fForce) recalc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR text, out IHTMLDOMNode* newTextNode) createTextNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out IHTMLElement* p) get_documentElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out BSTR p) get_uniqueID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR event, ref IDispatch pDisp, out int16 pfResult) attachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR event, ref IDispatch pDisp) detachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_onrowsdelete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_onrowsdelete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_onrowsinserted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_onrowsinserted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_oncellchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_oncellchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_ondatasetchanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_ondatasetchanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_ondataavailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_ondataavailable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_ondatasetcomplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_ondatasetcomplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_onpropertychange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_onpropertychange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR v) put_dir;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out BSTR p) get_dir;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_oncontextmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_oncontextmenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_onstop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_onstop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out IHTMLDocument2* pNewDoc) createDocumentFragment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out IHTMLDocument2* p) get_parentDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, int16 v) put_enableDownload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out int16 p) get_enableDownload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR v) put_baseUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out BSTR p) get_baseUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out IDispatch* p) get_childNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, int16 v) put_inheritStyleSheets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out int16 p) get_inheritStyleSheets;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, VARIANT v) put_onbeforeeditfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, out VARIANT p) get_onbeforeeditfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR v, out IHTMLElementCollection* pelColl) getElementsByName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR v, out IHTMLElement* pel) getElementById;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument3 self, BSTR v, out IHTMLElementCollection* pelColl) getElementsByTagName;
			}
		}
		[CRepr]
		public struct IHTMLDocument4 : IDispatch
		{
			public const new Guid IID = .(0x3050f69a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT focus() mut => VT.focus(ref this);
			public HRESULT hasFocus(out int16 pfFocus) mut => VT.hasFocus(ref this, out pfFocus);
			public HRESULT put_onselectionchange(VARIANT v) mut => VT.put_onselectionchange(ref this, v);
			public HRESULT get_onselectionchange(out VARIANT p) mut => VT.get_onselectionchange(ref this, out p);
			public HRESULT get_namespaces(out IDispatch* p) mut => VT.get_namespaces(ref this, out p);
			public HRESULT createDocumentFromUrl(BSTR bstrUrl, BSTR bstrOptions, out IHTMLDocument2* newDoc) mut => VT.createDocumentFromUrl(ref this, bstrUrl, bstrOptions, out newDoc);
			public HRESULT put_media(BSTR v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out BSTR p) mut => VT.get_media(ref this, out p);
			public HRESULT createEventObject(ref VARIANT pvarEventObject, out IHTMLEventObj* ppEventObj) mut => VT.createEventObject(ref this, ref pvarEventObject, out ppEventObj);
			public HRESULT fireEvent(BSTR bstrEventName, ref VARIANT pvarEventObject, out int16 pfCancelled) mut => VT.fireEvent(ref this, bstrEventName, ref pvarEventObject, out pfCancelled);
			public HRESULT createRenderStyle(BSTR v, out IHTMLRenderStyle* ppIHTMLRenderStyle) mut => VT.createRenderStyle(ref this, v, out ppIHTMLRenderStyle);
			public HRESULT put_oncontrolselect(VARIANT v) mut => VT.put_oncontrolselect(ref this, v);
			public HRESULT get_oncontrolselect(out VARIANT p) mut => VT.get_oncontrolselect(ref this, out p);
			public HRESULT get_URLUnencoded(out BSTR p) mut => VT.get_URLUnencoded(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self) focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, out int16 pfFocus) hasFocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, VARIANT v) put_onselectionchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, out VARIANT p) get_onselectionchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, out IDispatch* p) get_namespaces;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, BSTR bstrUrl, BSTR bstrOptions, out IHTMLDocument2* newDoc) createDocumentFromUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, BSTR v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, out BSTR p) get_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, ref VARIANT pvarEventObject, out IHTMLEventObj* ppEventObj) createEventObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, BSTR bstrEventName, ref VARIANT pvarEventObject, out int16 pfCancelled) fireEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, BSTR v, out IHTMLRenderStyle* ppIHTMLRenderStyle) createRenderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, VARIANT v) put_oncontrolselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, out VARIANT p) get_oncontrolselect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument4 self, out BSTR p) get_URLUnencoded;
			}
		}
		[CRepr]
		public struct IHTMLDocument5 : IDispatch
		{
			public const new Guid IID = .(0x3050f80c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onmousewheel(VARIANT v) mut => VT.put_onmousewheel(ref this, v);
			public HRESULT get_onmousewheel(out VARIANT p) mut => VT.get_onmousewheel(ref this, out p);
			public HRESULT get_doctype(out IHTMLDOMNode* p) mut => VT.get_doctype(ref this, out p);
			public HRESULT get_implementation(out IHTMLDOMImplementation* p) mut => VT.get_implementation(ref this, out p);
			public HRESULT createAttribute(BSTR bstrattrName, out IHTMLDOMAttribute* ppattribute) mut => VT.createAttribute(ref this, bstrattrName, out ppattribute);
			public HRESULT createComment(BSTR bstrdata, out IHTMLDOMNode* ppRetNode) mut => VT.createComment(ref this, bstrdata, out ppRetNode);
			public HRESULT put_onfocusin(VARIANT v) mut => VT.put_onfocusin(ref this, v);
			public HRESULT get_onfocusin(out VARIANT p) mut => VT.get_onfocusin(ref this, out p);
			public HRESULT put_onfocusout(VARIANT v) mut => VT.put_onfocusout(ref this, v);
			public HRESULT get_onfocusout(out VARIANT p) mut => VT.get_onfocusout(ref this, out p);
			public HRESULT put_onactivate(VARIANT v) mut => VT.put_onactivate(ref this, v);
			public HRESULT get_onactivate(out VARIANT p) mut => VT.get_onactivate(ref this, out p);
			public HRESULT put_ondeactivate(VARIANT v) mut => VT.put_ondeactivate(ref this, v);
			public HRESULT get_ondeactivate(out VARIANT p) mut => VT.get_ondeactivate(ref this, out p);
			public HRESULT put_onbeforeactivate(VARIANT v) mut => VT.put_onbeforeactivate(ref this, v);
			public HRESULT get_onbeforeactivate(out VARIANT p) mut => VT.get_onbeforeactivate(ref this, out p);
			public HRESULT put_onbeforedeactivate(VARIANT v) mut => VT.put_onbeforedeactivate(ref this, v);
			public HRESULT get_onbeforedeactivate(out VARIANT p) mut => VT.get_onbeforedeactivate(ref this, out p);
			public HRESULT get_compatMode(out BSTR p) mut => VT.get_compatMode(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_onmousewheel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_onmousewheel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out IHTMLDOMNode* p) get_doctype;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out IHTMLDOMImplementation* p) get_implementation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, BSTR bstrattrName, out IHTMLDOMAttribute* ppattribute) createAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, BSTR bstrdata, out IHTMLDOMNode* ppRetNode) createComment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_onfocusin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_onfocusin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_onfocusout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_onfocusout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_onactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_onactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_ondeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_ondeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_onbeforeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_onbeforeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, VARIANT v) put_onbeforedeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out VARIANT p) get_onbeforedeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument5 self, out BSTR p) get_compatMode;
			}
		}
		[CRepr]
		public struct IHTMLDocument6 : IDispatch
		{
			public const new Guid IID = .(0x30510417, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_compatible(out IHTMLDocumentCompatibleInfoCollection* p) mut => VT.get_compatible(ref this, out p);
			public HRESULT get_documentMode(out VARIANT p) mut => VT.get_documentMode(ref this, out p);
			public HRESULT put_onstorage(VARIANT v) mut => VT.put_onstorage(ref this, v);
			public HRESULT get_onstorage(out VARIANT p) mut => VT.get_onstorage(ref this, out p);
			public HRESULT put_onstoragecommit(VARIANT v) mut => VT.put_onstoragecommit(ref this, v);
			public HRESULT get_onstoragecommit(out VARIANT p) mut => VT.get_onstoragecommit(ref this, out p);
			public HRESULT getElementById(BSTR bstrId, out IHTMLElement2* ppRetElement) mut => VT.getElementById(ref this, bstrId, out ppRetElement);
			public HRESULT updateSettings() mut => VT.updateSettings(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, out IHTMLDocumentCompatibleInfoCollection* p) get_compatible;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, out VARIANT p) get_documentMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, VARIANT v) put_onstorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, out VARIANT p) get_onstorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, VARIANT v) put_onstoragecommit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, out VARIANT p) get_onstoragecommit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self, BSTR bstrId, out IHTMLElement2* ppRetElement) getElementById;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument6 self) updateSettings;
			}
		}
		[CRepr]
		public struct IHTMLDocument8 : IDispatch
		{
			public const new Guid IID = .(0x305107d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onmscontentzoom(VARIANT v) mut => VT.put_onmscontentzoom(ref this, v);
			public HRESULT get_onmscontentzoom(out VARIANT p) mut => VT.get_onmscontentzoom(ref this, out p);
			public HRESULT put_onmspointerdown(VARIANT v) mut => VT.put_onmspointerdown(ref this, v);
			public HRESULT get_onmspointerdown(out VARIANT p) mut => VT.get_onmspointerdown(ref this, out p);
			public HRESULT put_onmspointermove(VARIANT v) mut => VT.put_onmspointermove(ref this, v);
			public HRESULT get_onmspointermove(out VARIANT p) mut => VT.get_onmspointermove(ref this, out p);
			public HRESULT put_onmspointerup(VARIANT v) mut => VT.put_onmspointerup(ref this, v);
			public HRESULT get_onmspointerup(out VARIANT p) mut => VT.get_onmspointerup(ref this, out p);
			public HRESULT put_onmspointerover(VARIANT v) mut => VT.put_onmspointerover(ref this, v);
			public HRESULT get_onmspointerover(out VARIANT p) mut => VT.get_onmspointerover(ref this, out p);
			public HRESULT put_onmspointerout(VARIANT v) mut => VT.put_onmspointerout(ref this, v);
			public HRESULT get_onmspointerout(out VARIANT p) mut => VT.get_onmspointerout(ref this, out p);
			public HRESULT put_onmspointercancel(VARIANT v) mut => VT.put_onmspointercancel(ref this, v);
			public HRESULT get_onmspointercancel(out VARIANT p) mut => VT.get_onmspointercancel(ref this, out p);
			public HRESULT put_onmspointerhover(VARIANT v) mut => VT.put_onmspointerhover(ref this, v);
			public HRESULT get_onmspointerhover(out VARIANT p) mut => VT.get_onmspointerhover(ref this, out p);
			public HRESULT put_onmsgesturestart(VARIANT v) mut => VT.put_onmsgesturestart(ref this, v);
			public HRESULT get_onmsgesturestart(out VARIANT p) mut => VT.get_onmsgesturestart(ref this, out p);
			public HRESULT put_onmsgesturechange(VARIANT v) mut => VT.put_onmsgesturechange(ref this, v);
			public HRESULT get_onmsgesturechange(out VARIANT p) mut => VT.get_onmsgesturechange(ref this, out p);
			public HRESULT put_onmsgestureend(VARIANT v) mut => VT.put_onmsgestureend(ref this, v);
			public HRESULT get_onmsgestureend(out VARIANT p) mut => VT.get_onmsgestureend(ref this, out p);
			public HRESULT put_onmsgesturehold(VARIANT v) mut => VT.put_onmsgesturehold(ref this, v);
			public HRESULT get_onmsgesturehold(out VARIANT p) mut => VT.get_onmsgesturehold(ref this, out p);
			public HRESULT put_onmsgesturetap(VARIANT v) mut => VT.put_onmsgesturetap(ref this, v);
			public HRESULT get_onmsgesturetap(out VARIANT p) mut => VT.get_onmsgesturetap(ref this, out p);
			public HRESULT put_onmsgesturedoubletap(VARIANT v) mut => VT.put_onmsgesturedoubletap(ref this, v);
			public HRESULT get_onmsgesturedoubletap(out VARIANT p) mut => VT.get_onmsgesturedoubletap(ref this, out p);
			public HRESULT put_onmsinertiastart(VARIANT v) mut => VT.put_onmsinertiastart(ref this, v);
			public HRESULT get_onmsinertiastart(out VARIANT p) mut => VT.get_onmsinertiastart(ref this, out p);
			public HRESULT elementsFromPoint(float x, float y, out IHTMLDOMChildrenCollection* elementsHit) mut => VT.elementsFromPoint(ref this, x, y, out elementsHit);
			public HRESULT elementsFromRect(float left, float top, float width, float height, out IHTMLDOMChildrenCollection* elementsHit) mut => VT.elementsFromRect(ref this, left, top, width, height, out elementsHit);
			public HRESULT put_onmsmanipulationstatechanged(VARIANT v) mut => VT.put_onmsmanipulationstatechanged(ref this, v);
			public HRESULT get_onmsmanipulationstatechanged(out VARIANT p) mut => VT.get_onmsmanipulationstatechanged(ref this, out p);
			public HRESULT put_msCapsLockWarningOff(int16 v) mut => VT.put_msCapsLockWarningOff(ref this, v);
			public HRESULT get_msCapsLockWarningOff(out int16 p) mut => VT.get_msCapsLockWarningOff(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmscontentzoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmscontentzoom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointerdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointerdown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointermove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointermove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointerup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointerup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointerover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointerover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointerout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointerout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointercancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointercancel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmspointerhover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmspointerhover;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsgesturestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsgesturestart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsgesturechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsgesturechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsgestureend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsgestureend;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsgesturehold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsgesturehold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsgesturetap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsgesturetap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsgesturedoubletap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsgesturedoubletap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsinertiastart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsinertiastart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, float x, float y, out IHTMLDOMChildrenCollection* elementsHit) elementsFromPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, float left, float top, float width, float height, out IHTMLDOMChildrenCollection* elementsHit) elementsFromRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, VARIANT v) put_onmsmanipulationstatechanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out VARIANT p) get_onmsmanipulationstatechanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, int16 v) put_msCapsLockWarningOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDocument8 self, out int16 p) get_msCapsLockWarningOff;
			}
		}
		[CRepr]
		public struct IDocumentEvent : IDispatch
		{
			public const new Guid IID = .(0x305104bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createEvent(BSTR eventType, out IDOMEvent* ppEvent) mut => VT.createEvent(ref this, eventType, out ppEvent);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocumentEvent self, BSTR eventType, out IDOMEvent* ppEvent) createEvent;
			}
		}
		[CRepr]
		public struct IDocumentRange : IDispatch
		{
			public const new Guid IID = .(0x305104af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createRange(out IHTMLDOMRange* ppIHTMLDOMRange) mut => VT.createRange(ref this, out ppIHTMLDOMRange);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocumentRange self, out IHTMLDOMRange* ppIHTMLDOMRange) createRange;
			}
		}
		[CRepr]
		public struct IDocumentSelector : IDispatch
		{
			public const new Guid IID = .(0x30510462, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT querySelector(BSTR v, out IHTMLElement* pel) mut => VT.querySelector(ref this, v, out pel);
			public HRESULT querySelectorAll(BSTR v, out IHTMLDOMChildrenCollection* pel) mut => VT.querySelectorAll(ref this, v, out pel);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocumentSelector self, BSTR v, out IHTMLElement* pel) querySelector;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocumentSelector self, BSTR v, out IHTMLDOMChildrenCollection* pel) querySelectorAll;
			}
		}
		[CRepr]
		public struct IDocumentTraversal : IDispatch
		{
			public const new Guid IID = .(0x30510744, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT createNodeIterator(ref IDispatch pRootNode, int32 ulWhatToShow, ref VARIANT pFilter, int16 fEntityReferenceExpansion, out IDOMNodeIterator* ppNodeIterator) mut => VT.createNodeIterator(ref this, ref pRootNode, ulWhatToShow, ref pFilter, fEntityReferenceExpansion, out ppNodeIterator);
			public HRESULT createTreeWalker(ref IDispatch pRootNode, int32 ulWhatToShow, ref VARIANT pFilter, int16 fEntityReferenceExpansion, out IDOMTreeWalker* ppTreeWalker) mut => VT.createTreeWalker(ref this, ref pRootNode, ulWhatToShow, ref pFilter, fEntityReferenceExpansion, out ppTreeWalker);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocumentTraversal self, ref IDispatch pRootNode, int32 ulWhatToShow, ref VARIANT pFilter, int16 fEntityReferenceExpansion, out IDOMNodeIterator* ppNodeIterator) createNodeIterator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocumentTraversal self, ref IDispatch pRootNode, int32 ulWhatToShow, ref VARIANT pFilter, int16 fEntityReferenceExpansion, out IDOMTreeWalker* ppTreeWalker) createTreeWalker;
			}
		}
		[CRepr]
		public struct DispHTMLDocument : IDispatch
		{
			public const new Guid IID = .(0x3050f55f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DWebBridgeEvents : IDispatch
		{
			public const new Guid IID = .(0xa6d897ff, 0x0a95, 0x11d1, 0xb0, 0xba, 0x00, 0x60, 0x08, 0x16, 0x6e, 0x11);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IWebBridge : IDispatch
		{
			public const new Guid IID = .(0xae24fdad, 0x03c6, 0x11d1, 0x8b, 0x76, 0x00, 0x80, 0xc7, 0x44, 0xf3, 0x89);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_URL(BSTR v) mut => VT.put_URL(ref this, v);
			public HRESULT get_URL(out BSTR p) mut => VT.get_URL(ref this, out p);
			public HRESULT put_Scrollbar(int16 v) mut => VT.put_Scrollbar(ref this, v);
			public HRESULT get_Scrollbar(out int16 p) mut => VT.get_Scrollbar(ref this, out p);
			public HRESULT put_embed(int16 v) mut => VT.put_embed(ref this, v);
			public HRESULT get_embed(out int16 p) mut => VT.get_embed(ref this, out p);
			public HRESULT get_event(out IDispatch* p) mut => VT.get_event(ref this, out p);
			public HRESULT get_readyState(out int32 p) mut => VT.get_readyState(ref this, out p);
			public HRESULT AboutBox() mut => VT.AboutBox(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, BSTR v) put_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, out BSTR p) get_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, int16 v) put_Scrollbar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, out int16 p) get_Scrollbar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, int16 v) put_embed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, out int16 p) get_embed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, out IDispatch* p) get_event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self, out int32 p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBridge self) AboutBox;
			}
		}
		[CRepr]
		public struct IWBScriptControl : IDispatch
		{
			public const new Guid IID = .(0xa5170870, 0x0cf8, 0x11d1, 0x8b, 0x91, 0x00, 0x80, 0xc7, 0x44, 0xf3, 0x89);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT raiseEvent(BSTR name, VARIANT eventData) mut => VT.raiseEvent(ref this, name, eventData);
			public HRESULT bubbleEvent() mut => VT.bubbleEvent(ref this);
			public HRESULT setContextMenu(VARIANT menuItemPairs) mut => VT.setContextMenu(ref this, menuItemPairs);
			public HRESULT put_selectableContent(int16 v) mut => VT.put_selectableContent(ref this, v);
			public HRESULT get_selectableContent(out int16 p) mut => VT.get_selectableContent(ref this, out p);
			public HRESULT get_frozen(out int16 p) mut => VT.get_frozen(ref this, out p);
			public HRESULT put_scrollbar(int16 v) mut => VT.put_scrollbar(ref this, v);
			public HRESULT get_scrollbar(out int16 p) mut => VT.get_scrollbar(ref this, out p);
			public HRESULT get_version(out BSTR p) mut => VT.get_version(ref this, out p);
			public HRESULT get_visibility(out int16 p) mut => VT.get_visibility(ref this, out p);
			public HRESULT put_onvisibilitychange(VARIANT v) mut => VT.put_onvisibilitychange(ref this, v);
			public HRESULT get_onvisibilitychange(out VARIANT p) mut => VT.get_onvisibilitychange(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, BSTR name, VARIANT eventData) raiseEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self) bubbleEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, VARIANT menuItemPairs) setContextMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, int16 v) put_selectableContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, out int16 p) get_selectableContent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, out int16 p) get_frozen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, int16 v) put_scrollbar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, out int16 p) get_scrollbar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, out BSTR p) get_version;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, out int16 p) get_visibility;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, VARIANT v) put_onvisibilitychange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWBScriptControl self, out VARIANT p) get_onvisibilitychange;
			}
		}
		[CRepr]
		public struct IHTMLEmbedElement : IDispatch
		{
			public const new Guid IID = .(0x3050f25f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_hidden(BSTR v) mut => VT.put_hidden(ref this, v);
			public HRESULT get_hidden(out BSTR p) mut => VT.get_hidden(ref this, out p);
			public HRESULT get_palette(out BSTR p) mut => VT.get_palette(ref this, out p);
			public HRESULT get_pluginspage(out BSTR p) mut => VT.get_pluginspage(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_units(BSTR v) mut => VT.put_units(ref this, v);
			public HRESULT get_units(out BSTR p) mut => VT.get_units(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, BSTR v) put_hidden;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out BSTR p) get_hidden;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out BSTR p) get_palette;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out BSTR p) get_pluginspage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, BSTR v) put_units;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out BSTR p) get_units;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement self, out VARIANT p) get_height;
			}
		}
		[CRepr]
		public struct IHTMLEmbedElement2 : IDispatch
		{
			public const new Guid IID = .(0x30510493, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT get_pluginspage(out BSTR p) mut => VT.get_pluginspage(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement2 self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement2 self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEmbedElement2 self, out BSTR p) get_pluginspage;
			}
		}
		[CRepr]
		public struct DispHTMLEmbed : IDispatch
		{
			public const new Guid IID = .(0x3050f52e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLMapEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f61e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLMapEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f3ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLAreasCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f383, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_length(int32 v) mut => VT.put_length(ref this, v);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(VARIANT name, VARIANT index, out IDispatch* pdisp) mut => VT.item(ref this, name, index, out pdisp);
			public HRESULT tags(VARIANT tagName, out IDispatch* pdisp) mut => VT.tags(ref this, tagName, out pdisp);
			public HRESULT add(ref IHTMLElement element, VARIANT before) mut => VT.add(ref this, ref element, before);
			public HRESULT remove(int32 index) mut => VT.remove(ref this, index);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, int32 v) put_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, VARIANT name, VARIANT index, out IDispatch* pdisp) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, VARIANT tagName, out IDispatch* pdisp) tags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, ref IHTMLElement element, VARIANT before) add;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection self, int32 index) remove;
			}
		}
		[CRepr]
		public struct IHTMLAreasCollection2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT urns(VARIANT urn, out IDispatch* pdisp) mut => VT.urns(ref this, urn, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection2 self, VARIANT urn, out IDispatch* pdisp) urns;
			}
		}
		[CRepr]
		public struct IHTMLAreasCollection3 : IDispatch
		{
			public const new Guid IID = .(0x3050f837, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT namedItem(BSTR name, out IDispatch* pdisp) mut => VT.namedItem(ref this, name, out pdisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection3 self, BSTR name, out IDispatch* pdisp) namedItem;
			}
		}
		[CRepr]
		public struct IHTMLAreasCollection4 : IDispatch
		{
			public const new Guid IID = .(0x30510492, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out IHTMLElement2* pNode) mut => VT.item(ref this, index, out pNode);
			public HRESULT namedItem(BSTR name, out IHTMLElement2* pNode) mut => VT.namedItem(ref this, name, out pNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection4 self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection4 self, int32 index, out IHTMLElement2* pNode) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreasCollection4 self, BSTR name, out IHTMLElement2* pNode) namedItem;
			}
		}
		[CRepr]
		public struct IHTMLMapElement : IDispatch
		{
			public const new Guid IID = .(0x3050f266, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_areas(out IHTMLAreasCollection* p) mut => VT.get_areas(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMapElement self, out IHTMLAreasCollection* p) get_areas;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMapElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMapElement self, out BSTR p) get_name;
			}
		}
		[CRepr]
		public struct DispHTMLAreasCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f56a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLMapElement : IDispatch
		{
			public const new Guid IID = .(0x3050f526, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLAreaEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f611, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLAreaEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f366, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLAreaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f265, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_shape(BSTR v) mut => VT.put_shape(ref this, v);
			public HRESULT get_shape(out BSTR p) mut => VT.get_shape(ref this, out p);
			public HRESULT put_coords(BSTR v) mut => VT.put_coords(ref this, v);
			public HRESULT get_coords(out BSTR p) mut => VT.get_coords(ref this, out p);
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);
			public HRESULT put_target(BSTR v) mut => VT.put_target(ref this, v);
			public HRESULT get_target(out BSTR p) mut => VT.get_target(ref this, out p);
			public HRESULT put_alt(BSTR v) mut => VT.put_alt(ref this, v);
			public HRESULT get_alt(out BSTR p) mut => VT.get_alt(ref this, out p);
			public HRESULT put_noHref(int16 v) mut => VT.put_noHref(ref this, v);
			public HRESULT get_noHref(out int16 p) mut => VT.get_noHref(ref this, out p);
			public HRESULT put_host(BSTR v) mut => VT.put_host(ref this, v);
			public HRESULT get_host(out BSTR p) mut => VT.get_host(ref this, out p);
			public HRESULT put_hostname(BSTR v) mut => VT.put_hostname(ref this, v);
			public HRESULT get_hostname(out BSTR p) mut => VT.get_hostname(ref this, out p);
			public HRESULT put_pathname(BSTR v) mut => VT.put_pathname(ref this, v);
			public HRESULT get_pathname(out BSTR p) mut => VT.get_pathname(ref this, out p);
			public HRESULT put_port(BSTR v) mut => VT.put_port(ref this, v);
			public HRESULT get_port(out BSTR p) mut => VT.get_port(ref this, out p);
			public HRESULT put_protocol(BSTR v) mut => VT.put_protocol(ref this, v);
			public HRESULT get_protocol(out BSTR p) mut => VT.get_protocol(ref this, out p);
			public HRESULT put_search(BSTR v) mut => VT.put_search(ref this, v);
			public HRESULT get_search(out BSTR p) mut => VT.get_search(ref this, out p);
			public HRESULT put_hash(BSTR v) mut => VT.put_hash(ref this, v);
			public HRESULT get_hash(out BSTR p) mut => VT.get_hash(ref this, out p);
			public HRESULT put_onblur(VARIANT v) mut => VT.put_onblur(ref this, v);
			public HRESULT get_onblur(out VARIANT p) mut => VT.get_onblur(ref this, out p);
			public HRESULT put_onfocus(VARIANT v) mut => VT.put_onfocus(ref this, v);
			public HRESULT get_onfocus(out VARIANT p) mut => VT.get_onfocus(ref this, out p);
			public HRESULT put_tabIndex(int16 v) mut => VT.put_tabIndex(ref this, v);
			public HRESULT get_tabIndex(out int16 p) mut => VT.get_tabIndex(ref this, out p);
			public HRESULT focus() mut => VT.focus(ref this);
			public HRESULT blur() mut => VT.blur(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, int16 v) put_noHref;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out int16 p) get_noHref;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_host;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_host;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_hostname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_hostname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_pathname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_pathname;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_port;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_port;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_protocol;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_search;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_search;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, BSTR v) put_hash;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out BSTR p) get_hash;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, VARIANT v) put_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out VARIANT p) get_onblur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, VARIANT v) put_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out VARIANT p) get_onfocus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, int16 v) put_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self, out int16 p) get_tabIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self) focus;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement self) blur;
			}
		}
		[CRepr]
		public struct IHTMLAreaElement2 : IDispatch
		{
			public const new Guid IID = .(0x3051041f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_shape(BSTR v) mut => VT.put_shape(ref this, v);
			public HRESULT get_shape(out BSTR p) mut => VT.get_shape(ref this, out p);
			public HRESULT put_coords(BSTR v) mut => VT.put_coords(ref this, v);
			public HRESULT get_coords(out BSTR p) mut => VT.get_coords(ref this, out p);
			public HRESULT put_href(BSTR v) mut => VT.put_href(ref this, v);
			public HRESULT get_href(out BSTR p) mut => VT.get_href(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement2 self, BSTR v) put_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement2 self, out BSTR p) get_shape;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement2 self, BSTR v) put_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement2 self, out BSTR p) get_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement2 self, BSTR v) put_href;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAreaElement2 self, out BSTR p) get_href;
			}
		}
		[CRepr]
		public struct DispHTMLAreaElement : IDispatch
		{
			public const new Guid IID = .(0x3050f503, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLTableCaption : IDispatch
		{
			public const new Guid IID = .(0x3050f2eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_vAlign(BSTR v) mut => VT.put_vAlign(ref this, v);
			public HRESULT get_vAlign(out BSTR p) mut => VT.get_vAlign(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCaption self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCaption self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCaption self, BSTR v) put_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCaption self, out BSTR p) get_vAlign;
			}
		}
		[CRepr]
		public struct DispHTMLTableCaption : IDispatch
		{
			public const new Guid IID = .(0x3050f508, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLCommentElement : IDispatch
		{
			public const new Guid IID = .(0x3050f20c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_text(BSTR v) mut => VT.put_text(ref this, v);
			public HRESULT get_text(out BSTR p) mut => VT.get_text(ref this, out p);
			public HRESULT put_atomic(int32 v) mut => VT.put_atomic(ref this, v);
			public HRESULT get_atomic(out int32 p) mut => VT.get_atomic(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement self, BSTR v) put_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement self, out BSTR p) get_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement self, int32 v) put_atomic;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement self, out int32 p) get_atomic;
			}
		}
		[CRepr]
		public struct IHTMLCommentElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f813, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_data(BSTR v) mut => VT.put_data(ref this, v);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT substringData(int32 offset, int32 Count, out BSTR pbstrsubString) mut => VT.substringData(ref this, offset, Count, out pbstrsubString);
			public HRESULT appendData(BSTR bstrstring) mut => VT.appendData(ref this, bstrstring);
			public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.insertData(ref this, offset, bstrstring);
			public HRESULT deleteData(int32 offset, int32 Count) mut => VT.deleteData(ref this, offset, Count);
			public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.replaceData(ref this, offset, Count, bstrstring);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, BSTR v) put_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, int32 offset, int32 Count, out BSTR pbstrsubString) substringData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, BSTR bstrstring) appendData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, int32 offset, BSTR bstrstring) insertData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, int32 offset, int32 Count) deleteData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement2 self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
			}
		}
		[CRepr]
		public struct IHTMLCommentElement3 : IDispatch
		{
			public const new Guid IID = .(0x3051073f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT substringData(int32 offset, int32 Count, out BSTR pbstrsubString) mut => VT.substringData(ref this, offset, Count, out pbstrsubString);
			public HRESULT insertData(int32 offset, BSTR bstrstring) mut => VT.insertData(ref this, offset, bstrstring);
			public HRESULT deleteData(int32 offset, int32 Count) mut => VT.deleteData(ref this, offset, Count);
			public HRESULT replaceData(int32 offset, int32 Count, BSTR bstrstring) mut => VT.replaceData(ref this, offset, Count, bstrstring);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement3 self, int32 offset, int32 Count, out BSTR pbstrsubString) substringData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement3 self, int32 offset, BSTR bstrstring) insertData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement3 self, int32 offset, int32 Count) deleteData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCommentElement3 self, int32 offset, int32 Count, BSTR bstrstring) replaceData;
			}
		}
		[CRepr]
		public struct DispHTMLCommentElement : IDispatch
		{
			public const new Guid IID = .(0x3050f50a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLPhraseElement : IDispatch
		{
			public const new Guid IID = .(0x3050f20a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLPhraseElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f824, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_cite(BSTR v) mut => VT.put_cite(ref this, v);
			public HRESULT get_cite(out BSTR p) mut => VT.get_cite(ref this, out p);
			public HRESULT put_dateTime(BSTR v) mut => VT.put_dateTime(ref this, v);
			public HRESULT get_dateTime(out BSTR p) mut => VT.get_dateTime(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPhraseElement2 self, BSTR v) put_cite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPhraseElement2 self, out BSTR p) get_cite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPhraseElement2 self, BSTR v) put_dateTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPhraseElement2 self, out BSTR p) get_dateTime;
			}
		}
		[CRepr]
		public struct IHTMLPhraseElement3 : IDispatch
		{
			public const new Guid IID = .(0x3051043d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_cite(BSTR v) mut => VT.put_cite(ref this, v);
			public HRESULT get_cite(out BSTR p) mut => VT.get_cite(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPhraseElement3 self, BSTR v) put_cite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPhraseElement3 self, out BSTR p) get_cite;
			}
		}
		[CRepr]
		public struct IHTMLSpanElement : IDispatch
		{
			public const new Guid IID = .(0x3050f3f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLPhraseElement : IDispatch
		{
			public const new Guid IID = .(0x3050f52d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLSpanElement : IDispatch
		{
			public const new Guid IID = .(0x3050f548, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLTableEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f623, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLTableEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f407, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLTableSection : IDispatch
		{
			public const new Guid IID = .(0x3050f23b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_vAlign(BSTR v) mut => VT.put_vAlign(ref this, v);
			public HRESULT get_vAlign(out BSTR p) mut => VT.get_vAlign(ref this, out p);
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT get_rows(out IHTMLElementCollection* p) mut => VT.get_rows(ref this, out p);
			public HRESULT insertRow(int32 index, out IDispatch* row) mut => VT.insertRow(ref this, index, out row);
			public HRESULT deleteRow(int32 index) mut => VT.deleteRow(ref this, index);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, BSTR v) put_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, out BSTR p) get_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, out IHTMLElementCollection* p) get_rows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, int32 index, out IDispatch* row) insertRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection self, int32 index) deleteRow;
			}
		}
		[CRepr]
		public struct IHTMLTable : IDispatch
		{
			public const new Guid IID = .(0x3050f21e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_cols(int32 v) mut => VT.put_cols(ref this, v);
			public HRESULT get_cols(out int32 p) mut => VT.get_cols(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_frame(BSTR v) mut => VT.put_frame(ref this, v);
			public HRESULT get_frame(out BSTR p) mut => VT.get_frame(ref this, out p);
			public HRESULT put_rules(BSTR v) mut => VT.put_rules(ref this, v);
			public HRESULT get_rules(out BSTR p) mut => VT.get_rules(ref this, out p);
			public HRESULT put_cellSpacing(VARIANT v) mut => VT.put_cellSpacing(ref this, v);
			public HRESULT get_cellSpacing(out VARIANT p) mut => VT.get_cellSpacing(ref this, out p);
			public HRESULT put_cellPadding(VARIANT v) mut => VT.put_cellPadding(ref this, v);
			public HRESULT get_cellPadding(out VARIANT p) mut => VT.get_cellPadding(ref this, out p);
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT put_borderColor(VARIANT v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out VARIANT p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_borderColorLight(VARIANT v) mut => VT.put_borderColorLight(ref this, v);
			public HRESULT get_borderColorLight(out VARIANT p) mut => VT.get_borderColorLight(ref this, out p);
			public HRESULT put_borderColorDark(VARIANT v) mut => VT.put_borderColorDark(ref this, v);
			public HRESULT get_borderColorDark(out VARIANT p) mut => VT.get_borderColorDark(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT refresh() mut => VT.refresh(ref this);
			public HRESULT get_rows(out IHTMLElementCollection* p) mut => VT.get_rows(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_dataPageSize(int32 v) mut => VT.put_dataPageSize(ref this, v);
			public HRESULT get_dataPageSize(out int32 p) mut => VT.get_dataPageSize(ref this, out p);
			public HRESULT nextPage() mut => VT.nextPage(ref this);
			public HRESULT previousPage() mut => VT.previousPage(ref this);
			public HRESULT get_tHead(out IHTMLTableSection* p) mut => VT.get_tHead(ref this, out p);
			public HRESULT get_tFoot(out IHTMLTableSection* p) mut => VT.get_tFoot(ref this, out p);
			public HRESULT get_tBodies(out IHTMLElementCollection* p) mut => VT.get_tBodies(ref this, out p);
			public HRESULT get_caption(out IHTMLTableCaption* p) mut => VT.get_caption(ref this, out p);
			public HRESULT createTHead(out IDispatch* head) mut => VT.createTHead(ref this, out head);
			public HRESULT deleteTHead() mut => VT.deleteTHead(ref this);
			public HRESULT createTFoot(out IDispatch* foot) mut => VT.createTFoot(ref this, out foot);
			public HRESULT deleteTFoot() mut => VT.deleteTFoot(ref this);
			public HRESULT createCaption(out IHTMLTableCaption* caption) mut => VT.createCaption(ref this, out caption);
			public HRESULT deleteCaption() mut => VT.deleteCaption(ref this);
			public HRESULT insertRow(int32 index, out IDispatch* row) mut => VT.insertRow(ref this, index, out row);
			public HRESULT deleteRow(int32 index) mut => VT.deleteRow(ref this, index);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, int32 v) put_cols;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out int32 p) get_cols;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, BSTR v) put_frame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out BSTR p) get_frame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, BSTR v) put_rules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out BSTR p) get_rules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_cellSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_cellSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_cellPadding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_cellPadding;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_borderColorLight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_borderColorLight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_borderColorDark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_borderColorDark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self) refresh;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IHTMLElementCollection* p) get_rows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, int32 v) put_dataPageSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out int32 p) get_dataPageSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self) nextPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self) previousPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IHTMLTableSection* p) get_tHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IHTMLTableSection* p) get_tFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IHTMLElementCollection* p) get_tBodies;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IHTMLTableCaption* p) get_caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IDispatch* head) createTHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self) deleteTHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IDispatch* foot) createTFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self) deleteTFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out IHTMLTableCaption* caption) createCaption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self) deleteCaption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, int32 index, out IDispatch* row) insertRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, int32 index) deleteRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable self, out VARIANT p) get_onreadystatechange;
			}
		}
		[CRepr]
		public struct IHTMLTable2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT firstPage() mut => VT.firstPage(ref this);
			public HRESULT lastPage() mut => VT.lastPage(ref this);
			public HRESULT get_cells(out IHTMLElementCollection* p) mut => VT.get_cells(ref this, out p);
			public HRESULT moveRow(int32 indexFrom, int32 indexTo, out IDispatch* row) mut => VT.moveRow(ref this, indexFrom, indexTo, out row);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable2 self) firstPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable2 self) lastPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable2 self, out IHTMLElementCollection* p) get_cells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable2 self, int32 indexFrom, int32 indexTo, out IDispatch* row) moveRow;
			}
		}
		[CRepr]
		public struct IHTMLTable3 : IDispatch
		{
			public const new Guid IID = .(0x3050f829, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_summary(BSTR v) mut => VT.put_summary(ref this, v);
			public HRESULT get_summary(out BSTR p) mut => VT.get_summary(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable3 self, BSTR v) put_summary;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable3 self, out BSTR p) get_summary;
			}
		}
		[CRepr]
		public struct IHTMLTable4 : IDispatch
		{
			public const new Guid IID = .(0x305106c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_tHead(ref IHTMLTableSection v) mut => VT.putref_tHead(ref this, ref v);
			public HRESULT get_tHead(out IHTMLTableSection* p) mut => VT.get_tHead(ref this, out p);
			public HRESULT putref_tFoot(ref IHTMLTableSection v) mut => VT.putref_tFoot(ref this, ref v);
			public HRESULT get_tFoot(out IHTMLTableSection* p) mut => VT.get_tFoot(ref this, out p);
			public HRESULT putref_caption(ref IHTMLTableCaption v) mut => VT.putref_caption(ref this, ref v);
			public HRESULT get_caption(out IHTMLTableCaption* p) mut => VT.get_caption(ref this, out p);
			public HRESULT insertRow(int32 index, out IDispatch* row) mut => VT.insertRow(ref this, index, out row);
			public HRESULT deleteRow(int32 index) mut => VT.deleteRow(ref this, index);
			public HRESULT createTBody(out IHTMLTableSection* tbody) mut => VT.createTBody(ref this, out tbody);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, ref IHTMLTableSection v) putref_tHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, out IHTMLTableSection* p) get_tHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, ref IHTMLTableSection v) putref_tFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, out IHTMLTableSection* p) get_tFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, ref IHTMLTableCaption v) putref_caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, out IHTMLTableCaption* p) get_caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, int32 index, out IDispatch* row) insertRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, int32 index) deleteRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTable4 self, out IHTMLTableSection* tbody) createTBody;
			}
		}
		[CRepr]
		public struct IHTMLTableCol : IDispatch
		{
			public const new Guid IID = .(0x3050f23a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_span(int32 v) mut => VT.put_span(ref this, v);
			public HRESULT get_span(out int32 p) mut => VT.get_span(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_vAlign(BSTR v) mut => VT.put_vAlign(ref this, v);
			public HRESULT get_vAlign(out BSTR p) mut => VT.get_vAlign(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, int32 v) put_span;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, out int32 p) get_span;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, BSTR v) put_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol self, out BSTR p) get_vAlign;
			}
		}
		[CRepr]
		public struct IHTMLTableCol2 : IDispatch
		{
			public const new Guid IID = .(0x3050f82a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol2 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol2 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol2 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol2 self, out BSTR p) get_chOff;
			}
		}
		[CRepr]
		public struct IHTMLTableCol3 : IDispatch
		{
			public const new Guid IID = .(0x305106c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol3 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol3 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol3 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCol3 self, out BSTR p) get_chOff;
			}
		}
		[CRepr]
		public struct IHTMLTableSection2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT moveRow(int32 indexFrom, int32 indexTo, out IDispatch* row) mut => VT.moveRow(ref this, indexFrom, indexTo, out row);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection2 self, int32 indexFrom, int32 indexTo, out IDispatch* row) moveRow;
			}
		}
		[CRepr]
		public struct IHTMLTableSection3 : IDispatch
		{
			public const new Guid IID = .(0x3050f82b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection3 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection3 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection3 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection3 self, out BSTR p) get_chOff;
			}
		}
		[CRepr]
		public struct IHTMLTableSection4 : IDispatch
		{
			public const new Guid IID = .(0x305106c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);
			public HRESULT insertRow(int32 index, out IDispatch* row) mut => VT.insertRow(ref this, index, out row);
			public HRESULT deleteRow(int32 index) mut => VT.deleteRow(ref this, index);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection4 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection4 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection4 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection4 self, out BSTR p) get_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection4 self, int32 index, out IDispatch* row) insertRow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableSection4 self, int32 index) deleteRow;
			}
		}
		[CRepr]
		public struct IHTMLTableRow : IDispatch
		{
			public const new Guid IID = .(0x3050f23c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_vAlign(BSTR v) mut => VT.put_vAlign(ref this, v);
			public HRESULT get_vAlign(out BSTR p) mut => VT.get_vAlign(ref this, out p);
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT put_borderColor(VARIANT v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out VARIANT p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_borderColorLight(VARIANT v) mut => VT.put_borderColorLight(ref this, v);
			public HRESULT get_borderColorLight(out VARIANT p) mut => VT.get_borderColorLight(ref this, out p);
			public HRESULT put_borderColorDark(VARIANT v) mut => VT.put_borderColorDark(ref this, v);
			public HRESULT get_borderColorDark(out VARIANT p) mut => VT.get_borderColorDark(ref this, out p);
			public HRESULT get_rowIndex(out int32 p) mut => VT.get_rowIndex(ref this, out p);
			public HRESULT get_sectionRowIndex(out int32 p) mut => VT.get_sectionRowIndex(ref this, out p);
			public HRESULT get_cells(out IHTMLElementCollection* p) mut => VT.get_cells(ref this, out p);
			public HRESULT insertCell(int32 index, out IDispatch* row) mut => VT.insertCell(ref this, index, out row);
			public HRESULT deleteCell(int32 index) mut => VT.deleteCell(ref this, index);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, BSTR v) put_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out BSTR p) get_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, VARIANT v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out VARIANT p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, VARIANT v) put_borderColorLight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out VARIANT p) get_borderColorLight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, VARIANT v) put_borderColorDark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out VARIANT p) get_borderColorDark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out int32 p) get_rowIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out int32 p) get_sectionRowIndex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, out IHTMLElementCollection* p) get_cells;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, int32 index, out IDispatch* row) insertCell;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow self, int32 index) deleteCell;
			}
		}
		[CRepr]
		public struct IHTMLTableRow2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow2 self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow2 self, out VARIANT p) get_height;
			}
		}
		[CRepr]
		public struct IHTMLTableRow3 : IDispatch
		{
			public const new Guid IID = .(0x3050f82c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow3 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow3 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow3 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow3 self, out BSTR p) get_chOff;
			}
		}
		[CRepr]
		public struct IHTMLTableRow4 : IDispatch
		{
			public const new Guid IID = .(0x305106c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);
			public HRESULT insertCell(int32 index, out IDispatch* row) mut => VT.insertCell(ref this, index, out row);
			public HRESULT deleteCell(int32 index) mut => VT.deleteCell(ref this, index);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow4 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow4 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow4 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow4 self, out BSTR p) get_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow4 self, int32 index, out IDispatch* row) insertCell;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRow4 self, int32 index) deleteCell;
			}
		}
		[CRepr]
		public struct IHTMLTableRowMetrics : IDispatch
		{
			public const new Guid IID = .(0x3050f413, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_clientHeight(out int32 p) mut => VT.get_clientHeight(ref this, out p);
			public HRESULT get_clientWidth(out int32 p) mut => VT.get_clientWidth(ref this, out p);
			public HRESULT get_clientTop(out int32 p) mut => VT.get_clientTop(ref this, out p);
			public HRESULT get_clientLeft(out int32 p) mut => VT.get_clientLeft(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRowMetrics self, out int32 p) get_clientHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRowMetrics self, out int32 p) get_clientWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRowMetrics self, out int32 p) get_clientTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableRowMetrics self, out int32 p) get_clientLeft;
			}
		}
		[CRepr]
		public struct IHTMLTableCell : IDispatch
		{
			public const new Guid IID = .(0x3050f23d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_rowSpan(int32 v) mut => VT.put_rowSpan(ref this, v);
			public HRESULT get_rowSpan(out int32 p) mut => VT.get_rowSpan(ref this, out p);
			public HRESULT put_colSpan(int32 v) mut => VT.put_colSpan(ref this, v);
			public HRESULT get_colSpan(out int32 p) mut => VT.get_colSpan(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_vAlign(BSTR v) mut => VT.put_vAlign(ref this, v);
			public HRESULT get_vAlign(out BSTR p) mut => VT.get_vAlign(ref this, out p);
			public HRESULT put_bgColor(VARIANT v) mut => VT.put_bgColor(ref this, v);
			public HRESULT get_bgColor(out VARIANT p) mut => VT.get_bgColor(ref this, out p);
			public HRESULT put_noWrap(int16 v) mut => VT.put_noWrap(ref this, v);
			public HRESULT get_noWrap(out int16 p) mut => VT.get_noWrap(ref this, out p);
			public HRESULT put_background(BSTR v) mut => VT.put_background(ref this, v);
			public HRESULT get_background(out BSTR p) mut => VT.get_background(ref this, out p);
			public HRESULT put_borderColor(VARIANT v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out VARIANT p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_borderColorLight(VARIANT v) mut => VT.put_borderColorLight(ref this, v);
			public HRESULT get_borderColorLight(out VARIANT p) mut => VT.get_borderColorLight(ref this, out p);
			public HRESULT put_borderColorDark(VARIANT v) mut => VT.put_borderColorDark(ref this, v);
			public HRESULT get_borderColorDark(out VARIANT p) mut => VT.get_borderColorDark(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT get_cellIndex(out int32 p) mut => VT.get_cellIndex(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, int32 v) put_rowSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out int32 p) get_rowSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, int32 v) put_colSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out int32 p) get_colSpan;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, BSTR v) put_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out BSTR p) get_vAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, VARIANT v) put_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out VARIANT p) get_bgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, int16 v) put_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out int16 p) get_noWrap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, BSTR v) put_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out BSTR p) get_background;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, VARIANT v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out VARIANT p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, VARIANT v) put_borderColorLight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out VARIANT p) get_borderColorLight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, VARIANT v) put_borderColorDark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out VARIANT p) get_borderColorDark;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell self, out int32 p) get_cellIndex;
			}
		}
		[CRepr]
		public struct IHTMLTableCell2 : IDispatch
		{
			public const new Guid IID = .(0x3050f82d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_abbr(BSTR v) mut => VT.put_abbr(ref this, v);
			public HRESULT get_abbr(out BSTR p) mut => VT.get_abbr(ref this, out p);
			public HRESULT put_axis(BSTR v) mut => VT.put_axis(ref this, v);
			public HRESULT get_axis(out BSTR p) mut => VT.get_axis(ref this, out p);
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);
			public HRESULT put_headers(BSTR v) mut => VT.put_headers(ref this, v);
			public HRESULT get_headers(out BSTR p) mut => VT.get_headers(ref this, out p);
			public HRESULT put_scope(BSTR v) mut => VT.put_scope(ref this, v);
			public HRESULT get_scope(out BSTR p) mut => VT.get_scope(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, BSTR v) put_abbr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, out BSTR p) get_abbr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, BSTR v) put_axis;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, out BSTR p) get_axis;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, out BSTR p) get_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, BSTR v) put_headers;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, out BSTR p) get_headers;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, BSTR v) put_scope;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell2 self, out BSTR p) get_scope;
			}
		}
		[CRepr]
		public struct IHTMLTableCell3 : IDispatch
		{
			public const new Guid IID = .(0x305106c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_ch(BSTR v) mut => VT.put_ch(ref this, v);
			public HRESULT get_ch(out BSTR p) mut => VT.get_ch(ref this, out p);
			public HRESULT put_chOff(BSTR v) mut => VT.put_chOff(ref this, v);
			public HRESULT get_chOff(out BSTR p) mut => VT.get_chOff(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell3 self, BSTR v) put_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell3 self, out BSTR p) get_ch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell3 self, BSTR v) put_chOff;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTableCell3 self, out BSTR p) get_chOff;
			}
		}
		[CRepr]
		public struct DispHTMLTable : IDispatch
		{
			public const new Guid IID = .(0x3050f532, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTableCol : IDispatch
		{
			public const new Guid IID = .(0x3050f533, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTableSection : IDispatch
		{
			public const new Guid IID = .(0x3050f534, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTableRow : IDispatch
		{
			public const new Guid IID = .(0x3050f535, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTableCell : IDispatch
		{
			public const new Guid IID = .(0x3050f536, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLScriptEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f621, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLScriptEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f3e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLScriptElement : IDispatch
		{
			public const new Guid IID = .(0x3050f28b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_htmlFor(BSTR v) mut => VT.put_htmlFor(ref this, v);
			public HRESULT get_htmlFor(out BSTR p) mut => VT.get_htmlFor(ref this, out p);
			public HRESULT put_event(BSTR v) mut => VT.put_event(ref this, v);
			public HRESULT get_event(out BSTR p) mut => VT.get_event(ref this, out p);
			public HRESULT put_text(BSTR v) mut => VT.put_text(ref this, v);
			public HRESULT get_text(out BSTR p) mut => VT.get_text(ref this, out p);
			public HRESULT put_defer(int16 v) mut => VT.put_defer(ref this, v);
			public HRESULT get_defer(out int16 p) mut => VT.get_defer(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, BSTR v) put_htmlFor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out BSTR p) get_htmlFor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, BSTR v) put_event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out BSTR p) get_event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, BSTR v) put_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out BSTR p) get_text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, int16 v) put_defer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out int16 p) get_defer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct IHTMLScriptElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f828, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_charset(BSTR v) mut => VT.put_charset(ref this, v);
			public HRESULT get_charset(out BSTR p) mut => VT.get_charset(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement2 self, BSTR v) put_charset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement2 self, out BSTR p) get_charset;
			}
		}
		[CRepr]
		public struct IHTMLScriptElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510447, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement3 self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement3 self, out BSTR p) get_src;
			}
		}
		[CRepr]
		public struct IHTMLScriptElement4 : IDispatch
		{
			public const new Guid IID = .(0x30510801, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_usedCharset(out BSTR p) mut => VT.get_usedCharset(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLScriptElement4 self, out BSTR p) get_usedCharset;
			}
		}
		[CRepr]
		public struct DispHTMLScriptElement : IDispatch
		{
			public const new Guid IID = .(0x3050f530, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLNoShowElement : IDispatch
		{
			public const new Guid IID = .(0x3050f38a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLNoShowElement : IDispatch
		{
			public const new Guid IID = .(0x3050f528, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLObjectElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f620, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLObjectElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f3c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLObjectElement : IDispatch
		{
			public const new Guid IID = .(0x3050f24f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_object(out IDispatch* p) mut => VT.get_object(ref this, out p);
			public HRESULT get_classid(out BSTR p) mut => VT.get_classid(ref this, out p);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT putref_recordset(ref IDispatch v) mut => VT.putref_recordset(ref this, ref v);
			public HRESULT get_recordset(out IDispatch* p) mut => VT.get_recordset(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_codeBase(BSTR v) mut => VT.put_codeBase(ref this, v);
			public HRESULT get_codeBase(out BSTR p) mut => VT.get_codeBase(ref this, out p);
			public HRESULT put_codeType(BSTR v) mut => VT.put_codeType(ref this, v);
			public HRESULT get_codeType(out BSTR p) mut => VT.get_codeType(ref this, out p);
			public HRESULT put_code(BSTR v) mut => VT.put_code(ref this, v);
			public HRESULT get_code(out BSTR p) mut => VT.get_code(ref this, out p);
			public HRESULT get_BaseHref(out BSTR p) mut => VT.get_BaseHref(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT get_readyState(out int32 p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_altHtml(BSTR v) mut => VT.put_altHtml(ref this, v);
			public HRESULT get_altHtml(out BSTR p) mut => VT.get_altHtml(ref this, out p);
			public HRESULT put_vspace(int32 v) mut => VT.put_vspace(ref this, v);
			public HRESULT get_vspace(out int32 p) mut => VT.get_vspace(ref this, out p);
			public HRESULT put_hspace(int32 v) mut => VT.put_hspace(ref this, v);
			public HRESULT get_hspace(out int32 p) mut => VT.get_hspace(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out IDispatch* p) get_object;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_classid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, ref IDispatch v) putref_recordset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out IDispatch* p) get_recordset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_codeBase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_codeBase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_codeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_codeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_BaseHref;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out IHTMLFormElement* p) get_form;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out VARIANT p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out int32 p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, BSTR v) put_altHtml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out BSTR p) get_altHtml;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, int32 v) put_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out int32 p) get_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, int32 v) put_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement self, out int32 p) get_hspace;
			}
		}
		[CRepr]
		public struct IHTMLObjectElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT namedRecordset(BSTR dataMember, ref VARIANT hierarchy, out IDispatch* ppRecordset) mut => VT.namedRecordset(ref this, dataMember, ref hierarchy, out ppRecordset);
			public HRESULT put_classid(BSTR v) mut => VT.put_classid(ref this, v);
			public HRESULT get_classid(out BSTR p) mut => VT.get_classid(ref this, out p);
			public HRESULT put_data(BSTR v) mut => VT.put_data(ref this, v);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement2 self, BSTR dataMember, ref VARIANT hierarchy, out IDispatch* ppRecordset) namedRecordset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement2 self, BSTR v) put_classid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement2 self, out BSTR p) get_classid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement2 self, BSTR v) put_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement2 self, out BSTR p) get_data;
			}
		}
		[CRepr]
		public struct IHTMLObjectElement3 : IDispatch
		{
			public const new Guid IID = .(0x3050f827, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_archive(BSTR v) mut => VT.put_archive(ref this, v);
			public HRESULT get_archive(out BSTR p) mut => VT.get_archive(ref this, out p);
			public HRESULT put_alt(BSTR v) mut => VT.put_alt(ref this, v);
			public HRESULT get_alt(out BSTR p) mut => VT.get_alt(ref this, out p);
			public HRESULT put_declare(int16 v) mut => VT.put_declare(ref this, v);
			public HRESULT get_declare(out int16 p) mut => VT.get_declare(ref this, out p);
			public HRESULT put_standby(BSTR v) mut => VT.put_standby(ref this, v);
			public HRESULT get_standby(out BSTR p) mut => VT.get_standby(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_useMap(BSTR v) mut => VT.put_useMap(ref this, v);
			public HRESULT get_useMap(out BSTR p) mut => VT.get_useMap(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, BSTR v) put_archive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, out BSTR p) get_archive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, BSTR v) put_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, out BSTR p) get_alt;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, int16 v) put_declare;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, out int16 p) get_declare;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, BSTR v) put_standby;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, out BSTR p) get_standby;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, BSTR v) put_useMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement3 self, out BSTR p) get_useMap;
			}
		}
		[CRepr]
		public struct IHTMLObjectElement4 : IDispatch
		{
			public const new Guid IID = .(0x3051043e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_contentDocument(out IDispatch* p) mut => VT.get_contentDocument(ref this, out p);
			public HRESULT put_codeBase(BSTR v) mut => VT.put_codeBase(ref this, v);
			public HRESULT get_codeBase(out BSTR p) mut => VT.get_codeBase(ref this, out p);
			public HRESULT put_data(BSTR v) mut => VT.put_data(ref this, v);
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement4 self, out IDispatch* p) get_contentDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement4 self, BSTR v) put_codeBase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement4 self, out BSTR p) get_codeBase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement4 self, BSTR v) put_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement4 self, out BSTR p) get_data;
			}
		}
		[CRepr]
		public struct IHTMLObjectElement5 : IDispatch
		{
			public const new Guid IID = .(0x305104b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_object(BSTR v) mut => VT.put_object(ref this, v);
			public HRESULT get_object(out BSTR p) mut => VT.get_object(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement5 self, BSTR v) put_object;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLObjectElement5 self, out BSTR p) get_object;
			}
		}
		[CRepr]
		public struct IHTMLParamElement : IDispatch
		{
			public const new Guid IID = .(0x3050f83d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_valueType(BSTR v) mut => VT.put_valueType(ref this, v);
			public HRESULT get_valueType(out BSTR p) mut => VT.get_valueType(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, BSTR v) put_valueType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement self, out BSTR p) get_valueType;
			}
		}
		[CRepr]
		public struct IHTMLParamElement2 : IDispatch
		{
			public const new Guid IID = .(0x30510444, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_value(BSTR v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out BSTR p) mut => VT.get_value(ref this, out p);
			public HRESULT put_valueType(BSTR v) mut => VT.put_valueType(ref this, v);
			public HRESULT get_valueType(out BSTR p) mut => VT.get_valueType(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, BSTR v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, out BSTR p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, BSTR v) put_valueType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLParamElement2 self, out BSTR p) get_valueType;
			}
		}
		[CRepr]
		public struct DispHTMLObjectElement : IDispatch
		{
			public const new Guid IID = .(0x3050f529, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLParamElement : IDispatch
		{
			public const new Guid IID = .(0x3050f590, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLFrameSiteEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f7ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLFrameSiteEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f800, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFrameBase2 : IDispatch
		{
			public const new Guid IID = .(0x3050f6db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_contentWindow(out IHTMLWindow2* p) mut => VT.get_contentWindow(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_allowTransparency(int16 v) mut => VT.put_allowTransparency(ref this, v);
			public HRESULT get_allowTransparency(out int16 p) mut => VT.get_allowTransparency(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, out IHTMLWindow2* p) get_contentWindow;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, int16 v) put_allowTransparency;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase2 self, out int16 p) get_allowTransparency;
			}
		}
		[CRepr]
		public struct IHTMLFrameBase3 : IDispatch
		{
			public const new Guid IID = .(0x3050f82e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_longDesc(BSTR v) mut => VT.put_longDesc(ref this, v);
			public HRESULT get_longDesc(out BSTR p) mut => VT.get_longDesc(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase3 self, BSTR v) put_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameBase3 self, out BSTR p) get_longDesc;
			}
		}
		[CRepr]
		public struct DispHTMLFrameBase : IDispatch
		{
			public const new Guid IID = .(0x3050f541, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFrameElement : IDispatch
		{
			public const new Guid IID = .(0x3050f313, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_borderColor(VARIANT v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out VARIANT p) mut => VT.get_borderColor(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement self, VARIANT v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement self, out VARIANT p) get_borderColor;
			}
		}
		[CRepr]
		public struct IHTMLFrameElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f7f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement2 self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement2 self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement2 self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement2 self, out VARIANT p) get_width;
			}
		}
		[CRepr]
		public struct IHTMLFrameElement3 : IDispatch
		{
			public const new Guid IID = .(0x3051042d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_contentDocument(out IDispatch* p) mut => VT.get_contentDocument(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_longDesc(BSTR v) mut => VT.put_longDesc(ref this, v);
			public HRESULT get_longDesc(out BSTR p) mut => VT.get_longDesc(ref this, out p);
			public HRESULT put_frameBorder(BSTR v) mut => VT.put_frameBorder(ref this, v);
			public HRESULT get_frameBorder(out BSTR p) mut => VT.get_frameBorder(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, out IDispatch* p) get_contentDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, BSTR v) put_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, out BSTR p) get_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, BSTR v) put_frameBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameElement3 self, out BSTR p) get_frameBorder;
			}
		}
		[CRepr]
		public struct DispHTMLFrameElement : IDispatch
		{
			public const new Guid IID = .(0x3050f513, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLIFrameElement : IDispatch
		{
			public const new Guid IID = .(0x3050f315, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_vspace(int32 v) mut => VT.put_vspace(ref this, v);
			public HRESULT get_vspace(out int32 p) mut => VT.get_vspace(ref this, out p);
			public HRESULT put_hspace(int32 v) mut => VT.put_hspace(ref this, v);
			public HRESULT get_hspace(out int32 p) mut => VT.get_hspace(ref this, out p);
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement self, int32 v) put_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement self, out int32 p) get_vspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement self, int32 v) put_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement self, out int32 p) get_hspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct IHTMLIFrameElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f4e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_height(VARIANT v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out VARIANT p) mut => VT.get_height(ref this, out p);
			public HRESULT put_width(VARIANT v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out VARIANT p) mut => VT.get_width(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement2 self, VARIANT v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement2 self, out VARIANT p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement2 self, VARIANT v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement2 self, out VARIANT p) get_width;
			}
		}
		[CRepr]
		public struct IHTMLIFrameElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510433, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_contentDocument(out IDispatch* p) mut => VT.get_contentDocument(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_longDesc(BSTR v) mut => VT.put_longDesc(ref this, v);
			public HRESULT get_longDesc(out BSTR p) mut => VT.get_longDesc(ref this, out p);
			public HRESULT put_frameBorder(BSTR v) mut => VT.put_frameBorder(ref this, v);
			public HRESULT get_frameBorder(out BSTR p) mut => VT.get_frameBorder(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, out IDispatch* p) get_contentDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, BSTR v) put_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, out BSTR p) get_longDesc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, BSTR v) put_frameBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIFrameElement3 self, out BSTR p) get_frameBorder;
			}
		}
		[CRepr]
		public struct DispHTMLIFrame : IDispatch
		{
			public const new Guid IID = .(0x3050f51b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLDivPosition : IDispatch
		{
			public const new Guid IID = .(0x3050f212, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDivPosition self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDivPosition self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct IHTMLFieldSetElement : IDispatch
		{
			public const new Guid IID = .(0x3050f3e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFieldSetElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFieldSetElement self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct IHTMLFieldSetElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f833, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFieldSetElement2 self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct IHTMLLegendElement : IDispatch
		{
			public const new Guid IID = .(0x3050f3ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLegendElement self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLegendElement self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct IHTMLLegendElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f834, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLLegendElement2 self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct DispHTMLDivPosition : IDispatch
		{
			public const new Guid IID = .(0x3050f50f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLFieldSetElement : IDispatch
		{
			public const new Guid IID = .(0x3050f545, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLLegendElement : IDispatch
		{
			public const new Guid IID = .(0x3050f546, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLSpanFlow : IDispatch
		{
			public const new Guid IID = .(0x3050f3e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(BSTR v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out BSTR p) mut => VT.get_align(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSpanFlow self, BSTR v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSpanFlow self, out BSTR p) get_align;
			}
		}
		[CRepr]
		public struct DispHTMLSpanFlow : IDispatch
		{
			public const new Guid IID = .(0x3050f544, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFrameSetElement : IDispatch
		{
			public const new Guid IID = .(0x3050f319, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_rows(BSTR v) mut => VT.put_rows(ref this, v);
			public HRESULT get_rows(out BSTR p) mut => VT.get_rows(ref this, out p);
			public HRESULT put_cols(BSTR v) mut => VT.put_cols(ref this, v);
			public HRESULT get_cols(out BSTR p) mut => VT.get_cols(ref this, out p);
			public HRESULT put_border(VARIANT v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out VARIANT p) mut => VT.get_border(ref this, out p);
			public HRESULT put_borderColor(VARIANT v) mut => VT.put_borderColor(ref this, v);
			public HRESULT get_borderColor(out VARIANT p) mut => VT.get_borderColor(ref this, out p);
			public HRESULT put_frameBorder(BSTR v) mut => VT.put_frameBorder(ref this, v);
			public HRESULT get_frameBorder(out BSTR p) mut => VT.get_frameBorder(ref this, out p);
			public HRESULT put_frameSpacing(VARIANT v) mut => VT.put_frameSpacing(ref this, v);
			public HRESULT get_frameSpacing(out VARIANT p) mut => VT.get_frameSpacing(ref this, out p);
			public HRESULT put_name(BSTR v) mut => VT.put_name(ref this, v);
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onunload(VARIANT v) mut => VT.put_onunload(ref this, v);
			public HRESULT get_onunload(out VARIANT p) mut => VT.get_onunload(ref this, out p);
			public HRESULT put_onbeforeunload(VARIANT v) mut => VT.put_onbeforeunload(ref this, v);
			public HRESULT get_onbeforeunload(out VARIANT p) mut => VT.get_onbeforeunload(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, BSTR v) put_rows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out BSTR p) get_rows;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, BSTR v) put_cols;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out BSTR p) get_cols;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, VARIANT v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out VARIANT p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, VARIANT v) put_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out VARIANT p) get_borderColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, BSTR v) put_frameBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out BSTR p) get_frameBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, VARIANT v) put_frameSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out VARIANT p) get_frameSpacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, BSTR v) put_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, VARIANT v) put_onunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out VARIANT p) get_onunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, VARIANT v) put_onbeforeunload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement self, out VARIANT p) get_onbeforeunload;
			}
		}
		[CRepr]
		public struct IHTMLFrameSetElement2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onbeforeprint(VARIANT v) mut => VT.put_onbeforeprint(ref this, v);
			public HRESULT get_onbeforeprint(out VARIANT p) mut => VT.get_onbeforeprint(ref this, out p);
			public HRESULT put_onafterprint(VARIANT v) mut => VT.put_onafterprint(ref this, v);
			public HRESULT get_onafterprint(out VARIANT p) mut => VT.get_onafterprint(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement2 self, VARIANT v) put_onbeforeprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement2 self, out VARIANT p) get_onbeforeprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement2 self, VARIANT v) put_onafterprint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement2 self, out VARIANT p) get_onafterprint;
			}
		}
		[CRepr]
		public struct IHTMLFrameSetElement3 : IDispatch
		{
			public const new Guid IID = .(0x30510796, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_onhashchange(VARIANT v) mut => VT.put_onhashchange(ref this, v);
			public HRESULT get_onhashchange(out VARIANT p) mut => VT.get_onhashchange(ref this, out p);
			public HRESULT put_onmessage(VARIANT v) mut => VT.put_onmessage(ref this, v);
			public HRESULT get_onmessage(out VARIANT p) mut => VT.get_onmessage(ref this, out p);
			public HRESULT put_onoffline(VARIANT v) mut => VT.put_onoffline(ref this, v);
			public HRESULT get_onoffline(out VARIANT p) mut => VT.get_onoffline(ref this, out p);
			public HRESULT put_ononline(VARIANT v) mut => VT.put_ononline(ref this, v);
			public HRESULT get_ononline(out VARIANT p) mut => VT.get_ononline(ref this, out p);
			public HRESULT put_onstorage(VARIANT v) mut => VT.put_onstorage(ref this, v);
			public HRESULT get_onstorage(out VARIANT p) mut => VT.get_onstorage(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, VARIANT v) put_onhashchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, out VARIANT p) get_onhashchange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, VARIANT v) put_onmessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, out VARIANT p) get_onmessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, VARIANT v) put_onoffline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, out VARIANT p) get_onoffline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, VARIANT v) put_ononline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, out VARIANT p) get_ononline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, VARIANT v) put_onstorage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFrameSetElement3 self, out VARIANT p) get_onstorage;
			}
		}
		[CRepr]
		public struct DispHTMLFrameSetSite : IDispatch
		{
			public const new Guid IID = .(0x3050f514, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLBGsound : IDispatch
		{
			public const new Guid IID = .(0x3050f369, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_loop(VARIANT v) mut => VT.put_loop(ref this, v);
			public HRESULT get_loop(out VARIANT p) mut => VT.get_loop(ref this, out p);
			public HRESULT put_volume(VARIANT v) mut => VT.put_volume(ref this, v);
			public HRESULT get_volume(out VARIANT p) mut => VT.get_volume(ref this, out p);
			public HRESULT put_balance(VARIANT v) mut => VT.put_balance(ref this, v);
			public HRESULT get_balance(out VARIANT p) mut => VT.get_balance(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, VARIANT v) put_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, out VARIANT p) get_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, VARIANT v) put_volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, out VARIANT p) get_volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, VARIANT v) put_balance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLBGsound self, out VARIANT p) get_balance;
			}
		}
		[CRepr]
		public struct DispHTMLBGsound : IDispatch
		{
			public const new Guid IID = .(0x3050f53c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLFontNamesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f376, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(int32 index, out BSTR pBstr) mut => VT.item(ref this, index, out pBstr);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontNamesCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontNamesCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontNamesCollection self, int32 index, out BSTR pBstr) item;
			}
		}
		[CRepr]
		public struct IHTMLFontSizesCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f377, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT get_forFont(out BSTR p) mut => VT.get_forFont(ref this, out p);
			public HRESULT item(int32 index, out int32 plSize) mut => VT.item(ref this, index, out plSize);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontSizesCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontSizesCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontSizesCollection self, out BSTR p) get_forFont;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLFontSizesCollection self, int32 index, out int32 plSize) item;
			}
		}
		[CRepr]
		public struct IHTMLOptionsHolder : IDispatch
		{
			public const new Guid IID = .(0x3050f378, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_document(out IHTMLDocument2* p) mut => VT.get_document(ref this, out p);
			public HRESULT get_fonts(out IHTMLFontNamesCollection* p) mut => VT.get_fonts(ref this, out p);
			public HRESULT put_execArg(VARIANT v) mut => VT.put_execArg(ref this, v);
			public HRESULT get_execArg(out VARIANT p) mut => VT.get_execArg(ref this, out p);
			public HRESULT put_errorLine(int32 v) mut => VT.put_errorLine(ref this, v);
			public HRESULT get_errorLine(out int32 p) mut => VT.get_errorLine(ref this, out p);
			public HRESULT put_errorCharacter(int32 v) mut => VT.put_errorCharacter(ref this, v);
			public HRESULT get_errorCharacter(out int32 p) mut => VT.get_errorCharacter(ref this, out p);
			public HRESULT put_errorCode(int32 v) mut => VT.put_errorCode(ref this, v);
			public HRESULT get_errorCode(out int32 p) mut => VT.get_errorCode(ref this, out p);
			public HRESULT put_errorMessage(BSTR v) mut => VT.put_errorMessage(ref this, v);
			public HRESULT get_errorMessage(out BSTR p) mut => VT.get_errorMessage(ref this, out p);
			public HRESULT put_errorDebug(int16 v) mut => VT.put_errorDebug(ref this, v);
			public HRESULT get_errorDebug(out int16 p) mut => VT.get_errorDebug(ref this, out p);
			public HRESULT get_unsecuredWindowOfDocument(out IHTMLWindow2* p) mut => VT.get_unsecuredWindowOfDocument(ref this, out p);
			public HRESULT put_findText(BSTR v) mut => VT.put_findText(ref this, v);
			public HRESULT get_findText(out BSTR p) mut => VT.get_findText(ref this, out p);
			public HRESULT put_anythingAfterFrameset(int16 v) mut => VT.put_anythingAfterFrameset(ref this, v);
			public HRESULT get_anythingAfterFrameset(out int16 p) mut => VT.get_anythingAfterFrameset(ref this, out p);
			public HRESULT sizes(BSTR fontName, out IHTMLFontSizesCollection* pSizesCollection) mut => VT.sizes(ref this, fontName, out pSizesCollection);
			public HRESULT openfiledlg(VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, out BSTR pathName) mut => VT.openfiledlg(ref this, initFile, initDir, filter, title, out pathName);
			public HRESULT savefiledlg(VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, out BSTR pathName) mut => VT.savefiledlg(ref this, initFile, initDir, filter, title, out pathName);
			public HRESULT choosecolordlg(VARIANT initColor, out int32 rgbColor) mut => VT.choosecolordlg(ref this, initColor, out rgbColor);
			public HRESULT showSecurityInfo() mut => VT.showSecurityInfo(ref this);
			public HRESULT isApartmentModel(ref IHTMLObjectElement object, out int16 fApartment) mut => VT.isApartmentModel(ref this, ref object, out fApartment);
			public HRESULT getCharset(BSTR fontName, out int32 charset) mut => VT.getCharset(ref this, fontName, out charset);
			public HRESULT get_secureConnectionInfo(out BSTR p) mut => VT.get_secureConnectionInfo(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out IHTMLDocument2* p) get_document;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out IHTMLFontNamesCollection* p) get_fonts;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, VARIANT v) put_execArg;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out VARIANT p) get_execArg;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, int32 v) put_errorLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out int32 p) get_errorLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, int32 v) put_errorCharacter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out int32 p) get_errorCharacter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, int32 v) put_errorCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out int32 p) get_errorCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, BSTR v) put_errorMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out BSTR p) get_errorMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, int16 v) put_errorDebug;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out int16 p) get_errorDebug;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out IHTMLWindow2* p) get_unsecuredWindowOfDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, BSTR v) put_findText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out BSTR p) get_findText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, int16 v) put_anythingAfterFrameset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out int16 p) get_anythingAfterFrameset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, BSTR fontName, out IHTMLFontSizesCollection* pSizesCollection) sizes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, out BSTR pathName) openfiledlg;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, out BSTR pathName) savefiledlg;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, VARIANT initColor, out int32 rgbColor) choosecolordlg;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self) showSecurityInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, ref IHTMLObjectElement object, out int16 fApartment) isApartmentModel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, BSTR fontName, out int32 charset) getCharset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOptionsHolder self, out BSTR p) get_secureConnectionInfo;
			}
		}
		[CRepr]
		public struct HTMLStyleElementEvents2 : IDispatch
		{
			public const new Guid IID = .(0x3050f615, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLStyleElementEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f3cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleElement : IDispatch
		{
			public const new Guid IID = .(0x3050f375, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT get_readyState(out BSTR p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT get_styleSheet(out IHTMLStyleSheet* p) mut => VT.get_styleSheet(ref this, out p);
			public HRESULT put_disabled(int16 v) mut => VT.put_disabled(ref this, v);
			public HRESULT get_disabled(out int16 p) mut => VT.get_disabled(ref this, out p);
			public HRESULT put_media(BSTR v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out BSTR p) mut => VT.get_media(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out BSTR p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out IHTMLStyleSheet* p) get_styleSheet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, int16 v) put_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out int16 p) get_disabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, BSTR v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement self, out BSTR p) get_media;
			}
		}
		[CRepr]
		public struct IHTMLStyleElement2 : IDispatch
		{
			public const new Guid IID = .(0x3051072a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_sheet(out IHTMLStyleSheet* p) mut => VT.get_sheet(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleElement2 self, out IHTMLStyleSheet* p) get_sheet;
			}
		}
		[CRepr]
		public struct DispHTMLStyleElement : IDispatch
		{
			public const new Guid IID = .(0x3050f511, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleFontFace : IDispatch
		{
			public const new Guid IID = .(0x3050f3d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_fontsrc(BSTR v) mut => VT.put_fontsrc(ref this, v);
			public HRESULT get_fontsrc(out BSTR p) mut => VT.get_fontsrc(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleFontFace self, BSTR v) put_fontsrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleFontFace self, out BSTR p) get_fontsrc;
			}
		}
		[CRepr]
		public struct IHTMLStyleFontFace2 : IDispatch
		{
			public const new Guid IID = .(0x305106ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_style(out IHTMLRuleStyle* p) mut => VT.get_style(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleFontFace2 self, out IHTMLRuleStyle* p) get_style;
			}
		}
		[CRepr]
		public struct DispHTMLStyleFontFace : IDispatch
		{
			public const new Guid IID = .(0x30590081, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLXDomainRequest : IDispatch
		{
			public const new Guid IID = .(0x30510454, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_responseText(out BSTR p) mut => VT.get_responseText(ref this, out p);
			public HRESULT put_timeout(int32 v) mut => VT.put_timeout(ref this, v);
			public HRESULT get_timeout(out int32 p) mut => VT.get_timeout(ref this, out p);
			public HRESULT get_contentType(out BSTR p) mut => VT.get_contentType(ref this, out p);
			public HRESULT put_onprogress(VARIANT v) mut => VT.put_onprogress(ref this, v);
			public HRESULT get_onprogress(out VARIANT p) mut => VT.get_onprogress(ref this, out p);
			public HRESULT put_onerror(VARIANT v) mut => VT.put_onerror(ref this, v);
			public HRESULT get_onerror(out VARIANT p) mut => VT.get_onerror(ref this, out p);
			public HRESULT put_ontimeout(VARIANT v) mut => VT.put_ontimeout(ref this, v);
			public HRESULT get_ontimeout(out VARIANT p) mut => VT.get_ontimeout(ref this, out p);
			public HRESULT put_onload(VARIANT v) mut => VT.put_onload(ref this, v);
			public HRESULT get_onload(out VARIANT p) mut => VT.get_onload(ref this, out p);
			public HRESULT abort() mut => VT.abort(ref this);
			public HRESULT open(BSTR bstrMethod, BSTR bstrUrl) mut => VT.open(ref this, bstrMethod, bstrUrl);
			public HRESULT send(VARIANT varBody) mut => VT.send(ref this, varBody);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out BSTR p) get_responseText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, int32 v) put_timeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out int32 p) get_timeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out BSTR p) get_contentType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, VARIANT v) put_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out VARIANT p) get_onprogress;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, VARIANT v) put_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out VARIANT p) get_onerror;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, VARIANT v) put_ontimeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out VARIANT p) get_ontimeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, VARIANT v) put_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, out VARIANT p) get_onload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self) abort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, BSTR bstrMethod, BSTR bstrUrl) open;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequest self, VARIANT varBody) send;
			}
		}
		[CRepr]
		public struct IHTMLXDomainRequestFactory : IDispatch
		{
			public const new Guid IID = .(0x30510456, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(out IHTMLXDomainRequest* __MIDL__IHTMLXDomainRequestFactory0000) mut => VT.create(ref this, out __MIDL__IHTMLXDomainRequestFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXDomainRequestFactory self, out IHTMLXDomainRequest* __MIDL__IHTMLXDomainRequestFactory0000) create;
			}
		}
		[CRepr]
		public struct DispXDomainRequest : IDispatch
		{
			public const new Guid IID = .(0x3050f599, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStorage2 : IDispatch
		{
			public const new Guid IID = .(0x30510799, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT setItem(BSTR bstrKey, BSTR bstrValue) mut => VT.setItem(ref this, bstrKey, bstrValue);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStorage2 self, BSTR bstrKey, BSTR bstrValue) setItem;
			}
		}
		[CRepr]
		public struct DispHTMLStorage : IDispatch
		{
			public const new Guid IID = .(0x3050f59d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IEventTarget : IDispatch
		{
			public const new Guid IID = .(0x305104b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT addEventListener(BSTR type, ref IDispatch listener, int16 useCapture) mut => VT.addEventListener(ref this, type, ref listener, useCapture);
			public HRESULT removeEventListener(BSTR type, ref IDispatch listener, int16 useCapture) mut => VT.removeEventListener(ref this, type, ref listener, useCapture);
			public HRESULT dispatchEvent(ref IDOMEvent evt, out int16 pfResult) mut => VT.dispatchEvent(ref this, ref evt, out pfResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget self, BSTR type, ref IDispatch listener, int16 useCapture) addEventListener;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget self, BSTR type, ref IDispatch listener, int16 useCapture) removeEventListener;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget self, ref IDOMEvent evt, out int16 pfResult) dispatchEvent;
			}
		}
		[CRepr]
		public struct DispDOMEvent : IDispatch
		{
			public const new Guid IID = .(0x3050f5a2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMUIEvent : IDispatch
		{
			public const new Guid IID = .(0x305106ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_view(out IHTMLWindow2* p) mut => VT.get_view(ref this, out p);
			public HRESULT get_detail(out int32 p) mut => VT.get_detail(ref this, out p);
			public HRESULT initUIEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 view, int32 detail) mut => VT.initUIEvent(ref this, eventType, canBubble, cancelable, ref view, detail);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMUIEvent self, out IHTMLWindow2* p) get_view;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMUIEvent self, out int32 p) get_detail;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMUIEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 view, int32 detail) initUIEvent;
			}
		}
		[CRepr]
		public struct DispDOMUIEvent : IDispatch
		{
			public const new Guid IID = .(0x30590072, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMMouseEvent : IDispatch
		{
			public const new Guid IID = .(0x305106ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_screenX(out int32 p) mut => VT.get_screenX(ref this, out p);
			public HRESULT get_screenY(out int32 p) mut => VT.get_screenY(ref this, out p);
			public HRESULT get_clientX(out int32 p) mut => VT.get_clientX(ref this, out p);
			public HRESULT get_clientY(out int32 p) mut => VT.get_clientY(ref this, out p);
			public HRESULT get_ctrlKey(out int16 p) mut => VT.get_ctrlKey(ref this, out p);
			public HRESULT get_shiftKey(out int16 p) mut => VT.get_shiftKey(ref this, out p);
			public HRESULT get_altKey(out int16 p) mut => VT.get_altKey(ref this, out p);
			public HRESULT get_metaKey(out int16 p) mut => VT.get_metaKey(ref this, out p);
			public HRESULT get_button(out uint16 p) mut => VT.get_button(ref this, out p);
			public HRESULT get_relatedTarget(out IEventTarget* p) mut => VT.get_relatedTarget(ref this, out p);
			public HRESULT initMouseEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, ref IEventTarget relatedTargetArg) mut => VT.initMouseEvent(ref this, eventType, canBubble, cancelable, ref viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, ref relatedTargetArg);
			public HRESULT getModifierState(BSTR keyArg, out int16 activated) mut => VT.getModifierState(ref this, keyArg, out activated);
			public HRESULT get_buttons(out uint16 p) mut => VT.get_buttons(ref this, out p);
			public HRESULT get_fromElement(out IHTMLElement* p) mut => VT.get_fromElement(ref this, out p);
			public HRESULT get_toElement(out IHTMLElement* p) mut => VT.get_toElement(ref this, out p);
			public HRESULT get_x(out int32 p) mut => VT.get_x(ref this, out p);
			public HRESULT get_y(out int32 p) mut => VT.get_y(ref this, out p);
			public HRESULT get_offsetX(out int32 p) mut => VT.get_offsetX(ref this, out p);
			public HRESULT get_offsetY(out int32 p) mut => VT.get_offsetY(ref this, out p);
			public HRESULT get_pageX(out int32 p) mut => VT.get_pageX(ref this, out p);
			public HRESULT get_pageY(out int32 p) mut => VT.get_pageY(ref this, out p);
			public HRESULT get_layerX(out int32 p) mut => VT.get_layerX(ref this, out p);
			public HRESULT get_layerY(out int32 p) mut => VT.get_layerY(ref this, out p);
			public HRESULT get_which(out uint16 p) mut => VT.get_which(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_screenX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_screenY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_clientX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_clientY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int16 p) get_ctrlKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int16 p) get_shiftKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int16 p) get_altKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int16 p) get_metaKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out uint16 p) get_button;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out IEventTarget* p) get_relatedTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, ref IEventTarget relatedTargetArg) initMouseEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, BSTR keyArg, out int16 activated) getModifierState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out uint16 p) get_buttons;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out IHTMLElement* p) get_fromElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out IHTMLElement* p) get_toElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_offsetX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_offsetY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_pageX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_pageY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_layerX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out int32 p) get_layerY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseEvent self, out uint16 p) get_which;
			}
		}
		[CRepr]
		public struct DispDOMMouseEvent : IDispatch
		{
			public const new Guid IID = .(0x30590073, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMDragEvent : IDispatch
		{
			public const new Guid IID = .(0x30510761, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_dataTransfer(out IHTMLDataTransfer* p) mut => VT.get_dataTransfer(ref this, out p);
			public HRESULT initDragEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, ref IEventTarget relatedTargetArg, ref IHTMLDataTransfer dataTransferArg) mut => VT.initDragEvent(ref this, eventType, canBubble, cancelable, ref viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, ref relatedTargetArg, ref dataTransferArg);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDragEvent self, out IHTMLDataTransfer* p) get_dataTransfer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMDragEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, int16 ctrlKeyArg, int16 altKeyArg, int16 shiftKeyArg, int16 metaKeyArg, uint16 buttonArg, ref IEventTarget relatedTargetArg, ref IHTMLDataTransfer dataTransferArg) initDragEvent;
			}
		}
		[CRepr]
		public struct DispDOMDragEvent : IDispatch
		{
			public const new Guid IID = .(0x305900a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMMouseWheelEvent : IDispatch
		{
			public const new Guid IID = .(0x305106d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_wheelDelta(out int32 p) mut => VT.get_wheelDelta(ref this, out p);
			public HRESULT initMouseWheelEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, ref IEventTarget relatedTargetArg, BSTR modifiersListArg, int32 wheelDeltaArg) mut => VT.initMouseWheelEvent(ref this, eventType, canBubble, cancelable, ref viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, ref relatedTargetArg, modifiersListArg, wheelDeltaArg);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseWheelEvent self, out int32 p) get_wheelDelta;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMouseWheelEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, ref IEventTarget relatedTargetArg, BSTR modifiersListArg, int32 wheelDeltaArg) initMouseWheelEvent;
			}
		}
		[CRepr]
		public struct DispDOMMouseWheelEvent : IDispatch
		{
			public const new Guid IID = .(0x30590074, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMWheelEvent : IDispatch
		{
			public const new Guid IID = .(0x305106d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_deltaX(out int32 p) mut => VT.get_deltaX(ref this, out p);
			public HRESULT get_deltaY(out int32 p) mut => VT.get_deltaY(ref this, out p);
			public HRESULT get_deltaZ(out int32 p) mut => VT.get_deltaZ(ref this, out p);
			public HRESULT get_deltaMode(out uint32 p) mut => VT.get_deltaMode(ref this, out p);
			public HRESULT initWheelEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, ref IEventTarget relatedTargetArg, BSTR modifiersListArg, int32 deltaX, int32 deltaY, int32 deltaZ, uint32 deltaMode) mut => VT.initWheelEvent(ref this, eventType, canBubble, cancelable, ref viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, ref relatedTargetArg, modifiersListArg, deltaX, deltaY, deltaZ, deltaMode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMWheelEvent self, out int32 p) get_deltaX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMWheelEvent self, out int32 p) get_deltaY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMWheelEvent self, out int32 p) get_deltaZ;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMWheelEvent self, out uint32 p) get_deltaMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMWheelEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 screenXArg, int32 screenYArg, int32 clientXArg, int32 clientYArg, uint16 buttonArg, ref IEventTarget relatedTargetArg, BSTR modifiersListArg, int32 deltaX, int32 deltaY, int32 deltaZ, uint32 deltaMode) initWheelEvent;
			}
		}
		[CRepr]
		public struct DispDOMWheelEvent : IDispatch
		{
			public const new Guid IID = .(0x30590075, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMTextEvent : IDispatch
		{
			public const new Guid IID = .(0x305106d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT get_inputMethod(out uint32 p) mut => VT.get_inputMethod(ref this, out p);
			public HRESULT initTextEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, BSTR dataArg, uint32 inputMethod, BSTR locale) mut => VT.initTextEvent(ref this, eventType, canBubble, cancelable, ref viewArg, dataArg, inputMethod, locale);
			public HRESULT get_locale(out BSTR p) mut => VT.get_locale(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTextEvent self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTextEvent self, out uint32 p) get_inputMethod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTextEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, BSTR dataArg, uint32 inputMethod, BSTR locale) initTextEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMTextEvent self, out BSTR p) get_locale;
			}
		}
		[CRepr]
		public struct DispDOMTextEvent : IDispatch
		{
			public const new Guid IID = .(0x30590076, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMKeyboardEvent : IDispatch
		{
			public const new Guid IID = .(0x305106d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_key(out BSTR p) mut => VT.get_key(ref this, out p);
			public HRESULT get_location(out uint32 p) mut => VT.get_location(ref this, out p);
			public HRESULT get_ctrlKey(out int16 p) mut => VT.get_ctrlKey(ref this, out p);
			public HRESULT get_shiftKey(out int16 p) mut => VT.get_shiftKey(ref this, out p);
			public HRESULT get_altKey(out int16 p) mut => VT.get_altKey(ref this, out p);
			public HRESULT get_metaKey(out int16 p) mut => VT.get_metaKey(ref this, out p);
			public HRESULT get_repeat(out int16 p) mut => VT.get_repeat(ref this, out p);
			public HRESULT getModifierState(BSTR keyArg, out int16 state) mut => VT.getModifierState(ref this, keyArg, out state);
			public HRESULT initKeyboardEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, BSTR keyArg, uint32 locationArg, BSTR modifiersListArg, int16 @repeat, BSTR locale) mut => VT.initKeyboardEvent(ref this, eventType, canBubble, cancelable, ref viewArg, keyArg, locationArg, modifiersListArg, @repeat, locale);
			public HRESULT get_keyCode(out int32 p) mut => VT.get_keyCode(ref this, out p);
			public HRESULT get_charCode(out int32 p) mut => VT.get_charCode(ref this, out p);
			public HRESULT get_which(out int32 p) mut => VT.get_which(ref this, out p);
			public HRESULT get_ie9_char(out VARIANT p) mut => VT.get_ie9_char(ref this, out p);
			public HRESULT get_locale(out BSTR p) mut => VT.get_locale(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out BSTR p) get_key;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out uint32 p) get_location;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int16 p) get_ctrlKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int16 p) get_shiftKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int16 p) get_altKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int16 p) get_metaKey;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int16 p) get_repeat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, BSTR keyArg, out int16 state) getModifierState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, BSTR keyArg, uint32 locationArg, BSTR modifiersListArg, int16 @repeat, BSTR locale) initKeyboardEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int32 p) get_keyCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int32 p) get_charCode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out int32 p) get_which;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out VARIANT p) get_ie9_char;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMKeyboardEvent self, out BSTR p) get_locale;
			}
		}
		[CRepr]
		public struct DispDOMKeyboardEvent : IDispatch
		{
			public const new Guid IID = .(0x30590077, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMCompositionEvent : IDispatch
		{
			public const new Guid IID = .(0x305106d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT initCompositionEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, BSTR data, BSTR locale) mut => VT.initCompositionEvent(ref this, eventType, canBubble, cancelable, ref viewArg, data, locale);
			public HRESULT get_locale(out BSTR p) mut => VT.get_locale(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCompositionEvent self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCompositionEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, BSTR data, BSTR locale) initCompositionEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCompositionEvent self, out BSTR p) get_locale;
			}
		}
		[CRepr]
		public struct DispDOMCompositionEvent : IDispatch
		{
			public const new Guid IID = .(0x30590078, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMMutationEvent : IDispatch
		{
			public const new Guid IID = .(0x305106da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_relatedNode(out IDispatch* p) mut => VT.get_relatedNode(ref this, out p);
			public HRESULT get_prevValue(out BSTR p) mut => VT.get_prevValue(ref this, out p);
			public HRESULT get_newValue(out BSTR p) mut => VT.get_newValue(ref this, out p);
			public HRESULT get_attrName(out BSTR p) mut => VT.get_attrName(ref this, out p);
			public HRESULT get_attrChange(out uint16 p) mut => VT.get_attrChange(ref this, out p);
			public HRESULT initMutationEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IDispatch relatedNodeArg, BSTR prevValueArg, BSTR newValueArg, BSTR attrNameArg, uint16 attrChangeArg) mut => VT.initMutationEvent(ref this, eventType, canBubble, cancelable, ref relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMutationEvent self, out IDispatch* p) get_relatedNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMutationEvent self, out BSTR p) get_prevValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMutationEvent self, out BSTR p) get_newValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMutationEvent self, out BSTR p) get_attrName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMutationEvent self, out uint16 p) get_attrChange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMutationEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IDispatch relatedNodeArg, BSTR prevValueArg, BSTR newValueArg, BSTR attrNameArg, uint16 attrChangeArg) initMutationEvent;
			}
		}
		[CRepr]
		public struct DispDOMMutationEvent : IDispatch
		{
			public const new Guid IID = .(0x30590079, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMBeforeUnloadEvent : IDispatch
		{
			public const new Guid IID = .(0x30510763, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_returnValue(VARIANT v) mut => VT.put_returnValue(ref this, v);
			public HRESULT get_returnValue(out VARIANT p) mut => VT.get_returnValue(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMBeforeUnloadEvent self, VARIANT v) put_returnValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMBeforeUnloadEvent self, out VARIANT p) get_returnValue;
			}
		}
		[CRepr]
		public struct DispDOMBeforeUnloadEvent : IDispatch
		{
			public const new Guid IID = .(0x305900a8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMFocusEvent : IDispatch
		{
			public const new Guid IID = .(0x305106cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_relatedTarget(out IEventTarget* p) mut => VT.get_relatedTarget(ref this, out p);
			public HRESULT initFocusEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 view, int32 detail, ref IEventTarget relatedTargetArg) mut => VT.initFocusEvent(ref this, eventType, canBubble, cancelable, ref view, detail, ref relatedTargetArg);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMFocusEvent self, out IEventTarget* p) get_relatedTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMFocusEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 view, int32 detail, ref IEventTarget relatedTargetArg) initFocusEvent;
			}
		}
		[CRepr]
		public struct DispDOMFocusEvent : IDispatch
		{
			public const new Guid IID = .(0x30590071, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMCustomEvent : IDispatch
		{
			public const new Guid IID = .(0x305106de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_detail(out VARIANT p) mut => VT.get_detail(ref this, out p);
			public HRESULT initCustomEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref VARIANT detail) mut => VT.initCustomEvent(ref this, eventType, canBubble, cancelable, ref detail);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCustomEvent self, out VARIANT p) get_detail;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCustomEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref VARIANT detail) initCustomEvent;
			}
		}
		[CRepr]
		public struct DispDOMCustomEvent : IDispatch
		{
			public const new Guid IID = .(0x3059007c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ICanvasGradient : IDispatch
		{
			public const new Guid IID = .(0x30510714, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT addColorStop(float offset, BSTR color) mut => VT.addColorStop(ref this, offset, color);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasGradient self, float offset, BSTR color) addColorStop;
			}
		}
		[CRepr]
		public struct ICanvasPattern : IDispatch
		{
			public const new Guid IID = .(0x30510716, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ICanvasTextMetrics : IDispatch
		{
			public const new Guid IID = .(0x30510718, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_width(out float p) mut => VT.get_width(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasTextMetrics self, out float p) get_width;
			}
		}
		[CRepr]
		public struct ICanvasImageData : IDispatch
		{
			public const new Guid IID = .(0x3051071a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_width(out uint32 p) mut => VT.get_width(ref this, out p);
			public HRESULT get_height(out uint32 p) mut => VT.get_height(ref this, out p);
			public HRESULT get_data(out VARIANT p) mut => VT.get_data(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasImageData self, out uint32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasImageData self, out uint32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasImageData self, out VARIANT p) get_data;
			}
		}
		[CRepr]
		public struct ICanvasPixelArray : IDispatch
		{
			public const new Guid IID = .(0x3051071c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out uint32 p) mut => VT.get_length(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasPixelArray self, out uint32 p) get_length;
			}
		}
		[CRepr]
		public struct IHTMLCanvasElement : IDispatch
		{
			public const new Guid IID = .(0x305106e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_width(int32 v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(int32 v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT getContext(BSTR contextId, out ICanvasRenderingContext2D* ppContext) mut => VT.getContext(ref this, contextId, out ppContext);
			public HRESULT toDataURL(BSTR type, VARIANT jpegquality, out BSTR pUrl) mut => VT.toDataURL(ref this, type, jpegquality, out pUrl);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCanvasElement self, int32 v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCanvasElement self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCanvasElement self, int32 v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCanvasElement self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCanvasElement self, BSTR contextId, out ICanvasRenderingContext2D* ppContext) getContext;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCanvasElement self, BSTR type, VARIANT jpegquality, out BSTR pUrl) toDataURL;
			}
		}
		[CRepr]
		public struct ICanvasRenderingContext2D : IDispatch
		{
			public const new Guid IID = .(0x305106ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_canvas(out IHTMLCanvasElement* p) mut => VT.get_canvas(ref this, out p);
			public HRESULT restore() mut => VT.restore(ref this);
			public HRESULT save() mut => VT.save(ref this);
			public HRESULT rotate(float angle) mut => VT.rotate(ref this, angle);
			public HRESULT scale(float x, float y) mut => VT.scale(ref this, x, y);
			public HRESULT setTransform(float m11, float m12, float m21, float m22, float dx, float dy) mut => VT.setTransform(ref this, m11, m12, m21, m22, dx, dy);
			public HRESULT transform(float m11, float m12, float m21, float m22, float dx, float dy) mut => VT.transform(ref this, m11, m12, m21, m22, dx, dy);
			public HRESULT translate(float x, float y) mut => VT.translate(ref this, x, y);
			public HRESULT put_globalAlpha(float v) mut => VT.put_globalAlpha(ref this, v);
			public HRESULT get_globalAlpha(out float p) mut => VT.get_globalAlpha(ref this, out p);
			public HRESULT put_globalCompositeOperation(BSTR v) mut => VT.put_globalCompositeOperation(ref this, v);
			public HRESULT get_globalCompositeOperation(out BSTR p) mut => VT.get_globalCompositeOperation(ref this, out p);
			public HRESULT put_fillStyle(VARIANT v) mut => VT.put_fillStyle(ref this, v);
			public HRESULT get_fillStyle(out VARIANT p) mut => VT.get_fillStyle(ref this, out p);
			public HRESULT put_strokeStyle(VARIANT v) mut => VT.put_strokeStyle(ref this, v);
			public HRESULT get_strokeStyle(out VARIANT p) mut => VT.get_strokeStyle(ref this, out p);
			public HRESULT createLinearGradient(float x0, float y0, float x1, float y1, out ICanvasGradient* ppCanvasGradient) mut => VT.createLinearGradient(ref this, x0, y0, x1, y1, out ppCanvasGradient);
			public HRESULT createRadialGradient(float x0, float y0, float r0, float x1, float y1, float r1, out ICanvasGradient* ppCanvasGradient) mut => VT.createRadialGradient(ref this, x0, y0, r0, x1, y1, r1, out ppCanvasGradient);
			public HRESULT createPattern(ref IDispatch image, VARIANT repetition, out ICanvasPattern* ppCanvasPattern) mut => VT.createPattern(ref this, ref image, repetition, out ppCanvasPattern);
			public HRESULT put_lineCap(BSTR v) mut => VT.put_lineCap(ref this, v);
			public HRESULT get_lineCap(out BSTR p) mut => VT.get_lineCap(ref this, out p);
			public HRESULT put_lineJoin(BSTR v) mut => VT.put_lineJoin(ref this, v);
			public HRESULT get_lineJoin(out BSTR p) mut => VT.get_lineJoin(ref this, out p);
			public HRESULT put_lineWidth(float v) mut => VT.put_lineWidth(ref this, v);
			public HRESULT get_lineWidth(out float p) mut => VT.get_lineWidth(ref this, out p);
			public HRESULT put_miterLimit(float v) mut => VT.put_miterLimit(ref this, v);
			public HRESULT get_miterLimit(out float p) mut => VT.get_miterLimit(ref this, out p);
			public HRESULT put_shadowBlur(float v) mut => VT.put_shadowBlur(ref this, v);
			public HRESULT get_shadowBlur(out float p) mut => VT.get_shadowBlur(ref this, out p);
			public HRESULT put_shadowColor(BSTR v) mut => VT.put_shadowColor(ref this, v);
			public HRESULT get_shadowColor(out BSTR p) mut => VT.get_shadowColor(ref this, out p);
			public HRESULT put_shadowOffsetX(float v) mut => VT.put_shadowOffsetX(ref this, v);
			public HRESULT get_shadowOffsetX(out float p) mut => VT.get_shadowOffsetX(ref this, out p);
			public HRESULT put_shadowOffsetY(float v) mut => VT.put_shadowOffsetY(ref this, v);
			public HRESULT get_shadowOffsetY(out float p) mut => VT.get_shadowOffsetY(ref this, out p);
			public HRESULT clearRect(float x, float y, float w, float h) mut => VT.clearRect(ref this, x, y, w, h);
			public HRESULT fillRect(float x, float y, float w, float h) mut => VT.fillRect(ref this, x, y, w, h);
			public HRESULT strokeRect(float x, float y, float w, float h) mut => VT.strokeRect(ref this, x, y, w, h);
			public HRESULT arc(float x, float y, float radius, float startAngle, float endAngle, BOOL anticlockwise) mut => VT.arc(ref this, x, y, radius, startAngle, endAngle, anticlockwise);
			public HRESULT arcTo(float x1, float y1, float x2, float y2, float radius) mut => VT.arcTo(ref this, x1, y1, x2, y2, radius);
			public HRESULT beginPath() mut => VT.beginPath(ref this);
			public HRESULT bezierCurveTo(float cp1x, float cp1y, float cp2x, float cp2y, float x, float y) mut => VT.bezierCurveTo(ref this, cp1x, cp1y, cp2x, cp2y, x, y);
			public HRESULT clip() mut => VT.clip(ref this);
			public HRESULT closePath() mut => VT.closePath(ref this);
			public HRESULT fill() mut => VT.fill(ref this);
			public HRESULT lineTo(float x, float y) mut => VT.lineTo(ref this, x, y);
			public HRESULT moveTo(float x, float y) mut => VT.moveTo(ref this, x, y);
			public HRESULT quadraticCurveTo(float cpx, float cpy, float x, float y) mut => VT.quadraticCurveTo(ref this, cpx, cpy, x, y);
			public HRESULT rect(float x, float y, float w, float h) mut => VT.rect(ref this, x, y, w, h);
			public HRESULT stroke() mut => VT.stroke(ref this);
			public HRESULT isPointInPath(float x, float y, out int16 pResult) mut => VT.isPointInPath(ref this, x, y, out pResult);
			public HRESULT put_font(BSTR v) mut => VT.put_font(ref this, v);
			public HRESULT get_font(out BSTR p) mut => VT.get_font(ref this, out p);
			public HRESULT put_textAlign(BSTR v) mut => VT.put_textAlign(ref this, v);
			public HRESULT get_textAlign(out BSTR p) mut => VT.get_textAlign(ref this, out p);
			public HRESULT put_textBaseline(BSTR v) mut => VT.put_textBaseline(ref this, v);
			public HRESULT get_textBaseline(out BSTR p) mut => VT.get_textBaseline(ref this, out p);
			public HRESULT fillText(BSTR text, float x, float y, VARIANT maxWidth) mut => VT.fillText(ref this, text, x, y, maxWidth);
			public HRESULT measureText(BSTR text, out ICanvasTextMetrics* ppCanvasTextMetrics) mut => VT.measureText(ref this, text, out ppCanvasTextMetrics);
			public HRESULT strokeText(BSTR text, float x, float y, VARIANT maxWidth) mut => VT.strokeText(ref this, text, x, y, maxWidth);
			public HRESULT drawImage(ref IDispatch pSrc, VARIANT a1, VARIANT a2, VARIANT a3, VARIANT a4, VARIANT a5, VARIANT a6, VARIANT a7, VARIANT a8) mut => VT.drawImage(ref this, ref pSrc, a1, a2, a3, a4, a5, a6, a7, a8);
			public HRESULT createImageData(VARIANT a1, VARIANT a2, out ICanvasImageData* ppCanvasImageData) mut => VT.createImageData(ref this, a1, a2, out ppCanvasImageData);
			public HRESULT getImageData(float sx, float sy, float sw, float sh, out ICanvasImageData* ppCanvasImageData) mut => VT.getImageData(ref this, sx, sy, sw, sh, out ppCanvasImageData);
			public HRESULT putImageData(ref ICanvasImageData imagedata, float dx, float dy, VARIANT dirtyX, VARIANT dirtyY, VARIANT dirtyWidth, VARIANT dirtyHeight) mut => VT.putImageData(ref this, ref imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out IHTMLCanvasElement* p) get_canvas;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) restore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) save;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float angle) rotate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y) scale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float m11, float m12, float m21, float m22, float dx, float dy) setTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float m11, float m12, float m21, float m22, float dx, float dy) transform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y) translate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float v) put_globalAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out float p) get_globalAlpha;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_globalCompositeOperation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_globalCompositeOperation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, VARIANT v) put_fillStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out VARIANT p) get_fillStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, VARIANT v) put_strokeStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out VARIANT p) get_strokeStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x0, float y0, float x1, float y1, out ICanvasGradient* ppCanvasGradient) createLinearGradient;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x0, float y0, float r0, float x1, float y1, float r1, out ICanvasGradient* ppCanvasGradient) createRadialGradient;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, ref IDispatch image, VARIANT repetition, out ICanvasPattern* ppCanvasPattern) createPattern;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_lineCap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_lineCap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_lineJoin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_lineJoin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float v) put_lineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out float p) get_lineWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float v) put_miterLimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out float p) get_miterLimit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float v) put_shadowBlur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out float p) get_shadowBlur;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_shadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_shadowColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float v) put_shadowOffsetX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out float p) get_shadowOffsetX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float v) put_shadowOffsetY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out float p) get_shadowOffsetY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y, float w, float h) clearRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y, float w, float h) fillRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y, float w, float h) strokeRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y, float radius, float startAngle, float endAngle, BOOL anticlockwise) arc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x1, float y1, float x2, float y2, float radius) arcTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) beginPath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float cp1x, float cp1y, float cp2x, float cp2y, float x, float y) bezierCurveTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) clip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) closePath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) fill;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y) lineTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y) moveTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float cpx, float cpy, float x, float y) quadraticCurveTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y, float w, float h) rect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self) stroke;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float x, float y, out int16 pResult) isPointInPath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_textAlign;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR v) put_textBaseline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, out BSTR p) get_textBaseline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR text, float x, float y, VARIANT maxWidth) fillText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR text, out ICanvasTextMetrics* ppCanvasTextMetrics) measureText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, BSTR text, float x, float y, VARIANT maxWidth) strokeText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, ref IDispatch pSrc, VARIANT a1, VARIANT a2, VARIANT a3, VARIANT a4, VARIANT a5, VARIANT a6, VARIANT a7, VARIANT a8) drawImage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, VARIANT a1, VARIANT a2, out ICanvasImageData* ppCanvasImageData) createImageData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, float sx, float sy, float sw, float sh, out ICanvasImageData* ppCanvasImageData) getImageData;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasRenderingContext2D self, ref ICanvasImageData imagedata, float dx, float dy, VARIANT dirtyX, VARIANT dirtyY, VARIANT dirtyWidth, VARIANT dirtyHeight) putImageData;
			}
		}
		[CRepr]
		public struct DispCanvasGradient : IDispatch
		{
			public const new Guid IID = .(0x3059008c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispCanvasPattern : IDispatch
		{
			public const new Guid IID = .(0x3059008d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispCanvasTextMetrics : IDispatch
		{
			public const new Guid IID = .(0x3059008e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispCanvasImageData : IDispatch
		{
			public const new Guid IID = .(0x3059008f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispCanvasRenderingContext2D : IDispatch
		{
			public const new Guid IID = .(0x30590082, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLCanvasElement : IDispatch
		{
			public const new Guid IID = .(0x3059007b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMProgressEvent : IDispatch
		{
			public const new Guid IID = .(0x3051071e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_lengthComputable(out int16 p) mut => VT.get_lengthComputable(ref this, out p);
			public HRESULT get_loaded(out uint64 p) mut => VT.get_loaded(ref this, out p);
			public HRESULT get_total(out uint64 p) mut => VT.get_total(ref this, out p);
			public HRESULT initProgressEvent(BSTR eventType, int16 canBubble, int16 cancelable, int16 lengthComputableArg, uint64 loadedArg, uint64 totalArg) mut => VT.initProgressEvent(ref this, eventType, canBubble, cancelable, lengthComputableArg, loadedArg, totalArg);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProgressEvent self, out int16 p) get_lengthComputable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProgressEvent self, out uint64 p) get_loaded;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProgressEvent self, out uint64 p) get_total;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMProgressEvent self, BSTR eventType, int16 canBubble, int16 cancelable, int16 lengthComputableArg, uint64 loadedArg, uint64 totalArg) initProgressEvent;
			}
		}
		[CRepr]
		public struct DispDOMProgressEvent : IDispatch
		{
			public const new Guid IID = .(0x30590091, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMMessageEvent : IDispatch
		{
			public const new Guid IID = .(0x30510720, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_data(out BSTR p) mut => VT.get_data(ref this, out p);
			public HRESULT get_origin(out BSTR p) mut => VT.get_origin(ref this, out p);
			public HRESULT get_source(out IHTMLWindow2* p) mut => VT.get_source(ref this, out p);
			public HRESULT initMessageEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR data, BSTR origin, BSTR lastEventId, ref IHTMLWindow2 source) mut => VT.initMessageEvent(ref this, eventType, canBubble, cancelable, data, origin, lastEventId, ref source);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMessageEvent self, out BSTR p) get_data;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMessageEvent self, out BSTR p) get_origin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMessageEvent self, out IHTMLWindow2* p) get_source;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMessageEvent self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR data, BSTR origin, BSTR lastEventId, ref IHTMLWindow2 source) initMessageEvent;
			}
		}
		[CRepr]
		public struct DispDOMMessageEvent : IDispatch
		{
			public const new Guid IID = .(0x30590092, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMSiteModeEvent : IDispatch
		{
			public const new Guid IID = .(0x30510765, 0x98b6, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_buttonID(out int32 p) mut => VT.get_buttonID(ref this, out p);
			public HRESULT get_actionURL(out BSTR p) mut => VT.get_actionURL(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMSiteModeEvent self, out int32 p) get_buttonID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMSiteModeEvent self, out BSTR p) get_actionURL;
			}
		}
		[CRepr]
		public struct DispDOMSiteModeEvent : IDispatch
		{
			public const new Guid IID = .(0x305900a9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMStorageEvent : IDispatch
		{
			public const new Guid IID = .(0x30510722, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_key(out BSTR p) mut => VT.get_key(ref this, out p);
			public HRESULT get_oldValue(out BSTR p) mut => VT.get_oldValue(ref this, out p);
			public HRESULT get_newValue(out BSTR p) mut => VT.get_newValue(ref this, out p);
			public HRESULT get_url(out BSTR p) mut => VT.get_url(ref this, out p);
			public HRESULT get_storageArea(out IHTMLStorage* p) mut => VT.get_storageArea(ref this, out p);
			public HRESULT initStorageEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR keyArg, BSTR oldValueArg, BSTR newValueArg, BSTR urlArg, ref IHTMLStorage storageAreaArg) mut => VT.initStorageEvent(ref this, eventType, canBubble, cancelable, keyArg, oldValueArg, newValueArg, urlArg, ref storageAreaArg);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMStorageEvent self, out BSTR p) get_key;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMStorageEvent self, out BSTR p) get_oldValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMStorageEvent self, out BSTR p) get_newValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMStorageEvent self, out BSTR p) get_url;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMStorageEvent self, out IHTMLStorage* p) get_storageArea;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMStorageEvent self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR keyArg, BSTR oldValueArg, BSTR newValueArg, BSTR urlArg, ref IHTMLStorage storageAreaArg) initStorageEvent;
			}
		}
		[CRepr]
		public struct DispDOMStorageEvent : IDispatch
		{
			public const new Guid IID = .(0x30590093, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IXMLHttpRequestEventTarget : IDispatch
		{
			public const new Guid IID = .(0x30510830, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispXMLHttpRequestEventTarget : IDispatch
		{
			public const new Guid IID = .(0x305900e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct HTMLXMLHttpRequestEvents : IDispatch
		{
			public const new Guid IID = .(0x30510498, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLXMLHttpRequest : IDispatch
		{
			public const new Guid IID = .(0x3051040a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_readyState(out int32 p) mut => VT.get_readyState(ref this, out p);
			public HRESULT get_responseBody(out VARIANT p) mut => VT.get_responseBody(ref this, out p);
			public HRESULT get_responseText(out BSTR p) mut => VT.get_responseText(ref this, out p);
			public HRESULT get_responseXML(out IDispatch* p) mut => VT.get_responseXML(ref this, out p);
			public HRESULT get_status(out int32 p) mut => VT.get_status(ref this, out p);
			public HRESULT get_statusText(out BSTR p) mut => VT.get_statusText(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT abort() mut => VT.abort(ref this);
			public HRESULT open(BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT varUser, VARIANT varPassword) mut => VT.open(ref this, bstrMethod, bstrUrl, varAsync, varUser, varPassword);
			public HRESULT send(VARIANT varBody) mut => VT.send(ref this, varBody);
			public HRESULT getAllResponseHeaders(out BSTR __MIDL__IHTMLXMLHttpRequest0000) mut => VT.getAllResponseHeaders(ref this, out __MIDL__IHTMLXMLHttpRequest0000);
			public HRESULT getResponseHeader(BSTR bstrHeader, out BSTR __MIDL__IHTMLXMLHttpRequest0001) mut => VT.getResponseHeader(ref this, bstrHeader, out __MIDL__IHTMLXMLHttpRequest0001);
			public HRESULT setRequestHeader(BSTR bstrHeader, BSTR bstrValue) mut => VT.setRequestHeader(ref this, bstrHeader, bstrValue);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out int32 p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out VARIANT p) get_responseBody;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out BSTR p) get_responseText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out IDispatch* p) get_responseXML;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out int32 p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out BSTR p) get_statusText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self) abort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT varUser, VARIANT varPassword) open;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, VARIANT varBody) send;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, out BSTR __MIDL__IHTMLXMLHttpRequest0000) getAllResponseHeaders;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, BSTR bstrHeader, out BSTR __MIDL__IHTMLXMLHttpRequest0001) getResponseHeader;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest self, BSTR bstrHeader, BSTR bstrValue) setRequestHeader;
			}
		}
		[CRepr]
		public struct IHTMLXMLHttpRequest2 : IDispatch
		{
			public const new Guid IID = .(0x30510482, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_timeout(int32 v) mut => VT.put_timeout(ref this, v);
			public HRESULT get_timeout(out int32 p) mut => VT.get_timeout(ref this, out p);
			public HRESULT put_ontimeout(VARIANT v) mut => VT.put_ontimeout(ref this, v);
			public HRESULT get_ontimeout(out VARIANT p) mut => VT.get_ontimeout(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest2 self, int32 v) put_timeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest2 self, out int32 p) get_timeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest2 self, VARIANT v) put_ontimeout;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequest2 self, out VARIANT p) get_ontimeout;
			}
		}
		[CRepr]
		public struct IHTMLXMLHttpRequestFactory : IDispatch
		{
			public const new Guid IID = .(0x3051040c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(out IHTMLXMLHttpRequest* __MIDL__IHTMLXMLHttpRequestFactory0000) mut => VT.create(ref this, out __MIDL__IHTMLXMLHttpRequestFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLXMLHttpRequestFactory self, out IHTMLXMLHttpRequest* __MIDL__IHTMLXMLHttpRequestFactory0000) create;
			}
		}
		[CRepr]
		public struct DispHTMLXMLHttpRequest : IDispatch
		{
			public const new Guid IID = .(0x3050f596, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGAngle : IDispatch
		{
			public const new Guid IID = .(0x305104d3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_unitType(int16 v) mut => VT.put_unitType(ref this, v);
			public HRESULT get_unitType(out int16 p) mut => VT.get_unitType(ref this, out p);
			public HRESULT put_value(float v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out float p) mut => VT.get_value(ref this, out p);
			public HRESULT put_valueInSpecifiedUnits(float v) mut => VT.put_valueInSpecifiedUnits(ref this, v);
			public HRESULT get_valueInSpecifiedUnits(out float p) mut => VT.get_valueInSpecifiedUnits(ref this, out p);
			public HRESULT put_valueAsString(BSTR v) mut => VT.put_valueAsString(ref this, v);
			public HRESULT get_valueAsString(out BSTR p) mut => VT.get_valueAsString(ref this, out p);
			public HRESULT newValueSpecifiedUnits(int16 unitType, float valueInSpecifiedUnits) mut => VT.newValueSpecifiedUnits(ref this, unitType, valueInSpecifiedUnits);
			public HRESULT convertToSpecifiedUnits(int16 unitType) mut => VT.convertToSpecifiedUnits(ref this, unitType);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, int16 v) put_unitType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, out int16 p) get_unitType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, float v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, out float p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, float v) put_valueInSpecifiedUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, out float p) get_valueInSpecifiedUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, BSTR v) put_valueAsString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, out BSTR p) get_valueAsString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, int16 unitType, float valueInSpecifiedUnits) newValueSpecifiedUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAngle self, int16 unitType) convertToSpecifiedUnits;
			}
		}
		[CRepr]
		public struct ISVGElement : IDispatch
		{
			public const new Guid IID = .(0x305104c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_xmlbase(BSTR v) mut => VT.put_xmlbase(ref this, v);
			public HRESULT get_xmlbase(out BSTR p) mut => VT.get_xmlbase(ref this, out p);
			public HRESULT putref_ownerSVGElement(ref ISVGSVGElement v) mut => VT.putref_ownerSVGElement(ref this, ref v);
			public HRESULT get_ownerSVGElement(out ISVGSVGElement* p) mut => VT.get_ownerSVGElement(ref this, out p);
			public HRESULT putref_viewportElement(ref ISVGElement v) mut => VT.putref_viewportElement(ref this, ref v);
			public HRESULT get_viewportElement(out ISVGElement* p) mut => VT.get_viewportElement(ref this, out p);
			public HRESULT putref_focusable(ref ISVGAnimatedEnumeration v) mut => VT.putref_focusable(ref this, ref v);
			public HRESULT get_focusable(out ISVGAnimatedEnumeration* p) mut => VT.get_focusable(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, BSTR v) put_xmlbase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, out BSTR p) get_xmlbase;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, ref ISVGSVGElement v) putref_ownerSVGElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, out ISVGSVGElement* p) get_ownerSVGElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, ref ISVGElement v) putref_viewportElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, out ISVGElement* p) get_viewportElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, ref ISVGAnimatedEnumeration v) putref_focusable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElement self, out ISVGAnimatedEnumeration* p) get_focusable;
			}
		}
		[CRepr]
		public struct ISVGRect : IDispatch
		{
			public const new Guid IID = .(0x305104d7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_width(float v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out float p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(float v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out float p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, float v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, out float p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, float v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRect self, out float p) get_height;
			}
		}
		[CRepr]
		public struct ISVGMatrix : IDispatch
		{
			public const new Guid IID = .(0x305104f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_a(float v) mut => VT.put_a(ref this, v);
			public HRESULT get_a(out float p) mut => VT.get_a(ref this, out p);
			public HRESULT put_b(float v) mut => VT.put_b(ref this, v);
			public HRESULT get_b(out float p) mut => VT.get_b(ref this, out p);
			public HRESULT put_c(float v) mut => VT.put_c(ref this, v);
			public HRESULT get_c(out float p) mut => VT.get_c(ref this, out p);
			public HRESULT put_d(float v) mut => VT.put_d(ref this, v);
			public HRESULT get_d(out float p) mut => VT.get_d(ref this, out p);
			public HRESULT put_e(float v) mut => VT.put_e(ref this, v);
			public HRESULT get_e(out float p) mut => VT.get_e(ref this, out p);
			public HRESULT put_f(float v) mut => VT.put_f(ref this, v);
			public HRESULT get_f(out float p) mut => VT.get_f(ref this, out p);
			public HRESULT multiply(ref ISVGMatrix secondMatrix, out ISVGMatrix* ppResult) mut => VT.multiply(ref this, ref secondMatrix, out ppResult);
			public HRESULT inverse(out ISVGMatrix* ppResult) mut => VT.inverse(ref this, out ppResult);
			public HRESULT translate(float x, float y, out ISVGMatrix* ppResult) mut => VT.translate(ref this, x, y, out ppResult);
			public HRESULT scale(float scaleFactor, out ISVGMatrix* ppResult) mut => VT.scale(ref this, scaleFactor, out ppResult);
			public HRESULT scaleNonUniform(float scaleFactorX, float scaleFactorY, out ISVGMatrix* ppResult) mut => VT.scaleNonUniform(ref this, scaleFactorX, scaleFactorY, out ppResult);
			public HRESULT rotate(float angle, out ISVGMatrix* ppResult) mut => VT.rotate(ref this, angle, out ppResult);
			public HRESULT rotateFromVector(float x, float y, out ISVGMatrix* ppResult) mut => VT.rotateFromVector(ref this, x, y, out ppResult);
			public HRESULT flipX(out ISVGMatrix* ppResult) mut => VT.flipX(ref this, out ppResult);
			public HRESULT flipY(out ISVGMatrix* ppResult) mut => VT.flipY(ref this, out ppResult);
			public HRESULT skewX(float angle, out ISVGMatrix* ppResult) mut => VT.skewX(ref this, angle, out ppResult);
			public HRESULT skewY(float angle, out ISVGMatrix* ppResult) mut => VT.skewY(ref this, angle, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float v) put_a;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out float p) get_a;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float v) put_b;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out float p) get_b;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float v) put_c;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out float p) get_c;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float v) put_d;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out float p) get_d;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float v) put_e;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out float p) get_e;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float v) put_f;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out float p) get_f;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, ref ISVGMatrix secondMatrix, out ISVGMatrix* ppResult) multiply;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out ISVGMatrix* ppResult) inverse;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float x, float y, out ISVGMatrix* ppResult) translate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float scaleFactor, out ISVGMatrix* ppResult) scale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float scaleFactorX, float scaleFactorY, out ISVGMatrix* ppResult) scaleNonUniform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float angle, out ISVGMatrix* ppResult) rotate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float x, float y, out ISVGMatrix* ppResult) rotateFromVector;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out ISVGMatrix* ppResult) flipX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, out ISVGMatrix* ppResult) flipY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float angle, out ISVGMatrix* ppResult) skewX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMatrix self, float angle, out ISVGMatrix* ppResult) skewY;
			}
		}
		[CRepr]
		public struct ISVGStringList : IDispatch
		{
			public const new Guid IID = .(0x305104c8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_numberOfItems(int32 v) mut => VT.put_numberOfItems(ref this, v);
			public HRESULT get_numberOfItems(out int32 p) mut => VT.get_numberOfItems(ref this, out p);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT initialize(BSTR newItem, out BSTR ppResult) mut => VT.initialize(ref this, newItem, out ppResult);
			public HRESULT getItem(int32 index, out BSTR ppResult) mut => VT.getItem(ref this, index, out ppResult);
			public HRESULT insertItemBefore(BSTR newItem, int32 index, out BSTR ppResult) mut => VT.insertItemBefore(ref this, newItem, index, out ppResult);
			public HRESULT replaceItem(BSTR newItem, int32 index, out BSTR ppResult) mut => VT.replaceItem(ref this, newItem, index, out ppResult);
			public HRESULT removeItem(int32 index, out BSTR ppResult) mut => VT.removeItem(ref this, index, out ppResult);
			public HRESULT appendItem(BSTR newItem, out BSTR ppResult) mut => VT.appendItem(ref this, newItem, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, int32 v) put_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, out int32 p) get_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, BSTR newItem, out BSTR ppResult) initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, int32 index, out BSTR ppResult) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, BSTR newItem, int32 index, out BSTR ppResult) insertItemBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, BSTR newItem, int32 index, out BSTR ppResult) replaceItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, int32 index, out BSTR ppResult) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStringList self, BSTR newItem, out BSTR ppResult) appendItem;
			}
		}
		[CRepr]
		public struct ISVGAnimatedRect : IDispatch
		{
			public const new Guid IID = .(0x305104d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGRect v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGRect* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGRect v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGRect* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedRect self, ref ISVGRect v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedRect self, out ISVGRect* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedRect self, ref ISVGRect v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedRect self, out ISVGRect* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGAnimatedString : IDispatch
		{
			public const new Guid IID = .(0x305104c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_baseVal(BSTR v) mut => VT.put_baseVal(ref this, v);
			public HRESULT get_baseVal(out BSTR p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT get_animVal(out BSTR p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedString self, BSTR v) put_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedString self, out BSTR p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedString self, out BSTR p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGAnimatedBoolean : IDispatch
		{
			public const new Guid IID = .(0x305104c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_baseVal(int16 v) mut => VT.put_baseVal(ref this, v);
			public HRESULT get_baseVal(out int16 p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT put_animVal(int16 v) mut => VT.put_animVal(ref this, v);
			public HRESULT get_animVal(out int16 p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedBoolean self, int16 v) put_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedBoolean self, out int16 p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedBoolean self, int16 v) put_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedBoolean self, out int16 p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGAnimatedTransformList : IDispatch
		{
			public const new Guid IID = .(0x305104f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGTransformList v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGTransformList* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGTransformList v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGTransformList* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedTransformList self, ref ISVGTransformList v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedTransformList self, out ISVGTransformList* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedTransformList self, ref ISVGTransformList v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedTransformList self, out ISVGTransformList* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGAnimatedPreserveAspectRatio : IDispatch
		{
			public const new Guid IID = .(0x305104fb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGPreserveAspectRatio v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGPreserveAspectRatio* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGPreserveAspectRatio v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGPreserveAspectRatio* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPreserveAspectRatio self, ref ISVGPreserveAspectRatio v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPreserveAspectRatio self, out ISVGPreserveAspectRatio* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPreserveAspectRatio self, ref ISVGPreserveAspectRatio v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPreserveAspectRatio self, out ISVGPreserveAspectRatio* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGStylable : IDispatch
		{
			public const new Guid IID = .(0x305104da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_className(out ISVGAnimatedString* p) mut => VT.get_className(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStylable self, out ISVGAnimatedString* p) get_className;
			}
		}
		[CRepr]
		public struct ISVGLocatable : IDispatch
		{
			public const new Guid IID = .(0x305104db, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_nearestViewportElement(out ISVGElement* p) mut => VT.get_nearestViewportElement(ref this, out p);
			public HRESULT get_farthestViewportElement(out ISVGElement* p) mut => VT.get_farthestViewportElement(ref this, out p);
			public HRESULT getBBox(out ISVGRect* ppResult) mut => VT.getBBox(ref this, out ppResult);
			public HRESULT getCTM(out ISVGMatrix* ppResult) mut => VT.getCTM(ref this, out ppResult);
			public HRESULT getScreenCTM(out ISVGMatrix* ppResult) mut => VT.getScreenCTM(ref this, out ppResult);
			public HRESULT getTransformToElement(ref ISVGElement pElement, out ISVGMatrix* ppResult) mut => VT.getTransformToElement(ref this, ref pElement, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLocatable self, out ISVGElement* p) get_nearestViewportElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLocatable self, out ISVGElement* p) get_farthestViewportElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLocatable self, out ISVGRect* ppResult) getBBox;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLocatable self, out ISVGMatrix* ppResult) getCTM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLocatable self, out ISVGMatrix* ppResult) getScreenCTM;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLocatable self, ref ISVGElement pElement, out ISVGMatrix* ppResult) getTransformToElement;
			}
		}
		[CRepr]
		public struct ISVGTransformable : IDispatch
		{
			public const new Guid IID = .(0x305104dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_transform(out ISVGAnimatedTransformList* p) mut => VT.get_transform(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformable self, out ISVGAnimatedTransformList* p) get_transform;
			}
		}
		[CRepr]
		public struct ISVGTests : IDispatch
		{
			public const new Guid IID = .(0x305104dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_requiredFeatures(out ISVGStringList* p) mut => VT.get_requiredFeatures(ref this, out p);
			public HRESULT get_requiredExtensions(out ISVGStringList* p) mut => VT.get_requiredExtensions(ref this, out p);
			public HRESULT get_systemLanguage(out ISVGStringList* p) mut => VT.get_systemLanguage(ref this, out p);
			public HRESULT hasExtension(BSTR @extension, out int16 pResult) mut => VT.hasExtension(ref this, @extension, out pResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTests self, out ISVGStringList* p) get_requiredFeatures;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTests self, out ISVGStringList* p) get_requiredExtensions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTests self, out ISVGStringList* p) get_systemLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTests self, BSTR @extension, out int16 pResult) hasExtension;
			}
		}
		[CRepr]
		public struct ISVGLangSpace : IDispatch
		{
			public const new Guid IID = .(0x305104de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_xmllang(BSTR v) mut => VT.put_xmllang(ref this, v);
			public HRESULT get_xmllang(out BSTR p) mut => VT.get_xmllang(ref this, out p);
			public HRESULT put_xmlspace(BSTR v) mut => VT.put_xmlspace(ref this, v);
			public HRESULT get_xmlspace(out BSTR p) mut => VT.get_xmlspace(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLangSpace self, BSTR v) put_xmllang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLangSpace self, out BSTR p) get_xmllang;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLangSpace self, BSTR v) put_xmlspace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLangSpace self, out BSTR p) get_xmlspace;
			}
		}
		[CRepr]
		public struct ISVGExternalResourcesRequired : IDispatch
		{
			public const new Guid IID = .(0x305104df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_externalResourcesRequired(out ISVGAnimatedBoolean* p) mut => VT.get_externalResourcesRequired(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGExternalResourcesRequired self, out ISVGAnimatedBoolean* p) get_externalResourcesRequired;
			}
		}
		[CRepr]
		public struct ISVGFitToViewBox : IDispatch
		{
			public const new Guid IID = .(0x305104e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_viewBox(out ISVGAnimatedRect* p) mut => VT.get_viewBox(ref this, out p);
			public HRESULT putref_preserveAspectRatio(ref ISVGAnimatedPreserveAspectRatio v) mut => VT.putref_preserveAspectRatio(ref this, ref v);
			public HRESULT get_preserveAspectRatio(out ISVGAnimatedPreserveAspectRatio* p) mut => VT.get_preserveAspectRatio(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGFitToViewBox self, out ISVGAnimatedRect* p) get_viewBox;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGFitToViewBox self, ref ISVGAnimatedPreserveAspectRatio v) putref_preserveAspectRatio;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGFitToViewBox self, out ISVGAnimatedPreserveAspectRatio* p) get_preserveAspectRatio;
			}
		}
		[CRepr]
		public struct ISVGZoomAndPan : IDispatch
		{
			public const new Guid IID = .(0x305104e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_zoomAndPan(out int16 p) mut => VT.get_zoomAndPan(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGZoomAndPan self, out int16 p) get_zoomAndPan;
			}
		}
		[CRepr]
		public struct ISVGURIReference : IDispatch
		{
			public const new Guid IID = .(0x305104e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_href(out ISVGAnimatedString* p) mut => VT.get_href(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGURIReference self, out ISVGAnimatedString* p) get_href;
			}
		}
		[CRepr]
		public struct ISVGAnimatedAngle : IDispatch
		{
			public const new Guid IID = .(0x305104d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGAngle v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGAngle* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGAngle v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGAngle* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedAngle self, ref ISVGAngle v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedAngle self, out ISVGAngle* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedAngle self, ref ISVGAngle v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedAngle self, out ISVGAngle* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGTransformList : IDispatch
		{
			public const new Guid IID = .(0x305104f8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_numberOfItems(int32 v) mut => VT.put_numberOfItems(ref this, v);
			public HRESULT get_numberOfItems(out int32 p) mut => VT.get_numberOfItems(ref this, out p);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT initialize(ref ISVGTransform newItem, out ISVGTransform* ppResult) mut => VT.initialize(ref this, ref newItem, out ppResult);
			public HRESULT getItem(int32 index, out ISVGTransform* ppResult) mut => VT.getItem(ref this, index, out ppResult);
			public HRESULT insertItemBefore(ref ISVGTransform newItem, int32 index, out ISVGTransform* ppResult) mut => VT.insertItemBefore(ref this, ref newItem, index, out ppResult);
			public HRESULT replaceItem(ref ISVGTransform newItem, int32 index, out ISVGTransform* ppResult) mut => VT.replaceItem(ref this, ref newItem, index, out ppResult);
			public HRESULT removeItem(int32 index, out ISVGTransform* ppResult) mut => VT.removeItem(ref this, index, out ppResult);
			public HRESULT appendItem(ref ISVGTransform newItem, out ISVGTransform* ppResult) mut => VT.appendItem(ref this, ref newItem, out ppResult);
			public HRESULT createSVGTransformFromMatrix(ref ISVGMatrix newItem, out ISVGTransform* ppResult) mut => VT.createSVGTransformFromMatrix(ref this, ref newItem, out ppResult);
			public HRESULT consolidate(out ISVGTransform* ppResult) mut => VT.consolidate(ref this, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, int32 v) put_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, out int32 p) get_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, ref ISVGTransform newItem, out ISVGTransform* ppResult) initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, int32 index, out ISVGTransform* ppResult) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, ref ISVGTransform newItem, int32 index, out ISVGTransform* ppResult) insertItemBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, ref ISVGTransform newItem, int32 index, out ISVGTransform* ppResult) replaceItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, int32 index, out ISVGTransform* ppResult) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, ref ISVGTransform newItem, out ISVGTransform* ppResult) appendItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, ref ISVGMatrix newItem, out ISVGTransform* ppResult) createSVGTransformFromMatrix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransformList self, out ISVGTransform* ppResult) consolidate;
			}
		}
		[CRepr]
		public struct ISVGAnimatedEnumeration : IDispatch
		{
			public const new Guid IID = .(0x305104c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_baseVal(uint16 v) mut => VT.put_baseVal(ref this, v);
			public HRESULT get_baseVal(out uint16 p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT put_animVal(uint16 v) mut => VT.put_animVal(ref this, v);
			public HRESULT get_animVal(out uint16 p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedEnumeration self, uint16 v) put_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedEnumeration self, out uint16 p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedEnumeration self, uint16 v) put_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedEnumeration self, out uint16 p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGAnimatedInteger : IDispatch
		{
			public const new Guid IID = .(0x305104ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_baseVal(int32 v) mut => VT.put_baseVal(ref this, v);
			public HRESULT get_baseVal(out int32 p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT put_animVal(int32 v) mut => VT.put_animVal(ref this, v);
			public HRESULT get_animVal(out int32 p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedInteger self, int32 v) put_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedInteger self, out int32 p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedInteger self, int32 v) put_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedInteger self, out int32 p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGLength : IDispatch
		{
			public const new Guid IID = .(0x305104cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_unitType(int16 v) mut => VT.put_unitType(ref this, v);
			public HRESULT get_unitType(out int16 p) mut => VT.get_unitType(ref this, out p);
			public HRESULT put_value(float v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out float p) mut => VT.get_value(ref this, out p);
			public HRESULT put_valueInSpecifiedUnits(float v) mut => VT.put_valueInSpecifiedUnits(ref this, v);
			public HRESULT get_valueInSpecifiedUnits(out float p) mut => VT.get_valueInSpecifiedUnits(ref this, out p);
			public HRESULT put_valueAsString(BSTR v) mut => VT.put_valueAsString(ref this, v);
			public HRESULT get_valueAsString(out BSTR p) mut => VT.get_valueAsString(ref this, out p);
			public HRESULT newValueSpecifiedUnits(int16 unitType, float valueInSpecifiedUnits) mut => VT.newValueSpecifiedUnits(ref this, unitType, valueInSpecifiedUnits);
			public HRESULT convertToSpecifiedUnits(int16 unitType) mut => VT.convertToSpecifiedUnits(ref this, unitType);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, int16 v) put_unitType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, out int16 p) get_unitType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, float v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, out float p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, float v) put_valueInSpecifiedUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, out float p) get_valueInSpecifiedUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, BSTR v) put_valueAsString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, out BSTR p) get_valueAsString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, int16 unitType, float valueInSpecifiedUnits) newValueSpecifiedUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLength self, int16 unitType) convertToSpecifiedUnits;
			}
		}
		[CRepr]
		public struct ISVGAnimatedLength : IDispatch
		{
			public const new Guid IID = .(0x305104d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGLength v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGLength* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGLength v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGLength* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLength self, ref ISVGLength v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLength self, out ISVGLength* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLength self, ref ISVGLength v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLength self, out ISVGLength* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGLengthList : IDispatch
		{
			public const new Guid IID = .(0x305104d1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_numberOfItems(int32 v) mut => VT.put_numberOfItems(ref this, v);
			public HRESULT get_numberOfItems(out int32 p) mut => VT.get_numberOfItems(ref this, out p);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT initialize(ref ISVGLength newItem, out ISVGLength* ppResult) mut => VT.initialize(ref this, ref newItem, out ppResult);
			public HRESULT getItem(int32 index, out ISVGLength* ppResult) mut => VT.getItem(ref this, index, out ppResult);
			public HRESULT insertItemBefore(ref ISVGLength newItem, int32 index, out ISVGLength* ppResult) mut => VT.insertItemBefore(ref this, ref newItem, index, out ppResult);
			public HRESULT replaceItem(ref ISVGLength newItem, int32 index, out ISVGLength* ppResult) mut => VT.replaceItem(ref this, ref newItem, index, out ppResult);
			public HRESULT removeItem(int32 index, out ISVGLength* ppResult) mut => VT.removeItem(ref this, index, out ppResult);
			public HRESULT appendItem(ref ISVGLength newItem, out ISVGLength* ppResult) mut => VT.appendItem(ref this, ref newItem, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, int32 v) put_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, out int32 p) get_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, ref ISVGLength newItem, out ISVGLength* ppResult) initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, int32 index, out ISVGLength* ppResult) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, ref ISVGLength newItem, int32 index, out ISVGLength* ppResult) insertItemBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, ref ISVGLength newItem, int32 index, out ISVGLength* ppResult) replaceItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, int32 index, out ISVGLength* ppResult) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLengthList self, ref ISVGLength newItem, out ISVGLength* ppResult) appendItem;
			}
		}
		[CRepr]
		public struct ISVGAnimatedLengthList : IDispatch
		{
			public const new Guid IID = .(0x305104d2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGLengthList v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGLengthList* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGLengthList v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGLengthList* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLengthList self, ref ISVGLengthList v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLengthList self, out ISVGLengthList* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLengthList self, ref ISVGLengthList v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedLengthList self, out ISVGLengthList* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGNumber : IDispatch
		{
			public const new Guid IID = .(0x305104cb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_value(float v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out float p) mut => VT.get_value(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumber self, float v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumber self, out float p) get_value;
			}
		}
		[CRepr]
		public struct ISVGAnimatedNumber : IDispatch
		{
			public const new Guid IID = .(0x305104cc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_baseVal(float v) mut => VT.put_baseVal(ref this, v);
			public HRESULT get_baseVal(out float p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT put_animVal(float v) mut => VT.put_animVal(ref this, v);
			public HRESULT get_animVal(out float p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumber self, float v) put_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumber self, out float p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumber self, float v) put_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumber self, out float p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGNumberList : IDispatch
		{
			public const new Guid IID = .(0x305104cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_numberOfItems(int32 v) mut => VT.put_numberOfItems(ref this, v);
			public HRESULT get_numberOfItems(out int32 p) mut => VT.get_numberOfItems(ref this, out p);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT initialize(ref ISVGNumber newItem, out ISVGNumber* ppResult) mut => VT.initialize(ref this, ref newItem, out ppResult);
			public HRESULT getItem(int32 index, out ISVGNumber* ppResult) mut => VT.getItem(ref this, index, out ppResult);
			public HRESULT insertItemBefore(ref ISVGNumber newItem, int32 index, out ISVGNumber* ppResult) mut => VT.insertItemBefore(ref this, ref newItem, index, out ppResult);
			public HRESULT replaceItem(ref ISVGNumber newItem, int32 index, out ISVGNumber* ppResult) mut => VT.replaceItem(ref this, ref newItem, index, out ppResult);
			public HRESULT removeItem(int32 index, out ISVGNumber* ppResult) mut => VT.removeItem(ref this, index, out ppResult);
			public HRESULT appendItem(ref ISVGNumber newItem, out ISVGNumber* ppResult) mut => VT.appendItem(ref this, ref newItem, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, int32 v) put_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, out int32 p) get_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, ref ISVGNumber newItem, out ISVGNumber* ppResult) initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, int32 index, out ISVGNumber* ppResult) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, ref ISVGNumber newItem, int32 index, out ISVGNumber* ppResult) insertItemBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, ref ISVGNumber newItem, int32 index, out ISVGNumber* ppResult) replaceItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, int32 index, out ISVGNumber* ppResult) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGNumberList self, ref ISVGNumber newItem, out ISVGNumber* ppResult) appendItem;
			}
		}
		[CRepr]
		public struct ISVGAnimatedNumberList : IDispatch
		{
			public const new Guid IID = .(0x305104ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_baseVal(ref ISVGNumberList v) mut => VT.putref_baseVal(ref this, ref v);
			public HRESULT get_baseVal(out ISVGNumberList* p) mut => VT.get_baseVal(ref this, out p);
			public HRESULT putref_animVal(ref ISVGNumberList v) mut => VT.putref_animVal(ref this, ref v);
			public HRESULT get_animVal(out ISVGNumberList* p) mut => VT.get_animVal(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumberList self, ref ISVGNumberList v) putref_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumberList self, out ISVGNumberList* p) get_baseVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumberList self, ref ISVGNumberList v) putref_animVal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedNumberList self, out ISVGNumberList* p) get_animVal;
			}
		}
		[CRepr]
		public struct ISVGClipPathElement : IDispatch
		{
			public const new Guid IID = .(0x3051052d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_clipPathUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_clipPathUnits(ref this, ref v);
			public HRESULT get_clipPathUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_clipPathUnits(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGClipPathElement self, ref ISVGAnimatedEnumeration v) putref_clipPathUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGClipPathElement self, out ISVGAnimatedEnumeration* p) get_clipPathUnits;
			}
		}
		[CRepr]
		public struct DispSVGClipPathElement : IDispatch
		{
			public const new Guid IID = .(0x3059003b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGDocument : IDispatch
		{
			public const new Guid IID = .(0x305104e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_rootElement(out ISVGSVGElement* p) mut => VT.get_rootElement(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGDocument self, out ISVGSVGElement* p) get_rootElement;
			}
		}
		[CRepr]
		public struct IGetSVGDocument : IDispatch
		{
			public const new Guid IID = .(0x305105ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT getSVGDocument(out IDispatch* ppSVGDocument) mut => VT.getSVGDocument(ref this, out ppSVGDocument);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IGetSVGDocument self, out IDispatch* ppSVGDocument) getSVGDocument;
			}
		}
		[CRepr]
		public struct DispSVGElement : IDispatch
		{
			public const new Guid IID = .(0x30590000, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IICCSVGColor : IDispatch
		{
			public const new Guid IID = .(0x305104d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPaint : IDispatch
		{
			public const new Guid IID = .(0x30510524, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPatternElement : IDispatch
		{
			public const new Guid IID = .(0x3051052c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_patternUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_patternUnits(ref this, ref v);
			public HRESULT get_patternUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_patternUnits(ref this, out p);
			public HRESULT putref_patternContentUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_patternContentUnits(ref this, ref v);
			public HRESULT get_patternContentUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_patternContentUnits(ref this, out p);
			public HRESULT putref_patternTransform(ref ISVGAnimatedTransformList v) mut => VT.putref_patternTransform(ref this, ref v);
			public HRESULT get_patternTransform(out ISVGAnimatedTransformList* p) mut => VT.get_patternTransform(ref this, out p);
			public HRESULT putref_x(ref ISVGAnimatedLength v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLength* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLength v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLength* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_width(ref ISVGAnimatedLength v) mut => VT.putref_width(ref this, ref v);
			public HRESULT get_width(out ISVGAnimatedLength* p) mut => VT.get_width(ref this, out p);
			public HRESULT putref_height(ref ISVGAnimatedLength v) mut => VT.putref_height(ref this, ref v);
			public HRESULT get_height(out ISVGAnimatedLength* p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedEnumeration v) putref_patternUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedEnumeration* p) get_patternUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedEnumeration v) putref_patternContentUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedEnumeration* p) get_patternContentUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedTransformList v) putref_patternTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedTransformList* p) get_patternTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedLength v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedLength* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedLength v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedLength* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedLength v) putref_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedLength* p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, ref ISVGAnimatedLength v) putref_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPatternElement self, out ISVGAnimatedLength* p) get_height;
			}
		}
		[CRepr]
		public struct DispSVGPatternElement : IDispatch
		{
			public const new Guid IID = .(0x3059002c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPathSeg : IDispatch
		{
			public const new Guid IID = .(0x305104fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_pathSegType(int16 v) mut => VT.put_pathSegType(ref this, v);
			public HRESULT get_pathSegType(out int16 p) mut => VT.get_pathSegType(ref this, out p);
			public HRESULT get_pathSegTypeAsLetter(out BSTR p) mut => VT.get_pathSegTypeAsLetter(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSeg self, int16 v) put_pathSegType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSeg self, out int16 p) get_pathSegType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSeg self, out BSTR p) get_pathSegTypeAsLetter;
			}
		}
		[CRepr]
		public struct ISVGPathSegArcAbs : IDispatch
		{
			public const new Guid IID = .(0x30510506, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_r1(float v) mut => VT.put_r1(ref this, v);
			public HRESULT get_r1(out float p) mut => VT.get_r1(ref this, out p);
			public HRESULT put_r2(float v) mut => VT.put_r2(ref this, v);
			public HRESULT get_r2(out float p) mut => VT.get_r2(ref this, out p);
			public HRESULT put_angle(float v) mut => VT.put_angle(ref this, v);
			public HRESULT get_angle(out float p) mut => VT.get_angle(ref this, out p);
			public HRESULT put_largeArcFlag(int16 v) mut => VT.put_largeArcFlag(ref this, v);
			public HRESULT get_largeArcFlag(out int16 p) mut => VT.get_largeArcFlag(ref this, out p);
			public HRESULT put_sweepFlag(int16 v) mut => VT.put_sweepFlag(ref this, v);
			public HRESULT get_sweepFlag(out int16 p) mut => VT.get_sweepFlag(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, float v) put_r1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out float p) get_r1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, float v) put_r2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out float p) get_r2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, float v) put_angle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out float p) get_angle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, int16 v) put_largeArcFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out int16 p) get_largeArcFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, int16 v) put_sweepFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcAbs self, out int16 p) get_sweepFlag;
			}
		}
		[CRepr]
		public struct ISVGPathSegArcRel : IDispatch
		{
			public const new Guid IID = .(0x30510507, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_r1(float v) mut => VT.put_r1(ref this, v);
			public HRESULT get_r1(out float p) mut => VT.get_r1(ref this, out p);
			public HRESULT put_r2(float v) mut => VT.put_r2(ref this, v);
			public HRESULT get_r2(out float p) mut => VT.get_r2(ref this, out p);
			public HRESULT put_angle(float v) mut => VT.put_angle(ref this, v);
			public HRESULT get_angle(out float p) mut => VT.get_angle(ref this, out p);
			public HRESULT put_largeArcFlag(int16 v) mut => VT.put_largeArcFlag(ref this, v);
			public HRESULT get_largeArcFlag(out int16 p) mut => VT.get_largeArcFlag(ref this, out p);
			public HRESULT put_sweepFlag(int16 v) mut => VT.put_sweepFlag(ref this, v);
			public HRESULT get_sweepFlag(out int16 p) mut => VT.get_sweepFlag(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, float v) put_r1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out float p) get_r1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, float v) put_r2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out float p) get_r2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, float v) put_angle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out float p) get_angle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, int16 v) put_largeArcFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out int16 p) get_largeArcFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, int16 v) put_sweepFlag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegArcRel self, out int16 p) get_sweepFlag;
			}
		}
		[CRepr]
		public struct ISVGPathSegClosePath : IDispatch
		{
			public const new Guid IID = .(0x305104fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPathSegMovetoAbs : IDispatch
		{
			public const new Guid IID = .(0x305104fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoAbs self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegMovetoRel : IDispatch
		{
			public const new Guid IID = .(0x305104ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegMovetoRel self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegLinetoAbs : IDispatch
		{
			public const new Guid IID = .(0x30510500, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoAbs self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegLinetoRel : IDispatch
		{
			public const new Guid IID = .(0x30510501, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoRel self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoCubicAbs : IDispatch
		{
			public const new Guid IID = .(0x30510502, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_x1(float v) mut => VT.put_x1(ref this, v);
			public HRESULT get_x1(out float p) mut => VT.get_x1(ref this, out p);
			public HRESULT put_y1(float v) mut => VT.put_y1(ref this, v);
			public HRESULT get_y1(out float p) mut => VT.get_y1(ref this, out p);
			public HRESULT put_x2(float v) mut => VT.put_x2(ref this, v);
			public HRESULT get_x2(out float p) mut => VT.get_x2(ref this, out p);
			public HRESULT put_y2(float v) mut => VT.put_y2(ref this, v);
			public HRESULT get_y2(out float p) mut => VT.get_y2(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, float v) put_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, out float p) get_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, float v) put_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, out float p) get_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, float v) put_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, out float p) get_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, float v) put_y2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicAbs self, out float p) get_y2;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoCubicRel : IDispatch
		{
			public const new Guid IID = .(0x30510503, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_x1(float v) mut => VT.put_x1(ref this, v);
			public HRESULT get_x1(out float p) mut => VT.get_x1(ref this, out p);
			public HRESULT put_y1(float v) mut => VT.put_y1(ref this, v);
			public HRESULT get_y1(out float p) mut => VT.get_y1(ref this, out p);
			public HRESULT put_x2(float v) mut => VT.put_x2(ref this, v);
			public HRESULT get_x2(out float p) mut => VT.get_x2(ref this, out p);
			public HRESULT put_y2(float v) mut => VT.put_y2(ref this, v);
			public HRESULT get_y2(out float p) mut => VT.get_y2(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, float v) put_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, out float p) get_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, float v) put_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, out float p) get_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, float v) put_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, out float p) get_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, float v) put_y2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicRel self, out float p) get_y2;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoCubicSmoothAbs : IDispatch
		{
			public const new Guid IID = .(0x3051050c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_x2(float v) mut => VT.put_x2(ref this, v);
			public HRESULT get_x2(out float p) mut => VT.get_x2(ref this, out p);
			public HRESULT put_y2(float v) mut => VT.put_y2(ref this, v);
			public HRESULT get_y2(out float p) mut => VT.get_y2(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, float v) put_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, out float p) get_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, float v) put_y2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothAbs self, out float p) get_y2;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoCubicSmoothRel : IDispatch
		{
			public const new Guid IID = .(0x3051050d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_x2(float v) mut => VT.put_x2(ref this, v);
			public HRESULT get_x2(out float p) mut => VT.get_x2(ref this, out p);
			public HRESULT put_y2(float v) mut => VT.put_y2(ref this, v);
			public HRESULT get_y2(out float p) mut => VT.get_y2(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, float v) put_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, out float p) get_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, float v) put_y2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoCubicSmoothRel self, out float p) get_y2;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoQuadraticAbs : IDispatch
		{
			public const new Guid IID = .(0x30510504, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_x1(float v) mut => VT.put_x1(ref this, v);
			public HRESULT get_x1(out float p) mut => VT.get_x1(ref this, out p);
			public HRESULT put_y1(float v) mut => VT.put_y1(ref this, v);
			public HRESULT get_y1(out float p) mut => VT.get_y1(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, float v) put_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, out float p) get_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, float v) put_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticAbs self, out float p) get_y1;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoQuadraticRel : IDispatch
		{
			public const new Guid IID = .(0x30510505, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT put_x1(float v) mut => VT.put_x1(ref this, v);
			public HRESULT get_x1(out float p) mut => VT.get_x1(ref this, out p);
			public HRESULT put_y1(float v) mut => VT.put_y1(ref this, v);
			public HRESULT get_y1(out float p) mut => VT.get_y1(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, float v) put_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, out float p) get_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, float v) put_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticRel self, out float p) get_y1;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoQuadraticSmoothAbs : IDispatch
		{
			public const new Guid IID = .(0x3051050e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothAbs self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothAbs self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegCurvetoQuadraticSmoothRel : IDispatch
		{
			public const new Guid IID = .(0x3051050f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothRel self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegCurvetoQuadraticSmoothRel self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegLinetoHorizontalAbs : IDispatch
		{
			public const new Guid IID = .(0x30510508, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoHorizontalAbs self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoHorizontalAbs self, out float p) get_x;
			}
		}
		[CRepr]
		public struct ISVGPathSegLinetoHorizontalRel : IDispatch
		{
			public const new Guid IID = .(0x30510509, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoHorizontalRel self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoHorizontalRel self, out float p) get_x;
			}
		}
		[CRepr]
		public struct ISVGPathSegLinetoVerticalAbs : IDispatch
		{
			public const new Guid IID = .(0x3051050a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoVerticalAbs self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoVerticalAbs self, out float p) get_y;
			}
		}
		[CRepr]
		public struct ISVGPathSegLinetoVerticalRel : IDispatch
		{
			public const new Guid IID = .(0x3051050b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoVerticalRel self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegLinetoVerticalRel self, out float p) get_y;
			}
		}
		[CRepr]
		public struct DispSVGPathSegArcAbs : IDispatch
		{
			public const new Guid IID = .(0x30590013, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegArcRel : IDispatch
		{
			public const new Guid IID = .(0x30590014, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegClosePath : IDispatch
		{
			public const new Guid IID = .(0x30590015, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegMovetoAbs : IDispatch
		{
			public const new Guid IID = .(0x30590024, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegMovetoRel : IDispatch
		{
			public const new Guid IID = .(0x30590025, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegLinetoAbs : IDispatch
		{
			public const new Guid IID = .(0x3059001e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegLinetoRel : IDispatch
		{
			public const new Guid IID = .(0x30590021, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoCubicAbs : IDispatch
		{
			public const new Guid IID = .(0x30590016, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoCubicRel : IDispatch
		{
			public const new Guid IID = .(0x30590017, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoCubicSmoothAbs : IDispatch
		{
			public const new Guid IID = .(0x30590018, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoCubicSmoothRel : IDispatch
		{
			public const new Guid IID = .(0x30590019, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoQuadraticAbs : IDispatch
		{
			public const new Guid IID = .(0x3059001a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoQuadraticRel : IDispatch
		{
			public const new Guid IID = .(0x3059001b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoQuadraticSmoothAbs : IDispatch
		{
			public const new Guid IID = .(0x3059001c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegCurvetoQuadraticSmoothRel : IDispatch
		{
			public const new Guid IID = .(0x3059001d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegLinetoHorizontalAbs : IDispatch
		{
			public const new Guid IID = .(0x3059001f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegLinetoHorizontalRel : IDispatch
		{
			public const new Guid IID = .(0x30590020, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegLinetoVerticalAbs : IDispatch
		{
			public const new Guid IID = .(0x30590022, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPathSegLinetoVerticalRel : IDispatch
		{
			public const new Guid IID = .(0x30590023, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPathSegList : IDispatch
		{
			public const new Guid IID = .(0x30510510, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_numberOfItems(int32 v) mut => VT.put_numberOfItems(ref this, v);
			public HRESULT get_numberOfItems(out int32 p) mut => VT.get_numberOfItems(ref this, out p);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT initialize(ref ISVGPathSeg newItem, out ISVGPathSeg* ppResult) mut => VT.initialize(ref this, ref newItem, out ppResult);
			public HRESULT getItem(int32 index, out ISVGPathSeg* ppResult) mut => VT.getItem(ref this, index, out ppResult);
			public HRESULT insertItemBefore(ref ISVGPathSeg newItem, int32 index, out ISVGPathSeg* ppResult) mut => VT.insertItemBefore(ref this, ref newItem, index, out ppResult);
			public HRESULT replaceItem(ref ISVGPathSeg newItem, int32 index, out ISVGPathSeg* ppResult) mut => VT.replaceItem(ref this, ref newItem, index, out ppResult);
			public HRESULT removeItem(int32 index, out ISVGPathSeg* ppResult) mut => VT.removeItem(ref this, index, out ppResult);
			public HRESULT appendItem(ref ISVGPathSeg newItem, out ISVGPathSeg* ppResult) mut => VT.appendItem(ref this, ref newItem, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, int32 v) put_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, out int32 p) get_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, ref ISVGPathSeg newItem, out ISVGPathSeg* ppResult) initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, int32 index, out ISVGPathSeg* ppResult) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, ref ISVGPathSeg newItem, int32 index, out ISVGPathSeg* ppResult) insertItemBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, ref ISVGPathSeg newItem, int32 index, out ISVGPathSeg* ppResult) replaceItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, int32 index, out ISVGPathSeg* ppResult) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathSegList self, ref ISVGPathSeg newItem, out ISVGPathSeg* ppResult) appendItem;
			}
		}
		[CRepr]
		public struct ISVGPoint : IDispatch
		{
			public const new Guid IID = .(0x305104f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_x(float v) mut => VT.put_x(ref this, v);
			public HRESULT get_x(out float p) mut => VT.get_x(ref this, out p);
			public HRESULT put_y(float v) mut => VT.put_y(ref this, v);
			public HRESULT get_y(out float p) mut => VT.get_y(ref this, out p);
			public HRESULT matrixTransform(ref ISVGMatrix pMatrix, out ISVGPoint* ppResult) mut => VT.matrixTransform(ref this, ref pMatrix, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPoint self, float v) put_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPoint self, out float p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPoint self, float v) put_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPoint self, out float p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPoint self, ref ISVGMatrix pMatrix, out ISVGPoint* ppResult) matrixTransform;
			}
		}
		[CRepr]
		public struct ISVGPointList : IDispatch
		{
			public const new Guid IID = .(0x305104f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_numberOfItems(int32 v) mut => VT.put_numberOfItems(ref this, v);
			public HRESULT get_numberOfItems(out int32 p) mut => VT.get_numberOfItems(ref this, out p);
			public HRESULT clear() mut => VT.clear(ref this);
			public HRESULT initialize(ref ISVGPoint pNewItem, out ISVGPoint* ppResult) mut => VT.initialize(ref this, ref pNewItem, out ppResult);
			public HRESULT getItem(int32 index, out ISVGPoint* ppResult) mut => VT.getItem(ref this, index, out ppResult);
			public HRESULT insertItemBefore(ref ISVGPoint pNewItem, int32 index, out ISVGPoint* ppResult) mut => VT.insertItemBefore(ref this, ref pNewItem, index, out ppResult);
			public HRESULT replaceItem(ref ISVGPoint pNewItem, int32 index, out ISVGPoint* ppResult) mut => VT.replaceItem(ref this, ref pNewItem, index, out ppResult);
			public HRESULT removeItem(int32 index, out ISVGPoint* ppResult) mut => VT.removeItem(ref this, index, out ppResult);
			public HRESULT appendItem(ref ISVGPoint pNewItem, out ISVGPoint* ppResult) mut => VT.appendItem(ref this, ref pNewItem, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, int32 v) put_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, out int32 p) get_numberOfItems;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self) clear;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, ref ISVGPoint pNewItem, out ISVGPoint* ppResult) initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, int32 index, out ISVGPoint* ppResult) getItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, ref ISVGPoint pNewItem, int32 index, out ISVGPoint* ppResult) insertItemBefore;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, ref ISVGPoint pNewItem, int32 index, out ISVGPoint* ppResult) replaceItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, int32 index, out ISVGPoint* ppResult) removeItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPointList self, ref ISVGPoint pNewItem, out ISVGPoint* ppResult) appendItem;
			}
		}
		[CRepr]
		public struct ISVGViewSpec : IDispatch
		{
			public const new Guid IID = .(0x305104e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGTransform : IDispatch
		{
			public const new Guid IID = .(0x305104f7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(int16 v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out int16 p) mut => VT.get_type(ref this, out p);
			public HRESULT putref_matrix(ref ISVGMatrix v) mut => VT.putref_matrix(ref this, ref v);
			public HRESULT get_matrix(out ISVGMatrix* p) mut => VT.get_matrix(ref this, out p);
			public HRESULT put_angle(float v) mut => VT.put_angle(ref this, v);
			public HRESULT get_angle(out float p) mut => VT.get_angle(ref this, out p);
			public HRESULT setMatrix(ref ISVGMatrix matrix) mut => VT.setMatrix(ref this, ref matrix);
			public HRESULT setTranslate(float tx, float ty) mut => VT.setTranslate(ref this, tx, ty);
			public HRESULT setScale(float sx, float sy) mut => VT.setScale(ref this, sx, sy);
			public HRESULT setRotate(float angle, float cx, float cy) mut => VT.setRotate(ref this, angle, cx, cy);
			public HRESULT setSkewX(float angle) mut => VT.setSkewX(ref this, angle);
			public HRESULT setSkewY(float angle) mut => VT.setSkewY(ref this, angle);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, int16 v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, out int16 p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, ref ISVGMatrix v) putref_matrix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, out ISVGMatrix* p) get_matrix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, float v) put_angle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, out float p) get_angle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, ref ISVGMatrix matrix) setMatrix;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, float tx, float ty) setTranslate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, float sx, float sy) setScale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, float angle, float cx, float cy) setRotate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, float angle) setSkewX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTransform self, float angle) setSkewY;
			}
		}
		[CRepr]
		public struct DispSVGSVGElement : IDispatch
		{
			public const new Guid IID = .(0x30590001, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGElementInstance : IDispatch
		{
			public const new Guid IID = .(0x305104ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_correspondingElement(out ISVGElement* p) mut => VT.get_correspondingElement(ref this, out p);
			public HRESULT get_correspondingUseElement(out ISVGUseElement* p) mut => VT.get_correspondingUseElement(ref this, out p);
			public HRESULT get_parentNode(out ISVGElementInstance* p) mut => VT.get_parentNode(ref this, out p);
			public HRESULT get_childNodes(out ISVGElementInstanceList* p) mut => VT.get_childNodes(ref this, out p);
			public HRESULT get_firstChild(out ISVGElementInstance* p) mut => VT.get_firstChild(ref this, out p);
			public HRESULT get_lastChild(out ISVGElementInstance* p) mut => VT.get_lastChild(ref this, out p);
			public HRESULT get_previousSibling(out ISVGElementInstance* p) mut => VT.get_previousSibling(ref this, out p);
			public HRESULT get_nextSibling(out ISVGElementInstance* p) mut => VT.get_nextSibling(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElement* p) get_correspondingElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGUseElement* p) get_correspondingUseElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElementInstance* p) get_parentNode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElementInstanceList* p) get_childNodes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElementInstance* p) get_firstChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElementInstance* p) get_lastChild;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElementInstance* p) get_previousSibling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstance self, out ISVGElementInstance* p) get_nextSibling;
			}
		}
		[CRepr]
		public struct ISVGUseElement : IDispatch
		{
			public const new Guid IID = .(0x305104ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x(ref ISVGAnimatedLength v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLength* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLength v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLength* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_width(ref ISVGAnimatedLength v) mut => VT.putref_width(ref this, ref v);
			public HRESULT get_width(out ISVGAnimatedLength* p) mut => VT.get_width(ref this, out p);
			public HRESULT putref_height(ref ISVGAnimatedLength v) mut => VT.putref_height(ref this, ref v);
			public HRESULT get_height(out ISVGAnimatedLength* p) mut => VT.get_height(ref this, out p);
			public HRESULT putref_instanceRoot(ref ISVGElementInstance v) mut => VT.putref_instanceRoot(ref this, ref v);
			public HRESULT get_instanceRoot(out ISVGElementInstance* p) mut => VT.get_instanceRoot(ref this, out p);
			public HRESULT putref_animatedInstanceRoot(ref ISVGElementInstance v) mut => VT.putref_animatedInstanceRoot(ref this, ref v);
			public HRESULT get_animatedInstanceRoot(out ISVGElementInstance* p) mut => VT.get_animatedInstanceRoot(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, ref ISVGAnimatedLength v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, out ISVGAnimatedLength* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, ref ISVGAnimatedLength v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, out ISVGAnimatedLength* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, ref ISVGAnimatedLength v) putref_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, out ISVGAnimatedLength* p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, ref ISVGAnimatedLength v) putref_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, out ISVGAnimatedLength* p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, ref ISVGElementInstance v) putref_instanceRoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, out ISVGElementInstance* p) get_instanceRoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, ref ISVGElementInstance v) putref_animatedInstanceRoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGUseElement self, out ISVGElementInstance* p) get_animatedInstanceRoot;
			}
		}
		[CRepr]
		public struct DispSVGUseElement : IDispatch
		{
			public const new Guid IID = .(0x30590010, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLStyleSheetRulesAppliedCollection : IDispatch
		{
			public const new Guid IID = .(0x305104c0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT item(int32 index, out IHTMLStyleSheetRule* ppHTMLStyleSheetRule) mut => VT.item(ref this, index, out ppHTMLStyleSheetRule);
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT propertyAppliedBy(BSTR name, out IHTMLStyleSheetRule* ppRule) mut => VT.propertyAppliedBy(ref this, name, out ppRule);
			public HRESULT propertyAppliedTrace(BSTR name, int32 index, out IHTMLStyleSheetRule* ppRule) mut => VT.propertyAppliedTrace(ref this, name, index, out ppRule);
			public HRESULT propertyAppliedTraceLength(BSTR name, out int32 pLength) mut => VT.propertyAppliedTraceLength(ref this, name, out pLength);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesAppliedCollection self, int32 index, out IHTMLStyleSheetRule* ppHTMLStyleSheetRule) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesAppliedCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesAppliedCollection self, BSTR name, out IHTMLStyleSheetRule* ppRule) propertyAppliedBy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesAppliedCollection self, BSTR name, int32 index, out IHTMLStyleSheetRule* ppRule) propertyAppliedTrace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLStyleSheetRulesAppliedCollection self, BSTR name, out int32 pLength) propertyAppliedTraceLength;
			}
		}
		[CRepr]
		public struct IRulesApplied : IDispatch
		{
			public const new Guid IID = .(0x305104bf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_element(out IHTMLElement* p) mut => VT.get_element(ref this, out p);
			public HRESULT get_inlineStyles(out IHTMLStyle* p) mut => VT.get_inlineStyles(ref this, out p);
			public HRESULT get_appliedRules(out IHTMLStyleSheetRulesAppliedCollection* p) mut => VT.get_appliedRules(ref this, out p);
			public HRESULT propertyIsInline(BSTR name, out int16 p) mut => VT.propertyIsInline(ref this, name, out p);
			public HRESULT propertyIsInheritable(BSTR name, out int16 p) mut => VT.propertyIsInheritable(ref this, name, out p);
			public HRESULT hasInheritableProperty(out int16 p) mut => VT.hasInheritableProperty(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesApplied self, out IHTMLElement* p) get_element;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesApplied self, out IHTMLStyle* p) get_inlineStyles;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesApplied self, out IHTMLStyleSheetRulesAppliedCollection* p) get_appliedRules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesApplied self, BSTR name, out int16 p) propertyIsInline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesApplied self, BSTR name, out int16 p) propertyIsInheritable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRulesApplied self, out int16 p) hasInheritableProperty;
			}
		}
		[CRepr]
		public struct DispHTMLStyleSheetRulesAppliedCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f5a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispRulesApplied : IDispatch
		{
			public const new Guid IID = .(0x3050f5a5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispRulesAppliedCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f5a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLW3CComputedStyle : IDispatch
		{
			public const new Guid IID = .(0x30590070, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGAnimatedPoints : IDispatch
		{
			public const new Guid IID = .(0x30510517, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_points(ref ISVGPointList v) mut => VT.putref_points(ref this, ref v);
			public HRESULT get_points(out ISVGPointList* p) mut => VT.get_points(ref this, out p);
			public HRESULT putref_animatedPoints(ref ISVGPointList v) mut => VT.putref_animatedPoints(ref this, ref v);
			public HRESULT get_animatedPoints(out ISVGPointList* p) mut => VT.get_animatedPoints(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPoints self, ref ISVGPointList v) putref_points;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPoints self, out ISVGPointList* p) get_points;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPoints self, ref ISVGPointList v) putref_animatedPoints;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPoints self, out ISVGPointList* p) get_animatedPoints;
			}
		}
		[CRepr]
		public struct ISVGCircleElement : IDispatch
		{
			public const new Guid IID = .(0x30510514, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_cx(ref ISVGAnimatedLength v) mut => VT.putref_cx(ref this, ref v);
			public HRESULT get_cx(out ISVGAnimatedLength* p) mut => VT.get_cx(ref this, out p);
			public HRESULT putref_cy(ref ISVGAnimatedLength v) mut => VT.putref_cy(ref this, ref v);
			public HRESULT get_cy(out ISVGAnimatedLength* p) mut => VT.get_cy(ref this, out p);
			public HRESULT putref_r(ref ISVGAnimatedLength v) mut => VT.putref_r(ref this, ref v);
			public HRESULT get_r(out ISVGAnimatedLength* p) mut => VT.get_r(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGCircleElement self, ref ISVGAnimatedLength v) putref_cx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGCircleElement self, out ISVGAnimatedLength* p) get_cx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGCircleElement self, ref ISVGAnimatedLength v) putref_cy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGCircleElement self, out ISVGAnimatedLength* p) get_cy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGCircleElement self, ref ISVGAnimatedLength v) putref_r;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGCircleElement self, out ISVGAnimatedLength* p) get_r;
			}
		}
		[CRepr]
		public struct ISVGEllipseElement : IDispatch
		{
			public const new Guid IID = .(0x30510515, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_cx(ref ISVGAnimatedLength v) mut => VT.putref_cx(ref this, ref v);
			public HRESULT get_cx(out ISVGAnimatedLength* p) mut => VT.get_cx(ref this, out p);
			public HRESULT putref_cy(ref ISVGAnimatedLength v) mut => VT.putref_cy(ref this, ref v);
			public HRESULT get_cy(out ISVGAnimatedLength* p) mut => VT.get_cy(ref this, out p);
			public HRESULT putref_rx(ref ISVGAnimatedLength v) mut => VT.putref_rx(ref this, ref v);
			public HRESULT get_rx(out ISVGAnimatedLength* p) mut => VT.get_rx(ref this, out p);
			public HRESULT putref_ry(ref ISVGAnimatedLength v) mut => VT.putref_ry(ref this, ref v);
			public HRESULT get_ry(out ISVGAnimatedLength* p) mut => VT.get_ry(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, ref ISVGAnimatedLength v) putref_cx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, out ISVGAnimatedLength* p) get_cx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, ref ISVGAnimatedLength v) putref_cy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, out ISVGAnimatedLength* p) get_cy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, ref ISVGAnimatedLength v) putref_rx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, out ISVGAnimatedLength* p) get_rx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, ref ISVGAnimatedLength v) putref_ry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGEllipseElement self, out ISVGAnimatedLength* p) get_ry;
			}
		}
		[CRepr]
		public struct ISVGLineElement : IDispatch
		{
			public const new Guid IID = .(0x30510516, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x1(ref ISVGAnimatedLength v) mut => VT.putref_x1(ref this, ref v);
			public HRESULT get_x1(out ISVGAnimatedLength* p) mut => VT.get_x1(ref this, out p);
			public HRESULT putref_y1(ref ISVGAnimatedLength v) mut => VT.putref_y1(ref this, ref v);
			public HRESULT get_y1(out ISVGAnimatedLength* p) mut => VT.get_y1(ref this, out p);
			public HRESULT putref_x2(ref ISVGAnimatedLength v) mut => VT.putref_x2(ref this, ref v);
			public HRESULT get_x2(out ISVGAnimatedLength* p) mut => VT.get_x2(ref this, out p);
			public HRESULT putref_y2(ref ISVGAnimatedLength v) mut => VT.putref_y2(ref this, ref v);
			public HRESULT get_y2(out ISVGAnimatedLength* p) mut => VT.get_y2(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, ref ISVGAnimatedLength v) putref_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, out ISVGAnimatedLength* p) get_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, ref ISVGAnimatedLength v) putref_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, out ISVGAnimatedLength* p) get_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, ref ISVGAnimatedLength v) putref_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, out ISVGAnimatedLength* p) get_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, ref ISVGAnimatedLength v) putref_y2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLineElement self, out ISVGAnimatedLength* p) get_y2;
			}
		}
		[CRepr]
		public struct ISVGRectElement : IDispatch
		{
			public const new Guid IID = .(0x30510513, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x(ref ISVGAnimatedLength v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLength* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLength v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLength* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_width(ref ISVGAnimatedLength v) mut => VT.putref_width(ref this, ref v);
			public HRESULT get_width(out ISVGAnimatedLength* p) mut => VT.get_width(ref this, out p);
			public HRESULT putref_height(ref ISVGAnimatedLength v) mut => VT.putref_height(ref this, ref v);
			public HRESULT get_height(out ISVGAnimatedLength* p) mut => VT.get_height(ref this, out p);
			public HRESULT putref_rx(ref ISVGAnimatedLength v) mut => VT.putref_rx(ref this, ref v);
			public HRESULT get_rx(out ISVGAnimatedLength* p) mut => VT.get_rx(ref this, out p);
			public HRESULT putref_ry(ref ISVGAnimatedLength v) mut => VT.putref_ry(ref this, ref v);
			public HRESULT get_ry(out ISVGAnimatedLength* p) mut => VT.get_ry(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, ref ISVGAnimatedLength v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, out ISVGAnimatedLength* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, ref ISVGAnimatedLength v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, out ISVGAnimatedLength* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, ref ISVGAnimatedLength v) putref_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, out ISVGAnimatedLength* p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, ref ISVGAnimatedLength v) putref_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, out ISVGAnimatedLength* p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, ref ISVGAnimatedLength v) putref_rx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, out ISVGAnimatedLength* p) get_rx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, ref ISVGAnimatedLength v) putref_ry;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRectElement self, out ISVGAnimatedLength* p) get_ry;
			}
		}
		[CRepr]
		public struct ISVGPolygonElement : IDispatch
		{
			public const new Guid IID = .(0x30510519, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPolylineElement : IDispatch
		{
			public const new Guid IID = .(0x30510518, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGCircleElement : IDispatch
		{
			public const new Guid IID = .(0x3059000a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGEllipseElement : IDispatch
		{
			public const new Guid IID = .(0x3059000b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGLineElement : IDispatch
		{
			public const new Guid IID = .(0x3059000c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGRectElement : IDispatch
		{
			public const new Guid IID = .(0x30590009, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPolygonElement : IDispatch
		{
			public const new Guid IID = .(0x3059000d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGPolylineElement : IDispatch
		{
			public const new Guid IID = .(0x3059000e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGGElement : IDispatch
		{
			public const new Guid IID = .(0x305104e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGGElement : IDispatch
		{
			public const new Guid IID = .(0x30590002, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGSymbolElement : IDispatch
		{
			public const new Guid IID = .(0x305104ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGSymbolElement : IDispatch
		{
			public const new Guid IID = .(0x30590004, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGDefsElement : IDispatch
		{
			public const new Guid IID = .(0x305104e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGDefsElement : IDispatch
		{
			public const new Guid IID = .(0x30590003, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGAnimatedPathData : IDispatch
		{
			public const new Guid IID = .(0x30510511, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_pathSegList(ref ISVGPathSegList v) mut => VT.putref_pathSegList(ref this, ref v);
			public HRESULT get_pathSegList(out ISVGPathSegList* p) mut => VT.get_pathSegList(ref this, out p);
			public HRESULT putref_normalizedPathSegList(ref ISVGPathSegList v) mut => VT.putref_normalizedPathSegList(ref this, ref v);
			public HRESULT get_normalizedPathSegList(out ISVGPathSegList* p) mut => VT.get_normalizedPathSegList(ref this, out p);
			public HRESULT putref_animatedPathSegList(ref ISVGPathSegList v) mut => VT.putref_animatedPathSegList(ref this, ref v);
			public HRESULT get_animatedPathSegList(out ISVGPathSegList* p) mut => VT.get_animatedPathSegList(ref this, out p);
			public HRESULT putref_animatedNormalizedPathSegList(ref ISVGPathSegList v) mut => VT.putref_animatedNormalizedPathSegList(ref this, ref v);
			public HRESULT get_animatedNormalizedPathSegList(out ISVGPathSegList* p) mut => VT.get_animatedNormalizedPathSegList(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, ref ISVGPathSegList v) putref_pathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, out ISVGPathSegList* p) get_pathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, ref ISVGPathSegList v) putref_normalizedPathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, out ISVGPathSegList* p) get_normalizedPathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, ref ISVGPathSegList v) putref_animatedPathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, out ISVGPathSegList* p) get_animatedPathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, ref ISVGPathSegList v) putref_animatedNormalizedPathSegList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAnimatedPathData self, out ISVGPathSegList* p) get_animatedNormalizedPathSegList;
			}
		}
		[CRepr]
		public struct ISVGPathElement : IDispatch
		{
			public const new Guid IID = .(0x30510512, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_pathLength(ref ISVGAnimatedNumber v) mut => VT.putref_pathLength(ref this, ref v);
			public HRESULT get_pathLength(out ISVGAnimatedNumber* p) mut => VT.get_pathLength(ref this, out p);
			public HRESULT getTotalLength(out float pfltResult) mut => VT.getTotalLength(ref this, out pfltResult);
			public HRESULT getPointAtLength(float fltdistance, out ISVGPoint* ppPointResult) mut => VT.getPointAtLength(ref this, fltdistance, out ppPointResult);
			public HRESULT getPathSegAtLength(float fltdistance, out int32 plResult) mut => VT.getPathSegAtLength(ref this, fltdistance, out plResult);
			public HRESULT createSVGPathSegClosePath(out ISVGPathSegClosePath* ppResult) mut => VT.createSVGPathSegClosePath(ref this, out ppResult);
			public HRESULT createSVGPathSegMovetoAbs(float x, float y, out ISVGPathSegMovetoAbs* ppResult) mut => VT.createSVGPathSegMovetoAbs(ref this, x, y, out ppResult);
			public HRESULT createSVGPathSegMovetoRel(float x, float y, out ISVGPathSegMovetoRel* ppResult) mut => VT.createSVGPathSegMovetoRel(ref this, x, y, out ppResult);
			public HRESULT createSVGPathSegLinetoAbs(float x, float y, out ISVGPathSegLinetoAbs* ppResult) mut => VT.createSVGPathSegLinetoAbs(ref this, x, y, out ppResult);
			public HRESULT createSVGPathSegLinetoRel(float x, float y, out ISVGPathSegLinetoRel* ppResult) mut => VT.createSVGPathSegLinetoRel(ref this, x, y, out ppResult);
			public HRESULT createSVGPathSegCurvetoCubicAbs(float x, float y, float x1, float y1, float x2, float y2, out ISVGPathSegCurvetoCubicAbs* ppResult) mut => VT.createSVGPathSegCurvetoCubicAbs(ref this, x, y, x1, y1, x2, y2, out ppResult);
			public HRESULT createSVGPathSegCurvetoCubicRel(float x, float y, float x1, float y1, float x2, float y2, out ISVGPathSegCurvetoCubicRel* ppResult) mut => VT.createSVGPathSegCurvetoCubicRel(ref this, x, y, x1, y1, x2, y2, out ppResult);
			public HRESULT createSVGPathSegCurvetoQuadraticAbs(float x, float y, float x1, float y1, out ISVGPathSegCurvetoQuadraticAbs* ppResult) mut => VT.createSVGPathSegCurvetoQuadraticAbs(ref this, x, y, x1, y1, out ppResult);
			public HRESULT createSVGPathSegCurvetoQuadraticRel(float x, float y, float x1, float y1, out ISVGPathSegCurvetoQuadraticRel* ppResult) mut => VT.createSVGPathSegCurvetoQuadraticRel(ref this, x, y, x1, y1, out ppResult);
			public HRESULT createSVGPathSegArcAbs(float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, out ISVGPathSegArcAbs* ppResult) mut => VT.createSVGPathSegArcAbs(ref this, x, y, r1, r2, angle, largeArcFlag, sweepFlag, out ppResult);
			public HRESULT createSVGPathSegArcRel(float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, out ISVGPathSegArcRel* ppResult) mut => VT.createSVGPathSegArcRel(ref this, x, y, r1, r2, angle, largeArcFlag, sweepFlag, out ppResult);
			public HRESULT createSVGPathSegLinetoHorizontalAbs(float x, out ISVGPathSegLinetoHorizontalAbs* ppResult) mut => VT.createSVGPathSegLinetoHorizontalAbs(ref this, x, out ppResult);
			public HRESULT createSVGPathSegLinetoHorizontalRel(float x, out ISVGPathSegLinetoHorizontalRel* ppResult) mut => VT.createSVGPathSegLinetoHorizontalRel(ref this, x, out ppResult);
			public HRESULT createSVGPathSegLinetoVerticalAbs(float y, out ISVGPathSegLinetoVerticalAbs* ppResult) mut => VT.createSVGPathSegLinetoVerticalAbs(ref this, y, out ppResult);
			public HRESULT createSVGPathSegLinetoVerticalRel(float y, out ISVGPathSegLinetoVerticalRel* ppResult) mut => VT.createSVGPathSegLinetoVerticalRel(ref this, y, out ppResult);
			public HRESULT createSVGPathSegCurvetoCubicSmoothAbs(float x, float y, float x2, float y2, out ISVGPathSegCurvetoCubicSmoothAbs* ppResult) mut => VT.createSVGPathSegCurvetoCubicSmoothAbs(ref this, x, y, x2, y2, out ppResult);
			public HRESULT createSVGPathSegCurvetoCubicSmoothRel(float x, float y, float x2, float y2, out ISVGPathSegCurvetoCubicSmoothRel* ppResult) mut => VT.createSVGPathSegCurvetoCubicSmoothRel(ref this, x, y, x2, y2, out ppResult);
			public HRESULT createSVGPathSegCurvetoQuadraticSmoothAbs(float x, float y, out ISVGPathSegCurvetoQuadraticSmoothAbs* ppResult) mut => VT.createSVGPathSegCurvetoQuadraticSmoothAbs(ref this, x, y, out ppResult);
			public HRESULT createSVGPathSegCurvetoQuadraticSmoothRel(float x, float y, out ISVGPathSegCurvetoQuadraticSmoothRel* ppResult) mut => VT.createSVGPathSegCurvetoQuadraticSmoothRel(ref this, x, y, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, ref ISVGAnimatedNumber v) putref_pathLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, out ISVGAnimatedNumber* p) get_pathLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, out float pfltResult) getTotalLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float fltdistance, out ISVGPoint* ppPointResult) getPointAtLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float fltdistance, out int32 plResult) getPathSegAtLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, out ISVGPathSegClosePath* ppResult) createSVGPathSegClosePath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, out ISVGPathSegMovetoAbs* ppResult) createSVGPathSegMovetoAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, out ISVGPathSegMovetoRel* ppResult) createSVGPathSegMovetoRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, out ISVGPathSegLinetoAbs* ppResult) createSVGPathSegLinetoAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, out ISVGPathSegLinetoRel* ppResult) createSVGPathSegLinetoRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float x1, float y1, float x2, float y2, out ISVGPathSegCurvetoCubicAbs* ppResult) createSVGPathSegCurvetoCubicAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float x1, float y1, float x2, float y2, out ISVGPathSegCurvetoCubicRel* ppResult) createSVGPathSegCurvetoCubicRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float x1, float y1, out ISVGPathSegCurvetoQuadraticAbs* ppResult) createSVGPathSegCurvetoQuadraticAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float x1, float y1, out ISVGPathSegCurvetoQuadraticRel* ppResult) createSVGPathSegCurvetoQuadraticRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, out ISVGPathSegArcAbs* ppResult) createSVGPathSegArcAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float r1, float r2, float angle, int16 largeArcFlag, int16 sweepFlag, out ISVGPathSegArcRel* ppResult) createSVGPathSegArcRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, out ISVGPathSegLinetoHorizontalAbs* ppResult) createSVGPathSegLinetoHorizontalAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, out ISVGPathSegLinetoHorizontalRel* ppResult) createSVGPathSegLinetoHorizontalRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float y, out ISVGPathSegLinetoVerticalAbs* ppResult) createSVGPathSegLinetoVerticalAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float y, out ISVGPathSegLinetoVerticalRel* ppResult) createSVGPathSegLinetoVerticalRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float x2, float y2, out ISVGPathSegCurvetoCubicSmoothAbs* ppResult) createSVGPathSegCurvetoCubicSmoothAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, float x2, float y2, out ISVGPathSegCurvetoCubicSmoothRel* ppResult) createSVGPathSegCurvetoCubicSmoothRel;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, out ISVGPathSegCurvetoQuadraticSmoothAbs* ppResult) createSVGPathSegCurvetoQuadraticSmoothAbs;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPathElement self, float x, float y, out ISVGPathSegCurvetoQuadraticSmoothRel* ppResult) createSVGPathSegCurvetoQuadraticSmoothRel;
			}
		}
		[CRepr]
		public struct DispSVGPathElement : IDispatch
		{
			public const new Guid IID = .(0x30590011, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGPreserveAspectRatio : IDispatch
		{
			public const new Guid IID = .(0x305104fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_align(int16 v) mut => VT.put_align(ref this, v);
			public HRESULT get_align(out int16 p) mut => VT.get_align(ref this, out p);
			public HRESULT put_meetOrSlice(int16 v) mut => VT.put_meetOrSlice(ref this, v);
			public HRESULT get_meetOrSlice(out int16 p) mut => VT.get_meetOrSlice(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPreserveAspectRatio self, int16 v) put_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPreserveAspectRatio self, out int16 p) get_align;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPreserveAspectRatio self, int16 v) put_meetOrSlice;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGPreserveAspectRatio self, out int16 p) get_meetOrSlice;
			}
		}
		[CRepr]
		public struct ISVGTextElement : IDispatch
		{
			public const new Guid IID = .(0x3051051c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGTextElement : IDispatch
		{
			public const new Guid IID = .(0x30590037, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGImageElement : IDispatch
		{
			public const new Guid IID = .(0x305104f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x(ref ISVGAnimatedLength v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLength* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLength v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLength* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_width(ref ISVGAnimatedLength v) mut => VT.putref_width(ref this, ref v);
			public HRESULT get_width(out ISVGAnimatedLength* p) mut => VT.get_width(ref this, out p);
			public HRESULT putref_height(ref ISVGAnimatedLength v) mut => VT.putref_height(ref this, ref v);
			public HRESULT get_height(out ISVGAnimatedLength* p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, ref ISVGAnimatedLength v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, out ISVGAnimatedLength* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, ref ISVGAnimatedLength v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, out ISVGAnimatedLength* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, ref ISVGAnimatedLength v) putref_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, out ISVGAnimatedLength* p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, ref ISVGAnimatedLength v) putref_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGImageElement self, out ISVGAnimatedLength* p) get_height;
			}
		}
		[CRepr]
		public struct DispSVGImageElement : IDispatch
		{
			public const new Guid IID = .(0x30590027, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGStopElement : IDispatch
		{
			public const new Guid IID = .(0x3051052b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_offset(ref ISVGAnimatedNumber v) mut => VT.putref_offset(ref this, ref v);
			public HRESULT get_offset(out ISVGAnimatedNumber* p) mut => VT.get_offset(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStopElement self, ref ISVGAnimatedNumber v) putref_offset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStopElement self, out ISVGAnimatedNumber* p) get_offset;
			}
		}
		[CRepr]
		public struct DispSVGStopElement : IDispatch
		{
			public const new Guid IID = .(0x3059002d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGGradientElement : IDispatch
		{
			public const new Guid IID = .(0x30510528, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_gradientUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_gradientUnits(ref this, ref v);
			public HRESULT get_gradientUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_gradientUnits(ref this, out p);
			public HRESULT putref_gradientTransform(ref ISVGAnimatedTransformList v) mut => VT.putref_gradientTransform(ref this, ref v);
			public HRESULT get_gradientTransform(out ISVGAnimatedTransformList* p) mut => VT.get_gradientTransform(ref this, out p);
			public HRESULT putref_spreadMethod(ref ISVGAnimatedEnumeration v) mut => VT.putref_spreadMethod(ref this, ref v);
			public HRESULT get_spreadMethod(out ISVGAnimatedEnumeration* p) mut => VT.get_spreadMethod(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGGradientElement self, ref ISVGAnimatedEnumeration v) putref_gradientUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGGradientElement self, out ISVGAnimatedEnumeration* p) get_gradientUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGGradientElement self, ref ISVGAnimatedTransformList v) putref_gradientTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGGradientElement self, out ISVGAnimatedTransformList* p) get_gradientTransform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGGradientElement self, ref ISVGAnimatedEnumeration v) putref_spreadMethod;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGGradientElement self, out ISVGAnimatedEnumeration* p) get_spreadMethod;
			}
		}
		[CRepr]
		public struct DispSVGGradientElement : IDispatch
		{
			public const new Guid IID = .(0x3059002e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGLinearGradientElement : IDispatch
		{
			public const new Guid IID = .(0x30510529, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x1(ref ISVGAnimatedLength v) mut => VT.putref_x1(ref this, ref v);
			public HRESULT get_x1(out ISVGAnimatedLength* p) mut => VT.get_x1(ref this, out p);
			public HRESULT putref_y1(ref ISVGAnimatedLength v) mut => VT.putref_y1(ref this, ref v);
			public HRESULT get_y1(out ISVGAnimatedLength* p) mut => VT.get_y1(ref this, out p);
			public HRESULT putref_x2(ref ISVGAnimatedLength v) mut => VT.putref_x2(ref this, ref v);
			public HRESULT get_x2(out ISVGAnimatedLength* p) mut => VT.get_x2(ref this, out p);
			public HRESULT putref_y2(ref ISVGAnimatedLength v) mut => VT.putref_y2(ref this, ref v);
			public HRESULT get_y2(out ISVGAnimatedLength* p) mut => VT.get_y2(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, ref ISVGAnimatedLength v) putref_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, out ISVGAnimatedLength* p) get_x1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, ref ISVGAnimatedLength v) putref_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, out ISVGAnimatedLength* p) get_y1;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, ref ISVGAnimatedLength v) putref_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, out ISVGAnimatedLength* p) get_x2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, ref ISVGAnimatedLength v) putref_y2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGLinearGradientElement self, out ISVGAnimatedLength* p) get_y2;
			}
		}
		[CRepr]
		public struct DispSVGLinearGradientElement : IDispatch
		{
			public const new Guid IID = .(0x3059002a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGRadialGradientElement : IDispatch
		{
			public const new Guid IID = .(0x3051052a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_cx(ref ISVGAnimatedLength v) mut => VT.putref_cx(ref this, ref v);
			public HRESULT get_cx(out ISVGAnimatedLength* p) mut => VT.get_cx(ref this, out p);
			public HRESULT putref_cy(ref ISVGAnimatedLength v) mut => VT.putref_cy(ref this, ref v);
			public HRESULT get_cy(out ISVGAnimatedLength* p) mut => VT.get_cy(ref this, out p);
			public HRESULT putref_r(ref ISVGAnimatedLength v) mut => VT.putref_r(ref this, ref v);
			public HRESULT get_r(out ISVGAnimatedLength* p) mut => VT.get_r(ref this, out p);
			public HRESULT putref_fx(ref ISVGAnimatedLength v) mut => VT.putref_fx(ref this, ref v);
			public HRESULT get_fx(out ISVGAnimatedLength* p) mut => VT.get_fx(ref this, out p);
			public HRESULT putref_fy(ref ISVGAnimatedLength v) mut => VT.putref_fy(ref this, ref v);
			public HRESULT get_fy(out ISVGAnimatedLength* p) mut => VT.get_fy(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, ref ISVGAnimatedLength v) putref_cx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, out ISVGAnimatedLength* p) get_cx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, ref ISVGAnimatedLength v) putref_cy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, out ISVGAnimatedLength* p) get_cy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, ref ISVGAnimatedLength v) putref_r;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, out ISVGAnimatedLength* p) get_r;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, ref ISVGAnimatedLength v) putref_fx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, out ISVGAnimatedLength* p) get_fx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, ref ISVGAnimatedLength v) putref_fy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGRadialGradientElement self, out ISVGAnimatedLength* p) get_fy;
			}
		}
		[CRepr]
		public struct DispSVGRadialGradientElement : IDispatch
		{
			public const new Guid IID = .(0x3059002b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGMaskElement : IDispatch
		{
			public const new Guid IID = .(0x3051052e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_maskUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_maskUnits(ref this, ref v);
			public HRESULT get_maskUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_maskUnits(ref this, out p);
			public HRESULT putref_maskContentUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_maskContentUnits(ref this, ref v);
			public HRESULT get_maskContentUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_maskContentUnits(ref this, out p);
			public HRESULT putref_x(ref ISVGAnimatedLength v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLength* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLength v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLength* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_width(ref ISVGAnimatedLength v) mut => VT.putref_width(ref this, ref v);
			public HRESULT get_width(out ISVGAnimatedLength* p) mut => VT.get_width(ref this, out p);
			public HRESULT putref_height(ref ISVGAnimatedLength v) mut => VT.putref_height(ref this, ref v);
			public HRESULT get_height(out ISVGAnimatedLength* p) mut => VT.get_height(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, ref ISVGAnimatedEnumeration v) putref_maskUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, out ISVGAnimatedEnumeration* p) get_maskUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, ref ISVGAnimatedEnumeration v) putref_maskContentUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, out ISVGAnimatedEnumeration* p) get_maskContentUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, ref ISVGAnimatedLength v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, out ISVGAnimatedLength* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, ref ISVGAnimatedLength v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, out ISVGAnimatedLength* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, ref ISVGAnimatedLength v) putref_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, out ISVGAnimatedLength* p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, ref ISVGAnimatedLength v) putref_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMaskElement self, out ISVGAnimatedLength* p) get_height;
			}
		}
		[CRepr]
		public struct DispSVGMaskElement : IDispatch
		{
			public const new Guid IID = .(0x3059003c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGMarkerElement : IDispatch
		{
			public const new Guid IID = .(0x30510525, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_refX(ref ISVGAnimatedLength v) mut => VT.putref_refX(ref this, ref v);
			public HRESULT get_refX(out ISVGAnimatedLength* p) mut => VT.get_refX(ref this, out p);
			public HRESULT putref_refY(ref ISVGAnimatedLength v) mut => VT.putref_refY(ref this, ref v);
			public HRESULT get_refY(out ISVGAnimatedLength* p) mut => VT.get_refY(ref this, out p);
			public HRESULT putref_markerUnits(ref ISVGAnimatedEnumeration v) mut => VT.putref_markerUnits(ref this, ref v);
			public HRESULT get_markerUnits(out ISVGAnimatedEnumeration* p) mut => VT.get_markerUnits(ref this, out p);
			public HRESULT putref_markerWidth(ref ISVGAnimatedLength v) mut => VT.putref_markerWidth(ref this, ref v);
			public HRESULT get_markerWidth(out ISVGAnimatedLength* p) mut => VT.get_markerWidth(ref this, out p);
			public HRESULT putref_markerHeight(ref ISVGAnimatedLength v) mut => VT.putref_markerHeight(ref this, ref v);
			public HRESULT get_markerHeight(out ISVGAnimatedLength* p) mut => VT.get_markerHeight(ref this, out p);
			public HRESULT putref_orientType(ref ISVGAnimatedEnumeration v) mut => VT.putref_orientType(ref this, ref v);
			public HRESULT get_orientType(out ISVGAnimatedEnumeration* p) mut => VT.get_orientType(ref this, out p);
			public HRESULT putref_orientAngle(ref ISVGAnimatedAngle v) mut => VT.putref_orientAngle(ref this, ref v);
			public HRESULT get_orientAngle(out ISVGAnimatedAngle* p) mut => VT.get_orientAngle(ref this, out p);
			public HRESULT setOrientToAuto() mut => VT.setOrientToAuto(ref this);
			public HRESULT setOrientToAngle(ref ISVGAngle pSVGAngle) mut => VT.setOrientToAngle(ref this, ref pSVGAngle);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedLength v) putref_refX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedLength* p) get_refX;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedLength v) putref_refY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedLength* p) get_refY;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedEnumeration v) putref_markerUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedEnumeration* p) get_markerUnits;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedLength v) putref_markerWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedLength* p) get_markerWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedLength v) putref_markerHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedLength* p) get_markerHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedEnumeration v) putref_orientType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedEnumeration* p) get_orientType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAnimatedAngle v) putref_orientAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, out ISVGAnimatedAngle* p) get_orientAngle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self) setOrientToAuto;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGMarkerElement self, ref ISVGAngle pSVGAngle) setOrientToAngle;
			}
		}
		[CRepr]
		public struct DispSVGMarkerElement : IDispatch
		{
			public const new Guid IID = .(0x30590036, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGZoomEvent : IDispatch
		{
			public const new Guid IID = .(0x3051054e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_zoomRectScreen(out ISVGRect* p) mut => VT.get_zoomRectScreen(ref this, out p);
			public HRESULT get_previousScale(out float p) mut => VT.get_previousScale(ref this, out p);
			public HRESULT get_previousTranslate(out ISVGPoint* p) mut => VT.get_previousTranslate(ref this, out p);
			public HRESULT get_newScale(out float p) mut => VT.get_newScale(ref this, out p);
			public HRESULT get_newTranslate(out ISVGPoint* p) mut => VT.get_newTranslate(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGZoomEvent self, out ISVGRect* p) get_zoomRectScreen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGZoomEvent self, out float p) get_previousScale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGZoomEvent self, out ISVGPoint* p) get_previousTranslate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGZoomEvent self, out float p) get_newScale;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGZoomEvent self, out ISVGPoint* p) get_newTranslate;
			}
		}
		[CRepr]
		public struct DispSVGZoomEvent : IDispatch
		{
			public const new Guid IID = .(0x30590031, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGAElement : IDispatch
		{
			public const new Guid IID = .(0x3051054b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_target(ref ISVGAnimatedString v) mut => VT.putref_target(ref this, ref v);
			public HRESULT get_target(out ISVGAnimatedString* p) mut => VT.get_target(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAElement self, ref ISVGAnimatedString v) putref_target;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGAElement self, out ISVGAnimatedString* p) get_target;
			}
		}
		[CRepr]
		public struct DispSVGAElement : IDispatch
		{
			public const new Guid IID = .(0x30590033, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGViewElement : IDispatch
		{
			public const new Guid IID = .(0x3051054c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_viewTarget(ref ISVGStringList v) mut => VT.putref_viewTarget(ref this, ref v);
			public HRESULT get_viewTarget(out ISVGStringList* p) mut => VT.get_viewTarget(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGViewElement self, ref ISVGStringList v) putref_viewTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGViewElement self, out ISVGStringList* p) get_viewTarget;
			}
		}
		[CRepr]
		public struct DispSVGViewElement : IDispatch
		{
			public const new Guid IID = .(0x30590034, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLMediaError : IDispatch
		{
			public const new Guid IID = .(0x30510704, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_code(out int16 p) mut => VT.get_code(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaError self, out int16 p) get_code;
			}
		}
		[CRepr]
		public struct IHTMLTimeRanges : IDispatch
		{
			public const new Guid IID = .(0x30510705, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT start(int32 index, out float startTime) mut => VT.start(ref this, index, out startTime);
			public HRESULT end(int32 index, out float endTime) mut => VT.end(ref this, index, out endTime);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTimeRanges self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTimeRanges self, int32 index, out float startTime) start;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTimeRanges self, int32 index, out float endTime) end;
			}
		}
		[CRepr]
		public struct IHTMLTimeRanges2 : IDispatch
		{
			public const new Guid IID = .(0x3051080b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT startDouble(int32 index, out double startTime) mut => VT.startDouble(ref this, index, out startTime);
			public HRESULT endDouble(int32 index, out double endTime) mut => VT.endDouble(ref this, index, out endTime);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTimeRanges2 self, int32 index, out double startTime) startDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLTimeRanges2 self, int32 index, out double endTime) endDouble;
			}
		}
		[CRepr]
		public struct IHTMLMediaElement : IDispatch
		{
			public const new Guid IID = .(0x30510706, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_error(out IHTMLMediaError* p) mut => VT.get_error(ref this, out p);
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT get_currentSrc(out BSTR p) mut => VT.get_currentSrc(ref this, out p);
			public HRESULT get_networkState(out uint16 p) mut => VT.get_networkState(ref this, out p);
			public HRESULT put_preload(BSTR v) mut => VT.put_preload(ref this, v);
			public HRESULT get_preload(out BSTR p) mut => VT.get_preload(ref this, out p);
			public HRESULT get_buffered(out IHTMLTimeRanges* p) mut => VT.get_buffered(ref this, out p);
			public HRESULT load() mut => VT.load(ref this);
			public HRESULT canPlayType(BSTR type, out BSTR canPlay) mut => VT.canPlayType(ref this, type, out canPlay);
			public HRESULT get_seeking(out int16 p) mut => VT.get_seeking(ref this, out p);
			public HRESULT put_currentTime(float v) mut => VT.put_currentTime(ref this, v);
			public HRESULT get_currentTime(out float p) mut => VT.get_currentTime(ref this, out p);
			public HRESULT get_initialTime(out float p) mut => VT.get_initialTime(ref this, out p);
			public HRESULT get_duration(out float p) mut => VT.get_duration(ref this, out p);
			public HRESULT get_paused(out int16 p) mut => VT.get_paused(ref this, out p);
			public HRESULT put_defaultPlaybackRate(float v) mut => VT.put_defaultPlaybackRate(ref this, v);
			public HRESULT get_defaultPlaybackRate(out float p) mut => VT.get_defaultPlaybackRate(ref this, out p);
			public HRESULT put_playbackRate(float v) mut => VT.put_playbackRate(ref this, v);
			public HRESULT get_playbackRate(out float p) mut => VT.get_playbackRate(ref this, out p);
			public HRESULT get_played(out IHTMLTimeRanges* p) mut => VT.get_played(ref this, out p);
			public HRESULT get_seekable(out IHTMLTimeRanges* p) mut => VT.get_seekable(ref this, out p);
			public HRESULT get_ended(out int16 p) mut => VT.get_ended(ref this, out p);
			public HRESULT put_autoplay(int16 v) mut => VT.put_autoplay(ref this, v);
			public HRESULT get_autoplay(out int16 p) mut => VT.get_autoplay(ref this, out p);
			public HRESULT put_loop(int16 v) mut => VT.put_loop(ref this, v);
			public HRESULT get_loop(out int16 p) mut => VT.get_loop(ref this, out p);
			public HRESULT play() mut => VT.play(ref this);
			public HRESULT pause() mut => VT.pause(ref this);
			public HRESULT put_controls(int16 v) mut => VT.put_controls(ref this, v);
			public HRESULT get_controls(out int16 p) mut => VT.get_controls(ref this, out p);
			public HRESULT put_volume(float v) mut => VT.put_volume(ref this, v);
			public HRESULT get_volume(out float p) mut => VT.get_volume(ref this, out p);
			public HRESULT put_muted(int16 v) mut => VT.put_muted(ref this, v);
			public HRESULT get_muted(out int16 p) mut => VT.get_muted(ref this, out p);
			public HRESULT put_autobuffer(int16 v) mut => VT.put_autobuffer(ref this, v);
			public HRESULT get_autobuffer(out int16 p) mut => VT.get_autobuffer(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out IHTMLMediaError* p) get_error;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out BSTR p) get_currentSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out uint16 p) get_networkState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, BSTR v) put_preload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out BSTR p) get_preload;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out IHTMLTimeRanges* p) get_buffered;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self) load;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, BSTR type, out BSTR canPlay) canPlayType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_seeking;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, float v) put_currentTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out float p) get_currentTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out float p) get_initialTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out float p) get_duration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_paused;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, float v) put_defaultPlaybackRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out float p) get_defaultPlaybackRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, float v) put_playbackRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out float p) get_playbackRate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out IHTMLTimeRanges* p) get_played;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out IHTMLTimeRanges* p) get_seekable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_ended;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, int16 v) put_autoplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_autoplay;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, int16 v) put_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_loop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self) play;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self) pause;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, int16 v) put_controls;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_controls;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, float v) put_volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out float p) get_volume;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, int16 v) put_muted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_muted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, int16 v) put_autobuffer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement self, out int16 p) get_autobuffer;
			}
		}
		[CRepr]
		public struct IHTMLMediaElement2 : IDispatch
		{
			public const new Guid IID = .(0x30510809, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_currentTimeDouble(double v) mut => VT.put_currentTimeDouble(ref this, v);
			public HRESULT get_currentTimeDouble(out double p) mut => VT.get_currentTimeDouble(ref this, out p);
			public HRESULT get_initialTimeDouble(out double p) mut => VT.get_initialTimeDouble(ref this, out p);
			public HRESULT get_durationDouble(out double p) mut => VT.get_durationDouble(ref this, out p);
			public HRESULT put_defaultPlaybackRateDouble(double v) mut => VT.put_defaultPlaybackRateDouble(ref this, v);
			public HRESULT get_defaultPlaybackRateDouble(out double p) mut => VT.get_defaultPlaybackRateDouble(ref this, out p);
			public HRESULT put_playbackRateDouble(double v) mut => VT.put_playbackRateDouble(ref this, v);
			public HRESULT get_playbackRateDouble(out double p) mut => VT.get_playbackRateDouble(ref this, out p);
			public HRESULT put_volumeDouble(double v) mut => VT.put_volumeDouble(ref this, v);
			public HRESULT get_volumeDouble(out double p) mut => VT.get_volumeDouble(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, double v) put_currentTimeDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, out double p) get_currentTimeDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, out double p) get_initialTimeDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, out double p) get_durationDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, double v) put_defaultPlaybackRateDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, out double p) get_defaultPlaybackRateDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, double v) put_playbackRateDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, out double p) get_playbackRateDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, double v) put_volumeDouble;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMediaElement2 self, out double p) get_volumeDouble;
			}
		}
		[CRepr]
		public struct IHTMLMSMediaElement : IDispatch
		{
			public const new Guid IID = .(0x30510792, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_msPlayToDisabled(int16 v) mut => VT.put_msPlayToDisabled(ref this, v);
			public HRESULT get_msPlayToDisabled(out int16 p) mut => VT.get_msPlayToDisabled(ref this, out p);
			public HRESULT put_msPlayToPrimary(int16 v) mut => VT.put_msPlayToPrimary(ref this, v);
			public HRESULT get_msPlayToPrimary(out int16 p) mut => VT.get_msPlayToPrimary(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSMediaElement self, int16 v) put_msPlayToDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSMediaElement self, out int16 p) get_msPlayToDisabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSMediaElement self, int16 v) put_msPlayToPrimary;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLMSMediaElement self, out int16 p) get_msPlayToPrimary;
			}
		}
		[CRepr]
		public struct IHTMLSourceElement : IDispatch
		{
			public const new Guid IID = .(0x30510707, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_src(BSTR v) mut => VT.put_src(ref this, v);
			public HRESULT get_src(out BSTR p) mut => VT.get_src(ref this, out p);
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_media(BSTR v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out BSTR p) mut => VT.get_media(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSourceElement self, BSTR v) put_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSourceElement self, out BSTR p) get_src;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSourceElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSourceElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSourceElement self, BSTR v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLSourceElement self, out BSTR p) get_media;
			}
		}
		[CRepr]
		public struct IHTMLAudioElement : IDispatch
		{
			public const new Guid IID = .(0x30510708, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLVideoElement : IDispatch
		{
			public const new Guid IID = .(0x30510709, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_width(int32 v) mut => VT.put_width(ref this, v);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT put_height(int32 v) mut => VT.put_height(ref this, v);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT get_videoWidth(out uint32 p) mut => VT.get_videoWidth(ref this, out p);
			public HRESULT get_videoHeight(out uint32 p) mut => VT.get_videoHeight(ref this, out p);
			public HRESULT put_poster(BSTR v) mut => VT.put_poster(ref this, v);
			public HRESULT get_poster(out BSTR p) mut => VT.get_poster(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, int32 v) put_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, int32 v) put_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, out uint32 p) get_videoWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, out uint32 p) get_videoHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, BSTR v) put_poster;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLVideoElement self, out BSTR p) get_poster;
			}
		}
		[CRepr]
		public struct IHTMLAudioElementFactory : IDispatch
		{
			public const new Guid IID = .(0x305107eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(VARIANT src, out IHTMLAudioElement* __MIDL__IHTMLAudioElementFactory0000) mut => VT.create(ref this, src, out __MIDL__IHTMLAudioElementFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAudioElementFactory self, VARIANT src, out IHTMLAudioElement* __MIDL__IHTMLAudioElementFactory0000) create;
			}
		}
		[CRepr]
		public struct DispHTMLMediaError : IDispatch
		{
			public const new Guid IID = .(0x30590086, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLTimeRanges : IDispatch
		{
			public const new Guid IID = .(0x30590087, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLMediaElement : IDispatch
		{
			public const new Guid IID = .(0x30590088, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLSourceElement : IDispatch
		{
			public const new Guid IID = .(0x30590089, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLAudioElement : IDispatch
		{
			public const new Guid IID = .(0x3059008a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLVideoElement : IDispatch
		{
			public const new Guid IID = .(0x3059008b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGSwitchElement : IDispatch
		{
			public const new Guid IID = .(0x305104f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGSwitchElement : IDispatch
		{
			public const new Guid IID = .(0x30590030, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGDescElement : IDispatch
		{
			public const new Guid IID = .(0x305104ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGDescElement : IDispatch
		{
			public const new Guid IID = .(0x30590005, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGTitleElement : IDispatch
		{
			public const new Guid IID = .(0x305104eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGTitleElement : IDispatch
		{
			public const new Guid IID = .(0x30590006, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGMetadataElement : IDispatch
		{
			public const new Guid IID = .(0x30510560, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGMetadataElement : IDispatch
		{
			public const new Guid IID = .(0x3059002f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGElementInstanceList : IDispatch
		{
			public const new Guid IID = .(0x305104ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(int32 index, out ISVGElementInstance* ppResult) mut => VT.item(ref this, index, out ppResult);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstanceList self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGElementInstanceList self, int32 index, out ISVGElementInstance* ppResult) item;
			}
		}
		[CRepr]
		public struct DispSVGElementInstance : IDispatch
		{
			public const new Guid IID = .(0x30590007, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGElementInstanceList : IDispatch
		{
			public const new Guid IID = .(0x30590008, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMException : IDispatch
		{
			public const new Guid IID = .(0x3051072b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_code(int32 v) mut => VT.put_code(ref this, v);
			public HRESULT get_code(out int32 p) mut => VT.get_code(ref this, out p);
			public HRESULT get_message(out BSTR p) mut => VT.get_message(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMException self, int32 v) put_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMException self, out int32 p) get_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMException self, out BSTR p) get_message;
			}
		}
		[CRepr]
		public struct DispDOMException : IDispatch
		{
			public const new Guid IID = .(0x30590094, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IRangeException : IDispatch
		{
			public const new Guid IID = .(0x3051072d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_code(int32 v) mut => VT.put_code(ref this, v);
			public HRESULT get_code(out int32 p) mut => VT.get_code(ref this, out p);
			public HRESULT get_message(out BSTR p) mut => VT.get_message(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRangeException self, int32 v) put_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRangeException self, out int32 p) get_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IRangeException self, out BSTR p) get_message;
			}
		}
		[CRepr]
		public struct DispRangeException : IDispatch
		{
			public const new Guid IID = .(0x30590095, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGException : IDispatch
		{
			public const new Guid IID = .(0x3051072f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_code(int32 v) mut => VT.put_code(ref this, v);
			public HRESULT get_code(out int32 p) mut => VT.get_code(ref this, out p);
			public HRESULT get_message(out BSTR p) mut => VT.get_message(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGException self, int32 v) put_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGException self, out int32 p) get_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGException self, out BSTR p) get_message;
			}
		}
		[CRepr]
		public struct DispSVGException : IDispatch
		{
			public const new Guid IID = .(0x30590096, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IEventException : IDispatch
		{
			public const new Guid IID = .(0x3051073a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_code(int32 v) mut => VT.put_code(ref this, v);
			public HRESULT get_code(out int32 p) mut => VT.get_code(ref this, out p);
			public HRESULT get_message(out BSTR p) mut => VT.get_message(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventException self, int32 v) put_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventException self, out int32 p) get_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventException self, out BSTR p) get_message;
			}
		}
		[CRepr]
		public struct DispEventException : IDispatch
		{
			public const new Guid IID = .(0x30590099, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGScriptElement : IDispatch
		{
			public const new Guid IID = .(0x3051054d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGScriptElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGScriptElement self, out BSTR p) get_type;
			}
		}
		[CRepr]
		public struct DispSVGScriptElement : IDispatch
		{
			public const new Guid IID = .(0x30590039, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGStyleElement : IDispatch
		{
			public const new Guid IID = .(0x305104f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_type(BSTR v) mut => VT.put_type(ref this, v);
			public HRESULT get_type(out BSTR p) mut => VT.get_type(ref this, out p);
			public HRESULT put_media(BSTR v) mut => VT.put_media(ref this, v);
			public HRESULT get_media(out BSTR p) mut => VT.get_media(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStyleElement self, BSTR v) put_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStyleElement self, out BSTR p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStyleElement self, BSTR v) put_media;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGStyleElement self, out BSTR p) get_media;
			}
		}
		[CRepr]
		public struct DispSVGStyleElement : IDispatch
		{
			public const new Guid IID = .(0x30590029, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGTextContentElement : IDispatch
		{
			public const new Guid IID = .(0x3051051a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_textLength(ref ISVGAnimatedLength v) mut => VT.putref_textLength(ref this, ref v);
			public HRESULT get_textLength(out ISVGAnimatedLength* p) mut => VT.get_textLength(ref this, out p);
			public HRESULT putref_lengthAdjust(ref ISVGAnimatedEnumeration v) mut => VT.putref_lengthAdjust(ref this, ref v);
			public HRESULT get_lengthAdjust(out ISVGAnimatedEnumeration* p) mut => VT.get_lengthAdjust(ref this, out p);
			public HRESULT getNumberOfChars(out int32 pResult) mut => VT.getNumberOfChars(ref this, out pResult);
			public HRESULT getComputedTextLength(out float pResult) mut => VT.getComputedTextLength(ref this, out pResult);
			public HRESULT getSubStringLength(int32 charnum, int32 nchars, out float pResult) mut => VT.getSubStringLength(ref this, charnum, nchars, out pResult);
			public HRESULT getStartPositionOfChar(int32 charnum, out ISVGPoint* ppResult) mut => VT.getStartPositionOfChar(ref this, charnum, out ppResult);
			public HRESULT getEndPositionOfChar(int32 charnum, out ISVGPoint* ppResult) mut => VT.getEndPositionOfChar(ref this, charnum, out ppResult);
			public HRESULT getExtentOfChar(int32 charnum, out ISVGRect* ppResult) mut => VT.getExtentOfChar(ref this, charnum, out ppResult);
			public HRESULT getRotationOfChar(int32 charnum, out float pResult) mut => VT.getRotationOfChar(ref this, charnum, out pResult);
			public HRESULT getCharNumAtPosition(ref ISVGPoint point, out int32 pResult) mut => VT.getCharNumAtPosition(ref this, ref point, out pResult);
			public HRESULT selectSubString(int32 charnum, int32 nchars) mut => VT.selectSubString(ref this, charnum, nchars);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, ref ISVGAnimatedLength v) putref_textLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, out ISVGAnimatedLength* p) get_textLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, ref ISVGAnimatedEnumeration v) putref_lengthAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, out ISVGAnimatedEnumeration* p) get_lengthAdjust;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, out int32 pResult) getNumberOfChars;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, out float pResult) getComputedTextLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, int32 charnum, int32 nchars, out float pResult) getSubStringLength;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, int32 charnum, out ISVGPoint* ppResult) getStartPositionOfChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, int32 charnum, out ISVGPoint* ppResult) getEndPositionOfChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, int32 charnum, out ISVGRect* ppResult) getExtentOfChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, int32 charnum, out float pResult) getRotationOfChar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, ref ISVGPoint point, out int32 pResult) getCharNumAtPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextContentElement self, int32 charnum, int32 nchars) selectSubString;
			}
		}
		[CRepr]
		public struct DispSVGTextContentElement : IDispatch
		{
			public const new Guid IID = .(0x30590035, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGTextPositioningElement : IDispatch
		{
			public const new Guid IID = .(0x3051051b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_x(ref ISVGAnimatedLengthList v) mut => VT.putref_x(ref this, ref v);
			public HRESULT get_x(out ISVGAnimatedLengthList* p) mut => VT.get_x(ref this, out p);
			public HRESULT putref_y(ref ISVGAnimatedLengthList v) mut => VT.putref_y(ref this, ref v);
			public HRESULT get_y(out ISVGAnimatedLengthList* p) mut => VT.get_y(ref this, out p);
			public HRESULT putref_dx(ref ISVGAnimatedLengthList v) mut => VT.putref_dx(ref this, ref v);
			public HRESULT get_dx(out ISVGAnimatedLengthList* p) mut => VT.get_dx(ref this, out p);
			public HRESULT putref_dy(ref ISVGAnimatedLengthList v) mut => VT.putref_dy(ref this, ref v);
			public HRESULT get_dy(out ISVGAnimatedLengthList* p) mut => VT.get_dy(ref this, out p);
			public HRESULT putref_rotate(ref ISVGAnimatedNumberList v) mut => VT.putref_rotate(ref this, ref v);
			public HRESULT get_rotate(out ISVGAnimatedNumberList* p) mut => VT.get_rotate(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, ref ISVGAnimatedLengthList v) putref_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, out ISVGAnimatedLengthList* p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, ref ISVGAnimatedLengthList v) putref_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, out ISVGAnimatedLengthList* p) get_y;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, ref ISVGAnimatedLengthList v) putref_dx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, out ISVGAnimatedLengthList* p) get_dx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, ref ISVGAnimatedLengthList v) putref_dy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, out ISVGAnimatedLengthList* p) get_dy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, ref ISVGAnimatedNumberList v) putref_rotate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPositioningElement self, out ISVGAnimatedNumberList* p) get_rotate;
			}
		}
		[CRepr]
		public struct DispSVGTextPositioningElement : IDispatch
		{
			public const new Guid IID = .(0x30590038, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispDOMDocumentType : IDispatch
		{
			public const new Guid IID = .(0x30590098, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispNodeIterator : IDispatch
		{
			public const new Guid IID = .(0x3059009c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispTreeWalker : IDispatch
		{
			public const new Guid IID = .(0x3059009d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispDOMProcessingInstruction : IDispatch
		{
			public const new Guid IID = .(0x3059009b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLPerformanceNavigation : IDispatch
		{
			public const new Guid IID = .(0x30510750, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_type(out uint32 p) mut => VT.get_type(ref this, out p);
			public HRESULT get_redirectCount(out uint32 p) mut => VT.get_redirectCount(ref this, out p);
			public HRESULT toString(out BSTR string) mut => VT.toString(ref this, out string);
			public HRESULT toJSON(out VARIANT pVar) mut => VT.toJSON(ref this, out pVar);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceNavigation self, out uint32 p) get_type;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceNavigation self, out uint32 p) get_redirectCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceNavigation self, out BSTR string) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceNavigation self, out VARIANT pVar) toJSON;
			}
		}
		[CRepr]
		public struct IHTMLPerformanceTiming : IDispatch
		{
			public const new Guid IID = .(0x30510752, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_navigationStart(out uint64 p) mut => VT.get_navigationStart(ref this, out p);
			public HRESULT get_unloadEventStart(out uint64 p) mut => VT.get_unloadEventStart(ref this, out p);
			public HRESULT get_unloadEventEnd(out uint64 p) mut => VT.get_unloadEventEnd(ref this, out p);
			public HRESULT get_redirectStart(out uint64 p) mut => VT.get_redirectStart(ref this, out p);
			public HRESULT get_redirectEnd(out uint64 p) mut => VT.get_redirectEnd(ref this, out p);
			public HRESULT get_fetchStart(out uint64 p) mut => VT.get_fetchStart(ref this, out p);
			public HRESULT get_domainLookupStart(out uint64 p) mut => VT.get_domainLookupStart(ref this, out p);
			public HRESULT get_domainLookupEnd(out uint64 p) mut => VT.get_domainLookupEnd(ref this, out p);
			public HRESULT get_connectStart(out uint64 p) mut => VT.get_connectStart(ref this, out p);
			public HRESULT get_connectEnd(out uint64 p) mut => VT.get_connectEnd(ref this, out p);
			public HRESULT get_requestStart(out uint64 p) mut => VT.get_requestStart(ref this, out p);
			public HRESULT get_responseStart(out uint64 p) mut => VT.get_responseStart(ref this, out p);
			public HRESULT get_responseEnd(out uint64 p) mut => VT.get_responseEnd(ref this, out p);
			public HRESULT get_domLoading(out uint64 p) mut => VT.get_domLoading(ref this, out p);
			public HRESULT get_domInteractive(out uint64 p) mut => VT.get_domInteractive(ref this, out p);
			public HRESULT get_domContentLoadedEventStart(out uint64 p) mut => VT.get_domContentLoadedEventStart(ref this, out p);
			public HRESULT get_domContentLoadedEventEnd(out uint64 p) mut => VT.get_domContentLoadedEventEnd(ref this, out p);
			public HRESULT get_domComplete(out uint64 p) mut => VT.get_domComplete(ref this, out p);
			public HRESULT get_loadEventStart(out uint64 p) mut => VT.get_loadEventStart(ref this, out p);
			public HRESULT get_loadEventEnd(out uint64 p) mut => VT.get_loadEventEnd(ref this, out p);
			public HRESULT get_msFirstPaint(out uint64 p) mut => VT.get_msFirstPaint(ref this, out p);
			public HRESULT toString(out BSTR string) mut => VT.toString(ref this, out string);
			public HRESULT toJSON(out VARIANT pVar) mut => VT.toJSON(ref this, out pVar);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_navigationStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_unloadEventStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_unloadEventEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_redirectStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_redirectEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_fetchStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domainLookupStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domainLookupEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_connectStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_connectEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_requestStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_responseStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_responseEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domLoading;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domInteractive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domContentLoadedEventStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domContentLoadedEventEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_domComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_loadEventStart;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_loadEventEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out uint64 p) get_msFirstPaint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out BSTR string) toString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPerformanceTiming self, out VARIANT pVar) toJSON;
			}
		}
		[CRepr]
		public struct DispHTMLPerformance : IDispatch
		{
			public const new Guid IID = .(0x3059009f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLPerformanceNavigation : IDispatch
		{
			public const new Guid IID = .(0x305900a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLPerformanceTiming : IDispatch
		{
			public const new Guid IID = .(0x305900a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGTSpanElement : IDispatch
		{
			public const new Guid IID = .(0x3051051d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispSVGTSpanElement : IDispatch
		{
			public const new Guid IID = .(0x3059003a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ITemplatePrinter : IDispatch
		{
			public const new Guid IID = .(0x3050f6b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT startDoc(BSTR bstrTitle, out int16 p) mut => VT.startDoc(ref this, bstrTitle, out p);
			public HRESULT stopDoc() mut => VT.stopDoc(ref this);
			public HRESULT printBlankPage() mut => VT.printBlankPage(ref this);
			public HRESULT printPage(ref IDispatch pElemDisp) mut => VT.printPage(ref this, ref pElemDisp);
			public HRESULT ensurePrintDialogDefaults(out int16 p) mut => VT.ensurePrintDialogDefaults(ref this, out p);
			public HRESULT showPrintDialog(out int16 p) mut => VT.showPrintDialog(ref this, out p);
			public HRESULT showPageSetupDialog(out int16 p) mut => VT.showPageSetupDialog(ref this, out p);
			public HRESULT printNonNative(ref IUnknown pMarkup, out int16 p) mut => VT.printNonNative(ref this, ref pMarkup, out p);
			public HRESULT printNonNativeFrames(ref IUnknown pMarkup, int16 fActiveFrame) mut => VT.printNonNativeFrames(ref this, ref pMarkup, fActiveFrame);
			public HRESULT put_framesetDocument(int16 v) mut => VT.put_framesetDocument(ref this, v);
			public HRESULT get_framesetDocument(out int16 p) mut => VT.get_framesetDocument(ref this, out p);
			public HRESULT put_frameActive(int16 v) mut => VT.put_frameActive(ref this, v);
			public HRESULT get_frameActive(out int16 p) mut => VT.get_frameActive(ref this, out p);
			public HRESULT put_frameAsShown(int16 v) mut => VT.put_frameAsShown(ref this, v);
			public HRESULT get_frameAsShown(out int16 p) mut => VT.get_frameAsShown(ref this, out p);
			public HRESULT put_selection(int16 v) mut => VT.put_selection(ref this, v);
			public HRESULT get_selection(out int16 p) mut => VT.get_selection(ref this, out p);
			public HRESULT put_selectedPages(int16 v) mut => VT.put_selectedPages(ref this, v);
			public HRESULT get_selectedPages(out int16 p) mut => VT.get_selectedPages(ref this, out p);
			public HRESULT put_currentPage(int16 v) mut => VT.put_currentPage(ref this, v);
			public HRESULT get_currentPage(out int16 p) mut => VT.get_currentPage(ref this, out p);
			public HRESULT put_currentPageAvail(int16 v) mut => VT.put_currentPageAvail(ref this, v);
			public HRESULT get_currentPageAvail(out int16 p) mut => VT.get_currentPageAvail(ref this, out p);
			public HRESULT put_collate(int16 v) mut => VT.put_collate(ref this, v);
			public HRESULT get_collate(out int16 p) mut => VT.get_collate(ref this, out p);
			public HRESULT get_duplex(out int16 p) mut => VT.get_duplex(ref this, out p);
			public HRESULT put_copies(uint16 v) mut => VT.put_copies(ref this, v);
			public HRESULT get_copies(out uint16 p) mut => VT.get_copies(ref this, out p);
			public HRESULT put_pageFrom(uint16 v) mut => VT.put_pageFrom(ref this, v);
			public HRESULT get_pageFrom(out uint16 p) mut => VT.get_pageFrom(ref this, out p);
			public HRESULT put_pageTo(uint16 v) mut => VT.put_pageTo(ref this, v);
			public HRESULT get_pageTo(out uint16 p) mut => VT.get_pageTo(ref this, out p);
			public HRESULT put_tableOfLinks(int16 v) mut => VT.put_tableOfLinks(ref this, v);
			public HRESULT get_tableOfLinks(out int16 p) mut => VT.get_tableOfLinks(ref this, out p);
			public HRESULT put_allLinkedDocuments(int16 v) mut => VT.put_allLinkedDocuments(ref this, v);
			public HRESULT get_allLinkedDocuments(out int16 p) mut => VT.get_allLinkedDocuments(ref this, out p);
			public HRESULT put_header(BSTR v) mut => VT.put_header(ref this, v);
			public HRESULT get_header(out BSTR p) mut => VT.get_header(ref this, out p);
			public HRESULT put_footer(BSTR v) mut => VT.put_footer(ref this, v);
			public HRESULT get_footer(out BSTR p) mut => VT.get_footer(ref this, out p);
			public HRESULT put_marginLeft(int32 v) mut => VT.put_marginLeft(ref this, v);
			public HRESULT get_marginLeft(out int32 p) mut => VT.get_marginLeft(ref this, out p);
			public HRESULT put_marginRight(int32 v) mut => VT.put_marginRight(ref this, v);
			public HRESULT get_marginRight(out int32 p) mut => VT.get_marginRight(ref this, out p);
			public HRESULT put_marginTop(int32 v) mut => VT.put_marginTop(ref this, v);
			public HRESULT get_marginTop(out int32 p) mut => VT.get_marginTop(ref this, out p);
			public HRESULT put_marginBottom(int32 v) mut => VT.put_marginBottom(ref this, v);
			public HRESULT get_marginBottom(out int32 p) mut => VT.get_marginBottom(ref this, out p);
			public HRESULT get_pageWidth(out int32 p) mut => VT.get_pageWidth(ref this, out p);
			public HRESULT get_pageHeight(out int32 p) mut => VT.get_pageHeight(ref this, out p);
			public HRESULT get_unprintableLeft(out int32 p) mut => VT.get_unprintableLeft(ref this, out p);
			public HRESULT get_unprintableTop(out int32 p) mut => VT.get_unprintableTop(ref this, out p);
			public HRESULT get_unprintableRight(out int32 p) mut => VT.get_unprintableRight(ref this, out p);
			public HRESULT get_unprintableBottom(out int32 p) mut => VT.get_unprintableBottom(ref this, out p);
			public HRESULT updatePageStatus(ref int32 p) mut => VT.updatePageStatus(ref this, ref p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, BSTR bstrTitle, out int16 p) startDoc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self) stopDoc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self) printBlankPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, ref IDispatch pElemDisp) printPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) ensurePrintDialogDefaults;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) showPrintDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) showPageSetupDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, ref IUnknown pMarkup, out int16 p) printNonNative;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, ref IUnknown pMarkup, int16 fActiveFrame) printNonNativeFrames;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_framesetDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_framesetDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_frameActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_frameActive;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_frameAsShown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_frameAsShown;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_selection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_selection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_selectedPages;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_selectedPages;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_currentPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_currentPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_currentPageAvail;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_currentPageAvail;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_collate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_collate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_duplex;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, uint16 v) put_copies;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out uint16 p) get_copies;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, uint16 v) put_pageFrom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out uint16 p) get_pageFrom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, uint16 v) put_pageTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out uint16 p) get_pageTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_tableOfLinks;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_tableOfLinks;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int16 v) put_allLinkedDocuments;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int16 p) get_allLinkedDocuments;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, BSTR v) put_header;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out BSTR p) get_header;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, BSTR v) put_footer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out BSTR p) get_footer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int32 v) put_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_marginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int32 v) put_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_marginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int32 v) put_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_marginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, int32 v) put_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_marginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_pageWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_pageHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_unprintableLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_unprintableTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_unprintableRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, out int32 p) get_unprintableBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter self, ref int32 p) updatePageStatus;
			}
		}
		[CRepr]
		public struct ITemplatePrinter2 : ITemplatePrinter
		{
			public const new Guid IID = .(0x3050f83f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_selectionEnabled(int16 v) mut => VT.put_selectionEnabled(ref this, v);
			public HRESULT get_selectionEnabled(out int16 p) mut => VT.get_selectionEnabled(ref this, out p);
			public HRESULT put_frameActiveEnabled(int16 v) mut => VT.put_frameActiveEnabled(ref this, v);
			public HRESULT get_frameActiveEnabled(out int16 p) mut => VT.get_frameActiveEnabled(ref this, out p);
			public HRESULT put_orientation(BSTR v) mut => VT.put_orientation(ref this, v);
			public HRESULT get_orientation(out BSTR p) mut => VT.get_orientation(ref this, out p);
			public HRESULT put_usePrinterCopyCollate(int16 v) mut => VT.put_usePrinterCopyCollate(ref this, v);
			public HRESULT get_usePrinterCopyCollate(out int16 p) mut => VT.get_usePrinterCopyCollate(ref this, out p);
			public HRESULT deviceSupports(BSTR bstrProperty, out VARIANT pvar) mut => VT.deviceSupports(ref this, bstrProperty, out pvar);

			[CRepr]
			public struct VTable : ITemplatePrinter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, int16 v) put_selectionEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, out int16 p) get_selectionEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, int16 v) put_frameActiveEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, out int16 p) get_frameActiveEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, BSTR v) put_orientation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, out BSTR p) get_orientation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, int16 v) put_usePrinterCopyCollate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, out int16 p) get_usePrinterCopyCollate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter2 self, BSTR bstrProperty, out VARIANT pvar) deviceSupports;
			}
		}
		[CRepr]
		public struct ITemplatePrinter3 : ITemplatePrinter2
		{
			public const new Guid IID = .(0x305104a3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_headerFooterFont(BSTR v) mut => VT.put_headerFooterFont(ref this, v);
			public HRESULT get_headerFooterFont(out BSTR p) mut => VT.get_headerFooterFont(ref this, out p);
			public HRESULT getPageMarginTop(ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) mut => VT.getPageMarginTop(ref this, ref pageRule, pageWidth, pageHeight, out pMargin);
			public HRESULT getPageMarginRight(ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) mut => VT.getPageMarginRight(ref this, ref pageRule, pageWidth, pageHeight, out pMargin);
			public HRESULT getPageMarginBottom(ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) mut => VT.getPageMarginBottom(ref this, ref pageRule, pageWidth, pageHeight, out pMargin);
			public HRESULT getPageMarginLeft(ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) mut => VT.getPageMarginLeft(ref this, ref pageRule, pageWidth, pageHeight, out pMargin);
			public HRESULT getPageMarginTopImportant(ref IDispatch pageRule, out int16 pbImportant) mut => VT.getPageMarginTopImportant(ref this, ref pageRule, out pbImportant);
			public HRESULT getPageMarginRightImportant(ref IDispatch pageRule, out int16 pbImportant) mut => VT.getPageMarginRightImportant(ref this, ref pageRule, out pbImportant);
			public HRESULT getPageMarginBottomImportant(ref IDispatch pageRule, out int16 pbImportant) mut => VT.getPageMarginBottomImportant(ref this, ref pageRule, out pbImportant);
			public HRESULT getPageMarginLeftImportant(ref IDispatch pageRule, out int16 pbImportant) mut => VT.getPageMarginLeftImportant(ref this, ref pageRule, out pbImportant);

			[CRepr]
			public struct VTable : ITemplatePrinter2.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, BSTR v) put_headerFooterFont;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, out BSTR p) get_headerFooterFont;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) getPageMarginTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) getPageMarginRight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) getPageMarginBottom;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, int32 pageWidth, int32 pageHeight, out VARIANT pMargin) getPageMarginLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, out int16 pbImportant) getPageMarginTopImportant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, out int16 pbImportant) getPageMarginRightImportant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, out int16 pbImportant) getPageMarginBottomImportant;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITemplatePrinter3 self, ref IDispatch pageRule, out int16 pbImportant) getPageMarginLeftImportant;
			}
		}
		[CRepr]
		public struct IPrintManagerTemplatePrinter : IDispatch
		{
			public const new Guid IID = .(0xf633be14, 0x9eff, 0x4c4d, 0x92, 0x9e, 0x05, 0x71, 0x7b, 0x21, 0xb3, 0xe6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT startPrint() mut => VT.startPrint(ref this);
			public HRESULT drawPreviewPage(ref IDispatch pElemDisp, int32 nPage) mut => VT.drawPreviewPage(ref this, ref pElemDisp, nPage);
			public HRESULT setPageCount(int32 nPage) mut => VT.setPageCount(ref this, nPage);
			public HRESULT invalidatePreview() mut => VT.invalidatePreview(ref this);
			public HRESULT getPrintTaskOptionValue(BSTR bstrKey, out VARIANT pvarin) mut => VT.getPrintTaskOptionValue(ref this, bstrKey, out pvarin);
			public HRESULT endPrint() mut => VT.endPrint(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter self) startPrint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter self, ref IDispatch pElemDisp, int32 nPage) drawPreviewPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter self, int32 nPage) setPageCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter self) invalidatePreview;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter self, BSTR bstrKey, out VARIANT pvarin) getPrintTaskOptionValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter self) endPrint;
			}
		}
		[CRepr]
		public struct IPrintManagerTemplatePrinter2 : IPrintManagerTemplatePrinter
		{
			public const new Guid IID = .(0xc6403497, 0x7493, 0x4f09, 0x80, 0x16, 0x54, 0xb0, 0x3e, 0x9b, 0xda, 0x69);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_showHeaderFooter(out int16 p) mut => VT.get_showHeaderFooter(ref this, out p);
			public HRESULT get_shrinkToFit(out int16 p) mut => VT.get_shrinkToFit(ref this, out p);
			public HRESULT get_percentScale(out float p) mut => VT.get_percentScale(ref this, out p);

			[CRepr]
			public struct VTable : IPrintManagerTemplatePrinter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter2 self, out int16 p) get_showHeaderFooter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter2 self, out int16 p) get_shrinkToFit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintManagerTemplatePrinter2 self, out float p) get_percentScale;
			}
		}
		[CRepr]
		public struct DispCPrintManagerTemplatePrinter : IDispatch
		{
			public const new Guid IID = .(0x305900e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ISVGTextPathElement : IDispatch
		{
			public const new Guid IID = .(0x3051051f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT putref_startOffset(ref ISVGAnimatedLength v) mut => VT.putref_startOffset(ref this, ref v);
			public HRESULT get_startOffset(out ISVGAnimatedLength* p) mut => VT.get_startOffset(ref this, out p);
			public HRESULT putref_method(ref ISVGAnimatedEnumeration v) mut => VT.putref_method(ref this, ref v);
			public HRESULT get_method(out ISVGAnimatedEnumeration* p) mut => VT.get_method(ref this, out p);
			public HRESULT putref_spacing(ref ISVGAnimatedEnumeration v) mut => VT.putref_spacing(ref this, ref v);
			public HRESULT get_spacing(out ISVGAnimatedEnumeration* p) mut => VT.get_spacing(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPathElement self, ref ISVGAnimatedLength v) putref_startOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPathElement self, out ISVGAnimatedLength* p) get_startOffset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPathElement self, ref ISVGAnimatedEnumeration v) putref_method;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPathElement self, out ISVGAnimatedEnumeration* p) get_method;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPathElement self, ref ISVGAnimatedEnumeration v) putref_spacing;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISVGTextPathElement self, out ISVGAnimatedEnumeration* p) get_spacing;
			}
		}
		[CRepr]
		public struct DispSVGTextPathElement : IDispatch
		{
			public const new Guid IID = .(0x3059003d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMXmlSerializer : IDispatch
		{
			public const new Guid IID = .(0x3051077d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT serializeToString(ref IHTMLDOMNode pNode, out BSTR pString) mut => VT.serializeToString(ref this, ref pNode, out pString);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMXmlSerializer self, ref IHTMLDOMNode pNode, out BSTR pString) serializeToString;
			}
		}
		[CRepr]
		public struct IDOMParser : IDispatch
		{
			public const new Guid IID = .(0x30510781, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT parseFromString(BSTR xmlSource, BSTR mimeType, out IHTMLDocument2* ppNode) mut => VT.parseFromString(ref this, xmlSource, mimeType, out ppNode);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMParser self, BSTR xmlSource, BSTR mimeType, out IHTMLDocument2* ppNode) parseFromString;
			}
		}
		[CRepr]
		public struct DispXMLSerializer : IDispatch
		{
			public const new Guid IID = .(0x305900ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispDOMParser : IDispatch
		{
			public const new Guid IID = .(0x305900ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMXmlSerializerFactory : IDispatch
		{
			public const new Guid IID = .(0x3051077f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(out IDOMXmlSerializer* __MIDL__IDOMXmlSerializerFactory0000) mut => VT.create(ref this, out __MIDL__IDOMXmlSerializerFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMXmlSerializerFactory self, out IDOMXmlSerializer* __MIDL__IDOMXmlSerializerFactory0000) create;
			}
		}
		[CRepr]
		public struct IDOMParserFactory : IDispatch
		{
			public const new Guid IID = .(0x30510783, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT create(out IDOMParser* __MIDL__IDOMParserFactory0000) mut => VT.create(ref this, out __MIDL__IDOMParserFactory0000);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMParserFactory self, out IDOMParser* __MIDL__IDOMParserFactory0000) create;
			}
		}
		[CRepr]
		public struct DispHTMLSemanticElement : IDispatch
		{
			public const new Guid IID = .(0x305900ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLProgressElement : IDispatch
		{
			public const new Guid IID = .(0x3050f2d6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_value(float v) mut => VT.put_value(ref this, v);
			public HRESULT get_value(out float p) mut => VT.get_value(ref this, out p);
			public HRESULT put_max(float v) mut => VT.put_max(ref this, v);
			public HRESULT get_max(out float p) mut => VT.get_max(ref this, out p);
			public HRESULT get_position(out float p) mut => VT.get_position(ref this, out p);
			public HRESULT get_form(out IHTMLFormElement* p) mut => VT.get_form(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLProgressElement self, float v) put_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLProgressElement self, out float p) get_value;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLProgressElement self, float v) put_max;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLProgressElement self, out float p) get_max;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLProgressElement self, out float p) get_position;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLProgressElement self, out IHTMLFormElement* p) get_form;
			}
		}
		[CRepr]
		public struct DispHTMLProgressElement : IDispatch
		{
			public const new Guid IID = .(0x305900af, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMMSTransitionEvent : IDispatch
		{
			public const new Guid IID = .(0x305107b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_propertyName(out BSTR p) mut => VT.get_propertyName(ref this, out p);
			public HRESULT get_elapsedTime(out float p) mut => VT.get_elapsedTime(ref this, out p);
			public HRESULT initMSTransitionEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR propertyName, float elapsedTime) mut => VT.initMSTransitionEvent(ref this, eventType, canBubble, cancelable, propertyName, elapsedTime);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSTransitionEvent self, out BSTR p) get_propertyName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSTransitionEvent self, out float p) get_elapsedTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSTransitionEvent self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR propertyName, float elapsedTime) initMSTransitionEvent;
			}
		}
		[CRepr]
		public struct DispDOMMSTransitionEvent : IDispatch
		{
			public const new Guid IID = .(0x305900bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMMSAnimationEvent : IDispatch
		{
			public const new Guid IID = .(0x305107b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_animationName(out BSTR p) mut => VT.get_animationName(ref this, out p);
			public HRESULT get_elapsedTime(out float p) mut => VT.get_elapsedTime(ref this, out p);
			public HRESULT initMSAnimationEvent(BSTR eventType, int16 canBubble, int16 cancelable, BSTR animationName, float elapsedTime) mut => VT.initMSAnimationEvent(ref this, eventType, canBubble, cancelable, animationName, elapsedTime);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSAnimationEvent self, out BSTR p) get_animationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSAnimationEvent self, out float p) get_elapsedTime;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSAnimationEvent self, BSTR eventType, int16 canBubble, int16 cancelable, BSTR animationName, float elapsedTime) initMSAnimationEvent;
			}
		}
		[CRepr]
		public struct DispDOMMSAnimationEvent : IDispatch
		{
			public const new Guid IID = .(0x305900bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IWebGeocoordinates : IDispatch
		{
			public const new Guid IID = .(0x305107c7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_latitude(out double p) mut => VT.get_latitude(ref this, out p);
			public HRESULT get_longitude(out double p) mut => VT.get_longitude(ref this, out p);
			public HRESULT get_altitude(out VARIANT p) mut => VT.get_altitude(ref this, out p);
			public HRESULT get_accuracy(out double p) mut => VT.get_accuracy(ref this, out p);
			public HRESULT get_altitudeAccuracy(out VARIANT p) mut => VT.get_altitudeAccuracy(ref this, out p);
			public HRESULT get_heading(out VARIANT p) mut => VT.get_heading(ref this, out p);
			public HRESULT get_speed(out VARIANT p) mut => VT.get_speed(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out double p) get_latitude;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out double p) get_longitude;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out VARIANT p) get_altitude;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out double p) get_accuracy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out VARIANT p) get_altitudeAccuracy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out VARIANT p) get_heading;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeocoordinates self, out VARIANT p) get_speed;
			}
		}
		[CRepr]
		public struct IWebGeopositionError : IDispatch
		{
			public const new Guid IID = .(0x305107c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_code(out int32 p) mut => VT.get_code(ref this, out p);
			public HRESULT get_message(out BSTR p) mut => VT.get_message(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeopositionError self, out int32 p) get_code;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeopositionError self, out BSTR p) get_message;
			}
		}
		[CRepr]
		public struct IWebGeoposition : IDispatch
		{
			public const new Guid IID = .(0x305107cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_coords(out IWebGeocoordinates* p) mut => VT.get_coords(ref this, out p);
			public HRESULT get_timestamp(out uint64 p) mut => VT.get_timestamp(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeoposition self, out IWebGeocoordinates* p) get_coords;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebGeoposition self, out uint64 p) get_timestamp;
			}
		}
		[CRepr]
		public struct DispWebGeolocation : IDispatch
		{
			public const new Guid IID = .(0x305900bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispWebGeocoordinates : IDispatch
		{
			public const new Guid IID = .(0x305900be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispWebGeopositionError : IDispatch
		{
			public const new Guid IID = .(0x305900bf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispWebGeoposition : IDispatch
		{
			public const new Guid IID = .(0x305900c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IClientCaps : IDispatch
		{
			public const new Guid IID = .(0x7e8bc44d, 0xaeff, 0x11d1, 0x89, 0xc2, 0x00, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_javaEnabled(out int16 p) mut => VT.get_javaEnabled(ref this, out p);
			public HRESULT get_cookieEnabled(out int16 p) mut => VT.get_cookieEnabled(ref this, out p);
			public HRESULT get_cpuClass(out BSTR p) mut => VT.get_cpuClass(ref this, out p);
			public HRESULT get_systemLanguage(out BSTR p) mut => VT.get_systemLanguage(ref this, out p);
			public HRESULT get_userLanguage(out BSTR p) mut => VT.get_userLanguage(ref this, out p);
			public HRESULT get_platform(out BSTR p) mut => VT.get_platform(ref this, out p);
			public HRESULT get_connectionSpeed(out int32 p) mut => VT.get_connectionSpeed(ref this, out p);
			public HRESULT get_onLine(out int16 p) mut => VT.get_onLine(ref this, out p);
			public HRESULT get_colorDepth(out int32 p) mut => VT.get_colorDepth(ref this, out p);
			public HRESULT get_bufferDepth(out int32 p) mut => VT.get_bufferDepth(ref this, out p);
			public HRESULT get_width(out int32 p) mut => VT.get_width(ref this, out p);
			public HRESULT get_height(out int32 p) mut => VT.get_height(ref this, out p);
			public HRESULT get_availHeight(out int32 p) mut => VT.get_availHeight(ref this, out p);
			public HRESULT get_availWidth(out int32 p) mut => VT.get_availWidth(ref this, out p);
			public HRESULT get_connectionType(out BSTR p) mut => VT.get_connectionType(ref this, out p);
			public HRESULT isComponentInstalled(BSTR bstrName, BSTR bstrUrl, BSTR bStrVer, out int16 p) mut => VT.isComponentInstalled(ref this, bstrName, bstrUrl, bStrVer, out p);
			public HRESULT getComponentVersion(BSTR bstrName, BSTR bstrUrl, out BSTR pbstrVer) mut => VT.getComponentVersion(ref this, bstrName, bstrUrl, out pbstrVer);
			public HRESULT compareVersions(BSTR bstrVer1, BSTR bstrVer2, out int32 p) mut => VT.compareVersions(ref this, bstrVer1, bstrVer2, out p);
			public HRESULT addComponentRequest(BSTR bstrName, BSTR bstrUrl, BSTR bStrVer) mut => VT.addComponentRequest(ref this, bstrName, bstrUrl, bStrVer);
			public HRESULT doComponentRequest(out int16 p) mut => VT.doComponentRequest(ref this, out p);
			public HRESULT clearComponentRequest() mut => VT.clearComponentRequest(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int16 p) get_javaEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int16 p) get_cookieEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out BSTR p) get_cpuClass;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out BSTR p) get_systemLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out BSTR p) get_userLanguage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out BSTR p) get_platform;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_connectionSpeed;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int16 p) get_onLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_colorDepth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_bufferDepth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_width;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_height;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_availHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int32 p) get_availWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out BSTR p) get_connectionType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, BSTR bstrName, BSTR bstrUrl, BSTR bStrVer, out int16 p) isComponentInstalled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, BSTR bstrName, BSTR bstrUrl, out BSTR pbstrVer) getComponentVersion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, BSTR bstrVer1, BSTR bstrVer2, out int32 p) compareVersions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, BSTR bstrName, BSTR bstrUrl, BSTR bStrVer) addComponentRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self, out int16 p) doComponentRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClientCaps self) clearComponentRequest;
			}
		}
		[CRepr]
		public struct IDOMMSManipulationEvent : IDispatch
		{
			public const new Guid IID = .(0x30510816, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_lastState(out int32 p) mut => VT.get_lastState(ref this, out p);
			public HRESULT get_currentState(out int32 p) mut => VT.get_currentState(ref this, out p);
			public HRESULT initMSManipulationEvent(BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 lastState, int32 currentState) mut => VT.initMSManipulationEvent(ref this, eventType, canBubble, cancelable, ref viewArg, detailArg, lastState, currentState);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSManipulationEvent self, out int32 p) get_lastState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSManipulationEvent self, out int32 p) get_currentState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMMSManipulationEvent self, BSTR eventType, int16 canBubble, int16 cancelable, ref IHTMLWindow2 viewArg, int32 detailArg, int32 lastState, int32 currentState) initMSManipulationEvent;
			}
		}
		[CRepr]
		public struct DispDOMMSManipulationEvent : IDispatch
		{
			public const new Guid IID = .(0x305900e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IDOMCloseEvent : IDispatch
		{
			public const new Guid IID = .(0x305107ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_wasClean(out int16 p) mut => VT.get_wasClean(ref this, out p);
			public HRESULT initCloseEvent(BSTR eventType, int16 canBubble, int16 cancelable, int16 wasClean, int32 code, BSTR reason) mut => VT.initCloseEvent(ref this, eventType, canBubble, cancelable, wasClean, code, reason);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCloseEvent self, out int16 p) get_wasClean;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMCloseEvent self, BSTR eventType, int16 canBubble, int16 cancelable, int16 wasClean, int32 code, BSTR reason) initCloseEvent;
			}
		}
		[CRepr]
		public struct DispDOMCloseEvent : IDispatch
		{
			public const new Guid IID = .(0x305900dc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispApplicationCache : IDispatch
		{
			public const new Guid IID = .(0x305900e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct ICSSFilterSite : IUnknown
		{
			public const new Guid IID = .(0x3050f3ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetElement(out IHTMLElement* Element) mut => VT.GetElement(ref this, out Element);
			public HRESULT FireOnFilterChangeEvent() mut => VT.FireOnFilterChangeEvent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICSSFilterSite self, out IHTMLElement* Element) GetElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICSSFilterSite self) FireOnFilterChangeEvent;
			}
		}
		[CRepr]
		public struct IMarkupPointer : IUnknown
		{
			public const new Guid IID = .(0x3050f49f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OwningDoc(out IHTMLDocument2* ppDoc) mut => VT.OwningDoc(ref this, out ppDoc);
			public HRESULT Gravity(out POINTER_GRAVITY pGravity) mut => VT.Gravity(ref this, out pGravity);
			public HRESULT SetGravity(POINTER_GRAVITY Gravity) mut => VT.SetGravity(ref this, Gravity);
			public HRESULT Cling(out BOOL pfCling) mut => VT.Cling(ref this, out pfCling);
			public HRESULT SetCling(BOOL fCLing) mut => VT.SetCling(ref this, fCLing);
			public HRESULT Unposition() mut => VT.Unposition(ref this);
			public HRESULT IsPositioned(out BOOL pfPositioned) mut => VT.IsPositioned(ref this, out pfPositioned);
			public HRESULT GetContainer(out IMarkupContainer* ppContainer) mut => VT.GetContainer(ref this, out ppContainer);
			public HRESULT MoveAdjacentToElement(ref IHTMLElement pElement, ELEMENT_ADJACENCY eAdj) mut => VT.MoveAdjacentToElement(ref this, ref pElement, eAdj);
			public HRESULT MoveToPointer(ref IMarkupPointer pPointer) mut => VT.MoveToPointer(ref this, ref pPointer);
			public HRESULT MoveToContainer(ref IMarkupContainer pContainer, BOOL fAtStart) mut => VT.MoveToContainer(ref this, ref pContainer, fAtStart);
			public HRESULT Left(BOOL fMove, out MARKUP_CONTEXT_TYPE pContext, out IHTMLElement* ppElement, out int32 pcch, char16* pchText) mut => VT.Left(ref this, fMove, out pContext, out ppElement, out pcch, pchText);
			public HRESULT Right(BOOL fMove, out MARKUP_CONTEXT_TYPE pContext, out IHTMLElement* ppElement, out int32 pcch, char16* pchText) mut => VT.Right(ref this, fMove, out pContext, out ppElement, out pcch, pchText);
			public HRESULT CurrentScope(out IHTMLElement* ppElemCurrent) mut => VT.CurrentScope(ref this, out ppElemCurrent);
			public HRESULT IsLeftOf(ref IMarkupPointer pPointerThat, out BOOL pfResult) mut => VT.IsLeftOf(ref this, ref pPointerThat, out pfResult);
			public HRESULT IsLeftOfOrEqualTo(ref IMarkupPointer pPointerThat, out BOOL pfResult) mut => VT.IsLeftOfOrEqualTo(ref this, ref pPointerThat, out pfResult);
			public HRESULT IsRightOf(ref IMarkupPointer pPointerThat, out BOOL pfResult) mut => VT.IsRightOf(ref this, ref pPointerThat, out pfResult);
			public HRESULT IsRightOfOrEqualTo(ref IMarkupPointer pPointerThat, out BOOL pfResult) mut => VT.IsRightOfOrEqualTo(ref this, ref pPointerThat, out pfResult);
			public HRESULT IsEqualTo(ref IMarkupPointer pPointerThat, out BOOL pfAreEqual) mut => VT.IsEqualTo(ref this, ref pPointerThat, out pfAreEqual);
			public HRESULT MoveUnit(MOVEUNIT_ACTION muAction) mut => VT.MoveUnit(ref this, muAction);
			public HRESULT FindText(PWSTR pchFindText, uint32 dwFlags, ref IMarkupPointer pIEndMatch, ref IMarkupPointer pIEndSearch) mut => VT.FindText(ref this, pchFindText, dwFlags, ref pIEndMatch, ref pIEndSearch);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, out IHTMLDocument2* ppDoc) OwningDoc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, out POINTER_GRAVITY pGravity) Gravity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, POINTER_GRAVITY Gravity) SetGravity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, out BOOL pfCling) Cling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, BOOL fCLing) SetCling;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self) Unposition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, out BOOL pfPositioned) IsPositioned;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, out IMarkupContainer* ppContainer) GetContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IHTMLElement pElement, ELEMENT_ADJACENCY eAdj) MoveAdjacentToElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupPointer pPointer) MoveToPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupContainer pContainer, BOOL fAtStart) MoveToContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, BOOL fMove, out MARKUP_CONTEXT_TYPE pContext, out IHTMLElement* ppElement, out int32 pcch, char16* pchText) Left;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, BOOL fMove, out MARKUP_CONTEXT_TYPE pContext, out IHTMLElement* ppElement, out int32 pcch, char16* pchText) Right;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, out IHTMLElement* ppElemCurrent) CurrentScope;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupPointer pPointerThat, out BOOL pfResult) IsLeftOf;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupPointer pPointerThat, out BOOL pfResult) IsLeftOfOrEqualTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupPointer pPointerThat, out BOOL pfResult) IsRightOf;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupPointer pPointerThat, out BOOL pfResult) IsRightOfOrEqualTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, ref IMarkupPointer pPointerThat, out BOOL pfAreEqual) IsEqualTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, MOVEUNIT_ACTION muAction) MoveUnit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer self, PWSTR pchFindText, uint32 dwFlags, ref IMarkupPointer pIEndMatch, ref IMarkupPointer pIEndSearch) FindText;
			}
		}
		[CRepr]
		public struct IMarkupContainer : IUnknown
		{
			public const new Guid IID = .(0x3050f5f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OwningDoc(out IHTMLDocument2* ppDoc) mut => VT.OwningDoc(ref this, out ppDoc);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupContainer self, out IHTMLDocument2* ppDoc) OwningDoc;
			}
		}
		[CRepr]
		public struct IMarkupContainer2 : IMarkupContainer
		{
			public const new Guid IID = .(0x3050f648, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateChangeLog(ref IHTMLChangeSink pChangeSink, out IHTMLChangeLog* ppChangeLog, BOOL fForward, BOOL fBackward) mut => VT.CreateChangeLog(ref this, ref pChangeSink, out ppChangeLog, fForward, fBackward);
			public HRESULT RegisterForDirtyRange(ref IHTMLChangeSink pChangeSink, out uint32 pdwCookie) mut => VT.RegisterForDirtyRange(ref this, ref pChangeSink, out pdwCookie);
			public HRESULT UnRegisterForDirtyRange(uint32 dwCookie) mut => VT.UnRegisterForDirtyRange(ref this, dwCookie);
			public HRESULT GetAndClearDirtyRange(uint32 dwCookie, ref IMarkupPointer pIPointerBegin, ref IMarkupPointer pIPointerEnd) mut => VT.GetAndClearDirtyRange(ref this, dwCookie, ref pIPointerBegin, ref pIPointerEnd);
			public int32 GetVersionNumber() mut => VT.GetVersionNumber(ref this);
			public HRESULT GetMasterElement(out IHTMLElement* ppElementMaster) mut => VT.GetMasterElement(ref this, out ppElementMaster);

			[CRepr]
			public struct VTable : IMarkupContainer.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupContainer2 self, ref IHTMLChangeSink pChangeSink, out IHTMLChangeLog* ppChangeLog, BOOL fForward, BOOL fBackward) CreateChangeLog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupContainer2 self, ref IHTMLChangeSink pChangeSink, out uint32 pdwCookie) RegisterForDirtyRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupContainer2 self, uint32 dwCookie) UnRegisterForDirtyRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupContainer2 self, uint32 dwCookie, ref IMarkupPointer pIPointerBegin, ref IMarkupPointer pIPointerEnd) GetAndClearDirtyRange;
				public new function [CallingConvention(.Stdcall)] int32(ref IMarkupContainer2 self) GetVersionNumber;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupContainer2 self, out IHTMLElement* ppElementMaster) GetMasterElement;
			}
		}
		[CRepr]
		public struct IHTMLChangeLog : IUnknown
		{
			public const new Guid IID = .(0x3050f649, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetNextChange(ref uint8 pbBuffer, int32 nBufferSize, out int32 pnRecordLength) mut => VT.GetNextChange(ref this, ref pbBuffer, nBufferSize, out pnRecordLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLChangeLog self, ref uint8 pbBuffer, int32 nBufferSize, out int32 pnRecordLength) GetNextChange;
			}
		}
		[CRepr]
		public struct IHTMLChangeSink : IUnknown
		{
			public const new Guid IID = .(0x3050f64a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Notify() mut => VT.Notify(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLChangeSink self) Notify;
			}
		}
		[CRepr]
		public struct ISegmentList : IUnknown
		{
			public const new Guid IID = .(0x3050f605, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateIterator(out ISegmentListIterator* ppIIter) mut => VT.CreateIterator(ref this, out ppIIter);
			public HRESULT ComGetType(out SELECTION_TYPE peType) mut => VT.ComGetType(ref this, out peType);
			public HRESULT IsEmpty(out BOOL pfEmpty) mut => VT.IsEmpty(ref this, out pfEmpty);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentList self, out ISegmentListIterator* ppIIter) CreateIterator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentList self, out SELECTION_TYPE peType) ComGetType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentList self, out BOOL pfEmpty) IsEmpty;
			}
		}
		[CRepr]
		public struct ISegmentListIterator : IUnknown
		{
			public const new Guid IID = .(0x3050f692, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Current(out ISegment* ppISegment) mut => VT.Current(ref this, out ppISegment);
			public HRESULT First() mut => VT.First(ref this);
			public HRESULT IsDone() mut => VT.IsDone(ref this);
			public HRESULT Advance() mut => VT.Advance(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentListIterator self, out ISegment* ppISegment) Current;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentListIterator self) First;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentListIterator self) IsDone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegmentListIterator self) Advance;
			}
		}
		[CRepr]
		public struct IHTMLCaret : IUnknown
		{
			public const new Guid IID = .(0x3050f604, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MoveCaretToPointer(ref IDisplayPointer pDispPointer, BOOL fScrollIntoView, CARET_DIRECTION eDir) mut => VT.MoveCaretToPointer(ref this, ref pDispPointer, fScrollIntoView, eDir);
			public HRESULT MoveCaretToPointerEx(ref IDisplayPointer pDispPointer, BOOL fVisible, BOOL fScrollIntoView, CARET_DIRECTION eDir) mut => VT.MoveCaretToPointerEx(ref this, ref pDispPointer, fVisible, fScrollIntoView, eDir);
			public HRESULT MoveMarkupPointerToCaret(ref IMarkupPointer pIMarkupPointer) mut => VT.MoveMarkupPointerToCaret(ref this, ref pIMarkupPointer);
			public HRESULT MoveDisplayPointerToCaret(ref IDisplayPointer pDispPointer) mut => VT.MoveDisplayPointerToCaret(ref this, ref pDispPointer);
			public HRESULT IsVisible(out BOOL pIsVisible) mut => VT.IsVisible(ref this, out pIsVisible);
			public HRESULT Show(BOOL fScrollIntoView) mut => VT.Show(ref this, fScrollIntoView);
			public HRESULT Hide() mut => VT.Hide(ref this);
			public HRESULT InsertText(PWSTR pText, int32 lLen) mut => VT.InsertText(ref this, pText, lLen);
			public HRESULT ScrollIntoView() mut => VT.ScrollIntoView(ref this);
			public HRESULT GetLocation(out POINT pPoint, BOOL fTranslate) mut => VT.GetLocation(ref this, out pPoint, fTranslate);
			public HRESULT GetCaretDirection(out CARET_DIRECTION peDir) mut => VT.GetCaretDirection(ref this, out peDir);
			public HRESULT SetCaretDirection(CARET_DIRECTION eDir) mut => VT.SetCaretDirection(ref this, eDir);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, ref IDisplayPointer pDispPointer, BOOL fScrollIntoView, CARET_DIRECTION eDir) MoveCaretToPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, ref IDisplayPointer pDispPointer, BOOL fVisible, BOOL fScrollIntoView, CARET_DIRECTION eDir) MoveCaretToPointerEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, ref IMarkupPointer pIMarkupPointer) MoveMarkupPointerToCaret;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, ref IDisplayPointer pDispPointer) MoveDisplayPointerToCaret;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, out BOOL pIsVisible) IsVisible;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, BOOL fScrollIntoView) Show;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self) Hide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, PWSTR pText, int32 lLen) InsertText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self) ScrollIntoView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, out POINT pPoint, BOOL fTranslate) GetLocation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, out CARET_DIRECTION peDir) GetCaretDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLCaret self, CARET_DIRECTION eDir) SetCaretDirection;
			}
		}
		[CRepr]
		public struct ISegment : IUnknown
		{
			public const new Guid IID = .(0x3050f683, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPointers(ref IMarkupPointer pIStart, ref IMarkupPointer pIEnd) mut => VT.GetPointers(ref this, ref pIStart, ref pIEnd);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISegment self, ref IMarkupPointer pIStart, ref IMarkupPointer pIEnd) GetPointers;
			}
		}
		[CRepr]
		public struct IElementSegment : ISegment
		{
			public const new Guid IID = .(0x3050f68f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetElement(out IHTMLElement* ppIElement) mut => VT.GetElement(ref this, out ppIElement);
			public HRESULT SetPrimary(BOOL fPrimary) mut => VT.SetPrimary(ref this, fPrimary);
			public HRESULT IsPrimary(out BOOL pfPrimary) mut => VT.IsPrimary(ref this, out pfPrimary);

			[CRepr]
			public struct VTable : ISegment.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementSegment self, out IHTMLElement* ppIElement) GetElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementSegment self, BOOL fPrimary) SetPrimary;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementSegment self, out BOOL pfPrimary) IsPrimary;
			}
		}
		[CRepr]
		public struct IHighlightSegment : ISegment
		{
			public const new Guid IID = .(0x3050f690, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : ISegment.VTable {}
		}
		[CRepr]
		public struct IHighlightRenderingServices : IUnknown
		{
			public const new Guid IID = .(0x3050f606, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddSegment(ref IDisplayPointer pDispPointerStart, ref IDisplayPointer pDispPointerEnd, ref IHTMLRenderStyle pIRenderStyle, out IHighlightSegment* ppISegment) mut => VT.AddSegment(ref this, ref pDispPointerStart, ref pDispPointerEnd, ref pIRenderStyle, out ppISegment);
			public HRESULT MoveSegmentToPointers(ref IHighlightSegment pISegment, ref IDisplayPointer pDispPointerStart, ref IDisplayPointer pDispPointerEnd) mut => VT.MoveSegmentToPointers(ref this, ref pISegment, ref pDispPointerStart, ref pDispPointerEnd);
			public HRESULT RemoveSegment(ref IHighlightSegment pISegment) mut => VT.RemoveSegment(ref this, ref pISegment);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHighlightRenderingServices self, ref IDisplayPointer pDispPointerStart, ref IDisplayPointer pDispPointerEnd, ref IHTMLRenderStyle pIRenderStyle, out IHighlightSegment* ppISegment) AddSegment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHighlightRenderingServices self, ref IHighlightSegment pISegment, ref IDisplayPointer pDispPointerStart, ref IDisplayPointer pDispPointerEnd) MoveSegmentToPointers;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHighlightRenderingServices self, ref IHighlightSegment pISegment) RemoveSegment;
			}
		}
		[CRepr]
		public struct ILineInfo : IUnknown
		{
			public const new Guid IID = .(0x3050f7e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_x(out int32 p) mut => VT.get_x(ref this, out p);
			public HRESULT get_baseLine(out int32 p) mut => VT.get_baseLine(ref this, out p);
			public HRESULT get_textDescent(out int32 p) mut => VT.get_textDescent(ref this, out p);
			public HRESULT get_textHeight(out int32 p) mut => VT.get_textHeight(ref this, out p);
			public HRESULT get_lineDirection(out int32 p) mut => VT.get_lineDirection(ref this, out p);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILineInfo self, out int32 p) get_x;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILineInfo self, out int32 p) get_baseLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILineInfo self, out int32 p) get_textDescent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILineInfo self, out int32 p) get_textHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILineInfo self, out int32 p) get_lineDirection;
			}
		}
		[CRepr]
		public struct IDisplayPointer : IUnknown
		{
			public const new Guid IID = .(0x3050f69e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MoveToPoint(POINT ptPoint, COORD_SYSTEM eCoordSystem, ref IHTMLElement pElementContext, uint32 dwHitTestOptions, out uint32 pdwHitTestResults) mut => VT.MoveToPoint(ref this, ptPoint, eCoordSystem, ref pElementContext, dwHitTestOptions, out pdwHitTestResults);
			public HRESULT MoveUnit(DISPLAY_MOVEUNIT eMoveUnit, int32 lXPos) mut => VT.MoveUnit(ref this, eMoveUnit, lXPos);
			public HRESULT PositionMarkupPointer(ref IMarkupPointer pMarkupPointer) mut => VT.PositionMarkupPointer(ref this, ref pMarkupPointer);
			public HRESULT MoveToPointer(ref IDisplayPointer pDispPointer) mut => VT.MoveToPointer(ref this, ref pDispPointer);
			public HRESULT SetPointerGravity(POINTER_GRAVITY eGravity) mut => VT.SetPointerGravity(ref this, eGravity);
			public HRESULT GetPointerGravity(out POINTER_GRAVITY peGravity) mut => VT.GetPointerGravity(ref this, out peGravity);
			public HRESULT SetDisplayGravity(DISPLAY_GRAVITY eGravity) mut => VT.SetDisplayGravity(ref this, eGravity);
			public HRESULT GetDisplayGravity(out DISPLAY_GRAVITY peGravity) mut => VT.GetDisplayGravity(ref this, out peGravity);
			public HRESULT IsPositioned(out BOOL pfPositioned) mut => VT.IsPositioned(ref this, out pfPositioned);
			public HRESULT Unposition() mut => VT.Unposition(ref this);
			public HRESULT IsEqualTo(ref IDisplayPointer pDispPointer, out BOOL pfIsEqual) mut => VT.IsEqualTo(ref this, ref pDispPointer, out pfIsEqual);
			public HRESULT IsLeftOf(ref IDisplayPointer pDispPointer, out BOOL pfIsLeftOf) mut => VT.IsLeftOf(ref this, ref pDispPointer, out pfIsLeftOf);
			public HRESULT IsRightOf(ref IDisplayPointer pDispPointer, out BOOL pfIsRightOf) mut => VT.IsRightOf(ref this, ref pDispPointer, out pfIsRightOf);
			public HRESULT IsAtBOL(out BOOL pfBOL) mut => VT.IsAtBOL(ref this, out pfBOL);
			public HRESULT MoveToMarkupPointer(ref IMarkupPointer pPointer, ref IDisplayPointer pDispLineContext) mut => VT.MoveToMarkupPointer(ref this, ref pPointer, ref pDispLineContext);
			public HRESULT ScrollIntoView() mut => VT.ScrollIntoView(ref this);
			public HRESULT GetLineInfo(out ILineInfo* ppLineInfo) mut => VT.GetLineInfo(ref this, out ppLineInfo);
			public HRESULT GetFlowElement(out IHTMLElement* ppLayoutElement) mut => VT.GetFlowElement(ref this, out ppLayoutElement);
			public HRESULT QueryBreaks(out uint32 pdwBreaks) mut => VT.QueryBreaks(ref this, out pdwBreaks);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, POINT ptPoint, COORD_SYSTEM eCoordSystem, ref IHTMLElement pElementContext, uint32 dwHitTestOptions, out uint32 pdwHitTestResults) MoveToPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, DISPLAY_MOVEUNIT eMoveUnit, int32 lXPos) MoveUnit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, ref IMarkupPointer pMarkupPointer) PositionMarkupPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, ref IDisplayPointer pDispPointer) MoveToPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, POINTER_GRAVITY eGravity) SetPointerGravity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out POINTER_GRAVITY peGravity) GetPointerGravity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, DISPLAY_GRAVITY eGravity) SetDisplayGravity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out DISPLAY_GRAVITY peGravity) GetDisplayGravity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out BOOL pfPositioned) IsPositioned;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self) Unposition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, ref IDisplayPointer pDispPointer, out BOOL pfIsEqual) IsEqualTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, ref IDisplayPointer pDispPointer, out BOOL pfIsLeftOf) IsLeftOf;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, ref IDisplayPointer pDispPointer, out BOOL pfIsRightOf) IsRightOf;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out BOOL pfBOL) IsAtBOL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, ref IMarkupPointer pPointer, ref IDisplayPointer pDispLineContext) MoveToMarkupPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self) ScrollIntoView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out ILineInfo* ppLineInfo) GetLineInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out IHTMLElement* ppLayoutElement) GetFlowElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayPointer self, out uint32 pdwBreaks) QueryBreaks;
			}
		}
		[CRepr]
		public struct IDisplayServices : IUnknown
		{
			public const new Guid IID = .(0x3050f69d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateDisplayPointer(out IDisplayPointer* ppDispPointer) mut => VT.CreateDisplayPointer(ref this, out ppDispPointer);
			public HRESULT TransformRect(out RECT pRect, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, ref IHTMLElement pIElement) mut => VT.TransformRect(ref this, out pRect, eSource, eDestination, ref pIElement);
			public HRESULT TransformPoint(out POINT pPoint, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, ref IHTMLElement pIElement) mut => VT.TransformPoint(ref this, out pPoint, eSource, eDestination, ref pIElement);
			public HRESULT GetCaret(out IHTMLCaret* ppCaret) mut => VT.GetCaret(ref this, out ppCaret);
			public HRESULT GetComputedStyle(ref IMarkupPointer pPointer, out IHTMLComputedStyle* ppComputedStyle) mut => VT.GetComputedStyle(ref this, ref pPointer, out ppComputedStyle);
			public HRESULT ScrollRectIntoView(ref IHTMLElement pIElement, RECT rect) mut => VT.ScrollRectIntoView(ref this, ref pIElement, rect);
			public HRESULT HasFlowLayout(ref IHTMLElement pIElement, out BOOL pfHasFlowLayout) mut => VT.HasFlowLayout(ref this, ref pIElement, out pfHasFlowLayout);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, out IDisplayPointer* ppDispPointer) CreateDisplayPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, out RECT pRect, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, ref IHTMLElement pIElement) TransformRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, out POINT pPoint, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, ref IHTMLElement pIElement) TransformPoint;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, out IHTMLCaret* ppCaret) GetCaret;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, ref IMarkupPointer pPointer, out IHTMLComputedStyle* ppComputedStyle) GetComputedStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, ref IHTMLElement pIElement, RECT rect) ScrollRectIntoView;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDisplayServices self, ref IHTMLElement pIElement, out BOOL pfHasFlowLayout) HasFlowLayout;
			}
		}
		[CRepr]
		public struct IHtmlDlgSafeHelper : IDispatch
		{
			public const new Guid IID = .(0x3050f81a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT choosecolordlg(VARIANT initColor, out VARIANT rgbColor) mut => VT.choosecolordlg(ref this, initColor, out rgbColor);
			public HRESULT getCharset(BSTR fontName, out VARIANT charset) mut => VT.getCharset(ref this, fontName, out charset);
			public HRESULT get_Fonts(out IDispatch* p) mut => VT.get_Fonts(ref this, out p);
			public HRESULT get_BlockFormats(out IDispatch* p) mut => VT.get_BlockFormats(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHtmlDlgSafeHelper self, VARIANT initColor, out VARIANT rgbColor) choosecolordlg;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHtmlDlgSafeHelper self, BSTR fontName, out VARIANT charset) getCharset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHtmlDlgSafeHelper self, out IDispatch* p) get_Fonts;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHtmlDlgSafeHelper self, out IDispatch* p) get_BlockFormats;
			}
		}
		[CRepr]
		public struct IBlockFormats : IDispatch
		{
			public const new Guid IID = .(0x3050f830, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get__NewEnum(out IUnknown* p) mut => VT.get__NewEnum(ref this, out p);
			public HRESULT get_Count(out int32 p) mut => VT.get_Count(ref this, out p);
			public HRESULT Item(ref VARIANT pvarIndex, out BSTR pbstrBlockFormat) mut => VT.Item(ref this, ref pvarIndex, out pbstrBlockFormat);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBlockFormats self, out IUnknown* p) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBlockFormats self, out int32 p) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBlockFormats self, ref VARIANT pvarIndex, out BSTR pbstrBlockFormat) Item;
			}
		}
		[CRepr]
		public struct IFontNames : IDispatch
		{
			public const new Guid IID = .(0x3050f839, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get__NewEnum(out IUnknown* p) mut => VT.get__NewEnum(ref this, out p);
			public HRESULT get_Count(out int32 p) mut => VT.get_Count(ref this, out p);
			public HRESULT Item(ref VARIANT pvarIndex, out BSTR pbstrFontName) mut => VT.Item(ref this, ref pvarIndex, out pbstrFontName);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFontNames self, out IUnknown* p) get__NewEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFontNames self, out int32 p) get_Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IFontNames self, ref VARIANT pvarIndex, out BSTR pbstrFontName) Item;
			}
		}
		[CRepr]
		public struct ICSSFilter : IUnknown
		{
			public const new Guid IID = .(0x3050f3ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetSite(ref ICSSFilterSite pSink) mut => VT.SetSite(ref this, ref pSink);
			public HRESULT OnAmbientPropertyChange(int32 dispid) mut => VT.OnAmbientPropertyChange(ref this, dispid);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICSSFilter self, ref ICSSFilterSite pSink) SetSite;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICSSFilter self, int32 dispid) OnAmbientPropertyChange;
			}
		}
		[CRepr]
		public struct ISecureUrlHost : IUnknown
		{
			public const new Guid IID = .(0xc81984c4, 0x74c8, 0x11d2, 0xba, 0xa9, 0x00, 0xc0, 0x4f, 0xc2, 0x04, 0x0e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ValidateSecureUrl(out BOOL pfAllow, PWSTR pchUrlInQuestion, uint32 dwFlags) mut => VT.ValidateSecureUrl(ref this, out pfAllow, pchUrlInQuestion, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISecureUrlHost self, out BOOL pfAllow, PWSTR pchUrlInQuestion, uint32 dwFlags) ValidateSecureUrl;
			}
		}
		[CRepr]
		public struct IMarkupServices : IUnknown
		{
			public const new Guid IID = .(0x3050f4a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateMarkupPointer(out IMarkupPointer* ppPointer) mut => VT.CreateMarkupPointer(ref this, out ppPointer);
			public HRESULT CreateMarkupContainer(out IMarkupContainer* ppMarkupContainer) mut => VT.CreateMarkupContainer(ref this, out ppMarkupContainer);
			public HRESULT CreateElement(ELEMENT_TAG_ID tagID, PWSTR pchAttributes, out IHTMLElement* ppElement) mut => VT.CreateElement(ref this, tagID, pchAttributes, out ppElement);
			public HRESULT CloneElement(ref IHTMLElement pElemCloneThis, out IHTMLElement* ppElementTheClone) mut => VT.CloneElement(ref this, ref pElemCloneThis, out ppElementTheClone);
			public HRESULT InsertElement(ref IHTMLElement pElementInsert, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) mut => VT.InsertElement(ref this, ref pElementInsert, ref pPointerStart, ref pPointerFinish);
			public HRESULT RemoveElement(ref IHTMLElement pElementRemove) mut => VT.RemoveElement(ref this, ref pElementRemove);
			public HRESULT Remove(ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) mut => VT.Remove(ref this, ref pPointerStart, ref pPointerFinish);
			public HRESULT Copy(ref IMarkupPointer pPointerSourceStart, ref IMarkupPointer pPointerSourceFinish, ref IMarkupPointer pPointerTarget) mut => VT.Copy(ref this, ref pPointerSourceStart, ref pPointerSourceFinish, ref pPointerTarget);
			public HRESULT Move(ref IMarkupPointer pPointerSourceStart, ref IMarkupPointer pPointerSourceFinish, ref IMarkupPointer pPointerTarget) mut => VT.Move(ref this, ref pPointerSourceStart, ref pPointerSourceFinish, ref pPointerTarget);
			public HRESULT InsertText(PWSTR pchText, int32 cch, ref IMarkupPointer pPointerTarget) mut => VT.InsertText(ref this, pchText, cch, ref pPointerTarget);
			public HRESULT ParseString(PWSTR pchHTML, uint32 dwFlags, out IMarkupContainer* ppContainerResult, ref IMarkupPointer ppPointerStart, ref IMarkupPointer ppPointerFinish) mut => VT.ParseString(ref this, pchHTML, dwFlags, out ppContainerResult, ref ppPointerStart, ref ppPointerFinish);
			public HRESULT ParseGlobal(int hglobalHTML, uint32 dwFlags, out IMarkupContainer* ppContainerResult, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) mut => VT.ParseGlobal(ref this, hglobalHTML, dwFlags, out ppContainerResult, ref pPointerStart, ref pPointerFinish);
			public HRESULT IsScopedElement(ref IHTMLElement pElement, out BOOL pfScoped) mut => VT.IsScopedElement(ref this, ref pElement, out pfScoped);
			public HRESULT GetElementTagId(ref IHTMLElement pElement, out ELEMENT_TAG_ID ptagId) mut => VT.GetElementTagId(ref this, ref pElement, out ptagId);
			public HRESULT GetTagIDForName(BSTR bstrName, out ELEMENT_TAG_ID ptagId) mut => VT.GetTagIDForName(ref this, bstrName, out ptagId);
			public HRESULT GetNameForTagID(ELEMENT_TAG_ID tagId, out BSTR pbstrName) mut => VT.GetNameForTagID(ref this, tagId, out pbstrName);
			public HRESULT MovePointersToRange(ref IHTMLTxtRange pIRange, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) mut => VT.MovePointersToRange(ref this, ref pIRange, ref pPointerStart, ref pPointerFinish);
			public HRESULT MoveRangeToPointers(ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish, ref IHTMLTxtRange pIRange) mut => VT.MoveRangeToPointers(ref this, ref pPointerStart, ref pPointerFinish, ref pIRange);
			public HRESULT BeginUndoUnit(PWSTR pchTitle) mut => VT.BeginUndoUnit(ref this, pchTitle);
			public HRESULT EndUndoUnit() mut => VT.EndUndoUnit(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, out IMarkupPointer* ppPointer) CreateMarkupPointer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, out IMarkupContainer* ppMarkupContainer) CreateMarkupContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ELEMENT_TAG_ID tagID, PWSTR pchAttributes, out IHTMLElement* ppElement) CreateElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IHTMLElement pElemCloneThis, out IHTMLElement* ppElementTheClone) CloneElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IHTMLElement pElementInsert, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) InsertElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IHTMLElement pElementRemove) RemoveElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) Remove;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IMarkupPointer pPointerSourceStart, ref IMarkupPointer pPointerSourceFinish, ref IMarkupPointer pPointerTarget) Copy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IMarkupPointer pPointerSourceStart, ref IMarkupPointer pPointerSourceFinish, ref IMarkupPointer pPointerTarget) Move;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, PWSTR pchText, int32 cch, ref IMarkupPointer pPointerTarget) InsertText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, PWSTR pchHTML, uint32 dwFlags, out IMarkupContainer* ppContainerResult, ref IMarkupPointer ppPointerStart, ref IMarkupPointer ppPointerFinish) ParseString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, int hglobalHTML, uint32 dwFlags, out IMarkupContainer* ppContainerResult, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) ParseGlobal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IHTMLElement pElement, out BOOL pfScoped) IsScopedElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IHTMLElement pElement, out ELEMENT_TAG_ID ptagId) GetElementTagId;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, BSTR bstrName, out ELEMENT_TAG_ID ptagId) GetTagIDForName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ELEMENT_TAG_ID tagId, out BSTR pbstrName) GetNameForTagID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IHTMLTxtRange pIRange, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) MovePointersToRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish, ref IHTMLTxtRange pIRange) MoveRangeToPointers;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self, PWSTR pchTitle) BeginUndoUnit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices self) EndUndoUnit;
			}
		}
		[CRepr]
		public struct IMarkupServices2 : IMarkupServices
		{
			public const new Guid IID = .(0x3050f682, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ParseGlobalEx(int hglobalHTML, uint32 dwFlags, ref IMarkupContainer pContext, out IMarkupContainer* ppContainerResult, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) mut => VT.ParseGlobalEx(ref this, hglobalHTML, dwFlags, ref pContext, out ppContainerResult, ref pPointerStart, ref pPointerFinish);
			public HRESULT ValidateElements(ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish, ref IMarkupPointer pPointerTarget, out IMarkupPointer pPointerStatus, out IHTMLElement* ppElemFailBottom, out IHTMLElement* ppElemFailTop) mut => VT.ValidateElements(ref this, ref pPointerStart, ref pPointerFinish, ref pPointerTarget, out pPointerStatus, out ppElemFailBottom, out ppElemFailTop);
			public HRESULT SaveSegmentsToClipboard(ref ISegmentList pSegmentList, uint32 dwFlags) mut => VT.SaveSegmentsToClipboard(ref this, ref pSegmentList, dwFlags);

			[CRepr]
			public struct VTable : IMarkupServices.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices2 self, int hglobalHTML, uint32 dwFlags, ref IMarkupContainer pContext, out IMarkupContainer* ppContainerResult, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish) ParseGlobalEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices2 self, ref IMarkupPointer pPointerStart, ref IMarkupPointer pPointerFinish, ref IMarkupPointer pPointerTarget, out IMarkupPointer pPointerStatus, out IHTMLElement* ppElemFailBottom, out IHTMLElement* ppElemFailTop) ValidateElements;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupServices2 self, ref ISegmentList pSegmentList, uint32 dwFlags) SaveSegmentsToClipboard;
			}
		}
		[CRepr]
		public struct IHTMLChangePlayback : IUnknown
		{
			public const new Guid IID = .(0x3050f6e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ExecChange(ref uint8 pbRecord, BOOL fForward) mut => VT.ExecChange(ref this, ref pbRecord, fForward);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLChangePlayback self, ref uint8 pbRecord, BOOL fForward) ExecChange;
			}
		}
		[CRepr]
		public struct IMarkupPointer2 : IMarkupPointer
		{
			public const new Guid IID = .(0x3050f675, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsAtWordBreak(out BOOL pfAtBreak) mut => VT.IsAtWordBreak(ref this, out pfAtBreak);
			public HRESULT GetMarkupPosition(out int32 plMP) mut => VT.GetMarkupPosition(ref this, out plMP);
			public HRESULT MoveToMarkupPosition(ref IMarkupContainer pContainer, int32 lMP) mut => VT.MoveToMarkupPosition(ref this, ref pContainer, lMP);
			public HRESULT MoveUnitBounded(MOVEUNIT_ACTION muAction, ref IMarkupPointer pIBoundary) mut => VT.MoveUnitBounded(ref this, muAction, ref pIBoundary);
			public HRESULT IsInsideURL(ref IMarkupPointer pRight, out BOOL pfResult) mut => VT.IsInsideURL(ref this, ref pRight, out pfResult);
			public HRESULT MoveToContent(ref IHTMLElement pIElement, BOOL fAtStart) mut => VT.MoveToContent(ref this, ref pIElement, fAtStart);

			[CRepr]
			public struct VTable : IMarkupPointer.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer2 self, out BOOL pfAtBreak) IsAtWordBreak;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer2 self, out int32 plMP) GetMarkupPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer2 self, ref IMarkupContainer pContainer, int32 lMP) MoveToMarkupPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer2 self, MOVEUNIT_ACTION muAction, ref IMarkupPointer pIBoundary) MoveUnitBounded;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer2 self, ref IMarkupPointer pRight, out BOOL pfResult) IsInsideURL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupPointer2 self, ref IHTMLElement pIElement, BOOL fAtStart) MoveToContent;
			}
		}
		[CRepr]
		public struct IMarkupTextFrags : IUnknown
		{
			public const new Guid IID = .(0x3050f5fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTextFragCount(out int32 pcFrags) mut => VT.GetTextFragCount(ref this, out pcFrags);
			public HRESULT GetTextFrag(int32 iFrag, out BSTR pbstrFrag, ref IMarkupPointer pPointerFrag) mut => VT.GetTextFrag(ref this, iFrag, out pbstrFrag, ref pPointerFrag);
			public HRESULT RemoveTextFrag(int32 iFrag) mut => VT.RemoveTextFrag(ref this, iFrag);
			public HRESULT InsertTextFrag(int32 iFrag, BSTR bstrInsert, ref IMarkupPointer pPointerInsert) mut => VT.InsertTextFrag(ref this, iFrag, bstrInsert, ref pPointerInsert);
			public HRESULT FindTextFragFromMarkupPointer(ref IMarkupPointer pPointerFind, out int32 piFrag, out BOOL pfFragFound) mut => VT.FindTextFragFromMarkupPointer(ref this, ref pPointerFind, out piFrag, out pfFragFound);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupTextFrags self, out int32 pcFrags) GetTextFragCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupTextFrags self, int32 iFrag, out BSTR pbstrFrag, ref IMarkupPointer pPointerFrag) GetTextFrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupTextFrags self, int32 iFrag) RemoveTextFrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupTextFrags self, int32 iFrag, BSTR bstrInsert, ref IMarkupPointer pPointerInsert) InsertTextFrag;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMarkupTextFrags self, ref IMarkupPointer pPointerFind, out int32 piFrag, out BOOL pfFragFound) FindTextFragFromMarkupPointer;
			}
		}
		[CRepr]
		public struct IXMLGenericParse : IUnknown
		{
			public const new Guid IID = .(0xe4e23071, 0x4d07, 0x11d2, 0xae, 0x76, 0x00, 0x80, 0xc7, 0x3b, 0xc1, 0x99);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetGenericParse(int16 fDoGeneric) mut => VT.SetGenericParse(ref this, fDoGeneric);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IXMLGenericParse self, int16 fDoGeneric) SetGenericParse;
			}
		}
		[CRepr]
		public struct IHTMLEditHost : IUnknown
		{
			public const new Guid IID = .(0x3050f6a0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SnapRect(ref IHTMLElement pIElement, out RECT prcNew, ELEMENT_CORNER eHandle) mut => VT.SnapRect(ref this, ref pIElement, out prcNew, eHandle);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditHost self, ref IHTMLElement pIElement, out RECT prcNew, ELEMENT_CORNER eHandle) SnapRect;
			}
		}
		[CRepr]
		public struct IHTMLEditHost2 : IHTMLEditHost
		{
			public const new Guid IID = .(0x3050f848, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PreDrag() mut => VT.PreDrag(ref this);

			[CRepr]
			public struct VTable : IHTMLEditHost.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditHost2 self) PreDrag;
			}
		}
		[CRepr]
		public struct ISequenceNumber : IUnknown
		{
			public const new Guid IID = .(0x3050f6c1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSequenceNumber(int32 nCurrent, out int32 pnNew) mut => VT.GetSequenceNumber(ref this, nCurrent, out pnNew);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISequenceNumber self, int32 nCurrent, out int32 pnNew) GetSequenceNumber;
			}
		}
		[CRepr]
		public struct IIMEServices : IUnknown
		{
			public const new Guid IID = .(0x3050f6ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetActiveIMM(out IActiveIMMApp* ppActiveIMM) mut => VT.GetActiveIMM(ref this, out ppActiveIMM);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIMEServices self, out IActiveIMMApp* ppActiveIMM) GetActiveIMM;
			}
		}
		[CRepr]
		public struct ISelectionServicesListener : IUnknown
		{
			public const new Guid IID = .(0x3050f699, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT BeginSelectionUndo() mut => VT.BeginSelectionUndo(ref this);
			public HRESULT EndSelectionUndo() mut => VT.EndSelectionUndo(ref this);
			public HRESULT OnSelectedElementExit(ref IMarkupPointer pIElementStart, ref IMarkupPointer pIElementEnd, ref IMarkupPointer pIElementContentStart, ref IMarkupPointer pIElementContentEnd) mut => VT.OnSelectedElementExit(ref this, ref pIElementStart, ref pIElementEnd, ref pIElementContentStart, ref pIElementContentEnd);
			public HRESULT OnChangeType(SELECTION_TYPE eType, ref ISelectionServicesListener pIListener) mut => VT.OnChangeType(ref this, eType, ref pIListener);
			public HRESULT GetTypeDetail(out BSTR pTypeDetail) mut => VT.GetTypeDetail(ref this, out pTypeDetail);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServicesListener self) BeginSelectionUndo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServicesListener self) EndSelectionUndo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServicesListener self, ref IMarkupPointer pIElementStart, ref IMarkupPointer pIElementEnd, ref IMarkupPointer pIElementContentStart, ref IMarkupPointer pIElementContentEnd) OnSelectedElementExit;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServicesListener self, SELECTION_TYPE eType, ref ISelectionServicesListener pIListener) OnChangeType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServicesListener self, out BSTR pTypeDetail) GetTypeDetail;
			}
		}
		[CRepr]
		public struct ISelectionServices : IUnknown
		{
			public const new Guid IID = .(0x3050f684, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetSelectionType(SELECTION_TYPE eType, ref ISelectionServicesListener pIListener) mut => VT.SetSelectionType(ref this, eType, ref pIListener);
			public HRESULT GetMarkupContainer(out IMarkupContainer* ppIContainer) mut => VT.GetMarkupContainer(ref this, out ppIContainer);
			public HRESULT AddSegment(ref IMarkupPointer pIStart, ref IMarkupPointer pIEnd, out ISegment* ppISegmentAdded) mut => VT.AddSegment(ref this, ref pIStart, ref pIEnd, out ppISegmentAdded);
			public HRESULT AddElementSegment(ref IHTMLElement pIElement, out IElementSegment* ppISegmentAdded) mut => VT.AddElementSegment(ref this, ref pIElement, out ppISegmentAdded);
			public HRESULT RemoveSegment(ref ISegment pISegment) mut => VT.RemoveSegment(ref this, ref pISegment);
			public HRESULT GetSelectionServicesListener(out ISelectionServicesListener* ppISelectionServicesListener) mut => VT.GetSelectionServicesListener(ref this, out ppISelectionServicesListener);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServices self, SELECTION_TYPE eType, ref ISelectionServicesListener pIListener) SetSelectionType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServices self, out IMarkupContainer* ppIContainer) GetMarkupContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServices self, ref IMarkupPointer pIStart, ref IMarkupPointer pIEnd, out ISegment* ppISegmentAdded) AddSegment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServices self, ref IHTMLElement pIElement, out IElementSegment* ppISegmentAdded) AddElementSegment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServices self, ref ISegment pISegment) RemoveSegment;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISelectionServices self, out ISelectionServicesListener* ppISelectionServicesListener) GetSelectionServicesListener;
			}
		}
		[CRepr]
		public struct IHTMLEditDesigner : IUnknown
		{
			public const new Guid IID = .(0x3050f662, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PreHandleEvent(int32 inEvtDispId, ref IHTMLEventObj pIEventObj) mut => VT.PreHandleEvent(ref this, inEvtDispId, ref pIEventObj);
			public HRESULT PostHandleEvent(int32 inEvtDispId, ref IHTMLEventObj pIEventObj) mut => VT.PostHandleEvent(ref this, inEvtDispId, ref pIEventObj);
			public HRESULT TranslateAccelerator(int32 inEvtDispId, ref IHTMLEventObj pIEventObj) mut => VT.TranslateAccelerator(ref this, inEvtDispId, ref pIEventObj);
			public HRESULT PostEditorEventNotify(int32 inEvtDispId, ref IHTMLEventObj pIEventObj) mut => VT.PostEditorEventNotify(ref this, inEvtDispId, ref pIEventObj);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditDesigner self, int32 inEvtDispId, ref IHTMLEventObj pIEventObj) PreHandleEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditDesigner self, int32 inEvtDispId, ref IHTMLEventObj pIEventObj) PostHandleEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditDesigner self, int32 inEvtDispId, ref IHTMLEventObj pIEventObj) TranslateAccelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditDesigner self, int32 inEvtDispId, ref IHTMLEventObj pIEventObj) PostEditorEventNotify;
			}
		}
		[CRepr]
		public struct IHTMLEditServices : IUnknown
		{
			public const new Guid IID = .(0x3050f663, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddDesigner(ref IHTMLEditDesigner pIDesigner) mut => VT.AddDesigner(ref this, ref pIDesigner);
			public HRESULT RemoveDesigner(ref IHTMLEditDesigner pIDesigner) mut => VT.RemoveDesigner(ref this, ref pIDesigner);
			public HRESULT GetSelectionServices(ref IMarkupContainer pIContainer, out ISelectionServices* ppSelSvc) mut => VT.GetSelectionServices(ref this, ref pIContainer, out ppSelSvc);
			public HRESULT MoveToSelectionAnchor(ref IMarkupPointer pIStartAnchor) mut => VT.MoveToSelectionAnchor(ref this, ref pIStartAnchor);
			public HRESULT MoveToSelectionEnd(ref IMarkupPointer pIEndAnchor) mut => VT.MoveToSelectionEnd(ref this, ref pIEndAnchor);
			public HRESULT SelectRange(ref IMarkupPointer pStart, ref IMarkupPointer pEnd, SELECTION_TYPE eType) mut => VT.SelectRange(ref this, ref pStart, ref pEnd, eType);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices self, ref IHTMLEditDesigner pIDesigner) AddDesigner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices self, ref IHTMLEditDesigner pIDesigner) RemoveDesigner;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices self, ref IMarkupContainer pIContainer, out ISelectionServices* ppSelSvc) GetSelectionServices;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices self, ref IMarkupPointer pIStartAnchor) MoveToSelectionAnchor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices self, ref IMarkupPointer pIEndAnchor) MoveToSelectionEnd;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices self, ref IMarkupPointer pStart, ref IMarkupPointer pEnd, SELECTION_TYPE eType) SelectRange;
			}
		}
		[CRepr]
		public struct IHTMLEditServices2 : IHTMLEditServices
		{
			public const new Guid IID = .(0x3050f812, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MoveToSelectionAnchorEx(ref IDisplayPointer pIStartAnchor) mut => VT.MoveToSelectionAnchorEx(ref this, ref pIStartAnchor);
			public HRESULT MoveToSelectionEndEx(ref IDisplayPointer pIEndAnchor) mut => VT.MoveToSelectionEndEx(ref this, ref pIEndAnchor);
			public HRESULT FreezeVirtualCaretPos(BOOL fReCompute) mut => VT.FreezeVirtualCaretPos(ref this, fReCompute);
			public HRESULT UnFreezeVirtualCaretPos(BOOL fReset) mut => VT.UnFreezeVirtualCaretPos(ref this, fReset);

			[CRepr]
			public struct VTable : IHTMLEditServices.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices2 self, ref IDisplayPointer pIStartAnchor) MoveToSelectionAnchorEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices2 self, ref IDisplayPointer pIEndAnchor) MoveToSelectionEndEx;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices2 self, BOOL fReCompute) FreezeVirtualCaretPos;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLEditServices2 self, BOOL fReset) UnFreezeVirtualCaretPos;
			}
		}
		[CRepr]
		public struct IHTMLComputedStyle : IUnknown
		{
			public const new Guid IID = .(0x3050f6c3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_bold(out int16 p) mut => VT.get_bold(ref this, out p);
			public HRESULT get_italic(out int16 p) mut => VT.get_italic(ref this, out p);
			public HRESULT get_underline(out int16 p) mut => VT.get_underline(ref this, out p);
			public HRESULT get_overline(out int16 p) mut => VT.get_overline(ref this, out p);
			public HRESULT get_strikeOut(out int16 p) mut => VT.get_strikeOut(ref this, out p);
			public HRESULT get_subScript(out int16 p) mut => VT.get_subScript(ref this, out p);
			public HRESULT get_superScript(out int16 p) mut => VT.get_superScript(ref this, out p);
			public HRESULT get_explicitFace(out int16 p) mut => VT.get_explicitFace(ref this, out p);
			public HRESULT get_fontWeight(out int32 p) mut => VT.get_fontWeight(ref this, out p);
			public HRESULT get_fontSize(out int32 p) mut => VT.get_fontSize(ref this, out p);
			public HRESULT get_fontName(out int8 p) mut => VT.get_fontName(ref this, out p);
			public HRESULT get_hasBgColor(out int16 p) mut => VT.get_hasBgColor(ref this, out p);
			public HRESULT get_textColor(out uint32 p) mut => VT.get_textColor(ref this, out p);
			public HRESULT get_backgroundColor(out uint32 p) mut => VT.get_backgroundColor(ref this, out p);
			public HRESULT get_preFormatted(out int16 p) mut => VT.get_preFormatted(ref this, out p);
			public HRESULT get_direction(out int16 p) mut => VT.get_direction(ref this, out p);
			public HRESULT get_blockDirection(out int16 p) mut => VT.get_blockDirection(ref this, out p);
			public HRESULT get_OL(out int16 p) mut => VT.get_OL(ref this, out p);
			public HRESULT IsEqual(ref IHTMLComputedStyle pComputedStyle, out int16 pfEqual) mut => VT.IsEqual(ref this, ref pComputedStyle, out pfEqual);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_bold;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_italic;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_underline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_overline;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_strikeOut;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_subScript;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_superScript;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_explicitFace;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int32 p) get_fontWeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int32 p) get_fontSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int8 p) get_fontName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_hasBgColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out uint32 p) get_textColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out uint32 p) get_backgroundColor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_preFormatted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_direction;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_blockDirection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, out int16 p) get_OL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLComputedStyle self, ref IHTMLComputedStyle pComputedStyle, out int16 pfEqual) IsEqual;
			}
		}
		[CRepr]
		public struct IDeveloperConsoleMessageReceiver : IUnknown
		{
			public const new Guid IID = .(0x30510808, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Write(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText) mut => VT.Write(ref this, source, level, messageId, messageText);
			public HRESULT WriteWithUrl(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl) mut => VT.WriteWithUrl(ref this, source, level, messageId, messageText, fileUrl);
			public HRESULT WriteWithUrlAndLine(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line) mut => VT.WriteWithUrlAndLine(ref this, source, level, messageId, messageText, fileUrl, line);
			public HRESULT WriteWithUrlLineAndColumn(PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line, uint32 column) mut => VT.WriteWithUrlLineAndColumn(ref this, source, level, messageId, messageText, fileUrl, line, column);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeveloperConsoleMessageReceiver self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText) Write;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeveloperConsoleMessageReceiver self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl) WriteWithUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeveloperConsoleMessageReceiver self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line) WriteWithUrlAndLine;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDeveloperConsoleMessageReceiver self, PWSTR source, DEV_CONSOLE_MESSAGE_LEVEL level, int32 messageId, PWSTR messageText, PWSTR fileUrl, uint32 line, uint32 column) WriteWithUrlLineAndColumn;
			}
		}
		[CRepr]
		public struct IScriptEventHandler : IUnknown
		{
			public const new Guid IID = .(0x3051083a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FunctionName(out BSTR pbstrFunctionName) mut => VT.FunctionName(ref this, out pbstrFunctionName);
			public HRESULT DebugDocumentContext(out IUnknown* ppDebugDocumentContext) mut => VT.DebugDocumentContext(ref this, out ppDebugDocumentContext);
			public HRESULT EventHandlerDispatch(out IDispatch* ppDispHandler) mut => VT.EventHandlerDispatch(ref this, out ppDispHandler);
			public HRESULT UsesCapture(out BOOL pfUsesCapture) mut => VT.UsesCapture(ref this, out pfUsesCapture);
			public HRESULT Cookie(out uint64 pullCookie) mut => VT.Cookie(ref this, out pullCookie);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScriptEventHandler self, out BSTR pbstrFunctionName) FunctionName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScriptEventHandler self, out IUnknown* ppDebugDocumentContext) DebugDocumentContext;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScriptEventHandler self, out IDispatch* ppDispHandler) EventHandlerDispatch;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScriptEventHandler self, out BOOL pfUsesCapture) UsesCapture;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScriptEventHandler self, out uint64 pullCookie) Cookie;
			}
		}
		[CRepr]
		public struct IDebugCallbackNotificationHandler : IUnknown
		{
			public const new Guid IID = .(0x30510842, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RequestedCallbackTypes(out uint32 pCallbackMask) mut => VT.RequestedCallbackTypes(ref this, out pCallbackMask);
			public HRESULT BeforeDispatchEvent(ref IUnknown pEvent) mut => VT.BeforeDispatchEvent(ref this, ref pEvent);
			public HRESULT DispatchEventComplete(ref IUnknown pEvent, uint32 propagationStatus) mut => VT.DispatchEventComplete(ref this, ref pEvent, propagationStatus);
			public HRESULT BeforeInvokeDomCallback(ref IUnknown pEvent, ref IScriptEventHandler pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) mut => VT.BeforeInvokeDomCallback(ref this, ref pEvent, ref pCallback, eStage, propagationStatus);
			public HRESULT InvokeDomCallbackComplete(ref IUnknown pEvent, ref IScriptEventHandler pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) mut => VT.InvokeDomCallbackComplete(ref this, ref pEvent, ref pCallback, eStage, propagationStatus);
			public HRESULT BeforeInvokeCallback(SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, ref IDispatch pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) mut => VT.BeforeInvokeCallback(ref this, eCallbackType, callbackCookie, ref pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext);
			public HRESULT InvokeCallbackComplete(SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, ref IDispatch pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) mut => VT.InvokeCallbackComplete(ref this, eCallbackType, callbackCookie, ref pDispHandler, ullHandlerCookie, functionName, line, column, cchLength, pDebugDocumentContext);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, out uint32 pCallbackMask) RequestedCallbackTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, ref IUnknown pEvent) BeforeDispatchEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, ref IUnknown pEvent, uint32 propagationStatus) DispatchEventComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, ref IUnknown pEvent, ref IScriptEventHandler pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) BeforeInvokeDomCallback;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, ref IUnknown pEvent, ref IScriptEventHandler pCallback, DOM_EVENT_PHASE eStage, uint32 propagationStatus) InvokeDomCallbackComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, ref IDispatch pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) BeforeInvokeCallback;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDebugCallbackNotificationHandler self, SCRIPT_TIMER_TYPE eCallbackType, uint32 callbackCookie, ref IDispatch pDispHandler, uint64 ullHandlerCookie, BSTR functionName, uint32 line, uint32 column, uint32 cchLength, IUnknown* pDebugDocumentContext) InvokeCallbackComplete;
			}
		}
		[CRepr]
		public struct IScriptEventHandlerSourceInfo : IUnknown
		{
			public const new Guid IID = .(0x30510841, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSourceInfo(out BSTR pbstrFunctionName, out uint32 line, out uint32 column, out uint32 cchLength) mut => VT.GetSourceInfo(ref this, out pbstrFunctionName, out line, out column, out cchLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScriptEventHandlerSourceInfo self, out BSTR pbstrFunctionName, out uint32 line, out uint32 column, out uint32 cchLength) GetSourceInfo;
			}
		}
		[CRepr]
		public struct IDOMEventRegistrationCallback : IUnknown
		{
			public const new Guid IID = .(0x3051083b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnDOMEventListenerAdded(PWSTR pszEventType, ref IScriptEventHandler pHandler) mut => VT.OnDOMEventListenerAdded(ref this, pszEventType, ref pHandler);
			public HRESULT OnDOMEventListenerRemoved(uint64 ullCookie) mut => VT.OnDOMEventListenerRemoved(ref this, ullCookie);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEventRegistrationCallback self, PWSTR pszEventType, ref IScriptEventHandler pHandler) OnDOMEventListenerAdded;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDOMEventRegistrationCallback self, uint64 ullCookie) OnDOMEventListenerRemoved;
			}
		}
		[CRepr]
		public struct IEventTarget2 : IUnknown
		{
			public const new Guid IID = .(0x30510839, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRegisteredEventTypes(out SAFEARRAY* ppEventTypeArray) mut => VT.GetRegisteredEventTypes(ref this, out ppEventTypeArray);
			public HRESULT GetListenersForType(PWSTR pszEventType, out SAFEARRAY* ppEventHandlerArray) mut => VT.GetListenersForType(ref this, pszEventType, out ppEventHandlerArray);
			public HRESULT RegisterForDOMEventListeners(ref IDOMEventRegistrationCallback pCallback) mut => VT.RegisterForDOMEventListeners(ref this, ref pCallback);
			public HRESULT UnregisterForDOMEventListeners(ref IDOMEventRegistrationCallback pCallback) mut => VT.UnregisterForDOMEventListeners(ref this, ref pCallback);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget2 self, out SAFEARRAY* ppEventTypeArray) GetRegisteredEventTypes;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget2 self, PWSTR pszEventType, out SAFEARRAY* ppEventHandlerArray) GetListenersForType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget2 self, ref IDOMEventRegistrationCallback pCallback) RegisterForDOMEventListeners;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEventTarget2 self, ref IDOMEventRegistrationCallback pCallback) UnregisterForDOMEventListeners;
			}
		}
		[CRepr]
		public struct HTMLNamespaceEvents : IDispatch
		{
			public const new Guid IID = .(0x3050f6bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLNamespace : IDispatch
		{
			public const new Guid IID = .(0x3050f6bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_name(out BSTR p) mut => VT.get_name(ref this, out p);
			public HRESULT get_urn(out BSTR p) mut => VT.get_urn(ref this, out p);
			public HRESULT get_tagNames(out IDispatch* p) mut => VT.get_tagNames(ref this, out p);
			public HRESULT get_readyState(out VARIANT p) mut => VT.get_readyState(ref this, out p);
			public HRESULT put_onreadystatechange(VARIANT v) mut => VT.put_onreadystatechange(ref this, v);
			public HRESULT get_onreadystatechange(out VARIANT p) mut => VT.get_onreadystatechange(ref this, out p);
			public HRESULT doImport(BSTR bstrImplementationUrl) mut => VT.doImport(ref this, bstrImplementationUrl);
			public HRESULT attachEvent(BSTR event, ref IDispatch pDisp, out int16 pfResult) mut => VT.attachEvent(ref this, event, ref pDisp, out pfResult);
			public HRESULT detachEvent(BSTR event, ref IDispatch pDisp) mut => VT.detachEvent(ref this, event, ref pDisp);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, out BSTR p) get_name;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, out BSTR p) get_urn;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, out IDispatch* p) get_tagNames;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, out VARIANT p) get_readyState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, VARIANT v) put_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, out VARIANT p) get_onreadystatechange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, BSTR bstrImplementationUrl) doImport;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, BSTR event, ref IDispatch pDisp, out int16 pfResult) attachEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespace self, BSTR event, ref IDispatch pDisp) detachEvent;
			}
		}
		[CRepr]
		public struct IHTMLNamespaceCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f6b8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT item(VARIANT index, out IDispatch* ppNamespace) mut => VT.item(ref this, index, out ppNamespace);
			public HRESULT add(BSTR bstrNamespace, BSTR bstrUrn, VARIANT implementationUrl, out IDispatch* ppNamespace) mut => VT.add(ref this, bstrNamespace, bstrUrn, implementationUrl, out ppNamespace);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespaceCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespaceCollection self, VARIANT index, out IDispatch* ppNamespace) item;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLNamespaceCollection self, BSTR bstrNamespace, BSTR bstrUrn, VARIANT implementationUrl, out IDispatch* ppNamespace) add;
			}
		}
		[CRepr]
		public struct DispHTMLNamespace : IDispatch
		{
			public const new Guid IID = .(0x3050f54f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispHTMLNamespaceCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f550, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLPainter : IUnknown
		{
			public const new Guid IID = .(0x3050f6a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Draw(RECT rcBounds, RECT rcUpdate, int32 lDrawFlags, HDC hdc, void* pvDrawObject) mut => VT.Draw(ref this, rcBounds, rcUpdate, lDrawFlags, hdc, pvDrawObject);
			public HRESULT OnResize(SIZE size) mut => VT.OnResize(ref this, size);
			public HRESULT GetPainterInfo(out HTML_PAINTER_INFO pInfo) mut => VT.GetPainterInfo(ref this, out pInfo);
			public HRESULT HitTestPoint(POINT pt, out BOOL pbHit, out int32 plPartID) mut => VT.HitTestPoint(ref this, pt, out pbHit, out plPartID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainter self, RECT rcBounds, RECT rcUpdate, int32 lDrawFlags, HDC hdc, void* pvDrawObject) Draw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainter self, SIZE size) OnResize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainter self, out HTML_PAINTER_INFO pInfo) GetPainterInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainter self, POINT pt, out BOOL pbHit, out int32 plPartID) HitTestPoint;
			}
		}
		[CRepr]
		public struct IHTMLPaintSite : IUnknown
		{
			public const new Guid IID = .(0x3050f6a7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InvalidatePainterInfo() mut => VT.InvalidatePainterInfo(ref this);
			public HRESULT InvalidateRect(ref RECT prcInvalid) mut => VT.InvalidateRect(ref this, ref prcInvalid);
			public HRESULT InvalidateRegion(HRGN rgnInvalid) mut => VT.InvalidateRegion(ref this, rgnInvalid);
			public HRESULT GetDrawInfo(int32 lFlags, out HTML_PAINT_DRAW_INFO pDrawInfo) mut => VT.GetDrawInfo(ref this, lFlags, out pDrawInfo);
			public HRESULT TransformGlobalToLocal(POINT ptGlobal, out POINT pptLocal) mut => VT.TransformGlobalToLocal(ref this, ptGlobal, out pptLocal);
			public HRESULT TransformLocalToGlobal(POINT ptLocal, out POINT pptGlobal) mut => VT.TransformLocalToGlobal(ref this, ptLocal, out pptGlobal);
			public HRESULT GetHitTestCookie(out int32 plCookie) mut => VT.GetHitTestCookie(ref this, out plCookie);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self) InvalidatePainterInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self, ref RECT prcInvalid) InvalidateRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self, HRGN rgnInvalid) InvalidateRegion;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self, int32 lFlags, out HTML_PAINT_DRAW_INFO pDrawInfo) GetDrawInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self, POINT ptGlobal, out POINT pptLocal) TransformGlobalToLocal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self, POINT ptLocal, out POINT pptGlobal) TransformLocalToGlobal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPaintSite self, out int32 plCookie) GetHitTestCookie;
			}
		}
		[CRepr]
		public struct IHTMLPainterEventInfo : IUnknown
		{
			public const new Guid IID = .(0x3050f6df, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetEventInfoFlags(out int32 plEventInfoFlags) mut => VT.GetEventInfoFlags(ref this, out plEventInfoFlags);
			public HRESULT GetEventTarget(ref IHTMLElement* ppElement) mut => VT.GetEventTarget(ref this, ref ppElement);
			public HRESULT SetCursor(int32 lPartID) mut => VT.SetCursor(ref this, lPartID);
			public HRESULT StringFromPartID(int32 lPartID, out BSTR pbstrPart) mut => VT.StringFromPartID(ref this, lPartID, out pbstrPart);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainterEventInfo self, out int32 plEventInfoFlags) GetEventInfoFlags;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainterEventInfo self, ref IHTMLElement* ppElement) GetEventTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainterEventInfo self, int32 lPartID) SetCursor;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainterEventInfo self, int32 lPartID, out BSTR pbstrPart) StringFromPartID;
			}
		}
		[CRepr]
		public struct IHTMLPainterOverlay : IUnknown
		{
			public const new Guid IID = .(0x3050f7e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnMove(RECT rcDevice) mut => VT.OnMove(ref this, rcDevice);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPainterOverlay self, RECT rcDevice) OnMove;
			}
		}
		[CRepr]
		public struct IHTMLIPrintCollection : IDispatch
		{
			public const new Guid IID = .(0x3050f6b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_length(out int32 p) mut => VT.get_length(ref this, out p);
			public HRESULT get__newEnum(out IUnknown* p) mut => VT.get__newEnum(ref this, out p);
			public HRESULT item(int32 index, out IUnknown* ppIPrint) mut => VT.item(ref this, index, out ppIPrint);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIPrintCollection self, out int32 p) get_length;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIPrintCollection self, out IUnknown* p) get__newEnum;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLIPrintCollection self, int32 index, out IUnknown* ppIPrint) item;
			}
		}
		[CRepr]
		public struct IEnumPrivacyRecords : IUnknown
		{
			public const new Guid IID = .(0x3050f844, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT GetSize(out uint32 pSize) mut => VT.GetSize(ref this, out pSize);
			public HRESULT GetPrivacyImpacted(out BOOL pState) mut => VT.GetPrivacyImpacted(ref this, out pState);
			public HRESULT Next(out BSTR pbstrUrl, out BSTR pbstrPolicyRef, out int32 pdwReserved, out uint32 pdwPrivacyFlags) mut => VT.Next(ref this, out pbstrUrl, out pbstrPolicyRef, out pdwReserved, out pdwPrivacyFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPrivacyRecords self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPrivacyRecords self, out uint32 pSize) GetSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPrivacyRecords self, out BOOL pState) GetPrivacyImpacted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumPrivacyRecords self, out BSTR pbstrUrl, out BSTR pbstrPolicyRef, out int32 pdwReserved, out uint32 pdwPrivacyFlags) Next;
			}
		}
		[CRepr]
		public struct IWPCBlockedUrls : IUnknown
		{
			public const new Guid IID = .(0x30510413, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCount(out uint32 pdwCount) mut => VT.GetCount(ref this, out pdwCount);
			public HRESULT GetUrl(uint32 dwIdx, out BSTR pbstrUrl) mut => VT.GetUrl(ref this, dwIdx, out pbstrUrl);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWPCBlockedUrls self, out uint32 pdwCount) GetCount;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWPCBlockedUrls self, uint32 dwIdx, out BSTR pbstrUrl) GetUrl;
			}
		}
		[CRepr]
		public struct IHTMLDOMConstructorCollection : IDispatch
		{
			public const new Guid IID = .(0x3051049c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_Attr(out IDispatch* p) mut => VT.get_Attr(ref this, out p);
			public HRESULT get_BehaviorUrnsCollection(out IDispatch* p) mut => VT.get_BehaviorUrnsCollection(ref this, out p);
			public HRESULT get_BookmarkCollection(out IDispatch* p) mut => VT.get_BookmarkCollection(ref this, out p);
			public HRESULT get_CompatibleInfo(out IDispatch* p) mut => VT.get_CompatibleInfo(ref this, out p);
			public HRESULT get_CompatibleInfoCollection(out IDispatch* p) mut => VT.get_CompatibleInfoCollection(ref this, out p);
			public HRESULT get_ControlRangeCollection(out IDispatch* p) mut => VT.get_ControlRangeCollection(ref this, out p);
			public HRESULT get_CSSCurrentStyleDeclaration(out IDispatch* p) mut => VT.get_CSSCurrentStyleDeclaration(ref this, out p);
			public HRESULT get_CSSRuleList(out IDispatch* p) mut => VT.get_CSSRuleList(ref this, out p);
			public HRESULT get_CSSRuleStyleDeclaration(out IDispatch* p) mut => VT.get_CSSRuleStyleDeclaration(ref this, out p);
			public HRESULT get_CSSStyleDeclaration(out IDispatch* p) mut => VT.get_CSSStyleDeclaration(ref this, out p);
			public HRESULT get_CSSStyleRule(out IDispatch* p) mut => VT.get_CSSStyleRule(ref this, out p);
			public HRESULT get_CSSStyleSheet(out IDispatch* p) mut => VT.get_CSSStyleSheet(ref this, out p);
			public HRESULT get_DataTransfer(out IDispatch* p) mut => VT.get_DataTransfer(ref this, out p);
			public HRESULT get_DOMImplementation(out IDispatch* p) mut => VT.get_DOMImplementation(ref this, out p);
			public HRESULT get_Element(out IDispatch* p) mut => VT.get_Element(ref this, out p);
			public HRESULT get_Event(out IDispatch* p) mut => VT.get_Event(ref this, out p);
			public HRESULT get_History(out IDispatch* p) mut => VT.get_History(ref this, out p);
			public HRESULT get_HTCElementBehaviorDefaults(out IDispatch* p) mut => VT.get_HTCElementBehaviorDefaults(ref this, out p);
			public HRESULT get_HTMLAnchorElement(out IDispatch* p) mut => VT.get_HTMLAnchorElement(ref this, out p);
			public HRESULT get_HTMLAreaElement(out IDispatch* p) mut => VT.get_HTMLAreaElement(ref this, out p);
			public HRESULT get_HTMLAreasCollection(out IDispatch* p) mut => VT.get_HTMLAreasCollection(ref this, out p);
			public HRESULT get_HTMLBaseElement(out IDispatch* p) mut => VT.get_HTMLBaseElement(ref this, out p);
			public HRESULT get_HTMLBaseFontElement(out IDispatch* p) mut => VT.get_HTMLBaseFontElement(ref this, out p);
			public HRESULT get_HTMLBGSoundElement(out IDispatch* p) mut => VT.get_HTMLBGSoundElement(ref this, out p);
			public HRESULT get_HTMLBlockElement(out IDispatch* p) mut => VT.get_HTMLBlockElement(ref this, out p);
			public HRESULT get_HTMLBodyElement(out IDispatch* p) mut => VT.get_HTMLBodyElement(ref this, out p);
			public HRESULT get_HTMLBRElement(out IDispatch* p) mut => VT.get_HTMLBRElement(ref this, out p);
			public HRESULT get_HTMLButtonElement(out IDispatch* p) mut => VT.get_HTMLButtonElement(ref this, out p);
			public HRESULT get_HTMLCollection(out IDispatch* p) mut => VT.get_HTMLCollection(ref this, out p);
			public HRESULT get_HTMLCommentElement(out IDispatch* p) mut => VT.get_HTMLCommentElement(ref this, out p);
			public HRESULT get_HTMLDDElement(out IDispatch* p) mut => VT.get_HTMLDDElement(ref this, out p);
			public HRESULT get_HTMLDivElement(out IDispatch* p) mut => VT.get_HTMLDivElement(ref this, out p);
			public HRESULT get_HTMLDocument(out IDispatch* p) mut => VT.get_HTMLDocument(ref this, out p);
			public HRESULT get_HTMLDListElement(out IDispatch* p) mut => VT.get_HTMLDListElement(ref this, out p);
			public HRESULT get_HTMLDTElement(out IDispatch* p) mut => VT.get_HTMLDTElement(ref this, out p);
			public HRESULT get_HTMLEmbedElement(out IDispatch* p) mut => VT.get_HTMLEmbedElement(ref this, out p);
			public HRESULT get_HTMLFieldSetElement(out IDispatch* p) mut => VT.get_HTMLFieldSetElement(ref this, out p);
			public HRESULT get_HTMLFontElement(out IDispatch* p) mut => VT.get_HTMLFontElement(ref this, out p);
			public HRESULT get_HTMLFormElement(out IDispatch* p) mut => VT.get_HTMLFormElement(ref this, out p);
			public HRESULT get_HTMLFrameElement(out IDispatch* p) mut => VT.get_HTMLFrameElement(ref this, out p);
			public HRESULT get_HTMLFrameSetElement(out IDispatch* p) mut => VT.get_HTMLFrameSetElement(ref this, out p);
			public HRESULT get_HTMLGenericElement(out IDispatch* p) mut => VT.get_HTMLGenericElement(ref this, out p);
			public HRESULT get_HTMLHeadElement(out IDispatch* p) mut => VT.get_HTMLHeadElement(ref this, out p);
			public HRESULT get_HTMLHeadingElement(out IDispatch* p) mut => VT.get_HTMLHeadingElement(ref this, out p);
			public HRESULT get_HTMLHRElement(out IDispatch* p) mut => VT.get_HTMLHRElement(ref this, out p);
			public HRESULT get_HTMLHtmlElement(out IDispatch* p) mut => VT.get_HTMLHtmlElement(ref this, out p);
			public HRESULT get_HTMLIFrameElement(out IDispatch* p) mut => VT.get_HTMLIFrameElement(ref this, out p);
			public HRESULT get_HTMLImageElement(out IDispatch* p) mut => VT.get_HTMLImageElement(ref this, out p);
			public HRESULT get_HTMLInputElement(out IDispatch* p) mut => VT.get_HTMLInputElement(ref this, out p);
			public HRESULT get_HTMLIsIndexElement(out IDispatch* p) mut => VT.get_HTMLIsIndexElement(ref this, out p);
			public HRESULT get_HTMLLabelElement(out IDispatch* p) mut => VT.get_HTMLLabelElement(ref this, out p);
			public HRESULT get_HTMLLegendElement(out IDispatch* p) mut => VT.get_HTMLLegendElement(ref this, out p);
			public HRESULT get_HTMLLIElement(out IDispatch* p) mut => VT.get_HTMLLIElement(ref this, out p);
			public HRESULT get_HTMLLinkElement(out IDispatch* p) mut => VT.get_HTMLLinkElement(ref this, out p);
			public HRESULT get_HTMLMapElement(out IDispatch* p) mut => VT.get_HTMLMapElement(ref this, out p);
			public HRESULT get_HTMLMarqueeElement(out IDispatch* p) mut => VT.get_HTMLMarqueeElement(ref this, out p);
			public HRESULT get_HTMLMetaElement(out IDispatch* p) mut => VT.get_HTMLMetaElement(ref this, out p);
			public HRESULT get_HTMLModelessDialog(out IDispatch* p) mut => VT.get_HTMLModelessDialog(ref this, out p);
			public HRESULT get_HTMLNamespaceInfo(out IDispatch* p) mut => VT.get_HTMLNamespaceInfo(ref this, out p);
			public HRESULT get_HTMLNamespaceInfoCollection(out IDispatch* p) mut => VT.get_HTMLNamespaceInfoCollection(ref this, out p);
			public HRESULT get_HTMLNextIdElement(out IDispatch* p) mut => VT.get_HTMLNextIdElement(ref this, out p);
			public HRESULT get_HTMLNoShowElement(out IDispatch* p) mut => VT.get_HTMLNoShowElement(ref this, out p);
			public HRESULT get_HTMLObjectElement(out IDispatch* p) mut => VT.get_HTMLObjectElement(ref this, out p);
			public HRESULT get_HTMLOListElement(out IDispatch* p) mut => VT.get_HTMLOListElement(ref this, out p);
			public HRESULT get_HTMLOptionElement(out IDispatch* p) mut => VT.get_HTMLOptionElement(ref this, out p);
			public HRESULT get_HTMLParagraphElement(out IDispatch* p) mut => VT.get_HTMLParagraphElement(ref this, out p);
			public HRESULT get_HTMLParamElement(out IDispatch* p) mut => VT.get_HTMLParamElement(ref this, out p);
			public HRESULT get_HTMLPhraseElement(out IDispatch* p) mut => VT.get_HTMLPhraseElement(ref this, out p);
			public HRESULT get_HTMLPluginsCollection(out IDispatch* p) mut => VT.get_HTMLPluginsCollection(ref this, out p);
			public HRESULT get_HTMLPopup(out IDispatch* p) mut => VT.get_HTMLPopup(ref this, out p);
			public HRESULT get_HTMLScriptElement(out IDispatch* p) mut => VT.get_HTMLScriptElement(ref this, out p);
			public HRESULT get_HTMLSelectElement(out IDispatch* p) mut => VT.get_HTMLSelectElement(ref this, out p);
			public HRESULT get_HTMLSpanElement(out IDispatch* p) mut => VT.get_HTMLSpanElement(ref this, out p);
			public HRESULT get_HTMLStyleElement(out IDispatch* p) mut => VT.get_HTMLStyleElement(ref this, out p);
			public HRESULT get_HTMLTableCaptionElement(out IDispatch* p) mut => VT.get_HTMLTableCaptionElement(ref this, out p);
			public HRESULT get_HTMLTableCellElement(out IDispatch* p) mut => VT.get_HTMLTableCellElement(ref this, out p);
			public HRESULT get_HTMLTableColElement(out IDispatch* p) mut => VT.get_HTMLTableColElement(ref this, out p);
			public HRESULT get_HTMLTableElement(out IDispatch* p) mut => VT.get_HTMLTableElement(ref this, out p);
			public HRESULT get_HTMLTableRowElement(out IDispatch* p) mut => VT.get_HTMLTableRowElement(ref this, out p);
			public HRESULT get_HTMLTableSectionElement(out IDispatch* p) mut => VT.get_HTMLTableSectionElement(ref this, out p);
			public HRESULT get_HTMLTextAreaElement(out IDispatch* p) mut => VT.get_HTMLTextAreaElement(ref this, out p);
			public HRESULT get_HTMLTextElement(out IDispatch* p) mut => VT.get_HTMLTextElement(ref this, out p);
			public HRESULT get_HTMLTitleElement(out IDispatch* p) mut => VT.get_HTMLTitleElement(ref this, out p);
			public HRESULT get_HTMLUListElement(out IDispatch* p) mut => VT.get_HTMLUListElement(ref this, out p);
			public HRESULT get_HTMLUnknownElement(out IDispatch* p) mut => VT.get_HTMLUnknownElement(ref this, out p);
			public HRESULT get_Image(out IDispatch* p) mut => VT.get_Image(ref this, out p);
			public HRESULT get_Location(out IDispatch* p) mut => VT.get_Location(ref this, out p);
			public HRESULT get_NamedNodeMap(out IDispatch* p) mut => VT.get_NamedNodeMap(ref this, out p);
			public HRESULT get_Navigator(out IDispatch* p) mut => VT.get_Navigator(ref this, out p);
			public HRESULT get_NodeList(out IDispatch* p) mut => VT.get_NodeList(ref this, out p);
			public HRESULT get_Option(out IDispatch* p) mut => VT.get_Option(ref this, out p);
			public HRESULT get_Screen(out IDispatch* p) mut => VT.get_Screen(ref this, out p);
			public HRESULT get_Selection(out IDispatch* p) mut => VT.get_Selection(ref this, out p);
			public HRESULT get_StaticNodeList(out IDispatch* p) mut => VT.get_StaticNodeList(ref this, out p);
			public HRESULT get_Storage(out IDispatch* p) mut => VT.get_Storage(ref this, out p);
			public HRESULT get_StyleSheetList(out IDispatch* p) mut => VT.get_StyleSheetList(ref this, out p);
			public HRESULT get_StyleSheetPage(out IDispatch* p) mut => VT.get_StyleSheetPage(ref this, out p);
			public HRESULT get_StyleSheetPageList(out IDispatch* p) mut => VT.get_StyleSheetPageList(ref this, out p);
			public HRESULT get_Text(out IDispatch* p) mut => VT.get_Text(ref this, out p);
			public HRESULT get_TextRange(out IDispatch* p) mut => VT.get_TextRange(ref this, out p);
			public HRESULT get_TextRangeCollection(out IDispatch* p) mut => VT.get_TextRangeCollection(ref this, out p);
			public HRESULT get_TextRectangle(out IDispatch* p) mut => VT.get_TextRectangle(ref this, out p);
			public HRESULT get_TextRectangleList(out IDispatch* p) mut => VT.get_TextRectangleList(ref this, out p);
			public HRESULT get_Window(out IDispatch* p) mut => VT.get_Window(ref this, out p);
			public HRESULT get_XDomainRequest(out IDispatch* p) mut => VT.get_XDomainRequest(ref this, out p);
			public HRESULT get_XMLHttpRequest(out IDispatch* p) mut => VT.get_XMLHttpRequest(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Attr;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_BehaviorUrnsCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_BookmarkCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CompatibleInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CompatibleInfoCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_ControlRangeCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CSSCurrentStyleDeclaration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CSSRuleList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CSSRuleStyleDeclaration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CSSStyleDeclaration;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CSSStyleRule;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_CSSStyleSheet;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_DataTransfer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_DOMImplementation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Element;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_History;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTCElementBehaviorDefaults;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLAnchorElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLAreaElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLAreasCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLBaseElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLBaseFontElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLBGSoundElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLBlockElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLBodyElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLBRElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLButtonElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLCommentElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLDDElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLDivElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLDListElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLDTElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLEmbedElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLFieldSetElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLFontElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLFormElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLFrameElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLFrameSetElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLGenericElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLHeadElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLHeadingElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLHRElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLHtmlElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLIFrameElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLImageElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLInputElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLIsIndexElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLLabelElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLLegendElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLLIElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLLinkElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLMapElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLMarqueeElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLMetaElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLModelessDialog;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLNamespaceInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLNamespaceInfoCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLNextIdElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLNoShowElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLObjectElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLOListElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLOptionElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLParagraphElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLParamElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLPhraseElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLPluginsCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLPopup;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLScriptElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLSelectElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLSpanElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLStyleElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTableCaptionElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTableCellElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTableColElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTableElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTableRowElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTableSectionElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTextAreaElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTextElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLTitleElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLUListElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_HTMLUnknownElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Image;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Location;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_NamedNodeMap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Navigator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_NodeList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Option;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Screen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Selection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_StaticNodeList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Storage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_StyleSheetList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_StyleSheetPage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_StyleSheetPageList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Text;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_TextRange;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_TextRangeCollection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_TextRectangle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_TextRectangleList;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_Window;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_XDomainRequest;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDOMConstructorCollection self, out IDispatch* p) get_XMLHttpRequest;
			}
		}
		[CRepr]
		public struct IHTMLDialog : IDispatch
		{
			public const new Guid IID = .(0x3050f216, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_dialogTop(VARIANT v) mut => VT.put_dialogTop(ref this, v);
			public HRESULT get_dialogTop(out VARIANT p) mut => VT.get_dialogTop(ref this, out p);
			public HRESULT put_dialogLeft(VARIANT v) mut => VT.put_dialogLeft(ref this, v);
			public HRESULT get_dialogLeft(out VARIANT p) mut => VT.get_dialogLeft(ref this, out p);
			public HRESULT put_dialogWidth(VARIANT v) mut => VT.put_dialogWidth(ref this, v);
			public HRESULT get_dialogWidth(out VARIANT p) mut => VT.get_dialogWidth(ref this, out p);
			public HRESULT put_dialogHeight(VARIANT v) mut => VT.put_dialogHeight(ref this, v);
			public HRESULT get_dialogHeight(out VARIANT p) mut => VT.get_dialogHeight(ref this, out p);
			public HRESULT get_dialogArguments(out VARIANT p) mut => VT.get_dialogArguments(ref this, out p);
			public HRESULT get_menuArguments(out VARIANT p) mut => VT.get_menuArguments(ref this, out p);
			public HRESULT put_returnValue(VARIANT v) mut => VT.put_returnValue(ref this, v);
			public HRESULT get_returnValue(out VARIANT p) mut => VT.get_returnValue(ref this, out p);
			public HRESULT close() mut => VT.close(ref this);
			public HRESULT toString(out BSTR String) mut => VT.toString(ref this, out String);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, VARIANT v) put_dialogTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_dialogTop;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, VARIANT v) put_dialogLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_dialogLeft;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, VARIANT v) put_dialogWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_dialogWidth;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, VARIANT v) put_dialogHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_dialogHeight;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_dialogArguments;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_menuArguments;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, VARIANT v) put_returnValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out VARIANT p) get_returnValue;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self) close;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog self, out BSTR String) toString;
			}
		}
		[CRepr]
		public struct IHTMLDialog2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_status(BSTR v) mut => VT.put_status(ref this, v);
			public HRESULT get_status(out BSTR p) mut => VT.get_status(ref this, out p);
			public HRESULT put_resizable(BSTR v) mut => VT.put_resizable(ref this, v);
			public HRESULT get_resizable(out BSTR p) mut => VT.get_resizable(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog2 self, BSTR v) put_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog2 self, out BSTR p) get_status;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog2 self, BSTR v) put_resizable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog2 self, out BSTR p) get_resizable;
			}
		}
		[CRepr]
		public struct IHTMLDialog3 : IDispatch
		{
			public const new Guid IID = .(0x3050f388, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_unadorned(BSTR v) mut => VT.put_unadorned(ref this, v);
			public HRESULT get_unadorned(out BSTR p) mut => VT.get_unadorned(ref this, out p);
			public HRESULT put_dialogHide(BSTR v) mut => VT.put_dialogHide(ref this, v);
			public HRESULT get_dialogHide(out BSTR p) mut => VT.get_dialogHide(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog3 self, BSTR v) put_unadorned;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog3 self, out BSTR p) get_unadorned;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog3 self, BSTR v) put_dialogHide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLDialog3 self, out BSTR p) get_dialogHide;
			}
		}
		[CRepr]
		public struct IHTMLModelessInit : IDispatch
		{
			public const new Guid IID = .(0x3050f5e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_parameters(out VARIANT p) mut => VT.get_parameters(ref this, out p);
			public HRESULT get_optionString(out VARIANT p) mut => VT.get_optionString(ref this, out p);
			public HRESULT get_moniker(out IUnknown* p) mut => VT.get_moniker(ref this, out p);
			public HRESULT get_document(out IUnknown* p) mut => VT.get_document(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLModelessInit self, out VARIANT p) get_parameters;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLModelessInit self, out VARIANT p) get_optionString;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLModelessInit self, out IUnknown* p) get_moniker;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLModelessInit self, out IUnknown* p) get_document;
			}
		}
		[CRepr]
		public struct IHTMLPopup : IDispatch
		{
			public const new Guid IID = .(0x3050f666, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT show(int32 x, int32 y, int32 w, int32 h, ref VARIANT pElement) mut => VT.show(ref this, x, y, w, h, ref pElement);
			public HRESULT hide() mut => VT.hide(ref this);
			public HRESULT get_document(out IHTMLDocument* p) mut => VT.get_document(ref this, out p);
			public HRESULT get_isOpen(out int16 p) mut => VT.get_isOpen(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPopup self, int32 x, int32 y, int32 w, int32 h, ref VARIANT pElement) show;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPopup self) hide;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPopup self, out IHTMLDocument* p) get_document;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPopup self, out int16 p) get_isOpen;
			}
		}
		[CRepr]
		public struct DispHTMLPopup : IDispatch
		{
			public const new Guid IID = .(0x3050f589, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHTMLAppBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f5ca, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_applicationName(BSTR v) mut => VT.put_applicationName(ref this, v);
			public HRESULT get_applicationName(out BSTR p) mut => VT.get_applicationName(ref this, out p);
			public HRESULT put_version(BSTR v) mut => VT.put_version(ref this, v);
			public HRESULT get_version(out BSTR p) mut => VT.get_version(ref this, out p);
			public HRESULT put_icon(BSTR v) mut => VT.put_icon(ref this, v);
			public HRESULT get_icon(out BSTR p) mut => VT.get_icon(ref this, out p);
			public HRESULT put_singleInstance(BSTR v) mut => VT.put_singleInstance(ref this, v);
			public HRESULT get_singleInstance(out BSTR p) mut => VT.get_singleInstance(ref this, out p);
			public HRESULT put_minimizeButton(BSTR v) mut => VT.put_minimizeButton(ref this, v);
			public HRESULT get_minimizeButton(out BSTR p) mut => VT.get_minimizeButton(ref this, out p);
			public HRESULT put_maximizeButton(BSTR v) mut => VT.put_maximizeButton(ref this, v);
			public HRESULT get_maximizeButton(out BSTR p) mut => VT.get_maximizeButton(ref this, out p);
			public HRESULT put_border(BSTR v) mut => VT.put_border(ref this, v);
			public HRESULT get_border(out BSTR p) mut => VT.get_border(ref this, out p);
			public HRESULT put_borderStyle(BSTR v) mut => VT.put_borderStyle(ref this, v);
			public HRESULT get_borderStyle(out BSTR p) mut => VT.get_borderStyle(ref this, out p);
			public HRESULT put_sysMenu(BSTR v) mut => VT.put_sysMenu(ref this, v);
			public HRESULT get_sysMenu(out BSTR p) mut => VT.get_sysMenu(ref this, out p);
			public HRESULT put_caption(BSTR v) mut => VT.put_caption(ref this, v);
			public HRESULT get_caption(out BSTR p) mut => VT.get_caption(ref this, out p);
			public HRESULT put_windowState(BSTR v) mut => VT.put_windowState(ref this, v);
			public HRESULT get_windowState(out BSTR p) mut => VT.get_windowState(ref this, out p);
			public HRESULT put_showInTaskBar(BSTR v) mut => VT.put_showInTaskBar(ref this, v);
			public HRESULT get_showInTaskBar(out BSTR p) mut => VT.get_showInTaskBar(ref this, out p);
			public HRESULT get_commandLine(out BSTR p) mut => VT.get_commandLine(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_applicationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_applicationName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_version;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_version;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_icon;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_icon;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_singleInstance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_singleInstance;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_minimizeButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_minimizeButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_maximizeButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_maximizeButton;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_border;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_borderStyle;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_sysMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_sysMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_caption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_windowState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_windowState;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, BSTR v) put_showInTaskBar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_showInTaskBar;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior self, out BSTR p) get_commandLine;
			}
		}
		[CRepr]
		public struct IHTMLAppBehavior2 : IDispatch
		{
			public const new Guid IID = .(0x3050f5c9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_contextMenu(BSTR v) mut => VT.put_contextMenu(ref this, v);
			public HRESULT get_contextMenu(out BSTR p) mut => VT.get_contextMenu(ref this, out p);
			public HRESULT put_innerBorder(BSTR v) mut => VT.put_innerBorder(ref this, v);
			public HRESULT get_innerBorder(out BSTR p) mut => VT.get_innerBorder(ref this, out p);
			public HRESULT put_scroll(BSTR v) mut => VT.put_scroll(ref this, v);
			public HRESULT get_scroll(out BSTR p) mut => VT.get_scroll(ref this, out p);
			public HRESULT put_scrollFlat(BSTR v) mut => VT.put_scrollFlat(ref this, v);
			public HRESULT get_scrollFlat(out BSTR p) mut => VT.get_scrollFlat(ref this, out p);
			public HRESULT put_selection(BSTR v) mut => VT.put_selection(ref this, v);
			public HRESULT get_selection(out BSTR p) mut => VT.get_selection(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, BSTR v) put_contextMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, out BSTR p) get_contextMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, BSTR v) put_innerBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, out BSTR p) get_innerBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, BSTR v) put_scroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, out BSTR p) get_scroll;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, BSTR v) put_scrollFlat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, out BSTR p) get_scrollFlat;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, BSTR v) put_selection;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior2 self, out BSTR p) get_selection;
			}
		}
		[CRepr]
		public struct IHTMLAppBehavior3 : IDispatch
		{
			public const new Guid IID = .(0x3050f5cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_navigable(BSTR v) mut => VT.put_navigable(ref this, v);
			public HRESULT get_navigable(out BSTR p) mut => VT.get_navigable(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior3 self, BSTR v) put_navigable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLAppBehavior3 self, out BSTR p) get_navigable;
			}
		}
		[CRepr]
		public struct DispHTMLAppBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f57c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispIHTMLInputButtonElement : IDispatch
		{
			public const new Guid IID = .(0x3050f51e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispIHTMLInputTextElement : IDispatch
		{
			public const new Guid IID = .(0x3050f520, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispIHTMLInputFileElement : IDispatch
		{
			public const new Guid IID = .(0x3050f542, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispIHTMLOptionButtonElement : IDispatch
		{
			public const new Guid IID = .(0x3050f509, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct DispIHTMLInputImage : IDispatch
		{
			public const new Guid IID = .(0x3050f51d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IElementNamespace : IUnknown
		{
			public const new Guid IID = .(0x3050f671, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddTag(BSTR bstrTagName, int32 lFlags) mut => VT.AddTag(ref this, bstrTagName, lFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementNamespace self, BSTR bstrTagName, int32 lFlags) AddTag;
			}
		}
		[CRepr]
		public struct IElementNamespaceTable : IUnknown
		{
			public const new Guid IID = .(0x3050f670, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddNamespace(BSTR bstrNamespace, BSTR bstrUrn, int32 lFlags, ref VARIANT pvarFactory) mut => VT.AddNamespace(ref this, bstrNamespace, bstrUrn, lFlags, ref pvarFactory);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementNamespaceTable self, BSTR bstrNamespace, BSTR bstrUrn, int32 lFlags, ref VARIANT pvarFactory) AddNamespace;
			}
		}
		[CRepr]
		public struct IElementNamespaceFactory : IUnknown
		{
			public const new Guid IID = .(0x3050f672, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Create(ref IElementNamespace pNamespace) mut => VT.Create(ref this, ref pNamespace);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementNamespaceFactory self, ref IElementNamespace pNamespace) Create;
			}
		}
		[CRepr]
		public struct IElementNamespaceFactory2 : IElementNamespaceFactory
		{
			public const new Guid IID = .(0x3050f805, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateWithImplementation(ref IElementNamespace pNamespace, BSTR bstrImplementation) mut => VT.CreateWithImplementation(ref this, ref pNamespace, bstrImplementation);

			[CRepr]
			public struct VTable : IElementNamespaceFactory.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementNamespaceFactory2 self, ref IElementNamespace pNamespace, BSTR bstrImplementation) CreateWithImplementation;
			}
		}
		[CRepr]
		public struct IElementNamespaceFactoryCallback : IUnknown
		{
			public const new Guid IID = .(0x3050f7fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Resolve(BSTR bstrNamespace, BSTR bstrTagName, BSTR bstrAttrs, ref IElementNamespace pNamespace) mut => VT.Resolve(ref this, bstrNamespace, bstrTagName, bstrAttrs, ref pNamespace);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementNamespaceFactoryCallback self, BSTR bstrNamespace, BSTR bstrTagName, BSTR bstrAttrs, ref IElementNamespace pNamespace) Resolve;
			}
		}
		[CRepr]
		public struct IElementBehaviorSiteOM2 : IElementBehaviorSiteOM
		{
			public const new Guid IID = .(0x3050f659, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetDefaults(out IHTMLElementDefaults* ppDefaults) mut => VT.GetDefaults(ref this, out ppDefaults);

			[CRepr]
			public struct VTable : IElementBehaviorSiteOM.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteOM2 self, out IHTMLElementDefaults* ppDefaults) GetDefaults;
			}
		}
		[CRepr]
		public struct IElementBehaviorCategory : IUnknown
		{
			public const new Guid IID = .(0x3050f4ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCategory(out PWSTR ppchCategory) mut => VT.GetCategory(ref this, out ppchCategory);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorCategory self, out PWSTR ppchCategory) GetCategory;
			}
		}
		[CRepr]
		public struct IElementBehaviorSiteCategory : IUnknown
		{
			public const new Guid IID = .(0x3050f4ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRelatedBehaviors(int32 lDirection, PWSTR pchCategory, out IEnumUnknown* ppEnumerator) mut => VT.GetRelatedBehaviors(ref this, lDirection, pchCategory, out ppEnumerator);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteCategory self, int32 lDirection, PWSTR pchCategory, out IEnumUnknown* ppEnumerator) GetRelatedBehaviors;
			}
		}
		[CRepr]
		public struct IElementBehaviorSubmit : IUnknown
		{
			public const new Guid IID = .(0x3050f646, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSubmitInfo(ref IHTMLSubmitData pSubmitData) mut => VT.GetSubmitInfo(ref this, ref pSubmitData);
			public HRESULT Reset() mut => VT.Reset(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSubmit self, ref IHTMLSubmitData pSubmitData) GetSubmitInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSubmit self) Reset;
			}
		}
		[CRepr]
		public struct IElementBehaviorFocus : IUnknown
		{
			public const new Guid IID = .(0x3050f6b6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFocusRect(ref RECT pRect) mut => VT.GetFocusRect(ref this, ref pRect);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorFocus self, ref RECT pRect) GetFocusRect;
			}
		}
		[CRepr]
		public struct IElementBehaviorLayout : IUnknown
		{
			public const new Guid IID = .(0x3050f6ba, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSize(int32 dwFlags, SIZE sizeContent, out POINT pptTranslateBy, out POINT pptTopLeft, out SIZE psizeProposed) mut => VT.GetSize(ref this, dwFlags, sizeContent, out pptTranslateBy, out pptTopLeft, out psizeProposed);
			public HRESULT GetLayoutInfo(out int32 plLayoutInfo) mut => VT.GetLayoutInfo(ref this, out plLayoutInfo);
			public HRESULT GetPosition(int32 lFlags, out POINT pptTopLeft) mut => VT.GetPosition(ref this, lFlags, out pptTopLeft);
			public HRESULT MapSize(ref SIZE psizeIn, out RECT prcOut) mut => VT.MapSize(ref this, ref psizeIn, out prcOut);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorLayout self, int32 dwFlags, SIZE sizeContent, out POINT pptTranslateBy, out POINT pptTopLeft, out SIZE psizeProposed) GetSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorLayout self, out int32 plLayoutInfo) GetLayoutInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorLayout self, int32 lFlags, out POINT pptTopLeft) GetPosition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorLayout self, ref SIZE psizeIn, out RECT prcOut) MapSize;
			}
		}
		[CRepr]
		public struct IElementBehaviorLayout2 : IUnknown
		{
			public const new Guid IID = .(0x3050f846, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTextDescent(out int32 plDescent) mut => VT.GetTextDescent(ref this, out plDescent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorLayout2 self, out int32 plDescent) GetTextDescent;
			}
		}
		[CRepr]
		public struct IElementBehaviorSiteLayout : IUnknown
		{
			public const new Guid IID = .(0x3050f6b7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InvalidateLayoutInfo() mut => VT.InvalidateLayoutInfo(ref this);
			public HRESULT InvalidateSize() mut => VT.InvalidateSize(ref this);
			public HRESULT GetMediaResolution(out SIZE psizeResolution) mut => VT.GetMediaResolution(ref this, out psizeResolution);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteLayout self) InvalidateLayoutInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteLayout self) InvalidateSize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteLayout self, out SIZE psizeResolution) GetMediaResolution;
			}
		}
		[CRepr]
		public struct IElementBehaviorSiteLayout2 : IUnknown
		{
			public const new Guid IID = .(0x3050f847, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFontInfo(out LOGFONTW plf) mut => VT.GetFontInfo(ref this, out plf);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IElementBehaviorSiteLayout2 self, out LOGFONTW plf) GetFontInfo;
			}
		}
		[CRepr]
		public struct IHostBehaviorInit : IUnknown
		{
			public const new Guid IID = .(0x3050f842, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT PopulateNamespaceTable() mut => VT.PopulateNamespaceTable(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHostBehaviorInit self) PopulateNamespaceTable;
			}
		}
		[CRepr]
		public struct ISurfacePresenter : IUnknown
		{
			public const new Guid IID = .(0x305106e2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Present(uint32 uBuffer, ref RECT pDirty) mut => VT.Present(ref this, uBuffer, ref pDirty);
			public HRESULT GetBuffer(uint32 backBufferIndex, in Guid riid, void** ppBuffer) mut => VT.GetBuffer(ref this, backBufferIndex, riid, ppBuffer);
			public HRESULT IsCurrent(out BOOL pIsCurrent) mut => VT.IsCurrent(ref this, out pIsCurrent);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenter self, uint32 uBuffer, ref RECT pDirty) Present;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenter self, uint32 backBufferIndex, in Guid riid, void** ppBuffer) GetBuffer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenter self, out BOOL pIsCurrent) IsCurrent;
			}
		}
		[CRepr]
		public struct IViewObjectPresentSite : IUnknown
		{
			public const new Guid IID = .(0x305106e1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateSurfacePresenter(ref IUnknown pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, out ISurfacePresenter* ppQueue) mut => VT.CreateSurfacePresenter(ref this, ref pDevice, width, height, backBufferCount, format, mode, out ppQueue);
			public HRESULT IsHardwareComposition(out BOOL pIsHardwareComposition) mut => VT.IsHardwareComposition(ref this, out pIsHardwareComposition);
			public HRESULT SetCompositionMode(VIEW_OBJECT_COMPOSITION_MODE mode) mut => VT.SetCompositionMode(ref this, mode);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentSite self, ref IUnknown pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, out ISurfacePresenter* ppQueue) CreateSurfacePresenter;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentSite self, out BOOL pIsHardwareComposition) IsHardwareComposition;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentSite self, VIEW_OBJECT_COMPOSITION_MODE mode) SetCompositionMode;
			}
		}
		[CRepr]
		public struct ICanvasPixelArrayData : IUnknown
		{
			public const new Guid IID = .(0x305107f9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetBufferPointer(out uint8* ppBuffer, out uint32 pBufferLength) mut => VT.GetBufferPointer(ref this, out ppBuffer, out pBufferLength);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICanvasPixelArrayData self, out uint8* ppBuffer, out uint32 pBufferLength) GetBufferPointer;
			}
		}
		[CRepr]
		public struct IViewObjectPrint : IUnknown
		{
			public const new Guid IID = .(0x305106e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetPrintBitmap(out IUnknown* ppPrintBitmap) mut => VT.GetPrintBitmap(ref this, out ppPrintBitmap);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPrint self, out IUnknown* ppPrintBitmap) GetPrintBitmap;
			}
		}
		[CRepr]
		public struct IViewObjectPresentNotifySite : IViewObjectPresentSite
		{
			public const new Guid IID = .(0x305107fa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT RequestFrame() mut => VT.RequestFrame(ref this);

			[CRepr]
			public struct VTable : IViewObjectPresentSite.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentNotifySite self) RequestFrame;
			}
		}
		[CRepr]
		public struct IViewObjectPresentNotify : IUnknown
		{
			public const new Guid IID = .(0x305107f8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnPreRender() mut => VT.OnPreRender(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentNotify self) OnPreRender;
			}
		}
		[CRepr]
		public struct ITrackingProtection : IUnknown
		{
			public const new Guid IID = .(0x30510803, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EvaluateUrl(BSTR bstrUrl, out BOOL pfAllowed) mut => VT.EvaluateUrl(ref this, bstrUrl, out pfAllowed);
			public HRESULT GetEnabled(out BOOL pfEnabled) mut => VT.GetEnabled(ref this, out pfEnabled);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITrackingProtection self, BSTR bstrUrl, out BOOL pfAllowed) EvaluateUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITrackingProtection self, out BOOL pfEnabled) GetEnabled;
			}
		}
		[CRepr]
		public struct IBFCacheable : IUnknown
		{
			public const new Guid IID = .(0x30510861, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EnterBFCache() mut => VT.EnterBFCache(ref this);
			public HRESULT ExitBFCache() mut => VT.ExitBFCache(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBFCacheable self) EnterBFCache;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IBFCacheable self) ExitBFCache;
			}
		}
		[CRepr]
		public struct IDocObjectService : IUnknown
		{
			public const new Guid IID = .(0x3050f801, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FireBeforeNavigate2(IDispatch* pDispatch, PWSTR lpszUrl, uint32 dwFlags, PWSTR lpszFrameName, ref uint8 pPostData, uint32 cbPostData, PWSTR lpszHeaders, BOOL fPlayNavSound, out BOOL pfCancel) mut => VT.FireBeforeNavigate2(ref this, pDispatch, lpszUrl, dwFlags, lpszFrameName, ref pPostData, cbPostData, lpszHeaders, fPlayNavSound, out pfCancel);
			public HRESULT FireNavigateComplete2(IHTMLWindow2* pHTMLWindow2, uint32 dwFlags) mut => VT.FireNavigateComplete2(ref this, pHTMLWindow2, dwFlags);
			public HRESULT FireDownloadBegin() mut => VT.FireDownloadBegin(ref this);
			public HRESULT FireDownloadComplete() mut => VT.FireDownloadComplete(ref this);
			public HRESULT FireDocumentComplete(IHTMLWindow2* pHTMLWindow, uint32 dwFlags) mut => VT.FireDocumentComplete(ref this, pHTMLWindow, dwFlags);
			public HRESULT UpdateDesktopComponent(IHTMLWindow2* pHTMLWindow) mut => VT.UpdateDesktopComponent(ref this, pHTMLWindow);
			public HRESULT GetPendingUrl(BSTR* pbstrPendingUrl) mut => VT.GetPendingUrl(ref this, pbstrPendingUrl);
			public HRESULT ActiveElementChanged(IHTMLElement* pHTMLElement) mut => VT.ActiveElementChanged(ref this, pHTMLElement);
			public HRESULT GetUrlSearchComponent(BSTR* pbstrSearch) mut => VT.GetUrlSearchComponent(ref this, pbstrSearch);
			public HRESULT IsErrorUrl(PWSTR lpszUrl, out BOOL pfIsError) mut => VT.IsErrorUrl(ref this, lpszUrl, out pfIsError);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, IDispatch* pDispatch, PWSTR lpszUrl, uint32 dwFlags, PWSTR lpszFrameName, ref uint8 pPostData, uint32 cbPostData, PWSTR lpszHeaders, BOOL fPlayNavSound, out BOOL pfCancel) FireBeforeNavigate2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, IHTMLWindow2* pHTMLWindow2, uint32 dwFlags) FireNavigateComplete2;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self) FireDownloadBegin;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self) FireDownloadComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, IHTMLWindow2* pHTMLWindow, uint32 dwFlags) FireDocumentComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, IHTMLWindow2* pHTMLWindow) UpdateDesktopComponent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, BSTR* pbstrPendingUrl) GetPendingUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, IHTMLElement* pHTMLElement) ActiveElementChanged;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, BSTR* pbstrSearch) GetUrlSearchComponent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocObjectService self, PWSTR lpszUrl, out BOOL pfIsError) IsErrorUrl;
			}
		}
		[CRepr]
		public struct IDownloadManager : IUnknown
		{
			public const new Guid IID = .(0x988934a4, 0x064b, 0x11d3, 0xbb, 0x80, 0x00, 0x10, 0x4b, 0x35, 0xe7, 0xf9);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Download(ref IMoniker pmk, ref IBindCtx pbc, uint32 dwBindVerb, int32 grfBINDF, ref BINDINFO pBindInfo, PWSTR pszHeaders, PWSTR pszRedir, uint32 uiCP) mut => VT.Download(ref this, ref pmk, ref pbc, dwBindVerb, grfBINDF, ref pBindInfo, pszHeaders, pszRedir, uiCP);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDownloadManager self, ref IMoniker pmk, ref IBindCtx pbc, uint32 dwBindVerb, int32 grfBINDF, ref BINDINFO pBindInfo, PWSTR pszHeaders, PWSTR pszRedir, uint32 uiCP) Download;
			}
		}
		[CRepr]
		public struct IExtensionValidation : IUnknown
		{
			public const new Guid IID = .(0x7d33f73d, 0x8525, 0x4e0f, 0x87, 0xdb, 0x83, 0x02, 0x88, 0xba, 0xff, 0x44);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Validate(in Guid extensionGuid, PWSTR extensionModulePath, uint32 extensionFileVersionMS, uint32 extensionFileVersionLS, ref IHTMLDocument2 htmlDocumentTop, ref IHTMLDocument2 htmlDocumentSubframe, ref IHTMLElement htmlElement, ExtensionValidationContexts contexts, out ExtensionValidationResults results) mut => VT.Validate(ref this, extensionGuid, extensionModulePath, extensionFileVersionMS, extensionFileVersionLS, ref htmlDocumentTop, ref htmlDocumentSubframe, ref htmlElement, contexts, out results);
			public HRESULT DisplayName(out PWSTR displayName) mut => VT.DisplayName(ref this, out displayName);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IExtensionValidation self, in Guid extensionGuid, PWSTR extensionModulePath, uint32 extensionFileVersionMS, uint32 extensionFileVersionLS, ref IHTMLDocument2 htmlDocumentTop, ref IHTMLDocument2 htmlDocumentSubframe, ref IHTMLElement htmlElement, ExtensionValidationContexts contexts, out ExtensionValidationResults results) Validate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IExtensionValidation self, out PWSTR displayName) DisplayName;
			}
		}
		[CRepr]
		public struct IHomePageSetting : IUnknown
		{
			public const new Guid IID = .(0xfdfc244f, 0x18fa, 0x4ff2, 0xb0, 0x8e, 0x1d, 0x61, 0x8f, 0x3f, 0xfb, 0xe4);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetHomePage(HWND hwnd, PWSTR homePageUri, PWSTR brandingMessage) mut => VT.SetHomePage(ref this, hwnd, homePageUri, brandingMessage);
			public HRESULT IsHomePage(PWSTR uri, out BOOL isDefault) mut => VT.IsHomePage(ref this, uri, out isDefault);
			public HRESULT SetHomePageToBrowserDefault() mut => VT.SetHomePageToBrowserDefault(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHomePageSetting self, HWND hwnd, PWSTR homePageUri, PWSTR brandingMessage) SetHomePage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHomePageSetting self, PWSTR uri, out BOOL isDefault) IsHomePage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHomePageSetting self) SetHomePageToBrowserDefault;
			}
		}
		[CRepr]
		public struct ITargetNotify : IUnknown
		{
			public const new Guid IID = .(0x863a99a0, 0x21bc, 0x11d0, 0x82, 0xb4, 0x00, 0xa0, 0xc9, 0x0c, 0x29, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnCreate(ref IUnknown pUnkDestination, uint32 cbCookie) mut => VT.OnCreate(ref this, ref pUnkDestination, cbCookie);
			public HRESULT OnReuse(ref IUnknown pUnkDestination) mut => VT.OnReuse(ref this, ref pUnkDestination);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetNotify self, ref IUnknown pUnkDestination, uint32 cbCookie) OnCreate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetNotify self, ref IUnknown pUnkDestination) OnReuse;
			}
		}
		[CRepr]
		public struct ITargetNotify2 : ITargetNotify
		{
			public const new Guid IID = .(0x3050f6b1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetOptionString(out BSTR pbstrOptions) mut => VT.GetOptionString(ref this, out pbstrOptions);

			[CRepr]
			public struct VTable : ITargetNotify.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetNotify2 self, out BSTR pbstrOptions) GetOptionString;
			}
		}
		[CRepr]
		public struct ITargetFrame2 : IUnknown
		{
			public const new Guid IID = .(0x86d52e11, 0x94a8, 0x11d0, 0x82, 0xaf, 0x00, 0xc0, 0x4f, 0xd5, 0xae, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetFrameName(PWSTR pszFrameName) mut => VT.SetFrameName(ref this, pszFrameName);
			public HRESULT GetFrameName(out PWSTR ppszFrameName) mut => VT.GetFrameName(ref this, out ppszFrameName);
			public HRESULT GetParentFrame(out IUnknown* ppunkParent) mut => VT.GetParentFrame(ref this, out ppunkParent);
			public HRESULT SetFrameSrc(PWSTR pszFrameSrc) mut => VT.SetFrameSrc(ref this, pszFrameSrc);
			public HRESULT GetFrameSrc(out PWSTR ppszFrameSrc) mut => VT.GetFrameSrc(ref this, out ppszFrameSrc);
			public HRESULT GetFramesContainer(out IOleContainer* ppContainer) mut => VT.GetFramesContainer(ref this, out ppContainer);
			public HRESULT SetFrameOptions(uint32 dwFlags) mut => VT.SetFrameOptions(ref this, dwFlags);
			public HRESULT GetFrameOptions(out uint32 pdwFlags) mut => VT.GetFrameOptions(ref this, out pdwFlags);
			public HRESULT SetFrameMargins(uint32 dwWidth, uint32 dwHeight) mut => VT.SetFrameMargins(ref this, dwWidth, dwHeight);
			public HRESULT GetFrameMargins(out uint32 pdwWidth, out uint32 pdwHeight) mut => VT.GetFrameMargins(ref this, out pdwWidth, out pdwHeight);
			public HRESULT FindFrame(PWSTR pszTargetName, uint32 dwFlags, out IUnknown* ppunkTargetFrame) mut => VT.FindFrame(ref this, pszTargetName, dwFlags, out ppunkTargetFrame);
			public HRESULT GetTargetAlias(PWSTR pszTargetName, out PWSTR ppszTargetAlias) mut => VT.GetTargetAlias(ref this, pszTargetName, out ppszTargetAlias);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, PWSTR pszFrameName) SetFrameName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, out PWSTR ppszFrameName) GetFrameName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, out IUnknown* ppunkParent) GetParentFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, PWSTR pszFrameSrc) SetFrameSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, out PWSTR ppszFrameSrc) GetFrameSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, out IOleContainer* ppContainer) GetFramesContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, uint32 dwFlags) SetFrameOptions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, out uint32 pdwFlags) GetFrameOptions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, uint32 dwWidth, uint32 dwHeight) SetFrameMargins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, out uint32 pdwWidth, out uint32 pdwHeight) GetFrameMargins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, PWSTR pszTargetName, uint32 dwFlags, out IUnknown* ppunkTargetFrame) FindFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame2 self, PWSTR pszTargetName, out PWSTR ppszTargetAlias) GetTargetAlias;
			}
		}
		[CRepr]
		public struct ITargetContainer : IUnknown
		{
			public const new Guid IID = .(0x7847ec01, 0x2bec, 0x11d0, 0x82, 0xb4, 0x00, 0xa0, 0xc9, 0x0c, 0x29, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetFrameUrl(out PWSTR ppszFrameSrc) mut => VT.GetFrameUrl(ref this, out ppszFrameSrc);
			public HRESULT GetFramesContainer(out IOleContainer* ppContainer) mut => VT.GetFramesContainer(ref this, out ppContainer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetContainer self, out PWSTR ppszFrameSrc) GetFrameUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetContainer self, out IOleContainer* ppContainer) GetFramesContainer;
			}
		}
		[CRepr]
		public struct ITargetFrame : IUnknown
		{
			public const new Guid IID = .(0xd5f78c80, 0x5252, 0x11cf, 0x90, 0xfa, 0x00, 0xaa, 0x00, 0x42, 0x10, 0x6e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetFrameName(PWSTR pszFrameName) mut => VT.SetFrameName(ref this, pszFrameName);
			public HRESULT GetFrameName(out PWSTR ppszFrameName) mut => VT.GetFrameName(ref this, out ppszFrameName);
			public HRESULT GetParentFrame(out IUnknown* ppunkParent) mut => VT.GetParentFrame(ref this, out ppunkParent);
			public HRESULT FindFrame(PWSTR pszTargetName, ref IUnknown ppunkContextFrame, uint32 dwFlags, out IUnknown* ppunkTargetFrame) mut => VT.FindFrame(ref this, pszTargetName, ref ppunkContextFrame, dwFlags, out ppunkTargetFrame);
			public HRESULT SetFrameSrc(PWSTR pszFrameSrc) mut => VT.SetFrameSrc(ref this, pszFrameSrc);
			public HRESULT GetFrameSrc(out PWSTR ppszFrameSrc) mut => VT.GetFrameSrc(ref this, out ppszFrameSrc);
			public HRESULT GetFramesContainer(out IOleContainer* ppContainer) mut => VT.GetFramesContainer(ref this, out ppContainer);
			public HRESULT SetFrameOptions(uint32 dwFlags) mut => VT.SetFrameOptions(ref this, dwFlags);
			public HRESULT GetFrameOptions(out uint32 pdwFlags) mut => VT.GetFrameOptions(ref this, out pdwFlags);
			public HRESULT SetFrameMargins(uint32 dwWidth, uint32 dwHeight) mut => VT.SetFrameMargins(ref this, dwWidth, dwHeight);
			public HRESULT GetFrameMargins(out uint32 pdwWidth, out uint32 pdwHeight) mut => VT.GetFrameMargins(ref this, out pdwWidth, out pdwHeight);
			public HRESULT RemoteNavigate(uint32 cLength, uint32* pulData) mut => VT.RemoteNavigate(ref this, cLength, pulData);
			public HRESULT OnChildFrameActivate(ref IUnknown pUnkChildFrame) mut => VT.OnChildFrameActivate(ref this, ref pUnkChildFrame);
			public HRESULT OnChildFrameDeactivate(ref IUnknown pUnkChildFrame) mut => VT.OnChildFrameDeactivate(ref this, ref pUnkChildFrame);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, PWSTR pszFrameName) SetFrameName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, out PWSTR ppszFrameName) GetFrameName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, out IUnknown* ppunkParent) GetParentFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, PWSTR pszTargetName, ref IUnknown ppunkContextFrame, uint32 dwFlags, out IUnknown* ppunkTargetFrame) FindFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, PWSTR pszFrameSrc) SetFrameSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, out PWSTR ppszFrameSrc) GetFrameSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, out IOleContainer* ppContainer) GetFramesContainer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, uint32 dwFlags) SetFrameOptions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, out uint32 pdwFlags) GetFrameOptions;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, uint32 dwWidth, uint32 dwHeight) SetFrameMargins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, out uint32 pdwWidth, out uint32 pdwHeight) GetFrameMargins;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, uint32 cLength, uint32* pulData) RemoteNavigate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, ref IUnknown pUnkChildFrame) OnChildFrameActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFrame self, ref IUnknown pUnkChildFrame) OnChildFrameDeactivate;
			}
		}
		[CRepr]
		public struct ITargetEmbedding : IUnknown
		{
			public const new Guid IID = .(0x548793c0, 0x9e74, 0x11cf, 0x96, 0x55, 0x00, 0xa0, 0xc9, 0x03, 0x49, 0x23);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetTargetFrame(out ITargetFrame* ppTargetFrame) mut => VT.GetTargetFrame(ref this, out ppTargetFrame);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetEmbedding self, out ITargetFrame* ppTargetFrame) GetTargetFrame;
			}
		}
		[CRepr]
		public struct ITargetFramePriv : IUnknown
		{
			public const new Guid IID = .(0x9216e421, 0x2bf5, 0x11d0, 0x82, 0xb4, 0x00, 0xa0, 0xc9, 0x0c, 0x29, 0xc5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FindFrameDownwards(PWSTR pszTargetName, uint32 dwFlags, out IUnknown* ppunkTargetFrame) mut => VT.FindFrameDownwards(ref this, pszTargetName, dwFlags, out ppunkTargetFrame);
			public HRESULT FindFrameInContext(PWSTR pszTargetName, ref IUnknown punkContextFrame, uint32 dwFlags, out IUnknown* ppunkTargetFrame) mut => VT.FindFrameInContext(ref this, pszTargetName, ref punkContextFrame, dwFlags, out ppunkTargetFrame);
			public HRESULT OnChildFrameActivate(ref IUnknown pUnkChildFrame) mut => VT.OnChildFrameActivate(ref this, ref pUnkChildFrame);
			public HRESULT OnChildFrameDeactivate(ref IUnknown pUnkChildFrame) mut => VT.OnChildFrameDeactivate(ref this, ref pUnkChildFrame);
			public HRESULT NavigateHack(uint32 grfHLNF, ref IBindCtx pbc, ref IBindStatusCallback pibsc, PWSTR pszTargetName, PWSTR pszUrl, PWSTR pszLocation) mut => VT.NavigateHack(ref this, grfHLNF, ref pbc, ref pibsc, pszTargetName, pszUrl, pszLocation);
			public HRESULT FindBrowserByIndex(uint32 dwID, out IUnknown* ppunkBrowser) mut => VT.FindBrowserByIndex(ref this, dwID, out ppunkBrowser);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv self, PWSTR pszTargetName, uint32 dwFlags, out IUnknown* ppunkTargetFrame) FindFrameDownwards;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv self, PWSTR pszTargetName, ref IUnknown punkContextFrame, uint32 dwFlags, out IUnknown* ppunkTargetFrame) FindFrameInContext;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv self, ref IUnknown pUnkChildFrame) OnChildFrameActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv self, ref IUnknown pUnkChildFrame) OnChildFrameDeactivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv self, uint32 grfHLNF, ref IBindCtx pbc, ref IBindStatusCallback pibsc, PWSTR pszTargetName, PWSTR pszUrl, PWSTR pszLocation) NavigateHack;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv self, uint32 dwID, out IUnknown* ppunkBrowser) FindBrowserByIndex;
			}
		}
		[CRepr]
		public struct ITargetFramePriv2 : ITargetFramePriv
		{
			public const new Guid IID = .(0xb2c867e6, 0x69d6, 0x46f2, 0xa6, 0x11, 0xde, 0xd9, 0xa4, 0xbd, 0x7f, 0xef);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AggregatedNavigation2(uint32 grfHLNF, ref IBindCtx pbc, ref IBindStatusCallback pibsc, PWSTR pszTargetName, ref IUri pUri, PWSTR pszLocation) mut => VT.AggregatedNavigation2(ref this, grfHLNF, ref pbc, ref pibsc, pszTargetName, ref pUri, pszLocation);

			[CRepr]
			public struct VTable : ITargetFramePriv.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITargetFramePriv2 self, uint32 grfHLNF, ref IBindCtx pbc, ref IBindStatusCallback pibsc, PWSTR pszTargetName, ref IUri pUri, PWSTR pszLocation) AggregatedNavigation2;
			}
		}
		[CRepr]
		public struct ISurfacePresenterFlipBuffer : IUnknown
		{
			public const new Guid IID = .(0xe43f4a08, 0x8bbc, 0x4665, 0xac, 0x92, 0xc5, 0x5c, 0xe6, 0x1f, 0xd7, 0xe7);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT BeginDraw(in Guid riid, void** ppBuffer) mut => VT.BeginDraw(ref this, riid, ppBuffer);
			public HRESULT EndDraw() mut => VT.EndDraw(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenterFlipBuffer self, in Guid riid, void** ppBuffer) BeginDraw;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenterFlipBuffer self) EndDraw;
			}
		}
		[CRepr]
		public struct ISurfacePresenterFlip : IUnknown
		{
			public const new Guid IID = .(0x30510848, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Present() mut => VT.Present(ref this);
			public HRESULT GetBuffer(uint32 backBufferIndex, in Guid riid, void** ppBuffer) mut => VT.GetBuffer(ref this, backBufferIndex, riid, ppBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenterFlip self) Present;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenterFlip self, uint32 backBufferIndex, in Guid riid, void** ppBuffer) GetBuffer;
			}
		}
		[CRepr]
		public struct ISurfacePresenterFlip2 : IUnknown
		{
			public const new Guid IID = .(0x30510865, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetRotation(DXGI_MODE_ROTATION dxgiRotation) mut => VT.SetRotation(ref this, dxgiRotation);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISurfacePresenterFlip2 self, DXGI_MODE_ROTATION dxgiRotation) SetRotation;
			}
		}
		[CRepr]
		public struct IViewObjectPresentFlipSite : IUnknown
		{
			public const new Guid IID = .(0x30510846, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateSurfacePresenterFlip(IUnknown* pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, ISurfacePresenterFlip** ppSPFlip) mut => VT.CreateSurfacePresenterFlip(ref this, pDevice, width, height, backBufferCount, format, mode, ppSPFlip);
			public HRESULT GetDeviceLuid(out LUID pLuid) mut => VT.GetDeviceLuid(ref this, out pLuid);
			public HRESULT EnterFullScreen() mut => VT.EnterFullScreen(ref this);
			public HRESULT ExitFullScreen() mut => VT.ExitFullScreen(ref this);
			public HRESULT IsFullScreen(out BOOL pfFullScreen) mut => VT.IsFullScreen(ref this, out pfFullScreen);
			public HRESULT GetBoundingRect(out RECT pRect) mut => VT.GetBoundingRect(ref this, out pRect);
			public HRESULT GetMetrics(out POINT pPos, out SIZE pSize, out float pScaleX, out float pScaleY) mut => VT.GetMetrics(ref this, out pPos, out pSize, out pScaleX, out pScaleY);
			public HRESULT GetFullScreenSize(out SIZE pSize) mut => VT.GetFullScreenSize(ref this, out pSize);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self, IUnknown* pDevice, uint32 width, uint32 height, uint32 backBufferCount, DXGI_FORMAT format, VIEW_OBJECT_ALPHA_MODE mode, ISurfacePresenterFlip** ppSPFlip) CreateSurfacePresenterFlip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self, out LUID pLuid) GetDeviceLuid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self) EnterFullScreen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self) ExitFullScreen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self, out BOOL pfFullScreen) IsFullScreen;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self, out RECT pRect) GetBoundingRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self, out POINT pPos, out SIZE pSize, out float pScaleX, out float pScaleY) GetMetrics;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite self, out SIZE pSize) GetFullScreenSize;
			}
		}
		[CRepr]
		public struct IViewObjectPresentFlipSite2 : IUnknown
		{
			public const new Guid IID = .(0xaad0cbf1, 0xe7fd, 0x4f12, 0x89, 0x02, 0xc7, 0x81, 0x32, 0xa8, 0xe0, 0x1d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetRotationForCurrentOutput(out DXGI_MODE_ROTATION pDxgiRotation) mut => VT.GetRotationForCurrentOutput(ref this, out pDxgiRotation);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlipSite2 self, out DXGI_MODE_ROTATION pDxgiRotation) GetRotationForCurrentOutput;
			}
		}
		[CRepr]
		public struct IViewObjectPresentFlip : IUnknown
		{
			public const new Guid IID = .(0x30510847, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT NotifyRender(BOOL fRecreatePresenter) mut => VT.NotifyRender(ref this, fRecreatePresenter);
			public HRESULT RenderObjectToBitmap(IUnknown* pBitmap) mut => VT.RenderObjectToBitmap(ref this, pBitmap);
			public HRESULT RenderObjectToSharedBuffer(ISurfacePresenterFlipBuffer* pBuffer) mut => VT.RenderObjectToSharedBuffer(ref this, pBuffer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlip self, BOOL fRecreatePresenter) NotifyRender;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlip self, IUnknown* pBitmap) RenderObjectToBitmap;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlip self, ISurfacePresenterFlipBuffer* pBuffer) RenderObjectToSharedBuffer;
			}
		}
		[CRepr]
		public struct IViewObjectPresentFlip2 : IUnknown
		{
			public const new Guid IID = .(0x30510856, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT NotifyLeavingView() mut => VT.NotifyLeavingView(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IViewObjectPresentFlip2 self) NotifyLeavingView;
			}
		}
		[CRepr]
		public struct IActiveXUIHandlerSite2 : IUnknown
		{
			public const new Guid IID = .(0x7e3707b2, 0xd087, 0x4542, 0xac, 0x1f, 0xa0, 0xd2, 0xfc, 0xd0, 0x80, 0xfd);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddSuspensionExemption(out uint64 pullCookie) mut => VT.AddSuspensionExemption(ref this, out pullCookie);
			public HRESULT RemoveSuspensionExemption(uint64 ullCookie) mut => VT.RemoveSuspensionExemption(ref this, ullCookie);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IActiveXUIHandlerSite2 self, out uint64 pullCookie) AddSuspensionExemption;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IActiveXUIHandlerSite2 self, uint64 ullCookie) RemoveSuspensionExemption;
			}
		}
		[CRepr]
		public struct ICaretPositionProvider : IUnknown
		{
			public const new Guid IID = .(0x58da43a2, 0x108e, 0x4d5b, 0x9f, 0x75, 0xe5, 0xf7, 0x4f, 0x93, 0xff, 0xf5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCaretPosition(out POINT pptCaret, out float pflHeight) mut => VT.GetCaretPosition(ref this, out pptCaret, out pflHeight);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICaretPositionProvider self, out POINT pptCaret, out float pflHeight) GetCaretPosition;
			}
		}
		[CRepr]
		public struct ITridentTouchInput : IUnknown
		{
			public const new Guid IID = .(0x30510850, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnPointerMessage(uint32 msg, WPARAM wParam, LPARAM lParam, out BOOL pfAllowManipulations) mut => VT.OnPointerMessage(ref this, msg, wParam, lParam, out pfAllowManipulations);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITridentTouchInput self, uint32 msg, WPARAM wParam, LPARAM lParam, out BOOL pfAllowManipulations) OnPointerMessage;
			}
		}
		[CRepr]
		public struct ITridentTouchInputSite : IUnknown
		{
			public const new Guid IID = .(0x30510849, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetManipulationMode(styleMsTouchAction msTouchAction) mut => VT.SetManipulationMode(ref this, msTouchAction);
			public HRESULT ZoomToPoint(int32 x, int32 y) mut => VT.ZoomToPoint(ref this, x, y);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITridentTouchInputSite self, styleMsTouchAction msTouchAction) SetManipulationMode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITridentTouchInputSite self, int32 x, int32 y) ZoomToPoint;
			}
		}
		[CRepr]
		public struct IMediaActivityNotifySite : IUnknown
		{
			public const new Guid IID = .(0x8165cfef, 0x179d, 0x46c2, 0xbc, 0x71, 0x3f, 0xa7, 0x26, 0xdc, 0x1f, 0x8d);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnMediaActivityStarted(MediaActivityNotifyType mediaActivityType) mut => VT.OnMediaActivityStarted(ref this, mediaActivityType);
			public HRESULT OnMediaActivityStopped(MediaActivityNotifyType mediaActivityType) mut => VT.OnMediaActivityStopped(ref this, mediaActivityType);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaActivityNotifySite self, MediaActivityNotifyType mediaActivityType) OnMediaActivityStarted;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMediaActivityNotifySite self, MediaActivityNotifyType mediaActivityType) OnMediaActivityStopped;
			}
		}
		[CRepr]
		public struct IAudioSessionSite : IUnknown
		{
			public const new Guid IID = .(0xd7d8b684, 0xd02d, 0x4517, 0xb6, 0xb7, 0x19, 0xe3, 0xdf, 0xe2, 0x9c, 0x45);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetAudioSessionGuid(out Guid audioSessionGuid) mut => VT.GetAudioSessionGuid(ref this, out audioSessionGuid);
			public HRESULT OnAudioStreamCreated(PWSTR endpointID) mut => VT.OnAudioStreamCreated(ref this, endpointID);
			public HRESULT OnAudioStreamDestroyed(PWSTR endpointID) mut => VT.OnAudioStreamDestroyed(ref this, endpointID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioSessionSite self, out Guid audioSessionGuid) GetAudioSessionGuid;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioSessionSite self, PWSTR endpointID) OnAudioStreamCreated;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAudioSessionSite self, PWSTR endpointID) OnAudioStreamDestroyed;
			}
		}
		[CRepr]
		public struct IPrintTaskRequestHandler : IUnknown
		{
			public const new Guid IID = .(0x191cd340, 0xcf36, 0x44ff, 0xbd, 0x53, 0xd1, 0xb7, 0x01, 0x79, 0x9d, 0x9b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT HandlePrintTaskRequest(ref IInspectable pPrintTaskRequest) mut => VT.HandlePrintTaskRequest(ref this, ref pPrintTaskRequest);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintTaskRequestHandler self, ref IInspectable pPrintTaskRequest) HandlePrintTaskRequest;
			}
		}
		[CRepr]
		public struct IPrintTaskRequestFactory : IUnknown
		{
			public const new Guid IID = .(0xbb516745, 0x8c34, 0x4f8b, 0x96, 0x05, 0x68, 0x4d, 0xcb, 0x14, 0x4b, 0xe5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreatePrintTaskRequest(IPrintTaskRequestHandler* pPrintTaskRequestHandler) mut => VT.CreatePrintTaskRequest(ref this, pPrintTaskRequestHandler);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPrintTaskRequestFactory self, IPrintTaskRequestHandler* pPrintTaskRequestHandler) CreatePrintTaskRequest;
			}
		}
		[CRepr]
		public struct IScrollableContextMenu : IUnknown
		{
			public const new Guid IID = .(0x30510854, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddItem(PWSTR itemText, uint32 cmdID) mut => VT.AddItem(ref this, itemText, cmdID);
			public HRESULT ShowModal(int32 x, int32 y, out uint32 cmdID) mut => VT.ShowModal(ref this, x, y, out cmdID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScrollableContextMenu self, PWSTR itemText, uint32 cmdID) AddItem;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScrollableContextMenu self, int32 x, int32 y, out uint32 cmdID) ShowModal;
			}
		}
		[CRepr]
		public struct IScrollableContextMenu2 : IScrollableContextMenu
		{
			public const new Guid IID = .(0xf77e9056, 0x8674, 0x4936, 0x92, 0x4c, 0x0e, 0x4a, 0x06, 0xfa, 0x63, 0x4a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddSeparator() mut => VT.AddSeparator(ref this);
			public HRESULT SetPlacement(SCROLLABLECONTEXTMENU_PLACEMENT scmp) mut => VT.SetPlacement(ref this, scmp);

			[CRepr]
			public struct VTable : IScrollableContextMenu.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScrollableContextMenu2 self) AddSeparator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IScrollableContextMenu2 self, SCROLLABLECONTEXTMENU_PLACEMENT scmp) SetPlacement;
			}
		}
		[CRepr]
		public struct IActiveXUIHandlerSite : IUnknown
		{
			public const new Guid IID = .(0x30510853, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateScrollableContextMenu(IScrollableContextMenu** scrollableContextMenu) mut => VT.CreateScrollableContextMenu(ref this, scrollableContextMenu);
			public HRESULT PickFileAndGetResult(IUnknown* filePicker, BOOL allowMultipleSelections, IUnknown** result) mut => VT.PickFileAndGetResult(ref this, filePicker, allowMultipleSelections, result);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IActiveXUIHandlerSite self, IScrollableContextMenu** scrollableContextMenu) CreateScrollableContextMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IActiveXUIHandlerSite self, IUnknown* filePicker, BOOL allowMultipleSelections, IUnknown** result) PickFileAndGetResult;
			}
		}
		[CRepr]
		public struct IActiveXUIHandlerSite3 : IUnknown
		{
			public const new Guid IID = .(0x7904009a, 0x1238, 0x47f4, 0x90, 0x1c, 0x87, 0x13, 0x75, 0xc3, 0x46, 0x08);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT MessageBoxW(HWND hwnd, PWSTR text, PWSTR caption, uint32 type, out int32 result) mut => VT.MessageBoxW(ref this, hwnd, text, caption, type, out result);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IActiveXUIHandlerSite3 self, HWND hwnd, PWSTR text, PWSTR caption, uint32 type, out int32 result) MessageBoxW;
			}
		}
		[CRepr]
		public struct IEnumManagerFrames : IUnknown
		{
			public const new Guid IID = .(0x3caa826a, 0x9b1f, 0x4a79, 0xbc, 0x81, 0xf0, 0x43, 0x0d, 0xed, 0x16, 0x48);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, HWND** ppWindows, out uint32 pceltFetched) mut => VT.Next(ref this, celt, ppWindows, out pceltFetched);
			public HRESULT Count(out uint32 pcelt) mut => VT.Count(ref this, out pcelt);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumManagerFrames* ppEnum) mut => VT.Clone(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumManagerFrames self, uint32 celt, HWND** ppWindows, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumManagerFrames self, out uint32 pcelt) Count;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumManagerFrames self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumManagerFrames self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumManagerFrames self, out IEnumManagerFrames* ppEnum) Clone;
			}
		}
		[CRepr]
		public struct IInternetExplorerManager : IUnknown
		{
			public const new Guid IID = .(0xacc84351, 0x04ff, 0x44f9, 0xb2, 0x3f, 0x65, 0x5e, 0xd1, 0x68, 0xc6, 0xd5);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateObject(uint32 dwConfig, PWSTR pszURL, in Guid riid, void** ppv) mut => VT.CreateObject(ref this, dwConfig, pszURL, riid, ppv);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IInternetExplorerManager self, uint32 dwConfig, PWSTR pszURL, in Guid riid, void** ppv) CreateObject;
			}
		}
		[CRepr]
		public struct IInternetExplorerManager2 : IUnknown
		{
			public const new Guid IID = .(0xdfbb5136, 0x9259, 0x4895, 0xb4, 0xa7, 0xc1, 0x93, 0x44, 0x29, 0x91, 0x9a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EnumFrameWindows(out IEnumManagerFrames* ppEnum) mut => VT.EnumFrameWindows(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IInternetExplorerManager2 self, out IEnumManagerFrames* ppEnum) EnumFrameWindows;
			}
		}
		[CRepr]
		public struct IIEWebDriverSite : IDispatch
		{
			public const new Guid IID = .(0xffb84444, 0x453d, 0x4fbc, 0x9f, 0x9d, 0x8d, 0xb5, 0xc4, 0x71, 0xec, 0x75);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT WindowOperation(uint32 operationCode, uint32 hWnd) mut => VT.WindowOperation(ref this, operationCode, hWnd);
			public HRESULT DetachWebdriver(ref IUnknown pUnkWD) mut => VT.DetachWebdriver(ref this, ref pUnkWD);
			public HRESULT GetCapabilityValue(ref IUnknown pUnkWD, PWSTR capName, out VARIANT capValue) mut => VT.GetCapabilityValue(ref this, ref pUnkWD, capName, out capValue);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIEWebDriverSite self, uint32 operationCode, uint32 hWnd) WindowOperation;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIEWebDriverSite self, ref IUnknown pUnkWD) DetachWebdriver;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIEWebDriverSite self, ref IUnknown pUnkWD, PWSTR capName, out VARIANT capValue) GetCapabilityValue;
			}
		}
		[CRepr]
		public struct IIEWebDriverManager : IDispatch
		{
			public const new Guid IID = .(0xbd1dc630, 0x6590, 0x4ca2, 0xa2, 0x93, 0x6b, 0xc7, 0x2b, 0x24, 0x38, 0xd8);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ExecuteCommand(PWSTR command, out PWSTR response) mut => VT.ExecuteCommand(ref this, command, out response);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIEWebDriverManager self, PWSTR command, out PWSTR response) ExecuteCommand;
			}
		}
		[CRepr]
		public struct IPeerFactory : IUnknown
		{
			public const new Guid IID = .(0x6663f9d3, 0xb482, 0x11d1, 0x89, 0xc6, 0x00, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IUnknown.VTable {}
		}
		[CRepr]
		public struct IHomePage : IDispatch
		{
			public const new Guid IID = .(0x766bf2af, 0xd650, 0x11d1, 0x98, 0x11, 0x00, 0xc0, 0x4f, 0xc3, 0x1d, 0x2e);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT navigateHomePage() mut => VT.navigateHomePage(ref this);
			public HRESULT setHomePage(BSTR bstrURL) mut => VT.setHomePage(ref this, bstrURL);
			public HRESULT isHomePage(BSTR bstrURL, out int16 p) mut => VT.isHomePage(ref this, bstrURL, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHomePage self) navigateHomePage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHomePage self, BSTR bstrURL) setHomePage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHomePage self, BSTR bstrURL, out int16 p) isHomePage;
			}
		}
		[CRepr]
		public struct IIntelliForms : IDispatch
		{
			public const new Guid IID = .(0x9b9f68e6, 0x1aaa, 0x11d2, 0xbc, 0xa5, 0x00, 0xc0, 0x4f, 0xd9, 0x29, 0xdb);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_enabled(out int16 pVal) mut => VT.get_enabled(ref this, out pVal);
			public HRESULT put_enabled(int16 bVal) mut => VT.put_enabled(ref this, bVal);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIntelliForms self, out int16 pVal) get_enabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IIntelliForms self, int16 bVal) put_enabled;
			}
		}
		[CRepr]
		public struct Iwfolders : IDispatch
		{
			public const new Guid IID = .(0xbae31f98, 0x1b81, 0x11d2, 0xa9, 0x7a, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT navigate(BSTR bstrUrl, out BSTR pbstrRetVal) mut => VT.navigate(ref this, bstrUrl, out pbstrRetVal);
			public HRESULT navigateFrame(BSTR bstrUrl, BSTR bstrTargetFrame, out BSTR pbstrRetVal) mut => VT.navigateFrame(ref this, bstrUrl, bstrTargetFrame, out pbstrRetVal);
			public HRESULT navigateNoSite(BSTR bstrUrl, BSTR bstrTargetFrame, uint32 dwhwnd, ref IUnknown pwb) mut => VT.navigateNoSite(ref this, bstrUrl, bstrTargetFrame, dwhwnd, ref pwb);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref Iwfolders self, BSTR bstrUrl, out BSTR pbstrRetVal) navigate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref Iwfolders self, BSTR bstrUrl, BSTR bstrTargetFrame, out BSTR pbstrRetVal) navigateFrame;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref Iwfolders self, BSTR bstrUrl, BSTR bstrTargetFrame, uint32 dwhwnd, ref IUnknown pwb) navigateNoSite;
			}
		}
		[CRepr]
		public struct IAnchorClick : IDispatch
		{
			public const new Guid IID = .(0x13d5413b, 0x33b9, 0x11d2, 0x95, 0xa7, 0x00, 0xc0, 0x4f, 0x8e, 0xcb, 0x02);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ProcOnClick() mut => VT.ProcOnClick(ref this);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IAnchorClick self) ProcOnClick;
			}
		}
		[CRepr]
		public struct IHTMLUserDataOM : IDispatch
		{
			public const new Guid IID = .(0x3050f48f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_XMLDocument(out IDispatch* p) mut => VT.get_XMLDocument(ref this, out p);
			public HRESULT save(BSTR strName) mut => VT.save(ref this, strName);
			public HRESULT load(BSTR strName) mut => VT.load(ref this, strName);
			public HRESULT getAttribute(BSTR name, out VARIANT pValue) mut => VT.getAttribute(ref this, name, out pValue);
			public HRESULT setAttribute(BSTR name, VARIANT value) mut => VT.setAttribute(ref this, name, value);
			public HRESULT removeAttribute(BSTR name) mut => VT.removeAttribute(ref this, name);
			public HRESULT put_expires(BSTR bstr) mut => VT.put_expires(ref this, bstr);
			public HRESULT get_expires(out BSTR pbstr) mut => VT.get_expires(ref this, out pbstr);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, out IDispatch* p) get_XMLDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, BSTR strName) save;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, BSTR strName) load;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, BSTR name, out VARIANT pValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, BSTR name, VARIANT value) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, BSTR name) removeAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, BSTR bstr) put_expires;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLUserDataOM self, out BSTR pbstr) get_expires;
			}
		}
		[CRepr]
		public struct IHTMLPersistDataOM : IDispatch
		{
			public const new Guid IID = .(0x3050f4c0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_XMLDocument(out IDispatch* p) mut => VT.get_XMLDocument(ref this, out p);
			public HRESULT getAttribute(BSTR name, out VARIANT pValue) mut => VT.getAttribute(ref this, name, out pValue);
			public HRESULT setAttribute(BSTR name, VARIANT value) mut => VT.setAttribute(ref this, name, value);
			public HRESULT removeAttribute(BSTR name) mut => VT.removeAttribute(ref this, name);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistDataOM self, out IDispatch* p) get_XMLDocument;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistDataOM self, BSTR name, out VARIANT pValue) getAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistDataOM self, BSTR name, VARIANT value) setAttribute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistDataOM self, BSTR name) removeAttribute;
			}
		}
		[CRepr]
		public struct IHTMLPersistData : IUnknown
		{
			public const new Guid IID = .(0x3050f4c5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT save(ref IUnknown pUnk, int32 lType, out int16 fContinueBroacast) mut => VT.save(ref this, ref pUnk, lType, out fContinueBroacast);
			public HRESULT load(ref IUnknown pUnk, int32 lType, out int16 fDoDefault) mut => VT.load(ref this, ref pUnk, lType, out fDoDefault);
			public HRESULT queryType(int32 lType, out int16 pfSupportsType) mut => VT.queryType(ref this, lType, out pfSupportsType);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistData self, ref IUnknown pUnk, int32 lType, out int16 fContinueBroacast) save;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistData self, ref IUnknown pUnk, int32 lType, out int16 fDoDefault) load;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLPersistData self, int32 lType, out int16 pfSupportsType) queryType;
			}
		}
		[CRepr]
		public struct IDownloadBehavior : IDispatch
		{
			public const new Guid IID = .(0x3050f5bd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT startDownload(BSTR bstrUrl, ref IDispatch pdispCallback) mut => VT.startDownload(ref this, bstrUrl, ref pdispCallback);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDownloadBehavior self, BSTR bstrUrl, ref IDispatch pdispCallback) startDownload;
			}
		}
		[CRepr]
		public struct ILayoutRect : IDispatch
		{
			public const new Guid IID = .(0x3050f665, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_nextRect(BSTR bstrElementId) mut => VT.put_nextRect(ref this, bstrElementId);
			public HRESULT get_nextRect(out BSTR pbstrElementId) mut => VT.get_nextRect(ref this, out pbstrElementId);
			public HRESULT put_contentSrc(VARIANT varContentSrc) mut => VT.put_contentSrc(ref this, varContentSrc);
			public HRESULT get_contentSrc(out VARIANT pvarContentSrc) mut => VT.get_contentSrc(ref this, out pvarContentSrc);
			public HRESULT put_honorPageBreaks(int16 v) mut => VT.put_honorPageBreaks(ref this, v);
			public HRESULT get_honorPageBreaks(out int16 p) mut => VT.get_honorPageBreaks(ref this, out p);
			public HRESULT put_honorPageRules(int16 v) mut => VT.put_honorPageRules(ref this, v);
			public HRESULT get_honorPageRules(out int16 p) mut => VT.get_honorPageRules(ref this, out p);
			public HRESULT put_nextRectElement(ref IDispatch pElem) mut => VT.put_nextRectElement(ref this, ref pElem);
			public HRESULT get_nextRectElement(out IDispatch* ppElem) mut => VT.get_nextRectElement(ref this, out ppElem);
			public HRESULT get_contentDocument(out IDispatch* pDoc) mut => VT.get_contentDocument(ref this, out pDoc);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, BSTR bstrElementId) put_nextRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, out BSTR pbstrElementId) get_nextRect;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, VARIANT varContentSrc) put_contentSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, out VARIANT pvarContentSrc) get_contentSrc;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, int16 v) put_honorPageBreaks;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, out int16 p) get_honorPageBreaks;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, int16 v) put_honorPageRules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, out int16 p) get_honorPageRules;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, ref IDispatch pElem) put_nextRectElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, out IDispatch* ppElem) get_nextRectElement;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ILayoutRect self, out IDispatch* pDoc) get_contentDocument;
			}
		}
		[CRepr]
		public struct IDeviceRect : IDispatch
		{
			public const new Guid IID = .(0x3050f6d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IDispatch.VTable {}
		}
		[CRepr]
		public struct IHeaderFooter : IDispatch
		{
			public const new Guid IID = .(0x3050f6ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT get_htmlHead(out BSTR p) mut => VT.get_htmlHead(ref this, out p);
			public HRESULT get_htmlFoot(out BSTR p) mut => VT.get_htmlFoot(ref this, out p);
			public HRESULT put_textHead(BSTR v) mut => VT.put_textHead(ref this, v);
			public HRESULT get_textHead(out BSTR p) mut => VT.get_textHead(ref this, out p);
			public HRESULT put_textFoot(BSTR v) mut => VT.put_textFoot(ref this, v);
			public HRESULT get_textFoot(out BSTR p) mut => VT.get_textFoot(ref this, out p);
			public HRESULT put_page(uint32 v) mut => VT.put_page(ref this, v);
			public HRESULT get_page(out uint32 p) mut => VT.get_page(ref this, out p);
			public HRESULT put_pageTotal(uint32 v) mut => VT.put_pageTotal(ref this, v);
			public HRESULT get_pageTotal(out uint32 p) mut => VT.get_pageTotal(ref this, out p);
			public HRESULT put_URL(BSTR v) mut => VT.put_URL(ref this, v);
			public HRESULT get_URL(out BSTR p) mut => VT.get_URL(ref this, out p);
			public HRESULT put_title(BSTR v) mut => VT.put_title(ref this, v);
			public HRESULT get_title(out BSTR p) mut => VT.get_title(ref this, out p);
			public HRESULT put_dateShort(BSTR v) mut => VT.put_dateShort(ref this, v);
			public HRESULT get_dateShort(out BSTR p) mut => VT.get_dateShort(ref this, out p);
			public HRESULT put_dateLong(BSTR v) mut => VT.put_dateLong(ref this, v);
			public HRESULT get_dateLong(out BSTR p) mut => VT.get_dateLong(ref this, out p);
			public HRESULT put_timeShort(BSTR v) mut => VT.put_timeShort(ref this, v);
			public HRESULT get_timeShort(out BSTR p) mut => VT.get_timeShort(ref this, out p);
			public HRESULT put_timeLong(BSTR v) mut => VT.put_timeLong(ref this, v);
			public HRESULT get_timeLong(out BSTR p) mut => VT.get_timeLong(ref this, out p);

			[CRepr]
			public struct VTable : IDispatch.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_htmlHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_htmlFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_textHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_textHead;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_textFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_textFoot;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, uint32 v) put_page;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out uint32 p) get_page;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, uint32 v) put_pageTotal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out uint32 p) get_pageTotal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_URL;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_title;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_dateShort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_dateShort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_dateLong;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_dateLong;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_timeShort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_timeShort;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, BSTR v) put_timeLong;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter self, out BSTR p) get_timeLong;
			}
		}
		[CRepr]
		public struct IHeaderFooter2 : IHeaderFooter
		{
			public const new Guid IID = .(0x305104a5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT put_font(BSTR v) mut => VT.put_font(ref this, v);
			public HRESULT get_font(out BSTR p) mut => VT.get_font(ref this, out p);

			[CRepr]
			public struct VTable : IHeaderFooter.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter2 self, BSTR v) put_font;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHeaderFooter2 self, out BSTR p) get_font;
			}
		}
		[CRepr]
		public struct IHostDialogHelper : IUnknown
		{
			public const new Guid IID = .(0x53dec138, 0xa51e, 0x11d2, 0x86, 0x1e, 0x00, 0xc0, 0x4f, 0xa3, 0x5c, 0x89);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ShowHTMLDialog(HWND hwndParent, ref IMoniker pMk, out VARIANT pvarArgIn, PWSTR pchOptions, out VARIANT pvarArgOut, ref IUnknown punkHost) mut => VT.ShowHTMLDialog(ref this, hwndParent, ref pMk, out pvarArgIn, pchOptions, out pvarArgOut, ref punkHost);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHostDialogHelper self, HWND hwndParent, ref IMoniker pMk, out VARIANT pvarArgIn, PWSTR pchOptions, out VARIANT pvarArgOut, ref IUnknown punkHost) ShowHTMLDialog;
			}
		}
		[CRepr]
		public struct IDocHostUIHandler : IUnknown
		{
			public const new Guid IID = .(0xbd3f23c0, 0xd43e, 0x11cf, 0x89, 0x3b, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x1a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ShowContextMenu(uint32 dwID, ref POINT ppt, ref IUnknown pcmdtReserved, ref IDispatch pdispReserved) mut => VT.ShowContextMenu(ref this, dwID, ref ppt, ref pcmdtReserved, ref pdispReserved);
			public HRESULT GetHostInfo(out DOCHOSTUIINFO pInfo) mut => VT.GetHostInfo(ref this, out pInfo);
			public HRESULT ShowUI(uint32 dwID, ref IOleInPlaceActiveObject pActiveObject, ref IOleCommandTarget pCommandTarget, ref IOleInPlaceFrame pFrame, ref IOleInPlaceUIWindow pDoc) mut => VT.ShowUI(ref this, dwID, ref pActiveObject, ref pCommandTarget, ref pFrame, ref pDoc);
			public HRESULT HideUI() mut => VT.HideUI(ref this);
			public HRESULT UpdateUI() mut => VT.UpdateUI(ref this);
			public HRESULT EnableModeless(BOOL fEnable) mut => VT.EnableModeless(ref this, fEnable);
			public HRESULT OnDocWindowActivate(BOOL fActivate) mut => VT.OnDocWindowActivate(ref this, fActivate);
			public HRESULT OnFrameWindowActivate(BOOL fActivate) mut => VT.OnFrameWindowActivate(ref this, fActivate);
			public HRESULT ResizeBorder(ref RECT prcBorder, ref IOleInPlaceUIWindow pUIWindow, BOOL fRameWindow) mut => VT.ResizeBorder(ref this, ref prcBorder, ref pUIWindow, fRameWindow);
			public HRESULT TranslateAccelerator(ref MSG lpMsg, in Guid pguidCmdGroup, uint32 nCmdID) mut => VT.TranslateAccelerator(ref this, ref lpMsg, pguidCmdGroup, nCmdID);
			public HRESULT GetOptionKeyPath(out PWSTR pchKey, uint32 dw) mut => VT.GetOptionKeyPath(ref this, out pchKey, dw);
			public HRESULT GetDropTarget(ref IDropTarget pDropTarget, out IDropTarget* ppDropTarget) mut => VT.GetDropTarget(ref this, ref pDropTarget, out ppDropTarget);
			public HRESULT GetExternal(IDispatch** ppDispatch) mut => VT.GetExternal(ref this, ppDispatch);
			public HRESULT TranslateUrl(uint32 dwTranslate, PWSTR pchURLIn, out PWSTR ppchURLOut) mut => VT.TranslateUrl(ref this, dwTranslate, pchURLIn, out ppchURLOut);
			public HRESULT FilterDataObject(ref IDataObject pDO, IDataObject** ppDORet) mut => VT.FilterDataObject(ref this, ref pDO, ppDORet);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, uint32 dwID, ref POINT ppt, ref IUnknown pcmdtReserved, ref IDispatch pdispReserved) ShowContextMenu;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, out DOCHOSTUIINFO pInfo) GetHostInfo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, uint32 dwID, ref IOleInPlaceActiveObject pActiveObject, ref IOleCommandTarget pCommandTarget, ref IOleInPlaceFrame pFrame, ref IOleInPlaceUIWindow pDoc) ShowUI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self) HideUI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self) UpdateUI;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, BOOL fEnable) EnableModeless;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, BOOL fActivate) OnDocWindowActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, BOOL fActivate) OnFrameWindowActivate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, ref RECT prcBorder, ref IOleInPlaceUIWindow pUIWindow, BOOL fRameWindow) ResizeBorder;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, ref MSG lpMsg, in Guid pguidCmdGroup, uint32 nCmdID) TranslateAccelerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, out PWSTR pchKey, uint32 dw) GetOptionKeyPath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, ref IDropTarget pDropTarget, out IDropTarget* ppDropTarget) GetDropTarget;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, IDispatch** ppDispatch) GetExternal;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, uint32 dwTranslate, PWSTR pchURLIn, out PWSTR ppchURLOut) TranslateUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler self, ref IDataObject pDO, IDataObject** ppDORet) FilterDataObject;
			}
		}
		[CRepr]
		public struct IDocHostUIHandler2 : IDocHostUIHandler
		{
			public const new Guid IID = .(0x3050f6d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetOverrideKeyPath(out PWSTR pchKey, uint32 dw) mut => VT.GetOverrideKeyPath(ref this, out pchKey, dw);

			[CRepr]
			public struct VTable : IDocHostUIHandler.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostUIHandler2 self, out PWSTR pchKey, uint32 dw) GetOverrideKeyPath;
			}
		}
		[CRepr]
		public struct ICustomDoc : IUnknown
		{
			public const new Guid IID = .(0x3050f3f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetUIHandler(ref IDocHostUIHandler pUIHandler) mut => VT.SetUIHandler(ref this, ref pUIHandler);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ICustomDoc self, ref IDocHostUIHandler pUIHandler) SetUIHandler;
			}
		}
		[CRepr]
		public struct IDocHostShowUI : IUnknown
		{
			public const new Guid IID = .(0xc4d244b0, 0xd43e, 0x11cf, 0x89, 0x3b, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x1a);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT ShowMessage(HWND hwnd, PWSTR lpstrText, PWSTR lpstrCaption, uint32 dwType, PWSTR lpstrHelpFile, uint32 dwHelpContext, out LRESULT plResult) mut => VT.ShowMessage(ref this, hwnd, lpstrText, lpstrCaption, dwType, lpstrHelpFile, dwHelpContext, out plResult);
			public HRESULT ShowHelp(HWND hwnd, PWSTR pszHelpFile, uint32 uCommand, uint32 dwData, POINT ptMouse, out IDispatch pDispatchObjectHit) mut => VT.ShowHelp(ref this, hwnd, pszHelpFile, uCommand, dwData, ptMouse, out pDispatchObjectHit);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostShowUI self, HWND hwnd, PWSTR lpstrText, PWSTR lpstrCaption, uint32 dwType, PWSTR lpstrHelpFile, uint32 dwHelpContext, out LRESULT plResult) ShowMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDocHostShowUI self, HWND hwnd, PWSTR pszHelpFile, uint32 uCommand, uint32 dwData, POINT ptMouse, out IDispatch pDispatchObjectHit) ShowHelp;
			}
		}
		[CRepr]
		public struct IClassFactoryEx : IClassFactory
		{
			public const new Guid IID = .(0x342d1ea0, 0xae25, 0x11d1, 0x89, 0xc5, 0x00, 0x60, 0x08, 0xc3, 0xfb, 0xfc);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateInstanceWithContext(ref IUnknown punkContext, ref IUnknown punkOuter, in Guid riid, void** ppv) mut => VT.CreateInstanceWithContext(ref this, ref punkContext, ref punkOuter, riid, ppv);

			[CRepr]
			public struct VTable : IClassFactory.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IClassFactoryEx self, ref IUnknown punkContext, ref IUnknown punkOuter, in Guid riid, void** ppv) CreateInstanceWithContext;
			}
		}
		[CRepr]
		public struct IHTMLOMWindowServices : IUnknown
		{
			public const new Guid IID = .(0x3050f5fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT moveTo(int32 x, int32 y) mut => VT.moveTo(ref this, x, y);
			public HRESULT moveBy(int32 x, int32 y) mut => VT.moveBy(ref this, x, y);
			public HRESULT resizeTo(int32 x, int32 y) mut => VT.resizeTo(ref this, x, y);
			public HRESULT resizeBy(int32 x, int32 y) mut => VT.resizeBy(ref this, x, y);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOMWindowServices self, int32 x, int32 y) moveTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOMWindowServices self, int32 x, int32 y) moveBy;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOMWindowServices self, int32 x, int32 y) resizeTo;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IHTMLOMWindowServices self, int32 x, int32 y) resizeBy;
			}
		}
		[CRepr]
		public struct IDiagnosticsScriptEngineSite : IUnknown
		{
			public const new Guid IID = .(0x30510858, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnMessage(PWSTR* pszData, uint32 ulDataCount) mut => VT.OnMessage(ref this, pszData, ulDataCount);
			public HRESULT OnScriptError(ref IActiveScriptError pScriptError) mut => VT.OnScriptError(ref this, ref pScriptError);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDiagnosticsScriptEngineSite self, PWSTR* pszData, uint32 ulDataCount) OnMessage;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDiagnosticsScriptEngineSite self, ref IActiveScriptError pScriptError) OnScriptError;
			}
		}
		[CRepr]
		public struct IDiagnosticsScriptEngine : IUnknown
		{
			public const new Guid IID = .(0x30510859, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EvaluateScript(PWSTR pszScript, PWSTR pszScriptName) mut => VT.EvaluateScript(ref this, pszScript, pszScriptName);
			public HRESULT FireScriptMessageEvent(PWSTR* pszNames, PWSTR* pszValues, uint32 ulPropertyCount) mut => VT.FireScriptMessageEvent(ref this, pszNames, pszValues, ulPropertyCount);
			public HRESULT Detach() mut => VT.Detach(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDiagnosticsScriptEngine self, PWSTR pszScript, PWSTR pszScriptName) EvaluateScript;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDiagnosticsScriptEngine self, PWSTR* pszNames, PWSTR* pszValues, uint32 ulPropertyCount) FireScriptMessageEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDiagnosticsScriptEngine self) Detach;
			}
		}
		[CRepr]
		public struct IDiagnosticsScriptEngineProvider : IUnknown
		{
			public const new Guid IID = .(0x3051085a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateDiagnosticsScriptEngine(IDiagnosticsScriptEngineSite* pScriptSite, BOOL fDebuggingEnabled, uint32 ulProcessId, out IDiagnosticsScriptEngine* ppEngine) mut => VT.CreateDiagnosticsScriptEngine(ref this, pScriptSite, fDebuggingEnabled, ulProcessId, out ppEngine);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDiagnosticsScriptEngineProvider self, IDiagnosticsScriptEngineSite* pScriptSite, BOOL fDebuggingEnabled, uint32 ulProcessId, out IDiagnosticsScriptEngine* ppEngine) CreateDiagnosticsScriptEngine;
			}
		}
		[CRepr]
		public struct IOpenServiceActivityInput : IUnknown
		{
			public const new Guid IID = .(0x75cb4db9, 0x6da0, 0x4da3, 0x83, 0xce, 0x42, 0x2b, 0x6a, 0x43, 0x33, 0x46);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetVariable(PWSTR pwzVariableName, PWSTR pwzVariableType, out BSTR pbstrVariableContent) mut => VT.GetVariable(ref this, pwzVariableName, pwzVariableType, out pbstrVariableContent);
			public HRESULT HasVariable(PWSTR pwzVariableName, PWSTR pwzVariableType, out BOOL pfHasVariable) mut => VT.HasVariable(ref this, pwzVariableName, pwzVariableType, out pfHasVariable);
			public HRESULT ComGetType(out OpenServiceActivityContentType pType) mut => VT.ComGetType(ref this, out pType);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityInput self, PWSTR pwzVariableName, PWSTR pwzVariableType, out BSTR pbstrVariableContent) GetVariable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityInput self, PWSTR pwzVariableName, PWSTR pwzVariableType, out BOOL pfHasVariable) HasVariable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityInput self, out OpenServiceActivityContentType pType) ComGetType;
			}
		}
		[CRepr]
		public struct IOpenServiceActivityOutputContext : IUnknown
		{
			public const new Guid IID = .(0xe289deab, 0xf709, 0x49a9, 0xb9, 0x9e, 0x28, 0x23, 0x64, 0x07, 0x45, 0x71);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Navigate(PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, ref IStream pPostData) mut => VT.Navigate(ref this, pwzUri, pwzMethod, pwzHeaders, ref pPostData);
			public HRESULT CanNavigate(PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, ref IStream pPostData, out BOOL pfCanNavigate) mut => VT.CanNavigate(ref this, pwzUri, pwzMethod, pwzHeaders, ref pPostData, out pfCanNavigate);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityOutputContext self, PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, ref IStream pPostData) Navigate;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityOutputContext self, PWSTR pwzUri, PWSTR pwzMethod, PWSTR pwzHeaders, ref IStream pPostData, out BOOL pfCanNavigate) CanNavigate;
			}
		}
		[CRepr]
		public struct IOpenService : IUnknown
		{
			public const new Guid IID = .(0xc2952ed1, 0x6a89, 0x4606, 0x92, 0x5f, 0x1e, 0xd8, 0xb4, 0xbe, 0x06, 0x30);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsDefault(out BOOL pfIsDefault) mut => VT.IsDefault(ref this, out pfIsDefault);
			public HRESULT SetDefault(BOOL fDefault, HWND hwnd) mut => VT.SetDefault(ref this, fDefault, hwnd);
			public HRESULT GetID(out BSTR pbstrID) mut => VT.GetID(ref this, out pbstrID);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenService self, out BOOL pfIsDefault) IsDefault;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenService self, BOOL fDefault, HWND hwnd) SetDefault;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenService self, out BSTR pbstrID) GetID;
			}
		}
		[CRepr]
		public struct IOpenServiceManager : IUnknown
		{
			public const new Guid IID = .(0x5664125f, 0x4e10, 0x4e90, 0x98, 0xe4, 0xe4, 0x51, 0x3d, 0x95, 0x5a, 0x14);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT InstallService(PWSTR pwzServiceUrl, out IOpenService* ppService) mut => VT.InstallService(ref this, pwzServiceUrl, out ppService);
			public HRESULT UninstallService(ref IOpenService pService) mut => VT.UninstallService(ref this, ref pService);
			public HRESULT GetServiceByID(PWSTR pwzID, out IOpenService* ppService) mut => VT.GetServiceByID(ref this, pwzID, out ppService);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceManager self, PWSTR pwzServiceUrl, out IOpenService* ppService) InstallService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceManager self, ref IOpenService pService) UninstallService;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceManager self, PWSTR pwzID, out IOpenService* ppService) GetServiceByID;
			}
		}
		[CRepr]
		public struct IOpenServiceActivity : IOpenService
		{
			public const new Guid IID = .(0x13645c88, 0x221a, 0x4905, 0x8e, 0xd1, 0x4f, 0x51, 0x12, 0xcf, 0xc1, 0x08);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Execute(ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput) mut => VT.Execute(ref this, ref pInput, ref pOutput);
			public HRESULT CanExecute(ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput, out BOOL pfCanExecute) mut => VT.CanExecute(ref this, ref pInput, ref pOutput, out pfCanExecute);
			public HRESULT CanExecuteType(OpenServiceActivityContentType type, out BOOL pfCanExecute) mut => VT.CanExecuteType(ref this, type, out pfCanExecute);
			public HRESULT Preview(ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput) mut => VT.Preview(ref this, ref pInput, ref pOutput);
			public HRESULT CanPreview(ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput, out BOOL pfCanPreview) mut => VT.CanPreview(ref this, ref pInput, ref pOutput, out pfCanPreview);
			public HRESULT CanPreviewType(OpenServiceActivityContentType type, out BOOL pfCanPreview) mut => VT.CanPreviewType(ref this, type, out pfCanPreview);
			public HRESULT GetStatusText(ref IOpenServiceActivityInput pInput, out BSTR pbstrStatusText) mut => VT.GetStatusText(ref this, ref pInput, out pbstrStatusText);
			public HRESULT GetHomepageUrl(out BSTR pbstrHomepageUrl) mut => VT.GetHomepageUrl(ref this, out pbstrHomepageUrl);
			public HRESULT GetDisplayName(out BSTR pbstrDisplayName) mut => VT.GetDisplayName(ref this, out pbstrDisplayName);
			public HRESULT GetDescription(out BSTR pbstrDescription) mut => VT.GetDescription(ref this, out pbstrDescription);
			public HRESULT GetCategoryName(out BSTR pbstrCategoryName) mut => VT.GetCategoryName(ref this, out pbstrCategoryName);
			public HRESULT GetIconPath(out BSTR pbstrIconPath) mut => VT.GetIconPath(ref this, out pbstrIconPath);
			public HRESULT GetIcon(BOOL fSmallIcon, out HICON phIcon) mut => VT.GetIcon(ref this, fSmallIcon, out phIcon);
			public HRESULT GetDescriptionFilePath(out BSTR pbstrXmlPath) mut => VT.GetDescriptionFilePath(ref this, out pbstrXmlPath);
			public HRESULT GetDownloadUrl(out BSTR pbstrXmlUri) mut => VT.GetDownloadUrl(ref this, out pbstrXmlUri);
			public HRESULT GetInstallUrl(out BSTR pbstrInstallUri) mut => VT.GetInstallUrl(ref this, out pbstrInstallUri);
			public HRESULT IsEnabled(out BOOL pfIsEnabled) mut => VT.IsEnabled(ref this, out pfIsEnabled);
			public HRESULT SetEnabled(BOOL fEnable) mut => VT.SetEnabled(ref this, fEnable);

			[CRepr]
			public struct VTable : IOpenService.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput) Execute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput, out BOOL pfCanExecute) CanExecute;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, OpenServiceActivityContentType type, out BOOL pfCanExecute) CanExecuteType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput) Preview;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput, out BOOL pfCanPreview) CanPreview;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, OpenServiceActivityContentType type, out BOOL pfCanPreview) CanPreviewType;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, ref IOpenServiceActivityInput pInput, out BSTR pbstrStatusText) GetStatusText;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrHomepageUrl) GetHomepageUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrDisplayName) GetDisplayName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrDescription) GetDescription;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrCategoryName) GetCategoryName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrIconPath) GetIconPath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, BOOL fSmallIcon, out HICON phIcon) GetIcon;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrXmlPath) GetDescriptionFilePath;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrXmlUri) GetDownloadUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BSTR pbstrInstallUri) GetInstallUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, out BOOL pfIsEnabled) IsEnabled;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivity self, BOOL fEnable) SetEnabled;
			}
		}
		[CRepr]
		public struct IEnumOpenServiceActivity : IUnknown
		{
			public const new Guid IID = .(0xa436d7d2, 0x17c3, 0x4ef4, 0xa1, 0xe8, 0x5c, 0x86, 0xfa, 0xff, 0x26, 0xc0);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, IOpenServiceActivity** rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumOpenServiceActivity* ppenum) mut => VT.Clone(ref this, out ppenum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivity self, uint32 celt, IOpenServiceActivity** rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivity self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivity self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivity self, out IEnumOpenServiceActivity* ppenum) Clone;
			}
		}
		[CRepr]
		public struct IOpenServiceActivityCategory : IUnknown
		{
			public const new Guid IID = .(0x850af9d6, 0x7309, 0x40b5, 0xbd, 0xb8, 0x78, 0x6c, 0x10, 0x6b, 0x21, 0x53);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT HasDefaultActivity(out BOOL pfHasDefaultActivity) mut => VT.HasDefaultActivity(ref this, out pfHasDefaultActivity);
			public HRESULT GetDefaultActivity(out IOpenServiceActivity* ppDefaultActivity) mut => VT.GetDefaultActivity(ref this, out ppDefaultActivity);
			public HRESULT SetDefaultActivity(ref IOpenServiceActivity pActivity, HWND hwnd) mut => VT.SetDefaultActivity(ref this, ref pActivity, hwnd);
			public HRESULT GetName(out BSTR pbstrName) mut => VT.GetName(ref this, out pbstrName);
			public HRESULT GetActivityEnumerator(ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput, out IEnumOpenServiceActivity* ppEnumActivity) mut => VT.GetActivityEnumerator(ref this, ref pInput, ref pOutput, out ppEnumActivity);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityCategory self, out BOOL pfHasDefaultActivity) HasDefaultActivity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityCategory self, out IOpenServiceActivity* ppDefaultActivity) GetDefaultActivity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityCategory self, ref IOpenServiceActivity pActivity, HWND hwnd) SetDefaultActivity;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityCategory self, out BSTR pbstrName) GetName;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityCategory self, ref IOpenServiceActivityInput pInput, ref IOpenServiceActivityOutputContext pOutput, out IEnumOpenServiceActivity* ppEnumActivity) GetActivityEnumerator;
			}
		}
		[CRepr]
		public struct IEnumOpenServiceActivityCategory : IUnknown
		{
			public const new Guid IID = .(0x33627a56, 0x8c9a, 0x4430, 0x8f, 0xd1, 0xb5, 0xf5, 0xc7, 0x71, 0xaf, 0xb6);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, IOpenServiceActivityCategory** rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumOpenServiceActivityCategory* ppenum) mut => VT.Clone(ref this, out ppenum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivityCategory self, uint32 celt, IOpenServiceActivityCategory** rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivityCategory self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivityCategory self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumOpenServiceActivityCategory self, out IEnumOpenServiceActivityCategory* ppenum) Clone;
			}
		}
		[CRepr]
		public struct IOpenServiceActivityManager : IUnknown
		{
			public const new Guid IID = .(0x8a2d0a9d, 0xe920, 0x4bdc, 0xa2, 0x91, 0xd3, 0x0f, 0x65, 0x0b, 0xc4, 0xf1);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetCategoryEnumerator(OpenServiceActivityContentType eType, out IEnumOpenServiceActivityCategory* ppEnum) mut => VT.GetCategoryEnumerator(ref this, eType, out ppEnum);
			public HRESULT GetActivityByID(PWSTR pwzActivityID, out IOpenServiceActivity* ppActivity) mut => VT.GetActivityByID(ref this, pwzActivityID, out ppActivity);
			public HRESULT GetActivityByHomepageAndCategory(PWSTR pwzHomepage, PWSTR pwzCategory, out IOpenServiceActivity* ppActivity) mut => VT.GetActivityByHomepageAndCategory(ref this, pwzHomepage, pwzCategory, out ppActivity);
			public HRESULT GetVersionCookie(out uint32 pdwVersionCookie) mut => VT.GetVersionCookie(ref this, out pdwVersionCookie);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityManager self, OpenServiceActivityContentType eType, out IEnumOpenServiceActivityCategory* ppEnum) GetCategoryEnumerator;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityManager self, PWSTR pwzActivityID, out IOpenServiceActivity* ppActivity) GetActivityByID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityManager self, PWSTR pwzHomepage, PWSTR pwzCategory, out IOpenServiceActivity* ppActivity) GetActivityByHomepageAndCategory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IOpenServiceActivityManager self, out uint32 pdwVersionCookie) GetVersionCookie;
			}
		}
		[CRepr]
		public struct IPersistHistory : IPersist
		{
			public const new Guid IID = .(0x91a565c1, 0xe38f, 0x11d0, 0x94, 0xbf, 0x00, 0xa0, 0xc9, 0x05, 0x5c, 0xbf);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT LoadHistory(ref IStream pStream, ref IBindCtx pbc) mut => VT.LoadHistory(ref this, ref pStream, ref pbc);
			public HRESULT SaveHistory(ref IStream pStream) mut => VT.SaveHistory(ref this, ref pStream);
			public HRESULT SetPositionCookie(uint32 dwPositioncookie) mut => VT.SetPositionCookie(ref this, dwPositioncookie);
			public HRESULT GetPositionCookie(out uint32 pdwPositioncookie) mut => VT.GetPositionCookie(ref this, out pdwPositioncookie);

			[CRepr]
			public struct VTable : IPersist.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistHistory self, ref IStream pStream, ref IBindCtx pbc) LoadHistory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistHistory self, ref IStream pStream) SaveHistory;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistHistory self, uint32 dwPositioncookie) SetPositionCookie;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IPersistHistory self, out uint32 pdwPositioncookie) GetPositionCookie;
			}
		}
		[CRepr]
		public struct IEnumSTATURL : IUnknown
		{
			public const new Guid IID = .(0x3c374a42, 0xbae4, 0x11cf, 0xbf, 0x7d, 0x00, 0xaa, 0x00, 0x69, 0x46, 0xee);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Next(uint32 celt, out STATURL rgelt, out uint32 pceltFetched) mut => VT.Next(ref this, celt, out rgelt, out pceltFetched);
			public HRESULT Skip(uint32 celt) mut => VT.Skip(ref this, celt);
			public HRESULT Reset() mut => VT.Reset(ref this);
			public HRESULT Clone(out IEnumSTATURL* ppenum) mut => VT.Clone(ref this, out ppenum);
			public HRESULT SetFilter(PWSTR poszFilter, uint32 dwFlags) mut => VT.SetFilter(ref this, poszFilter, dwFlags);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumSTATURL self, uint32 celt, out STATURL rgelt, out uint32 pceltFetched) Next;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumSTATURL self, uint32 celt) Skip;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumSTATURL self) Reset;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumSTATURL self, out IEnumSTATURL* ppenum) Clone;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IEnumSTATURL self, PWSTR poszFilter, uint32 dwFlags) SetFilter;
			}
		}
		[CRepr]
		public struct IUrlHistoryStg : IUnknown
		{
			public const new Guid IID = .(0x3c374a41, 0xbae4, 0x11cf, 0xbf, 0x7d, 0x00, 0xaa, 0x00, 0x69, 0x46, 0xee);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddUrl(PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags) mut => VT.AddUrl(ref this, pocsUrl, pocsTitle, dwFlags);
			public HRESULT DeleteUrl(PWSTR pocsUrl, uint32 dwFlags) mut => VT.DeleteUrl(ref this, pocsUrl, dwFlags);
			public HRESULT QueryUrl(PWSTR pocsUrl, uint32 dwFlags, out STATURL lpSTATURL) mut => VT.QueryUrl(ref this, pocsUrl, dwFlags, out lpSTATURL);
			public HRESULT BindToObject(PWSTR pocsUrl, in Guid riid, void** ppvOut) mut => VT.BindToObject(ref this, pocsUrl, riid, ppvOut);
			public HRESULT EnumUrls(out IEnumSTATURL* ppEnum) mut => VT.EnumUrls(ref this, out ppEnum);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg self, PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags) AddUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg self, PWSTR pocsUrl, uint32 dwFlags) DeleteUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg self, PWSTR pocsUrl, uint32 dwFlags, out STATURL lpSTATURL) QueryUrl;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg self, PWSTR pocsUrl, in Guid riid, void** ppvOut) BindToObject;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg self, out IEnumSTATURL* ppEnum) EnumUrls;
			}
		}
		[CRepr]
		public struct IUrlHistoryStg2 : IUrlHistoryStg
		{
			public const new Guid IID = .(0xafa0dc11, 0xc313, 0x11d0, 0x83, 0x1a, 0x00, 0xc0, 0x4f, 0xd5, 0xae, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT AddUrlAndNotify(PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags, BOOL fWriteHistory, ref IOleCommandTarget poctNotify, ref IUnknown punkISFolder) mut => VT.AddUrlAndNotify(ref this, pocsUrl, pocsTitle, dwFlags, fWriteHistory, ref poctNotify, ref punkISFolder);
			public HRESULT ClearHistory() mut => VT.ClearHistory(ref this);

			[CRepr]
			public struct VTable : IUrlHistoryStg.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg2 self, PWSTR pocsUrl, PWSTR pocsTitle, uint32 dwFlags, BOOL fWriteHistory, ref IOleCommandTarget poctNotify, ref IUnknown punkISFolder) AddUrlAndNotify;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IUrlHistoryStg2 self) ClearHistory;
			}
		}
		[CRepr]
		public struct IUrlHistoryNotify : IOleCommandTarget
		{
			public const new Guid IID = .(0xbc40bec1, 0xc493, 0x11d0, 0x83, 0x1b, 0x00, 0xc0, 0x4f, 0xd5, 0xae, 0x38);
			
			public new VTable* VT { get => (.)vt; }
			
			[CRepr]
			public struct VTable : IOleCommandTarget.VTable {}
		}
		[CRepr]
		public struct IWebBrowserEventsService : IUnknown
		{
			public const new Guid IID = .(0x54a8f188, 0x9ebd, 0x4795, 0xad, 0x16, 0x9b, 0x49, 0x45, 0x11, 0x96, 0x36);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT FireBeforeNavigate2Event(out int16 pfCancel) mut => VT.FireBeforeNavigate2Event(ref this, out pfCancel);
			public HRESULT FireNavigateComplete2Event() mut => VT.FireNavigateComplete2Event(ref this);
			public HRESULT FireDownloadBeginEvent() mut => VT.FireDownloadBeginEvent(ref this);
			public HRESULT FireDownloadCompleteEvent() mut => VT.FireDownloadCompleteEvent(ref this);
			public HRESULT FireDocumentCompleteEvent() mut => VT.FireDocumentCompleteEvent(ref this);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBrowserEventsService self, out int16 pfCancel) FireBeforeNavigate2Event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBrowserEventsService self) FireNavigateComplete2Event;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBrowserEventsService self) FireDownloadBeginEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBrowserEventsService self) FireDownloadCompleteEvent;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBrowserEventsService self) FireDocumentCompleteEvent;
			}
		}
		[CRepr]
		public struct IWebBrowserEventsUrlService : IUnknown
		{
			public const new Guid IID = .(0x87cc5d04, 0xeafa, 0x4833, 0x98, 0x20, 0x8f, 0x98, 0x65, 0x30, 0xcc, 0x00);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetUrlForEvents(out BSTR pUrl) mut => VT.GetUrlForEvents(ref this, out pUrl);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IWebBrowserEventsUrlService self, out BSTR pUrl) GetUrlForEvents;
			}
		}
		[CRepr]
		public struct ITimerService : IUnknown
		{
			public const new Guid IID = .(0x3050f35f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT CreateTimer(ref ITimer pReferenceTimer, out ITimer* ppNewTimer) mut => VT.CreateTimer(ref this, ref pReferenceTimer, out ppNewTimer);
			public HRESULT GetNamedTimer(in Guid rguidName, out ITimer* ppTimer) mut => VT.GetNamedTimer(ref this, rguidName, out ppTimer);
			public HRESULT SetNamedTimerReference(in Guid rguidName, ref ITimer pReferenceTimer) mut => VT.SetNamedTimerReference(ref this, rguidName, ref pReferenceTimer);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimerService self, ref ITimer pReferenceTimer, out ITimer* ppNewTimer) CreateTimer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimerService self, in Guid rguidName, out ITimer* ppTimer) GetNamedTimer;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimerService self, in Guid rguidName, ref ITimer pReferenceTimer) SetNamedTimerReference;
			}
		}
		[CRepr]
		public struct ITimer : IUnknown
		{
			public const new Guid IID = .(0x3050f360, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Advise(VARIANT vtimeMin, VARIANT vtimeMax, VARIANT vtimeInterval, uint32 dwFlags, ref ITimerSink pTimerSink, out uint32 pdwCookie) mut => VT.Advise(ref this, vtimeMin, vtimeMax, vtimeInterval, dwFlags, ref pTimerSink, out pdwCookie);
			public HRESULT Unadvise(uint32 dwCookie) mut => VT.Unadvise(ref this, dwCookie);
			public HRESULT Freeze(BOOL fFreeze) mut => VT.Freeze(ref this, fFreeze);
			public HRESULT GetTime(out VARIANT pvtime) mut => VT.GetTime(ref this, out pvtime);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimer self, VARIANT vtimeMin, VARIANT vtimeMax, VARIANT vtimeInterval, uint32 dwFlags, ref ITimerSink pTimerSink, out uint32 pdwCookie) Advise;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimer self, uint32 dwCookie) Unadvise;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimer self, BOOL fFreeze) Freeze;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimer self, out VARIANT pvtime) GetTime;
			}
		}
		[CRepr]
		public struct ITimerEx : ITimer
		{
			public const new Guid IID = .(0x30510414, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetMode(uint32 dwMode) mut => VT.SetMode(ref this, dwMode);

			[CRepr]
			public struct VTable : ITimer.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimerEx self, uint32 dwMode) SetMode;
			}
		}
		[CRepr]
		public struct ITimerSink : IUnknown
		{
			public const new Guid IID = .(0x3050f361, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT OnTimer(VARIANT vtimeAdvise) mut => VT.OnTimer(ref this, vtimeAdvise);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ITimerSink self, VARIANT vtimeAdvise) OnTimer;
			}
		}
		[CRepr]
		public struct IMapMIMEToCLSID : IUnknown
		{
			public const new Guid IID = .(0xd9e89500, 0x30fa, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT EnableDefaultMappings(BOOL bEnable) mut => VT.EnableDefaultMappings(ref this, bEnable);
			public HRESULT MapMIMEToCLSID(PWSTR pszMIMEType, ref Guid pCLSID) mut => VT.MapMIMEToCLSID(ref this, pszMIMEType, ref pCLSID);
			public HRESULT SetMapping(PWSTR pszMIMEType, uint32 dwMapMode, in Guid clsid) mut => VT.SetMapping(ref this, pszMIMEType, dwMapMode, clsid);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMapMIMEToCLSID self, BOOL bEnable) EnableDefaultMappings;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMapMIMEToCLSID self, PWSTR pszMIMEType, ref Guid pCLSID) MapMIMEToCLSID;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IMapMIMEToCLSID self, PWSTR pszMIMEType, uint32 dwMapMode, in Guid clsid) SetMapping;
			}
		}
		[CRepr]
		public struct IImageDecodeFilter : IUnknown
		{
			public const new Guid IID = .(0xa3ccedf3, 0x2de2, 0x11d0, 0x86, 0xf4, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Initialize(IImageDecodeEventSink* pEventSink) mut => VT.Initialize(ref this, pEventSink);
			public HRESULT Process(IStream* pStream) mut => VT.Process(ref this, pStream);
			public HRESULT Terminate(HRESULT hrStatus) mut => VT.Terminate(ref this, hrStatus);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeFilter self, IImageDecodeEventSink* pEventSink) Initialize;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeFilter self, IStream* pStream) Process;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeFilter self, HRESULT hrStatus) Terminate;
			}
		}
		[CRepr]
		public struct IImageDecodeEventSink : IUnknown
		{
			public const new Guid IID = .(0xbaa342a0, 0x2ded, 0x11d0, 0x86, 0xf4, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT GetSurface(int32 nWidth, int32 nHeight, in Guid bfid, uint32 nPasses, uint32 dwHints, out IUnknown* ppSurface) mut => VT.GetSurface(ref this, nWidth, nHeight, bfid, nPasses, dwHints, out ppSurface);
			public HRESULT OnBeginDecode(out uint32 pdwEvents, out uint32 pnFormats, Guid** ppFormats) mut => VT.OnBeginDecode(ref this, out pdwEvents, out pnFormats, ppFormats);
			public HRESULT OnBitsComplete() mut => VT.OnBitsComplete(ref this);
			public HRESULT OnDecodeComplete(HRESULT hrStatus) mut => VT.OnDecodeComplete(ref this, hrStatus);
			public HRESULT OnPalette() mut => VT.OnPalette(ref this);
			public HRESULT OnProgress(ref RECT pBounds, BOOL bComplete) mut => VT.OnProgress(ref this, ref pBounds, bComplete);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink self, int32 nWidth, int32 nHeight, in Guid bfid, uint32 nPasses, uint32 dwHints, out IUnknown* ppSurface) GetSurface;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink self, out uint32 pdwEvents, out uint32 pnFormats, Guid** ppFormats) OnBeginDecode;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink self) OnBitsComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink self, HRESULT hrStatus) OnDecodeComplete;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink self) OnPalette;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink self, ref RECT pBounds, BOOL bComplete) OnProgress;
			}
		}
		[CRepr]
		public struct IImageDecodeEventSink2 : IImageDecodeEventSink
		{
			public const new Guid IID = .(0x8ebd8a57, 0x8a96, 0x48c9, 0x84, 0xa6, 0x96, 0x2e, 0x2d, 0xb9, 0xc9, 0x31);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT IsAlphaPremultRequired(out BOOL pfPremultAlpha) mut => VT.IsAlphaPremultRequired(ref this, out pfPremultAlpha);

			[CRepr]
			public struct VTable : IImageDecodeEventSink.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IImageDecodeEventSink2 self, out BOOL pfPremultAlpha) IsAlphaPremultRequired;
			}
		}
		[CRepr]
		public struct ISniffStream : IUnknown
		{
			public const new Guid IID = .(0x4ef17940, 0x30e0, 0x11d0, 0xb7, 0x24, 0x00, 0xaa, 0x00, 0x6c, 0x1a, 0x01);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT Init(ref IStream pStream) mut => VT.Init(ref this, ref pStream);
			public HRESULT Peek(void* pBuffer, uint32 nBytes, out uint32 pnBytesRead) mut => VT.Peek(ref this, pBuffer, nBytes, out pnBytesRead);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISniffStream self, ref IStream pStream) Init;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref ISniffStream self, void* pBuffer, uint32 nBytes, out uint32 pnBytesRead) Peek;
			}
		}
		[CRepr]
		public struct IDithererImpl : IUnknown
		{
			public const new Guid IID = .(0x7c48e840, 0x3910, 0x11d0, 0x86, 0xfc, 0x00, 0xa0, 0xc9, 0x13, 0xf7, 0x50);
			
			public new VTable* VT { get => (.)vt; }
			
			public HRESULT SetDestColorTable(uint32 nColors, in RGBQUAD prgbColors) mut => VT.SetDestColorTable(ref this, nColors, prgbColors);
			public HRESULT SetEventSink(ref IImageDecodeEventSink pEventSink) mut => VT.SetEventSink(ref this, ref pEventSink);

			[CRepr]
			public struct VTable : IUnknown.VTable
			{
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDithererImpl self, uint32 nColors, in RGBQUAD prgbColors) SetDestColorTable;
				public new function [CallingConvention(.Stdcall)] HRESULT(ref IDithererImpl self, ref IImageDecodeEventSink pEventSink) SetEventSink;
			}
		}
		
		// --- Functions ---
		
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingEnable(HWND hwndParent, PSTR pszUsername, BOOL fEnable);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingEnableW(HWND hwndParent, PWSTR pszUsername, BOOL fEnable);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingCheckUserAccess(PSTR pszUsername, PSTR pszURL, PSTR pszRatingInfo, uint8* pData, uint32 cbData, void** ppRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingCheckUserAccessW(PWSTR pszUsername, PWSTR pszURL, PWSTR pszRatingInfo, uint8* pData, uint32 cbData, void** ppRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingAccessDeniedDialog(HWND hDlg, PSTR pszUsername, PSTR pszContentDescription, void* pRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingAccessDeniedDialogW(HWND hDlg, PWSTR pszUsername, PWSTR pszContentDescription, void* pRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingAccessDeniedDialog2(HWND hDlg, PSTR pszUsername, void* pRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingAccessDeniedDialog2W(HWND hDlg, PWSTR pszUsername, void* pRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingFreeDetails(void* pRatingDetails);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingObtainCancel(HANDLE hRatingObtainQuery);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingObtainQuery(PSTR pszTargetUrl, uint32 dwUserData, int fCallback, HANDLE* phRatingObtainQuery);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingObtainQueryW(PWSTR pszTargetUrl, uint32 dwUserData, int fCallback, HANDLE* phRatingObtainQuery);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingSetupUI(HWND hDlg, PSTR pszUsername);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingSetupUIW(HWND hDlg, PWSTR pszUsername);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingAddToApprovedSites(HWND hDlg, uint32 cbPasswordBlob, out uint8 pbPasswordBlob, PWSTR lpszUrl, BOOL fAlwaysNever, BOOL fSitePage, BOOL fApprovedSitesEnforced);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingClickedOnPRFInternal(HWND hWndOwner, HINSTANCE param1, PSTR lpszFileName, int32 nShow);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingClickedOnRATInternal(HWND hWndOwner, HINSTANCE param1, PSTR lpszFileName, int32 nShow);
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingEnabledQuery();
		[Import("msrating.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT RatingInit();
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CreateMIMEMap(out IMapMIMEToCLSID* ppMap);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT DecodeImage(ref IStream pStream, ref IMapMIMEToCLSID pMap, ref IUnknown pEventSink);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT SniffStream(ref IStream pInStream, out uint32 pnFormat, out IStream* ppOutStream);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT GetMaxMIMEIDBytes(out uint32 pnMaxBytes);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT IdentifyMIMEType(in uint8 pbBytes, uint32 nBytes, out uint32 pnFormat);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT ComputeInvCMAP(in RGBQUAD pRGBColors, uint32 nColors, out uint8 pInvTable, uint32 cbTable);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT DitherTo8(out uint8 pDestBits, int32 nDestPitch, out uint8 pSrcBits, int32 nSrcPitch, in Guid bfidSrc, out RGBQUAD prgbDestColors, out RGBQUAD prgbSrcColors, out uint8 pbDestInvMap, int32 x, int32 y, int32 cx, int32 cy, int32 lDestTrans, int32 lSrcTrans);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CreateDDrawSurfaceOnDIB(HBITMAP hbmDib, out IDirectDrawSurface* ppSurface);
		[Import("imgutil.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT DecodeImageEx(ref IStream pStream, ref IMapMIMEToCLSID pMap, ref IUnknown pEventSink, PWSTR pszMIMETypeParam);
		[Import("shdocvw.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT DoPrivacyDlg(HWND hwndOwner, PWSTR pszUrl, ref IEnumPrivacyRecords pPrivacyEnum, BOOL fReportAllSites);
	}
}
