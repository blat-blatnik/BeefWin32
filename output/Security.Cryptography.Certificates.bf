using System;

// namespace Security.Cryptography.Certificates
namespace Win32
{
	extension Win32
	{
		// --- Constants ---
		
		public const uint32 CA_DISP_INCOMPLETE = 0;
		public const uint32 CA_DISP_ERROR = 1;
		public const uint32 CA_DISP_REVOKED = 2;
		public const uint32 CA_DISP_VALID = 3;
		public const uint32 CA_DISP_INVALID = 4;
		public const uint32 CA_DISP_UNDER_SUBMISSION = 5;
		public const uint32 KRA_DISP_EXPIRED = 0;
		public const uint32 KRA_DISP_NOTFOUND = 1;
		public const uint32 KRA_DISP_REVOKED = 2;
		public const uint32 KRA_DISP_VALID = 3;
		public const uint32 KRA_DISP_INVALID = 4;
		public const uint32 KRA_DISP_UNTRUSTED = 5;
		public const uint32 KRA_DISP_NOTLOADED = 6;
		public const uint32 CA_ACCESS_MASKROLES = 255;
		public const uint32 CA_CRL_BASE = 1;
		public const uint32 CA_CRL_DELTA = 2;
		public const uint32 CA_CRL_REPUBLISH = 16;
		public const uint32 ICF_ALLOWFOREIGN = 65536;
		public const uint32 ICF_EXISTINGROW = 131072;
		public const uint32 IKF_OVERWRITE = 65536;
		public const uint32 CSBACKUP_TYPE_MASK = 3;
		public const uint32 CSRESTORE_TYPE_FULL = 1;
		public const uint32 CSRESTORE_TYPE_ONLINE = 2;
		public const uint32 CSRESTORE_TYPE_CATCHUP = 4;
		public const uint32 CSRESTORE_TYPE_MASK = 5;
		public const uint32 CSBACKUP_DISABLE_INCREMENTAL = 4294967295;
		public const uint32 CSBFT_DIRECTORY = 128;
		public const uint32 CSBFT_DATABASE_DIRECTORY = 64;
		public const uint32 CSBFT_LOG_DIRECTORY = 32;
		public const uint64 CSCONTROL_SHUTDOWN = 1uL;
		public const uint64 CSCONTROL_SUSPEND = 2uL;
		public const uint64 CSCONTROL_RESTART = 3uL;
		public const uint32 CAIF_DSENTRY = 1;
		public const uint32 CAIF_SHAREDFOLDERENTRY = 2;
		public const uint32 CAIF_REGISTRY = 4;
		public const uint32 CAIF_LOCAL = 8;
		public const uint32 CAIF_REGISTRYPARENT = 16;
		public const uint32 CR_IN_ENCODEANY = 255;
		public const uint32 CR_IN_ENCODEMASK = 255;
		public const uint32 CR_IN_FORMATANY = 0;
		public const uint32 CR_IN_PKCS10 = 256;
		public const uint32 CR_IN_KEYGEN = 512;
		public const uint32 CR_IN_PKCS7 = 768;
		public const uint32 CR_IN_CMC = 1024;
		public const uint32 CR_IN_CHALLENGERESPONSE = 1280;
		public const uint32 CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = 1536;
		public const uint32 CR_IN_FORMATMASK = 65280;
		public const uint32 CR_IN_SCEP = 65536;
		public const uint32 CR_IN_RPC = 131072;
		public const uint32 CR_IN_HTTP = 196608;
		public const uint32 CR_IN_FULLRESPONSE = 262144;
		public const uint32 CR_IN_CRLS = 524288;
		public const uint32 CR_IN_MACHINE = 1048576;
		public const uint32 CR_IN_ROBO = 2097152;
		public const uint32 CR_IN_CLIENTIDNONE = 4194304;
		public const uint32 CR_IN_CONNECTONLY = 8388608;
		public const uint32 CR_IN_RETURNCHALLENGE = 16777216;
		public const uint32 CR_IN_SCEPPOST = 33554432;
		public const uint32 CR_IN_CERTIFICATETRANSPARENCY = 67108864;
		public const uint32 CC_UIPICKCONFIGSKIPLOCALCA = 5;
		public const uint32 CR_DISP_REVOKED = 6;
		public const uint32 CR_OUT_BASE64REQUESTHEADER = 3;
		public const uint32 CR_OUT_HEX = 4;
		public const uint32 CR_OUT_HEXASCII = 5;
		public const uint32 CR_OUT_BASE64X509CRLHEADER = 9;
		public const uint32 CR_OUT_HEXADDR = 10;
		public const uint32 CR_OUT_HEXASCIIADDR = 11;
		public const uint32 CR_OUT_HEXRAW = 12;
		public const uint32 CR_OUT_ENCODEMASK = 255;
		public const uint32 CR_OUT_CHAIN = 256;
		public const uint32 CR_OUT_CRLS = 512;
		public const uint32 CR_OUT_NOCRLF = 1073741824;
		public const uint32 CR_OUT_NOCR = 2147483648;
		public const uint32 CR_GEMT_DEFAULT = 0;
		public const uint32 CR_GEMT_HRESULT_STRING = 1;
		public const uint32 CR_GEMT_HTTP_ERROR = 2;
		public const uint32 CR_PROP_NONE = 0;
		public const uint32 CR_PROP_FILEVERSION = 1;
		public const uint32 CR_PROP_PRODUCTVERSION = 2;
		public const uint32 CR_PROP_EXITCOUNT = 3;
		public const uint32 CR_PROP_EXITDESCRIPTION = 4;
		public const uint32 CR_PROP_POLICYDESCRIPTION = 5;
		public const uint32 CR_PROP_CANAME = 6;
		public const uint32 CR_PROP_SANITIZEDCANAME = 7;
		public const uint32 CR_PROP_SHAREDFOLDER = 8;
		public const uint32 CR_PROP_PARENTCA = 9;
		public const uint32 CR_PROP_CATYPE = 10;
		public const uint32 CR_PROP_CASIGCERTCOUNT = 11;
		public const uint32 CR_PROP_CASIGCERT = 12;
		public const uint32 CR_PROP_CASIGCERTCHAIN = 13;
		public const uint32 CR_PROP_CAXCHGCERTCOUNT = 14;
		public const uint32 CR_PROP_CAXCHGCERT = 15;
		public const uint32 CR_PROP_CAXCHGCERTCHAIN = 16;
		public const uint32 CR_PROP_BASECRL = 17;
		public const uint32 CR_PROP_DELTACRL = 18;
		public const uint32 CR_PROP_CACERTSTATE = 19;
		public const uint32 CR_PROP_CRLSTATE = 20;
		public const uint32 CR_PROP_CAPROPIDMAX = 21;
		public const uint32 CR_PROP_DNSNAME = 22;
		public const uint32 CR_PROP_ROLESEPARATIONENABLED = 23;
		public const uint32 CR_PROP_KRACERTUSEDCOUNT = 24;
		public const uint32 CR_PROP_KRACERTCOUNT = 25;
		public const uint32 CR_PROP_KRACERT = 26;
		public const uint32 CR_PROP_KRACERTSTATE = 27;
		public const uint32 CR_PROP_ADVANCEDSERVER = 28;
		public const uint32 CR_PROP_TEMPLATES = 29;
		public const uint32 CR_PROP_BASECRLPUBLISHSTATUS = 30;
		public const uint32 CR_PROP_DELTACRLPUBLISHSTATUS = 31;
		public const uint32 CR_PROP_CASIGCERTCRLCHAIN = 32;
		public const uint32 CR_PROP_CAXCHGCERTCRLCHAIN = 33;
		public const uint32 CR_PROP_CACERTSTATUSCODE = 34;
		public const uint32 CR_PROP_CAFORWARDCROSSCERT = 35;
		public const uint32 CR_PROP_CABACKWARDCROSSCERT = 36;
		public const uint32 CR_PROP_CAFORWARDCROSSCERTSTATE = 37;
		public const uint32 CR_PROP_CABACKWARDCROSSCERTSTATE = 38;
		public const uint32 CR_PROP_CACERTVERSION = 39;
		public const uint32 CR_PROP_SANITIZEDCASHORTNAME = 40;
		public const uint32 CR_PROP_CERTCDPURLS = 41;
		public const uint32 CR_PROP_CERTAIAURLS = 42;
		public const uint32 CR_PROP_CERTAIAOCSPURLS = 43;
		public const uint32 CR_PROP_LOCALENAME = 44;
		public const uint32 CR_PROP_SUBJECTTEMPLATE_OIDS = 45;
		public const uint32 CR_PROP_SCEPSERVERCERTS = 1000;
		public const uint32 CR_PROP_SCEPSERVERCAPABILITIES = 1001;
		public const uint32 CR_PROP_SCEPSERVERCERTSCHAIN = 1002;
		public const uint32 CR_PROP_SCEPMIN = 1000;
		public const uint32 CR_PROP_SCEPMAX = 1002;
		public const uint32 FR_PROP_CLAIMCHALLENGE = 22;
		public const uint32 EAN_NAMEOBJECTID = 2147483648;
		public const uint32 EANR_SUPPRESS_IA5CONVERSION = 2147483648;
		public const uint32 CERTENROLL_INDEX_BASE = 0;
		public const uint32 EXITEVENT_INVALID = 0;
		public const uint32 EXITEVENT_STARTUP = 128;
		public const uint32 EXITEVENT_CERTIMPORTED = 512;
		public const uint32 ENUMEXT_OBJECTID = 1;
		public const uint32 CMM_REFRESHONLY = 1;
		public const uint32 CMM_READONLY = 2;
		public const uint32 DBSESSIONCOUNTDEFAULT = 100;
		public const uint32 DBFLAGS_READONLY = 1;
		public const uint32 DBFLAGS_CREATEIFNEEDED = 2;
		public const uint32 DBFLAGS_CIRCULARLOGGING = 4;
		public const uint32 DBFLAGS_LAZYFLUSH = 8;
		public const uint32 DBFLAGS_MAXCACHESIZEX100 = 16;
		public const uint32 DBFLAGS_CHECKPOINTDEPTH60MB = 32;
		public const uint32 DBFLAGS_LOGBUFFERSLARGE = 64;
		public const uint32 DBFLAGS_LOGBUFFERSHUGE = 128;
		public const uint32 DBFLAGS_LOGFILESIZE16MB = 256;
		public const uint32 DBFLAGS_MULTITHREADTRANSACTIONS = 512;
		public const uint32 DBFLAGS_DISABLESNAPSHOTBACKUP = 1024;
		public const uint32 DBFLAGS_ENABLEVOLATILEREQUESTS = 2048;
		public const uint32 LDAPF_SSLENABLE = 1;
		public const uint32 LDAPF_SIGNDISABLE = 2;
		public const uint32 CSVER_MAJOR_WIN2K = 1;
		public const uint32 CSVER_MINOR_WIN2K = 1;
		public const uint32 CSVER_MAJOR_WHISTLER = 2;
		public const uint32 CSVER_MINOR_WHISTLER_BETA2 = 1;
		public const uint32 CSVER_MINOR_WHISTLER_BETA3 = 2;
		public const uint32 CSVER_MAJOR_LONGHORN = 3;
		public const uint32 CSVER_MINOR_LONGHORN_BETA1 = 1;
		public const uint32 CSVER_MAJOR_WIN7 = 4;
		public const uint32 CSVER_MINOR_WIN7 = 1;
		public const uint32 CSVER_MAJOR_WIN8 = 5;
		public const uint32 CSVER_MINOR_WIN8 = 1;
		public const uint32 CSVER_MAJOR_WINBLUE = 6;
		public const uint32 CSVER_MINOR_WINBLUE = 1;
		public const uint32 CSVER_MAJOR_THRESHOLD = 7;
		public const uint32 CSVER_MINOR_THRESHOLD = 1;
		public const uint32 CSVER_MAJOR = 7;
		public const uint32 CSVER_MINOR = 1;
		public const uint32 CCLOCKSKEWMINUTESDEFAULT = 10;
		public const uint32 CVIEWAGEMINUTESDEFAULT = 16;
		public const uint32 SETUP_SERVER_FLAG = 1;
		public const uint32 SETUP_CLIENT_FLAG = 2;
		public const uint32 SETUP_SUSPEND_FLAG = 4;
		public const uint32 SETUP_REQUEST_FLAG = 8;
		public const uint32 SETUP_ONLINE_FLAG = 16;
		public const uint32 SETUP_DENIED_FLAG = 32;
		public const uint32 SETUP_CREATEDB_FLAG = 64;
		public const uint32 SETUP_ATTEMPT_VROOT_CREATE = 128;
		public const uint32 SETUP_FORCECRL_FLAG = 256;
		public const uint32 SETUP_UPDATE_CAOBJECT_SVRTYPE = 512;
		public const uint32 SETUP_SERVER_UPGRADED_FLAG = 1024;
		public const uint32 SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = 2048;
		public const uint32 SETUP_SECURITY_CHANGED = 4096;
		public const uint32 SETUP_DCOM_SECURITY_UPDATED_FLAG = 8192;
		public const uint32 SETUP_SERVER_IS_UP_TO_DATE_FLAG = 16384;
		public const uint32 CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = 1;
		public const uint32 CRLF_DELETE_EXPIRED_CRLS = 2;
		public const uint32 CRLF_CRLNUMBER_CRITICAL = 4;
		public const uint32 CRLF_REVCHECK_IGNORE_OFFLINE = 8;
		public const uint32 CRLF_IGNORE_INVALID_POLICIES = 16;
		public const uint32 CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = 32;
		public const uint32 CRLF_SAVE_FAILED_CERTS = 64;
		public const uint32 CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = 128;
		public const uint32 CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = 256;
		public const uint32 CRLF_PUBLISH_EXPIRED_CERT_CRLS = 512;
		public const uint32 CRLF_ENFORCE_ENROLLMENT_AGENT = 1024;
		public const uint32 CRLF_DISABLE_RDN_REORDER = 2048;
		public const uint32 CRLF_DISABLE_ROOT_CROSS_CERTS = 4096;
		public const uint32 CRLF_LOG_FULL_RESPONSE = 8192;
		public const uint32 CRLF_USE_XCHG_CERT_TEMPLATE = 16384;
		public const uint32 CRLF_USE_CROSS_CERT_TEMPLATE = 32768;
		public const uint32 CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = 65536;
		public const uint32 CRLF_REVCHECK_IGNORE_NOREVCHECK = 131072;
		public const uint32 CRLF_PRESERVE_EXPIRED_CA_CERTS = 262144;
		public const uint32 CRLF_PRESERVE_REVOKED_CA_CERTS = 524288;
		public const uint32 CRLF_DISABLE_CHAIN_VERIFICATION = 1048576;
		public const uint32 CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = 2097152;
		public const uint32 KRAF_ENABLEFOREIGN = 1;
		public const uint32 KRAF_SAVEBADREQUESTKEY = 2;
		public const uint32 KRAF_ENABLEARCHIVEALL = 4;
		public const uint32 KRAF_DISABLEUSEDEFAULTPROVIDER = 8;
		public const uint32 IF_LOCKICERTREQUEST = 1;
		public const uint32 IF_NOREMOTEICERTREQUEST = 2;
		public const uint32 IF_NOLOCALICERTREQUEST = 4;
		public const uint32 IF_NORPCICERTREQUEST = 8;
		public const uint32 IF_NOREMOTEICERTADMIN = 16;
		public const uint32 IF_NOLOCALICERTADMIN = 32;
		public const uint32 IF_NOREMOTEICERTADMINBACKUP = 64;
		public const uint32 IF_NOLOCALICERTADMINBACKUP = 128;
		public const uint32 IF_NOSNAPSHOTBACKUP = 256;
		public const uint32 IF_ENFORCEENCRYPTICERTREQUEST = 512;
		public const uint32 IF_ENFORCEENCRYPTICERTADMIN = 1024;
		public const uint32 IF_ENABLEEXITKEYRETRIEVAL = 2048;
		public const uint32 IF_ENABLEADMINASAUDITOR = 4096;
		public const uint32 PROCFLG_NONE = 0;
		public const uint32 PROCFLG_ENFORCEGOODKEYS = 1;
		public const uint32 CSURL_SERVERPUBLISH = 1;
		public const uint32 CSURL_ADDTOCERTCDP = 2;
		public const uint32 CSURL_ADDTOFRESHESTCRL = 4;
		public const uint32 CSURL_ADDTOCRLCDP = 8;
		public const uint32 CSURL_PUBLISHRETRY = 16;
		public const uint32 CSURL_ADDTOCERTOCSP = 32;
		public const uint32 CSURL_SERVERPUBLISHDELTA = 64;
		public const uint32 CSURL_ADDTOIDP = 128;
		public const uint32 CAPATHLENGTH_INFINITE = 4294967295;
		public const uint32 REQDISP_PENDING = 0;
		public const uint32 REQDISP_ISSUE = 1;
		public const uint32 REQDISP_DENY = 2;
		public const uint32 REQDISP_USEREQUESTATTRIBUTE = 3;
		public const uint32 REQDISP_MASK = 255;
		public const uint32 REQDISP_PENDINGFIRST = 256;
		public const uint32 REQDISP_DEFAULT_ENTERPRISE = 1;
		public const uint32 REVEXT_CDPLDAPURL_OLD = 1;
		public const uint32 REVEXT_CDPHTTPURL_OLD = 2;
		public const uint32 REVEXT_CDPFTPURL_OLD = 4;
		public const uint32 REVEXT_CDPFILEURL_OLD = 8;
		public const uint32 REVEXT_CDPURLMASK_OLD = 255;
		public const uint32 REVEXT_CDPENABLE = 256;
		public const uint32 REVEXT_ASPENABLE = 512;
		public const uint32 REVEXT_DEFAULT_NODS = 256;
		public const uint32 REVEXT_DEFAULT_DS = 256;
		public const uint32 ISSCERT_LDAPURL_OLD = 1;
		public const uint32 ISSCERT_HTTPURL_OLD = 2;
		public const uint32 ISSCERT_FTPURL_OLD = 4;
		public const uint32 ISSCERT_FILEURL_OLD = 8;
		public const uint32 ISSCERT_URLMASK_OLD = 255;
		public const uint32 ISSCERT_ENABLE = 256;
		public const uint32 ISSCERT_DEFAULT_NODS = 256;
		public const uint32 ISSCERT_DEFAULT_DS = 256;
		public const uint32 EDITF_ENABLEREQUESTEXTENSIONS = 1;
		public const uint32 EDITF_REQUESTEXTENSIONLIST = 2;
		public const uint32 EDITF_DISABLEEXTENSIONLIST = 4;
		public const uint32 EDITF_ADDOLDKEYUSAGE = 8;
		public const uint32 EDITF_ADDOLDCERTTYPE = 16;
		public const uint32 EDITF_ATTRIBUTEENDDATE = 32;
		public const uint32 EDITF_BASICCONSTRAINTSCRITICAL = 64;
		public const uint32 EDITF_BASICCONSTRAINTSCA = 128;
		public const uint32 EDITF_ENABLEAKIKEYID = 256;
		public const uint32 EDITF_ATTRIBUTECA = 512;
		public const uint32 EDITF_IGNOREREQUESTERGROUP = 1024;
		public const uint32 EDITF_ENABLEAKIISSUERNAME = 2048;
		public const uint32 EDITF_ENABLEAKIISSUERSERIAL = 4096;
		public const uint32 EDITF_ENABLEAKICRITICAL = 8192;
		public const uint32 EDITF_SERVERUPGRADED = 16384;
		public const uint32 EDITF_ATTRIBUTEEKU = 32768;
		public const uint32 EDITF_ENABLEDEFAULTSMIME = 65536;
		public const uint32 EDITF_EMAILOPTIONAL = 131072;
		public const uint32 EDITF_ATTRIBUTESUBJECTALTNAME2 = 262144;
		public const uint32 EDITF_ENABLELDAPREFERRALS = 524288;
		public const uint32 EDITF_ENABLECHASECLIENTDC = 1048576;
		public const uint32 EDITF_AUDITCERTTEMPLATELOAD = 2097152;
		public const uint32 EDITF_DISABLEOLDOSCNUPN = 4194304;
		public const uint32 EDITF_DISABLELDAPPACKAGELIST = 8388608;
		public const uint32 EDITF_ENABLEUPNMAP = 16777216;
		public const uint32 EDITF_ENABLEOCSPREVNOCHECK = 33554432;
		public const uint32 EDITF_ENABLERENEWONBEHALFOF = 67108864;
		public const uint32 EDITF_ENABLEKEYENCIPHERMENTCACERT = 134217728;
		public const uint32 EXITPUB_FILE = 1;
		public const uint32 EXITPUB_ACTIVEDIRECTORY = 2;
		public const uint32 EXITPUB_REMOVEOLDCERTS = 16;
		public const uint32 EXITPUB_DEFAULT_ENTERPRISE = 2;
		public const uint32 EXITPUB_DEFAULT_STANDALONE = 1;
		public const uint32 TP_MACHINEPOLICY = 1;
		public const uint32 KR_ENABLE_MACHINE = 1;
		public const uint32 KR_ENABLE_USER = 2;
		public const uint32 EXTENSION_CRITICAL_FLAG = 1;
		public const uint32 EXTENSION_DISABLE_FLAG = 2;
		public const uint32 EXTENSION_DELETE_FLAG = 4;
		public const uint32 EXTENSION_POLICY_MASK = 65535;
		public const uint32 EXTENSION_ORIGIN_REQUEST = 65536;
		public const uint32 EXTENSION_ORIGIN_POLICY = 131072;
		public const uint32 EXTENSION_ORIGIN_ADMIN = 196608;
		public const uint32 EXTENSION_ORIGIN_SERVER = 262144;
		public const uint32 EXTENSION_ORIGIN_RENEWALCERT = 327680;
		public const uint32 EXTENSION_ORIGIN_IMPORTEDCERT = 393216;
		public const uint32 EXTENSION_ORIGIN_PKCS7 = 458752;
		public const uint32 EXTENSION_ORIGIN_CMC = 524288;
		public const uint32 EXTENSION_ORIGIN_CACERT = 589824;
		public const uint32 EXTENSION_ORIGIN_MASK = 983040;
		public const uint32 CPF_BASE = 1;
		public const uint32 CPF_DELTA = 2;
		public const uint32 CPF_COMPLETE = 4;
		public const uint32 CPF_SHADOW = 8;
		public const uint32 CPF_CASTORE_ERROR = 16;
		public const uint32 CPF_BADURL_ERROR = 32;
		public const uint32 CPF_MANUAL = 64;
		public const uint32 CPF_SIGNATURE_ERROR = 128;
		public const uint32 CPF_LDAP_ERROR = 256;
		public const uint32 CPF_FILE_ERROR = 512;
		public const uint32 CPF_FTP_ERROR = 1024;
		public const uint32 CPF_HTTP_ERROR = 2048;
		public const uint32 CPF_POSTPONED_BASE_LDAP_ERROR = 4096;
		public const uint32 CPF_POSTPONED_BASE_FILE_ERROR = 8192;
		public const uint32 PROPTYPE_MASK = 255;
		public const uint32 PROPCALLER_SERVER = 256;
		public const uint32 PROPCALLER_POLICY = 512;
		public const uint32 PROPCALLER_EXIT = 768;
		public const uint32 PROPCALLER_ADMIN = 1024;
		public const uint32 PROPCALLER_REQUEST = 1280;
		public const uint32 PROPCALLER_MASK = 3840;
		public const uint32 PROPFLAGS_INDEXED = 65536;
		public const uint32 CR_FLG_FORCETELETEX = 1;
		public const uint32 CR_FLG_RENEWAL = 2;
		public const uint32 CR_FLG_FORCEUTF8 = 4;
		public const uint32 CR_FLG_CAXCHGCERT = 8;
		public const uint32 CR_FLG_ENROLLONBEHALFOF = 16;
		public const uint32 CR_FLG_SUBJECTUNMODIFIED = 32;
		public const uint32 CR_FLG_VALIDENCRYPTEDKEYHASH = 64;
		public const uint32 CR_FLG_CACROSSCERT = 128;
		public const uint32 CR_FLG_ENFORCEUTF8 = 256;
		public const uint32 CR_FLG_DEFINEDCACERT = 512;
		public const uint32 CR_FLG_CHALLENGEPENDING = 1024;
		public const uint32 CR_FLG_CHALLENGESATISFIED = 2048;
		public const uint32 CR_FLG_TRUSTONUSE = 4096;
		public const uint32 CR_FLG_TRUSTEKCERT = 8192;
		public const uint32 CR_FLG_TRUSTEKKEY = 16384;
		public const uint32 CR_FLG_PUBLISHERROR = 2147483648;
		public const uint32 DB_DISP_ACTIVE = 8;
		public const uint32 DB_DISP_PENDING = 9;
		public const uint32 DB_DISP_QUEUE_MAX = 9;
		public const uint32 DB_DISP_FOREIGN = 12;
		public const uint32 DB_DISP_CA_CERT = 15;
		public const uint32 DB_DISP_CA_CERT_CHAIN = 16;
		public const uint32 DB_DISP_KRA_CERT = 17;
		public const uint32 DB_DISP_LOG_MIN = 20;
		public const uint32 DB_DISP_ISSUED = 20;
		public const uint32 DB_DISP_REVOKED = 21;
		public const uint32 DB_DISP_LOG_FAILED_MIN = 30;
		public const uint32 DB_DISP_ERROR = 30;
		public const uint32 DB_DISP_DENIED = 31;
		public const uint32 VR_PENDING = 0;
		public const uint32 VR_INSTANT_OK = 1;
		public const uint32 VR_INSTANT_BAD = 2;
		public const uint32 CV_OUT_HEXRAW = 12;
		public const uint32 CV_OUT_ENCODEMASK = 255;
		public const uint32 CV_OUT_NOCRLF = 1073741824;
		public const uint32 CV_OUT_NOCR = 2147483648;
		public const uint32 CVR_SEEK_NONE = 0;
		public const uint32 CVR_SEEK_MASK = 255;
		public const uint32 CVR_SEEK_NODELTA = 4096;
		public const uint32 CVR_SORT_NONE = 0;
		public const uint32 CVR_SORT_ASCEND = 1;
		public const uint32 CVR_SORT_DESCEND = 2;
		public const int32 CV_COLUMN_EXTENSION_DEFAULT = -4;
		public const int32 CV_COLUMN_ATTRIBUTE_DEFAULT = -5;
		public const int32 CV_COLUMN_CRL_DEFAULT = -6;
		public const int32 CV_COLUMN_LOG_REVOKED_DEFAULT = -7;
		public const uint32 CVRC_TABLE_MASK = 61440;
		public const uint32 CVRC_TABLE_SHIFT = 12;
		public const uint32 CRYPT_ENUM_ALL_PROVIDERS = 1;
		public const int32 XEPR_ENUM_FIRST = -1;
		public const uint32 XEPR_DATE = 5;
		public const uint32 XEPR_TEMPLATENAME = 6;
		public const uint32 XEPR_VERSION = 7;
		public const uint32 XEPR_V1TEMPLATENAME = 9;
		public const uint32 XEPR_V2TEMPLATEOID = 16;
		public const uint32 XEKL_KEYSIZE_DEFAULT = 4;
		public const uint32 XECP_STRING_PROPERTY = 1;
		public const uint32 XECI_DISABLE = 0;
		public const uint32 XECI_XENROLL = 1;
		public const uint32 XECI_AUTOENROLL = 2;
		public const uint32 XECI_REQWIZARD = 3;
		public const uint32 XECI_CERTREQ = 4;
		public const String wszCMM_PROP_NAME = "Name";
		public const String wszCMM_PROP_DESCRIPTION = "Description";
		public const String wszCMM_PROP_COPYRIGHT = "Copyright";
		public const String wszCMM_PROP_FILEVER = "File Version";
		public const String wszCMM_PROP_PRODUCTVER = "Product Version";
		public const String wszCMM_PROP_DISPLAY_HWND = "HWND";
		public const String wszCMM_PROP_ISMULTITHREADED = "IsMultiThreaded";
		
		// --- Enums ---
		
		[AllowDuplicates]
		public enum CERT_VIEW_COLUMN_INDEX : int32
		{
			CV_COLUMN_LOG_DEFAULT = -2,
			CV_COLUMN_LOG_FAILED_DEFAULT = -3,
			CV_COLUMN_QUEUE_DEFAULT = -1,
		}
		[AllowDuplicates]
		public enum CERT_DELETE_ROW_FLAGS : uint32
		{
			CDR_EXPIRED = 1,
			CDR_REQUEST_LAST_CHANGED = 2,
		}
		[AllowDuplicates]
		public enum FULL_RESPONSE_PROPERTY_ID : uint32
		{
			FR_PROP_NONE = 0,
			FR_PROP_FULLRESPONSE = 1,
			FR_PROP_STATUSINFOCOUNT = 2,
			FR_PROP_BODYPARTSTRING = 3,
			FR_PROP_STATUS = 4,
			FR_PROP_STATUSSTRING = 5,
			FR_PROP_OTHERINFOCHOICE = 6,
			FR_PROP_FAILINFO = 7,
			FR_PROP_PENDINFOTOKEN = 8,
			FR_PROP_PENDINFOTIME = 9,
			FR_PROP_ISSUEDCERTIFICATEHASH = 10,
			FR_PROP_ISSUEDCERTIFICATE = 11,
			FR_PROP_ISSUEDCERTIFICATECHAIN = 12,
			FR_PROP_ISSUEDCERTIFICATECRLCHAIN = 13,
			FR_PROP_ENCRYPTEDKEYHASH = 14,
			FR_PROP_FULLRESPONSENOPKCS7 = 15,
			FR_PROP_CAEXCHANGECERTIFICATEHASH = 16,
			FR_PROP_CAEXCHANGECERTIFICATE = 17,
			FR_PROP_CAEXCHANGECERTIFICATECHAIN = 18,
			FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = 19,
			FR_PROP_ATTESTATIONCHALLENGE = 20,
			FR_PROP_ATTESTATIONPROVIDERNAME = 21,
		}
		[AllowDuplicates]
		public enum CVRC_COLUMN : uint32
		{
			CVRC_COLUMN_SCHEMA = 0,
			CVRC_COLUMN_RESULT = 1,
			CVRC_COLUMN_VALUE = 2,
			CVRC_COLUMN_MASK = 4095,
		}
		[AllowDuplicates]
		public enum CERT_IMPORT_FLAGS : uint32
		{
			CR_IN_BASE64HEADER = 0,
			CR_IN_BASE64 = 1,
			CR_IN_BINARY = 2,
		}
		[AllowDuplicates]
		public enum CERT_GET_CONFIG_FLAGS : uint32
		{
			CC_DEFAULTCONFIG = 0,
			CC_FIRSTCONFIG = 2,
			CC_LOCALACTIVECONFIG = 4,
			CC_LOCALCONFIG = 3,
			CC_UIPICKCONFIG = 1,
			CC_UIPICKCONFIGSKIPLOCALCA_ = 5,
		}
		[AllowDuplicates]
		public enum ENUM_CERT_COLUMN_VALUE_FLAGS : uint32
		{
			CV_OUT_BASE64 = 1,
			CV_OUT_BASE64HEADER = 0,
			CV_OUT_BASE64REQUESTHEADER = 3,
			CV_OUT_BASE64X509CRLHEADER = 9,
			CV_OUT_BINARY = 2,
			CV_OUT_HEX = 4,
			CV_OUT_HEXADDR = 10,
			CV_OUT_HEXASCII = 5,
			CV_OUT_HEXASCIIADDR = 11,
		}
		[AllowDuplicates]
		public enum PENDING_REQUEST_DESIRED_PROPERTY : uint32
		{
			XEPR_CADNS = 1,
			XEPR_CAFRIENDLYNAME = 3,
			XEPR_CANAME = 2,
			XEPR_HASH = 8,
			XEPR_REQUESTID = 4,
		}
		[AllowDuplicates]
		public enum CERTADMIN_GET_ROLES_FLAGS : uint32
		{
			CA_ACCESS_ADMIN = 1,
			CA_ACCESS_AUDITOR = 4,
			CA_ACCESS_ENROLL = 512,
			CA_ACCESS_OFFICER = 2,
			CA_ACCESS_OPERATOR = 8,
			CA_ACCESS_READ = 256,
		}
		[AllowDuplicates]
		public enum CR_DISP : uint32
		{
			CR_DISP_DENIED = 2,
			CR_DISP_ERROR = 1,
			CR_DISP_INCOMPLETE = 0,
			CR_DISP_ISSUED = 3,
			CR_DISP_ISSUED_OUT_OF_BAND = 4,
			CR_DISP_UNDER_SUBMISSION = 5,
		}
		[AllowDuplicates]
		public enum XEKL_KEYSIZE : uint32
		{
			XEKL_KEYSIZE_MIN = 1,
			XEKL_KEYSIZE_MAX = 2,
			XEKL_KEYSIZE_INC = 3,
		}
		[AllowDuplicates]
		public enum CERT_CREATE_REQUEST_FLAGS : uint32
		{
			XECR_CMC = 3,
			XECR_PKCS10_V1_5 = 4,
			XECR_PKCS10_V2_0 = 1,
			XECR_PKCS7 = 2,
		}
		[AllowDuplicates]
		public enum CERT_EXIT_EVENT_MASK : uint32
		{
			EXITEVENT_CERTDENIED = 4,
			EXITEVENT_CERTISSUED = 1,
			EXITEVENT_CERTPENDING = 2,
			EXITEVENT_CERTRETRIEVEPENDING = 16,
			EXITEVENT_CERTREVOKED = 8,
			EXITEVENT_CRLISSUED = 32,
			EXITEVENT_SHUTDOWN = 64,
		}
		[AllowDuplicates]
		public enum ADDED_CERT_TYPE : uint32
		{
			XECT_EXTENSION_V1 = 1,
			XECT_EXTENSION_V2 = 2,
		}
		[AllowDuplicates]
		public enum CVRC_TABLE : uint32
		{
			CVRC_TABLE_ATTRIBUTES = 16384,
			CVRC_TABLE_CRL = 20480,
			CVRC_TABLE_EXTENSIONS = 12288,
			CVRC_TABLE_REQCERT = 0,
		}
		[AllowDuplicates]
		public enum CERT_PROPERTY_TYPE : uint32
		{
			PROPTYPE_BINARY = 3,
			PROPTYPE_DATE = 2,
			PROPTYPE_LONG = 1,
			PROPTYPE_STRING = 4,
		}
		[AllowDuplicates]
		public enum CERT_ALT_NAME : uint32
		{
			CERT_ALT_NAME_RFC822_NAME = 2,
			CERT_ALT_NAME_DNS_NAME = 3,
			CERT_ALT_NAME_URL = 7,
			CERT_ALT_NAME_REGISTERED_ID = 9,
			CERT_ALT_NAME_DIRECTORY_NAME = 5,
			CERT_ALT_NAME_IP_ADDRESS = 8,
			CERT_ALT_NAME_OTHER_NAME = 1,
		}
		[AllowDuplicates]
		public enum CSBACKUP_TYPE : uint32
		{
			CSBACKUP_TYPE_FULL = 1,
			CSBACKUP_TYPE_LOGS_ONLY = 2,
		}
		[AllowDuplicates]
		public enum XEKL_KEYSPEC : uint32
		{
			XEKL_KEYSPEC_KEYX = 1,
			XEKL_KEYSPEC_SIG = 2,
		}
		[AllowDuplicates]
		public enum CERT_REQUEST_OUT_TYPE : uint32
		{
			CR_OUT_BASE64HEADER = 0,
			CR_OUT_BASE64 = 1,
			CR_OUT_BINARY = 2,
		}
		[AllowDuplicates]
		public enum CERT_VIEW_SEEK_OPERATOR_FLAGS : uint32
		{
			CVR_SEEK_EQ = 1,
			CVR_SEEK_LE = 4,
			CVR_SEEK_LT = 2,
			CVR_SEEK_GE = 8,
			CVR_SEEK_GT = 16,
		}
		[AllowDuplicates]
		public enum OCSPSigningFlag : int32
		{
			OCSP_SF_SILENT = 1,
			OCSP_SF_USE_CACERT = 2,
			OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = 4,
			OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = 8,
			OCSP_SF_AUTODISCOVER_SIGNINGCERT = 16,
			OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = 32,
			OCSP_SF_RESPONDER_ID_KEYHASH = 64,
			OCSP_SF_RESPONDER_ID_NAME = 128,
			OCSP_SF_ALLOW_NONCE_EXTENSION = 256,
			OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512,
		}
		[AllowDuplicates]
		public enum OCSPRequestFlag : int32
		{
			OCSP_RF_REJECT_SIGNED_REQUESTS = 1,
		}
		[AllowDuplicates]
		public enum X509EnrollmentAuthFlags : int32
		{
			X509AuthNone = 0,
			X509AuthAnonymous = 1,
			X509AuthKerberos = 2,
			X509AuthUsername = 4,
			X509AuthCertificate = 8,
		}
		[AllowDuplicates]
		public enum X509SCEPMessageType : int32
		{
			SCEPMessageUnknown = -1,
			SCEPMessageCertResponse = 3,
			SCEPMessagePKCSRequest = 19,
			SCEPMessageGetCertInitial = 20,
			SCEPMessageGetCert = 21,
			SCEPMessageGetCRL = 22,
			SCEPMessageClaimChallengeAnswer = 41,
		}
		[AllowDuplicates]
		public enum X509SCEPDisposition : int32
		{
			SCEPDispositionUnknown = -1,
			SCEPDispositionSuccess = 0,
			SCEPDispositionFailure = 2,
			SCEPDispositionPending = 3,
			SCEPDispositionPendingChallenge = 11,
		}
		[AllowDuplicates]
		public enum X509SCEPFailInfo : int32
		{
			SCEPFailUnknown = -1,
			SCEPFailBadAlgorithm = 0,
			SCEPFailBadMessageCheck = 1,
			SCEPFailBadRequest = 2,
			SCEPFailBadTime = 3,
			SCEPFailBadCertId = 4,
		}
		[AllowDuplicates]
		public enum CERTENROLL_OBJECTID : int32
		{
			XCN_OID_NONE = 0,
			XCN_OID_RSA = 1,
			XCN_OID_PKCS = 2,
			XCN_OID_RSA_HASH = 3,
			XCN_OID_RSA_ENCRYPT = 4,
			XCN_OID_PKCS_1 = 5,
			XCN_OID_PKCS_2 = 6,
			XCN_OID_PKCS_3 = 7,
			XCN_OID_PKCS_4 = 8,
			XCN_OID_PKCS_5 = 9,
			XCN_OID_PKCS_6 = 10,
			XCN_OID_PKCS_7 = 11,
			XCN_OID_PKCS_8 = 12,
			XCN_OID_PKCS_9 = 13,
			XCN_OID_PKCS_10 = 14,
			XCN_OID_PKCS_12 = 15,
			XCN_OID_RSA_RSA = 16,
			XCN_OID_RSA_MD2RSA = 17,
			XCN_OID_RSA_MD4RSA = 18,
			XCN_OID_RSA_MD5RSA = 19,
			XCN_OID_RSA_SHA1RSA = 20,
			XCN_OID_RSA_SETOAEP_RSA = 21,
			XCN_OID_RSA_DH = 22,
			XCN_OID_RSA_data = 23,
			XCN_OID_RSA_signedData = 24,
			XCN_OID_RSA_envelopedData = 25,
			XCN_OID_RSA_signEnvData = 26,
			XCN_OID_RSA_digestedData = 27,
			XCN_OID_RSA_hashedData = 28,
			XCN_OID_RSA_encryptedData = 29,
			XCN_OID_RSA_emailAddr = 30,
			XCN_OID_RSA_unstructName = 31,
			XCN_OID_RSA_contentType = 32,
			XCN_OID_RSA_messageDigest = 33,
			XCN_OID_RSA_signingTime = 34,
			XCN_OID_RSA_counterSign = 35,
			XCN_OID_RSA_challengePwd = 36,
			XCN_OID_RSA_unstructAddr = 37,
			XCN_OID_RSA_extCertAttrs = 38,
			XCN_OID_RSA_certExtensions = 39,
			XCN_OID_RSA_SMIMECapabilities = 40,
			XCN_OID_RSA_preferSignedData = 41,
			XCN_OID_RSA_SMIMEalg = 42,
			XCN_OID_RSA_SMIMEalgESDH = 43,
			XCN_OID_RSA_SMIMEalgCMS3DESwrap = 44,
			XCN_OID_RSA_SMIMEalgCMSRC2wrap = 45,
			XCN_OID_RSA_MD2 = 46,
			XCN_OID_RSA_MD4 = 47,
			XCN_OID_RSA_MD5 = 48,
			XCN_OID_RSA_RC2CBC = 49,
			XCN_OID_RSA_RC4 = 50,
			XCN_OID_RSA_DES_EDE3_CBC = 51,
			XCN_OID_RSA_RC5_CBCPad = 52,
			XCN_OID_ANSI_X942 = 53,
			XCN_OID_ANSI_X942_DH = 54,
			XCN_OID_X957 = 55,
			XCN_OID_X957_DSA = 56,
			XCN_OID_X957_SHA1DSA = 57,
			XCN_OID_DS = 58,
			XCN_OID_DSALG = 59,
			XCN_OID_DSALG_CRPT = 60,
			XCN_OID_DSALG_HASH = 61,
			XCN_OID_DSALG_SIGN = 62,
			XCN_OID_DSALG_RSA = 63,
			XCN_OID_OIW = 64,
			XCN_OID_OIWSEC = 65,
			XCN_OID_OIWSEC_md4RSA = 66,
			XCN_OID_OIWSEC_md5RSA = 67,
			XCN_OID_OIWSEC_md4RSA2 = 68,
			XCN_OID_OIWSEC_desECB = 69,
			XCN_OID_OIWSEC_desCBC = 70,
			XCN_OID_OIWSEC_desOFB = 71,
			XCN_OID_OIWSEC_desCFB = 72,
			XCN_OID_OIWSEC_desMAC = 73,
			XCN_OID_OIWSEC_rsaSign = 74,
			XCN_OID_OIWSEC_dsa = 75,
			XCN_OID_OIWSEC_shaDSA = 76,
			XCN_OID_OIWSEC_mdc2RSA = 77,
			XCN_OID_OIWSEC_shaRSA = 78,
			XCN_OID_OIWSEC_dhCommMod = 79,
			XCN_OID_OIWSEC_desEDE = 80,
			XCN_OID_OIWSEC_sha = 81,
			XCN_OID_OIWSEC_mdc2 = 82,
			XCN_OID_OIWSEC_dsaComm = 83,
			XCN_OID_OIWSEC_dsaCommSHA = 84,
			XCN_OID_OIWSEC_rsaXchg = 85,
			XCN_OID_OIWSEC_keyHashSeal = 86,
			XCN_OID_OIWSEC_md2RSASign = 87,
			XCN_OID_OIWSEC_md5RSASign = 88,
			XCN_OID_OIWSEC_sha1 = 89,
			XCN_OID_OIWSEC_dsaSHA1 = 90,
			XCN_OID_OIWSEC_dsaCommSHA1 = 91,
			XCN_OID_OIWSEC_sha1RSASign = 92,
			XCN_OID_OIWDIR = 93,
			XCN_OID_OIWDIR_CRPT = 94,
			XCN_OID_OIWDIR_HASH = 95,
			XCN_OID_OIWDIR_SIGN = 96,
			XCN_OID_OIWDIR_md2 = 97,
			XCN_OID_OIWDIR_md2RSA = 98,
			XCN_OID_INFOSEC = 99,
			XCN_OID_INFOSEC_sdnsSignature = 100,
			XCN_OID_INFOSEC_mosaicSignature = 101,
			XCN_OID_INFOSEC_sdnsConfidentiality = 102,
			XCN_OID_INFOSEC_mosaicConfidentiality = 103,
			XCN_OID_INFOSEC_sdnsIntegrity = 104,
			XCN_OID_INFOSEC_mosaicIntegrity = 105,
			XCN_OID_INFOSEC_sdnsTokenProtection = 106,
			XCN_OID_INFOSEC_mosaicTokenProtection = 107,
			XCN_OID_INFOSEC_sdnsKeyManagement = 108,
			XCN_OID_INFOSEC_mosaicKeyManagement = 109,
			XCN_OID_INFOSEC_sdnsKMandSig = 110,
			XCN_OID_INFOSEC_mosaicKMandSig = 111,
			XCN_OID_INFOSEC_SuiteASignature = 112,
			XCN_OID_INFOSEC_SuiteAConfidentiality = 113,
			XCN_OID_INFOSEC_SuiteAIntegrity = 114,
			XCN_OID_INFOSEC_SuiteATokenProtection = 115,
			XCN_OID_INFOSEC_SuiteAKeyManagement = 116,
			XCN_OID_INFOSEC_SuiteAKMandSig = 117,
			XCN_OID_INFOSEC_mosaicUpdatedSig = 118,
			XCN_OID_INFOSEC_mosaicKMandUpdSig = 119,
			XCN_OID_INFOSEC_mosaicUpdatedInteg = 120,
			XCN_OID_COMMON_NAME = 121,
			XCN_OID_SUR_NAME = 122,
			XCN_OID_DEVICE_SERIAL_NUMBER = 123,
			XCN_OID_COUNTRY_NAME = 124,
			XCN_OID_LOCALITY_NAME = 125,
			XCN_OID_STATE_OR_PROVINCE_NAME = 126,
			XCN_OID_STREET_ADDRESS = 127,
			XCN_OID_ORGANIZATION_NAME = 128,
			XCN_OID_ORGANIZATIONAL_UNIT_NAME = 129,
			XCN_OID_TITLE = 130,
			XCN_OID_DESCRIPTION = 131,
			XCN_OID_SEARCH_GUIDE = 132,
			XCN_OID_BUSINESS_CATEGORY = 133,
			XCN_OID_POSTAL_ADDRESS = 134,
			XCN_OID_POSTAL_CODE = 135,
			XCN_OID_POST_OFFICE_BOX = 136,
			XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = 137,
			XCN_OID_TELEPHONE_NUMBER = 138,
			XCN_OID_TELEX_NUMBER = 139,
			XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = 140,
			XCN_OID_FACSIMILE_TELEPHONE_NUMBER = 141,
			XCN_OID_X21_ADDRESS = 142,
			XCN_OID_INTERNATIONAL_ISDN_NUMBER = 143,
			XCN_OID_REGISTERED_ADDRESS = 144,
			XCN_OID_DESTINATION_INDICATOR = 145,
			XCN_OID_PREFERRED_DELIVERY_METHOD = 146,
			XCN_OID_PRESENTATION_ADDRESS = 147,
			XCN_OID_SUPPORTED_APPLICATION_CONTEXT = 148,
			XCN_OID_MEMBER = 149,
			XCN_OID_OWNER = 150,
			XCN_OID_ROLE_OCCUPANT = 151,
			XCN_OID_SEE_ALSO = 152,
			XCN_OID_USER_PASSWORD = 153,
			XCN_OID_USER_CERTIFICATE = 154,
			XCN_OID_CA_CERTIFICATE = 155,
			XCN_OID_AUTHORITY_REVOCATION_LIST = 156,
			XCN_OID_CERTIFICATE_REVOCATION_LIST = 157,
			XCN_OID_CROSS_CERTIFICATE_PAIR = 158,
			XCN_OID_GIVEN_NAME = 159,
			XCN_OID_INITIALS = 160,
			XCN_OID_DN_QUALIFIER = 161,
			XCN_OID_DOMAIN_COMPONENT = 162,
			XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = 163,
			XCN_OID_PKCS_12_LOCAL_KEY_ID = 164,
			XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = 165,
			XCN_OID_LOCAL_MACHINE_KEYSET = 166,
			XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = 167,
			XCN_OID_KEYID_RDN = 168,
			XCN_OID_AUTHORITY_KEY_IDENTIFIER = 169,
			XCN_OID_KEY_ATTRIBUTES = 170,
			XCN_OID_CERT_POLICIES_95 = 171,
			XCN_OID_KEY_USAGE_RESTRICTION = 172,
			XCN_OID_SUBJECT_ALT_NAME = 173,
			XCN_OID_ISSUER_ALT_NAME = 174,
			XCN_OID_BASIC_CONSTRAINTS = 175,
			XCN_OID_KEY_USAGE = 176,
			XCN_OID_PRIVATEKEY_USAGE_PERIOD = 177,
			XCN_OID_BASIC_CONSTRAINTS2 = 178,
			XCN_OID_CERT_POLICIES = 179,
			XCN_OID_ANY_CERT_POLICY = 180,
			XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = 181,
			XCN_OID_SUBJECT_KEY_IDENTIFIER = 182,
			XCN_OID_SUBJECT_ALT_NAME2 = 183,
			XCN_OID_ISSUER_ALT_NAME2 = 184,
			XCN_OID_CRL_REASON_CODE = 185,
			XCN_OID_REASON_CODE_HOLD = 186,
			XCN_OID_CRL_DIST_POINTS = 187,
			XCN_OID_ENHANCED_KEY_USAGE = 188,
			XCN_OID_CRL_NUMBER = 189,
			XCN_OID_DELTA_CRL_INDICATOR = 190,
			XCN_OID_ISSUING_DIST_POINT = 191,
			XCN_OID_FRESHEST_CRL = 192,
			XCN_OID_NAME_CONSTRAINTS = 193,
			XCN_OID_POLICY_MAPPINGS = 194,
			XCN_OID_LEGACY_POLICY_MAPPINGS = 195,
			XCN_OID_POLICY_CONSTRAINTS = 196,
			XCN_OID_RENEWAL_CERTIFICATE = 197,
			XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = 198,
			XCN_OID_ENROLLMENT_CSP_PROVIDER = 199,
			XCN_OID_OS_VERSION = 200,
			XCN_OID_ENROLLMENT_AGENT = 201,
			XCN_OID_PKIX = 202,
			XCN_OID_PKIX_PE = 203,
			XCN_OID_AUTHORITY_INFO_ACCESS = 204,
			XCN_OID_BIOMETRIC_EXT = 205,
			XCN_OID_LOGOTYPE_EXT = 206,
			XCN_OID_CERT_EXTENSIONS = 207,
			XCN_OID_NEXT_UPDATE_LOCATION = 208,
			XCN_OID_REMOVE_CERTIFICATE = 209,
			XCN_OID_CROSS_CERT_DIST_POINTS = 210,
			XCN_OID_CTL = 211,
			XCN_OID_SORTED_CTL = 212,
			XCN_OID_SERIALIZED = 213,
			XCN_OID_NT_PRINCIPAL_NAME = 214,
			XCN_OID_PRODUCT_UPDATE = 215,
			XCN_OID_ANY_APPLICATION_POLICY = 216,
			XCN_OID_AUTO_ENROLL_CTL_USAGE = 217,
			XCN_OID_ENROLL_CERTTYPE_EXTENSION = 218,
			XCN_OID_CERT_MANIFOLD = 219,
			XCN_OID_CERTSRV_CA_VERSION = 220,
			XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = 221,
			XCN_OID_CRL_VIRTUAL_BASE = 222,
			XCN_OID_CRL_NEXT_PUBLISH = 223,
			XCN_OID_KP_CA_EXCHANGE = 224,
			XCN_OID_KP_KEY_RECOVERY_AGENT = 225,
			XCN_OID_CERTIFICATE_TEMPLATE = 226,
			XCN_OID_ENTERPRISE_OID_ROOT = 227,
			XCN_OID_RDN_DUMMY_SIGNER = 228,
			XCN_OID_APPLICATION_CERT_POLICIES = 229,
			XCN_OID_APPLICATION_POLICY_MAPPINGS = 230,
			XCN_OID_APPLICATION_POLICY_CONSTRAINTS = 231,
			XCN_OID_ARCHIVED_KEY_ATTR = 232,
			XCN_OID_CRL_SELF_CDP = 233,
			XCN_OID_REQUIRE_CERT_CHAIN_POLICY = 234,
			XCN_OID_ARCHIVED_KEY_CERT_HASH = 235,
			XCN_OID_ISSUED_CERT_HASH = 236,
			XCN_OID_DS_EMAIL_REPLICATION = 237,
			XCN_OID_REQUEST_CLIENT_INFO = 238,
			XCN_OID_ENCRYPTED_KEY_HASH = 239,
			XCN_OID_CERTSRV_CROSSCA_VERSION = 240,
			XCN_OID_NTDS_REPLICATION = 241,
			XCN_OID_SUBJECT_DIR_ATTRS = 242,
			XCN_OID_PKIX_KP = 243,
			XCN_OID_PKIX_KP_SERVER_AUTH = 244,
			XCN_OID_PKIX_KP_CLIENT_AUTH = 245,
			XCN_OID_PKIX_KP_CODE_SIGNING = 246,
			XCN_OID_PKIX_KP_EMAIL_PROTECTION = 247,
			XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = 248,
			XCN_OID_PKIX_KP_IPSEC_TUNNEL = 249,
			XCN_OID_PKIX_KP_IPSEC_USER = 250,
			XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = 251,
			XCN_OID_PKIX_KP_OCSP_SIGNING = 252,
			XCN_OID_PKIX_OCSP_NOCHECK = 253,
			XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = 254,
			XCN_OID_KP_CTL_USAGE_SIGNING = 255,
			XCN_OID_KP_TIME_STAMP_SIGNING = 256,
			XCN_OID_SERVER_GATED_CRYPTO = 257,
			XCN_OID_SGC_NETSCAPE = 258,
			XCN_OID_KP_EFS = 259,
			XCN_OID_EFS_RECOVERY = 260,
			XCN_OID_WHQL_CRYPTO = 261,
			XCN_OID_NT5_CRYPTO = 262,
			XCN_OID_OEM_WHQL_CRYPTO = 263,
			XCN_OID_EMBEDDED_NT_CRYPTO = 264,
			XCN_OID_ROOT_LIST_SIGNER = 265,
			XCN_OID_KP_QUALIFIED_SUBORDINATION = 266,
			XCN_OID_KP_KEY_RECOVERY = 267,
			XCN_OID_KP_DOCUMENT_SIGNING = 268,
			XCN_OID_KP_LIFETIME_SIGNING = 269,
			XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = 270,
			XCN_OID_KP_SMART_DISPLAY = 271,
			XCN_OID_KP_CSP_SIGNATURE = 272,
			XCN_OID_DRM = 273,
			XCN_OID_DRM_INDIVIDUALIZATION = 274,
			XCN_OID_LICENSES = 275,
			XCN_OID_LICENSE_SERVER = 276,
			XCN_OID_KP_SMARTCARD_LOGON = 277,
			XCN_OID_YESNO_TRUST_ATTR = 278,
			XCN_OID_PKIX_POLICY_QUALIFIER_CPS = 279,
			XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 280,
			XCN_OID_CERT_POLICIES_95_QUALIFIER1 = 281,
			XCN_OID_PKIX_ACC_DESCR = 282,
			XCN_OID_PKIX_OCSP = 283,
			XCN_OID_PKIX_CA_ISSUERS = 284,
			XCN_OID_VERISIGN_PRIVATE_6_9 = 285,
			XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = 286,
			XCN_OID_VERISIGN_BITSTRING_6_13 = 287,
			XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = 288,
			XCN_OID_NETSCAPE = 289,
			XCN_OID_NETSCAPE_CERT_EXTENSION = 290,
			XCN_OID_NETSCAPE_CERT_TYPE = 291,
			XCN_OID_NETSCAPE_BASE_URL = 292,
			XCN_OID_NETSCAPE_REVOCATION_URL = 293,
			XCN_OID_NETSCAPE_CA_REVOCATION_URL = 294,
			XCN_OID_NETSCAPE_CERT_RENEWAL_URL = 295,
			XCN_OID_NETSCAPE_CA_POLICY_URL = 296,
			XCN_OID_NETSCAPE_SSL_SERVER_NAME = 297,
			XCN_OID_NETSCAPE_COMMENT = 298,
			XCN_OID_NETSCAPE_DATA_TYPE = 299,
			XCN_OID_NETSCAPE_CERT_SEQUENCE = 300,
			XCN_OID_CT_PKI_DATA = 301,
			XCN_OID_CT_PKI_RESPONSE = 302,
			XCN_OID_PKIX_NO_SIGNATURE = 303,
			XCN_OID_CMC = 304,
			XCN_OID_CMC_STATUS_INFO = 305,
			XCN_OID_CMC_IDENTIFICATION = 306,
			XCN_OID_CMC_IDENTITY_PROOF = 307,
			XCN_OID_CMC_DATA_RETURN = 308,
			XCN_OID_CMC_TRANSACTION_ID = 309,
			XCN_OID_CMC_SENDER_NONCE = 310,
			XCN_OID_CMC_RECIPIENT_NONCE = 311,
			XCN_OID_CMC_ADD_EXTENSIONS = 312,
			XCN_OID_CMC_ENCRYPTED_POP = 313,
			XCN_OID_CMC_DECRYPTED_POP = 314,
			XCN_OID_CMC_LRA_POP_WITNESS = 315,
			XCN_OID_CMC_GET_CERT = 316,
			XCN_OID_CMC_GET_CRL = 317,
			XCN_OID_CMC_REVOKE_REQUEST = 318,
			XCN_OID_CMC_REG_INFO = 319,
			XCN_OID_CMC_RESPONSE_INFO = 320,
			XCN_OID_CMC_QUERY_PENDING = 321,
			XCN_OID_CMC_ID_POP_LINK_RANDOM = 322,
			XCN_OID_CMC_ID_POP_LINK_WITNESS = 323,
			XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324,
			XCN_OID_CMC_ADD_ATTRIBUTES = 325,
			XCN_OID_LOYALTY_OTHER_LOGOTYPE = 326,
			XCN_OID_BACKGROUND_OTHER_LOGOTYPE = 327,
			XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328,
			XCN_OID_PKCS_7_DATA = 329,
			XCN_OID_PKCS_7_SIGNED = 330,
			XCN_OID_PKCS_7_ENVELOPED = 331,
			XCN_OID_PKCS_7_SIGNEDANDENVELOPED = 332,
			XCN_OID_PKCS_7_DIGESTED = 333,
			XCN_OID_PKCS_7_ENCRYPTED = 334,
			XCN_OID_PKCS_9_CONTENT_TYPE = 335,
			XCN_OID_PKCS_9_MESSAGE_DIGEST = 336,
			XCN_OID_CERT_PROP_ID_PREFIX = 337,
			XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = 338,
			XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339,
			XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340,
			XCN_OID_CERT_MD5_HASH_PROP_ID = 341,
			XCN_OID_RSA_SHA256RSA = 342,
			XCN_OID_RSA_SHA384RSA = 343,
			XCN_OID_RSA_SHA512RSA = 344,
			XCN_OID_NIST_sha256 = 345,
			XCN_OID_NIST_sha384 = 346,
			XCN_OID_NIST_sha512 = 347,
			XCN_OID_RSA_MGF1 = 348,
			XCN_OID_ECC_PUBLIC_KEY = 349,
			XCN_OID_ECDSA_SHA1 = 350,
			XCN_OID_ECDSA_SPECIFIED = 351,
			XCN_OID_ANY_ENHANCED_KEY_USAGE = 352,
			XCN_OID_RSA_SSA_PSS = 353,
			XCN_OID_ATTR_SUPPORTED_ALGORITHMS = 355,
			XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = 356,
			XCN_OID_ATTR_TPM_SPECIFICATION = 357,
			XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = 358,
			XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = 359,
			XCN_OID_CERT_STRONG_KEY_OS_1 = 360,
			XCN_OID_CERT_STRONG_KEY_OS_CURRENT = 361,
			XCN_OID_CERT_STRONG_KEY_OS_PREFIX = 362,
			XCN_OID_CERT_STRONG_SIGN_OS_1 = 363,
			XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = 364,
			XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = 365,
			XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = 366,
			XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = 367,
			XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = 368,
			XCN_OID_DISALLOWED_HASH = 369,
			XCN_OID_DISALLOWED_LIST = 370,
			XCN_OID_ECC_CURVE_P256 = 371,
			XCN_OID_ECC_CURVE_P384 = 372,
			XCN_OID_ECC_CURVE_P521 = 373,
			XCN_OID_ECDSA_SHA256 = 374,
			XCN_OID_ECDSA_SHA384 = 375,
			XCN_OID_ECDSA_SHA512 = 376,
			XCN_OID_ENROLL_CAXCHGCERT_HASH = 377,
			XCN_OID_ENROLL_EK_INFO = 378,
			XCN_OID_ENROLL_EKPUB_CHALLENGE = 379,
			XCN_OID_ENROLL_EKVERIFYCERT = 380,
			XCN_OID_ENROLL_EKVERIFYCREDS = 381,
			XCN_OID_ENROLL_EKVERIFYKEY = 382,
			XCN_OID_EV_RDN_COUNTRY = 383,
			XCN_OID_EV_RDN_LOCALE = 384,
			XCN_OID_EV_RDN_STATE_OR_PROVINCE = 385,
			XCN_OID_INHIBIT_ANY_POLICY = 386,
			XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = 387,
			XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = 388,
			XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389,
			XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390,
			XCN_OID_KP_TPM_AIK_CERTIFICATE = 391,
			XCN_OID_KP_TPM_EK_CERTIFICATE = 392,
			XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = 393,
			XCN_OID_NIST_AES128_CBC = 394,
			XCN_OID_NIST_AES128_WRAP = 395,
			XCN_OID_NIST_AES192_CBC = 396,
			XCN_OID_NIST_AES192_WRAP = 397,
			XCN_OID_NIST_AES256_CBC = 398,
			XCN_OID_NIST_AES256_WRAP = 399,
			XCN_OID_PKCS_12_PbeIds = 400,
			XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = 401,
			XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = 402,
			XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = 403,
			XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = 404,
			XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = 405,
			XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = 406,
			XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407,
			XCN_OID_PKINIT_KP_KDC = 408,
			XCN_OID_PKIX_CA_REPOSITORY = 409,
			XCN_OID_PKIX_OCSP_NONCE = 410,
			XCN_OID_PKIX_TIME_STAMPING = 411,
			XCN_OID_QC_EU_COMPLIANCE = 412,
			XCN_OID_QC_SSCD = 413,
			XCN_OID_QC_STATEMENTS_EXT = 414,
			XCN_OID_RDN_TPM_MANUFACTURER = 415,
			XCN_OID_RDN_TPM_MODEL = 416,
			XCN_OID_RDN_TPM_VERSION = 417,
			XCN_OID_REVOKED_LIST_SIGNER = 418,
			XCN_OID_RFC3161_counterSign = 419,
			XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420,
			XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421,
			XCN_OID_ROOT_PROGRAM_FLAGS = 422,
			XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423,
			XCN_OID_RSA_PSPECIFIED = 424,
			XCN_OID_RSAES_OAEP = 425,
			XCN_OID_SUBJECT_INFO_ACCESS = 426,
			XCN_OID_TIMESTAMP_TOKEN = 427,
			XCN_OID_ENROLL_SCEP_ERROR = 428,
			XCN_OIDVerisign_MessageType = 429,
			XCN_OIDVerisign_PkiStatus = 430,
			XCN_OIDVerisign_FailInfo = 431,
			XCN_OIDVerisign_SenderNonce = 432,
			XCN_OIDVerisign_RecipientNonce = 433,
			XCN_OIDVerisign_TransactionID = 434,
			XCN_OID_ENROLL_ATTESTATION_CHALLENGE = 435,
			XCN_OID_ENROLL_ATTESTATION_STATEMENT = 436,
			XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = 437,
			XCN_OID_ENROLL_KSP_NAME = 438,
		}
		[AllowDuplicates]
		public enum WebSecurityLevel : int32
		{
			LevelUnsafe = 0,
			LevelSafe = 1,
		}
		[AllowDuplicates]
		public enum EncodingType : int32
		{
			XCN_CRYPT_STRING_BASE64HEADER = 0,
			XCN_CRYPT_STRING_BASE64 = 1,
			XCN_CRYPT_STRING_BINARY = 2,
			XCN_CRYPT_STRING_BASE64REQUESTHEADER = 3,
			XCN_CRYPT_STRING_HEX = 4,
			XCN_CRYPT_STRING_HEXASCII = 5,
			XCN_CRYPT_STRING_BASE64_ANY = 6,
			XCN_CRYPT_STRING_ANY = 7,
			XCN_CRYPT_STRING_HEX_ANY = 8,
			XCN_CRYPT_STRING_BASE64X509CRLHEADER = 9,
			XCN_CRYPT_STRING_HEXADDR = 10,
			XCN_CRYPT_STRING_HEXASCIIADDR = 11,
			XCN_CRYPT_STRING_HEXRAW = 12,
			XCN_CRYPT_STRING_BASE64URI = 13,
			XCN_CRYPT_STRING_ENCODEMASK = 255,
			XCN_CRYPT_STRING_CHAIN = 256,
			XCN_CRYPT_STRING_TEXT = 512,
			XCN_CRYPT_STRING_PERCENTESCAPE = 134217728,
			XCN_CRYPT_STRING_HASHDATA = 268435456,
			XCN_CRYPT_STRING_STRICT = 536870912,
			XCN_CRYPT_STRING_NOCRLF = 1073741824,
			XCN_CRYPT_STRING_NOCR = -2147483648,
		}
		[AllowDuplicates]
		public enum PFXExportOptions : int32
		{
			PFXExportEEOnly = 0,
			PFXExportChainNoRoot = 1,
			PFXExportChainWithRoot = 2,
		}
		[AllowDuplicates]
		public enum ObjectIdGroupId : int32
		{
			XCN_CRYPT_ANY_GROUP_ID = 0,
			XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1,
			XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,
			XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,
			XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = 4,
			XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = 5,
			XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,
			XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,
			XCN_CRYPT_POLICY_OID_GROUP_ID = 8,
			XCN_CRYPT_TEMPLATE_OID_GROUP_ID = 9,
			XCN_CRYPT_KDF_OID_GROUP_ID = 10,
			XCN_CRYPT_LAST_OID_GROUP_ID = 10,
			XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = 1,
			XCN_CRYPT_LAST_ALG_OID_GROUP_ID = 4,
			XCN_CRYPT_GROUP_ID_MASK = 65535,
			XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824,
			XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = -2147483648,
			XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920,
			XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16,
			XCN_CRYPT_KEY_LENGTH_MASK = 268369920,
		}
		[AllowDuplicates]
		public enum ObjectIdPublicKeyFlags : int32
		{
			XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0,
			XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = -2147483648,
			XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824,
		}
		[AllowDuplicates]
		public enum AlgorithmFlags : int32
		{
			AlgorithmFlagsNone = 0,
			AlgorithmFlagsWrap = 1,
		}
		[AllowDuplicates]
		public enum X500NameFlags : int32
		{
			XCN_CERT_NAME_STR_NONE = 0,
			XCN_CERT_SIMPLE_NAME_STR = 1,
			XCN_CERT_OID_NAME_STR = 2,
			XCN_CERT_X500_NAME_STR = 3,
			XCN_CERT_XML_NAME_STR = 4,
			XCN_CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,
			XCN_CERT_NAME_STR_NO_PLUS_FLAG = 536870912,
			XCN_CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,
			XCN_CERT_NAME_STR_CRLF_FLAG = 134217728,
			XCN_CERT_NAME_STR_COMMA_FLAG = 67108864,
			XCN_CERT_NAME_STR_REVERSE_FLAG = 33554432,
			XCN_CERT_NAME_STR_FORWARD_FLAG = 16777216,
			XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416,
			XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,
			XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,
			XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,
			XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288,
			XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576,
			XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152,
			XCN_CERT_NAME_STR_DS_ESCAPED = 8388608,
		}
		[AllowDuplicates]
		public enum X509CertificateEnrollmentContext : int32
		{
			ContextNone = 0,
			ContextUser = 1,
			ContextMachine = 2,
			ContextAdministratorForceMachine = 3,
		}
		[AllowDuplicates]
		public enum EnrollmentEnrollStatus : int32
		{
			Enrolled = 1,
			EnrollPended = 2,
			EnrollUIDeferredEnrollmentRequired = 4,
			EnrollError = 16,
			EnrollUnknown = 32,
			EnrollSkipped = 64,
			EnrollDenied = 256,
		}
		[AllowDuplicates]
		public enum EnrollmentSelectionStatus : int32
		{
			SelectedNo = 0,
			SelectedYes = 1,
		}
		[AllowDuplicates]
		public enum EnrollmentDisplayStatus : int32
		{
			DisplayNo = 0,
			DisplayYes = 1,
		}
		[AllowDuplicates]
		public enum X509ProviderType : int32
		{
			XCN_PROV_NONE = 0,
			XCN_PROV_RSA_FULL = 1,
			XCN_PROV_RSA_SIG = 2,
			XCN_PROV_DSS = 3,
			XCN_PROV_FORTEZZA = 4,
			XCN_PROV_MS_EXCHANGE = 5,
			XCN_PROV_SSL = 6,
			XCN_PROV_RSA_SCHANNEL = 12,
			XCN_PROV_DSS_DH = 13,
			XCN_PROV_EC_ECDSA_SIG = 14,
			XCN_PROV_EC_ECNRA_SIG = 15,
			XCN_PROV_EC_ECDSA_FULL = 16,
			XCN_PROV_EC_ECNRA_FULL = 17,
			XCN_PROV_DH_SCHANNEL = 18,
			XCN_PROV_SPYRUS_LYNKS = 20,
			XCN_PROV_RNG = 21,
			XCN_PROV_INTEL_SEC = 22,
			XCN_PROV_REPLACE_OWF = 23,
			XCN_PROV_RSA_AES = 24,
		}
		[AllowDuplicates]
		public enum AlgorithmType : int32
		{
			XCN_BCRYPT_UNKNOWN_INTERFACE = 0,
			XCN_BCRYPT_CIPHER_INTERFACE = 1,
			XCN_BCRYPT_HASH_INTERFACE = 2,
			XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3,
			XCN_BCRYPT_SIGNATURE_INTERFACE = 5,
			XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = 4,
			XCN_BCRYPT_RNG_INTERFACE = 6,
			XCN_BCRYPT_KEY_DERIVATION_INTERFACE = 7,
		}
		[AllowDuplicates]
		public enum AlgorithmOperationFlags : int32
		{
			XCN_NCRYPT_NO_OPERATION = 0,
			XCN_NCRYPT_CIPHER_OPERATION = 1,
			XCN_NCRYPT_HASH_OPERATION = 2,
			XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4,
			XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = 8,
			XCN_NCRYPT_SIGNATURE_OPERATION = 16,
			XCN_NCRYPT_RNG_OPERATION = 32,
			XCN_NCRYPT_KEY_DERIVATION_OPERATION = 64,
			XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = 28,
			XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 2097152,
			XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = 4194304,
			XCN_NCRYPT_EXACT_MATCH_OPERATION = 8388608,
			XCN_NCRYPT_PREFERENCE_MASK_OPERATION = 14680064,
		}
		[AllowDuplicates]
		public enum X509KeySpec : int32
		{
			XCN_AT_NONE = 0,
			XCN_AT_KEYEXCHANGE = 1,
			XCN_AT_SIGNATURE = 2,
		}
		[AllowDuplicates]
		public enum KeyIdentifierHashAlgorithm : int32
		{
			SKIHashDefault = 0,
			SKIHashSha1 = 1,
			SKIHashCapiSha1 = 2,
			SKIHashSha256 = 3,
			SKIHashHPKP = 5,
		}
		[AllowDuplicates]
		public enum X509PrivateKeyExportFlags : int32
		{
			XCN_NCRYPT_ALLOW_EXPORT_NONE = 0,
			XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1,
			XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2,
			XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = 4,
			XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8,
		}
		[AllowDuplicates]
		public enum X509PrivateKeyUsageFlags : int32
		{
			XCN_NCRYPT_ALLOW_USAGES_NONE = 0,
			XCN_NCRYPT_ALLOW_DECRYPT_FLAG = 1,
			XCN_NCRYPT_ALLOW_SIGNING_FLAG = 2,
			XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4,
			XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8,
			XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215,
		}
		[AllowDuplicates]
		public enum X509PrivateKeyProtection : int32
		{
			XCN_NCRYPT_UI_NO_PROTECTION_FLAG = 0,
			XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1,
			XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2,
			XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4,
			XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8,
		}
		[AllowDuplicates]
		public enum X509PrivateKeyVerify : int32
		{
			VerifyNone = 0,
			VerifySilent = 1,
			VerifySmartCardNone = 2,
			VerifySmartCardSilent = 3,
			VerifyAllowUI = 4,
		}
		[AllowDuplicates]
		public enum X509HardwareKeyUsageFlags : int32
		{
			XCN_NCRYPT_PCP_NONE = 0,
			XCN_NCRYPT_TPM12_PROVIDER = 65536,
			XCN_NCRYPT_PCP_SIGNATURE_KEY = 1,
			XCN_NCRYPT_PCP_ENCRYPTION_KEY = 2,
			XCN_NCRYPT_PCP_GENERIC_KEY = 3,
			XCN_NCRYPT_PCP_STORAGE_KEY = 4,
			XCN_NCRYPT_PCP_IDENTITY_KEY = 8,
		}
		[AllowDuplicates]
		public enum X509KeyParametersExportType : int32
		{
			XCN_CRYPT_OID_USE_CURVE_NONE = 0,
			XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912,
			XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456,
		}
		[AllowDuplicates]
		public enum X509KeyUsageFlags : int32
		{
			XCN_CERT_NO_KEY_USAGE = 0,
			XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128,
			XCN_CERT_NON_REPUDIATION_KEY_USAGE = 64,
			XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32,
			XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16,
			XCN_CERT_KEY_AGREEMENT_KEY_USAGE = 8,
			XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4,
			XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2,
			XCN_CERT_CRL_SIGN_KEY_USAGE = 2,
			XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = 1,
			XCN_CERT_DECIPHER_ONLY_KEY_USAGE = 32768,
		}
		[AllowDuplicates]
		public enum AlternativeNameType : int32
		{
			XCN_CERT_ALT_NAME_UNKNOWN = 0,
			XCN_CERT_ALT_NAME_OTHER_NAME = 1,
			XCN_CERT_ALT_NAME_RFC822_NAME = 2,
			XCN_CERT_ALT_NAME_DNS_NAME = 3,
			XCN_CERT_ALT_NAME_X400_ADDRESS = 4,
			XCN_CERT_ALT_NAME_DIRECTORY_NAME = 5,
			XCN_CERT_ALT_NAME_EDI_PARTY_NAME = 6,
			XCN_CERT_ALT_NAME_URL = 7,
			XCN_CERT_ALT_NAME_IP_ADDRESS = 8,
			XCN_CERT_ALT_NAME_REGISTERED_ID = 9,
			XCN_CERT_ALT_NAME_GUID = 10,
			XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 11,
		}
		[AllowDuplicates]
		public enum PolicyQualifierType : int32
		{
			PolicyQualifierTypeUnknown = 0,
			PolicyQualifierTypeUrl = 1,
			PolicyQualifierTypeUserNotice = 2,
			PolicyQualifierTypeFlags = 3,
		}
		[AllowDuplicates]
		public enum RequestClientInfoClientId : int32
		{
			ClientIdNone = 0,
			ClientIdXEnroll2003 = 1,
			ClientIdAutoEnroll2003 = 2,
			ClientIdWizard2003 = 3,
			ClientIdCertReq2003 = 4,
			ClientIdDefaultRequest = 5,
			ClientIdAutoEnroll = 6,
			ClientIdRequestWizard = 7,
			ClientIdEOBO = 8,
			ClientIdCertReq = 9,
			ClientIdTest = 10,
			ClientIdWinRT = 11,
			ClientIdUserStart = 1000,
		}
		[AllowDuplicates]
		public enum CERTENROLL_PROPERTYID : int32
		{
			XCN_PROPERTYID_NONE = 0,
			XCN_CERT_KEY_PROV_HANDLE_PROP_ID = 1,
			XCN_CERT_KEY_PROV_INFO_PROP_ID = 2,
			XCN_CERT_SHA1_HASH_PROP_ID = 3,
			XCN_CERT_MD5_HASH_PROP_ID = 4,
			XCN_CERT_HASH_PROP_ID = 3,
			XCN_CERT_KEY_CONTEXT_PROP_ID = 5,
			XCN_CERT_KEY_SPEC_PROP_ID = 6,
			XCN_CERT_IE30_RESERVED_PROP_ID = 7,
			XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,
			XCN_CERT_ENHKEY_USAGE_PROP_ID = 9,
			XCN_CERT_CTL_USAGE_PROP_ID = 9,
			XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,
			XCN_CERT_FRIENDLY_NAME_PROP_ID = 11,
			XCN_CERT_PVK_FILE_PROP_ID = 12,
			XCN_CERT_DESCRIPTION_PROP_ID = 13,
			XCN_CERT_ACCESS_STATE_PROP_ID = 14,
			XCN_CERT_SIGNATURE_HASH_PROP_ID = 15,
			XCN_CERT_SMART_CARD_DATA_PROP_ID = 16,
			XCN_CERT_EFS_PROP_ID = 17,
			XCN_CERT_FORTEZZA_DATA_PROP_ID = 18,
			XCN_CERT_ARCHIVED_PROP_ID = 19,
			XCN_CERT_KEY_IDENTIFIER_PROP_ID = 20,
			XCN_CERT_AUTO_ENROLL_PROP_ID = 21,
			XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = 22,
			XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,
			XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,
			XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,
			XCN_CERT_ENROLLMENT_PROP_ID = 26,
			XCN_CERT_DATE_STAMP_PROP_ID = 27,
			XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,
			XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,
			XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,
			XCN_CERT_RENEWAL_PROP_ID = 64,
			XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,
			XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,
			XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = 67,
			XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68,
			XCN_CERT_BACKED_UP_PROP_ID = 69,
			XCN_CERT_OCSP_RESPONSE_PROP_ID = 70,
			XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = 71,
			XCN_CERT_SOURCE_LOCATION_PROP_ID = 72,
			XCN_CERT_SOURCE_URL_PROP_ID = 73,
			XCN_CERT_NEW_KEY_PROP_ID = 74,
			XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = 75,
			XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76,
			XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77,
			XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
			XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79,
			XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80,
			XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81,
			XCN_CERT_CA_DISABLE_CRL_PROP_ID = 82,
			XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83,
			XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84,
			XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85,
			XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86,
			XCN_CERT_CEP_PROP_ID = 87,
			XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89,
			XCN_CERT_SCARD_PIN_ID_PROP_ID = 90,
			XCN_CERT_SCARD_PIN_INFO_PROP_ID = 91,
			XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92,
			XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93,
			XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94,
			XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95,
			XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96,
			XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97,
			XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98,
			XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99,
			XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100,
			XCN_CERT_SMART_CARD_READER_PROP_ID = 101,
			XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102,
			XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103,
			XCN_CERT_DISALLOWED_FILETIME_PROP_ID = 104,
			XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105,
			XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106,
			XCN_CERT_SHA256_HASH_PROP_ID = 107,
			XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = 108,
			XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109,
			XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110,
			XCN_CERT_SCEP_CA_CERT_PROP_ID = 111,
			XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = 112,
			XCN_CERT_SCEP_NONCE_PROP_ID = 113,
			XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114,
			XCN_CERT_SCEP_FLAGS_PROP_ID = 115,
			XCN_CERT_SCEP_GUID_PROP_ID = 116,
			XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117,
			XCN_CERT_ISOLATED_KEY_PROP_ID = 118,
			XCN_CERT_SERIAL_CHAIN_PROP_ID = 119,
			XCN_CERT_KEY_CLASSIFICATION_PROP_ID = 120,
			XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122,
			XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123,
			XCN_CERT_PIN_SHA256_HASH_PROP_ID = 124,
			XCN_CERT_CLR_DELETE_KEY_PROP_ID = 125,
			XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = 126,
			XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127,
			XCN_CERT_FIRST_RESERVED_PROP_ID = 128,
			XCN_CERT_LAST_RESERVED_PROP_ID = 32767,
			XCN_CERT_FIRST_USER_PROP_ID = 32768,
			XCN_CERT_LAST_USER_PROP_ID = 65535,
			XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,
		}
		[AllowDuplicates]
		public enum EnrollmentPolicyServerPropertyFlags : int32
		{
			DefaultNone = 0,
			DefaultPolicyServer = 1,
		}
		[AllowDuplicates]
		public enum PolicyServerUrlFlags : int32
		{
			PsfNone = 0,
			PsfLocationGroupPolicy = 1,
			PsfLocationRegistry = 2,
			PsfUseClientId = 4,
			PsfAutoEnrollmentEnabled = 16,
			PsfAllowUnTrustedCA = 32,
		}
		[AllowDuplicates]
		public enum EnrollmentTemplateProperty : int32
		{
			TemplatePropCommonName = 1,
			TemplatePropFriendlyName = 2,
			TemplatePropEKUs = 3,
			TemplatePropCryptoProviders = 4,
			TemplatePropMajorRevision = 5,
			TemplatePropDescription = 6,
			TemplatePropKeySpec = 7,
			TemplatePropSchemaVersion = 8,
			TemplatePropMinorRevision = 9,
			TemplatePropRASignatureCount = 10,
			TemplatePropMinimumKeySize = 11,
			TemplatePropOID = 12,
			TemplatePropSupersede = 13,
			TemplatePropRACertificatePolicies = 14,
			TemplatePropRAEKUs = 15,
			TemplatePropCertificatePolicies = 16,
			TemplatePropV1ApplicationPolicy = 17,
			TemplatePropAsymmetricAlgorithm = 18,
			TemplatePropKeySecurityDescriptor = 19,
			TemplatePropSymmetricAlgorithm = 20,
			TemplatePropSymmetricKeyLength = 21,
			TemplatePropHashAlgorithm = 22,
			TemplatePropKeyUsage = 23,
			TemplatePropEnrollmentFlags = 24,
			TemplatePropSubjectNameFlags = 25,
			TemplatePropPrivateKeyFlags = 26,
			TemplatePropGeneralFlags = 27,
			TemplatePropSecurityDescriptor = 28,
			TemplatePropExtensions = 29,
			TemplatePropValidityPeriod = 30,
			TemplatePropRenewalPeriod = 31,
		}
		[AllowDuplicates]
		public enum CommitTemplateFlags : int32
		{
			CommitFlagSaveTemplateGenerateOID = 1,
			CommitFlagSaveTemplateUseCurrentOID = 2,
			CommitFlagSaveTemplateOverwrite = 3,
			CommitFlagDeleteTemplate = 4,
		}
		[AllowDuplicates]
		public enum EnrollmentCAProperty : int32
		{
			CAPropCommonName = 1,
			CAPropDistinguishedName = 2,
			CAPropSanitizedName = 3,
			CAPropSanitizedShortName = 4,
			CAPropDNSName = 5,
			CAPropCertificateTypes = 6,
			CAPropCertificate = 7,
			CAPropDescription = 8,
			CAPropWebServers = 9,
			CAPropSiteName = 10,
			CAPropSecurity = 11,
			CAPropRenewalOnly = 12,
		}
		[AllowDuplicates]
		public enum X509EnrollmentPolicyLoadOption : int32
		{
			LoadOptionDefault = 0,
			LoadOptionCacheOnly = 1,
			LoadOptionReload = 2,
			LoadOptionRegisterForADChanges = 4,
		}
		[AllowDuplicates]
		public enum EnrollmentPolicyFlags : int32
		{
			DisableGroupPolicyList = 2,
			DisableUserServerList = 4,
		}
		[AllowDuplicates]
		public enum PolicyServerUrlPropertyID : int32
		{
			PsPolicyID = 0,
			PsFriendlyName = 1,
		}
		[AllowDuplicates]
		public enum X509EnrollmentPolicyExportFlags : int32
		{
			ExportTemplates = 1,
			ExportOIDs = 2,
			ExportCAs = 4,
		}
		[AllowDuplicates]
		public enum X509RequestType : int32
		{
			TypeAny = 0,
			TypePkcs10 = 1,
			TypePkcs7 = 2,
			TypeCmc = 3,
			TypeCertificate = 4,
		}
		[AllowDuplicates]
		public enum X509RequestInheritOptions : int32
		{
			InheritDefault = 0,
			InheritNewDefaultKey = 1,
			InheritNewSimilarKey = 2,
			InheritPrivateKey = 3,
			InheritPublicKey = 4,
			InheritKeyMask = 15,
			InheritNone = 16,
			InheritRenewalCertificateFlag = 32,
			InheritTemplateFlag = 64,
			InheritSubjectFlag = 128,
			InheritExtensionsFlag = 256,
			InheritSubjectAltNameFlag = 512,
			InheritValidityPeriodFlag = 1024,
			InheritReserved80000000 = -2147483648,
		}
		[AllowDuplicates]
		public enum InnerRequestLevel : int32
		{
			LevelInnermost = 0,
			LevelNext = 1,
		}
		[AllowDuplicates]
		public enum Pkcs10AllowedSignatureTypes : int32
		{
			AllowedKeySignature = 1,
			AllowedNullSignature = 2,
		}
		[AllowDuplicates]
		public enum KeyAttestationClaimType : int32
		{
			XCN_NCRYPT_CLAIM_NONE = 0,
			XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3,
			XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = 1,
			XCN_NCRYPT_CLAIM_SUBJECT_ONLY = 2,
			XCN_NCRYPT_CLAIM_UNKNOWN = 4096,
		}
		[AllowDuplicates]
		public enum InstallResponseRestrictionFlags : int32
		{
			AllowNone = 0,
			AllowNoOutstandingRequest = 1,
			AllowUntrustedCertificate = 2,
			AllowUntrustedRoot = 4,
		}
		[AllowDuplicates]
		public enum WebEnrollmentFlags : int32
		{
			EnrollPrompt = 1,
		}
		[AllowDuplicates]
		public enum CRLRevocationReason : int32
		{
			XCN_CRL_REASON_UNSPECIFIED = 0,
			XCN_CRL_REASON_KEY_COMPROMISE = 1,
			XCN_CRL_REASON_CA_COMPROMISE = 2,
			XCN_CRL_REASON_AFFILIATION_CHANGED = 3,
			XCN_CRL_REASON_SUPERSEDED = 4,
			XCN_CRL_REASON_CESSATION_OF_OPERATION = 5,
			XCN_CRL_REASON_CERTIFICATE_HOLD = 6,
			XCN_CRL_REASON_REMOVE_FROM_CRL = 8,
			XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = 9,
			XCN_CRL_REASON_AA_COMPROMISE = 10,
		}
		[AllowDuplicates]
		public enum X509SCEPProcessMessageFlags : int32
		{
			SCEPProcessDefault = 0,
			SCEPProcessSkipCertInstall = 1,
		}
		[AllowDuplicates]
		public enum DelayRetryAction : int32
		{
			DelayRetryUnknown = 0,
			DelayRetryNone = 1,
			DelayRetryShort = 2,
			DelayRetryLong = 3,
			DelayRetrySuccess = 4,
			DelayRetryPastSuccess = 5,
		}
		[AllowDuplicates]
		public enum X509CertificateTemplateGeneralFlag : int32
		{
			GeneralMachineType = 64,
			GeneralCA = 128,
			GeneralCrossCA = 2048,
			GeneralDefault = 65536,
			GeneralModified = 131072,
			GeneralDonotPersist = 4096,
		}
		[AllowDuplicates]
		public enum X509CertificateTemplateEnrollmentFlag : int32
		{
			EnrollmentIncludeSymmetricAlgorithms = 1,
			EnrollmentPendAllRequests = 2,
			EnrollmentPublishToKRAContainer = 4,
			EnrollmentPublishToDS = 8,
			EnrollmentAutoEnrollmentCheckUserDSCertificate = 16,
			EnrollmentAutoEnrollment = 32,
			EnrollmentDomainAuthenticationNotRequired = 128,
			EnrollmentPreviousApprovalValidateReenrollment = 64,
			EnrollmentUserInteractionRequired = 256,
			EnrollmentAddTemplateName = 512,
			EnrollmentRemoveInvalidCertificateFromPersonalStore = 1024,
			EnrollmentAllowEnrollOnBehalfOf = 2048,
			EnrollmentAddOCSPNoCheck = 4096,
			EnrollmentReuseKeyOnFullSmartCard = 8192,
			EnrollmentNoRevocationInfoInCerts = 16384,
			EnrollmentIncludeBasicConstraintsForEECerts = 32768,
			EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 65536,
			EnrollmentCertificateIssuancePoliciesFromRequest = 131072,
			EnrollmentSkipAutoRenewal = 262144,
		}
		[AllowDuplicates]
		public enum X509CertificateTemplateSubjectNameFlag : int32
		{
			SubjectNameEnrolleeSupplies = 1,
			SubjectNameRequireDirectoryPath = -2147483648,
			SubjectNameRequireCommonName = 1073741824,
			SubjectNameRequireEmail = 536870912,
			SubjectNameRequireDNS = 268435456,
			SubjectNameAndAlternativeNameOldCertSupplies = 8,
			SubjectAlternativeNameEnrolleeSupplies = 65536,
			SubjectAlternativeNameRequireDirectoryGUID = 16777216,
			SubjectAlternativeNameRequireUPN = 33554432,
			SubjectAlternativeNameRequireEmail = 67108864,
			SubjectAlternativeNameRequireSPN = 8388608,
			SubjectAlternativeNameRequireDNS = 134217728,
			SubjectAlternativeNameRequireDomainDNS = 4194304,
		}
		[AllowDuplicates]
		public enum X509CertificateTemplatePrivateKeyFlag : int32
		{
			PrivateKeyRequireArchival = 1,
			PrivateKeyExportable = 16,
			PrivateKeyRequireStrongKeyProtection = 32,
			PrivateKeyRequireAlternateSignatureAlgorithm = 64,
			PrivateKeyRequireSameKeyRenewal = 128,
			PrivateKeyUseLegacyProvider = 256,
			PrivateKeyEKTrustOnUse = 512,
			PrivateKeyEKValidateCert = 1024,
			PrivateKeyEKValidateKey = 2048,
			PrivateKeyAttestNone = 0,
			PrivateKeyAttestPreferred = 4096,
			PrivateKeyAttestRequired = 8192,
			PrivateKeyAttestMask = 12288,
			PrivateKeyAttestWithoutPolicy = 16384,
			PrivateKeyServerVersionMask = 983040,
			PrivateKeyServerVersionShift = 16,
			PrivateKeyHelloKspKey = 1048576,
			PrivateKeyHelloLogonKey = 2097152,
			PrivateKeyClientVersionMask = 251658240,
			PrivateKeyClientVersionShift = 24,
		}
		[AllowDuplicates]
		public enum ImportPFXFlags : int32
		{
			ImportNone = 0,
			ImportMachineContext = 1,
			ImportForceOverwrite = 2,
			ImportSilent = 4,
			ImportSaveProperties = 8,
			ImportExportable = 16,
			ImportExportableEncrypted = 32,
			ImportNoUserProtected = 64,
			ImportUserProtected = 128,
			ImportUserProtectedHigh = 256,
			ImportInstallCertificate = 512,
			ImportInstallChain = 1024,
			ImportInstallChainAndRoot = 2048,
		}
		[AllowDuplicates]
		public enum ENUM_CATYPES : int32
		{
			ENUM_ENTERPRISE_ROOTCA = 0,
			ENUM_ENTERPRISE_SUBCA = 1,
			ENUM_STANDALONE_ROOTCA = 3,
			ENUM_STANDALONE_SUBCA = 4,
			ENUM_UNKNOWN_CA = 5,
		}
		
		// --- Function Pointers ---
		
		public function HRESULT FNCERTSRVISSERVERONLINEW(PWSTR pwszServerName, BOOL* pfServerOnline);
		public function HRESULT FNCERTSRVBACKUPGETDYNAMICFILELISTW(void* hbc, uint16** ppwszzFileList, uint32* pcbSize);
		public function HRESULT FNCERTSRVBACKUPPREPAREW(PWSTR pwszServerName, uint32 grbitJet, uint32 dwBackupFlags, void** phbc);
		public function HRESULT FNCERTSRVBACKUPGETDATABASENAMESW(void* hbc, uint16** ppwszzAttachmentInformation, uint32* pcbSize);
		public function HRESULT FNCERTSRVBACKUPOPENFILEW(void* hbc, PWSTR pwszAttachmentName, uint32 cbReadHintSize, LARGE_INTEGER* pliFileSize);
		public function HRESULT FNCERTSRVBACKUPREAD(void* hbc, void* pvBuffer, uint32 cbBuffer, uint32* pcbRead);
		public function HRESULT FNCERTSRVBACKUPCLOSE(void* hbc);
		public function HRESULT FNCERTSRVBACKUPGETBACKUPLOGSW(void* hbc, uint16** ppwszzBackupLogFiles, uint32* pcbSize);
		public function HRESULT FNCERTSRVBACKUPTRUNCATELOGS(void* hbc);
		public function HRESULT FNCERTSRVBACKUPEND(void* hbc);
		public function void FNCERTSRVBACKUPFREE(void* pv);
		public function HRESULT FNCERTSRVRESTOREGETDATABASELOCATIONSW(void* hbc, uint16** ppwszzDatabaseLocationList, uint32* pcbSize);
		public function HRESULT FNCERTSRVRESTOREPREPAREW(PWSTR pwszServerName, uint32 dwRestoreFlags, void** phbc);
		public function HRESULT FNCERTSRVRESTOREREGISTERW(void* hbc, PWSTR pwszCheckPointFilePath, PWSTR pwszLogPath, CSEDB_RSTMAPW* rgrstmap, int32 crstmap, PWSTR pwszBackupLogPath, uint32 genLow, uint32 genHigh);
		public function HRESULT FNCERTSRVRESTOREREGISTERCOMPLETE(void* hbc, HRESULT hrRestoreState);
		public function HRESULT FNCERTSRVRESTOREEND(void* hbc);
		public function HRESULT FNCERTSRVSERVERCONTROLW(PWSTR pwszServerName, uint32 dwControlFlags, uint32* pcbOut, uint8** ppbOut);
		public function HRESULT FNIMPORTPFXTOPROVIDER(HWND hWndParent, uint8* pbPFX, uint32 cbPFX, ImportPFXFlags ImportFlags, PWSTR pwszPassword, PWSTR pwszProviderName, PWSTR pwszReaderName, PWSTR pwszContainerNamePrefix, PWSTR pwszPin, PWSTR pwszFriendlyName, uint32* pcCertOut, CERT_CONTEXT*** prgpCertOut);
		public function void FNIMPORTPFXTOPROVIDERFREEDATA(uint32 cCert, CERT_CONTEXT** rgpCert);
		
		// --- Structs ---
		
		[CRepr]
		public struct CSEDB_RSTMAPW
		{
			public PWSTR pwszDatabaseName;
			public PWSTR pwszNewDatabaseName;
		}
		[CRepr]
		public struct CERTTRANSBLOB
		{
			public uint32 cb;
			public uint8* pb;
		}
		[CRepr]
		public struct CERTVIEWRESTRICTION
		{
			public uint32 ColumnIndex;
			public int32 SeekOperator;
			public int32 SortOrder;
			public uint8* pbValue;
			public uint32 cbValue;
		}
		[CRepr]
		public struct CAINFO
		{
			public uint32 cbSize;
			public ENUM_CATYPES CAType;
			public uint32 cCASignatureCerts;
			public uint32 cCAExchangeCerts;
			public uint32 cExitModules;
			public int32 lPropIdMax;
			public int32 lRoleSeparationEnabled;
			public uint32 cKRACertUsedCount;
			public uint32 cKRACertCount;
			public uint32 fAdvancedServer;
		}
		
		// --- COM Class IDs ---
		
		public const Guid CLSID_CCertAdmin = .(0x37eabaf0, 0x7fb6, 0x11d0, 0x88, 0x17, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertView = .(0xa12d0f7a, 0x1e84, 0x11d1, 0x9b, 0xd6, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
		public const Guid CLSID_OCSPPropertyCollection = .(0xf935a528, 0xba8a, 0x4dd9, 0xba, 0x79, 0xf2, 0x83, 0x27, 0x5c, 0xb2, 0xde);
		public const Guid CLSID_OCSPAdmin = .(0xd3f73511, 0x92c9, 0x47cb, 0x8f, 0xf2, 0x8d, 0x89, 0x1a, 0x7c, 0x4d, 0xe4);
		public const Guid CLSID_CCertGetConfig = .(0xc6cc49b0, 0xce17, 0x11d0, 0x88, 0x33, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertConfig = .(0x372fce38, 0x4324, 0x11d0, 0x88, 0x10, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertRequest = .(0x98aff3f0, 0x5524, 0x11d0, 0x88, 0x12, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertServerPolicy = .(0xaa000926, 0xffbe, 0x11cf, 0x88, 0x00, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertServerExit = .(0x4c4a5e40, 0x732c, 0x11d0, 0x88, 0x16, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertEncodeStringArray = .(0x19a76fe0, 0x7494, 0x11d0, 0x88, 0x16, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertEncodeLongArray = .(0x4e0680a0, 0xa0a2, 0x11d0, 0x88, 0x21, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertEncodeDateArray = .(0x301f77b0, 0xa470, 0x11d0, 0x88, 0x21, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertEncodeCRLDistInfo = .(0x01fa60a0, 0xbbff, 0x11d0, 0x88, 0x25, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
		public const Guid CLSID_CCertEncodeAltName = .(0x1cfc4cda, 0x1271, 0x11d1, 0x9b, 0xd4, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
		public const Guid CLSID_CCertEncodeBitString = .(0x6d6b3cd8, 0x1278, 0x11d1, 0x9b, 0xd4, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
		public const Guid CLSID_CObjectId = .(0x884e2000, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CObjectIds = .(0x884e2001, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CBinaryConverter = .(0x884e2002, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX500DistinguishedName = .(0x884e2003, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCspInformation = .(0x884e2007, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCspInformations = .(0x884e2008, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCspStatus = .(0x884e2009, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509PublicKey = .(0x884e200b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509PrivateKey = .(0x884e200c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509EndorsementKey = .(0x11a25a1d, 0xb9a3, 0x4edd, 0xaf, 0x83, 0x3b, 0x59, 0xad, 0xbe, 0xd3, 0x61);
		public const Guid CLSID_CX509Extension = .(0x884e200d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509Extensions = .(0x884e200e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionKeyUsage = .(0x884e200f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionEnhancedKeyUsage = .(0x884e2010, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionTemplateName = .(0x884e2011, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionTemplate = .(0x884e2012, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CAlternativeName = .(0x884e2013, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CAlternativeNames = .(0x884e2014, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionAlternativeNames = .(0x884e2015, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionBasicConstraints = .(0x884e2016, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionSubjectKeyIdentifier = .(0x884e2017, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionAuthorityKeyIdentifier = .(0x884e2018, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CSmimeCapability = .(0x884e2019, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CSmimeCapabilities = .(0x884e201a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionSmimeCapabilities = .(0x884e201b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CPolicyQualifier = .(0x884e201c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CPolicyQualifiers = .(0x884e201d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertificatePolicy = .(0x884e201e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertificatePolicies = .(0x884e201f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionCertificatePolicies = .(0x884e2020, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509ExtensionMSApplicationPolicies = .(0x884e2021, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509Attribute = .(0x884e2022, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509Attributes = .(0x884e2023, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeExtensions = .(0x884e2024, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeClientId = .(0x884e2025, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeRenewalCertificate = .(0x884e2026, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeArchiveKey = .(0x884e2027, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeArchiveKeyHash = .(0x884e2028, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeOSVersion = .(0x884e202a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509AttributeCspProvider = .(0x884e202b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCryptAttribute = .(0x884e202c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCryptAttributes = .(0x884e202d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertProperty = .(0x884e202e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertProperties = .(0x884e202f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyFriendlyName = .(0x884e2030, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyDescription = .(0x884e2031, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyAutoEnroll = .(0x884e2032, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyRequestOriginator = .(0x884e2033, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertySHA1Hash = .(0x884e2034, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyKeyProvInfo = .(0x884e2036, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyArchived = .(0x884e2037, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyBackedUp = .(0x884e2038, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyEnrollment = .(0x884e2039, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyRenewal = .(0x884e203a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyArchivedKeyHash = .(0x884e203b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertPropertyEnrollmentPolicyServer = .(0x884e204c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CSignerCertificate = .(0x884e203d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509NameValuePair = .(0x884e203f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CCertificateAttestationChallenge = .(0x1362ada1, 0xeb60, 0x456a, 0xb6, 0xe1, 0x11, 0x80, 0x50, 0xdb, 0x74, 0x1b);
		public const Guid CLSID_CX509CertificateRequestPkcs10 = .(0x884e2042, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509CertificateRequestCertificate = .(0x884e2043, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509CertificateRequestPkcs7 = .(0x884e2044, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509CertificateRequestCmc = .(0x884e2045, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509Enrollment = .(0x884e2046, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509EnrollmentWebClassFactory = .(0x884e2049, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509EnrollmentHelper = .(0x884e2050, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509MachineEnrollmentFactory = .(0x884e2051, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509EnrollmentPolicyActiveDirectory = .(0x91f39027, 0x217f, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509EnrollmentPolicyWebService = .(0x91f39028, 0x217f, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509PolicyServerListManager = .(0x91f39029, 0x217f, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509PolicyServerUrl = .(0x91f3902a, 0x217f, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509CertificateTemplateADWritable = .(0x8336e323, 0x2e6a, 0x4a04, 0x93, 0x7c, 0x54, 0x8f, 0x68, 0x18, 0x39, 0xb3);
		public const Guid CLSID_CX509CertificateRevocationListEntry = .(0x884e205e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509CertificateRevocationListEntries = .(0x884e205f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509CertificateRevocationList = .(0x884e2060, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509SCEPEnrollment = .(0x884e2061, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CX509SCEPEnrollmentHelper = .(0x884e2062, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
		public const Guid CLSID_CEnroll2 = .(0x127698e4, 0xe730, 0x4e5c, 0xa2, 0xb1, 0x21, 0x49, 0x0a, 0x70, 0xc8, 0xa1);
		public const Guid CLSID_CEnroll = .(0x43f8f289, 0x7a20, 0x11d0, 0x8f, 0x06, 0x00, 0xc0, 0x4f, 0xc2, 0x95, 0xe1);
		
		// --- COM Interfaces ---
		
		[CRepr]
		public struct IEnumCERTVIEWCOLUMN : IDispatch
		{
			public const new Guid IID = .(0x9c735be2, 0x57a5, 0x11d1, 0x9b, 0xdb, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, int32* pIndex) Next;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, BSTR* pstrOut) GetName;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, BSTR* pstrOut) GetDisplayName;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, int32* pType) GetType;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, int32* pIndexed) IsIndexed;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, int32* pMaxLength) GetMaxLength;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, ENUM_CERT_COLUMN_VALUE_FLAGS Flags, VARIANT* pvarValue) GetValue;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, int32 celt) Skip;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self) Reset;
			public function HRESULT(IEnumCERTVIEWCOLUMN *self, IEnumCERTVIEWCOLUMN** ppenum) Clone;
		}
		[CRepr]
		public struct IEnumCERTVIEWATTRIBUTE : IDispatch
		{
			public const new Guid IID = .(0xe77db656, 0x7653, 0x11d1, 0x9b, 0xde, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(IEnumCERTVIEWATTRIBUTE *self, int32* pIndex) Next;
			public function HRESULT(IEnumCERTVIEWATTRIBUTE *self, BSTR* pstrOut) GetName;
			public function HRESULT(IEnumCERTVIEWATTRIBUTE *self, BSTR* pstrOut) GetValue;
			public function HRESULT(IEnumCERTVIEWATTRIBUTE *self, int32 celt) Skip;
			public function HRESULT(IEnumCERTVIEWATTRIBUTE *self) Reset;
			public function HRESULT(IEnumCERTVIEWATTRIBUTE *self, IEnumCERTVIEWATTRIBUTE** ppenum) Clone;
		}
		[CRepr]
		public struct IEnumCERTVIEWEXTENSION : IDispatch
		{
			public const new Guid IID = .(0xe7dd1466, 0x7653, 0x11d1, 0x9b, 0xde, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(IEnumCERTVIEWEXTENSION *self, int32* pIndex) Next;
			public function HRESULT(IEnumCERTVIEWEXTENSION *self, BSTR* pstrOut) GetName;
			public function HRESULT(IEnumCERTVIEWEXTENSION *self, int32* pFlags) GetFlags;
			public function HRESULT(IEnumCERTVIEWEXTENSION *self, CERT_PROPERTY_TYPE Type, ENUM_CERT_COLUMN_VALUE_FLAGS Flags, VARIANT* pvarValue) GetValue;
			public function HRESULT(IEnumCERTVIEWEXTENSION *self, int32 celt) Skip;
			public function HRESULT(IEnumCERTVIEWEXTENSION *self) Reset;
			public function HRESULT(IEnumCERTVIEWEXTENSION *self, IEnumCERTVIEWEXTENSION** ppenum) Clone;
		}
		[CRepr]
		public struct IEnumCERTVIEWROW : IDispatch
		{
			public const new Guid IID = .(0xd1157f4c, 0x5af2, 0x11d1, 0x9b, 0xdc, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(IEnumCERTVIEWROW *self, int32* pIndex) Next;
			public function HRESULT(IEnumCERTVIEWROW *self, IEnumCERTVIEWCOLUMN** ppenum) EnumCertViewColumn;
			public function HRESULT(IEnumCERTVIEWROW *self, int32 Flags, IEnumCERTVIEWATTRIBUTE** ppenum) EnumCertViewAttribute;
			public function HRESULT(IEnumCERTVIEWROW *self, int32 Flags, IEnumCERTVIEWEXTENSION** ppenum) EnumCertViewExtension;
			public function HRESULT(IEnumCERTVIEWROW *self, int32 celt) Skip;
			public function HRESULT(IEnumCERTVIEWROW *self) Reset;
			public function HRESULT(IEnumCERTVIEWROW *self, IEnumCERTVIEWROW** ppenum) Clone;
			public function HRESULT(IEnumCERTVIEWROW *self, int32* pIndex) GetMaxIndex;
		}
		[CRepr]
		public struct ICertView : IDispatch
		{
			public const new Guid IID = .(0xc3fac344, 0x1e84, 0x11d1, 0x9b, 0xd6, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(ICertView *self, BSTR strConfig) OpenConnection;
			public function HRESULT(ICertView *self, CVRC_COLUMN fResultColumn, IEnumCERTVIEWCOLUMN** ppenum) EnumCertViewColumn;
			public function HRESULT(ICertView *self, CVRC_COLUMN fResultColumn, int32* pcColumn) GetColumnCount;
			public function HRESULT(ICertView *self, CVRC_COLUMN fResultColumn, BSTR strColumnName, int32* pColumnIndex) GetColumnIndex;
			public function HRESULT(ICertView *self, int32 cResultColumn) SetResultColumnCount;
			public function HRESULT(ICertView *self, int32 ColumnIndex) SetResultColumn;
			public function HRESULT(ICertView *self, CERT_VIEW_COLUMN_INDEX ColumnIndex, CERT_VIEW_SEEK_OPERATOR_FLAGS SeekOperator, int32 SortOrder, VARIANT* pvarValue) SetRestriction;
			public function HRESULT(ICertView *self, IEnumCERTVIEWROW** ppenum) OpenView;
		}
		[CRepr]
		public struct ICertView2 : ICertView
		{
			public const new Guid IID = .(0xd594b282, 0x8851, 0x4b61, 0x9c, 0x66, 0x3e, 0xda, 0xdf, 0x84, 0x88, 0x63);
			
			public function HRESULT(ICertView2 *self, CVRC_TABLE Table) SetTable;
		}
		[CRepr]
		public struct ICertAdmin : IDispatch
		{
			public const new Guid IID = .(0x34df6950, 0x7fb6, 0x11d0, 0x88, 0x17, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertAdmin *self, BSTR strConfig, BSTR strSerialNumber, int32* pDisposition) IsValidCertificate;
			public function HRESULT(ICertAdmin *self, int32* pReason) GetRevocationReason;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, BSTR strSerialNumber, int32 Reason, double Date) RevokeCertificate;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, int32 RequestId, BSTR strAttributes) SetRequestAttributes;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, int32 RequestId, BSTR strExtensionName, CERT_PROPERTY_TYPE Type, int32 Flags, VARIANT* pvarValue) SetCertificateExtension;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, int32 RequestId) DenyRequest;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, int32 RequestId, int32* pDisposition) ResubmitRequest;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, double Date) PublishCRL;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, int32 Flags, BSTR* pstrCRL) GetCRL;
			public function HRESULT(ICertAdmin *self, BSTR strConfig, BSTR strCertificate, CERT_IMPORT_FLAGS Flags, int32* pRequestId) ImportCertificate;
		}
		[CRepr]
		public struct ICertAdmin2 : ICertAdmin
		{
			public const new Guid IID = .(0xf7c3ac41, 0xb8ce, 0x4fb4, 0xaa, 0x58, 0x3d, 0x1d, 0xc0, 0xe3, 0x6b, 0x39);
			
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, double Date, int32 CRLFlags) PublishCRLs;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, int32 PropId, int32 PropIndex, int32 PropType, int32 Flags, VARIANT* pvarPropertyValue) GetCAProperty;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, int32 PropId, int32 PropIndex, CERT_PROPERTY_TYPE PropType, VARIANT* pvarPropertyValue) SetCAProperty;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, int32 PropId, int32* pPropFlags) GetCAPropertyFlags;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, int32 PropId, BSTR* pstrDisplayName) GetCAPropertyDisplayName;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, int32 RequestId, int32 Flags, BSTR* pstrArchivedKey) GetArchivedKey;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, BSTR strNodePath, BSTR strEntryName, VARIANT* pvarEntry) GetConfigEntry;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, BSTR strNodePath, BSTR strEntryName, VARIANT* pvarEntry) SetConfigEntry;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, int32 RequestId, BSTR strCertHash, CERT_IMPORT_FLAGS Flags, BSTR strKey) ImportKey;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, CERTADMIN_GET_ROLES_FLAGS* pRoles) GetMyRoles;
			public function HRESULT(ICertAdmin2 *self, BSTR strConfig, CERT_DELETE_ROW_FLAGS Flags, double Date, CVRC_TABLE Table, int32 RowId, int32* pcDeleted) DeleteRow;
		}
		[CRepr]
		public struct IOCSPProperty : IDispatch
		{
			public const new Guid IID = .(0x66fb7839, 0x5f04, 0x4c25, 0xad, 0x18, 0x9f, 0xf1, 0xa8, 0x37, 0x6e, 0xe0);
			
			public function HRESULT(IOCSPProperty *self, BSTR* pVal) get_Name;
			public function HRESULT(IOCSPProperty *self, VARIANT* pVal) get_Value;
			public function HRESULT(IOCSPProperty *self, VARIANT newVal) put_Value;
			public function HRESULT(IOCSPProperty *self, int16* pVal) get_Modified;
		}
		[CRepr]
		public struct IOCSPPropertyCollection : IDispatch
		{
			public const new Guid IID = .(0x2597c18d, 0x54e6, 0x4b74, 0x9f, 0xa9, 0xa6, 0xbf, 0xda, 0x99, 0xcb, 0xbe);
			
			public function HRESULT(IOCSPPropertyCollection *self, IUnknown** ppVal) get__NewEnum;
			public function HRESULT(IOCSPPropertyCollection *self, int32 Index, VARIANT* pVal) get_Item;
			public function HRESULT(IOCSPPropertyCollection *self, int32* pVal) get_Count;
			public function HRESULT(IOCSPPropertyCollection *self, BSTR bstrPropName, VARIANT* pVal) get_ItemByName;
			public function HRESULT(IOCSPPropertyCollection *self, BSTR bstrPropName, VARIANT* pVarPropValue, IOCSPProperty** ppVal) CreateProperty;
			public function HRESULT(IOCSPPropertyCollection *self, BSTR bstrPropName) DeleteProperty;
			public function HRESULT(IOCSPPropertyCollection *self, VARIANT* pVarProperties) InitializeFromProperties;
			public function HRESULT(IOCSPPropertyCollection *self, VARIANT* pVarProperties) GetAllProperties;
		}
		[CRepr]
		public struct IOCSPCAConfiguration : IDispatch
		{
			public const new Guid IID = .(0xaec92b40, 0x3d46, 0x433f, 0x87, 0xd1, 0xb8, 0x4d, 0x5c, 0x1e, 0x79, 0x0d);
			
			public function HRESULT(IOCSPCAConfiguration *self, BSTR* pVal) get_Identifier;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT* pVal) get_CACertificate;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR* pVal) get_HashAlgorithm;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR newVal) put_HashAlgorithm;
			public function HRESULT(IOCSPCAConfiguration *self, uint32* pVal) get_SigningFlags;
			public function HRESULT(IOCSPCAConfiguration *self, uint32 newVal) put_SigningFlags;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT* pVal) get_SigningCertificate;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT newVal) put_SigningCertificate;
			public function HRESULT(IOCSPCAConfiguration *self, uint32* pVal) get_ReminderDuration;
			public function HRESULT(IOCSPCAConfiguration *self, uint32 newVal) put_ReminderDuration;
			public function HRESULT(IOCSPCAConfiguration *self, uint32* pVal) get_ErrorCode;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR* pVal) get_CSPName;
			public function HRESULT(IOCSPCAConfiguration *self, uint32* pVal) get_KeySpec;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR* pVal) get_ProviderCLSID;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR newVal) put_ProviderCLSID;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT* pVal) get_ProviderProperties;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT newVal) put_ProviderProperties;
			public function HRESULT(IOCSPCAConfiguration *self, int16* pVal) get_Modified;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT* pVal) get_LocalRevocationInformation;
			public function HRESULT(IOCSPCAConfiguration *self, VARIANT newVal) put_LocalRevocationInformation;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR* pVal) get_SigningCertificateTemplate;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR newVal) put_SigningCertificateTemplate;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR* pVal) get_CAConfig;
			public function HRESULT(IOCSPCAConfiguration *self, BSTR newVal) put_CAConfig;
		}
		[CRepr]
		public struct IOCSPCAConfigurationCollection : IDispatch
		{
			public const new Guid IID = .(0x2bebea0b, 0x5ece, 0x4f28, 0xa9, 0x1c, 0x86, 0xb4, 0xbb, 0x20, 0xf0, 0xd3);
			
			public function HRESULT(IOCSPCAConfigurationCollection *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IOCSPCAConfigurationCollection *self, int32 Index, VARIANT* pVal) get_Item;
			public function HRESULT(IOCSPCAConfigurationCollection *self, int32* pVal) get_Count;
			public function HRESULT(IOCSPCAConfigurationCollection *self, BSTR bstrIdentifier, VARIANT* pVal) get_ItemByName;
			public function HRESULT(IOCSPCAConfigurationCollection *self, BSTR bstrIdentifier, VARIANT varCACert, IOCSPCAConfiguration** ppVal) CreateCAConfiguration;
			public function HRESULT(IOCSPCAConfigurationCollection *self, BSTR bstrIdentifier) DeleteCAConfiguration;
		}
		[CRepr]
		public struct IOCSPAdmin : IDispatch
		{
			public const new Guid IID = .(0x322e830d, 0x67db, 0x4fe9, 0x95, 0x77, 0x45, 0x96, 0xd9, 0xf0, 0x92, 0x94);
			
			public function HRESULT(IOCSPAdmin *self, IOCSPPropertyCollection** ppVal) get_OCSPServiceProperties;
			public function HRESULT(IOCSPAdmin *self, IOCSPCAConfigurationCollection** pVal) get_OCSPCAConfigurationCollection;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, int16 bForce) GetConfiguration;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, int16 bForce) SetConfiguration;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, int32* pRoles) GetMyRoles;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName) Ping;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, BSTR bstrVal) SetSecurity;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, BSTR* pVal) GetSecurity;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, VARIANT* pCACertVar, VARIANT* pVal) GetSigningCertificates;
			public function HRESULT(IOCSPAdmin *self, BSTR bstrServerName, BSTR bstrCAId, VARIANT* pVal) GetHashAlgorithms;
		}
		[CRepr]
		public struct ICertServerPolicy : IDispatch
		{
			public const new Guid IID = .(0xaa000922, 0xffbe, 0x11cf, 0x88, 0x00, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertServerPolicy *self, int32 Context) SetContext;
			public function HRESULT(ICertServerPolicy *self, BSTR strPropertyName, int32 PropertyType, VARIANT* pvarPropertyValue) GetRequestProperty;
			public function HRESULT(ICertServerPolicy *self, BSTR strAttributeName, BSTR* pstrAttributeValue) GetRequestAttribute;
			public function HRESULT(ICertServerPolicy *self, BSTR strPropertyName, CERT_PROPERTY_TYPE PropertyType, VARIANT* pvarPropertyValue) GetCertificateProperty;
			public function HRESULT(ICertServerPolicy *self, BSTR strPropertyName, int32 PropertyType, VARIANT* pvarPropertyValue) SetCertificateProperty;
			public function HRESULT(ICertServerPolicy *self, BSTR strExtensionName, CERT_PROPERTY_TYPE Type, VARIANT* pvarValue) GetCertificateExtension;
			public function HRESULT(ICertServerPolicy *self, int32* pExtFlags) GetCertificateExtensionFlags;
			public function HRESULT(ICertServerPolicy *self, BSTR strExtensionName, int32 Type, int32 ExtFlags, VARIANT* pvarValue) SetCertificateExtension;
			public function HRESULT(ICertServerPolicy *self, int32 Flags) EnumerateExtensionsSetup;
			public function HRESULT(ICertServerPolicy *self, BSTR* pstrExtensionName) EnumerateExtensions;
			public function HRESULT(ICertServerPolicy *self) EnumerateExtensionsClose;
			public function HRESULT(ICertServerPolicy *self, int32 Flags) EnumerateAttributesSetup;
			public function HRESULT(ICertServerPolicy *self, BSTR* pstrAttributeName) EnumerateAttributes;
			public function HRESULT(ICertServerPolicy *self) EnumerateAttributesClose;
		}
		[CRepr]
		public struct ICertServerExit : IDispatch
		{
			public const new Guid IID = .(0x4ba9eb90, 0x732c, 0x11d0, 0x88, 0x16, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertServerExit *self, int32 Context) SetContext;
			public function HRESULT(ICertServerExit *self, BSTR strPropertyName, int32 PropertyType, VARIANT* pvarPropertyValue) GetRequestProperty;
			public function HRESULT(ICertServerExit *self, BSTR strAttributeName, BSTR* pstrAttributeValue) GetRequestAttribute;
			public function HRESULT(ICertServerExit *self, BSTR strPropertyName, int32 PropertyType, VARIANT* pvarPropertyValue) GetCertificateProperty;
			public function HRESULT(ICertServerExit *self, BSTR strExtensionName, int32 Type, VARIANT* pvarValue) GetCertificateExtension;
			public function HRESULT(ICertServerExit *self, int32* pExtFlags) GetCertificateExtensionFlags;
			public function HRESULT(ICertServerExit *self, int32 Flags) EnumerateExtensionsSetup;
			public function HRESULT(ICertServerExit *self, BSTR* pstrExtensionName) EnumerateExtensions;
			public function HRESULT(ICertServerExit *self) EnumerateExtensionsClose;
			public function HRESULT(ICertServerExit *self, int32 Flags) EnumerateAttributesSetup;
			public function HRESULT(ICertServerExit *self, BSTR* pstrAttributeName) EnumerateAttributes;
			public function HRESULT(ICertServerExit *self) EnumerateAttributesClose;
		}
		[CRepr]
		public struct ICertGetConfig : IDispatch
		{
			public const new Guid IID = .(0xc7ea09c0, 0xce17, 0x11d0, 0x88, 0x33, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertGetConfig *self, CERT_GET_CONFIG_FLAGS Flags, BSTR* pstrOut) GetConfig;
		}
		[CRepr]
		public struct ICertConfig : IDispatch
		{
			public const new Guid IID = .(0x372fce34, 0x4324, 0x11d0, 0x88, 0x10, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertConfig *self, int32 Index, int32* pCount) Reset;
			public function HRESULT(ICertConfig *self, int32* pIndex) Next;
			public function HRESULT(ICertConfig *self, BSTR strFieldName, BSTR* pstrOut) GetField;
			public function HRESULT(ICertConfig *self, int32 Flags, BSTR* pstrOut) GetConfig;
		}
		[CRepr]
		public struct ICertConfig2 : ICertConfig
		{
			public const new Guid IID = .(0x7a18edde, 0x7e78, 0x4163, 0x8d, 0xed, 0x78, 0xe2, 0xc9, 0xce, 0xe9, 0x24);
			
			public function HRESULT(ICertConfig2 *self, BSTR strSharedFolder) SetSharedFolder;
		}
		[CRepr]
		public struct ICertRequest : IDispatch
		{
			public const new Guid IID = .(0x014e4840, 0x5523, 0x11d0, 0x88, 0x12, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertRequest *self, int32 Flags, BSTR strRequest, BSTR strAttributes, BSTR strConfig, int32* pDisposition) Submit;
			public function HRESULT(ICertRequest *self, int32 RequestId, BSTR strConfig, int32* pDisposition) RetrievePending;
			public function HRESULT(ICertRequest *self, int32* pStatus) GetLastStatus;
			public function HRESULT(ICertRequest *self, int32* pRequestId) GetRequestId;
			public function HRESULT(ICertRequest *self, BSTR* pstrDispositionMessage) GetDispositionMessage;
			public function HRESULT(ICertRequest *self, int32 fExchangeCertificate, BSTR strConfig, int32 Flags, BSTR* pstrCertificate) GetCACertificate;
			public function HRESULT(ICertRequest *self, int32 Flags, BSTR* pstrCertificate) GetCertificate;
		}
		[CRepr]
		public struct ICertRequest2 : ICertRequest
		{
			public const new Guid IID = .(0xa4772988, 0x4a85, 0x4fa9, 0x82, 0x4e, 0xb5, 0xcf, 0x5c, 0x16, 0x40, 0x5a);
			
			public function HRESULT(ICertRequest2 *self, BSTR strConfig, int32 RequestId, BSTR strSerialNumber, CR_DISP* pDisposition) GetIssuedCertificate;
			public function HRESULT(ICertRequest2 *self, int32 hrMessage, int32 Flags, BSTR* pstrErrorMessageText) GetErrorMessageText;
			public function HRESULT(ICertRequest2 *self, BSTR strConfig, int32 PropId, int32 PropIndex, int32 PropType, int32 Flags, VARIANT* pvarPropertyValue) GetCAProperty;
			public function HRESULT(ICertRequest2 *self, BSTR strConfig, int32 PropId, int32* pPropFlags) GetCAPropertyFlags;
			public function HRESULT(ICertRequest2 *self, BSTR strConfig, int32 PropId, BSTR* pstrDisplayName) GetCAPropertyDisplayName;
			public function HRESULT(ICertRequest2 *self, FULL_RESPONSE_PROPERTY_ID PropId, int32 PropIndex, CERT_PROPERTY_TYPE PropType, CERT_REQUEST_OUT_TYPE Flags, VARIANT* pvarPropertyValue) GetFullResponseProperty;
		}
		[CRepr]
		public struct ICertRequest3 : ICertRequest2
		{
			public const new Guid IID = .(0xafc8f92b, 0x33a2, 0x4861, 0xbf, 0x36, 0x29, 0x33, 0xb7, 0xcd, 0x67, 0xb3);
			
			public function HRESULT(ICertRequest3 *self, int32 hWnd, X509EnrollmentAuthFlags AuthType, BSTR strCredential, BSTR strPassword) SetCredential;
			public function HRESULT(ICertRequest3 *self, BSTR* pstrRequestId) GetRequestIdString;
			public function HRESULT(ICertRequest3 *self, BSTR strConfig, BSTR strRequestId, BSTR strSerialNumber, CR_DISP* pDisposition) GetIssuedCertificate2;
			public function HRESULT(ICertRequest3 *self, int16* pValue) GetRefreshPolicy;
		}
		[CRepr]
		public struct ICertManageModule : IDispatch
		{
			public const new Guid IID = .(0xe7d7ad42, 0xbd3d, 0x11d1, 0x9a, 0x4d, 0x00, 0xc0, 0x4f, 0xc2, 0x97, 0xeb);
			
			public function HRESULT(ICertManageModule *self, BSTR strConfig, BSTR strStorageLocation, BSTR strPropertyName, int32 Flags, VARIANT* pvarProperty) GetProperty;
			public function HRESULT(ICertManageModule *self, BSTR strConfig, BSTR strStorageLocation, BSTR strPropertyName, int32 Flags, VARIANT* pvarProperty) SetProperty;
			public function HRESULT(ICertManageModule *self, BSTR strConfig, BSTR strStorageLocation, int32 Flags) Configure;
		}
		[CRepr]
		public struct ICertPolicy : IDispatch
		{
			public const new Guid IID = .(0x38bb5a00, 0x7636, 0x11d0, 0xb4, 0x13, 0x00, 0xa0, 0xc9, 0x1b, 0xbf, 0x8c);
			
			public function HRESULT(ICertPolicy *self, BSTR strConfig) Initialize;
			public function HRESULT(ICertPolicy *self, BSTR strConfig, int32 Context, int32 bNewRequest, int32 Flags, int32* pDisposition) VerifyRequest;
			public function HRESULT(ICertPolicy *self, BSTR* pstrDescription) GetDescription;
			public function HRESULT(ICertPolicy *self) ShutDown;
		}
		[CRepr]
		public struct ICertPolicy2 : ICertPolicy
		{
			public const new Guid IID = .(0x3db4910e, 0x8001, 0x4bf1, 0xaa, 0x1b, 0xf4, 0x3a, 0x80, 0x83, 0x17, 0xa0);
			
			public function HRESULT(ICertPolicy2 *self, ICertManageModule** ppManageModule) GetManageModule;
		}
		[CRepr]
		public struct INDESPolicy : IUnknown
		{
			public const new Guid IID = .(0x13ca515d, 0x431d, 0x46cc, 0x8c, 0x2e, 0x1d, 0xa2, 0x69, 0xbb, 0xd6, 0x25);
			
			public function HRESULT(INDESPolicy *self) Initialize;
			public function HRESULT(INDESPolicy *self) Uninitialize;
			public function HRESULT(INDESPolicy *self, PWSTR pwszTemplate, PWSTR pwszParams, PWSTR* ppwszResponse) GenerateChallenge;
			public function HRESULT(INDESPolicy *self, CERTTRANSBLOB* pctbRequest, CERTTRANSBLOB* pctbSigningCertEncoded, PWSTR pwszTemplate, PWSTR pwszTransactionId, BOOL* pfVerified) VerifyRequest;
			public function HRESULT(INDESPolicy *self, PWSTR pwszChallenge, PWSTR pwszTransactionId, X509SCEPDisposition disposition, int32 lastHResult, CERTTRANSBLOB* pctbIssuedCertEncoded) Notify;
		}
		[CRepr]
		public struct IObjectId : IDispatch
		{
			public const new Guid IID = .(0x728ab300, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IObjectId *self, CERTENROLL_OBJECTID Name) InitializeFromName;
			public function HRESULT(IObjectId *self, BSTR strValue) InitializeFromValue;
			public function HRESULT(IObjectId *self, ObjectIdGroupId GroupId, ObjectIdPublicKeyFlags KeyFlags, AlgorithmFlags AlgFlags, BSTR strAlgorithmName) InitializeFromAlgorithmName;
			public function HRESULT(IObjectId *self, CERTENROLL_OBJECTID* pValue) get_Name;
			public function HRESULT(IObjectId *self, BSTR* pValue) get_FriendlyName;
			public function HRESULT(IObjectId *self, BSTR Value) put_FriendlyName;
			public function HRESULT(IObjectId *self, BSTR* pValue) get_Value;
			public function HRESULT(IObjectId *self, ObjectIdGroupId GroupId, ObjectIdPublicKeyFlags KeyFlags, BSTR* pstrAlgorithmName) GetAlgorithmName;
		}
		[CRepr]
		public struct IObjectIds : IDispatch
		{
			public const new Guid IID = .(0x728ab301, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IObjectIds *self, int32 Index, IObjectId** pVal) get_ItemByIndex;
			public function HRESULT(IObjectIds *self, int32* pVal) get_Count;
			public function HRESULT(IObjectIds *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IObjectIds *self, IObjectId* pVal) Add;
			public function HRESULT(IObjectIds *self, int32 Index) Remove;
			public function HRESULT(IObjectIds *self) Clear;
			public function HRESULT(IObjectIds *self, IObjectIds* pValue) AddRange;
		}
		[CRepr]
		public struct IBinaryConverter : IDispatch
		{
			public const new Guid IID = .(0x728ab302, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IBinaryConverter *self, BSTR strEncodedIn, EncodingType EncodingIn, EncodingType Encoding, BSTR* pstrEncoded) StringToString;
			public function HRESULT(IBinaryConverter *self, VARIANT* pvarByteArray, EncodingType Encoding, BSTR* pstrEncoded) VariantByteArrayToString;
			public function HRESULT(IBinaryConverter *self, BSTR strEncoded, EncodingType Encoding, VARIANT* pvarByteArray) StringToVariantByteArray;
		}
		[CRepr]
		public struct IBinaryConverter2 : IBinaryConverter
		{
			public const new Guid IID = .(0x8d7928b4, 0x4e17, 0x428d, 0x9a, 0x17, 0x72, 0x8d, 0xf0, 0x0d, 0x1b, 0x2b);
			
			public function HRESULT(IBinaryConverter2 *self, VARIANT* pvarStringArray, VARIANT* pvarVariantArray) StringArrayToVariantArray;
			public function HRESULT(IBinaryConverter2 *self, VARIANT* pvarVariantArray, VARIANT* pvarStringArray) VariantArrayToStringArray;
		}
		[CRepr]
		public struct IX500DistinguishedName : IDispatch
		{
			public const new Guid IID = .(0x728ab303, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX500DistinguishedName *self, BSTR strEncodedName, EncodingType Encoding, X500NameFlags NameFlags) Decode;
			public function HRESULT(IX500DistinguishedName *self, BSTR strName, X500NameFlags NameFlags) Encode;
			public function HRESULT(IX500DistinguishedName *self, BSTR* pValue) get_Name;
			public function HRESULT(IX500DistinguishedName *self, EncodingType Encoding, BSTR* pValue) get_EncodedName;
		}
		[CRepr]
		public struct IX509EnrollmentStatus : IDispatch
		{
			public const new Guid IID = .(0x728ab304, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509EnrollmentStatus *self, BSTR strText) AppendText;
			public function HRESULT(IX509EnrollmentStatus *self, BSTR* pValue) get_Text;
			public function HRESULT(IX509EnrollmentStatus *self, BSTR Value) put_Text;
			public function HRESULT(IX509EnrollmentStatus *self, EnrollmentSelectionStatus* pValue) get_Selected;
			public function HRESULT(IX509EnrollmentStatus *self, EnrollmentSelectionStatus Value) put_Selected;
			public function HRESULT(IX509EnrollmentStatus *self, EnrollmentDisplayStatus* pValue) get_Display;
			public function HRESULT(IX509EnrollmentStatus *self, EnrollmentDisplayStatus Value) put_Display;
			public function HRESULT(IX509EnrollmentStatus *self, EnrollmentEnrollStatus* pValue) get_Status;
			public function HRESULT(IX509EnrollmentStatus *self, EnrollmentEnrollStatus Value) put_Status;
			public function HRESULT(IX509EnrollmentStatus *self, HRESULT* pValue) get_Error;
			public function HRESULT(IX509EnrollmentStatus *self, HRESULT Value) put_Error;
			public function HRESULT(IX509EnrollmentStatus *self, BSTR* pValue) get_ErrorText;
		}
		[CRepr]
		public struct ICspAlgorithm : IDispatch
		{
			public const new Guid IID = .(0x728ab305, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICspAlgorithm *self, int32 Length, AlgorithmFlags AlgFlags, IObjectId** ppValue) GetAlgorithmOid;
			public function HRESULT(ICspAlgorithm *self, int32* pValue) get_DefaultLength;
			public function HRESULT(ICspAlgorithm *self, int32* pValue) get_IncrementLength;
			public function HRESULT(ICspAlgorithm *self, BSTR* pValue) get_LongName;
			public function HRESULT(ICspAlgorithm *self, int16* pValue) get_Valid;
			public function HRESULT(ICspAlgorithm *self, int32* pValue) get_MaxLength;
			public function HRESULT(ICspAlgorithm *self, int32* pValue) get_MinLength;
			public function HRESULT(ICspAlgorithm *self, BSTR* pValue) get_Name;
			public function HRESULT(ICspAlgorithm *self, AlgorithmType* pValue) get_Type;
			public function HRESULT(ICspAlgorithm *self, AlgorithmOperationFlags* pValue) get_Operations;
		}
		[CRepr]
		public struct ICspAlgorithms : IDispatch
		{
			public const new Guid IID = .(0x728ab306, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICspAlgorithms *self, int32 Index, ICspAlgorithm** pVal) get_ItemByIndex;
			public function HRESULT(ICspAlgorithms *self, int32* pVal) get_Count;
			public function HRESULT(ICspAlgorithms *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICspAlgorithms *self, ICspAlgorithm* pVal) Add;
			public function HRESULT(ICspAlgorithms *self, int32 Index) Remove;
			public function HRESULT(ICspAlgorithms *self) Clear;
			public function HRESULT(ICspAlgorithms *self, BSTR strName, ICspAlgorithm** ppValue) get_ItemByName;
			public function HRESULT(ICspAlgorithms *self, IObjectId* pObjectId, int32* pIndex) get_IndexByObjectId;
		}
		[CRepr]
		public struct ICspInformation : IDispatch
		{
			public const new Guid IID = .(0x728ab307, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICspInformation *self, BSTR strName) InitializeFromName;
			public function HRESULT(ICspInformation *self, X509ProviderType Type, IObjectId* pAlgorithm, int16 MachineContext) InitializeFromType;
			public function HRESULT(ICspInformation *self, ICspAlgorithms** ppValue) get_CspAlgorithms;
			public function HRESULT(ICspInformation *self, int16* pValue) get_HasHardwareRandomNumberGenerator;
			public function HRESULT(ICspInformation *self, int16* pValue) get_IsHardwareDevice;
			public function HRESULT(ICspInformation *self, int16* pValue) get_IsRemovable;
			public function HRESULT(ICspInformation *self, int16* pValue) get_IsSoftwareDevice;
			public function HRESULT(ICspInformation *self, int16* pValue) get_Valid;
			public function HRESULT(ICspInformation *self, int32* pValue) get_MaxKeyContainerNameLength;
			public function HRESULT(ICspInformation *self, BSTR* pValue) get_Name;
			public function HRESULT(ICspInformation *self, X509ProviderType* pValue) get_Type;
			public function HRESULT(ICspInformation *self, int32* pValue) get_Version;
			public function HRESULT(ICspInformation *self, X509KeySpec* pValue) get_KeySpec;
			public function HRESULT(ICspInformation *self, int16* pValue) get_IsSmartCard;
			public function HRESULT(ICspInformation *self, int16 MachineContext, BSTR* pValue) GetDefaultSecurityDescriptor;
			public function HRESULT(ICspInformation *self, int16* pValue) get_LegacyCsp;
			public function HRESULT(ICspInformation *self, IObjectId* pAlgorithm, AlgorithmOperationFlags Operations, ICspStatus** ppValue) GetCspStatusFromOperations;
		}
		[CRepr]
		public struct ICspInformations : IDispatch
		{
			public const new Guid IID = .(0x728ab308, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICspInformations *self, int32 Index, ICspInformation** pVal) get_ItemByIndex;
			public function HRESULT(ICspInformations *self, int32* pVal) get_Count;
			public function HRESULT(ICspInformations *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICspInformations *self, ICspInformation* pVal) Add;
			public function HRESULT(ICspInformations *self, int32 Index) Remove;
			public function HRESULT(ICspInformations *self) Clear;
			public function HRESULT(ICspInformations *self) AddAvailableCsps;
			public function HRESULT(ICspInformations *self, BSTR strName, ICspInformation** ppCspInformation) get_ItemByName;
			public function HRESULT(ICspInformations *self, BSTR strProviderName, X509KeySpec LegacyKeySpec, ICspStatus** ppValue) GetCspStatusFromProviderName;
			public function HRESULT(ICspInformations *self, AlgorithmOperationFlags Operations, ICspInformation* pCspInformation, ICspStatuses** ppValue) GetCspStatusesFromOperations;
			public function HRESULT(ICspInformations *self, ICspInformation* pCspInformation, ICspAlgorithms** ppValue) GetEncryptionCspAlgorithms;
			public function HRESULT(ICspInformations *self, ICspInformation* pCspInformation, IObjectIds** ppValue) GetHashAlgorithms;
		}
		[CRepr]
		public struct ICspStatus : IDispatch
		{
			public const new Guid IID = .(0x728ab309, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICspStatus *self, ICspInformation* pCsp, ICspAlgorithm* pAlgorithm) Initialize;
			public function HRESULT(ICspStatus *self, int32* pValue) get_Ordinal;
			public function HRESULT(ICspStatus *self, int32 Value) put_Ordinal;
			public function HRESULT(ICspStatus *self, ICspAlgorithm** ppValue) get_CspAlgorithm;
			public function HRESULT(ICspStatus *self, ICspInformation** ppValue) get_CspInformation;
			public function HRESULT(ICspStatus *self, IX509EnrollmentStatus** ppValue) get_EnrollmentStatus;
			public function HRESULT(ICspStatus *self, BSTR* pValue) get_DisplayName;
		}
		[CRepr]
		public struct ICspStatuses : IDispatch
		{
			public const new Guid IID = .(0x728ab30a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICspStatuses *self, int32 Index, ICspStatus** pVal) get_ItemByIndex;
			public function HRESULT(ICspStatuses *self, int32* pVal) get_Count;
			public function HRESULT(ICspStatuses *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICspStatuses *self, ICspStatus* pVal) Add;
			public function HRESULT(ICspStatuses *self, int32 Index) Remove;
			public function HRESULT(ICspStatuses *self) Clear;
			public function HRESULT(ICspStatuses *self, BSTR strCspName, BSTR strAlgorithmName, ICspStatus** ppValue) get_ItemByName;
			public function HRESULT(ICspStatuses *self, int32 Ordinal, ICspStatus** ppValue) get_ItemByOrdinal;
			public function HRESULT(ICspStatuses *self, BSTR strCspName, BSTR strAlgorithmName, AlgorithmOperationFlags Operations, ICspStatus** ppValue) get_ItemByOperations;
			public function HRESULT(ICspStatuses *self, ICspStatus* pCspStatus, ICspStatus** ppValue) get_ItemByProvider;
		}
		[CRepr]
		public struct IX509PublicKey : IDispatch
		{
			public const new Guid IID = .(0x728ab30b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509PublicKey *self, IObjectId* pObjectId, BSTR strEncodedKey, BSTR strEncodedParameters, EncodingType Encoding) Initialize;
			public function HRESULT(IX509PublicKey *self, BSTR strEncodedPublicKeyInfo, EncodingType Encoding) InitializeFromEncodedPublicKeyInfo;
			public function HRESULT(IX509PublicKey *self, IObjectId** ppValue) get_Algorithm;
			public function HRESULT(IX509PublicKey *self, int32* pValue) get_Length;
			public function HRESULT(IX509PublicKey *self, EncodingType Encoding, BSTR* pValue) get_EncodedKey;
			public function HRESULT(IX509PublicKey *self, EncodingType Encoding, BSTR* pValue) get_EncodedParameters;
			public function HRESULT(IX509PublicKey *self, KeyIdentifierHashAlgorithm Algorithm, EncodingType Encoding, BSTR* pValue) ComputeKeyIdentifier;
		}
		[CRepr]
		public struct IX509PrivateKey : IDispatch
		{
			public const new Guid IID = .(0x728ab30c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509PrivateKey *self) Open;
			public function HRESULT(IX509PrivateKey *self) Create;
			public function HRESULT(IX509PrivateKey *self) Close;
			public function HRESULT(IX509PrivateKey *self) Delete;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyVerify VerifyType) Verify;
			public function HRESULT(IX509PrivateKey *self, BSTR strExportType, BSTR strEncodedKey, EncodingType Encoding) Import;
			public function HRESULT(IX509PrivateKey *self, BSTR strExportType, EncodingType Encoding, BSTR* pstrEncodedKey) Export;
			public function HRESULT(IX509PrivateKey *self, IX509PublicKey** ppPublicKey) ExportPublicKey;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_ContainerName;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_ContainerName;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_ContainerNamePrefix;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_ContainerNamePrefix;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_ReaderName;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_ReaderName;
			public function HRESULT(IX509PrivateKey *self, ICspInformations** ppValue) get_CspInformations;
			public function HRESULT(IX509PrivateKey *self, ICspInformations* pValue) put_CspInformations;
			public function HRESULT(IX509PrivateKey *self, ICspStatus** ppValue) get_CspStatus;
			public function HRESULT(IX509PrivateKey *self, ICspStatus* pValue) put_CspStatus;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_ProviderName;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_ProviderName;
			public function HRESULT(IX509PrivateKey *self, X509ProviderType* pValue) get_ProviderType;
			public function HRESULT(IX509PrivateKey *self, X509ProviderType Value) put_ProviderType;
			public function HRESULT(IX509PrivateKey *self, int16* pValue) get_LegacyCsp;
			public function HRESULT(IX509PrivateKey *self, int16 Value) put_LegacyCsp;
			public function HRESULT(IX509PrivateKey *self, IObjectId** ppValue) get_Algorithm;
			public function HRESULT(IX509PrivateKey *self, IObjectId* pValue) put_Algorithm;
			public function HRESULT(IX509PrivateKey *self, X509KeySpec* pValue) get_KeySpec;
			public function HRESULT(IX509PrivateKey *self, X509KeySpec Value) put_KeySpec;
			public function HRESULT(IX509PrivateKey *self, int32* pValue) get_Length;
			public function HRESULT(IX509PrivateKey *self, int32 Value) put_Length;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyExportFlags* pValue) get_ExportPolicy;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyExportFlags Value) put_ExportPolicy;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyUsageFlags* pValue) get_KeyUsage;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyUsageFlags Value) put_KeyUsage;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyProtection* pValue) get_KeyProtection;
			public function HRESULT(IX509PrivateKey *self, X509PrivateKeyProtection Value) put_KeyProtection;
			public function HRESULT(IX509PrivateKey *self, int16* pValue) get_MachineContext;
			public function HRESULT(IX509PrivateKey *self, int16 Value) put_MachineContext;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_SecurityDescriptor;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_SecurityDescriptor;
			public function HRESULT(IX509PrivateKey *self, EncodingType Encoding, BSTR* pValue) get_Certificate;
			public function HRESULT(IX509PrivateKey *self, EncodingType Encoding, BSTR Value) put_Certificate;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_UniqueContainerName;
			public function HRESULT(IX509PrivateKey *self, int16* pValue) get_Opened;
			public function HRESULT(IX509PrivateKey *self, int16* pValue) get_DefaultContainer;
			public function HRESULT(IX509PrivateKey *self, int16* pValue) get_Existing;
			public function HRESULT(IX509PrivateKey *self, int16 Value) put_Existing;
			public function HRESULT(IX509PrivateKey *self, int16* pValue) get_Silent;
			public function HRESULT(IX509PrivateKey *self, int16 Value) put_Silent;
			public function HRESULT(IX509PrivateKey *self, int32* pValue) get_ParentWindow;
			public function HRESULT(IX509PrivateKey *self, int32 Value) put_ParentWindow;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_UIContextMessage;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_UIContextMessage;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_Pin;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_FriendlyName;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_FriendlyName;
			public function HRESULT(IX509PrivateKey *self, BSTR* pValue) get_Description;
			public function HRESULT(IX509PrivateKey *self, BSTR Value) put_Description;
		}
		[CRepr]
		public struct IX509PrivateKey2 : IX509PrivateKey
		{
			public const new Guid IID = .(0x728ab362, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509PrivateKey2 *self, X509HardwareKeyUsageFlags* pValue) get_HardwareKeyUsage;
			public function HRESULT(IX509PrivateKey2 *self, X509HardwareKeyUsageFlags Value) put_HardwareKeyUsage;
			public function HRESULT(IX509PrivateKey2 *self, BSTR* pValue) get_AlternateStorageLocation;
			public function HRESULT(IX509PrivateKey2 *self, BSTR Value) put_AlternateStorageLocation;
			public function HRESULT(IX509PrivateKey2 *self, BSTR* pValue) get_AlgorithmName;
			public function HRESULT(IX509PrivateKey2 *self, BSTR Value) put_AlgorithmName;
			public function HRESULT(IX509PrivateKey2 *self, EncodingType Encoding, BSTR* pValue) get_AlgorithmParameters;
			public function HRESULT(IX509PrivateKey2 *self, EncodingType Encoding, BSTR Value) put_AlgorithmParameters;
			public function HRESULT(IX509PrivateKey2 *self, X509KeyParametersExportType* pValue) get_ParametersExportType;
			public function HRESULT(IX509PrivateKey2 *self, X509KeyParametersExportType Value) put_ParametersExportType;
		}
		[CRepr]
		public struct IX509EndorsementKey : IDispatch
		{
			public const new Guid IID = .(0xb11cd855, 0xf4c4, 0x4fc6, 0xb7, 0x10, 0x44, 0x22, 0x23, 0x7f, 0x09, 0xe9);
			
			public function HRESULT(IX509EndorsementKey *self, BSTR* pValue) get_ProviderName;
			public function HRESULT(IX509EndorsementKey *self, BSTR Value) put_ProviderName;
			public function HRESULT(IX509EndorsementKey *self, int32* pValue) get_Length;
			public function HRESULT(IX509EndorsementKey *self, int16* pValue) get_Opened;
			public function HRESULT(IX509EndorsementKey *self, EncodingType Encoding, BSTR strCertificate) AddCertificate;
			public function HRESULT(IX509EndorsementKey *self, EncodingType Encoding, BSTR strCertificate) RemoveCertificate;
			public function HRESULT(IX509EndorsementKey *self, int16 ManufacturerOnly, int32 dwIndex, EncodingType Encoding, BSTR* pValue) GetCertificateByIndex;
			public function HRESULT(IX509EndorsementKey *self, int16 ManufacturerOnly, int32* pCount) GetCertificateCount;
			public function HRESULT(IX509EndorsementKey *self, IX509PublicKey** ppPublicKey) ExportPublicKey;
			public function HRESULT(IX509EndorsementKey *self) Open;
			public function HRESULT(IX509EndorsementKey *self) Close;
		}
		[CRepr]
		public struct IX509Extension : IDispatch
		{
			public const new Guid IID = .(0x728ab30d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509Extension *self, IObjectId* pObjectId, EncodingType Encoding, BSTR strEncodedData) Initialize;
			public function HRESULT(IX509Extension *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(IX509Extension *self, EncodingType Encoding, BSTR* pValue) get_RawData;
			public function HRESULT(IX509Extension *self, int16* pValue) get_Critical;
			public function HRESULT(IX509Extension *self, int16 Value) put_Critical;
		}
		[CRepr]
		public struct IX509Extensions : IDispatch
		{
			public const new Guid IID = .(0x728ab30e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509Extensions *self, int32 Index, IX509Extension** pVal) get_ItemByIndex;
			public function HRESULT(IX509Extensions *self, int32* pVal) get_Count;
			public function HRESULT(IX509Extensions *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IX509Extensions *self, IX509Extension* pVal) Add;
			public function HRESULT(IX509Extensions *self, int32 Index) Remove;
			public function HRESULT(IX509Extensions *self) Clear;
			public function HRESULT(IX509Extensions *self, IObjectId* pObjectId, int32* pIndex) get_IndexByObjectId;
			public function HRESULT(IX509Extensions *self, IX509Extensions* pValue) AddRange;
		}
		[CRepr]
		public struct IX509ExtensionKeyUsage : IX509Extension
		{
			public const new Guid IID = .(0x728ab30f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionKeyUsage *self, X509KeyUsageFlags UsageFlags) InitializeEncode;
			public function HRESULT(IX509ExtensionKeyUsage *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionKeyUsage *self, X509KeyUsageFlags* pValue) get_KeyUsage;
		}
		[CRepr]
		public struct IX509ExtensionEnhancedKeyUsage : IX509Extension
		{
			public const new Guid IID = .(0x728ab310, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionEnhancedKeyUsage *self, IObjectIds* pValue) InitializeEncode;
			public function HRESULT(IX509ExtensionEnhancedKeyUsage *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionEnhancedKeyUsage *self, IObjectIds** ppValue) get_EnhancedKeyUsage;
		}
		[CRepr]
		public struct IX509ExtensionTemplateName : IX509Extension
		{
			public const new Guid IID = .(0x728ab311, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionTemplateName *self, BSTR strTemplateName) InitializeEncode;
			public function HRESULT(IX509ExtensionTemplateName *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionTemplateName *self, BSTR* pValue) get_TemplateName;
		}
		[CRepr]
		public struct IX509ExtensionTemplate : IX509Extension
		{
			public const new Guid IID = .(0x728ab312, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionTemplate *self, IObjectId* pTemplateOid, int32 MajorVersion, int32 MinorVersion) InitializeEncode;
			public function HRESULT(IX509ExtensionTemplate *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionTemplate *self, IObjectId** ppValue) get_TemplateOid;
			public function HRESULT(IX509ExtensionTemplate *self, int32* pValue) get_MajorVersion;
			public function HRESULT(IX509ExtensionTemplate *self, int32* pValue) get_MinorVersion;
		}
		[CRepr]
		public struct IAlternativeName : IDispatch
		{
			public const new Guid IID = .(0x728ab313, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IAlternativeName *self, AlternativeNameType Type, BSTR strValue) InitializeFromString;
			public function HRESULT(IAlternativeName *self, AlternativeNameType Type, EncodingType Encoding, BSTR strRawData) InitializeFromRawData;
			public function HRESULT(IAlternativeName *self, IObjectId* pObjectId, EncodingType Encoding, BSTR strRawData, int16 ToBeWrapped) InitializeFromOtherName;
			public function HRESULT(IAlternativeName *self, AlternativeNameType* pValue) get_Type;
			public function HRESULT(IAlternativeName *self, BSTR* pValue) get_StrValue;
			public function HRESULT(IAlternativeName *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(IAlternativeName *self, EncodingType Encoding, BSTR* pValue) get_RawData;
		}
		[CRepr]
		public struct IAlternativeNames : IDispatch
		{
			public const new Guid IID = .(0x728ab314, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IAlternativeNames *self, int32 Index, IAlternativeName** pVal) get_ItemByIndex;
			public function HRESULT(IAlternativeNames *self, int32* pVal) get_Count;
			public function HRESULT(IAlternativeNames *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IAlternativeNames *self, IAlternativeName* pVal) Add;
			public function HRESULT(IAlternativeNames *self, int32 Index) Remove;
			public function HRESULT(IAlternativeNames *self) Clear;
		}
		[CRepr]
		public struct IX509ExtensionAlternativeNames : IX509Extension
		{
			public const new Guid IID = .(0x728ab315, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionAlternativeNames *self, IAlternativeNames* pValue) InitializeEncode;
			public function HRESULT(IX509ExtensionAlternativeNames *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionAlternativeNames *self, IAlternativeNames** ppValue) get_AlternativeNames;
		}
		[CRepr]
		public struct IX509ExtensionBasicConstraints : IX509Extension
		{
			public const new Guid IID = .(0x728ab316, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionBasicConstraints *self, int16 IsCA, int32 PathLenConstraint) InitializeEncode;
			public function HRESULT(IX509ExtensionBasicConstraints *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionBasicConstraints *self, int16* pValue) get_IsCA;
			public function HRESULT(IX509ExtensionBasicConstraints *self, int32* pValue) get_PathLenConstraint;
		}
		[CRepr]
		public struct IX509ExtensionSubjectKeyIdentifier : IX509Extension
		{
			public const new Guid IID = .(0x728ab317, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionSubjectKeyIdentifier *self, EncodingType Encoding, BSTR strKeyIdentifier) InitializeEncode;
			public function HRESULT(IX509ExtensionSubjectKeyIdentifier *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionSubjectKeyIdentifier *self, EncodingType Encoding, BSTR* pValue) get_SubjectKeyIdentifier;
		}
		[CRepr]
		public struct IX509ExtensionAuthorityKeyIdentifier : IX509Extension
		{
			public const new Guid IID = .(0x728ab318, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionAuthorityKeyIdentifier *self, EncodingType Encoding, BSTR strKeyIdentifier) InitializeEncode;
			public function HRESULT(IX509ExtensionAuthorityKeyIdentifier *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionAuthorityKeyIdentifier *self, EncodingType Encoding, BSTR* pValue) get_AuthorityKeyIdentifier;
		}
		[CRepr]
		public struct ISmimeCapability : IDispatch
		{
			public const new Guid IID = .(0x728ab319, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ISmimeCapability *self, IObjectId* pObjectId, int32 BitCount) Initialize;
			public function HRESULT(ISmimeCapability *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(ISmimeCapability *self, int32* pValue) get_BitCount;
		}
		[CRepr]
		public struct ISmimeCapabilities : IDispatch
		{
			public const new Guid IID = .(0x728ab31a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ISmimeCapabilities *self, int32 Index, ISmimeCapability** pVal) get_ItemByIndex;
			public function HRESULT(ISmimeCapabilities *self, int32* pVal) get_Count;
			public function HRESULT(ISmimeCapabilities *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ISmimeCapabilities *self, ISmimeCapability* pVal) Add;
			public function HRESULT(ISmimeCapabilities *self, int32 Index) Remove;
			public function HRESULT(ISmimeCapabilities *self) Clear;
			public function HRESULT(ISmimeCapabilities *self, ICspInformation* pValue) AddFromCsp;
			public function HRESULT(ISmimeCapabilities *self, int16 MachineContext) AddAvailableSmimeCapabilities;
		}
		[CRepr]
		public struct IX509ExtensionSmimeCapabilities : IX509Extension
		{
			public const new Guid IID = .(0x728ab31b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionSmimeCapabilities *self, ISmimeCapabilities* pValue) InitializeEncode;
			public function HRESULT(IX509ExtensionSmimeCapabilities *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionSmimeCapabilities *self, ISmimeCapabilities** ppValue) get_SmimeCapabilities;
		}
		[CRepr]
		public struct IPolicyQualifier : IDispatch
		{
			public const new Guid IID = .(0x728ab31c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IPolicyQualifier *self, BSTR strQualifier, PolicyQualifierType Type) InitializeEncode;
			public function HRESULT(IPolicyQualifier *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(IPolicyQualifier *self, BSTR* pValue) get_Qualifier;
			public function HRESULT(IPolicyQualifier *self, PolicyQualifierType* pValue) get_Type;
			public function HRESULT(IPolicyQualifier *self, EncodingType Encoding, BSTR* pValue) get_RawData;
		}
		[CRepr]
		public struct IPolicyQualifiers : IDispatch
		{
			public const new Guid IID = .(0x728ab31d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IPolicyQualifiers *self, int32 Index, IPolicyQualifier** pVal) get_ItemByIndex;
			public function HRESULT(IPolicyQualifiers *self, int32* pVal) get_Count;
			public function HRESULT(IPolicyQualifiers *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IPolicyQualifiers *self, IPolicyQualifier* pVal) Add;
			public function HRESULT(IPolicyQualifiers *self, int32 Index) Remove;
			public function HRESULT(IPolicyQualifiers *self) Clear;
		}
		[CRepr]
		public struct ICertificatePolicy : IDispatch
		{
			public const new Guid IID = .(0x728ab31e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertificatePolicy *self, IObjectId* pValue) Initialize;
			public function HRESULT(ICertificatePolicy *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(ICertificatePolicy *self, IPolicyQualifiers** ppValue) get_PolicyQualifiers;
		}
		[CRepr]
		public struct ICertificatePolicies : IDispatch
		{
			public const new Guid IID = .(0x728ab31f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertificatePolicies *self, int32 Index, ICertificatePolicy** pVal) get_ItemByIndex;
			public function HRESULT(ICertificatePolicies *self, int32* pVal) get_Count;
			public function HRESULT(ICertificatePolicies *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICertificatePolicies *self, ICertificatePolicy* pVal) Add;
			public function HRESULT(ICertificatePolicies *self, int32 Index) Remove;
			public function HRESULT(ICertificatePolicies *self) Clear;
		}
		[CRepr]
		public struct IX509ExtensionCertificatePolicies : IX509Extension
		{
			public const new Guid IID = .(0x728ab320, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionCertificatePolicies *self, ICertificatePolicies* pValue) InitializeEncode;
			public function HRESULT(IX509ExtensionCertificatePolicies *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionCertificatePolicies *self, ICertificatePolicies** ppValue) get_Policies;
		}
		[CRepr]
		public struct IX509ExtensionMSApplicationPolicies : IX509Extension
		{
			public const new Guid IID = .(0x728ab321, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509ExtensionMSApplicationPolicies *self, ICertificatePolicies* pValue) InitializeEncode;
			public function HRESULT(IX509ExtensionMSApplicationPolicies *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509ExtensionMSApplicationPolicies *self, ICertificatePolicies** ppValue) get_Policies;
		}
		[CRepr]
		public struct IX509Attribute : IDispatch
		{
			public const new Guid IID = .(0x728ab322, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509Attribute *self, IObjectId* pObjectId, EncodingType Encoding, BSTR strEncodedData) Initialize;
			public function HRESULT(IX509Attribute *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(IX509Attribute *self, EncodingType Encoding, BSTR* pValue) get_RawData;
		}
		[CRepr]
		public struct IX509Attributes : IDispatch
		{
			public const new Guid IID = .(0x728ab323, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509Attributes *self, int32 Index, IX509Attribute** pVal) get_ItemByIndex;
			public function HRESULT(IX509Attributes *self, int32* pVal) get_Count;
			public function HRESULT(IX509Attributes *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IX509Attributes *self, IX509Attribute* pVal) Add;
			public function HRESULT(IX509Attributes *self, int32 Index) Remove;
			public function HRESULT(IX509Attributes *self) Clear;
		}
		[CRepr]
		public struct IX509AttributeExtensions : IX509Attribute
		{
			public const new Guid IID = .(0x728ab324, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeExtensions *self, IX509Extensions* pExtensions) InitializeEncode;
			public function HRESULT(IX509AttributeExtensions *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeExtensions *self, IX509Extensions** ppValue) get_X509Extensions;
		}
		[CRepr]
		public struct IX509AttributeClientId : IX509Attribute
		{
			public const new Guid IID = .(0x728ab325, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeClientId *self, RequestClientInfoClientId ClientId, BSTR strMachineDnsName, BSTR strUserSamName, BSTR strProcessName) InitializeEncode;
			public function HRESULT(IX509AttributeClientId *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeClientId *self, RequestClientInfoClientId* pValue) get_ClientId;
			public function HRESULT(IX509AttributeClientId *self, BSTR* pValue) get_MachineDnsName;
			public function HRESULT(IX509AttributeClientId *self, BSTR* pValue) get_UserSamName;
			public function HRESULT(IX509AttributeClientId *self, BSTR* pValue) get_ProcessName;
		}
		[CRepr]
		public struct IX509AttributeRenewalCertificate : IX509Attribute
		{
			public const new Guid IID = .(0x728ab326, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeRenewalCertificate *self, EncodingType Encoding, BSTR strCert) InitializeEncode;
			public function HRESULT(IX509AttributeRenewalCertificate *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeRenewalCertificate *self, EncodingType Encoding, BSTR* pValue) get_RenewalCertificate;
		}
		[CRepr]
		public struct IX509AttributeArchiveKey : IX509Attribute
		{
			public const new Guid IID = .(0x728ab327, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeArchiveKey *self, IX509PrivateKey* pKey, EncodingType Encoding, BSTR strCAXCert, IObjectId* pAlgorithm, int32 EncryptionStrength) InitializeEncode;
			public function HRESULT(IX509AttributeArchiveKey *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeArchiveKey *self, EncodingType Encoding, BSTR* pValue) get_EncryptedKeyBlob;
			public function HRESULT(IX509AttributeArchiveKey *self, IObjectId** ppValue) get_EncryptionAlgorithm;
			public function HRESULT(IX509AttributeArchiveKey *self, int32* pValue) get_EncryptionStrength;
		}
		[CRepr]
		public struct IX509AttributeArchiveKeyHash : IX509Attribute
		{
			public const new Guid IID = .(0x728ab328, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeArchiveKeyHash *self, EncodingType Encoding, BSTR strEncryptedKeyBlob) InitializeEncodeFromEncryptedKeyBlob;
			public function HRESULT(IX509AttributeArchiveKeyHash *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeArchiveKeyHash *self, EncodingType Encoding, BSTR* pValue) get_EncryptedKeyHashBlob;
		}
		[CRepr]
		public struct IX509AttributeOSVersion : IX509Attribute
		{
			public const new Guid IID = .(0x728ab32a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeOSVersion *self, BSTR strOSVersion) InitializeEncode;
			public function HRESULT(IX509AttributeOSVersion *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeOSVersion *self, BSTR* pValue) get_OSVersion;
		}
		[CRepr]
		public struct IX509AttributeCspProvider : IX509Attribute
		{
			public const new Guid IID = .(0x728ab32b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509AttributeCspProvider *self, X509KeySpec KeySpec, BSTR strProviderName, EncodingType Encoding, BSTR strSignature) InitializeEncode;
			public function HRESULT(IX509AttributeCspProvider *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(IX509AttributeCspProvider *self, X509KeySpec* pValue) get_KeySpec;
			public function HRESULT(IX509AttributeCspProvider *self, BSTR* pValue) get_ProviderName;
			public function HRESULT(IX509AttributeCspProvider *self, EncodingType Encoding, BSTR* pValue) get_Signature;
		}
		[CRepr]
		public struct ICryptAttribute : IDispatch
		{
			public const new Guid IID = .(0x728ab32c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICryptAttribute *self, IObjectId* pObjectId) InitializeFromObjectId;
			public function HRESULT(ICryptAttribute *self, IX509Attributes* pAttributes) InitializeFromValues;
			public function HRESULT(ICryptAttribute *self, IObjectId** ppValue) get_ObjectId;
			public function HRESULT(ICryptAttribute *self, IX509Attributes** ppValue) get_Values;
		}
		[CRepr]
		public struct ICryptAttributes : IDispatch
		{
			public const new Guid IID = .(0x728ab32d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICryptAttributes *self, int32 Index, ICryptAttribute** pVal) get_ItemByIndex;
			public function HRESULT(ICryptAttributes *self, int32* pVal) get_Count;
			public function HRESULT(ICryptAttributes *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICryptAttributes *self, ICryptAttribute* pVal) Add;
			public function HRESULT(ICryptAttributes *self, int32 Index) Remove;
			public function HRESULT(ICryptAttributes *self) Clear;
			public function HRESULT(ICryptAttributes *self, IObjectId* pObjectId, int32* pIndex) get_IndexByObjectId;
			public function HRESULT(ICryptAttributes *self, ICryptAttributes* pValue) AddRange;
		}
		[CRepr]
		public struct ICertProperty : IDispatch
		{
			public const new Guid IID = .(0x728ab32e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertProperty *self, int16 MachineContext, EncodingType Encoding, BSTR strCertificate) InitializeFromCertificate;
			public function HRESULT(ICertProperty *self, EncodingType Encoding, BSTR strEncodedData) InitializeDecode;
			public function HRESULT(ICertProperty *self, CERTENROLL_PROPERTYID* pValue) get_PropertyId;
			public function HRESULT(ICertProperty *self, CERTENROLL_PROPERTYID Value) put_PropertyId;
			public function HRESULT(ICertProperty *self, EncodingType Encoding, BSTR* pValue) get_RawData;
			public function HRESULT(ICertProperty *self, int16 MachineContext, EncodingType Encoding, BSTR strCertificate) RemoveFromCertificate;
			public function HRESULT(ICertProperty *self, int16 MachineContext, EncodingType Encoding, BSTR strCertificate) SetValueOnCertificate;
		}
		[CRepr]
		public struct ICertProperties : IDispatch
		{
			public const new Guid IID = .(0x728ab32f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertProperties *self, int32 Index, ICertProperty** pVal) get_ItemByIndex;
			public function HRESULT(ICertProperties *self, int32* pVal) get_Count;
			public function HRESULT(ICertProperties *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICertProperties *self, ICertProperty* pVal) Add;
			public function HRESULT(ICertProperties *self, int32 Index) Remove;
			public function HRESULT(ICertProperties *self) Clear;
			public function HRESULT(ICertProperties *self, int16 MachineContext, EncodingType Encoding, BSTR strCertificate) InitializeFromCertificate;
		}
		[CRepr]
		public struct ICertPropertyFriendlyName : ICertProperty
		{
			public const new Guid IID = .(0x728ab330, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyFriendlyName *self, BSTR strFriendlyName) Initialize;
			public function HRESULT(ICertPropertyFriendlyName *self, BSTR* pValue) get_FriendlyName;
		}
		[CRepr]
		public struct ICertPropertyDescription : ICertProperty
		{
			public const new Guid IID = .(0x728ab331, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyDescription *self, BSTR strDescription) Initialize;
			public function HRESULT(ICertPropertyDescription *self, BSTR* pValue) get_Description;
		}
		[CRepr]
		public struct ICertPropertyAutoEnroll : ICertProperty
		{
			public const new Guid IID = .(0x728ab332, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyAutoEnroll *self, BSTR strTemplateName) Initialize;
			public function HRESULT(ICertPropertyAutoEnroll *self, BSTR* pValue) get_TemplateName;
		}
		[CRepr]
		public struct ICertPropertyRequestOriginator : ICertProperty
		{
			public const new Guid IID = .(0x728ab333, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyRequestOriginator *self, BSTR strRequestOriginator) Initialize;
			public function HRESULT(ICertPropertyRequestOriginator *self) InitializeFromLocalRequestOriginator;
			public function HRESULT(ICertPropertyRequestOriginator *self, BSTR* pValue) get_RequestOriginator;
		}
		[CRepr]
		public struct ICertPropertySHA1Hash : ICertProperty
		{
			public const new Guid IID = .(0x728ab334, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertySHA1Hash *self, EncodingType Encoding, BSTR strRenewalValue) Initialize;
			public function HRESULT(ICertPropertySHA1Hash *self, EncodingType Encoding, BSTR* pValue) get_SHA1Hash;
		}
		[CRepr]
		public struct ICertPropertyKeyProvInfo : ICertProperty
		{
			public const new Guid IID = .(0x728ab336, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyKeyProvInfo *self, IX509PrivateKey* pValue) Initialize;
			public function HRESULT(ICertPropertyKeyProvInfo *self, IX509PrivateKey** ppValue) get_PrivateKey;
		}
		[CRepr]
		public struct ICertPropertyArchived : ICertProperty
		{
			public const new Guid IID = .(0x728ab337, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyArchived *self, int16 ArchivedValue) Initialize;
			public function HRESULT(ICertPropertyArchived *self, int16* pValue) get_Archived;
		}
		[CRepr]
		public struct ICertPropertyBackedUp : ICertProperty
		{
			public const new Guid IID = .(0x728ab338, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyBackedUp *self, int16 BackedUpValue) InitializeFromCurrentTime;
			public function HRESULT(ICertPropertyBackedUp *self, int16 BackedUpValue, double Date) Initialize;
			public function HRESULT(ICertPropertyBackedUp *self, int16* pValue) get_BackedUpValue;
			public function HRESULT(ICertPropertyBackedUp *self, double* pDate) get_BackedUpTime;
		}
		[CRepr]
		public struct ICertPropertyEnrollment : ICertProperty
		{
			public const new Guid IID = .(0x728ab339, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyEnrollment *self, int32 RequestId, BSTR strCADnsName, BSTR strCAName, BSTR strFriendlyName) Initialize;
			public function HRESULT(ICertPropertyEnrollment *self, int32* pValue) get_RequestId;
			public function HRESULT(ICertPropertyEnrollment *self, BSTR* pValue) get_CADnsName;
			public function HRESULT(ICertPropertyEnrollment *self, BSTR* pValue) get_CAName;
			public function HRESULT(ICertPropertyEnrollment *self, BSTR* pValue) get_FriendlyName;
		}
		[CRepr]
		public struct ICertPropertyRenewal : ICertProperty
		{
			public const new Guid IID = .(0x728ab33a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyRenewal *self, EncodingType Encoding, BSTR strRenewalValue) Initialize;
			public function HRESULT(ICertPropertyRenewal *self, int16 MachineContext, EncodingType Encoding, BSTR strCertificate) InitializeFromCertificateHash;
			public function HRESULT(ICertPropertyRenewal *self, EncodingType Encoding, BSTR* pValue) get_Renewal;
		}
		[CRepr]
		public struct ICertPropertyArchivedKeyHash : ICertProperty
		{
			public const new Guid IID = .(0x728ab33b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyArchivedKeyHash *self, EncodingType Encoding, BSTR strArchivedKeyHashValue) Initialize;
			public function HRESULT(ICertPropertyArchivedKeyHash *self, EncodingType Encoding, BSTR* pValue) get_ArchivedKeyHash;
		}
		[CRepr]
		public struct ICertPropertyEnrollmentPolicyServer : ICertProperty
		{
			public const new Guid IID = .(0x728ab34a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, EnrollmentPolicyServerPropertyFlags PropertyFlags, X509EnrollmentAuthFlags AuthFlags, X509EnrollmentAuthFlags EnrollmentServerAuthFlags, PolicyServerUrlFlags UrlFlags, BSTR strRequestId, BSTR strUrl, BSTR strId, BSTR strEnrollmentServerUrl) Initialize;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, BSTR* pValue) GetPolicyServerUrl;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, BSTR* pValue) GetPolicyServerId;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, BSTR* pValue) GetEnrollmentServerUrl;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, BSTR* pValue) GetRequestIdString;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, EnrollmentPolicyServerPropertyFlags* pValue) GetPropertyFlags;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, PolicyServerUrlFlags* pValue) GetUrlFlags;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, X509EnrollmentAuthFlags* pValue) GetAuthentication;
			public function HRESULT(ICertPropertyEnrollmentPolicyServer *self, X509EnrollmentAuthFlags* pValue) GetEnrollmentServerAuthentication;
		}
		[CRepr]
		public struct IX509SignatureInformation : IDispatch
		{
			public const new Guid IID = .(0x728ab33c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509SignatureInformation *self, IObjectId** ppValue) get_HashAlgorithm;
			public function HRESULT(IX509SignatureInformation *self, IObjectId* pValue) put_HashAlgorithm;
			public function HRESULT(IX509SignatureInformation *self, IObjectId** ppValue) get_PublicKeyAlgorithm;
			public function HRESULT(IX509SignatureInformation *self, IObjectId* pValue) put_PublicKeyAlgorithm;
			public function HRESULT(IX509SignatureInformation *self, EncodingType Encoding, BSTR* pValue) get_Parameters;
			public function HRESULT(IX509SignatureInformation *self, EncodingType Encoding, BSTR Value) put_Parameters;
			public function HRESULT(IX509SignatureInformation *self, int16* pValue) get_AlternateSignatureAlgorithm;
			public function HRESULT(IX509SignatureInformation *self, int16 Value) put_AlternateSignatureAlgorithm;
			public function HRESULT(IX509SignatureInformation *self, int16* pValue) get_AlternateSignatureAlgorithmSet;
			public function HRESULT(IX509SignatureInformation *self, int16* pValue) get_NullSigned;
			public function HRESULT(IX509SignatureInformation *self, int16 Value) put_NullSigned;
			public function HRESULT(IX509SignatureInformation *self, int16 Pkcs7Signature, int16 SignatureKey, IObjectId** ppValue) GetSignatureAlgorithm;
			public function HRESULT(IX509SignatureInformation *self) SetDefaultValues;
		}
		[CRepr]
		public struct ISignerCertificate : IDispatch
		{
			public const new Guid IID = .(0x728ab33d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ISignerCertificate *self, int16 MachineContext, X509PrivateKeyVerify VerifyType, EncodingType Encoding, BSTR strCertificate) Initialize;
			public function HRESULT(ISignerCertificate *self, EncodingType Encoding, BSTR* pValue) get_Certificate;
			public function HRESULT(ISignerCertificate *self, IX509PrivateKey** ppValue) get_PrivateKey;
			public function HRESULT(ISignerCertificate *self, int16* pValue) get_Silent;
			public function HRESULT(ISignerCertificate *self, int16 Value) put_Silent;
			public function HRESULT(ISignerCertificate *self, int32* pValue) get_ParentWindow;
			public function HRESULT(ISignerCertificate *self, int32 Value) put_ParentWindow;
			public function HRESULT(ISignerCertificate *self, BSTR* pValue) get_UIContextMessage;
			public function HRESULT(ISignerCertificate *self, BSTR Value) put_UIContextMessage;
			public function HRESULT(ISignerCertificate *self, BSTR Value) put_Pin;
			public function HRESULT(ISignerCertificate *self, IX509SignatureInformation** ppValue) get_SignatureInformation;
		}
		[CRepr]
		public struct ISignerCertificates : IDispatch
		{
			public const new Guid IID = .(0x728ab33e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ISignerCertificates *self, int32 Index, ISignerCertificate** pVal) get_ItemByIndex;
			public function HRESULT(ISignerCertificates *self, int32* pVal) get_Count;
			public function HRESULT(ISignerCertificates *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ISignerCertificates *self, ISignerCertificate* pVal) Add;
			public function HRESULT(ISignerCertificates *self, int32 Index) Remove;
			public function HRESULT(ISignerCertificates *self) Clear;
			public function HRESULT(ISignerCertificates *self, ISignerCertificate* pSignerCert, int32* piSignerCert) Find;
		}
		[CRepr]
		public struct IX509NameValuePair : IDispatch
		{
			public const new Guid IID = .(0x728ab33f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509NameValuePair *self, BSTR strName, BSTR strValue) Initialize;
			public function HRESULT(IX509NameValuePair *self, BSTR* pValue) get_Value;
			public function HRESULT(IX509NameValuePair *self, BSTR* pValue) get_Name;
		}
		[CRepr]
		public struct IX509NameValuePairs : IDispatch
		{
			public const new Guid IID = .(0x728ab340, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509NameValuePairs *self, int32 Index, IX509NameValuePair** pVal) get_ItemByIndex;
			public function HRESULT(IX509NameValuePairs *self, int32* pVal) get_Count;
			public function HRESULT(IX509NameValuePairs *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IX509NameValuePairs *self, IX509NameValuePair* pVal) Add;
			public function HRESULT(IX509NameValuePairs *self, int32 Index) Remove;
			public function HRESULT(IX509NameValuePairs *self) Clear;
		}
		[CRepr]
		public struct IX509CertificateTemplate : IDispatch
		{
			public const new Guid IID = .(0x54244a13, 0x555a, 0x4e22, 0x89, 0x6d, 0x1b, 0x0e, 0x52, 0xf7, 0x64, 0x06);
			
			public function HRESULT(IX509CertificateTemplate *self, EnrollmentTemplateProperty property, VARIANT* pValue) get_Property;
		}
		[CRepr]
		public struct IX509CertificateTemplates : IDispatch
		{
			public const new Guid IID = .(0x13b79003, 0x2181, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateTemplates *self, int32 Index, IX509CertificateTemplate** pVal) get_ItemByIndex;
			public function HRESULT(IX509CertificateTemplates *self, int32* pVal) get_Count;
			public function HRESULT(IX509CertificateTemplates *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IX509CertificateTemplates *self, IX509CertificateTemplate* pVal) Add;
			public function HRESULT(IX509CertificateTemplates *self, int32 Index) Remove;
			public function HRESULT(IX509CertificateTemplates *self) Clear;
			public function HRESULT(IX509CertificateTemplates *self, BSTR bstrName, IX509CertificateTemplate** ppValue) get_ItemByName;
			public function HRESULT(IX509CertificateTemplates *self, IObjectId* pOid, IX509CertificateTemplate** ppValue) get_ItemByOid;
		}
		[CRepr]
		public struct IX509CertificateTemplateWritable : IDispatch
		{
			public const new Guid IID = .(0xf49466a7, 0x395a, 0x4e9e, 0xb6, 0xe7, 0x32, 0xb3, 0x31, 0x60, 0x0d, 0xc0);
			
			public function HRESULT(IX509CertificateTemplateWritable *self, IX509CertificateTemplate* pValue) Initialize;
			public function HRESULT(IX509CertificateTemplateWritable *self, CommitTemplateFlags commitFlags, BSTR strServerContext) Commit;
			public function HRESULT(IX509CertificateTemplateWritable *self, EnrollmentTemplateProperty property, VARIANT* pValue) get_Property;
			public function HRESULT(IX509CertificateTemplateWritable *self, EnrollmentTemplateProperty property, VARIANT value) put_Property;
			public function HRESULT(IX509CertificateTemplateWritable *self, IX509CertificateTemplate** ppValue) get_Template;
		}
		[CRepr]
		public struct ICertificationAuthority : IDispatch
		{
			public const new Guid IID = .(0x835d1f61, 0x1e95, 0x4bc8, 0xb4, 0xd3, 0x97, 0x6c, 0x42, 0xb9, 0x68, 0xf7);
			
			public function HRESULT(ICertificationAuthority *self, EnrollmentCAProperty property, VARIANT* pValue) get_Property;
		}
		[CRepr]
		public struct ICertificationAuthorities : IDispatch
		{
			public const new Guid IID = .(0x13b79005, 0x2181, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(ICertificationAuthorities *self, int32 Index, ICertificationAuthority** pVal) get_ItemByIndex;
			public function HRESULT(ICertificationAuthorities *self, int32* pVal) get_Count;
			public function HRESULT(ICertificationAuthorities *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(ICertificationAuthorities *self, ICertificationAuthority* pVal) Add;
			public function HRESULT(ICertificationAuthorities *self, int32 Index) Remove;
			public function HRESULT(ICertificationAuthorities *self) Clear;
			public function HRESULT(ICertificationAuthorities *self) ComputeSiteCosts;
			public function HRESULT(ICertificationAuthorities *self, BSTR strName, ICertificationAuthority** ppValue) get_ItemByName;
		}
		[CRepr]
		public struct IX509EnrollmentPolicyServer : IDispatch
		{
			public const new Guid IID = .(0x13b79026, 0x2181, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509EnrollmentPolicyServer *self, BSTR bstrPolicyServerUrl, BSTR bstrPolicyServerId, X509EnrollmentAuthFlags authFlags, int16 fIsUnTrusted, X509CertificateEnrollmentContext context) Initialize;
			public function HRESULT(IX509EnrollmentPolicyServer *self, X509EnrollmentPolicyLoadOption option) LoadPolicy;
			public function HRESULT(IX509EnrollmentPolicyServer *self, IX509CertificateTemplates** pTemplates) GetTemplates;
			public function HRESULT(IX509EnrollmentPolicyServer *self, IX509CertificateTemplate* pTemplate, ICertificationAuthorities** ppCAs) GetCAsForTemplate;
			public function HRESULT(IX509EnrollmentPolicyServer *self, ICertificationAuthorities** ppCAs) GetCAs;
			public function HRESULT(IX509EnrollmentPolicyServer *self) Validate;
			public function HRESULT(IX509EnrollmentPolicyServer *self, IObjectIds** ppObjectIds) GetCustomOids;
			public function HRESULT(IX509EnrollmentPolicyServer *self, double* pDate) GetNextUpdateTime;
			public function HRESULT(IX509EnrollmentPolicyServer *self, double* pDate) GetLastUpdateTime;
			public function HRESULT(IX509EnrollmentPolicyServer *self, BSTR* pValue) GetPolicyServerUrl;
			public function HRESULT(IX509EnrollmentPolicyServer *self, BSTR* pValue) GetPolicyServerId;
			public function HRESULT(IX509EnrollmentPolicyServer *self, BSTR* pValue) GetFriendlyName;
			public function HRESULT(IX509EnrollmentPolicyServer *self, int16* pValue) GetIsDefaultCEP;
			public function HRESULT(IX509EnrollmentPolicyServer *self, int16* pValue) GetUseClientId;
			public function HRESULT(IX509EnrollmentPolicyServer *self, int16* pValue) GetAllowUnTrustedCA;
			public function HRESULT(IX509EnrollmentPolicyServer *self, BSTR* pValue) GetCachePath;
			public function HRESULT(IX509EnrollmentPolicyServer *self, BSTR* pValue) GetCacheDir;
			public function HRESULT(IX509EnrollmentPolicyServer *self, X509EnrollmentAuthFlags* pValue) GetAuthFlags;
			public function HRESULT(IX509EnrollmentPolicyServer *self, int32 hWndParent, X509EnrollmentAuthFlags flag, BSTR strCredential, BSTR strPassword) SetCredential;
			public function HRESULT(IX509EnrollmentPolicyServer *self, int16* pValue) QueryChanges;
			public function HRESULT(IX509EnrollmentPolicyServer *self, VARIANT val) InitializeImport;
			public function HRESULT(IX509EnrollmentPolicyServer *self, X509EnrollmentPolicyExportFlags exportFlags, VARIANT* pVal) Export;
			public function HRESULT(IX509EnrollmentPolicyServer *self, uint32* pValue) get_Cost;
			public function HRESULT(IX509EnrollmentPolicyServer *self, uint32 value) put_Cost;
		}
		[CRepr]
		public struct IX509PolicyServerUrl : IDispatch
		{
			public const new Guid IID = .(0x884e204a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509PolicyServerUrl *self, X509CertificateEnrollmentContext context) Initialize;
			public function HRESULT(IX509PolicyServerUrl *self, BSTR* ppValue) get_Url;
			public function HRESULT(IX509PolicyServerUrl *self, BSTR pValue) put_Url;
			public function HRESULT(IX509PolicyServerUrl *self, int16* pValue) get_Default;
			public function HRESULT(IX509PolicyServerUrl *self, int16 value) put_Default;
			public function HRESULT(IX509PolicyServerUrl *self, PolicyServerUrlFlags* pValue) get_Flags;
			public function HRESULT(IX509PolicyServerUrl *self, PolicyServerUrlFlags Flags) put_Flags;
			public function HRESULT(IX509PolicyServerUrl *self, X509EnrollmentAuthFlags* pValue) get_AuthFlags;
			public function HRESULT(IX509PolicyServerUrl *self, X509EnrollmentAuthFlags Flags) put_AuthFlags;
			public function HRESULT(IX509PolicyServerUrl *self, uint32* pValue) get_Cost;
			public function HRESULT(IX509PolicyServerUrl *self, uint32 value) put_Cost;
			public function HRESULT(IX509PolicyServerUrl *self, PolicyServerUrlPropertyID propertyId, BSTR* ppValue) GetStringProperty;
			public function HRESULT(IX509PolicyServerUrl *self, PolicyServerUrlPropertyID propertyId, BSTR pValue) SetStringProperty;
			public function HRESULT(IX509PolicyServerUrl *self, X509CertificateEnrollmentContext context) UpdateRegistry;
			public function HRESULT(IX509PolicyServerUrl *self, X509CertificateEnrollmentContext context) RemoveFromRegistry;
		}
		[CRepr]
		public struct IX509PolicyServerListManager : IDispatch
		{
			public const new Guid IID = .(0x884e204b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509PolicyServerListManager *self, int32 Index, IX509PolicyServerUrl** pVal) get_ItemByIndex;
			public function HRESULT(IX509PolicyServerListManager *self, int32* pVal) get_Count;
			public function HRESULT(IX509PolicyServerListManager *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IX509PolicyServerListManager *self, IX509PolicyServerUrl* pVal) Add;
			public function HRESULT(IX509PolicyServerListManager *self, int32 Index) Remove;
			public function HRESULT(IX509PolicyServerListManager *self) Clear;
			public function HRESULT(IX509PolicyServerListManager *self, X509CertificateEnrollmentContext context, PolicyServerUrlFlags Flags) Initialize;
		}
		[CRepr]
		public struct IX509CertificateRequest : IDispatch
		{
			public const new Guid IID = .(0x728ab341, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequest *self, X509CertificateEnrollmentContext Context) Initialize;
			public function HRESULT(IX509CertificateRequest *self) Encode;
			public function HRESULT(IX509CertificateRequest *self) ResetForEncode;
			public function HRESULT(IX509CertificateRequest *self, InnerRequestLevel Level, IX509CertificateRequest** ppValue) GetInnerRequest;
			public function HRESULT(IX509CertificateRequest *self, X509RequestType* pValue) get_Type;
			public function HRESULT(IX509CertificateRequest *self, X509CertificateEnrollmentContext* pValue) get_EnrollmentContext;
			public function HRESULT(IX509CertificateRequest *self, int16* pValue) get_Silent;
			public function HRESULT(IX509CertificateRequest *self, int16 Value) put_Silent;
			public function HRESULT(IX509CertificateRequest *self, int32* pValue) get_ParentWindow;
			public function HRESULT(IX509CertificateRequest *self, int32 Value) put_ParentWindow;
			public function HRESULT(IX509CertificateRequest *self, BSTR* pValue) get_UIContextMessage;
			public function HRESULT(IX509CertificateRequest *self, BSTR Value) put_UIContextMessage;
			public function HRESULT(IX509CertificateRequest *self, int16* pValue) get_SuppressDefaults;
			public function HRESULT(IX509CertificateRequest *self, int16 Value) put_SuppressDefaults;
			public function HRESULT(IX509CertificateRequest *self, EncodingType Encoding, BSTR* pValue) get_RenewalCertificate;
			public function HRESULT(IX509CertificateRequest *self, EncodingType Encoding, BSTR Value) put_RenewalCertificate;
			public function HRESULT(IX509CertificateRequest *self, RequestClientInfoClientId* pValue) get_ClientId;
			public function HRESULT(IX509CertificateRequest *self, RequestClientInfoClientId Value) put_ClientId;
			public function HRESULT(IX509CertificateRequest *self, ICspInformations** ppValue) get_CspInformations;
			public function HRESULT(IX509CertificateRequest *self, ICspInformations* pValue) put_CspInformations;
			public function HRESULT(IX509CertificateRequest *self, IObjectId** ppValue) get_HashAlgorithm;
			public function HRESULT(IX509CertificateRequest *self, IObjectId* pValue) put_HashAlgorithm;
			public function HRESULT(IX509CertificateRequest *self, int16* pValue) get_AlternateSignatureAlgorithm;
			public function HRESULT(IX509CertificateRequest *self, int16 Value) put_AlternateSignatureAlgorithm;
			public function HRESULT(IX509CertificateRequest *self, EncodingType Encoding, BSTR* pValue) get_RawData;
		}
		[CRepr]
		public struct IX509CertificateRequestPkcs10 : IX509CertificateRequest
		{
			public const new Guid IID = .(0x728ab342, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestPkcs10 *self, X509CertificateEnrollmentContext Context, BSTR strTemplateName) InitializeFromTemplateName;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, X509CertificateEnrollmentContext Context, IX509PrivateKey* pPrivateKey, BSTR strTemplateName) InitializeFromPrivateKey;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, X509CertificateEnrollmentContext Context, IX509PublicKey* pPublicKey, BSTR strTemplateName) InitializeFromPublicKey;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, X509CertificateEnrollmentContext Context, BSTR strCertificate, EncodingType Encoding, X509RequestInheritOptions InheritOptions) InitializeFromCertificate;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, BSTR strEncodedData, EncodingType Encoding) InitializeDecode;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, Pkcs10AllowedSignatureTypes AllowedSignatureTypes) CheckSignature;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, int16* pValue) IsSmartCard;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IObjectId** ppValue) get_TemplateObjectId;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IX509PublicKey** ppValue) get_PublicKey;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IX509PrivateKey** ppValue) get_PrivateKey;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, int16* pValue) get_NullSigned;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, int16* pValue) get_ReuseKey;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, EncodingType Encoding, BSTR* pValue) get_OldCertificate;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IX500DistinguishedName** ppValue) get_Subject;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IX500DistinguishedName* pValue) put_Subject;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, ICspStatuses** ppValue) get_CspStatuses;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, int16* pValue) get_SmimeCapabilities;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, int16 Value) put_SmimeCapabilities;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IX509SignatureInformation** ppValue) get_SignatureInformation;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, BSTR* pValue) get_KeyContainerNamePrefix;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, BSTR Value) put_KeyContainerNamePrefix;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, ICryptAttributes** ppValue) get_CryptAttributes;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IX509Extensions** ppValue) get_X509Extensions;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IObjectIds** ppValue) get_CriticalExtensions;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, IObjectIds** ppValue) get_SuppressOids;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, EncodingType Encoding, BSTR* pValue) get_RawDataToBeSigned;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, EncodingType Encoding, BSTR* pValue) get_Signature;
			public function HRESULT(IX509CertificateRequestPkcs10 *self, X509KeySpec KeySpec, ICspStatuses** ppCspStatuses) GetCspStatuses;
		}
		[CRepr]
		public struct IX509CertificateRequestPkcs10V2 : IX509CertificateRequestPkcs10
		{
			public const new Guid IID = .(0x728ab35b, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestPkcs10V2 *self, X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromTemplate;
			public function HRESULT(IX509CertificateRequestPkcs10V2 *self, X509CertificateEnrollmentContext Context, IX509PrivateKey* pPrivateKey, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromPrivateKeyTemplate;
			public function HRESULT(IX509CertificateRequestPkcs10V2 *self, X509CertificateEnrollmentContext Context, IX509PublicKey* pPublicKey, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromPublicKeyTemplate;
			public function HRESULT(IX509CertificateRequestPkcs10V2 *self, IX509EnrollmentPolicyServer** ppPolicyServer) get_PolicyServer;
			public function HRESULT(IX509CertificateRequestPkcs10V2 *self, IX509CertificateTemplate** ppTemplate) get_Template;
		}
		[CRepr]
		public struct IX509CertificateRequestPkcs10V3 : IX509CertificateRequestPkcs10V2
		{
			public const new Guid IID = .(0x54ea9942, 0x3d66, 0x4530, 0xb7, 0x6e, 0x7c, 0x91, 0x70, 0xd3, 0xec, 0x52);
			
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, int16* pValue) get_AttestPrivateKey;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, int16 Value) put_AttestPrivateKey;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, EncodingType Encoding, BSTR* pValue) get_AttestationEncryptionCertificate;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, EncodingType Encoding, BSTR Value) put_AttestationEncryptionCertificate;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, IObjectId** ppValue) get_EncryptionAlgorithm;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, IObjectId* pValue) put_EncryptionAlgorithm;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, int32* pValue) get_EncryptionStrength;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, int32 Value) put_EncryptionStrength;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, BSTR* pValue) get_ChallengePassword;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, BSTR Value) put_ChallengePassword;
			public function HRESULT(IX509CertificateRequestPkcs10V3 *self, IX509NameValuePairs** ppValue) get_NameValuePairs;
		}
		[CRepr]
		public struct IX509CertificateRequestPkcs10V4 : IX509CertificateRequestPkcs10V3
		{
			public const new Guid IID = .(0x728ab363, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestPkcs10V4 *self, KeyAttestationClaimType* pValue) get_ClaimType;
			public function HRESULT(IX509CertificateRequestPkcs10V4 *self, KeyAttestationClaimType Value) put_ClaimType;
			public function HRESULT(IX509CertificateRequestPkcs10V4 *self, int16* pValue) get_AttestPrivateKeyPreferred;
			public function HRESULT(IX509CertificateRequestPkcs10V4 *self, int16 Value) put_AttestPrivateKeyPreferred;
		}
		[CRepr]
		public struct IX509CertificateRequestCertificate : IX509CertificateRequestPkcs10
		{
			public const new Guid IID = .(0x728ab343, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestCertificate *self, IX509PublicKey* pPublicKey) CheckPublicKeySignature;
			public function HRESULT(IX509CertificateRequestCertificate *self, IX500DistinguishedName** ppValue) get_Issuer;
			public function HRESULT(IX509CertificateRequestCertificate *self, IX500DistinguishedName* pValue) put_Issuer;
			public function HRESULT(IX509CertificateRequestCertificate *self, double* pValue) get_NotBefore;
			public function HRESULT(IX509CertificateRequestCertificate *self, double Value) put_NotBefore;
			public function HRESULT(IX509CertificateRequestCertificate *self, double* pValue) get_NotAfter;
			public function HRESULT(IX509CertificateRequestCertificate *self, double Value) put_NotAfter;
			public function HRESULT(IX509CertificateRequestCertificate *self, EncodingType Encoding, BSTR* pValue) get_SerialNumber;
			public function HRESULT(IX509CertificateRequestCertificate *self, EncodingType Encoding, BSTR Value) put_SerialNumber;
			public function HRESULT(IX509CertificateRequestCertificate *self, ISignerCertificate** ppValue) get_SignerCertificate;
			public function HRESULT(IX509CertificateRequestCertificate *self, ISignerCertificate* pValue) put_SignerCertificate;
		}
		[CRepr]
		public struct IX509CertificateRequestCertificate2 : IX509CertificateRequestCertificate
		{
			public const new Guid IID = .(0x728ab35a, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestCertificate2 *self, X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromTemplate;
			public function HRESULT(IX509CertificateRequestCertificate2 *self, X509CertificateEnrollmentContext Context, IX509PrivateKey* pPrivateKey, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromPrivateKeyTemplate;
			public function HRESULT(IX509CertificateRequestCertificate2 *self, IX509EnrollmentPolicyServer** ppPolicyServer) get_PolicyServer;
			public function HRESULT(IX509CertificateRequestCertificate2 *self, IX509CertificateTemplate** ppTemplate) get_Template;
		}
		[CRepr]
		public struct IX509CertificateRequestPkcs7 : IX509CertificateRequest
		{
			public const new Guid IID = .(0x728ab344, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestPkcs7 *self, X509CertificateEnrollmentContext Context, BSTR strTemplateName) InitializeFromTemplateName;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, X509CertificateEnrollmentContext Context, int16 RenewalRequest, BSTR strCertificate, EncodingType Encoding, X509RequestInheritOptions InheritOptions) InitializeFromCertificate;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, IX509CertificateRequest* pInnerRequest) InitializeFromInnerRequest;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, BSTR strEncodedData, EncodingType Encoding) InitializeDecode;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, BSTR* pValue) get_RequesterName;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, BSTR Value) put_RequesterName;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, ISignerCertificate** ppValue) get_SignerCertificate;
			public function HRESULT(IX509CertificateRequestPkcs7 *self, ISignerCertificate* pValue) put_SignerCertificate;
		}
		[CRepr]
		public struct IX509CertificateRequestPkcs7V2 : IX509CertificateRequestPkcs7
		{
			public const new Guid IID = .(0x728ab35c, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestPkcs7V2 *self, X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromTemplate;
			public function HRESULT(IX509CertificateRequestPkcs7V2 *self, IX509EnrollmentPolicyServer** ppPolicyServer) get_PolicyServer;
			public function HRESULT(IX509CertificateRequestPkcs7V2 *self, IX509CertificateTemplate** ppTemplate) get_Template;
			public function HRESULT(IX509CertificateRequestPkcs7V2 *self, int16 ValidateCertificateChain) CheckCertificateSignature;
		}
		[CRepr]
		public struct IX509CertificateRequestCmc : IX509CertificateRequestPkcs7
		{
			public const new Guid IID = .(0x728ab345, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestCmc *self, IX509CertificateRequest* pInnerRequest, BSTR strTemplateName) InitializeFromInnerRequestTemplateName;
			public function HRESULT(IX509CertificateRequestCmc *self, IObjectId** ppValue) get_TemplateObjectId;
			public function HRESULT(IX509CertificateRequestCmc *self, int16* pValue) get_NullSigned;
			public function HRESULT(IX509CertificateRequestCmc *self, ICryptAttributes** ppValue) get_CryptAttributes;
			public function HRESULT(IX509CertificateRequestCmc *self, IX509NameValuePairs** ppValue) get_NameValuePairs;
			public function HRESULT(IX509CertificateRequestCmc *self, IX509Extensions** ppValue) get_X509Extensions;
			public function HRESULT(IX509CertificateRequestCmc *self, IObjectIds** ppValue) get_CriticalExtensions;
			public function HRESULT(IX509CertificateRequestCmc *self, IObjectIds** ppValue) get_SuppressOids;
			public function HRESULT(IX509CertificateRequestCmc *self, int32* pValue) get_TransactionId;
			public function HRESULT(IX509CertificateRequestCmc *self, int32 Value) put_TransactionId;
			public function HRESULT(IX509CertificateRequestCmc *self, EncodingType Encoding, BSTR* pValue) get_SenderNonce;
			public function HRESULT(IX509CertificateRequestCmc *self, EncodingType Encoding, BSTR Value) put_SenderNonce;
			public function HRESULT(IX509CertificateRequestCmc *self, IX509SignatureInformation** ppValue) get_SignatureInformation;
			public function HRESULT(IX509CertificateRequestCmc *self, int16* pValue) get_ArchivePrivateKey;
			public function HRESULT(IX509CertificateRequestCmc *self, int16 Value) put_ArchivePrivateKey;
			public function HRESULT(IX509CertificateRequestCmc *self, EncodingType Encoding, BSTR* pValue) get_KeyArchivalCertificate;
			public function HRESULT(IX509CertificateRequestCmc *self, EncodingType Encoding, BSTR Value) put_KeyArchivalCertificate;
			public function HRESULT(IX509CertificateRequestCmc *self, IObjectId** ppValue) get_EncryptionAlgorithm;
			public function HRESULT(IX509CertificateRequestCmc *self, IObjectId* pValue) put_EncryptionAlgorithm;
			public function HRESULT(IX509CertificateRequestCmc *self, int32* pValue) get_EncryptionStrength;
			public function HRESULT(IX509CertificateRequestCmc *self, int32 Value) put_EncryptionStrength;
			public function HRESULT(IX509CertificateRequestCmc *self, EncodingType Encoding, BSTR* pValue) get_EncryptedKeyHash;
			public function HRESULT(IX509CertificateRequestCmc *self, ISignerCertificates** ppValue) get_SignerCertificates;
		}
		[CRepr]
		public struct IX509CertificateRequestCmc2 : IX509CertificateRequestCmc
		{
			public const new Guid IID = .(0x728ab35d, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRequestCmc2 *self, X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromTemplate;
			public function HRESULT(IX509CertificateRequestCmc2 *self, IX509CertificateRequest* pInnerRequest, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromInnerRequestTemplate;
			public function HRESULT(IX509CertificateRequestCmc2 *self, IX509EnrollmentPolicyServer** ppPolicyServer) get_PolicyServer;
			public function HRESULT(IX509CertificateRequestCmc2 *self, IX509CertificateTemplate** ppTemplate) get_Template;
			public function HRESULT(IX509CertificateRequestCmc2 *self, Pkcs10AllowedSignatureTypes AllowedSignatureTypes) CheckSignature;
			public function HRESULT(IX509CertificateRequestCmc2 *self, ISignerCertificate* pSignerCertificate, int16 ValidateCertificateChain) CheckCertificateSignature;
		}
		[CRepr]
		public struct IX509Enrollment : IDispatch
		{
			public const new Guid IID = .(0x728ab346, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509Enrollment *self, X509CertificateEnrollmentContext Context) Initialize;
			public function HRESULT(IX509Enrollment *self, X509CertificateEnrollmentContext Context, BSTR strTemplateName) InitializeFromTemplateName;
			public function HRESULT(IX509Enrollment *self, IX509CertificateRequest* pRequest) InitializeFromRequest;
			public function HRESULT(IX509Enrollment *self, EncodingType Encoding, BSTR* pValue) CreateRequest;
			public function HRESULT(IX509Enrollment *self) Enroll;
			public function HRESULT(IX509Enrollment *self, InstallResponseRestrictionFlags Restrictions, BSTR strResponse, EncodingType Encoding, BSTR strPassword) InstallResponse;
			public function HRESULT(IX509Enrollment *self, BSTR strPassword, PFXExportOptions ExportOptions, EncodingType Encoding, BSTR* pValue) CreatePFX;
			public function HRESULT(IX509Enrollment *self, IX509CertificateRequest** pValue) get_Request;
			public function HRESULT(IX509Enrollment *self, int16* pValue) get_Silent;
			public function HRESULT(IX509Enrollment *self, int16 Value) put_Silent;
			public function HRESULT(IX509Enrollment *self, int32* pValue) get_ParentWindow;
			public function HRESULT(IX509Enrollment *self, int32 Value) put_ParentWindow;
			public function HRESULT(IX509Enrollment *self, IX509NameValuePairs** ppValue) get_NameValuePairs;
			public function HRESULT(IX509Enrollment *self, X509CertificateEnrollmentContext* pValue) get_EnrollmentContext;
			public function HRESULT(IX509Enrollment *self, IX509EnrollmentStatus** ppValue) get_Status;
			public function HRESULT(IX509Enrollment *self, EncodingType Encoding, BSTR* pValue) get_Certificate;
			public function HRESULT(IX509Enrollment *self, EncodingType Encoding, BSTR* pValue) get_Response;
			public function HRESULT(IX509Enrollment *self, BSTR* pValue) get_CertificateFriendlyName;
			public function HRESULT(IX509Enrollment *self, BSTR strValue) put_CertificateFriendlyName;
			public function HRESULT(IX509Enrollment *self, BSTR* pValue) get_CertificateDescription;
			public function HRESULT(IX509Enrollment *self, BSTR strValue) put_CertificateDescription;
			public function HRESULT(IX509Enrollment *self, int32* pValue) get_RequestId;
			public function HRESULT(IX509Enrollment *self, BSTR* pValue) get_CAConfigString;
		}
		[CRepr]
		public struct IX509Enrollment2 : IX509Enrollment
		{
			public const new Guid IID = .(0x728ab350, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509Enrollment2 *self, X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer* pPolicyServer, IX509CertificateTemplate* pTemplate) InitializeFromTemplate;
			public function HRESULT(IX509Enrollment2 *self, InstallResponseRestrictionFlags Restrictions, BSTR strResponse, EncodingType Encoding, BSTR strPassword, BSTR strEnrollmentPolicyServerUrl, BSTR strEnrollmentPolicyServerID, PolicyServerUrlFlags EnrollmentPolicyServerFlags, X509EnrollmentAuthFlags authFlags) InstallResponse2;
			public function HRESULT(IX509Enrollment2 *self, IX509EnrollmentPolicyServer** ppPolicyServer) get_PolicyServer;
			public function HRESULT(IX509Enrollment2 *self, IX509CertificateTemplate** ppTemplate) get_Template;
			public function HRESULT(IX509Enrollment2 *self, BSTR* pValue) get_RequestIdString;
		}
		[CRepr]
		public struct IX509EnrollmentHelper : IDispatch
		{
			public const new Guid IID = .(0x728ab351, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509EnrollmentHelper *self, BSTR strEnrollmentPolicyServerURI, BSTR strEnrollmentPolicyID, PolicyServerUrlFlags EnrollmentPolicyServerFlags, X509EnrollmentAuthFlags authFlags, BSTR strCredential, BSTR strPassword) AddPolicyServer;
			public function HRESULT(IX509EnrollmentHelper *self, BSTR strEnrollmentServerURI, X509EnrollmentAuthFlags authFlags, BSTR strCredential, BSTR strPassword) AddEnrollmentServer;
			public function HRESULT(IX509EnrollmentHelper *self, BSTR strEnrollmentPolicyServerURI, BSTR strTemplateName, EncodingType Encoding, WebEnrollmentFlags enrollFlags, BSTR* pstrCertificate) Enroll;
			public function HRESULT(IX509EnrollmentHelper *self, X509CertificateEnrollmentContext Context) Initialize;
		}
		[CRepr]
		public struct IX509EnrollmentWebClassFactory : IDispatch
		{
			public const new Guid IID = .(0x728ab349, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509EnrollmentWebClassFactory *self, BSTR strProgID, IUnknown** ppIUnknown) CreateObject;
		}
		[CRepr]
		public struct IX509MachineEnrollmentFactory : IDispatch
		{
			public const new Guid IID = .(0x728ab352, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509MachineEnrollmentFactory *self, BSTR strProgID, IX509EnrollmentHelper** ppIHelper) CreateObject;
		}
		[CRepr]
		public struct IX509CertificateRevocationListEntry : IDispatch
		{
			public const new Guid IID = .(0x728ab35e, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRevocationListEntry *self, EncodingType Encoding, BSTR SerialNumber, double RevocationDate) Initialize;
			public function HRESULT(IX509CertificateRevocationListEntry *self, EncodingType Encoding, BSTR* pValue) get_SerialNumber;
			public function HRESULT(IX509CertificateRevocationListEntry *self, double* pValue) get_RevocationDate;
			public function HRESULT(IX509CertificateRevocationListEntry *self, CRLRevocationReason* pValue) get_RevocationReason;
			public function HRESULT(IX509CertificateRevocationListEntry *self, CRLRevocationReason Value) put_RevocationReason;
			public function HRESULT(IX509CertificateRevocationListEntry *self, IX509Extensions** ppValue) get_X509Extensions;
			public function HRESULT(IX509CertificateRevocationListEntry *self, IObjectIds** ppValue) get_CriticalExtensions;
		}
		[CRepr]
		public struct IX509CertificateRevocationListEntries : IDispatch
		{
			public const new Guid IID = .(0x728ab35f, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRevocationListEntries *self, int32 Index, IX509CertificateRevocationListEntry** pVal) get_ItemByIndex;
			public function HRESULT(IX509CertificateRevocationListEntries *self, int32* pVal) get_Count;
			public function HRESULT(IX509CertificateRevocationListEntries *self, IUnknown** pVal) get__NewEnum;
			public function HRESULT(IX509CertificateRevocationListEntries *self, IX509CertificateRevocationListEntry* pVal) Add;
			public function HRESULT(IX509CertificateRevocationListEntries *self, int32 Index) Remove;
			public function HRESULT(IX509CertificateRevocationListEntries *self) Clear;
			public function HRESULT(IX509CertificateRevocationListEntries *self, EncodingType Encoding, BSTR SerialNumber, int32* pIndex) get_IndexBySerialNumber;
			public function HRESULT(IX509CertificateRevocationListEntries *self, IX509CertificateRevocationListEntries* pValue) AddRange;
		}
		[CRepr]
		public struct IX509CertificateRevocationList : IDispatch
		{
			public const new Guid IID = .(0x728ab360, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509CertificateRevocationList *self) Initialize;
			public function HRESULT(IX509CertificateRevocationList *self, BSTR strEncodedData, EncodingType Encoding) InitializeDecode;
			public function HRESULT(IX509CertificateRevocationList *self) Encode;
			public function HRESULT(IX509CertificateRevocationList *self) ResetForEncode;
			public function HRESULT(IX509CertificateRevocationList *self, IX509PublicKey* pPublicKey) CheckPublicKeySignature;
			public function HRESULT(IX509CertificateRevocationList *self) CheckSignature;
			public function HRESULT(IX509CertificateRevocationList *self, IX500DistinguishedName** ppValue) get_Issuer;
			public function HRESULT(IX509CertificateRevocationList *self, IX500DistinguishedName* pValue) put_Issuer;
			public function HRESULT(IX509CertificateRevocationList *self, double* pValue) get_ThisUpdate;
			public function HRESULT(IX509CertificateRevocationList *self, double Value) put_ThisUpdate;
			public function HRESULT(IX509CertificateRevocationList *self, double* pValue) get_NextUpdate;
			public function HRESULT(IX509CertificateRevocationList *self, double Value) put_NextUpdate;
			public function HRESULT(IX509CertificateRevocationList *self, IX509CertificateRevocationListEntries** ppValue) get_X509CRLEntries;
			public function HRESULT(IX509CertificateRevocationList *self, IX509Extensions** ppValue) get_X509Extensions;
			public function HRESULT(IX509CertificateRevocationList *self, IObjectIds** ppValue) get_CriticalExtensions;
			public function HRESULT(IX509CertificateRevocationList *self, ISignerCertificate** ppValue) get_SignerCertificate;
			public function HRESULT(IX509CertificateRevocationList *self, ISignerCertificate* pValue) put_SignerCertificate;
			public function HRESULT(IX509CertificateRevocationList *self, EncodingType Encoding, BSTR* pValue) get_CRLNumber;
			public function HRESULT(IX509CertificateRevocationList *self, EncodingType Encoding, BSTR Value) put_CRLNumber;
			public function HRESULT(IX509CertificateRevocationList *self, int32* pValue) get_CAVersion;
			public function HRESULT(IX509CertificateRevocationList *self, int32 pValue) put_CAVersion;
			public function HRESULT(IX509CertificateRevocationList *self, int16* pValue) get_BaseCRL;
			public function HRESULT(IX509CertificateRevocationList *self, int16* pValue) get_NullSigned;
			public function HRESULT(IX509CertificateRevocationList *self, IObjectId** ppValue) get_HashAlgorithm;
			public function HRESULT(IX509CertificateRevocationList *self, IObjectId* pValue) put_HashAlgorithm;
			public function HRESULT(IX509CertificateRevocationList *self, int16* pValue) get_AlternateSignatureAlgorithm;
			public function HRESULT(IX509CertificateRevocationList *self, int16 Value) put_AlternateSignatureAlgorithm;
			public function HRESULT(IX509CertificateRevocationList *self, IX509SignatureInformation** ppValue) get_SignatureInformation;
			public function HRESULT(IX509CertificateRevocationList *self, EncodingType Encoding, BSTR* pValue) get_RawData;
			public function HRESULT(IX509CertificateRevocationList *self, EncodingType Encoding, BSTR* pValue) get_RawDataToBeSigned;
			public function HRESULT(IX509CertificateRevocationList *self, EncodingType Encoding, BSTR* pValue) get_Signature;
		}
		[CRepr]
		public struct ICertificateAttestationChallenge : IDispatch
		{
			public const new Guid IID = .(0x6f175a7c, 0x4a3a, 0x40ae, 0x9d, 0xba, 0x59, 0x2f, 0xd6, 0xbb, 0xf9, 0xb8);
			
			public function HRESULT(ICertificateAttestationChallenge *self, EncodingType Encoding, BSTR strPendingFullCmcResponseWithChallenge) Initialize;
			public function HRESULT(ICertificateAttestationChallenge *self, EncodingType Encoding, BSTR* pstrEnvelopedPkcs7ReencryptedToCA) DecryptChallenge;
			public function HRESULT(ICertificateAttestationChallenge *self, BSTR* pstrRequestID) get_RequestID;
		}
		[CRepr]
		public struct ICertificateAttestationChallenge2 : ICertificateAttestationChallenge
		{
			public const new Guid IID = .(0x4631334d, 0xe266, 0x47d6, 0xbd, 0x79, 0xbe, 0x53, 0xcb, 0x2e, 0x27, 0x53);
			
			public function HRESULT(ICertificateAttestationChallenge2 *self, BSTR Value) put_KeyContainerName;
			public function HRESULT(ICertificateAttestationChallenge2 *self, EncodingType Encoding, BSTR Value) put_KeyBlob;
		}
		[CRepr]
		public struct IX509SCEPEnrollment : IDispatch
		{
			public const new Guid IID = .(0x728ab361, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509SCEPEnrollment *self, IX509CertificateRequestPkcs10* pRequest, BSTR strThumbprint, EncodingType ThumprintEncoding, BSTR strServerCertificates, EncodingType Encoding) Initialize;
			public function HRESULT(IX509SCEPEnrollment *self, X509CertificateEnrollmentContext Context) InitializeForPending;
			public function HRESULT(IX509SCEPEnrollment *self, EncodingType Encoding, BSTR* pValue) CreateRequestMessage;
			public function HRESULT(IX509SCEPEnrollment *self, EncodingType Encoding, BSTR* pValue) CreateRetrievePendingMessage;
			public function HRESULT(IX509SCEPEnrollment *self, X509CertificateEnrollmentContext Context, BSTR strIssuer, EncodingType IssuerEncoding, BSTR strSerialNumber, EncodingType SerialNumberEncoding, EncodingType Encoding, BSTR* pValue) CreateRetrieveCertificateMessage;
			public function HRESULT(IX509SCEPEnrollment *self, BSTR strResponse, EncodingType Encoding, X509SCEPDisposition* pDisposition) ProcessResponseMessage;
			public function HRESULT(IX509SCEPEnrollment *self, BSTR Value) put_ServerCapabilities;
			public function HRESULT(IX509SCEPEnrollment *self, X509SCEPFailInfo* pValue) get_FailInfo;
			public function HRESULT(IX509SCEPEnrollment *self, ISignerCertificate** ppValue) get_SignerCertificate;
			public function HRESULT(IX509SCEPEnrollment *self, ISignerCertificate* pValue) put_SignerCertificate;
			public function HRESULT(IX509SCEPEnrollment *self, ISignerCertificate** ppValue) get_OldCertificate;
			public function HRESULT(IX509SCEPEnrollment *self, ISignerCertificate* pValue) put_OldCertificate;
			public function HRESULT(IX509SCEPEnrollment *self, EncodingType Encoding, BSTR* pValue) get_TransactionId;
			public function HRESULT(IX509SCEPEnrollment *self, EncodingType Encoding, BSTR Value) put_TransactionId;
			public function HRESULT(IX509SCEPEnrollment *self, IX509CertificateRequestPkcs10** ppValue) get_Request;
			public function HRESULT(IX509SCEPEnrollment *self, BSTR* pValue) get_CertificateFriendlyName;
			public function HRESULT(IX509SCEPEnrollment *self, BSTR Value) put_CertificateFriendlyName;
			public function HRESULT(IX509SCEPEnrollment *self, IX509EnrollmentStatus** ppValue) get_Status;
			public function HRESULT(IX509SCEPEnrollment *self, EncodingType Encoding, BSTR* pValue) get_Certificate;
			public function HRESULT(IX509SCEPEnrollment *self, int16* pValue) get_Silent;
			public function HRESULT(IX509SCEPEnrollment *self, int16 Value) put_Silent;
			public function HRESULT(IX509SCEPEnrollment *self) DeleteRequest;
		}
		[CRepr]
		public struct IX509SCEPEnrollment2 : IX509SCEPEnrollment
		{
			public const new Guid IID = .(0x728ab364, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509SCEPEnrollment2 *self, EncodingType Encoding, BSTR* pValue) CreateChallengeAnswerMessage;
			public function HRESULT(IX509SCEPEnrollment2 *self, X509SCEPProcessMessageFlags Flags, BSTR strResponse, EncodingType Encoding, X509SCEPDisposition* pDisposition) ProcessResponseMessage2;
			public function HRESULT(IX509SCEPEnrollment2 *self, BSTR* pValue) get_ResultMessageText;
			public function HRESULT(IX509SCEPEnrollment2 *self, DelayRetryAction* pValue) get_DelayRetry;
			public function HRESULT(IX509SCEPEnrollment2 *self, BSTR* pValue) get_ActivityId;
			public function HRESULT(IX509SCEPEnrollment2 *self, BSTR Value) put_ActivityId;
		}
		[CRepr]
		public struct IX509SCEPEnrollmentHelper : IDispatch
		{
			public const new Guid IID = .(0x728ab365, 0x217d, 0x11da, 0xb2, 0xa4, 0x00, 0x0e, 0x7b, 0xbb, 0x2b, 0x09);
			
			public function HRESULT(IX509SCEPEnrollmentHelper *self, BSTR strServerUrl, BSTR strRequestHeaders, IX509CertificateRequestPkcs10* pRequest, BSTR strCACertificateThumbprint) Initialize;
			public function HRESULT(IX509SCEPEnrollmentHelper *self, BSTR strServerUrl, BSTR strRequestHeaders, X509CertificateEnrollmentContext Context, BSTR strTransactionId) InitializeForPending;
			public function HRESULT(IX509SCEPEnrollmentHelper *self, X509SCEPProcessMessageFlags ProcessFlags, X509SCEPDisposition* pDisposition) Enroll;
			public function HRESULT(IX509SCEPEnrollmentHelper *self, X509SCEPProcessMessageFlags ProcessFlags, X509SCEPDisposition* pDisposition) FetchPending;
			public function HRESULT(IX509SCEPEnrollmentHelper *self, IX509SCEPEnrollment** ppValue) get_X509SCEPEnrollment;
			public function HRESULT(IX509SCEPEnrollmentHelper *self, BSTR* pValue) get_ResultMessageText;
		}
		[CRepr]
		public struct ICertEncodeStringArray : IDispatch
		{
			public const new Guid IID = .(0x12a88820, 0x7494, 0x11d0, 0x88, 0x16, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertEncodeStringArray *self, BSTR strBinary) Decode;
			public function HRESULT(ICertEncodeStringArray *self, int32* pStringType) GetStringType;
			public function HRESULT(ICertEncodeStringArray *self, int32* pCount) GetCount;
			public function HRESULT(ICertEncodeStringArray *self, int32 Index, BSTR* pstr) GetValue;
			public function HRESULT(ICertEncodeStringArray *self, int32 Count, CERT_RDN_ATTR_VALUE_TYPE StringType) Reset;
			public function HRESULT(ICertEncodeStringArray *self, int32 Index, BSTR str) SetValue;
			public function HRESULT(ICertEncodeStringArray *self, BSTR* pstrBinary) Encode;
		}
		[CRepr]
		public struct ICertEncodeStringArray2 : ICertEncodeStringArray
		{
			public const new Guid IID = .(0x9c680d93, 0x9b7d, 0x4e95, 0x90, 0x18, 0x4f, 0xfe, 0x10, 0xba, 0x5a, 0xda);
			
			public function HRESULT(ICertEncodeStringArray2 *self, BSTR strEncodedData, EncodingType Encoding) DecodeBlob;
			public function HRESULT(ICertEncodeStringArray2 *self, EncodingType Encoding, BSTR* pstrEncodedData) EncodeBlob;
		}
		[CRepr]
		public struct ICertEncodeLongArray : IDispatch
		{
			public const new Guid IID = .(0x15e2f230, 0xa0a2, 0x11d0, 0x88, 0x21, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertEncodeLongArray *self, BSTR strBinary) Decode;
			public function HRESULT(ICertEncodeLongArray *self, int32* pCount) GetCount;
			public function HRESULT(ICertEncodeLongArray *self, int32 Index, int32* pValue) GetValue;
			public function HRESULT(ICertEncodeLongArray *self, int32 Count) Reset;
			public function HRESULT(ICertEncodeLongArray *self, int32 Index, int32 Value) SetValue;
			public function HRESULT(ICertEncodeLongArray *self, BSTR* pstrBinary) Encode;
		}
		[CRepr]
		public struct ICertEncodeLongArray2 : ICertEncodeLongArray
		{
			public const new Guid IID = .(0x4efde84a, 0xbd9b, 0x4fc2, 0xa1, 0x08, 0xc3, 0x47, 0xd4, 0x78, 0x84, 0x0f);
			
			public function HRESULT(ICertEncodeLongArray2 *self, BSTR strEncodedData, EncodingType Encoding) DecodeBlob;
			public function HRESULT(ICertEncodeLongArray2 *self, EncodingType Encoding, BSTR* pstrEncodedData) EncodeBlob;
		}
		[CRepr]
		public struct ICertEncodeDateArray : IDispatch
		{
			public const new Guid IID = .(0x2f9469a0, 0xa470, 0x11d0, 0x88, 0x21, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertEncodeDateArray *self, BSTR strBinary) Decode;
			public function HRESULT(ICertEncodeDateArray *self, int32* pCount) GetCount;
			public function HRESULT(ICertEncodeDateArray *self, int32 Index, double* pValue) GetValue;
			public function HRESULT(ICertEncodeDateArray *self, int32 Count) Reset;
			public function HRESULT(ICertEncodeDateArray *self, int32 Index, double Value) SetValue;
			public function HRESULT(ICertEncodeDateArray *self, BSTR* pstrBinary) Encode;
		}
		[CRepr]
		public struct ICertEncodeDateArray2 : ICertEncodeDateArray
		{
			public const new Guid IID = .(0x99a4edb5, 0x2b8e, 0x448d, 0xbf, 0x95, 0xbb, 0xa8, 0xd7, 0x78, 0x9d, 0xc8);
			
			public function HRESULT(ICertEncodeDateArray2 *self, BSTR strEncodedData, EncodingType Encoding) DecodeBlob;
			public function HRESULT(ICertEncodeDateArray2 *self, EncodingType Encoding, BSTR* pstrEncodedData) EncodeBlob;
		}
		[CRepr]
		public struct ICertEncodeCRLDistInfo : IDispatch
		{
			public const new Guid IID = .(0x01958640, 0xbbff, 0x11d0, 0x88, 0x25, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertEncodeCRLDistInfo *self, BSTR strBinary) Decode;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32* pDistPointCount) GetDistPointCount;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32 DistPointIndex, int32* pNameCount) GetNameCount;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32 DistPointIndex, int32 NameIndex, int32* pNameChoice) GetNameChoice;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32 DistPointIndex, int32 NameIndex, BSTR* pstrName) GetName;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32 DistPointCount) Reset;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32 DistPointIndex, int32 NameCount) SetNameCount;
			public function HRESULT(ICertEncodeCRLDistInfo *self, int32 DistPointIndex, int32 NameIndex, CERT_ALT_NAME NameChoice, BSTR strName) SetNameEntry;
			public function HRESULT(ICertEncodeCRLDistInfo *self, BSTR* pstrBinary) Encode;
		}
		[CRepr]
		public struct ICertEncodeCRLDistInfo2 : ICertEncodeCRLDistInfo
		{
			public const new Guid IID = .(0xb4275d4b, 0x3e30, 0x446f, 0xad, 0x36, 0x09, 0xd0, 0x31, 0x20, 0xb0, 0x78);
			
			public function HRESULT(ICertEncodeCRLDistInfo2 *self, BSTR strEncodedData, EncodingType Encoding) DecodeBlob;
			public function HRESULT(ICertEncodeCRLDistInfo2 *self, EncodingType Encoding, BSTR* pstrEncodedData) EncodeBlob;
		}
		[CRepr]
		public struct ICertEncodeAltName : IDispatch
		{
			public const new Guid IID = .(0x1c9a8c70, 0x1271, 0x11d1, 0x9b, 0xd4, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(ICertEncodeAltName *self, BSTR strBinary) Decode;
			public function HRESULT(ICertEncodeAltName *self, int32* pNameCount) GetNameCount;
			public function HRESULT(ICertEncodeAltName *self, int32 NameIndex, int32* pNameChoice) GetNameChoice;
			public function HRESULT(ICertEncodeAltName *self, int32 NameIndex, BSTR* pstrName) GetName;
			public function HRESULT(ICertEncodeAltName *self, int32 NameCount) Reset;
			public function HRESULT(ICertEncodeAltName *self, int32 NameIndex, CERT_ALT_NAME NameChoice, BSTR strName) SetNameEntry;
			public function HRESULT(ICertEncodeAltName *self, BSTR* pstrBinary) Encode;
		}
		[CRepr]
		public struct ICertEncodeAltName2 : ICertEncodeAltName
		{
			public const new Guid IID = .(0xf67fe177, 0x5ef1, 0x4535, 0xb4, 0xce, 0x29, 0xdf, 0x15, 0xe2, 0xe0, 0xc3);
			
			public function HRESULT(ICertEncodeAltName2 *self, BSTR strEncodedData, EncodingType Encoding) DecodeBlob;
			public function HRESULT(ICertEncodeAltName2 *self, EncodingType Encoding, BSTR* pstrEncodedData) EncodeBlob;
			public function HRESULT(ICertEncodeAltName2 *self, int32 NameIndex, EncodingType Encoding, BSTR* pstrName) GetNameBlob;
			public function HRESULT(ICertEncodeAltName2 *self, int32 NameIndex, int32 NameChoice, BSTR strName, EncodingType Encoding) SetNameEntryBlob;
		}
		[CRepr]
		public struct ICertEncodeBitString : IDispatch
		{
			public const new Guid IID = .(0x6db525be, 0x1278, 0x11d1, 0x9b, 0xd4, 0x00, 0xc0, 0x4f, 0xb6, 0x83, 0xfa);
			
			public function HRESULT(ICertEncodeBitString *self, BSTR strBinary) Decode;
			public function HRESULT(ICertEncodeBitString *self, int32* pBitCount) GetBitCount;
			public function HRESULT(ICertEncodeBitString *self, BSTR* pstrBitString) GetBitString;
			public function HRESULT(ICertEncodeBitString *self, int32 BitCount, BSTR strBitString, BSTR* pstrBinary) Encode;
		}
		[CRepr]
		public struct ICertEncodeBitString2 : ICertEncodeBitString
		{
			public const new Guid IID = .(0xe070d6e7, 0x23ef, 0x4dd2, 0x82, 0x42, 0xeb, 0xd9, 0xc9, 0x28, 0xcb, 0x30);
			
			public function HRESULT(ICertEncodeBitString2 *self, BSTR strEncodedData, EncodingType Encoding) DecodeBlob;
			public function HRESULT(ICertEncodeBitString2 *self, int32 BitCount, BSTR strBitString, EncodingType EncodingIn, EncodingType Encoding, BSTR* pstrEncodedData) EncodeBlob;
			public function HRESULT(ICertEncodeBitString2 *self, EncodingType Encoding, BSTR* pstrBitString) GetBitStringBlob;
		}
		[CRepr]
		public struct ICertExit : IDispatch
		{
			public const new Guid IID = .(0xe19ae1a0, 0x7364, 0x11d0, 0x88, 0x16, 0x00, 0xa0, 0xc9, 0x03, 0xb8, 0x3c);
			
			public function HRESULT(ICertExit *self, BSTR strConfig, CERT_EXIT_EVENT_MASK* pEventMask) Initialize;
			public function HRESULT(ICertExit *self, int32 ExitEvent, int32 Context) Notify;
			public function HRESULT(ICertExit *self, BSTR* pstrDescription) GetDescription;
		}
		[CRepr]
		public struct ICertExit2 : ICertExit
		{
			public const new Guid IID = .(0x0abf484b, 0xd049, 0x464d, 0xa7, 0xed, 0x55, 0x2e, 0x75, 0x29, 0xb0, 0xff);
			
			public function HRESULT(ICertExit2 *self, ICertManageModule** ppManageModule) GetManageModule;
		}
		[CRepr]
		public struct ICEnroll : IDispatch
		{
			public const new Guid IID = .(0x43f8f288, 0x7a20, 0x11d0, 0x8f, 0x06, 0x00, 0xc0, 0x4f, 0xc2, 0x95, 0xe1);
			
			public function HRESULT(ICEnroll *self, BSTR DNName, BSTR Usage, BSTR wszPKCS10FileName) createFilePKCS10;
			public function HRESULT(ICEnroll *self, BSTR wszPKCS7FileName) acceptFilePKCS7;
			public function HRESULT(ICEnroll *self, BSTR DNName, BSTR Usage, BSTR* pPKCS10) createPKCS10;
			public function HRESULT(ICEnroll *self, BSTR PKCS7) acceptPKCS7;
			public function HRESULT(ICEnroll *self, BSTR wszPKCS7, BSTR* pbstrCert) getCertFromPKCS7;
			public function HRESULT(ICEnroll *self, int32 dwIndex, int32 dwFlags, BSTR* pbstrProvName) enumProviders;
			public function HRESULT(ICEnroll *self, int32 dwIndex, BSTR* pbstr) enumContainers;
			public function HRESULT(ICEnroll *self, BSTR PKCS7OrPKCS10) freeRequestInfo;
			public function HRESULT(ICEnroll *self, BSTR* pbstrName) get_MyStoreName;
			public function HRESULT(ICEnroll *self, BSTR bstrName) put_MyStoreName;
			public function HRESULT(ICEnroll *self, BSTR* pbstrType) get_MyStoreType;
			public function HRESULT(ICEnroll *self, BSTR bstrType) put_MyStoreType;
			public function HRESULT(ICEnroll *self, int32* pdwFlags) get_MyStoreFlags;
			public function HRESULT(ICEnroll *self, int32 dwFlags) put_MyStoreFlags;
			public function HRESULT(ICEnroll *self, BSTR* pbstrName) get_CAStoreName;
			public function HRESULT(ICEnroll *self, BSTR bstrName) put_CAStoreName;
			public function HRESULT(ICEnroll *self, BSTR* pbstrType) get_CAStoreType;
			public function HRESULT(ICEnroll *self, BSTR bstrType) put_CAStoreType;
			public function HRESULT(ICEnroll *self, int32* pdwFlags) get_CAStoreFlags;
			public function HRESULT(ICEnroll *self, int32 dwFlags) put_CAStoreFlags;
			public function HRESULT(ICEnroll *self, BSTR* pbstrName) get_RootStoreName;
			public function HRESULT(ICEnroll *self, BSTR bstrName) put_RootStoreName;
			public function HRESULT(ICEnroll *self, BSTR* pbstrType) get_RootStoreType;
			public function HRESULT(ICEnroll *self, BSTR bstrType) put_RootStoreType;
			public function HRESULT(ICEnroll *self, int32* pdwFlags) get_RootStoreFlags;
			public function HRESULT(ICEnroll *self, int32 dwFlags) put_RootStoreFlags;
			public function HRESULT(ICEnroll *self, BSTR* pbstrName) get_RequestStoreName;
			public function HRESULT(ICEnroll *self, BSTR bstrName) put_RequestStoreName;
			public function HRESULT(ICEnroll *self, BSTR* pbstrType) get_RequestStoreType;
			public function HRESULT(ICEnroll *self, BSTR bstrType) put_RequestStoreType;
			public function HRESULT(ICEnroll *self, int32* pdwFlags) get_RequestStoreFlags;
			public function HRESULT(ICEnroll *self, int32 dwFlags) put_RequestStoreFlags;
			public function HRESULT(ICEnroll *self, BSTR* pbstrContainer) get_ContainerName;
			public function HRESULT(ICEnroll *self, BSTR bstrContainer) put_ContainerName;
			public function HRESULT(ICEnroll *self, BSTR* pbstrProvider) get_ProviderName;
			public function HRESULT(ICEnroll *self, BSTR bstrProvider) put_ProviderName;
			public function HRESULT(ICEnroll *self, int32* pdwType) get_ProviderType;
			public function HRESULT(ICEnroll *self, int32 dwType) put_ProviderType;
			public function HRESULT(ICEnroll *self, int32* pdw) get_KeySpec;
			public function HRESULT(ICEnroll *self, int32 dw) put_KeySpec;
			public function HRESULT(ICEnroll *self, int32* pdwFlags) get_ProviderFlags;
			public function HRESULT(ICEnroll *self, int32 dwFlags) put_ProviderFlags;
			public function HRESULT(ICEnroll *self, BOOL* fUseExistingKeys) get_UseExistingKeySet;
			public function HRESULT(ICEnroll *self, BOOL fUseExistingKeys) put_UseExistingKeySet;
			public function HRESULT(ICEnroll *self, int32* pdwFlags) get_GenKeyFlags;
			public function HRESULT(ICEnroll *self, int32 dwFlags) put_GenKeyFlags;
			public function HRESULT(ICEnroll *self, BOOL* fDelete) get_DeleteRequestCert;
			public function HRESULT(ICEnroll *self, BOOL fDelete) put_DeleteRequestCert;
			public function HRESULT(ICEnroll *self, BOOL* fBool) get_WriteCertToCSP;
			public function HRESULT(ICEnroll *self, BOOL fBool) put_WriteCertToCSP;
			public function HRESULT(ICEnroll *self, BSTR* pbstr) get_SPCFileName;
			public function HRESULT(ICEnroll *self, BSTR bstr) put_SPCFileName;
			public function HRESULT(ICEnroll *self, BSTR* pbstr) get_PVKFileName;
			public function HRESULT(ICEnroll *self, BSTR bstr) put_PVKFileName;
			public function HRESULT(ICEnroll *self, BSTR* pbstr) get_HashAlgorithm;
			public function HRESULT(ICEnroll *self, BSTR bstr) put_HashAlgorithm;
		}
		[CRepr]
		public struct ICEnroll2 : ICEnroll
		{
			public const new Guid IID = .(0x704ca730, 0xc90b, 0x11d1, 0x9b, 0xec, 0x00, 0xc0, 0x4f, 0xc2, 0x95, 0xe1);
			
			public function HRESULT(ICEnroll2 *self, BSTR CertType) addCertTypeToRequest;
			public function HRESULT(ICEnroll2 *self, BSTR Name, BSTR Value) addNameValuePairToSignature;
			public function HRESULT(ICEnroll2 *self, BOOL* fBool) get_WriteCertToUserDS;
			public function HRESULT(ICEnroll2 *self, BOOL fBool) put_WriteCertToUserDS;
			public function HRESULT(ICEnroll2 *self, BOOL* fBool) get_EnableT61DNEncoding;
			public function HRESULT(ICEnroll2 *self, BOOL fBool) put_EnableT61DNEncoding;
		}
		[CRepr]
		public struct ICEnroll3 : ICEnroll2
		{
			public const new Guid IID = .(0xc28c2d95, 0xb7de, 0x11d2, 0xa4, 0x21, 0x00, 0xc0, 0x4f, 0x79, 0xfe, 0x8e);
			
			public function HRESULT(ICEnroll3 *self, BSTR PKCS7) InstallPKCS7;
			public function HRESULT(ICEnroll3 *self) Reset;
			public function HRESULT(ICEnroll3 *self, int32* pdwKeySpec) GetSupportedKeySpec;
			public function HRESULT(ICEnroll3 *self, BOOL fMin, BOOL fExchange, int32* pdwKeySize) GetKeyLen;
			public function HRESULT(ICEnroll3 *self, int32 dwIndex, int32 algClass, int32* pdwAlgID) EnumAlgs;
			public function HRESULT(ICEnroll3 *self, int32 algID, BSTR* pbstr) GetAlgName;
			public function HRESULT(ICEnroll3 *self, BOOL fReuseHardwareKeyIfUnableToGenNew) put_ReuseHardwareKeyIfUnableToGenNew;
			public function HRESULT(ICEnroll3 *self, BOOL* fReuseHardwareKeyIfUnableToGenNew) get_ReuseHardwareKeyIfUnableToGenNew;
			public function HRESULT(ICEnroll3 *self, int32 hashAlgID) put_HashAlgID;
			public function HRESULT(ICEnroll3 *self, int32* hashAlgID) get_HashAlgID;
			public function HRESULT(ICEnroll3 *self, BOOL fLimitExchangeKeyToEncipherment) put_LimitExchangeKeyToEncipherment;
			public function HRESULT(ICEnroll3 *self, BOOL* fLimitExchangeKeyToEncipherment) get_LimitExchangeKeyToEncipherment;
			public function HRESULT(ICEnroll3 *self, BOOL fEnableSMIMECapabilities) put_EnableSMIMECapabilities;
			public function HRESULT(ICEnroll3 *self, BOOL* fEnableSMIMECapabilities) get_EnableSMIMECapabilities;
		}
		[CRepr]
		public struct ICEnroll4 : ICEnroll3
		{
			public const new Guid IID = .(0xc1f1188a, 0x2eb5, 0x4a80, 0x84, 0x1b, 0x7e, 0x72, 0x9a, 0x35, 0x6d, 0x90);
			
			public function HRESULT(ICEnroll4 *self, BSTR bstrCert) put_PrivateKeyArchiveCertificate;
			public function HRESULT(ICEnroll4 *self, BSTR* pbstrCert) get_PrivateKeyArchiveCertificate;
			public function HRESULT(ICEnroll4 *self, BSTR bstrThumbPrint) put_ThumbPrint;
			public function HRESULT(ICEnroll4 *self, BSTR* pbstrThumbPrint) get_ThumbPrint;
			public function HRESULT(ICEnroll4 *self, int32 Flags, BSTR strBinary, BSTR* pstrEncoded) binaryToString;
			public function HRESULT(ICEnroll4 *self, int32 Flags, BSTR strEncoded, BSTR* pstrBinary) stringToBinary;
			public function HRESULT(ICEnroll4 *self, int32 Flags, BSTR strName, BSTR strValue) addExtensionToRequest;
			public function HRESULT(ICEnroll4 *self, int32 Flags, BSTR strName, BSTR strValue) addAttributeToRequest;
			public function HRESULT(ICEnroll4 *self, int32 Flags, BSTR strName, BSTR strValue) addNameValuePairToRequest;
			public function HRESULT(ICEnroll4 *self) resetExtensions;
			public function HRESULT(ICEnroll4 *self) resetAttributes;
			public function HRESULT(ICEnroll4 *self, CERT_CREATE_REQUEST_FLAGS Flags, BSTR strDNName, BSTR Usage, BSTR* pstrRequest) createRequest;
			public function HRESULT(ICEnroll4 *self, CERT_CREATE_REQUEST_FLAGS Flags, BSTR strDNName, BSTR strUsage, BSTR strRequestFileName) createFileRequest;
			public function HRESULT(ICEnroll4 *self, BSTR strResponse) acceptResponse;
			public function HRESULT(ICEnroll4 *self, BSTR strResponseFileName) acceptFileResponse;
			public function HRESULT(ICEnroll4 *self, BSTR strResponse, BSTR* pstrCert) getCertFromResponse;
			public function HRESULT(ICEnroll4 *self, BSTR strResponseFileName, BSTR* pstrCert) getCertFromFileResponse;
			public function HRESULT(ICEnroll4 *self, BSTR strPassword, BSTR* pstrPFX) createPFX;
			public function HRESULT(ICEnroll4 *self, BSTR strPassword, BSTR strPFXFileName) createFilePFX;
			public function HRESULT(ICEnroll4 *self, int32 lRequestID, BSTR strCADNS, BSTR strCAName, BSTR strFriendlyName) setPendingRequestInfo;
			public function HRESULT(ICEnroll4 *self, int32 lIndex, PENDING_REQUEST_DESIRED_PROPERTY lDesiredProperty, VARIANT* pvarProperty) enumPendingRequest;
			public function HRESULT(ICEnroll4 *self, BSTR strThumbprint) removePendingRequest;
			public function HRESULT(ICEnroll4 *self, XEKL_KEYSIZE lSizeSpec, XEKL_KEYSPEC lKeySpec, int32* pdwKeySize) GetKeyLenEx;
			public function HRESULT(ICEnroll4 *self, BSTR PKCS7, int32* plCertInstalled) InstallPKCS7Ex;
			public function HRESULT(ICEnroll4 *self, ADDED_CERT_TYPE lType, BSTR bstrOIDOrName, int32 lMajorVersion, BOOL fMinorVersion, int32 lMinorVersion) addCertTypeToRequestEx;
			public function HRESULT(ICEnroll4 *self, BSTR strProvName, int32* plProvType) getProviderType;
			public function HRESULT(ICEnroll4 *self, BSTR bstrCert) put_SignerCertificate;
			public function HRESULT(ICEnroll4 *self, int32 lClientId) put_ClientId;
			public function HRESULT(ICEnroll4 *self, int32* plClientId) get_ClientId;
			public function HRESULT(ICEnroll4 *self, int32 lPropertyId, int32 lReserved, BSTR bstrProperty) addBlobPropertyToCertificate;
			public function HRESULT(ICEnroll4 *self) resetBlobProperties;
			public function HRESULT(ICEnroll4 *self, BOOL fInclude) put_IncludeSubjectKeyID;
			public function HRESULT(ICEnroll4 *self, BOOL* pfInclude) get_IncludeSubjectKeyID;
		}
		[CRepr]
		public struct IEnroll : IUnknown
		{
			public const new Guid IID = .(0xacaa7838, 0x4585, 0x11d1, 0xab, 0x57, 0x00, 0xc0, 0x4f, 0xc2, 0x95, 0xe1);
			
			public function HRESULT(IEnroll *self, PWSTR DNName, PWSTR Usage, PWSTR wszPKCS10FileName) createFilePKCS10WStr;
			public function HRESULT(IEnroll *self, PWSTR wszPKCS7FileName) acceptFilePKCS7WStr;
			public function HRESULT(IEnroll *self, PWSTR DNName, PWSTR Usage, CRYPTOAPI_BLOB* pPkcs10Blob) createPKCS10WStr;
			public function HRESULT(IEnroll *self, CRYPTOAPI_BLOB* pBlobPKCS7) acceptPKCS7Blob;
			public function CERT_CONTEXT*(IEnroll *self, CRYPTOAPI_BLOB* pBlobPKCS7) getCertContextFromPKCS7;
			public function void*(IEnroll *self) getMyStore;
			public function void*(IEnroll *self) getCAStore;
			public function void*(IEnroll *self) getROOTHStore;
			public function HRESULT(IEnroll *self, int32 dwIndex, int32 dwFlags, PWSTR* pbstrProvName) enumProvidersWStr;
			public function HRESULT(IEnroll *self, int32 dwIndex, PWSTR* pbstr) enumContainersWStr;
			public function HRESULT(IEnroll *self, CRYPTOAPI_BLOB pkcs7OrPkcs10) freeRequestInfoBlob;
			public function HRESULT(IEnroll *self, PWSTR* szwName) get_MyStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szwName) put_MyStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szwType) get_MyStoreTypeWStr;
			public function HRESULT(IEnroll *self, PWSTR szwType) put_MyStoreTypeWStr;
			public function HRESULT(IEnroll *self, int32* pdwFlags) get_MyStoreFlags;
			public function HRESULT(IEnroll *self, int32 dwFlags) put_MyStoreFlags;
			public function HRESULT(IEnroll *self, PWSTR* szwName) get_CAStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szwName) put_CAStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szwType) get_CAStoreTypeWStr;
			public function HRESULT(IEnroll *self, PWSTR szwType) put_CAStoreTypeWStr;
			public function HRESULT(IEnroll *self, int32* pdwFlags) get_CAStoreFlags;
			public function HRESULT(IEnroll *self, int32 dwFlags) put_CAStoreFlags;
			public function HRESULT(IEnroll *self, PWSTR* szwName) get_RootStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szwName) put_RootStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szwType) get_RootStoreTypeWStr;
			public function HRESULT(IEnroll *self, PWSTR szwType) put_RootStoreTypeWStr;
			public function HRESULT(IEnroll *self, int32* pdwFlags) get_RootStoreFlags;
			public function HRESULT(IEnroll *self, int32 dwFlags) put_RootStoreFlags;
			public function HRESULT(IEnroll *self, PWSTR* szwName) get_RequestStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szwName) put_RequestStoreNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szwType) get_RequestStoreTypeWStr;
			public function HRESULT(IEnroll *self, PWSTR szwType) put_RequestStoreTypeWStr;
			public function HRESULT(IEnroll *self, int32* pdwFlags) get_RequestStoreFlags;
			public function HRESULT(IEnroll *self, int32 dwFlags) put_RequestStoreFlags;
			public function HRESULT(IEnroll *self, PWSTR* szwContainer) get_ContainerNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szwContainer) put_ContainerNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szwProvider) get_ProviderNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szwProvider) put_ProviderNameWStr;
			public function HRESULT(IEnroll *self, int32* pdwType) get_ProviderType;
			public function HRESULT(IEnroll *self, int32 dwType) put_ProviderType;
			public function HRESULT(IEnroll *self, int32* pdw) get_KeySpec;
			public function HRESULT(IEnroll *self, int32 dw) put_KeySpec;
			public function HRESULT(IEnroll *self, int32* pdwFlags) get_ProviderFlags;
			public function HRESULT(IEnroll *self, int32 dwFlags) put_ProviderFlags;
			public function HRESULT(IEnroll *self, BOOL* fUseExistingKeys) get_UseExistingKeySet;
			public function HRESULT(IEnroll *self, BOOL fUseExistingKeys) put_UseExistingKeySet;
			public function HRESULT(IEnroll *self, int32* pdwFlags) get_GenKeyFlags;
			public function HRESULT(IEnroll *self, int32 dwFlags) put_GenKeyFlags;
			public function HRESULT(IEnroll *self, BOOL* fDelete) get_DeleteRequestCert;
			public function HRESULT(IEnroll *self, BOOL fDelete) put_DeleteRequestCert;
			public function HRESULT(IEnroll *self, BOOL* fBool) get_WriteCertToUserDS;
			public function HRESULT(IEnroll *self, BOOL fBool) put_WriteCertToUserDS;
			public function HRESULT(IEnroll *self, BOOL* fBool) get_EnableT61DNEncoding;
			public function HRESULT(IEnroll *self, BOOL fBool) put_EnableT61DNEncoding;
			public function HRESULT(IEnroll *self, BOOL* fBool) get_WriteCertToCSP;
			public function HRESULT(IEnroll *self, BOOL fBool) put_WriteCertToCSP;
			public function HRESULT(IEnroll *self, PWSTR* szw) get_SPCFileNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szw) put_SPCFileNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szw) get_PVKFileNameWStr;
			public function HRESULT(IEnroll *self, PWSTR szw) put_PVKFileNameWStr;
			public function HRESULT(IEnroll *self, PWSTR* szw) get_HashAlgorithmWStr;
			public function HRESULT(IEnroll *self, PWSTR szw) put_HashAlgorithmWStr;
			public function HRESULT(IEnroll *self, CERT_CONTEXT** ppCertContext) get_RenewalCertificate;
			public function HRESULT(IEnroll *self, CERT_CONTEXT* pCertContext) put_RenewalCertificate;
			public function HRESULT(IEnroll *self, PWSTR szw) AddCertTypeToRequestWStr;
			public function HRESULT(IEnroll *self, PWSTR Name, PWSTR Value) AddNameValuePairToSignatureWStr;
			public function HRESULT(IEnroll *self, CERT_EXTENSIONS* pCertExtensions) AddExtensionsToRequest;
			public function HRESULT(IEnroll *self, CRYPT_ATTRIBUTES* pAttributes) AddAuthenticatedAttributesToPKCS7Request;
			public function HRESULT(IEnroll *self, CRYPTOAPI_BLOB* pRequest, CERT_CONTEXT* pSigningCertContext, CRYPTOAPI_BLOB* pPkcs7Blob) CreatePKCS7RequestFromRequest;
		}
		[CRepr]
		public struct IEnroll2 : IEnroll
		{
			public const new Guid IID = .(0xc080e199, 0xb7df, 0x11d2, 0xa4, 0x21, 0x00, 0xc0, 0x4f, 0x79, 0xfe, 0x8e);
			
			public function HRESULT(IEnroll2 *self, CRYPTOAPI_BLOB* pBlobPKCS7) InstallPKCS7Blob;
			public function HRESULT(IEnroll2 *self) Reset;
			public function HRESULT(IEnroll2 *self, int32* pdwKeySpec) GetSupportedKeySpec;
			public function HRESULT(IEnroll2 *self, BOOL fMin, BOOL fExchange, int32* pdwKeySize) GetKeyLen;
			public function HRESULT(IEnroll2 *self, int32 dwIndex, int32 algClass, int32* pdwAlgID) EnumAlgs;
			public function HRESULT(IEnroll2 *self, int32 algID, PWSTR* ppwsz) GetAlgNameWStr;
			public function HRESULT(IEnroll2 *self, BOOL fReuseHardwareKeyIfUnableToGenNew) put_ReuseHardwareKeyIfUnableToGenNew;
			public function HRESULT(IEnroll2 *self, BOOL* fReuseHardwareKeyIfUnableToGenNew) get_ReuseHardwareKeyIfUnableToGenNew;
			public function HRESULT(IEnroll2 *self, int32 hashAlgID) put_HashAlgID;
			public function HRESULT(IEnroll2 *self, int32* hashAlgID) get_HashAlgID;
			public function HRESULT(IEnroll2 *self, void* hStore) SetHStoreMy;
			public function HRESULT(IEnroll2 *self, void* hStore) SetHStoreCA;
			public function HRESULT(IEnroll2 *self, void* hStore) SetHStoreROOT;
			public function HRESULT(IEnroll2 *self, void* hStore) SetHStoreRequest;
			public function HRESULT(IEnroll2 *self, BOOL fLimitExchangeKeyToEncipherment) put_LimitExchangeKeyToEncipherment;
			public function HRESULT(IEnroll2 *self, BOOL* fLimitExchangeKeyToEncipherment) get_LimitExchangeKeyToEncipherment;
			public function HRESULT(IEnroll2 *self, BOOL fEnableSMIMECapabilities) put_EnableSMIMECapabilities;
			public function HRESULT(IEnroll2 *self, BOOL* fEnableSMIMECapabilities) get_EnableSMIMECapabilities;
		}
		[CRepr]
		public struct IEnroll4 : IEnroll2
		{
			public const new Guid IID = .(0xf8053fe5, 0x78f4, 0x448f, 0xa0, 0xdb, 0x41, 0xd6, 0x1b, 0x73, 0x44, 0x6b);
			
			public function HRESULT(IEnroll4 *self, CRYPTOAPI_BLOB thumbPrintBlob) put_ThumbPrintWStr;
			public function HRESULT(IEnroll4 *self, CRYPTOAPI_BLOB* thumbPrintBlob) get_ThumbPrintWStr;
			public function HRESULT(IEnroll4 *self, CERT_CONTEXT* pPrivateKeyArchiveCert) SetPrivateKeyArchiveCertificate;
			public function CERT_CONTEXT*(IEnroll4 *self) GetPrivateKeyArchiveCertificate;
			public function HRESULT(IEnroll4 *self, int32 Flags, CRYPTOAPI_BLOB* pblobBinary, PWSTR* ppwszString) binaryBlobToString;
			public function HRESULT(IEnroll4 *self, int32 Flags, PWSTR pwszString, CRYPTOAPI_BLOB* pblobBinary, int32* pdwSkip, int32* pdwFlags) stringToBinaryBlob;
			public function HRESULT(IEnroll4 *self, int32 Flags, PWSTR pwszName, CRYPTOAPI_BLOB* pblobValue) addExtensionToRequestWStr;
			public function HRESULT(IEnroll4 *self, int32 Flags, PWSTR pwszName, CRYPTOAPI_BLOB* pblobValue) addAttributeToRequestWStr;
			public function HRESULT(IEnroll4 *self, int32 Flags, PWSTR pwszName, PWSTR pwszValue) addNameValuePairToRequestWStr;
			public function HRESULT(IEnroll4 *self) resetExtensions;
			public function HRESULT(IEnroll4 *self) resetAttributes;
			public function HRESULT(IEnroll4 *self, CERT_CREATE_REQUEST_FLAGS Flags, PWSTR pwszDNName, PWSTR pwszUsage, CRYPTOAPI_BLOB* pblobRequest) createRequestWStr;
			public function HRESULT(IEnroll4 *self, CERT_CREATE_REQUEST_FLAGS Flags, PWSTR pwszDNName, PWSTR pwszUsage, PWSTR pwszRequestFileName) createFileRequestWStr;
			public function HRESULT(IEnroll4 *self, CRYPTOAPI_BLOB* pblobResponse) acceptResponseBlob;
			public function HRESULT(IEnroll4 *self, PWSTR pwszResponseFileName) acceptFileResponseWStr;
			public function HRESULT(IEnroll4 *self, CRYPTOAPI_BLOB* pblobResponse, CERT_CONTEXT** ppCertContext) getCertContextFromResponseBlob;
			public function HRESULT(IEnroll4 *self, PWSTR pwszResponseFileName, CERT_CONTEXT** ppCertContext) getCertContextFromFileResponseWStr;
			public function HRESULT(IEnroll4 *self, PWSTR pwszPassword, CRYPTOAPI_BLOB* pblobPFX) createPFXWStr;
			public function HRESULT(IEnroll4 *self, PWSTR pwszPassword, PWSTR pwszPFXFileName) createFilePFXWStr;
			public function HRESULT(IEnroll4 *self, int32 lRequestID, PWSTR pwszCADNS, PWSTR pwszCAName, PWSTR pwszFriendlyName) setPendingRequestInfoWStr;
			public function HRESULT(IEnroll4 *self, int32 lIndex, PENDING_REQUEST_DESIRED_PROPERTY lDesiredProperty, void* ppProperty) enumPendingRequestWStr;
			public function HRESULT(IEnroll4 *self, CRYPTOAPI_BLOB thumbPrintBlob) removePendingRequestWStr;
			public function HRESULT(IEnroll4 *self, XEKL_KEYSIZE lSizeSpec, XEKL_KEYSPEC lKeySpec, int32* pdwKeySize) GetKeyLenEx;
			public function HRESULT(IEnroll4 *self, CRYPTOAPI_BLOB* pBlobPKCS7, int32* plCertInstalled) InstallPKCS7BlobEx;
			public function HRESULT(IEnroll4 *self, ADDED_CERT_TYPE lType, PWSTR pwszOIDOrName, int32 lMajorVersion, BOOL fMinorVersion, int32 lMinorVersion) AddCertTypeToRequestWStrEx;
			public function HRESULT(IEnroll4 *self, PWSTR pwszProvName, int32* plProvType) getProviderTypeWStr;
			public function HRESULT(IEnroll4 *self, int32 lPropertyId, int32 lReserved, CRYPTOAPI_BLOB* pBlobProperty) addBlobPropertyToCertificateWStr;
			public function HRESULT(IEnroll4 *self, CERT_CONTEXT* pSignerCert) SetSignerCertificate;
			public function HRESULT(IEnroll4 *self, int32 lClientId) put_ClientId;
			public function HRESULT(IEnroll4 *self, int32* plClientId) get_ClientId;
			public function HRESULT(IEnroll4 *self, BOOL fInclude) put_IncludeSubjectKeyID;
			public function HRESULT(IEnroll4 *self, BOOL* pfInclude) get_IncludeSubjectKeyID;
		}
		[CRepr]
		public struct ICertRequestD : IUnknown
		{
			public const new Guid IID = .(0xd99e6e70, 0xfc88, 0x11d0, 0xb4, 0x98, 0x00, 0xa0, 0xc9, 0x03, 0x12, 0xf3);
			
			public function HRESULT(ICertRequestD *self, uint32 dwFlags, PWSTR pwszAuthority, uint32* pdwRequestId, uint32* pdwDisposition, PWSTR pwszAttributes, CERTTRANSBLOB* pctbRequest, CERTTRANSBLOB* pctbCertChain, CERTTRANSBLOB* pctbEncodedCert, CERTTRANSBLOB* pctbDispositionMessage) Request;
			public function HRESULT(ICertRequestD *self, uint32 fchain, PWSTR pwszAuthority, CERTTRANSBLOB* pctbOut) GetCACert;
			public function HRESULT(ICertRequestD *self, PWSTR pwszAuthority) Ping;
		}
		[CRepr]
		public struct ICertRequestD2 : ICertRequestD
		{
			public const new Guid IID = .(0x5422fd3a, 0xd4b8, 0x4cef, 0xa1, 0x2e, 0xe8, 0x7d, 0x4c, 0xa2, 0x2e, 0x90);
			
			public function HRESULT(ICertRequestD2 *self, PWSTR pwszAuthority, uint32 dwFlags, PWSTR pwszSerialNumber, uint32* pdwRequestId, uint32* pdwDisposition, PWSTR pwszAttributes, CERTTRANSBLOB* pctbRequest, CERTTRANSBLOB* pctbFullResponse, CERTTRANSBLOB* pctbEncodedCert, CERTTRANSBLOB* pctbDispositionMessage) Request2;
			public function HRESULT(ICertRequestD2 *self, PWSTR pwszAuthority, int32 PropId, int32 PropIndex, int32 PropType, CERTTRANSBLOB* pctbPropertyValue) GetCAProperty;
			public function HRESULT(ICertRequestD2 *self, PWSTR pwszAuthority, int32* pcProperty, CERTTRANSBLOB* pctbPropInfo) GetCAPropertyInfo;
			public function HRESULT(ICertRequestD2 *self, PWSTR pwszAuthority) Ping2;
		}
		
		// --- Functions ---
		
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvIsServerOnlineW(PWSTR pwszServerName, BOOL* pfServerOnline);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupGetDynamicFileListW(void* hbc, PWSTR* ppwszzFileList, uint32* pcbSize);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupPrepareW(PWSTR pwszServerName, uint32 grbitJet, CSBACKUP_TYPE dwBackupFlags, void** phbc);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupGetDatabaseNamesW(void* hbc, PWSTR* ppwszzAttachmentInformation, uint32* pcbSize);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupOpenFileW(void* hbc, PWSTR pwszAttachmentName, uint32 cbReadHintSize, LARGE_INTEGER* pliFileSize);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupRead(void* hbc, void* pvBuffer, uint32 cbBuffer, uint32* pcbRead);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupClose(void* hbc);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupGetBackupLogsW(void* hbc, PWSTR* ppwszzBackupLogFiles, uint32* pcbSize);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupTruncateLogs(void* hbc);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvBackupEnd(void* hbc);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern void CertSrvBackupFree(void* pv);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvRestoreGetDatabaseLocationsW(void* hbc, PWSTR* ppwszzDatabaseLocationList, uint32* pcbSize);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvRestorePrepareW(PWSTR pwszServerName, uint32 dwRestoreFlags, void** phbc);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvRestoreRegisterW(void* hbc, PWSTR pwszCheckPointFilePath, PWSTR pwszLogPath, CSEDB_RSTMAPW* rgrstmap, int32 crstmap, PWSTR pwszBackupLogPath, uint32 genLow, uint32 genHigh);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvRestoreRegisterThroughFile(void* hbc, PWSTR pwszCheckPointFilePath, PWSTR pwszLogPath, CSEDB_RSTMAPW* rgrstmap, int32 crstmap, PWSTR pwszBackupLogPath, uint32 genLow, uint32 genHigh);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvRestoreRegisterComplete(void* hbc, HRESULT hrRestoreState);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvRestoreEnd(void* hbc);
		[Import("certadm.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern HRESULT CertSrvServerControlW(PWSTR pwszServerName, uint32 dwControlFlags, uint32* pcbOut, uint8** ppbOut);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstGetTrustAnchors(UNICODE_STRING* pTargetName, uint32 cCriteria, CERT_SELECT_CRITERIA* rgpCriteria, SecPkgContext_IssuerListInfoEx** ppTrustedIssuers);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstGetTrustAnchorsEx(UNICODE_STRING* pTargetName, uint32 cCriteria, CERT_SELECT_CRITERIA* rgpCriteria, CERT_CONTEXT* pCertContext, SecPkgContext_IssuerListInfoEx** ppTrustedIssuers);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstGetCertificateChain(CERT_CONTEXT* pCert, SecPkgContext_IssuerListInfoEx* pTrustedIssuers, CERT_CHAIN_CONTEXT** ppCertChainContext);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstGetCertificates(UNICODE_STRING* pTargetName, uint32 cCriteria, CERT_SELECT_CRITERIA* rgpCriteria, BOOL bIsClient, uint32* pdwCertChainContextCount, CERT_CHAIN_CONTEXT*** ppCertChainContexts);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstAcquirePrivateKey(CERT_CONTEXT* pCert);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstValidate(UNICODE_STRING* pTargetName, BOOL bIsClient, CERT_USAGE_MATCH* pRequestedIssuancePolicy, void** phAdditionalCertStore, CERT_CONTEXT* pCert, Guid* pProvGUID);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstMapCertificate(CERT_CONTEXT* pCert, LSA_TOKEN_INFORMATION_TYPE* pTokenInformationType, void** ppTokenInformation);
		[Import("certpoleng.dll"), CLink, CallingConvention(.Stdcall)]
		public static extern NTSTATUS PstGetUserNameForCertificate(CERT_CONTEXT* pCertContext, UNICODE_STRING* UserName);
		
	}
}
